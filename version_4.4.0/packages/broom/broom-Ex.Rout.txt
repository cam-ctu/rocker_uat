
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "broom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('broom')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("augment.Mclust")
> ### * augment.Mclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.Mclust
> ### Title: Augment data with information from a(n) Mclust object
> ### Aliases: augment.Mclust
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mclust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load library for models and data
+ library(mclust)
+ 
+ # load data manipulation libraries
+ library(dplyr)
+ library(tibble)
+ library(purrr)
+ library(tidyr)
+ 
+ set.seed(27)
+ 
+ centers <- tibble(
+   cluster = factor(1:3),
+   # number points in each cluster
+   num_points = c(100, 150, 50),
+   # x1 coordinate of cluster center
+   x1 = c(5, 0, -3),
+   # x2 coordinate of cluster center
+   x2 = c(-1, 1, -2)
+ )
+ 
+ points <- centers %>%
+   mutate(
+     x1 = map2(num_points, x1, rnorm),
+     x2 = map2(num_points, x2, rnorm)
+   ) %>%
+   select(-num_points, -cluster) %>%
+   unnest(c(x1, x2))
+ 
+ # fit model
+ m <- Mclust(points)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m, points)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.betamfx")
> ### * augment.betamfx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.betamfx
> ### Title: Augment data with information from a(n) betamfx object
> ### Aliases: augment.betamfx
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mfx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(mfx)
+ 
+ # Simulate some data
+ set.seed(12345)
+ n <- 1000
+ x <- rnorm(n)
+ 
+ # Beta outcome
+ y <- rbeta(n, shape1 = plogis(1 + 0.5 * x), shape2 = (abs(0.2 * x)))
+ # Use Smithson and Verkuilen correction
+ y <- (y * (n - 1) + 0.5) / n
+ 
+ d <- data.frame(y, x)
+ mod_betamfx <- betamfx(y ~ x | x, data = d)
+ 
+ tidy(mod_betamfx, conf.int = TRUE)
+ 
+ # Compare with the naive model coefficients of the equivalent betareg call (not run)
+ # tidy(betamfx(y ~ x | x, data = d), conf.int = TRUE)
+ 
+ augment(mod_betamfx)
+ glance(mod_betamfx)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.betareg")
> ### * augment.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.betareg
> ### Title: Augment data with information from a(n) betareg object
> ### Aliases: augment.betareg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("betareg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(betareg)
+ 
+ # load dats
+ data("GasolineYield", package = "betareg")
+ 
+ # fit model
+ mod <- betareg(yield ~ batch + temp, data = GasolineYield)
+ 
+ mod
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ tidy(mod, conf.int = TRUE, conf.level = .99)
+ 
+ augment(mod)
+ 
+ glance(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.clm")
> ### * augment.clm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.clm
> ### Title: Augment data with information from a(n) clm object
> ### Aliases: augment.clm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ordinal")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ordinal)
+ 
+ # fit model
+ fit <- clm(rating ~ temp * contact, data = wine)
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ tidy(fit, conf.int = TRUE, conf.level = 0.9)
+ tidy(fit, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
+ 
+ glance(fit)
+ augment(fit, type.predict = "prob")
+ augment(fit, type.predict = "class")
+ 
+ # ...and again with another model specification
+ fit2 <- clm(rating ~ temp, nominal = ~contact, data = wine)
+ 
+ tidy(fit2)
+ glance(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(ordinal)
> fit <- clm(rating ~ temp * contact, data = wine)
> tidy(fit)
# A tibble: 7 × 6
  term                estimate std.error statistic  p.value coef.type
  <chr>                  <dbl>     <dbl>     <dbl>    <dbl> <chr>    
1 1|2                   -1.41      0.545    -2.59  9.66e- 3 intercept
2 2|3                    1.14      0.510     2.24  2.48e- 2 intercept
3 3|4                    3.38      0.638     5.29  1.21e- 7 intercept
4 4|5                    4.94      0.751     6.58  4.66e-11 intercept
5 tempwarm               2.32      0.701     3.31  9.28e- 4 location 
6 contactyes             1.35      0.660     2.04  4.13e- 2 location 
7 tempwarm:contactyes    0.360     0.924     0.389 6.97e- 1 location 
> tidy(fit, conf.int = TRUE, conf.level = 0.9)
# A tibble: 7 × 8
  term        estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           -1.41      0.545    -2.59  9.66e- 3   NA         NA    intercept
2 2|3            1.14      0.510     2.24  2.48e- 2   NA         NA    intercept
3 3|4            3.38      0.638     5.29  1.21e- 7   NA         NA    intercept
4 4|5            4.94      0.751     6.58  4.66e-11   NA         NA    intercept
5 tempwarm       2.32      0.701     3.31  9.28e- 4    1.20       3.52 location 
6 contactyes     1.35      0.660     2.04  4.13e- 2    0.284      2.47 location 
7 tempwarm:c…    0.360     0.924     0.389 6.97e- 1   -1.17       1.89 location 
> tidy(fit, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
# A tibble: 7 × 8
  term        estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2            0.244     0.545    -2.59  9.66e- 3   0.0837     0.710 intercept
2 2|3            3.14      0.510     2.24  2.48e- 2   1.16       8.52  intercept
3 3|4           29.3       0.638     5.29  1.21e- 7   8.38     102.    intercept
4 4|5          140.        0.751     6.58  4.66e-11  32.1      610.    intercept
5 tempwarm      10.2       0.701     3.31  9.28e- 4   2.58      40.2   location 
6 contactyes     3.85      0.660     2.04  4.13e- 2   1.05      14.0   location 
7 tempwarm:c…    1.43      0.924     0.389 6.97e- 1   0.234      8.76  location 
> glance(fit)
# A tibble: 1 × 6
    edf   AIC   BIC logLik   df.residual  nobs
  <int> <dbl> <dbl> <logLik>       <dbl> <dbl>
1     7  187.  203. -86.4162          65    72
> augment(fit, type.predict = "prob")
# A tibble: 72 × 4
   rating temp  contact .fitted
   <ord>  <fct> <fct>     <dbl>
 1 2      cold  no       0.562 
 2 3      cold  no       0.209 
 3 3      cold  yes      0.435 
 4 4      cold  yes      0.0894
 5 4      warm  no       0.190 
 6 4      warm  no       0.190 
 7 5      warm  yes      0.286 
 8 5      warm  yes      0.286 
 9 1      cold  no       0.196 
10 2      cold  no       0.562 
# ℹ 62 more rows
> augment(fit, type.predict = "class")
# A tibble: 72 × 4
   rating temp  contact .fitted
   <ord>  <fct> <fct>   <fct>  
 1 2      cold  no      2      
 2 3      cold  no      2      
 3 3      cold  yes     3      
 4 4      cold  yes     3      
 5 4      warm  no      3      
 6 4      warm  no      3      
 7 5      warm  yes     4      
 8 5      warm  yes     4      
 9 1      cold  no      2      
10 2      cold  no      2      
# ℹ 62 more rows
> fit2 <- clm(rating ~ temp, nominal = ~contact, data = wine)
> tidy(fit2)
# A tibble: 9 × 6
  term            estimate std.error statistic      p.value coef.type
  <chr>              <dbl>     <dbl>     <dbl>        <dbl> <chr>    
1 1|2.(Intercept)    -1.32     0.562     -2.35 0.0186       intercept
2 2|3.(Intercept)     1.25     0.475      2.63 0.00866      intercept
3 3|4.(Intercept)     3.55     0.656      5.41 0.0000000625 intercept
4 4|5.(Intercept)     4.66     0.860      5.42 0.0000000608 intercept
5 1|2.contactyes     -1.62     1.16      -1.39 0.164        intercept
6 2|3.contactyes     -1.51     0.591     -2.56 0.0105       intercept
7 3|4.contactyes     -1.67     0.649     -2.58 0.00985      intercept
8 4|5.contactyes     -1.05     0.897     -1.17 0.241        intercept
9 tempwarm            2.52     0.535      4.71 0.00000250   location 
> glance(fit2)
# A tibble: 1 × 6
    edf   AIC   BIC logLik    df.residual  nobs
  <int> <dbl> <dbl> <logLik>        <dbl> <dbl>
1     9  190.  211. -86.20855          63    72
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ordinal’

> nameEx("augment.coxph")
> ### * augment.coxph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.coxph
> ### Title: Augment data with information from a(n) coxph object
> ### Aliases: augment.coxph
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ cfit <- coxph(Surv(time, status) ~ age + sex, lung)
+ 
+ # summarize model fit with tidiers
+ tidy(cfit)
+ tidy(cfit, exponentiate = TRUE)
+ 
+ lp <- augment(cfit, lung)
+ risks <- augment(cfit, lung, type.predict = "risk")
+ expected <- augment(cfit, lung, type.predict = "expected")
+ 
+ glance(cfit)
+ 
+ # also works on clogit models
+ resp <- levels(logan$occupation)
+ n <- nrow(logan)
+ indx <- rep(1:n, length(resp))
+ logan2 <- data.frame(
+   logan[indx, ],
+   id = indx,
+   tocc = factor(rep(resp, each = n))
+ )
+ 
+ logan2$case <- (logan2$occupation == logan2$tocc)
+ 
+ cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
+ 
+ tidy(cl)
+ glance(cl)
+ 
+ library(ggplot2)
+ 
+ ggplot(lp, aes(age, .fitted, color = sex)) +
+   geom_point()
+ 
+ ggplot(risks, aes(age, .fitted, color = sex)) +
+   geom_point()
+ 
+ ggplot(expected, aes(time, .fitted, color = sex)) +
+   geom_point()
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> tidy(cfit)
# A tibble: 2 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 age     0.0170   0.00922      1.85 0.0646 
2 sex    -0.513    0.167       -3.06 0.00218
> tidy(cfit, exponentiate = TRUE)
# A tibble: 2 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 age      1.02    0.00922      1.85 0.0646 
2 sex      0.599   0.167       -3.06 0.00218
> lp <- augment(cfit, lung)
> risks <- augment(cfit, lung, type.predict = "risk")
> expected <- augment(cfit, lung, type.predict = "expected")
> glance(cfit)
# A tibble: 1 × 18
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1   228    165          14.1    0.000857         13.7    0.00105           13.5
# ℹ 11 more variables: p.value.wald <dbl>, statistic.robust <dbl>,
#   p.value.robust <dbl>, r.squared <dbl>, r.squared.max <dbl>,
#   concordance <dbl>, std.error.concordance <dbl>, logLik <dbl>, AIC <dbl>,
#   BIC <dbl>, nobs <int>
> resp <- levels(logan$occupation)
> n <- nrow(logan)
> indx <- rep(1:n, length(resp))
> logan2 <- data.frame(logan[indx, ], id = indx, tocc = factor(rep(resp, 
+     each = n)))
> logan2$case <- (logan2$occupation == logan2$tocc)
> cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
> tidy(cl)
# A tibble: 9 × 5
  term                       estimate std.error statistic   p.value
  <chr>                         <dbl>     <dbl>     <dbl>     <dbl>
1 toccfarm                     -1.90     1.38       -1.37  1.70e- 1
2 toccoperatives                1.17     0.566       2.06  3.91e- 2
3 toccprofessional             -8.10     0.699     -11.6   4.45e-31
4 toccsales                    -5.03     0.770      -6.53  6.54e-11
5 tocccraftsmen:education      -0.332    0.0569     -5.84  5.13e- 9
6 toccfarm:education           -0.370    0.116      -3.18  1.47e- 3
7 toccoperatives:education     -0.422    0.0584     -7.23  4.98e-13
8 toccprofessional:education    0.278    0.0510      5.45  4.94e- 8
9 toccsales:education          NA        0          NA    NA       
> glance(cl)
# A tibble: 1 × 18
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1  4190    838          666.   1.90e-138         682.  5.01e-142           414.
# ℹ 11 more variables: p.value.wald <dbl>, statistic.robust <dbl>,
#   p.value.robust <dbl>, r.squared <dbl>, r.squared.max <dbl>,
#   concordance <dbl>, std.error.concordance <dbl>, logLik <dbl>, AIC <dbl>,
#   BIC <dbl>, nobs <int>
> library(ggplot2)
> ggplot(lp, aes(age, .fitted, color = sex)) + geom_point()
> ggplot(risks, aes(age, .fitted, color = sex)) + geom_point()
> ggplot(expected, aes(time, .fitted, color = sex)) + geom_point()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("augment.decomposed.ts")
> ### * augment.decomposed.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.decomposed.ts
> ### Title: Augment data with information from a(n) decomposed.ts object
> ### Aliases: augment.decomposed.ts decompose_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # time series of temperatures in Nottingham, 1920-1939:
+ nottem
+ 
+ # perform seasonal decomposition on the data with both decompose
+ # and stl:
+ d1 <- decompose(nottem)
+ d2 <- stl(nottem, s.window = "periodic", robust = TRUE)
+ 
+ # compare the original series to its decompositions.
+ 
+ cbind(
+   tidy(nottem), augment(d1),
+   augment(d2)
+ )
+ 
+ # visually compare seasonal decompositions in tidy data frames.
+ 
+ library(tibble)
+ library(dplyr)
+ library(tidyr)
+ library(ggplot2)
+ 
+ decomps <- tibble(
+   # turn the ts objects into data frames.
+   series = list(as.data.frame(nottem), as.data.frame(nottem)),
+   # add the models in, one for each row.
+   decomp = c("decompose", "stl"),
+   model = list(d1, d2)
+ ) %>%
+   rowwise() %>%
+   # pull out the fitted data using broom::augment.
+   mutate(augment = list(broom::augment(model))) %>%
+   ungroup() %>%
+   # unnest the data frames into a tidy arrangement of
+   # the series next to its seasonal decomposition, grouped
+   # by the method (stl or decompose).
+   group_by(decomp) %>%
+   unnest(c(series, augment)) %>%
+   mutate(index = 1:n()) %>%
+   ungroup() %>%
+   select(decomp, index, x, adjusted = .seasadj)
+ 
+ ggplot(decomps) +
+   geom_line(aes(x = index, y = x), colour = "black") +
+   geom_line(aes(
+     x = index, y = adjusted, colour = decomp,
+     group = decomp
+   ))
+ ## Don't show: 
+ }) # examplesIf
> nottem
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1920 40.6 40.8 44.4 46.7 54.1 58.5 57.7 56.4 54.3 50.5 42.9 39.8
1921 44.2 39.8 45.1 47.0 54.1 58.7 66.3 59.9 57.0 54.2 39.7 42.8
1922 37.5 38.7 39.5 42.1 55.7 57.8 56.8 54.3 54.3 47.1 41.8 41.7
1923 41.8 40.1 42.9 45.8 49.2 52.7 64.2 59.6 54.4 49.2 36.3 37.6
1924 39.3 37.5 38.3 45.5 53.2 57.7 60.8 58.2 56.4 49.8 44.4 43.6
1925 40.0 40.5 40.8 45.1 53.8 59.4 63.5 61.0 53.0 50.0 38.1 36.3
1926 39.2 43.4 43.4 48.9 50.6 56.8 62.5 62.0 57.5 46.7 41.6 39.8
1927 39.4 38.5 45.3 47.1 51.7 55.0 60.4 60.5 54.7 50.3 42.3 35.2
1928 40.8 41.1 42.8 47.3 50.9 56.4 62.2 60.5 55.4 50.2 43.0 37.3
1929 34.8 31.3 41.0 43.9 53.1 56.9 62.5 60.3 59.8 49.2 42.9 41.9
1930 41.6 37.1 41.2 46.9 51.2 60.4 60.1 61.6 57.0 50.9 43.0 38.8
1931 37.1 38.4 38.4 46.5 53.5 58.4 60.6 58.2 53.8 46.6 45.5 40.6
1932 42.4 38.4 40.3 44.6 50.9 57.0 62.1 63.5 56.3 47.3 43.6 41.8
1933 36.2 39.3 44.5 48.7 54.2 60.8 65.5 64.9 60.1 50.2 42.1 35.8
1934 39.4 38.2 40.4 46.9 53.4 59.6 66.5 60.4 59.2 51.2 42.8 45.8
1935 40.0 42.6 43.5 47.1 50.0 60.5 64.6 64.0 56.8 48.6 44.2 36.4
1936 37.3 35.0 44.0 43.9 52.7 58.6 60.0 61.1 58.1 49.6 41.6 41.3
1937 40.8 41.0 38.4 47.4 54.1 58.6 61.4 61.8 56.3 50.9 41.4 37.1
1938 42.1 41.2 47.3 46.6 52.4 59.0 59.6 60.4 57.0 50.7 47.8 39.2
1939 39.4 40.9 42.4 47.8 52.4 58.0 60.7 61.8 58.2 46.7 46.6 37.8
> d1 <- decompose(nottem)
> d2 <- stl(nottem, s.window = "periodic", robust = TRUE)
> cbind(tidy(nottem), augment(d1), augment(d2))
       index value  .seasonal   .trend   .remainder .seasadj  .seasonal
1   1920.000  40.6 -9.3393640       NA           NA 49.93936 -9.3419811
2   1920.083  40.8 -9.8998904       NA           NA 50.69989 -9.5256227
3   1920.167  44.4 -6.9466009       NA           NA 51.34660 -7.0008077
4   1920.250  46.7 -2.7573465       NA           NA 49.45735 -2.8175429
5   1920.333  54.1  3.4533991       NA           NA 50.64660  3.3639836
6   1920.417  58.5  8.9865132       NA           NA 49.51349  9.0952310
7   1920.500  57.7 12.9672149 49.04167 -4.308881579 44.73279 12.8624908
8   1920.583  56.4 11.4591009 49.15000 -4.209100877 44.94090 11.7116742
9   1920.667  54.3  7.4001096 49.13750 -2.237609649 46.89989  7.4288506
10  1920.750  50.5  0.6547149 49.17917  0.666118421 49.84529  0.3474728
11  1920.833  42.9 -6.6176535 49.19167  0.325986842 49.51765 -6.5449727
12  1920.917  39.8 -9.3601974 49.20000 -0.039802632 49.16020 -9.5787757
13  1921.000  44.2 -9.3393640 49.56667  3.972697368 53.53936 -9.3419811
14  1921.083  39.8 -9.8998904 50.07083 -0.370942982 49.69989 -9.5256227
15  1921.167  45.1 -6.9466009 50.32917  1.717434211 52.04660 -7.0008077
16  1921.250  47.0 -2.7573465 50.59583 -0.838486842 49.75735 -2.8175429
17  1921.333  54.1  3.4533991 50.61667  0.029934211 50.64660  3.3639836
18  1921.417  58.7  8.9865132 50.60833 -0.894846491 49.71349  9.0952310
19  1921.500  66.3 12.9672149 50.45417  2.878618421 53.33279 12.8624908
20  1921.583  59.9 11.4591009 50.12917 -1.688267544 48.44090 11.7116742
21  1921.667  57.0  7.4001096 49.85000 -0.250109649 49.59989  7.4288506
22  1921.750  54.2  0.6547149 49.41250  4.132785088 53.54529  0.3474728
23  1921.833  39.7 -6.6176535 49.27500 -2.957346491 46.31765 -6.5449727
24  1921.917  42.8 -9.3601974 49.30417  2.856030702 52.16020 -9.5787757
25  1922.000  37.5 -9.3393640 48.87083 -2.031469298 46.83936 -9.3419811
26  1922.083  38.7 -9.8998904 48.24167  0.358223684 48.59989 -9.5256227
27  1922.167  39.5 -6.9466009 47.89583 -1.449232456 46.44660 -7.0008077
28  1922.250  42.1 -2.7573465 47.48750 -2.630153509 44.85735 -2.8175429
29  1922.333  55.7  3.4533991 47.27917  4.967434211 52.24660  3.3639836
30  1922.417  57.8  8.9865132 47.32083  1.492653509 48.81349  9.0952310
31  1922.500  56.8 12.9672149 47.45417 -3.621381579 43.83279 12.8624908
32  1922.583  54.3 11.4591009 47.69167 -4.850767544 42.84090 11.7116742
33  1922.667  54.3  7.4001096 47.89167 -0.991776316 46.89989  7.4288506
34  1922.750  47.1  0.6547149 48.18750 -1.742214912 46.44529  0.3474728
35  1922.833  41.8 -6.6176535 48.07083  0.346820175 48.41765 -6.5449727
36  1922.917  41.7 -9.3601974 47.58750  3.472697368 51.06020 -9.5787757
37  1923.000  41.8 -9.3393640 47.68333  3.456030702 51.13936 -9.3419811
38  1923.083  40.1 -9.8998904 48.21250  1.787390351 49.99989 -9.5256227
39  1923.167  42.9 -6.9466009 48.43750  1.409100877 49.84660 -7.0008077
40  1923.250  45.8 -2.7573465 48.52917  0.028179825 48.55735 -2.8175429
41  1923.333  49.2  3.4533991 48.38750 -2.640899123 45.74660  3.3639836
42  1923.417  52.7  8.9865132 47.98750 -4.274013158 43.71349  9.0952310
43  1923.500  64.2 12.9672149 47.71250  3.520285088 51.23279 12.8624908
44  1923.583  59.6 11.4591009 47.50000  0.640899123 48.14090 11.7116742
45  1923.667  54.4  7.4001096 47.20000 -0.200109649 46.99989  7.4288506
46  1923.750  49.2  0.6547149 46.99583  1.549451754 48.54529  0.3474728
47  1923.833  36.3 -6.6176535 47.15000 -4.232346491 42.91765 -6.5449727
48  1923.917  37.6 -9.3601974 47.52500 -0.564802632 46.96020 -9.5787757
49  1924.000  39.3 -9.3393640 47.59167  1.047697368 48.63936 -9.3419811
50  1924.083  37.5 -9.8998904 47.39167  0.008223684 47.39989 -9.5256227
51  1924.167  38.3 -6.9466009 47.41667 -2.170065789 45.24660 -7.0008077
52  1924.250  45.5 -2.7573465 47.52500  0.732346491 48.25735 -2.8175429
53  1924.333  53.2  3.4533991 47.88750  1.859100877 49.74660  3.3639836
54  1924.417  57.7  8.9865132 48.47500  0.238486842 48.71349  9.0952310
55  1924.500  60.8 12.9672149 48.75417 -0.921381579 47.83279 12.8624908
56  1924.583  58.2 11.4591009 48.90833 -2.167434211 46.74090 11.7116742
57  1924.667  56.4  7.4001096 49.13750 -0.137609649 48.99989  7.4288506
58  1924.750  49.8  0.6547149 49.22500 -0.079714912 49.14529  0.3474728
59  1924.833  44.4 -6.6176535 49.23333  1.784320175 51.01765 -6.5449727
60  1924.917  43.6 -9.3601974 49.32917  3.631030702 52.96020 -9.5787757
61  1925.000  40.0 -9.3393640 49.51250 -0.173135965 49.33936 -9.3419811
62  1925.083  40.5 -9.8998904 49.74167  0.658223684 50.39989 -9.5256227
63  1925.167  40.8 -6.9466009 49.71667 -1.970065789 47.74660 -7.0008077
64  1925.250  45.1 -2.7573465 49.58333 -1.725986842 47.85735 -2.8175429
65  1925.333  53.8  3.4533991 49.32917  1.017434211 50.34660  3.3639836
66  1925.417  59.4  8.9865132 48.76250  1.650986842 50.41349  9.0952310
67  1925.500  63.5 12.9672149 48.42500  2.107785088 50.53279 12.8624908
68  1925.583  61.0 11.4591009 48.51250  1.028399123 49.54090 11.7116742
69  1925.667  53.0  7.4001096 48.74167 -3.141776316 45.59989  7.4288506
70  1925.750  50.0  0.6547149 49.00833  0.336951754 49.34529  0.3474728
71  1925.833  38.1 -6.6176535 49.03333 -4.315679825 44.71765 -6.5449727
72  1925.917  36.3 -9.3601974 48.79167 -3.131469298 45.66020 -9.5787757
73  1926.000  39.2 -9.3393640 48.64167 -0.102302632 48.53936 -9.3419811
74  1926.083  43.4 -9.8998904 48.64167  4.658223684 53.29989 -9.5256227
75  1926.167  43.4 -6.9466009 48.87083  1.475767544 50.34660 -7.0008077
76  1926.250  48.9 -2.7573465 48.92083  2.736513158 51.65735 -2.8175429
77  1926.333  50.6  3.4533991 48.92917 -1.782565789 47.14660  3.3639836
78  1926.417  56.8  8.9865132 49.22083 -1.407346491 47.81349  9.0952310
79  1926.500  62.5 12.9672149 49.37500  0.157785088 49.53279 12.8624908
80  1926.583  62.0 11.4591009 49.17917  1.361732456 50.54090 11.7116742
81  1926.667  57.5  7.4001096 49.05417  1.045723684 50.09989  7.4288506
82  1926.750  46.7  0.6547149 49.05833 -3.013048246 46.04529  0.3474728
83  1926.833  41.6 -6.6176535 49.02917 -0.811513158 48.21765 -6.5449727
84  1926.917  39.8 -9.3601974 49.00000  0.160197368 49.16020 -9.5787757
85  1927.000  39.4 -9.3393640 48.83750 -0.098135965 48.73936 -9.3419811
86  1927.083  38.5 -9.8998904 48.68750 -0.287609649 48.39989 -9.5256227
87  1927.167  45.3 -6.9466009 48.50833  3.738267544 52.24660 -7.0008077
88  1927.250  47.1 -2.7573465 48.54167  1.315679825 49.85735 -2.8175429
89  1927.333  51.7  3.4533991 48.72083 -0.474232456 48.24660  3.3639836
90  1927.417  55.0  8.9865132 48.55833 -2.544846491 46.01349  9.0952310
91  1927.500  60.4 12.9672149 48.42500 -0.992214912 47.43279 12.8624908
92  1927.583  60.5 11.4591009 48.59167  0.449232456 49.04090 11.7116742
93  1927.667  54.7  7.4001096 48.59583 -1.295942982 47.29989  7.4288506
94  1927.750  50.3  0.6547149 48.50000  1.145285088 49.64529  0.3474728
95  1927.833  42.3 -6.6176535 48.47500  0.442653509 48.91765 -6.5449727
96  1927.917  35.2 -9.3601974 48.50000 -3.939802632 44.56020 -9.5787757
97  1928.000  40.8 -9.3393640 48.63333  1.506030702 50.13936 -9.3419811
98  1928.083  41.1 -9.8998904 48.70833  2.291557018 50.99989 -9.5256227
99  1928.167  42.8 -6.9466009 48.73750  1.009100877 49.74660 -7.0008077
100 1928.250  47.3 -2.7573465 48.76250  1.294846491 50.05735 -2.8175429
101 1928.333  50.9  3.4533991 48.78750 -1.340899123 47.44660  3.3639836
102 1928.417  56.4  8.9865132 48.90417 -1.490679825 47.41349  9.0952310
103 1928.500  62.2 12.9672149 48.74167  0.491118421 49.23279 12.8624908
104 1928.583  60.5 11.4591009 48.08333  0.957565789 49.04090 11.7116742
105 1928.667  55.4  7.4001096 47.60000  0.399890351 47.99989  7.4288506
106 1928.750  50.2  0.6547149 47.38333  2.161951754 49.54529  0.3474728
107 1928.833  43.0 -6.6176535 47.33333  2.284320175 49.61765 -6.5449727
108 1928.917  37.3 -9.3601974 47.44583 -0.785635965 46.66020 -9.5787757
109 1929.000  34.8 -9.3393640 47.47917 -3.339802632 44.13936 -9.3419811
110 1929.083  31.3 -9.8998904 47.48333 -6.283442982 41.19989 -9.5256227
111 1929.167  41.0 -6.9466009 47.65833  0.288267544 47.94660 -7.0008077
112 1929.250  43.9 -2.7573465 47.80000 -1.142653509 46.65735 -2.8175429
113 1929.333  53.1  3.4533991 47.75417  1.892434211 49.64660  3.3639836
114 1929.417  56.9  8.9865132 47.94167 -0.028179825 47.91349  9.0952310
115 1929.500  62.5 12.9672149 48.41667  1.116118421 49.53279 12.8624908
116 1929.583  60.3 11.4591009 48.94167 -0.100767544 48.84090 11.7116742
117 1929.667  59.8  7.4001096 49.19167  3.208223684 52.39989  7.4288506
118 1929.750  49.2  0.6547149 49.32500 -0.779714912 48.54529  0.3474728
119 1929.833  42.9 -6.6176535 49.37083  0.146820175 49.51765 -6.5449727
120 1929.917  41.9 -9.3601974 49.43750  1.822697368 51.26020 -9.5787757
121 1930.000  41.6 -9.3393640 49.48333  1.456030702 50.93936 -9.3419811
122 1930.083  37.1 -9.8998904 49.43750 -2.437609649 46.99989 -9.5256227
123 1930.167  41.2 -6.9466009 49.37500 -1.228399123 48.14660 -7.0008077
124 1930.250  46.9 -2.7573465 49.32917  0.328179825 49.65735 -2.8175429
125 1930.333  51.2  3.4533991 49.40417 -1.657565789 47.74660  3.3639836
126 1930.417  60.4  8.9865132 49.27917  2.134320175 51.41349  9.0952310
127 1930.500  60.1 12.9672149 48.96250 -1.829714912 47.13279 12.8624908
128 1930.583  61.6 11.4591009 48.82917  1.311732456 50.14090 11.7116742
129 1930.667  57.0  7.4001096 48.76667  0.833223684 49.59989  7.4288506
130 1930.750  50.9  0.6547149 48.63333  1.611951754 50.24529  0.3474728
131 1930.833  43.0 -6.6176535 48.71250  0.905153509 49.61765 -6.5449727
132 1930.917  38.8 -9.3601974 48.72500 -0.564802632 48.16020 -9.5787757
133 1931.000  37.1 -9.3393640 48.66250 -2.223135965 46.43936 -9.3419811
134 1931.083  38.4 -9.8998904 48.54167 -0.241776316 48.29989 -9.5256227
135 1931.167  38.4 -6.9466009 48.26667 -2.920065789 45.34660 -7.0008077
136 1931.250  46.5 -2.7573465 47.95417  1.303179825 49.25735 -2.8175429
137 1931.333  53.5  3.4533991 47.87917  2.167434211 50.04660  3.3639836
138 1931.417  58.4  8.9865132 48.05833  1.355153509 49.41349  9.0952310
139 1931.500  60.6 12.9672149 48.35417 -0.721381579 47.63279 12.8624908
140 1931.583  58.2 11.4591009 48.57500 -1.834100877 46.74090 11.7116742
141 1931.667  53.8  7.4001096 48.65417 -2.254276316 46.39989  7.4288506
142 1931.750  46.6  0.6547149 48.65417 -2.708881579 45.94529  0.3474728
143 1931.833  45.5 -6.6176535 48.46667  3.650986842 52.11765 -6.5449727
144 1931.917  40.6 -9.3601974 48.30000  1.660197368 49.96020 -9.5787757
145 1932.000  42.4 -9.3393640 48.30417  3.435197368 51.73936 -9.3419811
146 1932.083  38.4 -9.8998904 48.58750 -0.287609649 48.29989 -9.5256227
147 1932.167  40.3 -6.9466009 48.91250 -1.665899123 47.24660 -7.0008077
148 1932.250  44.6 -2.7573465 49.04583 -1.688486842 47.35735 -2.8175429
149 1932.333  50.9  3.4533991 48.99583 -1.549232456 47.44660  3.3639836
150 1932.417  57.0  8.9865132 48.96667 -0.953179825 48.01349  9.0952310
151 1932.500  62.1 12.9672149 48.75833  0.374451754 49.13279 12.8624908
152 1932.583  63.5 11.4591009 48.53750  3.503399123 52.04090 11.7116742
153 1932.667  56.3  7.4001096 48.75000  0.149890351 48.89989  7.4288506
154 1932.750  47.3  0.6547149 49.09583 -2.450548246 46.64529  0.3474728
155 1932.833  43.6 -6.6176535 49.40417  0.813486842 50.21765 -6.5449727
156 1932.917  41.8 -9.3601974 49.70000  1.460197368 51.16020 -9.5787757
157 1933.000  36.2 -9.3393640 50.00000 -4.460635965 45.53936 -9.3419811
158 1933.083  39.3 -9.8998904 50.20000 -1.000109649 49.19989 -9.5256227
159 1933.167  44.5 -6.9466009 50.41667  1.029934211 51.44660 -7.0008077
160 1933.250  48.7 -2.7573465 50.69583  0.761513158 51.45735 -2.8175429
161 1933.333  54.2  3.4533991 50.75417 -0.007565789 50.74660  3.3639836
162 1933.417  60.8  8.9865132 50.44167  1.371820175 51.81349  9.0952310
163 1933.500  65.5 12.9672149 50.32500  2.207785088 52.53279 12.8624908
164 1933.583  64.9 11.4591009 50.41250  3.028399123 53.44090 11.7116742
165 1933.667  60.1  7.4001096 50.19583  2.504057018 52.69989  7.4288506
166 1933.750  50.2  0.6547149 49.95000 -0.404714912 49.54529  0.3474728
167 1933.833  42.1 -6.6176535 49.84167 -1.124013158 48.71765 -6.5449727
168 1933.917  35.8 -9.3601974 49.75833 -4.598135965 45.16020 -9.5787757
169 1934.000  39.4 -9.3393640 49.75000 -1.010635965 48.73936 -9.3419811
170 1934.083  38.2 -9.8998904 49.60417 -1.504276316 48.09989 -9.5256227
171 1934.167  40.4 -6.9466009 49.37917 -2.032565789 47.34660 -7.0008077
172 1934.250  46.9 -2.7573465 49.38333  0.274013158 49.65735 -2.8175429
173 1934.333  53.4  3.4533991 49.45417  0.492434211 49.94660  3.3639836
174 1934.417  59.6  8.9865132 49.90000  0.713486842 50.61349  9.0952310
175 1934.500  66.5 12.9672149 50.34167  3.191118421 53.53279 12.8624908
176 1934.583  60.4 11.4591009 50.55000 -1.609100877 48.94090 11.7116742
177 1934.667  59.2  7.4001096 50.86250  0.937390351 51.79989  7.4288506
178 1934.750  51.2  0.6547149 51.00000 -0.454714912 50.54529  0.3474728
179 1934.833  42.8 -6.6176535 50.86667 -1.449013158 49.41765 -6.5449727
180 1934.917  45.8 -9.3601974 50.76250  4.397697368 55.16020 -9.5787757
181 1935.000  40.0 -9.3393640 50.72083 -1.381469298 49.33936 -9.3419811
182 1935.083  42.6 -9.8998904 50.79167  1.708223684 52.49989 -9.5256227
183 1935.167  43.5 -6.9466009 50.84167 -0.395065789 50.44660 -7.0008077
184 1935.250  47.1 -2.7573465 50.63333 -0.775986842 49.85735 -2.8175429
185 1935.333  50.0  3.4533991 50.58333 -4.036732456 46.54660  3.3639836
186 1935.417  60.5  8.9865132 50.25000  1.263486842 51.51349  9.0952310
187 1935.500  64.6 12.9672149 49.74583  1.886951754 51.63279 12.8624908
188 1935.583  64.0 11.4591009 49.31667  3.224232456 52.54090 11.7116742
189 1935.667  56.8  7.4001096 49.02083  0.379057018 49.39989  7.4288506
190 1935.750  48.6  0.6547149 48.90833 -0.963048246 47.94529  0.3474728
191 1935.833  44.2 -6.6176535 48.88750  1.930153509 50.81765 -6.5449727
192 1935.917  36.4 -9.3601974 48.92083 -3.160635965 45.76020 -9.5787757
193 1936.000  37.3 -9.3393640 48.65000 -2.010635965 46.63936 -9.3419811
194 1936.083  35.0 -9.8998904 48.33750 -3.437609649 44.89989 -9.5256227
195 1936.167  44.0 -6.9466009 48.27083  2.675767544 50.94660 -7.0008077
196 1936.250  43.9 -2.7573465 48.36667 -1.709320175 46.65735 -2.8175429
197 1936.333  52.7  3.4533991 48.30000  0.946600877 49.24660  3.3639836
198 1936.417  58.6  8.9865132 48.39583  1.217653509 49.61349  9.0952310
199 1936.500  60.0 12.9672149 48.74583 -1.713048246 47.03279 12.8624908
200 1936.583  61.1 11.4591009 49.14167  0.499232456 49.64090 11.7116742
201 1936.667  58.1  7.4001096 49.15833  1.541557018 50.69989  7.4288506
202 1936.750  49.6  0.6547149 49.07083 -0.125548246 48.94529  0.3474728
203 1936.833  41.6 -6.6176535 49.27500 -1.057346491 48.21765 -6.5449727
204 1936.917  41.3 -9.3601974 49.33333  1.326864035 50.66020 -9.5787757
205 1937.000  40.8 -9.3393640 49.39167  0.747697368 50.13936 -9.3419811
206 1937.083  41.0 -9.8998904 49.47917  1.420723684 50.89989 -9.5256227
207 1937.167  38.4 -6.9466009 49.43333 -4.086732456 45.34660 -7.0008077
208 1937.250  47.4 -2.7573465 49.41250  0.744846491 50.15735 -2.8175429
209 1937.333  54.1  3.4533991 49.45833  1.188267544 50.64660  3.3639836
210 1937.417  58.6  8.9865132 49.27500  0.338486842 49.61349  9.0952310
211 1937.500  61.4 12.9672149 49.15417 -0.721381579 48.43279 12.8624908
212 1937.583  61.8 11.4591009 49.21667  1.124232456 50.34090 11.7116742
213 1937.667  56.3  7.4001096 49.59583 -0.695942982 48.89989  7.4288506
214 1937.750  50.9  0.6547149 49.93333  0.311951754 50.24529  0.3474728
215 1937.833  41.4 -6.6176535 49.82917 -1.811513158 48.01765 -6.5449727
216 1937.917  37.1 -9.3601974 49.77500 -3.314802632 46.46020 -9.5787757
217 1938.000  42.1 -9.3393640 49.71667  1.722697368 51.43936 -9.3419811
218 1938.083  41.2 -9.8998904 49.58333  1.516557018 51.09989 -9.5256227
219 1938.167  47.3 -6.9466009 49.55417  4.692434211 54.24660 -7.0008077
220 1938.250  46.6 -2.7573465 49.57500 -0.217653509 49.35735 -2.8175429
221 1938.333  52.4  3.4533991 49.83333 -0.886732456 48.94660  3.3639836
222 1938.417  59.0  8.9865132 50.18750 -0.174013158 50.01349  9.0952310
223 1938.500  59.6 12.9672149 50.16250 -3.529714912 46.63279 12.8624908
224 1938.583  60.4 11.4591009 50.03750 -1.096600877 48.94090 11.7116742
225 1938.667  57.0  7.4001096 49.82083 -0.220942982 49.59989  7.4288506
226 1938.750  50.7  0.6547149 49.66667  0.378618421 50.04529  0.3474728
227 1938.833  47.8 -6.6176535 49.71667  4.700986842 54.41765 -6.5449727
228 1938.917  39.2 -9.3601974 49.67500 -1.114802632 48.56020 -9.5787757
229 1939.000  39.4 -9.3393640 49.67917 -0.939802632 48.73936 -9.3419811
230 1939.083  40.9 -9.8998904 49.78333  1.016557018 50.79989 -9.5256227
231 1939.167  42.4 -6.9466009 49.89167 -0.545065789 49.34660 -7.0008077
232 1939.250  47.8 -2.7573465 49.77500  0.782346491 50.55735 -2.8175429
233 1939.333  52.4  3.4533991 49.55833 -0.611732456 48.94660  3.3639836
234 1939.417  58.0  8.9865132 49.45000 -0.436513158 49.01349  9.0952310
235 1939.500  60.7 12.9672149       NA           NA 47.73279 12.8624908
236 1939.583  61.8 11.4591009       NA           NA 50.34090 11.7116742
237 1939.667  58.2  7.4001096       NA           NA 50.79989  7.4288506
238 1939.750  46.7  0.6547149       NA           NA 46.04529  0.3474728
239 1939.833  46.6 -6.6176535       NA           NA 53.21765 -6.5449727
240 1939.917  37.8 -9.3601974       NA           NA 47.16020 -9.5787757
      .trend  .remainder      .weight .seasadj
1   50.01420 -0.07222032 0.9998117442 49.94198
2   49.92165  0.40397500 0.9941070247 50.32562
3   49.82909  1.57171369 0.9126802010 51.40081
4   49.76684 -0.24930092 0.9977553984 49.51754
5   49.70459  1.03142281 0.9619042613 50.73602
6   49.66925 -0.26447916 0.9974748211 49.40477
7   49.63390 -4.79639351 0.3412380823 44.83751
8   49.59154 -4.90321001 0.3197191080 44.68833
9   49.54917 -2.67801942 0.7575428238 46.87115
10  49.53142  0.62110779 0.9860987725 50.15253
11  49.51367 -0.06869727 0.9998295734 49.44497
12  49.67527 -0.29648970 0.9968240120 49.37878
13  49.83686  3.70512025 0.5652530794 53.54198
14  50.01995 -0.69432647 0.9826486724 49.32562
15  50.20304  1.89777018 0.8740330207 52.10081
16  50.21930 -0.40175826 0.9941717811 49.81754
17  50.23556  0.50045164 0.9909689604 50.73602
18  50.08369 -0.47892462 0.9917222061 49.60477
19  49.93182  3.50568674 0.6050590645 53.43751
20  49.64468 -1.45635323 0.9247811015 48.18833
21  49.35754  0.21361388 0.9983531664 49.57115
22  49.04307  4.80945774 0.3386139271 53.85253
23  48.72860 -2.48363068 0.7893864291 46.24497
24  48.41063  3.96814679 0.5117966525 52.37878
25  48.09265 -1.25067337 0.9442359375 46.84198
26  47.78527  0.44034827 0.9930065146 48.22562
27  47.47789 -0.97708673 0.9657717152 46.50081
28  47.32123 -2.40368684 0.8020068621 44.91754
29  47.16456  5.17145139 0.2668499980 52.33602
30  47.25341  1.45135602 0.9252972241 48.70477
31  47.34226 -3.40475173 0.6248069424 43.93751
32  47.54890 -4.96057839 0.3082343237 42.58833
33  47.75555 -0.88439797 0.9719230049 46.87115
34  47.94715 -1.19461825 0.9490683389 46.75253
35  48.13874  0.20622919 0.9984634649 48.34497
36  48.29300  2.98577154 0.7036777265 51.27878
37  48.44726  2.69471628 0.7546879672 51.14198
38  48.54072  1.08490473 0.9578945067 49.62562
39  48.63417  1.26663654 0.9428345049 49.90081
40  48.56948  0.04806673 0.9999163166 48.61754
41  48.50478 -2.66876475 0.7590860969 45.83602
42  48.29876 -4.69399240 0.3620667289 43.60477
43  48.09274  3.24476757 0.6555667956 51.33751
44  47.88957 -0.00124428 1.0000000000 47.88833
45  47.68640 -0.71524905 0.9815940273 46.97115
46  47.63720  1.21532552 0.9473121845 48.85253
47  47.58800 -4.74303219 0.3520504143 42.84497
48  47.62960 -0.45082633 0.9926638286 47.17878
49  47.67120  0.97078191 0.9662141749 48.64198
50  47.71188 -0.68625939 0.9830480211 47.02562
51  47.75257 -2.45175731 0.7944868364 45.30081
52  47.91295  0.40459740 0.9940901051 48.31754
53  48.07333  1.76269045 0.8908237990 49.83602
54  48.34262  0.26214603 0.9975164909 48.60477
55  48.61192 -0.67441076 0.9836242049 47.93751
56  48.81156 -2.32323163 0.8143918072 46.48833
57  49.01119 -0.04004542 0.9999420200 48.97115
58  49.12549  0.32703709 0.9961383276 49.45253
59  49.23979  1.70518732 0.8976499774 50.94497
60  49.35392  3.82485679 0.5410514810 53.17878
61  49.46805 -0.12607135 0.9994255569 49.34198
62  49.52972  0.49590417 0.9911290425 50.02562
63  49.59138 -1.79057694 0.8874418517 47.80081
64  49.45273 -1.53518313 0.9166077211 47.91754
65  49.31407  1.12194902 0.9550103719 50.43602
66  49.10862  1.19614862 0.9489389693 50.30477
67  48.90317  1.73433583 0.8942072882 50.63751
68  48.89233  0.39599547 0.9943367859 49.28833
69  48.88149 -3.31033782 0.6430636675 45.57115
70  48.91397  0.73855880 0.9803781333 49.65253
71  48.94645 -4.30147685 0.4429222034 44.64497
72  48.90282 -3.02404619 0.6966932090 45.87878
73  48.85919 -0.31721315 0.9963661650 48.54198
74  48.89413  4.03149740 0.4987159288 52.92562
75  48.92906  1.47175131 0.9232248776 50.40081
76  49.03010  2.68744640 0.7559341735 51.71754
77  49.13114 -1.89512018 0.8743670152 47.23602
78  49.14031 -1.43554225 0.9268852631 47.70477
79  49.14949  0.48802331 0.9914078255 49.63751
80  49.07881  1.20951191 0.9478052716 50.28833
81  49.00814  1.06300760 0.9595633931 50.07115
82  48.97150 -2.61897582 0.7673895643 46.35253
83  48.93486 -0.78989152 0.9775667489 48.14497
84  48.86818  0.51059666 0.9906000832 49.37878
85  48.80149 -0.05951278 0.9998720920 48.74198
86  48.70096 -0.67533648 0.9835797380 48.02562
87  48.60042  3.70038320 0.5662269876 52.30081
88  48.56807  1.34947559 0.9352460403 49.91754
89  48.53571 -0.19969368 0.9985585123 48.33602
90  48.52398 -2.61921491 0.7673600584 45.90477
91  48.51226 -0.97474852 0.9659450343 47.53751
92  48.54413  0.24419096 0.9978443356 48.78833
93  48.57601 -1.30486248 0.9393918863 47.27115
94  48.64185  1.31067824 0.9388599059 49.95253
95  48.70769  0.13728668 0.9993192008 48.84497
96  48.78245 -4.00367641 0.5044250461 44.77878
97  48.85722  1.28476289 0.9412111825 50.14198
98  48.89771  1.72791339 0.8949676412 50.62562
99  48.93820  0.86260727 0.9732797776 49.80081
100 48.94613  1.17141777 0.9510048139 50.11754
101 48.95405 -1.41803340 0.9286221314 47.53602
102 48.84896 -1.54418747 0.9156534095 47.30477
103 48.74386  0.59364608 0.9872985476 49.33751
104 48.54573  0.24259718 0.9978720183 48.78833
105 48.34759 -0.37644464 0.9948844472 47.97115
106 48.24623  1.60629421 0.9088932779 49.85253
107 48.14487  1.40010078 0.9303867756 49.54497
108 48.15934 -1.28056361 0.9415880523 46.87878
109 48.17381 -4.03182561 0.4986653502 44.14198
110 48.21910 -7.39348007 0.0001410611 40.82562
111 48.26440 -0.26359115 0.9974900911 48.00081
112 48.35951 -1.64196854 0.9049062600 46.71754
113 48.45462  1.28139240 0.9415175359 49.73602
114 48.67785 -0.87308338 0.9726337710 47.80477
115 48.90108  0.73642845 0.9804880657 49.63751
116 49.09419 -0.50586696 0.9907719650 48.58833
117 49.28730  3.08384471 0.6857277896 52.37115
118 49.34557 -0.49304083 0.9912296487 48.85253
119 49.40383  0.04114136 0.9999389708 49.44497
120 49.40282  2.07595514 0.8502744159 51.47878
121 49.40181  1.54017131 0.9160740197 50.94198
122 49.37361 -2.74798299 0.7456279645 46.62562
123 49.34540 -1.14459392 0.9531961859 48.20081
124 49.30543  0.41211746 0.9938690055 49.71754
125 49.26545 -1.42943281 0.9274919729 47.83602
126 49.18880  2.11597148 0.8446745881 51.30477
127 49.11215 -1.87463661 0.8769857050 47.23751
128 49.00675  0.88157510 0.9720955921 49.88833
129 48.90136  0.66979390 0.9838451572 49.57115
130 48.83104  1.72148929 0.8957307927 50.55253
131 48.76072  0.78425241 0.9778898297 49.54497
132 48.68865 -0.30987458 0.9965298006 48.37878
133 48.61658 -2.17459917 0.8363490822 46.44198
134 48.45541 -0.52979050 0.9898793425 47.92562
135 48.29425 -2.89343846 0.7202274168 45.40081
136 48.16174  1.15580354 0.9522865331 49.31754
137 48.02923  2.10678389 0.8459719861 50.13602
138 48.11025  1.19451432 0.9490780631 49.30477
139 48.19128 -0.45376763 0.9925693662 47.73751
140 48.28599 -1.79766513 0.8865827207 46.48833
141 48.38070 -2.00955555 0.8593276261 46.37115
142 48.33674 -2.08421321 0.8491078381 46.25253
143 48.29278  3.75219686 0.5557873995 52.04497
144 48.28919  1.88958246 0.8750956552 50.17878
145 48.28561  3.45637045 0.6147301243 51.74198
146 48.41723 -0.49161070 0.9912807969 47.92562
147 48.54886 -1.24804849 0.9444757336 47.30081
148 48.62483 -1.20728397 0.9479970261 47.41754
149 48.70080 -1.16478111 0.9515491014 47.53602
150 48.72498 -0.82021192 0.9758272720 47.90477
151 48.74916  0.48834488 0.9913958496 49.23751
152 48.90068  2.88764978 0.7212401964 51.78833
153 49.05219 -0.18103825 0.9988160917 48.87115
154 49.30960 -2.35707551 0.8092259009 46.95253
155 49.56702  0.57795496 0.9879606342 50.14497
156 49.83909  1.53968834 0.9161343536 51.37878
157 50.11116 -4.56917590 0.3876547579 45.54198
158 50.36702 -1.54139691 0.9159538098 48.82562
159 50.62288  0.87792544 0.9723268320 51.50081
160 50.78526  0.73228255 0.9807054171 51.51754
161 50.94764 -0.11162200 0.9995497433 50.83602
162 50.89302  0.81174825 0.9763159822 51.70477
163 50.83840  1.79910611 0.8863986646 52.63751
164 50.61542  2.57290085 0.7749790813 53.18833
165 50.39245  2.27870268 0.8210810117 52.67115
166 50.16815 -0.31561873 0.9964011804 49.85253
167 49.94385 -1.29887241 0.9399319885 48.64497
168 49.76381 -4.38503285 0.4256237643 45.37878
169 49.58377 -0.84179092 0.9745475926 48.74198
170 49.49997 -1.77435174 0.8894181190 47.72562
171 49.41618 -2.01536920 0.8585443585 47.40081
172 49.51935  0.19819417 0.9985805427 49.71754
173 49.62252  0.41349587 0.9938289408 50.03602
174 49.86562  0.63914438 0.9852855184 50.50477
175 50.10873  3.52878051 0.6004799186 53.63751
176 50.30759 -1.61926856 0.9074527330 48.68833
177 50.50646  1.26468946 0.9430139300 51.77115
178 50.56288  0.28964243 0.9969710616 50.85253
179 50.61931 -1.27433689 0.9421411984 49.34497
180 50.60801  4.77076099 0.3464437038 55.37878
181 50.59672 -1.25473874 0.9438903719 49.34198
182 50.58026  1.54536684 0.9155261150 52.12562
183 50.56379 -0.06298420 0.9998563787 50.50081
184 50.48101 -0.56347034 0.9885529916 49.91754
185 50.39823 -3.76221813 0.5537331235 46.63602
186 50.17364  1.23113289 0.9459516122 51.40477
187 49.94904  1.78847153 0.8876995218 51.73751
188 49.67770  2.61062346 0.7687682152 52.28833
189 49.40637 -0.03521753 0.9999552490 49.37115
190 49.20639 -0.95386492 0.9673753542 48.25253
191 49.00642  1.73855541 0.8937126444 50.74497
192 48.83367 -2.85489600 0.7270306698 45.97878
193 48.66093 -2.01894503 0.8580717515 46.64198
194 48.54482 -4.01919856 0.5012586635 44.52562
195 48.42872  2.57209128 0.7751200799 51.00081
196 48.46736 -1.74981759 0.8923691510 46.71754
197 48.50600  0.83001189 0.9752479203 49.33602
198 48.68877  0.81599782 0.9760694451 49.50477
199 48.87154 -1.73402862 0.8942494353 47.13751
200 49.06001  0.32831580 0.9961051216 49.38833
201 49.24848  1.42266730 0.9281619459 50.67115
202 49.36046 -0.10793320 0.9995787408 49.25253
203 49.47244 -1.32746597 0.9373027598 48.14497
204 49.53805  1.34072499 0.9360748588 50.87878
205 49.60366  0.53831833 0.9895484886 50.14198
206 49.62887  0.89674911 0.9711359461 50.52562
207 49.65408 -4.25327673 0.4529118759 45.40081
208 49.61740  0.60014021 0.9870205102 50.21754
209 49.58072  1.15529549 0.9523277817 50.73602
210 49.53425 -0.02948220 0.9999686594 49.50477
211 49.48778 -0.95027228 0.9676207494 48.53751
212 49.50857  0.57975352 0.9878829547 50.08833
213 49.52936 -0.65821360 0.9843982323 48.87115
214 49.57767  0.97485321 0.9659406952 50.55253
215 49.62598 -1.68101226 0.9004371545 47.94497
216 49.59498 -2.91620283 0.7161544741 46.67878
217 49.56397  1.87800899 0.8765541165 51.44198
218 49.53556  1.19006148 0.9494547021 50.72562
219 49.50715  4.79365735 0.3417807348 54.30081
220 49.53811 -0.12056488 0.9994741681 49.41754
221 49.56907 -0.53304877 0.9897514479 49.03602
222 49.57742  0.32735314 0.9961300420 49.90477
223 49.58577 -2.84825734 0.7282020458 46.73751
224 49.53627 -0.84794729 0.9741745765 48.68833
225 49.48678  0.08436985 0.9997428525 49.57115
226 49.48966  0.86286796 0.9732679392 50.35253
227 49.49254  4.85243380 0.3299127676 54.34497
228 49.51944 -0.74066544 0.9802586379 48.77878
229 49.54634 -0.80436230 0.9767456685 48.74198
230 49.54330  0.88232445 0.9720537415 50.42562
231 49.54025 -0.13944543 0.9992967282 49.40081
232 49.46247  1.15507606 0.9523490606 50.61754
233 49.38468 -0.34866410 0.9956083428 49.03602
234 49.28384 -0.37907304 0.9948109879 48.90477
235 49.18300 -1.34549436 0.9356161725 47.83751
236 49.07716  1.01116267 0.9633774008 50.08833
237 48.97132  1.79982679 0.8863220646 50.77115
238 48.86598 -2.51344847 0.7846257080 46.35253
239 48.76063  4.38434399 0.4258156270 53.14497
240 48.65426 -1.27547980 0.9420313503 47.37878
> library(tibble)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(ggplot2)
> decomps <- tibble(series = list(as.data.frame(nottem), as.data.frame(nottem)), 
+     decomp = c("decompose", "stl"), model = list(d1, d2)) %>% rowwise() %>% mutate(augment = list(broom::augment(model))) %>% 
+     ungroup() %>% group_by(decomp) %>% unnest(c(series, augment)) %>% mutate(index = 1:n()) %>% 
+     ungroup() %>% select(decomp, index, x, adjusted = .seasadj)
> ggplot(decomps) + geom_line(aes(x = index, y = x), colour = "black") + 
+     geom_line(aes(x = index, y = adjusted, colour = decomp, group = decomp))
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:tidyr’, ‘package:dplyr’,
  ‘package:tibble’

> nameEx("augment.drc")
> ### * augment.drc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.drc
> ### Title: Augment data with information from a(n) drc object
> ### Aliases: augment.drc
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("drc")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(drc)
+ 
+ # fit model
+ mod <- drm(dead / total ~ conc, type,
+   weights = total, data = selenium, fct = LL.2(), type = "binomial"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ 
+ glance(mod)
+ 
+ augment(mod, selenium)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.felm")
> ### * augment.felm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.felm
> ### Title: Augment data with information from a(n) felm object
> ### Aliases: augment.felm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lfe")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lfe)
+ 
+ # use built-in `airquality` dataset
+ head(airquality)
+ 
+ # no FEs; same as lm()
+ est0 <- felm(Ozone ~ Temp + Wind + Solar.R, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est0)
+ augment(est0)
+ 
+ # add month fixed effects
+ est1 <- felm(Ozone ~ Temp + Wind + Solar.R | Month, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est1)
+ tidy(est1, fe = TRUE)
+ augment(est1)
+ glance(est1)
+ 
+ # the "se.type" argument can be used to switch out different standard errors
+ # types on the fly. In turn, this can be useful exploring the effect of
+ # different error structures on model inference.
+ tidy(est1, se.type = "iid")
+ tidy(est1, se.type = "robust")
+ 
+ # add clustered SEs (also by month)
+ est2 <- felm(Ozone ~ Temp + Wind + Solar.R | Month | 0 | Month, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est2, conf.int = TRUE)
+ tidy(est2, conf.int = TRUE, se.type = "cluster")
+ tidy(est2, conf.int = TRUE, se.type = "robust")
+ tidy(est2, conf.int = TRUE, se.type = "iid")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.fixest")
> ### * augment.fixest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.fixest
> ### Title: Augment data with information from a(n) fixest object
> ### Aliases: augment.fixest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("fixest") & !broom:::is_cran_check()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(fixest)
+ 
+ gravity <-
+   feols(
+     log(Euros) ~ log(dist_km) | Origin + Destination + Product + Year, trade
+   )
+ 
+ tidy(gravity)
+ glance(gravity)
+ augment(gravity, trade)
+ 
+ # to get robust or clustered SEs, users can either:
+ 
+ # 1) specify the arguments directly in the `tidy()` call
+ 
+ tidy(gravity, conf.int = TRUE, cluster = c("Product", "Year"))
+ 
+ tidy(gravity, conf.int = TRUE, se = "threeway")
+ 
+ # 2) or, feed tidy() a summary.fixest object that has already accepted
+ # these arguments
+ 
+ gravity_summ <- summary(gravity, cluster = c("Product", "Year"))
+ 
+ tidy(gravity_summ, conf.int = TRUE)
+ 
+ # approach (1) is preferred.
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.gam")
> ### * augment.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.gam
> ### Title: Augment data with information from a(n) gam object
> ### Aliases: augment.gam
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mgcv")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mgcv)
+ 
+ # fit model
+ g <- gam(mpg ~ s(hp) + am + qsec, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(g)
+ tidy(g, parametric = TRUE)
+ glance(g)
+ augment(g)
+ ## Don't show: 
+ }) # examplesIf
> library(mgcv)
Loading required package: nlme
This is mgcv 1.9-1. For overview type 'help("mgcv-package")'.
> g <- gam(mpg ~ s(hp) + am + qsec, data = mtcars)
> tidy(g)
# A tibble: 1 × 5
  term    edf ref.df statistic p.value
  <chr> <dbl>  <dbl>     <dbl>   <dbl>
1 s(hp)  2.36   3.02      6.34 0.00218
> tidy(g, parametric = TRUE)
# A tibble: 3 × 5
  term        estimate std.error statistic p.value
  <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 (Intercept)  16.7        9.83      1.70  0.101  
2 am            4.37       1.56      2.81  0.00918
3 qsec          0.0904     0.525     0.172 0.865  
> glance(g)
# A tibble: 1 × 9
     df logLik   AIC   BIC deviance df.residual  nobs adj.r.squared  npar
  <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl> <int>         <dbl> <int>
1  5.36  -74.4  162.  171.     196.        26.6    32         0.797    12
> augment(g)
# A tibble: 32 × 11
   .rownames          mpg    am  qsec    hp .fitted .se.fit .resid   .hat .sigma
   <chr>            <dbl> <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl> <lgl> 
 1 Mazda RX4         21       1  16.5   110    24.3   1.03  -3.25  0.145  NA    
 2 Mazda RX4 Wag     21       1  17.0   110    24.3   0.925 -3.30  0.116  NA    
 3 Datsun 710        22.8     1  18.6    93    26.0   0.894 -3.22  0.109  NA    
 4 Hornet 4 Drive    21.4     0  19.4   110    20.2   0.827  1.25  0.0930 NA    
 5 Hornet Sportabo…  18.7     0  17.0   175    15.7   0.815  3.02  0.0902 NA    
 6 Valiant           18.1     0  20.2   105    20.7   0.914 -2.56  0.113  NA    
 7 Duster 360        14.3     0  15.8   245    12.7   1.11   1.63  0.167  NA    
 8 Merc 240D         24.4     0  20      62    25.0   1.45  -0.618 0.287  NA    
 9 Merc 230          22.8     0  22.9    95    21.8   1.81   0.959 0.446  NA    
10 Merc 280          19.2     0  18.3   123    19.0   0.864  0.211 0.102  NA    
# ℹ 22 more rows
# ℹ 1 more variable: .cooksd <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("augment.htest")
> ### * augment.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.htest
> ### Title: Augment data with information from a(n) htest object
> ### Aliases: augment.htest
> 
> ### ** Examples
> 
> 
> tt <- t.test(rnorm(10))
> 
> tidy(tt)
# A tibble: 1 × 8
  estimate statistic p.value parameter conf.low conf.high method     alternative
     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      
1    0.132     0.536   0.605         9   -0.426     0.691 One Sampl… two.sided  
> 
> # the glance output will be the same for each of the below tests
> glance(tt)
# A tibble: 1 × 8
  estimate statistic p.value parameter conf.low conf.high method     alternative
     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      
1    0.132     0.536   0.605         9   -0.426     0.691 One Sampl… two.sided  
> 
> tt <- t.test(mpg ~ am, data = mtcars)
> 
> tidy(tt)
# A tibble: 1 × 10
  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high
     <dbl>     <dbl>     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl>
1    -7.24      17.1      24.4     -3.77 0.00137      18.3    -11.3     -3.21
# ℹ 2 more variables: method <chr>, alternative <chr>
> 
> wt <- wilcox.test(mpg ~ am, data = mtcars, conf.int = TRUE, exact = FALSE)
> 
> tidy(wt)
# A tibble: 1 × 7
  estimate statistic p.value conf.low conf.high method               alternative
     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> <chr>                <chr>      
1    -6.80        42 0.00187    -11.7     -2.90 Wilcoxon rank sum t… two.sided  
> 
> ct <- cor.test(mtcars$wt, mtcars$mpg)
> 
> tidy(ct)
# A tibble: 1 × 8
  estimate statistic  p.value parameter conf.low conf.high method    alternative
     <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl> <chr>     <chr>      
1   -0.868     -9.56 1.29e-10        30   -0.934    -0.744 Pearson'… two.sided  
> 
> chit <- chisq.test(xtabs(Freq ~ Sex + Class, data = as.data.frame(Titanic)))
> 
> tidy(chit)
# A tibble: 1 × 4
  statistic  p.value parameter method                    
      <dbl>    <dbl>     <int> <chr>                     
1      350. 1.56e-75         3 Pearson's Chi-squared test
> augment(chit)
# A tibble: 8 × 9
  Sex    Class .observed  .prop .row.prop .col.prop .expected .resid .std.resid
  <fct>  <fct>     <dbl>  <dbl>     <dbl>     <dbl>     <dbl>  <dbl>      <dbl>
1 Male   1st         180 0.0818    0.104     0.554      256.   -4.73     -11.1 
2 Female 1st         145 0.0659    0.309     0.446       69.4   9.07      11.1 
3 Male   2nd         179 0.0813    0.103     0.628      224.   -3.02      -6.99
4 Female 2nd         106 0.0482    0.226     0.372       60.9   5.79       6.99
5 Male   3rd         510 0.232     0.295     0.722      555.   -1.92      -5.04
6 Female 3rd         196 0.0891    0.417     0.278      151.    3.68       5.04
7 Male   Crew        862 0.392     0.498     0.974      696.    6.29      17.6 
8 Female Crew         23 0.0104    0.0489    0.0260     189.  -12.1      -17.6 
> 
> 
> 
> 
> cleanEx()
> nameEx("augment.ivreg")
> ### * augment.ivreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.ivreg
> ### Title: Augment data with information from a(n) ivreg object
> ### Aliases: augment.ivreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("AER")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(AER)
+ 
+ # load data
+ data("CigarettesSW", package = "AER")
+ 
+ # fit model
+ ivr <- ivreg(
+   log(packs) ~ income | population,
+   data = CigarettesSW,
+   subset = year == "1995"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(ivr)
+ tidy(ivr, conf.int = TRUE)
+ tidy(ivr, conf.int = TRUE, instruments = TRUE)
+ 
+ augment(ivr)
+ augment(ivr, data = CigarettesSW)
+ augment(ivr, newdata = CigarettesSW)
+ 
+ glance(ivr)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.kmeans")
> ### * augment.kmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.kmeans
> ### Title: Augment data with information from a(n) kmeans object
> ### Aliases: augment.kmeans
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("cluster", "modeldata")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(cluster)
+ library(modeldata)
+ library(dplyr)
+ 
+ data(hpc_data)
+ 
+ x <- hpc_data[, 2:5]
+ 
+ fit <- pam(x, k = 4)
+ 
+ tidy(fit)
+ glance(fit)
+ augment(fit, x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.lm")
> ### * augment.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.lm
> ### Title: Augment data with information from a(n) lm object
> ### Aliases: augment.lm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(ggplot2)
+ library(dplyr)
+ 
+ mod <- lm(mpg ~ wt + qsec, data = mtcars)
+ 
+ tidy(mod)
+ glance(mod)
+ 
+ # coefficient plot
+ d <- tidy(mod, conf.int = TRUE)
+ 
+ ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) +
+   geom_point() +
+   geom_vline(xintercept = 0, lty = 4) +
+   geom_errorbarh()
+ 
+ # aside: There are tidy() and glance() methods for lm.summary objects too.
+ # this can be useful when you want to conserve memory by converting large lm
+ # objects into their leaner summary.lm equivalents.
+ s <- summary(mod)
+ tidy(s, conf.int = TRUE)
+ glance(s)
+ 
+ augment(mod)
+ augment(mod, mtcars, interval = "confidence")
+ 
+ # predict on new data
+ newdata <- mtcars %>%
+   head(6) %>%
+   mutate(wt = wt + 1)
+ augment(mod, newdata = newdata)
+ 
+ # ggplot2 example where we also construct 95% prediction interval
+ 
+ # simpler bivariate model since we're plotting in 2D
+ mod2 <- lm(mpg ~ wt, data = mtcars)
+ 
+ au <- augment(mod2, newdata = newdata, interval = "prediction")
+ 
+ ggplot(au, aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted)) +
+   geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
+ 
+ # predict on new data without outcome variable. Output does not include .resid
+ newdata <- newdata %>%
+   select(-mpg)
+ 
+ augment(mod, newdata = newdata)
+ 
+ au <- augment(mod, data = mtcars)
+ 
+ ggplot(au, aes(.hat, .std.resid)) +
+   geom_vline(size = 2, colour = "white", xintercept = 0) +
+   geom_hline(size = 2, colour = "white", yintercept = 0) +
+   geom_point() +
+   geom_smooth(se = FALSE)
+ 
+ plot(mod, which = 6)
+ 
+ ggplot(au, aes(.hat, .cooksd)) +
+   geom_vline(xintercept = 0, colour = NA) +
+   geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
+   geom_smooth(se = FALSE) +
+   geom_point()
+ 
+ # column-wise models
+ a <- matrix(rnorm(20), nrow = 10)
+ b <- a + rnorm(length(a))
+ result <- lm(b ~ a)
+ 
+ tidy(result)
+ ## Don't show: 
+ }) # examplesIf
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> mod <- lm(mpg ~ wt + qsec, data = mtcars)
> tidy(mod)
# A tibble: 3 × 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4
2 wt            -5.05      0.484    -10.4  2.52e-11
3 qsec           0.929     0.265      3.51 1.50e- 3
> glance(mod)
# A tibble: 1 × 12
  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2  -74.4  157.  163.
# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>
> d <- tidy(mod, conf.int = TRUE)
> ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) + 
+     geom_point() + geom_vline(xintercept = 0, lty = 4) + geom_errorbarh()
> s <- summary(mod)
> tidy(s, conf.int = TRUE)
# A tibble: 3 × 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4    9.00      30.5 
2 wt            -5.05      0.484    -10.4  2.52e-11   -6.04      -4.06
3 qsec           0.929     0.265      3.51 1.50e- 3    0.387      1.47
> glance(s)
# A tibble: 1 × 8
  r.squared adj.r.squared sigma statistic  p.value    df df.residual  nobs
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>       <int> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2          29    32
> augment(mod)
# A tibble: 32 × 10
   .rownames    mpg    wt  qsec .fitted  .resid   .hat .sigma .cooksd .std.resid
   <chr>      <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl>
 1 Mazda RX4   21    2.62  16.5    21.8 -0.815  0.0693   2.64 2.63e-3    -0.325 
 2 Mazda RX4…  21    2.88  17.0    21.0 -0.0482 0.0444   2.64 5.59e-6    -0.0190
 3 Datsun 710  22.8  2.32  18.6    25.3 -2.53   0.0607   2.60 2.17e-2    -1.00  
 4 Hornet 4 …  21.4  3.22  19.4    21.6 -0.181  0.0576   2.64 1.05e-4    -0.0716
 5 Hornet Sp…  18.7  3.44  17.0    18.2  0.504  0.0389   2.64 5.29e-4     0.198 
 6 Valiant     18.1  3.46  20.2    21.1 -2.97   0.0957   2.58 5.10e-2    -1.20  
 7 Duster 360  14.3  3.57  15.8    16.4 -2.14   0.0729   2.61 1.93e-2    -0.857 
 8 Merc 240D   24.4  3.19  20      22.2  2.17   0.0791   2.61 2.18e-2     0.872 
 9 Merc 230    22.8  3.15  22.9    25.1 -2.32   0.295    2.59 1.59e-1    -1.07  
10 Merc 280    19.2  3.44  18.3    19.4 -0.185  0.0358   2.64 6.55e-5    -0.0728
# ℹ 22 more rows
> augment(mod, mtcars, interval = "confidence")
# A tibble: 32 × 20
   .rownames     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 8 more variables: .fitted <dbl>, .lower <dbl>, .upper <dbl>, .resid <dbl>,
#   .hat <dbl>, .sigma <dbl>, .cooksd <dbl>, .std.resid <dbl>
> newdata <- mtcars %>% head(6) %>% mutate(wt = wt + 1)
> augment(mod, newdata = newdata)
# A tibble: 6 × 14
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 2 more variables: .fitted <dbl>, .resid <dbl>
> mod2 <- lm(mpg ~ wt, data = mtcars)
> au <- augment(mod2, newdata = newdata, interval = "prediction")
> ggplot(au, aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted)) + 
+     geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
> newdata <- newdata %>% select(-mpg)
> augment(mod, newdata = newdata)
# A tibble: 6 × 12
  .rownames    cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
1 Mazda RX4      6   160   110  3.9   3.62  16.5     0     1     4     4    16.8
2 Mazda RX4…     6   160   110  3.9   3.88  17.0     0     1     4     4    16.0
3 Datsun 710     4   108    93  3.85  3.32  18.6     1     1     4     1    20.3
4 Hornet 4 …     6   258   110  3.08  4.22  19.4     1     0     3     1    16.5
5 Hornet Sp…     8   360   175  3.15  4.44  17.0     0     0     3     2    13.1
6 Valiant        6   225   105  2.76  4.46  20.2     1     0     3     1    16.0
> au <- augment(mod, data = mtcars)
> ggplot(au, aes(.hat, .std.resid)) + geom_vline(size = 2, colour = "white", 
+     xintercept = 0) + geom_hline(size = 2, colour = "white", yintercept = 0) + geom_point() + 
+     geom_smooth(se = FALSE)
Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead.
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> plot(mod, which = 6)
> ggplot(au, aes(.hat, .cooksd)) + geom_vline(xintercept = 0, colour = NA) + 
+     geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") + geom_smooth(se = FALSE) + 
+     geom_point()
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> a <- matrix(rnorm(20), nrow = 10)
> b <- a + rnorm(length(a))
> result <- lm(b ~ a)
> tidy(result)
# A tibble: 6 × 6
  response term        estimate std.error statistic p.value
  <chr>    <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 Y1       (Intercept)   -0.128     0.219    -0.585 0.577  
2 Y1       a1             0.303     0.299     1.02  0.343  
3 Y1       a2             0.348     0.218     1.60  0.154  
4 Y2       (Intercept)    0.131     0.300     0.437 0.676  
5 Y2       a1            -0.215     0.408    -0.527 0.614  
6 Y2       a2             1.07      0.298     3.61  0.00867
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’

> nameEx("augment.lmRob")
> ### * augment.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.lmRob
> ### Title: Augment data with information from a(n) lmRob object
> ### Aliases: augment.lmRob
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("robust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(robust)
+ 
+ # fit model
+ m <- lmRob(mpg ~ wt, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.loess")
> ### * augment.loess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.loess
> ### Title: Tidy a(n) loess object
> ### Aliases: augment.loess loess_tidiers
> 
> ### ** Examples
> 
> 
> lo <- loess(
+   mpg ~ hp + wt,
+   mtcars,
+   control = loess.control(surface = "direct")
+ )
> 
> augment(lo)
# A tibble: 32 × 6
   .rownames           mpg    hp    wt .fitted  .resid
   <chr>             <dbl> <dbl> <dbl>   <dbl>   <dbl>
 1 Mazda RX4          21     110  2.62    21.4 -0.435 
 2 Mazda RX4 Wag      21     110  2.88    20.9  0.0976
 3 Datsun 710         22.8    93  2.32    24.7 -1.88  
 4 Hornet 4 Drive     21.4   110  3.22    19.6  1.76  
 5 Hornet Sportabout  18.7   175  3.44    16.7  2.02  
 6 Valiant            18.1   105  3.46    18.9 -0.833 
 7 Duster 360         14.3   245  3.57    14.9 -0.641 
 8 Merc 240D          24.4    62  3.19    25.1 -0.695 
 9 Merc 230           22.8    95  3.15    21.4  1.43  
10 Merc 280           19.2   123  3.44    18.4  0.801 
# ℹ 22 more rows
> 
> # with all columns of original data
> augment(lo, mtcars)
# A tibble: 32 × 14
   .rownames     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 2 more variables: .fitted <dbl>, .resid <dbl>
> 
> # with a new dataset
> augment(lo, newdata = head(mtcars))
# A tibble: 6 × 14
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   2.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   2.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  2.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  3.46  20.2     1     0     3     1
# ℹ 2 more variables: .fitted <dbl>, .resid <dbl>
> 
> 
> 
> 
> cleanEx()
> nameEx("augment.mfx")
> ### * augment.mfx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.mfx
> ### Title: Augment data with information from a(n) mfx object
> ### Aliases: augment.mfx augment.logitmfx augment.negbinmfx
> ###   augment.poissonmfx augment.probitmfx
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mfx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mfx)
+ 
+ # get the marginal effects from a logit regression
+ mod_logmfx <- logitmfx(am ~ cyl + hp + wt, atmean = TRUE, data = mtcars)
+ 
+ tidy(mod_logmfx, conf.int = TRUE)
+ 
+ # compare with the naive model coefficients of the same logit call
+ tidy(
+   glm(am ~ cyl + hp + wt, family = binomial, data = mtcars),
+   conf.int = TRUE
+ )
+ 
+ augment(mod_logmfx)
+ glance(mod_logmfx)
+ 
+ # another example, this time using probit regression
+ mod_probmfx <- probitmfx(am ~ cyl + hp + wt, atmean = TRUE, data = mtcars)
+ 
+ tidy(mod_probmfx, conf.int = TRUE)
+ augment(mod_probmfx)
+ glance(mod_probmfx)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.mjoint")
> ### * augment.mjoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.mjoint
> ### Title: Augment data with information from a(n) mjoint object
> ### Aliases: augment.mjoint
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("joineRML")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # broom only skips running these examples because the example models take a
+ # while to generate—they should run just fine, though!
+ ## Not run: 
+ ##D 
+ ##D 
+ ##D # load libraries for models and data
+ ##D library(joineRML)
+ ##D 
+ ##D # fit a joint model with bivariate longitudinal outcomes
+ ##D data(heart.valve)
+ ##D 
+ ##D hvd <- heart.valve[!is.na(heart.valve$log.grad) &
+ ##D   !is.na(heart.valve$log.lvmi) &
+ ##D   heart.valve$num <= 50, ]
+ ##D 
+ ##D fit <- mjoint(
+ ##D   formLongFixed = list(
+ ##D     "grad" = log.grad ~ time + sex + hs,
+ ##D     "lvmi" = log.lvmi ~ time + sex
+ ##D   ),
+ ##D   formLongRandom = list(
+ ##D     "grad" = ~ 1 | num,
+ ##D     "lvmi" = ~ time | num
+ ##D   ),
+ ##D   formSurv = Surv(fuyrs, status) ~ age,
+ ##D   data = hvd,
+ ##D   inits = list("gamma" = c(0.11, 1.51, 0.80)),
+ ##D   timeVar = "time"
+ ##D )
+ ##D 
+ ##D # extract the survival fixed effects
+ ##D tidy(fit)
+ ##D 
+ ##D # extract the longitudinal fixed effects
+ ##D tidy(fit, component = "longitudinal")
+ ##D 
+ ##D # extract the survival fixed effects with confidence intervals
+ ##D tidy(fit, ci = TRUE)
+ ##D 
+ ##D # extract the survival fixed effects with confidence intervals based
+ ##D # on bootstrapped standard errors
+ ##D bSE <- bootSE(fit, nboot = 5, safe.boot = TRUE)
+ ##D tidy(fit, boot_se = bSE, ci = TRUE)
+ ##D 
+ ##D # augment original data with fitted longitudinal values and residuals
+ ##D hvd2 <- augment(fit)
+ ##D 
+ ##D # extract model statistics
+ ##D glance(fit)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.mlogit")
> ### * augment.mlogit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.mlogit
> ### Title: Augment data with information from a(n) mlogit object
> ### Aliases: augment.mlogit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mlogit")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mlogit)
+ 
+ data("Fishing", package = "mlogit")
+ Fish <- dfidx(Fishing, varying = 2:9, shape = "wide", choice = "mode")
+ 
+ # fit model
+ m <- mlogit(mode ~ price + catch | income, data = Fish)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.nlrq")
> ### * augment.nlrq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.nlrq
> ### Title: Tidy a(n) nlrq object
> ### Aliases: augment.nlrq
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit model
+ n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(n)
+ augment(n)
+ glance(n)
+ 
+ library(ggplot2)
+ 
+ ggplot(augment(n), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
+ 
+ newdata <- head(mtcars)
+ newdata$wt <- newdata$wt + 1
+ 
+ augment(n, newdata = newdata)
+ ## Don't show: 
+ }) # examplesIf
> n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
> tidy(n)
# A tibble: 2 × 5
  term  estimate std.error statistic  p.value
  <chr>    <dbl>     <dbl>     <dbl>    <dbl>
1 k       49.7      3.79        13.1 5.96e-14
2 e        0.746    0.0199      37.5 8.86e-27
> augment(n)
# A tibble: 32 × 4
     mpg    wt .fitted .resid
   <dbl> <dbl>   <dbl>  <dbl>
 1  21    2.62    23.0 -2.01 
 2  21    2.88    21.4 -0.352
 3  22.8  2.32    25.1 -2.33 
 4  21.4  3.22    19.3  2.08 
 5  18.7  3.44    18.1  0.611
 6  18.1  3.46    18.0  0.117
 7  14.3  3.57    17.4 -3.11 
 8  24.4  3.19    19.5  4.93 
 9  22.8  3.15    19.7  3.10 
10  19.2  3.44    18.1  1.11 
# ℹ 22 more rows
> glance(n)
# A tibble: 1 × 9
  sigma isConv     finTol logLik   AIC   BIC deviance df.residual  nobs
  <dbl> <lgl>       <dbl>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1  2.67 TRUE   0.00000204  -75.8  158.  162.     214.          30    32
> library(ggplot2)
> ggplot(augment(n), aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted))
> newdata <- head(mtcars)
> newdata$wt <- newdata$wt + 1
> augment(n, newdata = newdata)
# A tibble: 6 × 13
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 1 more variable: .fitted <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("augment.nls")
> ### * augment.nls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.nls
> ### Title: Augment data with information from a(n) nls object
> ### Aliases: augment.nls
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit model
+ n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(n)
+ augment(n)
+ glance(n)
+ 
+ library(ggplot2)
+ 
+ ggplot(augment(n), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
+ 
+ newdata <- head(mtcars)
+ newdata$wt <- newdata$wt + 1
+ 
+ augment(n, newdata = newdata)
+ ## Don't show: 
+ }) # examplesIf
> n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
> tidy(n)
# A tibble: 2 × 5
  term  estimate std.error statistic  p.value
  <chr>    <dbl>     <dbl>     <dbl>    <dbl>
1 k       49.7      3.79        13.1 5.96e-14
2 e        0.746    0.0199      37.5 8.86e-27
> augment(n)
# A tibble: 32 × 4
     mpg    wt .fitted .resid
   <dbl> <dbl>   <dbl>  <dbl>
 1  21    2.62    23.0 -2.01 
 2  21    2.88    21.4 -0.352
 3  22.8  2.32    25.1 -2.33 
 4  21.4  3.22    19.3  2.08 
 5  18.7  3.44    18.1  0.611
 6  18.1  3.46    18.0  0.117
 7  14.3  3.57    17.4 -3.11 
 8  24.4  3.19    19.5  4.93 
 9  22.8  3.15    19.7  3.10 
10  19.2  3.44    18.1  1.11 
# ℹ 22 more rows
> glance(n)
# A tibble: 1 × 9
  sigma isConv     finTol logLik   AIC   BIC deviance df.residual  nobs
  <dbl> <lgl>       <dbl>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1  2.67 TRUE   0.00000204  -75.8  158.  162.     214.          30    32
> library(ggplot2)
> ggplot(augment(n), aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted))
> newdata <- head(mtcars)
> newdata$wt <- newdata$wt + 1
> augment(n, newdata = newdata)
# A tibble: 6 × 13
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 1 more variable: .fitted <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("augment.pam")
> ### * augment.pam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.pam
> ### Title: Augment data with information from a(n) pam object
> ### Aliases: augment.pam
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("cluster", "modeldata", "ggplot2")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(dplyr)
+ library(ggplot2)
+ library(cluster)
+ library(modeldata)
+ data(hpc_data)
+ 
+ x <- hpc_data[, 2:5]
+ p <- pam(x, k = 4)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(p)
+ glance(p)
+ augment(p, x)
+ 
+ augment(p, x) %>%
+   ggplot(aes(compounds, input_fields)) +
+   geom_point(aes(color = .cluster)) +
+   geom_text(aes(label = cluster), data = tidy(p), size = 10)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.plm")
> ### * augment.plm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.plm
> ### Title: Augment data with information from a(n) plm object
> ### Aliases: augment.plm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("plm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(plm)
+ 
+ # load data
+ data("Produc", package = "plm")
+ 
+ # fit model
+ zz <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,
+   data = Produc, index = c("state", "year")
+ )
+ 
+ # summarize model fit with tidiers
+ summary(zz)
+ 
+ tidy(zz)
+ tidy(zz, conf.int = TRUE)
+ tidy(zz, conf.int = TRUE, conf.level = 0.9)
+ 
+ augment(zz)
+ glance(zz)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.poLCA")
> ### * augment.poLCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.poLCA
> ### Title: Augment data with information from a(n) poLCA object
> ### Aliases: augment.poLCA
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("poLCA", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(poLCA)
+ library(dplyr)
+ 
+ # generate data
+ data(values)
+ 
+ f <- cbind(A, B, C, D) ~ 1
+ 
+ # fit model
+ M1 <- poLCA(f, values, nclass = 2, verbose = FALSE)
+ 
+ M1
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(M1)
+ augment(M1)
+ glance(M1)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(M1), aes(factor(class), estimate, fill = factor(outcome))) +
+   geom_bar(stat = "identity", width = 1) +
+   facet_wrap(~variable)
+ 
+ # three-class model with a single covariate.
+ data(election)
+ 
+ f2a <- cbind(
+   MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG,
+   MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB
+ ) ~ PARTY
+ 
+ nes2a <- poLCA(f2a, election, nclass = 3, nrep = 5, verbose = FALSE)
+ 
+ td <- tidy(nes2a)
+ td
+ 
+ ggplot(td, aes(outcome, estimate, color = factor(class), group = class)) +
+   geom_line() +
+   facet_wrap(~variable, nrow = 2) +
+   theme(axis.text.x = element_text(angle = 90, hjust = 1))
+ 
+ au <- augment(nes2a)
+ 
+ au
+ 
+ count(au, .class)
+ 
+ # if the original data is provided, it leads to NAs in new columns
+ # for rows that weren't predicted
+ au2 <- augment(nes2a, data = election)
+ 
+ au2
+ 
+ dim(au2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.polr")
> ### * augment.polr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.polr
> ### Title: Augment data with information from a(n) polr object
> ### Aliases: augment.polr
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ fit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
+ 
+ # summarize model fit with tidiers
+ tidy(fit, exponentiate = TRUE, conf.int = TRUE)
+ 
+ glance(fit)
+ augment(fit, type.predict = "class")
+ 
+ fit2 <- polr(factor(gear) ~ am + mpg + qsec, data = mtcars)
+ 
+ tidy(fit, p.values = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> fit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
> tidy(fit, exponentiate = TRUE, conf.int = TRUE)

Re-fitting to get Hessian

# A tibble: 8 × 7
  term          estimate std.error statistic conf.low conf.high coef.type  
  <chr>            <dbl>     <dbl>     <dbl>    <dbl>     <dbl> <chr>      
1 InflMedium       1.76     0.105       5.41    1.44      2.16  coefficient
2 InflHigh         3.63     0.127      10.1     2.83      4.66  coefficient
3 TypeApartment    0.564    0.119      -4.80    0.446     0.712 coefficient
4 TypeAtrium       0.693    0.155      -2.36    0.511     0.940 coefficient
5 TypeTerrace      0.336    0.151      -7.20    0.249     0.451 coefficient
6 ContHigh         1.43     0.0955      3.77    1.19      1.73  coefficient
7 Low|Medium       0.609    0.125      -3.97   NA        NA     scale      
8 Medium|High      2.00     0.125       5.50   NA        NA     scale      
> glance(fit)
# A tibble: 1 × 7
    edf logLik   AIC   BIC deviance df.residual  nobs
  <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1     8 -1740. 3495. 3539.    3479.        1673  1681
> augment(fit, type.predict = "class")
# A tibble: 72 × 6
   Sat    Infl   Type      Cont  `(weights)` .fitted
   <ord>  <fct>  <fct>     <fct>       <int> <fct>  
 1 Low    Low    Tower     Low            21 Low    
 2 Medium Low    Tower     Low            21 Low    
 3 High   Low    Tower     Low            28 Low    
 4 Low    Medium Tower     Low            34 High   
 5 Medium Medium Tower     Low            22 High   
 6 High   Medium Tower     Low            36 High   
 7 Low    High   Tower     Low            10 High   
 8 Medium High   Tower     Low            11 High   
 9 High   High   Tower     Low            36 High   
10 Low    Low    Apartment Low            61 Low    
# ℹ 62 more rows
> fit2 <- polr(factor(gear) ~ am + mpg + qsec, data = mtcars)
> tidy(fit, p.values = TRUE)

Re-fitting to get Hessian

p-values can presently only be returned for models that contain
              no categorical variables with more than two levels
# A tibble: 8 × 6
  term          estimate std.error statistic p.value coef.type  
  <chr>            <dbl>     <dbl>     <dbl> <lgl>   <chr>      
1 InflMedium       0.566    0.105       5.41 NA      coefficient
2 InflHigh         1.29     0.127      10.1  NA      coefficient
3 TypeApartment   -0.572    0.119      -4.80 NA      coefficient
4 TypeAtrium      -0.366    0.155      -2.36 NA      coefficient
5 TypeTerrace     -1.09     0.151      -7.20 NA      coefficient
6 ContHigh         0.360    0.0955      3.77 NA      coefficient
7 Low|Medium      -0.496    0.125      -3.97 NA      scale      
8 Medium|High      0.691    0.125       5.50 NA      scale      
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("augment.rlm")
> ### * augment.rlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.rlm
> ### Title: Augment data with information from a(n) rlm object
> ### Aliases: augment.rlm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ r <- rlm(stack.loss ~ ., stackloss)
+ 
+ # summarize model fit with tidiers
+ tidy(r)
+ augment(r)
+ glance(r)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> r <- rlm(stack.loss ~ ., stackloss)
> tidy(r)
# A tibble: 4 × 4
  term        estimate std.error statistic
  <chr>          <dbl>     <dbl>     <dbl>
1 (Intercept)  -41.0       9.81     -4.18 
2 Air.Flow       0.829     0.111     7.46 
3 Water.Temp     0.926     0.303     3.05 
4 Acid.Conc.    -0.128     0.129    -0.992
> augment(r)
# A tibble: 21 × 10
   stack.loss Air.Flow Water.Temp Acid.Conc. .fitted .resid   .hat .sigma
        <dbl>    <dbl>      <dbl>      <dbl>   <dbl>  <dbl>  <dbl>  <dbl>
 1         42       80         27         89    38.9  3.05  0.327    3.32
 2         37       80         27         88    39.1 -2.08  0.343    3.39
 3         37       75         25         90    32.8  4.18  0.155    3.26
 4         28       62         24         87    21.5  6.50  0.0713   3.01
 5         18       62         22         87    19.6 -1.65  0.0562   3.42
 6         18       62         23         87    20.6 -2.57  0.0835   3.38
 7         19       62         24         93    20.7 -1.73  0.230    3.42
 8         20       62         24         93    20.7 -0.731 0.230    3.44
 9         15       58         23         87    17.3 -2.25  0.155    3.40
10         14       58         18         80    13.5  0.481 0.213    3.45
# ℹ 11 more rows
# ℹ 2 more variables: .cooksd <dbl>, .std.resid <dbl>
> glance(r)
# A tibble: 1 × 7
  sigma converged logLik     AIC   BIC deviance  nobs
  <dbl> <lgl>     <logLik> <dbl> <dbl>    <dbl> <int>
1  2.44 TRUE      -52.954   116.  121.     191.    21
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("augment.rma")
> ### * augment.rma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.rma
> ### Title: Augment data with information from a(n) rma object
> ### Aliases: augment.rma
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("metafor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(metafor)
+ 
+ # generate data and fit
+ df <-
+   escalc(
+     measure = "RR",
+     ai = tpos,
+     bi = tneg,
+     ci = cpos,
+     di = cneg,
+     data = dat.bcg
+   )
+ 
+ meta_analysis <- rma(yi, vi, data = df, method = "EB")
+ 
+ # summarize model fit with tidiers
+ augment(meta_analysis)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.robustbase.glmrob")
> ### * augment.robustbase.glmrob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.glmrob
> ### Title: Augment data with information from a(n) glmrob object
> ### Aliases: augment.glmrob
> 
> ### ** Examples
> 
> 
> if (requireNamespace("robustbase", quietly = TRUE)) {
+   # load libraries for models and data
+   library(robustbase)
+ 
+   data(coleman)
+   set.seed(0)
+ 
+   m <- lmrob(Y ~ ., data = coleman)
+   tidy(m)
+   augment(m)
+   glance(m)
+ 
+   data(carrots)
+ 
+   Rfit <- glmrob(cbind(success, total - success) ~ logdose + block,
+     family = binomial, data = carrots, method = "Mqle",
+     control = glmrobMqle.control(tcc = 1.2)
+   )
+ 
+   tidy(Rfit)
+   augment(Rfit)
+ }
> 
> 
> 
> cleanEx()
> nameEx("augment.robustbase.lmrob")
> ### * augment.robustbase.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.lmrob
> ### Title: Augment data with information from a(n) lmrob object
> ### Aliases: augment.lmrob
> 
> ### ** Examples
> 
> 
> if (requireNamespace("robustbase", quietly = TRUE)) {
+   # load libraries for models and data
+   library(robustbase)
+ 
+   data(coleman)
+   set.seed(0)
+ 
+   m <- lmrob(Y ~ ., data = coleman)
+   tidy(m)
+   augment(m)
+   glance(m)
+ 
+   data(carrots)
+ 
+   Rfit <- glmrob(cbind(success, total - success) ~ logdose + block,
+     family = binomial, data = carrots, method = "Mqle",
+     control = glmrobMqle.control(tcc = 1.2)
+   )
+ 
+   tidy(Rfit)
+   augment(Rfit)
+ }
> 
> 
> 
> cleanEx()
> nameEx("augment.rq")
> ### * augment.rq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.rq
> ### Title: Augment data with information from a(n) rq object
> ### Aliases: augment.rq
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library and data
+ library(quantreg)
+ 
+ data(stackloss)
+ 
+ # median (l1) regression fit for the stackloss data.
+ mod1 <- rq(stack.loss ~ stack.x, .5)
+ 
+ # weighted sample median
+ mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
+ 
+ # summarize model fit with tidiers
+ tidy(mod1)
+ glance(mod1)
+ augment(mod1)
+ 
+ tidy(mod2)
+ glance(mod2)
+ augment(mod2)
+ 
+ # varying tau to generate an rqs object
+ mod3 <- rq(stack.loss ~ stack.x, tau = c(.25, .5))
+ 
+ tidy(mod3)
+ augment(mod3)
+ 
+ # glance cannot handle rqs objects like `mod3`--use a purrr
+ # `map`-based workflow instead
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> data(stackloss)
> mod1 <- rq(stack.loss ~ stack.x, 0.5)
> mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
> tidy(mod1)
# A tibble: 4 × 5
  term              estimate conf.low conf.high   tau
  <chr>                <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -39.7     -53.8    -24.5      0.5
2 stack.xAir.Flow     0.832     0.509    1.17     0.5
3 stack.xWater.Temp   0.574     0.272    3.04     0.5
4 stack.xAcid.Conc.  -0.0609   -0.278    0.0153   0.5
> glance(mod1)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -50.15272  108.  112.          17
> augment(mod1)
# A tibble: 21 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"]    .resid .fitted  .tau
        <dbl>                <dbl>           <dbl>     <dbl>   <dbl> <dbl>
 1         42                   80              27  5.06e+ 0    36.9   0.5
 2         37                   80              27 -1.42e-14    37     0.5
 3         37                   75              25  5.43e+ 0    31.6   0.5
 4         28                   62              24  7.63e+ 0    20.4   0.5
 5         18                   62              22 -1.22e+ 0    19.2   0.5
 6         18                   62              23 -1.79e+ 0    19.8   0.5
 7         19                   62              24 -1.00e+ 0    20     0.5
 8         20                   62              24 -7.11e-15    20     0.5
 9         15                   58              23 -1.46e+ 0    16.5   0.5
10         14                   58              18 -2.03e- 2    14.0   0.5
# ℹ 11 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> tidy(mod2)
# A tibble: 1 × 5
  term        estimate conf.low conf.high   tau
  <chr>          <dbl> <lgl>    <lgl>     <dbl>
1 (Intercept)    0.390 NA       NA          0.5
> glance(mod2)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -64.46761  131.  133.          49
> augment(mod2)
# A tibble: 50 × 5
   `rnorm(50)` `(weights)`  .resid .fitted  .tau
         <dbl>       <dbl>   <dbl>   <dbl> <dbl>
 1      -0.626       0.655 -1.02     0.390   0.5
 2       0.184       0.353 -0.206    0.390   0.5
 3      -0.836       0.270 -1.23     0.390   0.5
 4       1.60        0.993  1.21     0.390   0.5
 5       0.330       0.633 -0.0603   0.390   0.5
 6      -0.820       0.213 -1.21     0.390   0.5
 7       0.487       0.129  0.0976   0.390   0.5
 8       0.738       0.478  0.348    0.390   0.5
 9       0.576       0.924  0.186    0.390   0.5
10      -0.305       0.599 -0.695    0.390   0.5
# ℹ 40 more rows
> mod3 <- rq(stack.loss ~ stack.x, tau = c(0.25, 0.5))
> tidy(mod3)
# A tibble: 8 × 5
  term               estimate conf.low conf.high   tau
  <chr>                 <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -3.6 e+ 1  -59.0     -7.84    0.25
2 stack.xAir.Flow    5.00e- 1    0.229    0.970   0.25
3 stack.xWater.Temp  1.00e+ 0    0.286    2.26    0.25
4 stack.xAcid.Conc. -4.58e-16   -0.643    0.0861  0.25
5 (Intercept)       -3.97e+ 1  -53.8    -24.5     0.5 
6 stack.xAir.Flow    8.32e- 1    0.509    1.17    0.5 
7 stack.xWater.Temp  5.74e- 1    0.272    3.04    0.5 
8 stack.xAcid.Conc. -6.09e- 2   -0.278    0.0153  0.5 
> augment(mod3)
# A tibble: 42 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"] .tau     .resid .fitted
        <dbl>                <dbl>           <dbl> <chr>     <dbl>   <dbl>
 1         42                   80              27 0.25   1.10e+ 1    31.0
 2         42                   80              27 0.5    5.06e+ 0    36.9
 3         37                   80              27 0.25   6.00e+ 0    31.0
 4         37                   80              27 0.5   -1.42e-14    37  
 5         37                   75              25 0.25   1.05e+ 1    26.5
 6         37                   75              25 0.5    5.43e+ 0    31.6
 7         28                   62              24 0.25   9.00e+ 0    19  
 8         28                   62              24 0.5    7.63e+ 0    20.4
 9         18                   62              22 0.25   1.00e+ 0    17.0
10         18                   62              22 0.5   -1.22e+ 0    19.2
# ℹ 32 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("augment.rqs")
> ### * augment.rqs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.rqs
> ### Title: Augment data with information from a(n) rqs object
> ### Aliases: augment.rqs
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library and data
+ library(quantreg)
+ 
+ data(stackloss)
+ 
+ # median (l1) regression fit for the stackloss data.
+ mod1 <- rq(stack.loss ~ stack.x, .5)
+ 
+ # weighted sample median
+ mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
+ 
+ # summarize model fit with tidiers
+ tidy(mod1)
+ glance(mod1)
+ augment(mod1)
+ 
+ tidy(mod2)
+ glance(mod2)
+ augment(mod2)
+ 
+ # varying tau to generate an rqs object
+ mod3 <- rq(stack.loss ~ stack.x, tau = c(.25, .5))
+ 
+ tidy(mod3)
+ augment(mod3)
+ 
+ # glance cannot handle rqs objects like `mod3`--use a purrr
+ # `map`-based workflow instead
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> data(stackloss)
> mod1 <- rq(stack.loss ~ stack.x, 0.5)
> mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
> tidy(mod1)
# A tibble: 4 × 5
  term              estimate conf.low conf.high   tau
  <chr>                <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -39.7     -53.8    -24.5      0.5
2 stack.xAir.Flow     0.832     0.509    1.17     0.5
3 stack.xWater.Temp   0.574     0.272    3.04     0.5
4 stack.xAcid.Conc.  -0.0609   -0.278    0.0153   0.5
> glance(mod1)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -50.15272  108.  112.          17
> augment(mod1)
# A tibble: 21 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"]    .resid .fitted  .tau
        <dbl>                <dbl>           <dbl>     <dbl>   <dbl> <dbl>
 1         42                   80              27  5.06e+ 0    36.9   0.5
 2         37                   80              27 -1.42e-14    37     0.5
 3         37                   75              25  5.43e+ 0    31.6   0.5
 4         28                   62              24  7.63e+ 0    20.4   0.5
 5         18                   62              22 -1.22e+ 0    19.2   0.5
 6         18                   62              23 -1.79e+ 0    19.8   0.5
 7         19                   62              24 -1.00e+ 0    20     0.5
 8         20                   62              24 -7.11e-15    20     0.5
 9         15                   58              23 -1.46e+ 0    16.5   0.5
10         14                   58              18 -2.03e- 2    14.0   0.5
# ℹ 11 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> tidy(mod2)
# A tibble: 1 × 5
  term        estimate conf.low conf.high   tau
  <chr>          <dbl> <lgl>    <lgl>     <dbl>
1 (Intercept)    0.390 NA       NA          0.5
> glance(mod2)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -64.46761  131.  133.          49
> augment(mod2)
# A tibble: 50 × 5
   `rnorm(50)` `(weights)`  .resid .fitted  .tau
         <dbl>       <dbl>   <dbl>   <dbl> <dbl>
 1      -0.626       0.655 -1.02     0.390   0.5
 2       0.184       0.353 -0.206    0.390   0.5
 3      -0.836       0.270 -1.23     0.390   0.5
 4       1.60        0.993  1.21     0.390   0.5
 5       0.330       0.633 -0.0603   0.390   0.5
 6      -0.820       0.213 -1.21     0.390   0.5
 7       0.487       0.129  0.0976   0.390   0.5
 8       0.738       0.478  0.348    0.390   0.5
 9       0.576       0.924  0.186    0.390   0.5
10      -0.305       0.599 -0.695    0.390   0.5
# ℹ 40 more rows
> mod3 <- rq(stack.loss ~ stack.x, tau = c(0.25, 0.5))
> tidy(mod3)
# A tibble: 8 × 5
  term               estimate conf.low conf.high   tau
  <chr>                 <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -3.6 e+ 1  -59.0     -7.84    0.25
2 stack.xAir.Flow    5.00e- 1    0.229    0.970   0.25
3 stack.xWater.Temp  1.00e+ 0    0.286    2.26    0.25
4 stack.xAcid.Conc. -4.58e-16   -0.643    0.0861  0.25
5 (Intercept)       -3.97e+ 1  -53.8    -24.5     0.5 
6 stack.xAir.Flow    8.32e- 1    0.509    1.17    0.5 
7 stack.xWater.Temp  5.74e- 1    0.272    3.04    0.5 
8 stack.xAcid.Conc. -6.09e- 2   -0.278    0.0153  0.5 
> augment(mod3)
# A tibble: 42 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"] .tau     .resid .fitted
        <dbl>                <dbl>           <dbl> <chr>     <dbl>   <dbl>
 1         42                   80              27 0.25   1.10e+ 1    31.0
 2         42                   80              27 0.5    5.06e+ 0    36.9
 3         37                   80              27 0.25   6.00e+ 0    31.0
 4         37                   80              27 0.5   -1.42e-14    37  
 5         37                   75              25 0.25   1.05e+ 1    26.5
 6         37                   75              25 0.5    5.43e+ 0    31.6
 7         28                   62              24 0.25   9.00e+ 0    19  
 8         28                   62              24 0.5    7.63e+ 0    20.4
 9         18                   62              22 0.25   1.00e+ 0    17.0
10         18                   62              22 0.5   -1.22e+ 0    19.2
# ℹ 32 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("augment.sarlm")
> ### * augment.sarlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.sarlm
> ### Title: Augment data with information from a(n) spatialreg object
> ### Aliases: augment.sarlm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("spdep", "spatialreg")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ 
+ # load libraries for models and data
+ library(spatialreg)
+ library(spdep)
+ 
+ # load data
+ data(oldcol, package = "spdep")
+ 
+ listw <- nb2listw(COL.nb, style = "W")
+ 
+ # fit model
+ crime_sar <-
+   lagsarlm(CRIME ~ INC + HOVAL,
+     data = COL.OLD,
+     listw = listw,
+     method = "eigen"
+   )
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sar)
+ tidy(crime_sar, conf.int = TRUE)
+ glance(crime_sar)
+ augment(crime_sar)
+ 
+ # fit another model
+ crime_sem <- errorsarlm(CRIME ~ INC + HOVAL, data = COL.OLD, listw)
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sem)
+ tidy(crime_sem, conf.int = TRUE)
+ glance(crime_sem)
+ augment(crime_sem)
+ 
+ # fit another model
+ crime_sac <- sacsarlm(CRIME ~ INC + HOVAL, data = COL.OLD, listw)
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sac)
+ tidy(crime_sac, conf.int = TRUE)
+ glance(crime_sac)
+ augment(crime_sac)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.smooth.spline")
> ### * augment.smooth.spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.smooth.spline
> ### Title: Tidy a(n) smooth.spline object
> ### Aliases: augment.smooth.spline smooth.spline_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit model
+ spl <- smooth.spline(mtcars$wt, mtcars$mpg, df = 4)
+ 
+ # summarize model fit with tidiers
+ augment(spl, mtcars)
+ 
+ # calls original columns x and y
+ augment(spl)
+ 
+ library(ggplot2)
+ ggplot(augment(spl, mtcars), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
+ ## Don't show: 
+ }) # examplesIf
> spl <- smooth.spline(mtcars$wt, mtcars$mpg, df = 4)
> augment(spl, mtcars)
# A tibble: 32 × 13
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4    22.9
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4    21.1
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1    25.3
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1    19.1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2    17.8
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1    17.7
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4    17.1
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2    19.2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2    19.5
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4    17.8
# ℹ 22 more rows
# ℹ 1 more variable: .resid <dbl>
> augment(spl)
# A tibble: 32 × 5
       x     y     w .fitted .resid
   <dbl> <dbl> <dbl>   <dbl>  <dbl>
 1  2.62  21       1    22.9 -1.87 
 2  2.88  21       1    21.1 -0.117
 3  2.32  22.8     1    25.3 -2.48 
 4  3.22  21.4     1    19.1  2.33 
 5  3.44  18.7     1    17.8  0.928
 6  3.46  18.1     1    17.7  0.437
 7  3.57  14.3     1    17.1 -2.79 
 8  3.19  24.4     1    19.2  5.19 
 9  3.15  22.8     1    19.5  3.35 
10  3.44  19.2     1    17.8  1.43 
# ℹ 22 more rows
> library(ggplot2)
> ggplot(augment(spl, mtcars), aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted))
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("augment.speedlm")
> ### * augment.speedlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.speedlm
> ### Title: Augment data with information from a(n) speedlm object
> ### Aliases: augment.speedlm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("speedglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(speedglm)
+ 
+ # fit model
+ mod <- speedlm(mpg ~ wt + qsec, data = mtcars, fitted = TRUE)
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ augment(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("augment.survreg")
> ### * augment.survreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.survreg
> ### Title: Augment data with information from a(n) survreg object
> ### Aliases: augment.survreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ sr <- survreg(
+   Surv(futime, fustat) ~ ecog.ps + rx,
+   ovarian,
+   dist = "exponential"
+ )
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(sr)
+ augment(sr, ovarian)
+ glance(sr)
+ 
+ # coefficient plot
+ td <- tidy(sr, conf.int = TRUE)
+ 
+ library(ggplot2)
+ 
+ ggplot(td, aes(estimate, term)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> sr <- survreg(Surv(futime, fustat) ~ ecog.ps + rx, ovarian, dist = "exponential")
> tidy(sr)
# A tibble: 3 × 5
  term        estimate std.error statistic     p.value
  <chr>          <dbl>     <dbl>     <dbl>       <dbl>
1 (Intercept)    6.96      1.32      5.27  0.000000139
2 ecog.ps       -0.433     0.587    -0.738 0.461      
3 rx             0.582     0.587     0.991 0.322      
> augment(sr, ovarian)
# A tibble: 26 × 9
   futime fustat   age resid.ds    rx ecog.ps .fitted .se.fit .resid
    <dbl>  <dbl> <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>
 1     59      1  72.3        2     1       1   1224.    639. -1165.
 2    115      1  74.5        2     1       1   1224.    639. -1109.
 3    156      1  66.5        2     1       2    794.    350.  -638.
 4    421      0  53.4        2     2       1   2190.   1202. -1769.
 5    431      1  50.3        2     1       1   1224.    639.  -793.
 6    448      0  56.4        1     1       2    794.    350.  -346.
 7    464      1  56.9        2     2       2   1420.    741.  -956.
 8    475      1  59.9        2     2       2   1420.    741.  -945.
 9    477      0  64.2        2     1       1   1224.    639.  -747.
10    563      1  55.2        1     2       2   1420.    741.  -857.
# ℹ 16 more rows
> glance(sr)
# A tibble: 1 × 9
   iter    df statistic logLik   AIC   BIC df.residual  nobs p.value
  <int> <int>     <dbl>  <dbl> <dbl> <dbl>       <int> <int>   <dbl>
1     4     3      1.67  -97.2  200.  204.          23    26   0.434
> td <- tidy(sr, conf.int = TRUE)
> library(ggplot2)
> ggplot(td, aes(estimate, term)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, 
+     xmax = conf.high), height = 0) + geom_vline(xintercept = 0)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("data.frame_tidiers")
> ### * data.frame_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data.frame_tidiers
> ### Title: Tidiers for data.frame objects
> ### Aliases: data.frame_tidiers tidy.data.frame augment.data.frame
> ###   glance.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ td <- tidy(mtcars)
+ td
+ 
+ glance(mtcars)
+ 
+ library(ggplot2)
+ # compare mean and standard deviation
+ ggplot(td, aes(mean, sd)) + geom_point() +
+      geom_text(aes(label = column), hjust = 1, vjust = 1) +
+      scale_x_log10() + scale_y_log10() + geom_abline()
+ ## Don't show: 
+ }) # examplesIf
> td <- tidy(mtcars)
Warning in tidy.data.frame(mtcars) :
  Data frame tidiers are deprecated and will be removed in an upcoming release of broom.
> td
# A tibble: 11 × 13
   column     n    mean      sd median trimmed    mad   min    max  range   skew
   <chr>  <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>
 1 mpg       32  20.1     6.03   19.2   19.7    3.65  10.4   33.9   23.5   0.640
 2 cyl       32   6.19    1.79    6      6.23   2      4      8      4    -0.183
 3 disp      32 231.    124.    196.   223.    94.8   71.1  472    401.    0.400
 4 hp        32 147.     68.6   123    141.    52     52    335    283     0.761
 5 drat      32   3.60    0.535   3.70   3.58   0.475  2.76   4.93   2.17  0.279
 6 wt        32   3.22    0.978   3.32   3.15   0.517  1.51   5.42   3.91  0.444
 7 qsec      32  17.8     1.79   17.7   17.8    0.955 14.5   22.9    8.4   0.387
 8 vs        32   0.438   0.504   0      0.423  0      0      1      1     0.252
 9 am        32   0.406   0.499   0      0.385  0      0      1      1     0.382
10 gear      32   3.69    0.738   4      3.62   1      3      5      2     0.555
11 carb      32   2.81    1.62    2      2.65   1      1      8      7     1.10 
# ℹ 2 more variables: kurtosis <dbl>, se <dbl>
> glance(mtcars)
Warning in glance.data.frame(mtcars) :
  Data frame tidiers are deprecated and will be removed in an upcoming release of broom.
# A tibble: 1 × 4
   nrow  ncol complete.obs na.fraction
  <int> <int>        <int>       <dbl>
1    32    11           32           0
> library(ggplot2)
> ggplot(td, aes(mean, sd)) + geom_point() + geom_text(aes(label = column), 
+     hjust = 1, vjust = 1) + scale_x_log10() + scale_y_log10() + geom_abline()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("durbinWatsonTest_tidiers")
> ### * durbinWatsonTest_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durbinWatsonTest_tidiers
> ### Title: Tidy/glance a(n) durbinWatsonTest object
> ### Aliases: durbinWatsonTest_tidiers tidy.durbinWatsonTest
> ###   glance.durbinWatsonTest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("car")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(car)
+ 
+ # fit model
+ dw <- durbinWatsonTest(lm(mpg ~ wt, data = mtcars))
+ 
+ # summarize model fit with tidiers
+ tidy(dw)
+ 
+ # same output for all durbinWatsonTests
+ glance(dw)
+ ## Don't show: 
+ }) # examplesIf
> library(car)
Loading required package: carData
> dw <- durbinWatsonTest(lm(mpg ~ wt, data = mtcars))
> tidy(dw)
# A tibble: 1 × 5
  statistic p.value autocorrelation method             alternative
      <dbl>   <dbl>           <dbl> <chr>              <chr>      
1      1.25  0.0260           0.363 Durbin-Watson Test two.sided  
> glance(dw)
# A tibble: 1 × 5
  statistic p.value autocorrelation method             alternative
      <dbl>   <dbl>           <dbl> <chr>              <chr>      
1      1.25  0.0260           0.363 Durbin-Watson Test two.sided  
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:car’, ‘package:carData’

> nameEx("glance.Arima")
> ### * glance.Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.Arima
> ### Title: Glance at a(n) Arima object
> ### Aliases: glance.Arima
> 
> ### ** Examples
> 
> 
> # fit model
> fit <- arima(lh, order = c(1, 0, 0))
> 
> # summarize model fit with tidiers
> tidy(fit)
# A tibble: 2 × 3
  term      estimate std.error
  <chr>        <dbl>     <dbl>
1 ar1          0.574     0.116
2 intercept    2.41      0.147
> glance(fit)
# A tibble: 1 × 5
  sigma logLik   AIC   BIC  nobs
  <dbl>  <dbl> <dbl> <dbl> <int>
1 0.444  -29.4  64.8  70.4    48
> 
> 
> 
> 
> cleanEx()
> nameEx("glance.Mclust")
> ### * glance.Mclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.Mclust
> ### Title: Glance at a(n) Mclust object
> ### Aliases: glance.Mclust
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mclust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load library for models and data
+ library(mclust)
+ 
+ # load data manipulation libraries
+ library(dplyr)
+ library(tibble)
+ library(purrr)
+ library(tidyr)
+ 
+ set.seed(27)
+ 
+ centers <- tibble(
+   cluster = factor(1:3),
+   # number points in each cluster
+   num_points = c(100, 150, 50),
+   # x1 coordinate of cluster center
+   x1 = c(5, 0, -3),
+   # x2 coordinate of cluster center
+   x2 = c(-1, 1, -2)
+ )
+ 
+ points <- centers %>%
+   mutate(
+     x1 = map2(num_points, x1, rnorm),
+     x2 = map2(num_points, x2, rnorm)
+   ) %>%
+   select(-num_points, -cluster) %>%
+   unnest(c(x1, x2))
+ 
+ # fit model
+ m <- Mclust(points)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m, points)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.aareg")
> ### * glance.aareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.aareg
> ### Title: Glance at a(n) aareg object
> ### Aliases: glance.aareg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ afit <- aareg(
+   Surv(time, status) ~ age + sex + ph.ecog,
+   data = lung,
+   dfbeta = TRUE
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(afit)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> afit <- aareg(Surv(time, status) ~ age + sex + ph.ecog, data = lung, dfbeta = TRUE)
> tidy(afit)
# A tibble: 4 × 7
  term        estimate  statistic std.error robust.se statistic.z  p.value
  <chr>          <dbl>      <dbl>     <dbl>     <dbl>       <dbl>    <dbl>
1 Intercept  0.00505    0.00587   0.00474   0.00477          1.23 0.219   
2 age        0.0000401  0.0000715 0.0000723 0.0000700        1.02 0.307   
3 sex       -0.00316   -0.00403   0.00122   0.00123         -3.28 0.00103 
4 ph.ecog    0.00301    0.00367   0.00102   0.00102          3.62 0.000299
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("glance.anova")
> ### * glance.anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.anova
> ### Title: Glance at a(n) anova object
> ### Aliases: glance.anova
> 
> ### ** Examples
> 
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit models
+ a <- lm(mpg ~ wt + qsec + disp, mtcars)
+ b <- lm(mpg ~ wt + qsec, mtcars)
+ 
+ mod <- anova(a, b)
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ 
+ # car::linearHypothesis() example
+ library(car)
+ mod_lht <- linearHypothesis(a, "wt - disp")
+ tidy(mod_lht)
+ glance(mod_lht)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.aov")
> ### * glance.aov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.aov
> ### Title: Glance at a(n) lm object
> ### Aliases: glance.aov
> 
> ### ** Examples
> 
> 
> a <- aov(mpg ~ wt + qsec + disp, mtcars)
> tidy(a)
# A tibble: 4 × 6
  term         df     sumsq    meansq  statistic   p.value
  <chr>     <dbl>     <dbl>     <dbl>      <dbl>     <dbl>
1 wt            1 848.      848.      121.        1.08e-11
2 qsec          1  82.9      82.9      11.9       1.82e- 3
3 disp          1   0.00102   0.00102   0.000147  9.90e- 1
4 Residuals    28 195.        6.98     NA        NA       
> 
> 
> 
> cleanEx()
> nameEx("glance.betamfx")
> ### * glance.betamfx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.betamfx
> ### Title: Glance at a(n) betamfx object
> ### Aliases: glance.betamfx
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mfx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(mfx)
+ 
+ # Simulate some data
+ set.seed(12345)
+ n <- 1000
+ x <- rnorm(n)
+ 
+ # Beta outcome
+ y <- rbeta(n, shape1 = plogis(1 + 0.5 * x), shape2 = (abs(0.2 * x)))
+ # Use Smithson and Verkuilen correction
+ y <- (y * (n - 1) + 0.5) / n
+ 
+ d <- data.frame(y, x)
+ mod_betamfx <- betamfx(y ~ x | x, data = d)
+ 
+ tidy(mod_betamfx, conf.int = TRUE)
+ 
+ # Compare with the naive model coefficients of the equivalent betareg call (not run)
+ # tidy(betamfx(y ~ x | x, data = d), conf.int = TRUE)
+ 
+ augment(mod_betamfx)
+ glance(mod_betamfx)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.betareg")
> ### * glance.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.betareg
> ### Title: Glance at a(n) betareg object
> ### Aliases: glance.betareg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("betareg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(betareg)
+ 
+ # load dats
+ data("GasolineYield", package = "betareg")
+ 
+ # fit model
+ mod <- betareg(yield ~ batch + temp, data = GasolineYield)
+ 
+ mod
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ tidy(mod, conf.int = TRUE, conf.level = .99)
+ 
+ augment(mod)
+ 
+ glance(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.biglm")
> ### * glance.biglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.biglm
> ### Title: Glance at a(n) biglm object
> ### Aliases: glance.biglm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("biglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(biglm)
+ 
+ # fit model -- linear regression
+ bfit <- biglm(mpg ~ wt + disp, mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(bfit)
+ tidy(bfit, conf.int = TRUE)
+ tidy(bfit, conf.int = TRUE, conf.level = .9)
+ 
+ glance(bfit)
+ 
+ # fit model -- logistic regression
+ bgfit <- bigglm(am ~ mpg, mtcars, family = binomial())
+ 
+ # summarize model fit with tidiers
+ tidy(bgfit)
+ tidy(bgfit, exponentiate = TRUE)
+ tidy(bgfit, conf.int = TRUE)
+ tidy(bgfit, conf.int = TRUE, conf.level = .9)
+ tidy(bgfit, conf.int = TRUE, conf.level = .9, exponentiate = TRUE)
+ 
+ glance(bgfit)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.binDesign")
> ### * glance.binDesign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.binDesign
> ### Title: Glance at a(n) binDesign object
> ### Aliases: glance.binDesign
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("binGroup", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(binGroup)
+ 
+ des <- binDesign(
+   nmax = 300, delta = 0.06,
+   p.hyp = 0.1, power = .8
+ )
+ 
+ glance(des)
+ tidy(des)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(des), aes(n, power)) +
+   geom_line()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.cch")
> ### * glance.cch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.cch
> ### Title: Glance at a(n) cch object
> ### Aliases: glance.cch
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # examples come from cch documentation
+ subcoh <- nwtco$in.subcohort
+ selccoh <- with(nwtco, rel == 1 | subcoh == 1)
+ ccoh.data <- nwtco[selccoh, ]
+ ccoh.data$subcohort <- subcoh[selccoh]
+ 
+ # central-lab histology
+ ccoh.data$histol <- factor(ccoh.data$histol, labels = c("FH", "UH"))
+ 
+ # tumour stage
+ ccoh.data$stage <- factor(ccoh.data$stage, labels = c("I", "II", "III", "IV"))
+ ccoh.data$age <- ccoh.data$age / 12 # age in years
+ 
+ # fit model
+ fit.ccP <- cch(Surv(edrel, rel) ~ stage + histol + age,
+   data = ccoh.data,
+   subcoh = ~subcohort, id = ~seqno, cohort.size = 4028
+ )
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(fit.ccP)
+ 
+ # coefficient plot
+ library(ggplot2)
+ 
+ ggplot(tidy(fit.ccP), aes(x = estimate, y = term)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> subcoh <- nwtco$in.subcohort
> selccoh <- with(nwtco, rel == 1 | subcoh == 1)
> ccoh.data <- nwtco[selccoh, ]
> ccoh.data$subcohort <- subcoh[selccoh]
> ccoh.data$histol <- factor(ccoh.data$histol, labels = c("FH", "UH"))
> ccoh.data$stage <- factor(ccoh.data$stage, labels = c("I", "II", "III", 
+     "IV"))
> ccoh.data$age <- ccoh.data$age/12
> fit.ccP <- cch(Surv(edrel, rel) ~ stage + histol + age, data = ccoh.data, 
+     subcoh = ~subcohort, id = ~seqno, cohort.size = 4028)
> tidy(fit.ccP)
# A tibble: 5 × 7
  term     estimate std.error statistic  p.value conf.low conf.high
  <chr>       <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 stageII    0.735     0.168       4.36 1.30e- 5  0.404      1.06  
2 stageIII   0.597     0.173       3.44 5.77e- 4  0.257      0.937 
3 stageIV    1.38      0.205       6.76 1.40e-11  0.983      1.79  
4 histolUH   1.50      0.160       9.38 0         1.19       1.81  
5 age        0.0433    0.0237      1.82 6.83e- 2 -0.00324    0.0898
> library(ggplot2)
> ggplot(tidy(fit.ccP), aes(x = estimate, y = term)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, 
+     xmax = conf.high), height = 0) + geom_vline(xintercept = 0)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("glance.clm")
> ### * glance.clm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.clm
> ### Title: Glance at a(n) clm object
> ### Aliases: glance.clm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ordinal")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ordinal)
+ 
+ # fit model
+ fit <- clm(rating ~ temp * contact, data = wine)
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ tidy(fit, conf.int = TRUE, conf.level = 0.9)
+ tidy(fit, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
+ 
+ glance(fit)
+ augment(fit, type.predict = "prob")
+ augment(fit, type.predict = "class")
+ 
+ # ...and again with another model specification
+ fit2 <- clm(rating ~ temp, nominal = ~contact, data = wine)
+ 
+ tidy(fit2)
+ glance(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(ordinal)
> fit <- clm(rating ~ temp * contact, data = wine)
> tidy(fit)
# A tibble: 7 × 6
  term                estimate std.error statistic  p.value coef.type
  <chr>                  <dbl>     <dbl>     <dbl>    <dbl> <chr>    
1 1|2                   -1.41      0.545    -2.59  9.66e- 3 intercept
2 2|3                    1.14      0.510     2.24  2.48e- 2 intercept
3 3|4                    3.38      0.638     5.29  1.21e- 7 intercept
4 4|5                    4.94      0.751     6.58  4.66e-11 intercept
5 tempwarm               2.32      0.701     3.31  9.28e- 4 location 
6 contactyes             1.35      0.660     2.04  4.13e- 2 location 
7 tempwarm:contactyes    0.360     0.924     0.389 6.97e- 1 location 
> tidy(fit, conf.int = TRUE, conf.level = 0.9)
# A tibble: 7 × 8
  term        estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           -1.41      0.545    -2.59  9.66e- 3   NA         NA    intercept
2 2|3            1.14      0.510     2.24  2.48e- 2   NA         NA    intercept
3 3|4            3.38      0.638     5.29  1.21e- 7   NA         NA    intercept
4 4|5            4.94      0.751     6.58  4.66e-11   NA         NA    intercept
5 tempwarm       2.32      0.701     3.31  9.28e- 4    1.20       3.52 location 
6 contactyes     1.35      0.660     2.04  4.13e- 2    0.284      2.47 location 
7 tempwarm:c…    0.360     0.924     0.389 6.97e- 1   -1.17       1.89 location 
> tidy(fit, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
# A tibble: 7 × 8
  term        estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2            0.244     0.545    -2.59  9.66e- 3   0.0837     0.710 intercept
2 2|3            3.14      0.510     2.24  2.48e- 2   1.16       8.52  intercept
3 3|4           29.3       0.638     5.29  1.21e- 7   8.38     102.    intercept
4 4|5          140.        0.751     6.58  4.66e-11  32.1      610.    intercept
5 tempwarm      10.2       0.701     3.31  9.28e- 4   2.58      40.2   location 
6 contactyes     3.85      0.660     2.04  4.13e- 2   1.05      14.0   location 
7 tempwarm:c…    1.43      0.924     0.389 6.97e- 1   0.234      8.76  location 
> glance(fit)
# A tibble: 1 × 6
    edf   AIC   BIC logLik   df.residual  nobs
  <int> <dbl> <dbl> <logLik>       <dbl> <dbl>
1     7  187.  203. -86.4162          65    72
> augment(fit, type.predict = "prob")
# A tibble: 72 × 4
   rating temp  contact .fitted
   <ord>  <fct> <fct>     <dbl>
 1 2      cold  no       0.562 
 2 3      cold  no       0.209 
 3 3      cold  yes      0.435 
 4 4      cold  yes      0.0894
 5 4      warm  no       0.190 
 6 4      warm  no       0.190 
 7 5      warm  yes      0.286 
 8 5      warm  yes      0.286 
 9 1      cold  no       0.196 
10 2      cold  no       0.562 
# ℹ 62 more rows
> augment(fit, type.predict = "class")
# A tibble: 72 × 4
   rating temp  contact .fitted
   <ord>  <fct> <fct>   <fct>  
 1 2      cold  no      2      
 2 3      cold  no      2      
 3 3      cold  yes     3      
 4 4      cold  yes     3      
 5 4      warm  no      3      
 6 4      warm  no      3      
 7 5      warm  yes     4      
 8 5      warm  yes     4      
 9 1      cold  no      2      
10 2      cold  no      2      
# ℹ 62 more rows
> fit2 <- clm(rating ~ temp, nominal = ~contact, data = wine)
> tidy(fit2)
# A tibble: 9 × 6
  term            estimate std.error statistic      p.value coef.type
  <chr>              <dbl>     <dbl>     <dbl>        <dbl> <chr>    
1 1|2.(Intercept)    -1.32     0.562     -2.35 0.0186       intercept
2 2|3.(Intercept)     1.25     0.475      2.63 0.00866      intercept
3 3|4.(Intercept)     3.55     0.656      5.41 0.0000000625 intercept
4 4|5.(Intercept)     4.66     0.860      5.42 0.0000000608 intercept
5 1|2.contactyes     -1.62     1.16      -1.39 0.164        intercept
6 2|3.contactyes     -1.51     0.591     -2.56 0.0105       intercept
7 3|4.contactyes     -1.67     0.649     -2.58 0.00985      intercept
8 4|5.contactyes     -1.05     0.897     -1.17 0.241        intercept
9 tempwarm            2.52     0.535      4.71 0.00000250   location 
> glance(fit2)
# A tibble: 1 × 6
    edf   AIC   BIC logLik    df.residual  nobs
  <int> <dbl> <dbl> <logLik>        <dbl> <dbl>
1     9  190.  211. -86.20855          63    72
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ordinal’

> nameEx("glance.clmm")
> ### * glance.clmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.clmm
> ### Title: Glance at a(n) clmm object
> ### Aliases: glance.clmm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ordinal")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ordinal)
+ 
+ # fit model
+ fit <- clmm(rating ~ temp + contact + (1 | judge), data = wine)
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ tidy(fit, conf.int = TRUE, conf.level = 0.9)
+ tidy(fit, conf.int = TRUE, exponentiate = TRUE)
+ 
+ glance(fit)
+ 
+ # ...and again with another model specification
+ fit2 <- clmm(rating ~ temp + (1 | judge), nominal = ~contact, data = wine)
+ 
+ tidy(fit2)
+ glance(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(ordinal)
> fit <- clmm(rating ~ temp + contact + (1 | judge), data = wine)
> tidy(fit)
# A tibble: 6 × 6
  term       estimate std.error statistic  p.value coef.type
  <chr>         <dbl>     <dbl>     <dbl>    <dbl> <chr>    
1 1|2           -1.62     0.682     -2.38 1.74e- 2 intercept
2 2|3            1.51     0.604      2.51 1.22e- 2 intercept
3 3|4            4.23     0.809      5.23 1.72e- 7 intercept
4 4|5            6.09     0.972      6.26 3.82e-10 intercept
5 tempwarm       3.06     0.595      5.14 2.68e- 7 location 
6 contactyes     1.83     0.513      3.58 3.44e- 4 location 
> tidy(fit, conf.int = TRUE, conf.level = 0.9)
# A tibble: 6 × 8
  term       estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>         <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           -1.62     0.682     -2.38 1.74e- 2   -2.75     -0.501 intercept
2 2|3            1.51     0.604      2.51 1.22e- 2    0.520     2.51  intercept
3 3|4            4.23     0.809      5.23 1.72e- 7    2.90      5.56  intercept
4 4|5            6.09     0.972      6.26 3.82e-10    4.49      7.69  intercept
5 tempwarm       3.06     0.595      5.14 2.68e- 7    2.08      4.04  location 
6 contactyes     1.83     0.513      3.58 3.44e- 4    0.992     2.68  location 
> tidy(fit, conf.int = TRUE, exponentiate = TRUE)
# A tibble: 6 × 8
  term       estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>         <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           0.197     0.682     -2.38 1.74e- 2   0.0518     0.751 intercept
2 2|3           4.54      0.604      2.51 1.22e- 2   1.39      14.8   intercept
3 3|4          68.6       0.809      5.23 1.72e- 7  14.1      335.    intercept
4 4|5         441.        0.972      6.26 3.82e-10  65.5     2965.    intercept
5 tempwarm     21.4       0.595      5.14 2.68e- 7   6.66      68.7   location 
6 contactyes    6.26      0.513      3.58 3.44e- 4   2.29      17.1   location 
> glance(fit)
# A tibble: 1 × 5
    edf   AIC   BIC logLik     nobs
  <dbl> <dbl> <dbl> <logLik>  <dbl>
1     7  177.  193. -81.56541    72
> fit2 <- clmm(rating ~ temp + (1 | judge), nominal = ~contact, data = wine)
Warning in nlminb(rho$par, function(par) obj.fun(rho, par), control = control) :
  unrecognized control elements named ‘nominal’ ignored
> tidy(fit2)
# A tibble: 5 × 6
  term     estimate std.error statistic       p.value coef.type
  <chr>       <dbl>     <dbl>     <dbl>         <dbl> <chr>    
1 1|2        -2.20      0.613     -3.59 0.000333      intercept
2 2|3         0.545     0.476      1.15 0.252         intercept
3 3|4         2.84      0.607      4.68 0.00000291    intercept
4 4|5         4.48      0.751      5.96 0.00000000256 intercept
5 tempwarm    2.67      0.554      4.81 0.00000147    location 
> glance(fit2)
# A tibble: 1 × 5
    edf   AIC   BIC logLik     nobs
  <dbl> <dbl> <dbl> <logLik>  <dbl>
1     6  189.  203. -88.73882    72
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ordinal’

> nameEx("glance.coeftest")
> ### * glance.coeftest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.coeftest
> ### Title: Glance at a(n) coeftest object
> ### Aliases: glance.coeftest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lmtest")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lmtest)
+ 
+ m <- lm(dist ~ speed, data = cars)
+ 
+ coeftest(m)
+ tidy(coeftest(m))
+ tidy(coeftest(m, conf.int = TRUE))
+ 
+ # a very common workflow is to combine lmtest::coeftest with alternate
+ # variance-covariance matrices via the sandwich package. The lmtest
+ # tidiers support this workflow too, enabling you to adjust the standard
+ # errors of your tidied models on the fly.
+ library(sandwich)
+ 
+ # "HC3" (default) robust SEs
+ tidy(coeftest(m, vcov = vcovHC))
+ 
+ # "HC2" robust SEs
+ tidy(coeftest(m, vcov = vcovHC, type = "HC2"))
+ 
+ # N-W HAC robust SEs
+ tidy(coeftest(m, vcov = NeweyWest))
+ 
+ # the columns of the returned tibble for glance.coeftest() will vary
+ # depending on whether the coeftest object retains the underlying model.
+ # Users can control this with the "save = TRUE" argument of coeftest().
+ glance(coeftest(m))
+ glance(coeftest(m, save = TRUE))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.coxph")
> ### * glance.coxph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.coxph
> ### Title: Glance at a(n) coxph object
> ### Aliases: glance.coxph
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ cfit <- coxph(Surv(time, status) ~ age + sex, lung)
+ 
+ # summarize model fit with tidiers
+ tidy(cfit)
+ tidy(cfit, exponentiate = TRUE)
+ 
+ lp <- augment(cfit, lung)
+ risks <- augment(cfit, lung, type.predict = "risk")
+ expected <- augment(cfit, lung, type.predict = "expected")
+ 
+ glance(cfit)
+ 
+ # also works on clogit models
+ resp <- levels(logan$occupation)
+ n <- nrow(logan)
+ indx <- rep(1:n, length(resp))
+ logan2 <- data.frame(
+   logan[indx, ],
+   id = indx,
+   tocc = factor(rep(resp, each = n))
+ )
+ 
+ logan2$case <- (logan2$occupation == logan2$tocc)
+ 
+ cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
+ 
+ tidy(cl)
+ glance(cl)
+ 
+ library(ggplot2)
+ 
+ ggplot(lp, aes(age, .fitted, color = sex)) +
+   geom_point()
+ 
+ ggplot(risks, aes(age, .fitted, color = sex)) +
+   geom_point()
+ 
+ ggplot(expected, aes(time, .fitted, color = sex)) +
+   geom_point()
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> tidy(cfit)
# A tibble: 2 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 age     0.0170   0.00922      1.85 0.0646 
2 sex    -0.513    0.167       -3.06 0.00218
> tidy(cfit, exponentiate = TRUE)
# A tibble: 2 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 age      1.02    0.00922      1.85 0.0646 
2 sex      0.599   0.167       -3.06 0.00218
> lp <- augment(cfit, lung)
> risks <- augment(cfit, lung, type.predict = "risk")
> expected <- augment(cfit, lung, type.predict = "expected")
> glance(cfit)
# A tibble: 1 × 18
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1   228    165          14.1    0.000857         13.7    0.00105           13.5
# ℹ 11 more variables: p.value.wald <dbl>, statistic.robust <dbl>,
#   p.value.robust <dbl>, r.squared <dbl>, r.squared.max <dbl>,
#   concordance <dbl>, std.error.concordance <dbl>, logLik <dbl>, AIC <dbl>,
#   BIC <dbl>, nobs <int>
> resp <- levels(logan$occupation)
> n <- nrow(logan)
> indx <- rep(1:n, length(resp))
> logan2 <- data.frame(logan[indx, ], id = indx, tocc = factor(rep(resp, 
+     each = n)))
> logan2$case <- (logan2$occupation == logan2$tocc)
> cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
> tidy(cl)
# A tibble: 9 × 5
  term                       estimate std.error statistic   p.value
  <chr>                         <dbl>     <dbl>     <dbl>     <dbl>
1 toccfarm                     -1.90     1.38       -1.37  1.70e- 1
2 toccoperatives                1.17     0.566       2.06  3.91e- 2
3 toccprofessional             -8.10     0.699     -11.6   4.45e-31
4 toccsales                    -5.03     0.770      -6.53  6.54e-11
5 tocccraftsmen:education      -0.332    0.0569     -5.84  5.13e- 9
6 toccfarm:education           -0.370    0.116      -3.18  1.47e- 3
7 toccoperatives:education     -0.422    0.0584     -7.23  4.98e-13
8 toccprofessional:education    0.278    0.0510      5.45  4.94e- 8
9 toccsales:education          NA        0          NA    NA       
> glance(cl)
# A tibble: 1 × 18
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1  4190    838          666.   1.90e-138         682.  5.01e-142           414.
# ℹ 11 more variables: p.value.wald <dbl>, statistic.robust <dbl>,
#   p.value.robust <dbl>, r.squared <dbl>, r.squared.max <dbl>,
#   concordance <dbl>, std.error.concordance <dbl>, logLik <dbl>, AIC <dbl>,
#   BIC <dbl>, nobs <int>
> library(ggplot2)
> ggplot(lp, aes(age, .fitted, color = sex)) + geom_point()
> ggplot(risks, aes(age, .fitted, color = sex)) + geom_point()
> ggplot(expected, aes(time, .fitted, color = sex)) + geom_point()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("glance.crr")
> ### * glance.crr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.crr
> ### Title: Glance at a(n) crr object
> ### Aliases: glance.crr
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("cmprsk")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(cmprsk)
+ 
+ # time to loco-regional failure (lrf)
+ lrf_time <- rexp(100)
+ lrf_event <- sample(0:2, 100, replace = TRUE)
+ trt <- sample(0:1, 100, replace = TRUE)
+ strt <- sample(1:2, 100, replace = TRUE)
+ 
+ # fit model
+ x <- crr(lrf_time, lrf_event, cbind(trt, strt))
+ 
+ # summarize model fit with tidiers
+ tidy(x, conf.int = TRUE)
+ glance(x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.cv.glmnet")
> ### * glance.cv.glmnet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.cv.glmnet
> ### Title: Glance at a(n) cv.glmnet object
> ### Aliases: glance.cv.glmnet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("glmnet", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(glmnet)
+ 
+ set.seed(27)
+ 
+ nobs <- 100
+ nvar <- 50
+ real <- 5
+ 
+ x <- matrix(rnorm(nobs * nvar), nobs, nvar)
+ beta <- c(rnorm(real, 0, 1), rep(0, nvar - real))
+ y <- c(t(beta) %*% t(x)) + rnorm(nvar, sd = 3)
+ 
+ cvfit1 <- cv.glmnet(x, y)
+ 
+ tidy(cvfit1)
+ glance(cvfit1)
+ 
+ library(ggplot2)
+ 
+ tidied_cv <- tidy(cvfit1)
+ glance_cv <- glance(cvfit1)
+ 
+ # plot of MSE as a function of lambda
+ g <- ggplot(tidied_cv, aes(lambda, estimate)) +
+   geom_line() +
+   scale_x_log10()
+ g
+ 
+ # plot of MSE as a function of lambda with confidence ribbon
+ g <- g + geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+ g
+ 
+ # plot of MSE as a function of lambda with confidence ribbon and choices
+ # of minimum lambda marked
+ g <- g +
+   geom_vline(xintercept = glance_cv$lambda.min) +
+   geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+ g
+ 
+ # plot of number of zeros for each choice of lambda
+ ggplot(tidied_cv, aes(lambda, nzero)) +
+   geom_line() +
+   scale_x_log10()
+ 
+ # coefficient plot with min lambda shown
+ tidied <- tidy(cvfit1$glmnet.fit)
+ 
+ ggplot(tidied, aes(lambda, estimate, group = term)) +
+   scale_x_log10() +
+   geom_line() +
+   geom_vline(xintercept = glance_cv$lambda.min) +
+   geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+ ## Don't show: 
+ }) # examplesIf
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.1-8
> set.seed(27)
> nobs <- 100
> nvar <- 50
> real <- 5
> x <- matrix(rnorm(nobs * nvar), nobs, nvar)
> beta <- c(rnorm(real, 0, 1), rep(0, nvar - real))
> y <- c(t(beta) %*% t(x)) + rnorm(nvar, sd = 3)
> cvfit1 <- cv.glmnet(x, y)
> tidy(cvfit1)
# A tibble: 74 × 6
   lambda estimate std.error conf.low conf.high nzero
    <dbl>    <dbl>     <dbl>    <dbl>     <dbl> <int>
 1  1.45      17.4      2.28     15.1      19.7     0
 2  1.32      17.4      2.28     15.1      19.7     1
 3  1.20      17.2      2.22     15.0      19.5     1
 4  1.09      17.0      2.15     14.8      19.1     1
 5  0.997     16.8      2.09     14.7      18.9     1
 6  0.909     16.7      2.03     14.7      18.7     2
 7  0.828     16.7      1.99     14.7      18.6     3
 8  0.754     16.7      1.95     14.7      18.6     5
 9  0.687     16.8      1.93     14.8      18.7     7
10  0.626     16.9      1.91     15.0      18.8     7
# ℹ 64 more rows
> glance(cvfit1)
# A tibble: 1 × 3
  lambda.min lambda.1se  nobs
       <dbl>      <dbl> <int>
1      0.828       1.45   100
> library(ggplot2)
> tidied_cv <- tidy(cvfit1)
> glance_cv <- glance(cvfit1)
> g <- ggplot(tidied_cv, aes(lambda, estimate)) + geom_line() + scale_x_log10()
> g
> g <- g + geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.25)
> g
> g <- g + geom_vline(xintercept = glance_cv$lambda.min) + geom_vline(xintercept = glance_cv$lambda.1se, 
+     lty = 2)
> g
> ggplot(tidied_cv, aes(lambda, nzero)) + geom_line() + scale_x_log10()
> tidied <- tidy(cvfit1$glmnet.fit)
> ggplot(tidied, aes(lambda, estimate, group = term)) + scale_x_log10() + 
+     geom_line() + geom_vline(xintercept = glance_cv$lambda.min) + geom_vline(xintercept = glance_cv$lambda.1se, 
+     lty = 2)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:glmnet’, ‘package:Matrix’

> nameEx("glance.drc")
> ### * glance.drc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.drc
> ### Title: Glance at a(n) drc object
> ### Aliases: glance.drc
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("drc")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(drc)
+ 
+ # fit model
+ mod <- drm(dead / total ~ conc, type,
+   weights = total, data = selenium, fct = LL.2(), type = "binomial"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ 
+ glance(mod)
+ 
+ augment(mod, selenium)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.factanal")
> ### * glance.factanal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.factanal
> ### Title: Glance at a(n) factanal object
> ### Aliases: glance.factanal
> 
> ### ** Examples
> 
> 
> set.seed(123)
> 
> # generate data
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(purrr)
> 
> m1 <- tibble(
+   v1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 4, 5, 6),
+   v2 = c(1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 3, 4, 3, 3, 3, 4, 6, 5),
+   v3 = c(3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 6),
+   v4 = c(3, 3, 4, 3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 5, 6, 4),
+   v5 = c(1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 6, 4, 5),
+   v6 = c(1, 1, 1, 2, 1, 3, 3, 3, 4, 3, 1, 1, 1, 2, 1, 6, 5, 4)
+ )
> 
> # new data
> m2 <- map_dfr(m1, rev)
> 
> # factor analysis objects
> fit1 <- factanal(m1, factors = 3, scores = "Bartlett")
> fit2 <- factanal(m1, factors = 3, scores = "regression")
> 
> # tidying the object
> tidy(fit1)
# A tibble: 6 × 5
  variable uniqueness   fl1   fl2   fl3
  <chr>         <dbl> <dbl> <dbl> <dbl>
1 v1           0.005  0.944 0.182 0.267
2 v2           0.101  0.905 0.235 0.159
3 v3           0.005  0.236 0.210 0.946
4 v4           0.224  0.180 0.242 0.828
5 v5           0.0843 0.242 0.881 0.286
6 v6           0.005  0.193 0.959 0.196
> tidy(fit2)
# A tibble: 6 × 5
  variable uniqueness   fl1   fl2   fl3
  <chr>         <dbl> <dbl> <dbl> <dbl>
1 v1           0.005  0.944 0.182 0.267
2 v2           0.101  0.905 0.235 0.159
3 v3           0.005  0.236 0.210 0.946
4 v4           0.224  0.180 0.242 0.828
5 v5           0.0843 0.242 0.881 0.286
6 v6           0.005  0.193 0.959 0.196
> 
> # augmented dataframe
> augment(fit1)
# A tibble: 18 × 4
   .rownames   .fs1   .fs2   .fs3
   <chr>      <dbl>  <dbl>  <dbl>
 1 1         -0.904 -0.931  0.948
 2 2         -0.869 -0.933  0.935
 3 3         -0.908 -0.932  0.962
 4 4         -1.00  -0.253  0.818
 5 5         -0.904 -0.931  0.948
 6 6         -0.745  0.727 -0.788
 7 7         -0.710  0.725 -0.801
 8 8         -0.750  0.726 -0.774
 9 9         -0.808  1.40  -0.930
10 10        -0.745  0.727 -0.788
11 11         0.927 -0.931 -0.837
12 12         0.963 -0.933 -0.849
13 13         0.923 -0.932 -0.823
14 14         0.829 -0.253 -0.967
15 15         0.927 -0.931 -0.837
16 16         0.422  2.05   1.29 
17 17         1.47   1.29   0.545
18 18         1.88   0.309  1.95 
> augment(fit2)
# A tibble: 18 × 4
   .rownames   .fs1   .fs2   .fs3
   <chr>      <dbl>  <dbl>  <dbl>
 1 1         -0.897 -0.925  0.936
 2 2         -0.861 -0.927  0.924
 3 3         -0.901 -0.926  0.950
 4 4         -0.993 -0.251  0.809
 5 5         -0.897 -0.925  0.936
 6 6         -0.741  0.720 -0.784
 7 7         -0.706  0.718 -0.796
 8 8         -0.745  0.719 -0.770
 9 9         -0.803  1.39  -0.923
10 10        -0.741  0.720 -0.784
11 11         0.917 -0.925 -0.830
12 12         0.952 -0.927 -0.842
13 13         0.913 -0.926 -0.816
14 14         0.820 -0.252 -0.958
15 15         0.917 -0.925 -0.830
16 16         0.426  2.04   1.28 
17 17         1.46   1.29   0.548
18 18         1.88   0.314  1.95 
> 
> # augmented dataframe (with new data)
> augment(fit1, data = m2)
# A tibble: 18 × 10
   .rownames    v1    v2    v3    v4    v5    v6   .fs1   .fs2   .fs3
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>
 1 1             6     5     6     4     5     4 -0.904 -0.931  0.948
 2 2             5     6     4     6     4     5 -0.869 -0.933  0.935
 3 3             4     4     5     5     6     6 -0.908 -0.932  0.962
 4 4             3     3     1     1     1     1 -1.00  -0.253  0.818
 5 5             3     3     1     1     1     2 -0.904 -0.931  0.948
 6 6             3     3     1     2     1     1 -0.745  0.727 -0.788
 7 7             3     4     1     1     1     1 -0.710  0.725 -0.801
 8 8             3     3     1     1     1     1 -0.750  0.726 -0.774
 9 9             1     1     1     1     3     3 -0.808  1.40  -0.930
10 10            1     2     1     1     3     4 -0.745  0.727 -0.788
11 11            1     1     1     2     3     3  0.927 -0.931 -0.837
12 12            1     2     1     1     3     3  0.963 -0.933 -0.849
13 13            1     1     1     1     3     3  0.923 -0.932 -0.823
14 14            1     1     3     3     1     1  0.829 -0.253 -0.967
15 15            1     1     3     3     1     2  0.927 -0.931 -0.837
16 16            1     1     3     4     1     1  0.422  2.05   1.29 
17 17            1     2     3     3     1     1  1.47   1.29   0.545
18 18            1     1     3     3     1     1  1.88   0.309  1.95 
> augment(fit2, data = m2)
# A tibble: 18 × 10
   .rownames    v1    v2    v3    v4    v5    v6   .fs1   .fs2   .fs3
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>
 1 1             6     5     6     4     5     4 -0.897 -0.925  0.936
 2 2             5     6     4     6     4     5 -0.861 -0.927  0.924
 3 3             4     4     5     5     6     6 -0.901 -0.926  0.950
 4 4             3     3     1     1     1     1 -0.993 -0.251  0.809
 5 5             3     3     1     1     1     2 -0.897 -0.925  0.936
 6 6             3     3     1     2     1     1 -0.741  0.720 -0.784
 7 7             3     4     1     1     1     1 -0.706  0.718 -0.796
 8 8             3     3     1     1     1     1 -0.745  0.719 -0.770
 9 9             1     1     1     1     3     3 -0.803  1.39  -0.923
10 10            1     2     1     1     3     4 -0.741  0.720 -0.784
11 11            1     1     1     2     3     3  0.917 -0.925 -0.830
12 12            1     2     1     1     3     3  0.952 -0.927 -0.842
13 13            1     1     1     1     3     3  0.913 -0.926 -0.816
14 14            1     1     3     3     1     1  0.820 -0.252 -0.958
15 15            1     1     3     3     1     2  0.917 -0.925 -0.830
16 16            1     1     3     4     1     1  0.426  2.04   1.28 
17 17            1     2     3     3     1     1  1.46   1.29   0.548
18 18            1     1     3     3     1     1  1.88   0.314  1.95 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’, ‘package:dplyr’

> nameEx("glance.felm")
> ### * glance.felm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.felm
> ### Title: Glance at a(n) felm object
> ### Aliases: glance.felm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lfe")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lfe)
+ 
+ # use built-in `airquality` dataset
+ head(airquality)
+ 
+ # no FEs; same as lm()
+ est0 <- felm(Ozone ~ Temp + Wind + Solar.R, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est0)
+ augment(est0)
+ 
+ # add month fixed effects
+ est1 <- felm(Ozone ~ Temp + Wind + Solar.R | Month, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est1)
+ tidy(est1, fe = TRUE)
+ augment(est1)
+ glance(est1)
+ 
+ # the "se.type" argument can be used to switch out different standard errors
+ # types on the fly. In turn, this can be useful exploring the effect of
+ # different error structures on model inference.
+ tidy(est1, se.type = "iid")
+ tidy(est1, se.type = "robust")
+ 
+ # add clustered SEs (also by month)
+ est2 <- felm(Ozone ~ Temp + Wind + Solar.R | Month | 0 | Month, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est2, conf.int = TRUE)
+ tidy(est2, conf.int = TRUE, se.type = "cluster")
+ tidy(est2, conf.int = TRUE, se.type = "robust")
+ tidy(est2, conf.int = TRUE, se.type = "iid")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.fitdistr")
> ### * glance.fitdistr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.fitdistr
> ### Title: Glance at a(n) fitdistr object
> ### Aliases: glance.fitdistr
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # generate data
+ set.seed(2015)
+ x <- rnorm(100, 5, 2)
+ 
+ #  fit models
+ fit <- fitdistr(x, dnorm, list(mean = 3, sd = 1))
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ glance(fit)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> set.seed(2015)
> x <- rnorm(100, 5, 2)
> fit <- fitdistr(x, dnorm, list(mean = 3, sd = 1))
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
> tidy(fit)
# A tibble: 2 × 3
  term  estimate std.error
  <chr>    <dbl>     <dbl>
1 mean      4.90     0.201
2 sd        2.01     0.142
> glance(fit)
# A tibble: 1 × 4
  logLik      AIC   BIC  nobs
  <logLik>  <dbl> <dbl> <int>
1 -211.6533  427.  433.   100
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("glance.fixest")
> ### * glance.fixest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.fixest
> ### Title: Glance at a(n) fixest object
> ### Aliases: glance.fixest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("fixest") & !broom:::is_cran_check()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(fixest)
+ 
+ gravity <-
+   feols(
+     log(Euros) ~ log(dist_km) | Origin + Destination + Product + Year, trade
+   )
+ 
+ tidy(gravity)
+ glance(gravity)
+ augment(gravity, trade)
+ 
+ # to get robust or clustered SEs, users can either:
+ 
+ # 1) specify the arguments directly in the `tidy()` call
+ 
+ tidy(gravity, conf.int = TRUE, cluster = c("Product", "Year"))
+ 
+ tidy(gravity, conf.int = TRUE, se = "threeway")
+ 
+ # 2) or, feed tidy() a summary.fixest object that has already accepted
+ # these arguments
+ 
+ gravity_summ <- summary(gravity, cluster = c("Product", "Year"))
+ 
+ tidy(gravity_summ, conf.int = TRUE)
+ 
+ # approach (1) is preferred.
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.gam")
> ### * glance.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.gam
> ### Title: Glance at a(n) gam object
> ### Aliases: glance.gam
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mgcv")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mgcv)
+ 
+ # fit model
+ g <- gam(mpg ~ s(hp) + am + qsec, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(g)
+ tidy(g, parametric = TRUE)
+ glance(g)
+ augment(g)
+ ## Don't show: 
+ }) # examplesIf
> library(mgcv)
Loading required package: nlme
This is mgcv 1.9-1. For overview type 'help("mgcv-package")'.
> g <- gam(mpg ~ s(hp) + am + qsec, data = mtcars)
> tidy(g)
# A tibble: 1 × 5
  term    edf ref.df statistic p.value
  <chr> <dbl>  <dbl>     <dbl>   <dbl>
1 s(hp)  2.36   3.02      6.34 0.00218
> tidy(g, parametric = TRUE)
# A tibble: 3 × 5
  term        estimate std.error statistic p.value
  <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 (Intercept)  16.7        9.83      1.70  0.101  
2 am            4.37       1.56      2.81  0.00918
3 qsec          0.0904     0.525     0.172 0.865  
> glance(g)
# A tibble: 1 × 9
     df logLik   AIC   BIC deviance df.residual  nobs adj.r.squared  npar
  <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl> <int>         <dbl> <int>
1  5.36  -74.4  162.  171.     196.        26.6    32         0.797    12
> augment(g)
# A tibble: 32 × 11
   .rownames          mpg    am  qsec    hp .fitted .se.fit .resid   .hat .sigma
   <chr>            <dbl> <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl> <lgl> 
 1 Mazda RX4         21       1  16.5   110    24.3   1.03  -3.25  0.145  NA    
 2 Mazda RX4 Wag     21       1  17.0   110    24.3   0.925 -3.30  0.116  NA    
 3 Datsun 710        22.8     1  18.6    93    26.0   0.894 -3.22  0.109  NA    
 4 Hornet 4 Drive    21.4     0  19.4   110    20.2   0.827  1.25  0.0930 NA    
 5 Hornet Sportabo…  18.7     0  17.0   175    15.7   0.815  3.02  0.0902 NA    
 6 Valiant           18.1     0  20.2   105    20.7   0.914 -2.56  0.113  NA    
 7 Duster 360        14.3     0  15.8   245    12.7   1.11   1.63  0.167  NA    
 8 Merc 240D         24.4     0  20      62    25.0   1.45  -0.618 0.287  NA    
 9 Merc 230          22.8     0  22.9    95    21.8   1.81   0.959 0.446  NA    
10 Merc 280          19.2     0  18.3   123    19.0   0.864  0.211 0.102  NA    
# ℹ 22 more rows
# ℹ 1 more variable: .cooksd <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("glance.geeglm")
> ### * glance.geeglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.geeglm
> ### Title: Glance at a(n) geeglm object
> ### Aliases: glance.geeglm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("geepack")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(geepack)
+ 
+ # load data
+ data(state)
+ 
+ 
+ ds <- data.frame(state.region, state.x77)
+ 
+ # fit model
+ geefit <- geeglm(Income ~ Frost + Murder,
+   id = state.region,
+   data = ds,
+   corstr = "exchangeable"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(geefit)
+ tidy(geefit, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.glm")
> ### * glance.glm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.glm
> ### Title: Glance at a(n) glm object
> ### Aliases: glance.glm
> 
> ### ** Examples
> 
> 
> g <- glm(am ~ mpg, mtcars, family = "binomial")
> glance(g)
# A tibble: 1 × 8
  null.deviance df.null logLik   AIC   BIC deviance df.residual  nobs
          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1          43.2      31  -14.8  33.7  36.6     29.7          30    32
> 
> 
> 
> cleanEx()
> nameEx("glance.glmRob")
> ### * glance.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.glmRob
> ### Title: Glance at a(n) glmRob object
> ### Aliases: glance.glmRob
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("robust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(robust)
+ 
+ # fit model
+ gm <- glmRob(am ~ wt, data = mtcars, family = "binomial")
+ 
+ # summarize model fit with tidiers
+ tidy(gm)
+ glance(gm)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.glmnet")
> ### * glance.glmnet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.glmnet
> ### Title: Glance at a(n) glmnet object
> ### Aliases: glance.glmnet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("glmnet", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(glmnet)
+ 
+ set.seed(2014)
+ x <- matrix(rnorm(100 * 20), 100, 20)
+ y <- rnorm(100)
+ fit1 <- glmnet(x, y)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(fit1)
+ glance(fit1)
+ 
+ library(dplyr)
+ library(ggplot2)
+ 
+ tidied <- tidy(fit1) %>% filter(term != "(Intercept)")
+ 
+ ggplot(tidied, aes(step, estimate, group = term)) +
+   geom_line()
+ 
+ ggplot(tidied, aes(lambda, estimate, group = term)) +
+   geom_line() +
+   scale_x_log10()
+ 
+ ggplot(tidied, aes(lambda, dev.ratio)) +
+   geom_line()
+ 
+ # works for other types of regressions as well, such as logistic
+ g2 <- sample(1:2, 100, replace = TRUE)
+ fit2 <- glmnet(x, g2, family = "binomial")
+ tidy(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.1-8
> set.seed(2014)
> x <- matrix(rnorm(100 * 20), 100, 20)
> y <- rnorm(100)
> fit1 <- glmnet(x, y)
> tidy(fit1)
# A tibble: 1,086 × 5
   term         step estimate lambda dev.ratio
   <chr>       <dbl>    <dbl>  <dbl>     <dbl>
 1 (Intercept)     1   -0.207 0.152    0      
 2 (Intercept)     2   -0.208 0.139    0.00464
 3 (Intercept)     3   -0.209 0.127    0.0111 
 4 (Intercept)     4   -0.210 0.115    0.0165 
 5 (Intercept)     5   -0.210 0.105    0.0240 
 6 (Intercept)     6   -0.210 0.0957   0.0321 
 7 (Intercept)     7   -0.210 0.0872   0.0412 
 8 (Intercept)     8   -0.210 0.0795   0.0497 
 9 (Intercept)     9   -0.209 0.0724   0.0593 
10 (Intercept)    10   -0.208 0.0660   0.0682 
# ℹ 1,076 more rows
> glance(fit1)
# A tibble: 1 × 3
  nulldev npasses  nobs
    <dbl>   <int> <int>
1    104.     255   100
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> tidied <- tidy(fit1) %>% filter(term != "(Intercept)")
> ggplot(tidied, aes(step, estimate, group = term)) + geom_line()
> ggplot(tidied, aes(lambda, estimate, group = term)) + geom_line() + scale_x_log10()
> ggplot(tidied, aes(lambda, dev.ratio)) + geom_line()
> g2 <- sample(1:2, 100, replace = TRUE)
> fit2 <- glmnet(x, g2, family = "binomial")
> tidy(fit2)
# A tibble: 947 × 5
   term         step estimate lambda dev.ratio
   <chr>       <dbl>    <dbl>  <dbl>     <dbl>
 1 (Intercept)     1    0.282 0.0906 -1.62e-15
 2 (Intercept)     2    0.281 0.0826  6.28e- 3
 3 (Intercept)     3    0.279 0.0753  1.55e- 2
 4 (Intercept)     4    0.277 0.0686  2.48e- 2
 5 (Intercept)     5    0.284 0.0625  4.17e- 2
 6 (Intercept)     6    0.293 0.0569  5.79e- 2
 7 (Intercept)     7    0.303 0.0519  7.39e- 2
 8 (Intercept)     8    0.314 0.0473  8.94e- 2
 9 (Intercept)     9    0.325 0.0431  1.03e- 1
10 (Intercept)    10    0.336 0.0392  1.14e- 1
# ℹ 937 more rows
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’, ‘package:glmnet’,
  ‘package:Matrix’

> nameEx("glance.gmm")
> ### * glance.gmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.gmm
> ### Title: Glance at a(n) gmm object
> ### Aliases: glance.gmm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("gmm", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(gmm)
+ 
+ # examples come from the "gmm" package
+ # CAPM test with GMM
+ data(Finance)
+ r <- Finance[1:300, 1:10]
+ rm <- Finance[1:300, "rm"]
+ rf <- Finance[1:300, "rf"]
+ 
+ z <- as.matrix(r - rf)
+ t <- nrow(z)
+ zm <- rm - rf
+ h <- matrix(zm, t, 1)
+ res <- gmm(z ~ zm, x = h)
+ 
+ # tidy result
+ tidy(res)
+ tidy(res, conf.int = TRUE)
+ tidy(res, conf.int = TRUE, conf.level = .99)
+ 
+ # coefficient plot
+ library(ggplot2)
+ library(dplyr)
+ 
+ tidy(res, conf.int = TRUE) %>%
+   mutate(variable = reorder(term, estimate)) %>%
+   ggplot(aes(estimate, variable)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+   geom_vline(xintercept = 0, color = "red", lty = 2)
+ 
+ # from a function instead of a matrix
+ g <- function(theta, x) {
+   e <- x[, 2:11] - theta[1] - (x[, 1] - theta[1]) %*% matrix(theta[2:11], 1, 10)
+   gmat <- cbind(e, e * c(x[, 1]))
+   return(gmat)
+ }
+ 
+ x <- as.matrix(cbind(rm, r))
+ res_black <- gmm(g, x = x, t0 = rep(0, 11))
+ 
+ tidy(res_black)
+ tidy(res_black, conf.int = TRUE)
+ 
+ # APT test with Fama-French factors and GMM
+ 
+ f1 <- zm
+ f2 <- Finance[1:300, "hml"] - rf
+ f3 <- Finance[1:300, "smb"] - rf
+ h <- cbind(f1, f2, f3)
+ res2 <- gmm(z ~ f1 + f2 + f3, x = h)
+ 
+ td2 <- tidy(res2, conf.int = TRUE)
+ td2
+ 
+ # coefficient plot
+ td2 %>%
+   mutate(variable = reorder(term, estimate)) %>%
+   ggplot(aes(estimate, variable)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+   geom_vline(xintercept = 0, color = "red", lty = 2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.ivreg")
> ### * glance.ivreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.ivreg
> ### Title: Glance at a(n) ivreg object
> ### Aliases: glance.ivreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("AER")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(AER)
+ 
+ # load data
+ data("CigarettesSW", package = "AER")
+ 
+ # fit model
+ ivr <- ivreg(
+   log(packs) ~ income | population,
+   data = CigarettesSW,
+   subset = year == "1995"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(ivr)
+ tidy(ivr, conf.int = TRUE)
+ tidy(ivr, conf.int = TRUE, instruments = TRUE)
+ 
+ augment(ivr)
+ augment(ivr, data = CigarettesSW)
+ augment(ivr, newdata = CigarettesSW)
+ 
+ glance(ivr)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.kmeans")
> ### * glance.kmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.kmeans
> ### Title: Glance at a(n) kmeans object
> ### Aliases: glance.kmeans
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("cluster", "modeldata")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(cluster)
+ library(modeldata)
+ library(dplyr)
+ 
+ data(hpc_data)
+ 
+ x <- hpc_data[, 2:5]
+ 
+ fit <- pam(x, k = 4)
+ 
+ tidy(fit)
+ glance(fit)
+ augment(fit, x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.lavaan")
> ### * glance.lavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.lavaan
> ### Title: Glance at a(n) lavaan object
> ### Aliases: glance.lavaan
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lavaan")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(lavaan)
+ 
+ # fit model
+ cfa.fit <- cfa(
+   "F =~ x1 + x2 + x3 + x4 + x5",
+   data = HolzingerSwineford1939, group = "school"
+ )
+ 
+ # summarize model fit with tidiers
+ glance(cfa.fit)
+ ## Don't show: 
+ }) # examplesIf
> library(lavaan)
This is lavaan 0.6-18
lavaan is FREE software! Please report any bugs.
> cfa.fit <- cfa("F =~ x1 + x2 + x3 + x4 + x5", data = HolzingerSwineford1939, 
+     group = "school")
> glance(cfa.fit)
# A tibble: 1 × 17
   agfi   AIC   BIC   cfi chisq  npar rmsea rmsea.conf.high  srmr   tli
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>           <dbl> <dbl> <dbl>
1 0.971 4473. 4584. 0.766  99.3    30 0.244           0.288 0.115 0.533
# ℹ 7 more variables: converged <lgl>, estimator <chr>, ngroups <int>,
#   missing_method <chr>, nobs <int>, norig <int>, nexcluded <int>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:lavaan’

> nameEx("glance.lm")
> ### * glance.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.lm
> ### Title: Glance at a(n) lm object
> ### Aliases: glance.lm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(ggplot2)
+ library(dplyr)
+ 
+ mod <- lm(mpg ~ wt + qsec, data = mtcars)
+ 
+ tidy(mod)
+ glance(mod)
+ 
+ # coefficient plot
+ d <- tidy(mod, conf.int = TRUE)
+ 
+ ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) +
+   geom_point() +
+   geom_vline(xintercept = 0, lty = 4) +
+   geom_errorbarh()
+ 
+ # aside: There are tidy() and glance() methods for lm.summary objects too.
+ # this can be useful when you want to conserve memory by converting large lm
+ # objects into their leaner summary.lm equivalents.
+ s <- summary(mod)
+ tidy(s, conf.int = TRUE)
+ glance(s)
+ 
+ augment(mod)
+ augment(mod, mtcars, interval = "confidence")
+ 
+ # predict on new data
+ newdata <- mtcars %>%
+   head(6) %>%
+   mutate(wt = wt + 1)
+ augment(mod, newdata = newdata)
+ 
+ # ggplot2 example where we also construct 95% prediction interval
+ 
+ # simpler bivariate model since we're plotting in 2D
+ mod2 <- lm(mpg ~ wt, data = mtcars)
+ 
+ au <- augment(mod2, newdata = newdata, interval = "prediction")
+ 
+ ggplot(au, aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted)) +
+   geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
+ 
+ # predict on new data without outcome variable. Output does not include .resid
+ newdata <- newdata %>%
+   select(-mpg)
+ 
+ augment(mod, newdata = newdata)
+ 
+ au <- augment(mod, data = mtcars)
+ 
+ ggplot(au, aes(.hat, .std.resid)) +
+   geom_vline(size = 2, colour = "white", xintercept = 0) +
+   geom_hline(size = 2, colour = "white", yintercept = 0) +
+   geom_point() +
+   geom_smooth(se = FALSE)
+ 
+ plot(mod, which = 6)
+ 
+ ggplot(au, aes(.hat, .cooksd)) +
+   geom_vline(xintercept = 0, colour = NA) +
+   geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
+   geom_smooth(se = FALSE) +
+   geom_point()
+ 
+ # column-wise models
+ a <- matrix(rnorm(20), nrow = 10)
+ b <- a + rnorm(length(a))
+ result <- lm(b ~ a)
+ 
+ tidy(result)
+ ## Don't show: 
+ }) # examplesIf
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> mod <- lm(mpg ~ wt + qsec, data = mtcars)
> tidy(mod)
# A tibble: 3 × 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4
2 wt            -5.05      0.484    -10.4  2.52e-11
3 qsec           0.929     0.265      3.51 1.50e- 3
> glance(mod)
# A tibble: 1 × 12
  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2  -74.4  157.  163.
# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>
> d <- tidy(mod, conf.int = TRUE)
> ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) + 
+     geom_point() + geom_vline(xintercept = 0, lty = 4) + geom_errorbarh()
> s <- summary(mod)
> tidy(s, conf.int = TRUE)
# A tibble: 3 × 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4    9.00      30.5 
2 wt            -5.05      0.484    -10.4  2.52e-11   -6.04      -4.06
3 qsec           0.929     0.265      3.51 1.50e- 3    0.387      1.47
> glance(s)
# A tibble: 1 × 8
  r.squared adj.r.squared sigma statistic  p.value    df df.residual  nobs
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>       <int> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2          29    32
> augment(mod)
# A tibble: 32 × 10
   .rownames    mpg    wt  qsec .fitted  .resid   .hat .sigma .cooksd .std.resid
   <chr>      <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl>
 1 Mazda RX4   21    2.62  16.5    21.8 -0.815  0.0693   2.64 2.63e-3    -0.325 
 2 Mazda RX4…  21    2.88  17.0    21.0 -0.0482 0.0444   2.64 5.59e-6    -0.0190
 3 Datsun 710  22.8  2.32  18.6    25.3 -2.53   0.0607   2.60 2.17e-2    -1.00  
 4 Hornet 4 …  21.4  3.22  19.4    21.6 -0.181  0.0576   2.64 1.05e-4    -0.0716
 5 Hornet Sp…  18.7  3.44  17.0    18.2  0.504  0.0389   2.64 5.29e-4     0.198 
 6 Valiant     18.1  3.46  20.2    21.1 -2.97   0.0957   2.58 5.10e-2    -1.20  
 7 Duster 360  14.3  3.57  15.8    16.4 -2.14   0.0729   2.61 1.93e-2    -0.857 
 8 Merc 240D   24.4  3.19  20      22.2  2.17   0.0791   2.61 2.18e-2     0.872 
 9 Merc 230    22.8  3.15  22.9    25.1 -2.32   0.295    2.59 1.59e-1    -1.07  
10 Merc 280    19.2  3.44  18.3    19.4 -0.185  0.0358   2.64 6.55e-5    -0.0728
# ℹ 22 more rows
> augment(mod, mtcars, interval = "confidence")
# A tibble: 32 × 20
   .rownames     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 8 more variables: .fitted <dbl>, .lower <dbl>, .upper <dbl>, .resid <dbl>,
#   .hat <dbl>, .sigma <dbl>, .cooksd <dbl>, .std.resid <dbl>
> newdata <- mtcars %>% head(6) %>% mutate(wt = wt + 1)
> augment(mod, newdata = newdata)
# A tibble: 6 × 14
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 2 more variables: .fitted <dbl>, .resid <dbl>
> mod2 <- lm(mpg ~ wt, data = mtcars)
> au <- augment(mod2, newdata = newdata, interval = "prediction")
> ggplot(au, aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted)) + 
+     geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
> newdata <- newdata %>% select(-mpg)
> augment(mod, newdata = newdata)
# A tibble: 6 × 12
  .rownames    cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
1 Mazda RX4      6   160   110  3.9   3.62  16.5     0     1     4     4    16.8
2 Mazda RX4…     6   160   110  3.9   3.88  17.0     0     1     4     4    16.0
3 Datsun 710     4   108    93  3.85  3.32  18.6     1     1     4     1    20.3
4 Hornet 4 …     6   258   110  3.08  4.22  19.4     1     0     3     1    16.5
5 Hornet Sp…     8   360   175  3.15  4.44  17.0     0     0     3     2    13.1
6 Valiant        6   225   105  2.76  4.46  20.2     1     0     3     1    16.0
> au <- augment(mod, data = mtcars)
> ggplot(au, aes(.hat, .std.resid)) + geom_vline(size = 2, colour = "white", 
+     xintercept = 0) + geom_hline(size = 2, colour = "white", yintercept = 0) + geom_point() + 
+     geom_smooth(se = FALSE)
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> plot(mod, which = 6)
> ggplot(au, aes(.hat, .cooksd)) + geom_vline(xintercept = 0, colour = NA) + 
+     geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") + geom_smooth(se = FALSE) + 
+     geom_point()
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> a <- matrix(rnorm(20), nrow = 10)
> b <- a + rnorm(length(a))
> result <- lm(b ~ a)
> tidy(result)
# A tibble: 6 × 6
  response term        estimate std.error statistic p.value
  <chr>    <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 Y1       (Intercept)   -0.128     0.219    -0.585 0.577  
2 Y1       a1             0.303     0.299     1.02  0.343  
3 Y1       a2             0.348     0.218     1.60  0.154  
4 Y2       (Intercept)    0.131     0.300     0.437 0.676  
5 Y2       a1            -0.215     0.408    -0.527 0.614  
6 Y2       a2             1.07      0.298     3.61  0.00867
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’

> nameEx("glance.lmRob")
> ### * glance.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.lmRob
> ### Title: Glance at a(n) lmRob object
> ### Aliases: glance.lmRob
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("robust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(robust)
+ 
+ # fit model
+ m <- lmRob(mpg ~ wt, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.lmodel2")
> ### * glance.lmodel2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.lmodel2
> ### Title: Glance at a(n) lmodel2 object
> ### Aliases: glance.lmodel2
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("lmodel2", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lmodel2)
+ 
+ data(mod2ex2)
+ Ex2.res <- lmodel2(Prey ~ Predators, data = mod2ex2, "relative", "relative", 99)
+ Ex2.res
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(Ex2.res)
+ glance(Ex2.res)
+ 
+ # this allows coefficient plots with ggplot2
+ library(ggplot2)
+ 
+ ggplot(tidy(Ex2.res), aes(estimate, term, color = method)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.mfx")
> ### * glance.mfx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.mfx
> ### Title: Glance at a(n) mfx object
> ### Aliases: glance.mfx glance.logitmfx glance.negbinmfx glance.poissonmfx
> ###   glance.probitmfx
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mfx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mfx)
+ 
+ # get the marginal effects from a logit regression
+ mod_logmfx <- logitmfx(am ~ cyl + hp + wt, atmean = TRUE, data = mtcars)
+ 
+ tidy(mod_logmfx, conf.int = TRUE)
+ 
+ # compare with the naive model coefficients of the same logit call
+ tidy(
+   glm(am ~ cyl + hp + wt, family = binomial, data = mtcars),
+   conf.int = TRUE
+ )
+ 
+ augment(mod_logmfx)
+ glance(mod_logmfx)
+ 
+ # another example, this time using probit regression
+ mod_probmfx <- probitmfx(am ~ cyl + hp + wt, atmean = TRUE, data = mtcars)
+ 
+ tidy(mod_probmfx, conf.int = TRUE)
+ augment(mod_probmfx)
+ glance(mod_probmfx)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.mjoint")
> ### * glance.mjoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.mjoint
> ### Title: Glance at a(n) mjoint object
> ### Aliases: glance.mjoint
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("joineRML")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # broom only skips running these examples because the example models take a
+ # while to generate—they should run just fine, though!
+ ## Not run: 
+ ##D 
+ ##D 
+ ##D # load libraries for models and data
+ ##D library(joineRML)
+ ##D 
+ ##D # fit a joint model with bivariate longitudinal outcomes
+ ##D data(heart.valve)
+ ##D 
+ ##D hvd <- heart.valve[!is.na(heart.valve$log.grad) &
+ ##D   !is.na(heart.valve$log.lvmi) &
+ ##D   heart.valve$num <= 50, ]
+ ##D 
+ ##D fit <- mjoint(
+ ##D   formLongFixed = list(
+ ##D     "grad" = log.grad ~ time + sex + hs,
+ ##D     "lvmi" = log.lvmi ~ time + sex
+ ##D   ),
+ ##D   formLongRandom = list(
+ ##D     "grad" = ~ 1 | num,
+ ##D     "lvmi" = ~ time | num
+ ##D   ),
+ ##D   formSurv = Surv(fuyrs, status) ~ age,
+ ##D   data = hvd,
+ ##D   inits = list("gamma" = c(0.11, 1.51, 0.80)),
+ ##D   timeVar = "time"
+ ##D )
+ ##D 
+ ##D # extract the survival fixed effects
+ ##D tidy(fit)
+ ##D 
+ ##D # extract the longitudinal fixed effects
+ ##D tidy(fit, component = "longitudinal")
+ ##D 
+ ##D # extract the survival fixed effects with confidence intervals
+ ##D tidy(fit, ci = TRUE)
+ ##D 
+ ##D # extract the survival fixed effects with confidence intervals based
+ ##D # on bootstrapped standard errors
+ ##D bSE <- bootSE(fit, nboot = 5, safe.boot = TRUE)
+ ##D tidy(fit, boot_se = bSE, ci = TRUE)
+ ##D 
+ ##D # augment original data with fitted longitudinal values and residuals
+ ##D hvd2 <- augment(fit)
+ ##D 
+ ##D # extract model statistics
+ ##D glance(fit)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.mlogit")
> ### * glance.mlogit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.mlogit
> ### Title: Glance at a(n) mlogit object
> ### Aliases: glance.mlogit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mlogit")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mlogit)
+ 
+ data("Fishing", package = "mlogit")
+ Fish <- dfidx(Fishing, varying = 2:9, shape = "wide", choice = "mode")
+ 
+ # fit model
+ m <- mlogit(mode ~ price + catch | income, data = Fish)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.muhaz")
> ### * glance.muhaz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.muhaz
> ### Title: Glance at a(n) muhaz object
> ### Aliases: glance.muhaz
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("muhaz", "survival"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(muhaz)
+ library(survival)
+ 
+ # fit model
+ x <- muhaz(ovarian$futime, ovarian$fustat)
+ 
+ # summarize model fit with tidiers
+ tidy(x)
+ glance(x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.multinom")
> ### * glance.multinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.multinom
> ### Title: Glance at a(n) multinom object
> ### Aliases: glance.multinom
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("nnet", "MASS"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(nnet)
+ library(MASS)
+ 
+ example(birthwt)
+ 
+ bwt.mu <- multinom(low ~ ., bwt)
+ 
+ tidy(bwt.mu)
+ glance(bwt.mu)
+ 
+ # or, for output from a multinomial logistic regression
+ fit.gear <- multinom(gear ~ mpg + factor(am), data = mtcars)
+ tidy(fit.gear)
+ glance(fit.gear)
+ ## Don't show: 
+ }) # examplesIf
> library(nnet)
> library(MASS)
> example(birthwt)

brthwt> bwt <- with(birthwt, {
brthwt+ race <- factor(race, labels = c("white", "black", "other"))
brthwt+ ptd <- factor(ptl > 0)
brthwt+ ftv <- factor(ftv)
brthwt+ levels(ftv)[-(1:2)] <- "2+"
brthwt+ data.frame(low = factor(low), age, lwt, race, smoke = (smoke > 0),
brthwt+            ptd, ht = (ht > 0), ui = (ui > 0), ftv)
brthwt+ })

brthwt> options(contrasts = c("contr.treatment", "contr.poly"))

brthwt> glm(low ~ ., binomial, bwt)

Call:  glm(formula = low ~ ., family = binomial, data = bwt)

Coefficients:
(Intercept)          age          lwt    raceblack    raceother    smokeTRUE  
    0.82302     -0.03723     -0.01565      1.19241      0.74068      0.75553  
    ptdTRUE       htTRUE       uiTRUE         ftv1        ftv2+  
    1.34376      1.91317      0.68020     -0.43638      0.17901  

Degrees of Freedom: 188 Total (i.e. Null);  178 Residual
Null Deviance:	    234.7 
Residual Deviance: 195.5 	AIC: 217.5
> bwt.mu <- multinom(low ~ ., bwt)
# weights:  12 (11 variable)
initial  value 131.004817 
iter  10 value 98.029803
final  value 97.737759 
converged
> tidy(bwt.mu)
# A tibble: 11 × 6
   y.level term        estimate std.error statistic p.value
   <chr>   <chr>          <dbl>     <dbl>     <dbl>   <dbl>
 1 1       (Intercept)   0.823    1.24        0.661 0.508  
 2 1       age          -0.0372   0.0387     -0.962 0.336  
 3 1       lwt          -0.0157   0.00708    -2.21  0.0271 
 4 1       raceblack     1.19     0.536       2.22  0.0261 
 5 1       raceother     0.741    0.462       1.60  0.109  
 6 1       smokeTRUE     0.756    0.425       1.78  0.0755 
 7 1       ptdTRUE       1.34     0.481       2.80  0.00518
 8 1       htTRUE        1.91     0.721       2.65  0.00794
 9 1       uiTRUE        0.680    0.464       1.46  0.143  
10 1       ftv1         -0.436    0.479      -0.910 0.363  
11 1       ftv2+         0.179    0.456       0.392 0.695  
> glance(bwt.mu)
# A tibble: 1 × 4
    edf deviance   AIC  nobs
  <dbl>    <dbl> <dbl> <int>
1    11     195.  217.   189
> fit.gear <- multinom(gear ~ mpg + factor(am), data = mtcars)
# weights:  12 (6 variable)
initial  value 35.155593 
iter  10 value 14.156582
iter  20 value 14.031881
iter  30 value 14.025659
iter  40 value 14.021414
iter  50 value 14.019824
iter  60 value 14.019278
iter  70 value 14.018601
iter  80 value 14.018282
iter  80 value 14.018282
iter  90 value 14.017126
final  value 14.015374 
converged
> tidy(fit.gear)
# A tibble: 6 × 6
  y.level term        estimate std.error statistic  p.value
  <chr>   <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 4       (Intercept)  -11.2       5.32     -2.10  3.60e- 2
2 4       mpg            0.525     0.268     1.96  5.02e- 2
3 4       factor(am)1   11.9      66.9       0.178 8.59e- 1
4 5       (Intercept)  -18.4      67.9      -0.271 7.87e- 1
5 5       mpg            0.366     0.292     1.25  2.10e- 1
6 5       factor(am)1   22.4       2.17     10.3   4.54e-25
> glance(fit.gear)
# A tibble: 1 × 4
    edf deviance   AIC  nobs
  <dbl>    <dbl> <dbl> <int>
1     6     28.0  40.0    32
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’, ‘package:nnet’

> nameEx("glance.negbin")
> ### * glance.negbin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.negbin
> ### Title: Glance at a(n) negbin object
> ### Aliases: glance.negbin glm.nb_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ r <- glm.nb(Days ~ Sex / (Age + Eth * Lrn), data = quine)
+ 
+ # summarize model fit with tidiers
+ tidy(r)
+ glance(r)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> r <- glm.nb(Days ~ Sex/(Age + Eth * Lrn), data = quine)
> tidy(r)
# A tibble: 14 × 5
   term            estimate std.error statistic  p.value
   <chr>              <dbl>     <dbl>     <dbl>    <dbl>
 1 (Intercept)       3.02       0.297    10.2   2.89e-24
 2 SexM             -0.475      0.396    -1.20  2.29e- 1
 3 SexF:AgeF1       -0.709      0.323    -2.19  2.83e- 2
 4 SexM:AgeF1       -0.724      0.330    -2.19  2.85e- 2
 5 SexF:AgeF2       -0.615      0.371    -1.66  9.78e- 2
 6 SexM:AgeF2        0.628      0.274     2.30  2.17e- 2
 7 SexF:AgeF3       -0.342      0.327    -1.05  2.95e- 1
 8 SexM:AgeF3        1.15       0.314     3.67  2.46e- 4
 9 SexF:EthN        -0.0731     0.265    -0.276 7.83e- 1
10 SexM:EthN        -0.679      0.256    -2.65  8.07e- 3
11 SexF:LrnSL        0.944      0.322     2.93  3.43e- 3
12 SexM:LrnSL        0.239      0.336     0.712 4.76e- 1
13 SexF:EthN:LrnSL  -1.36       0.377    -3.60  3.16e- 4
14 SexM:EthN:LrnSL   0.761      0.441     1.73  8.45e- 2
> glance(r)
# A tibble: 1 × 8
  null.deviance df.null logLik      AIC   BIC deviance df.residual  nobs
          <dbl>   <int> <logLik>  <dbl> <dbl>    <dbl>       <int> <int>
1          235.     145 -531.5125 1093. 1138.     168.         132   146
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("glance.nlrq")
> ### * glance.nlrq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.nlrq
> ### Title: Glance at a(n) nlrq object
> ### Aliases: glance.nlrq
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(quantreg)
+ 
+ # build artificial data with multiplicative error
+ set.seed(1)
+ dat <- NULL
+ dat$x <- rep(1:25, 20)
+ dat$y <- SSlogis(dat$x, 10, 12, 2) * rnorm(500, 1, 0.1)
+ 
+ # fit the median using nlrq
+ mod <- nlrq(y ~ SSlogis(x, Asym, mid, scal),
+   data = dat, tau = 0.5, trace = TRUE
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ augment(mod)
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> set.seed(1)
> dat <- NULL
> dat$x <- rep(1:25, 20)
> dat$y <- SSlogis(dat$x, 10, 12, 2) * rnorm(500, 1, 0.1)
> mod <- nlrq(y ~ SSlogis(x, Asym, mid, scal), data = dat, tau = 0.5, trace = TRUE)
109.059 :   9.968027 11.947208  1.962113 
final  value 108.942725 
converged
lambda = 1 
108.9427 :   9.958648 11.943273  1.967144 
final  value 108.490939 
stopped after 2 iterations
lambda = 0.9750984 
108.4909 :   9.949430 11.987472  1.998607 
final  value 108.471416 
converged
lambda = 0.9999299 
108.4714 :   9.94163 11.99077  1.99344 
final  value 108.471243 
converged
lambda = 1 
108.4712 :   9.941008 11.990550  1.992921 
final  value 108.470935 
converged
lambda = 0.8621249 
108.4709 :   9.942734 11.992773  1.993209 
final  value 108.470923 
converged
lambda = 0.9999613 
108.4709 :   9.942629 11.992728  1.993136 
final  value 108.470919 
converged
lambda = 1 
108.4709 :   9.942644 11.992737  1.993144 
final  value 108.470919 
converged
lambda = 1 
108.4709 :   9.942644 11.992737  1.993144 
final  value 108.470919 
converged
lambda = 1 
108.4709 :   9.942644 11.992737  1.993144 
> tidy(mod)
# A tibble: 3 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 Asym      9.94    0.0841     118.        0
2 mid      12.0     0.0673     178.        0
3 scal      1.99    0.0248      80.3       0
> glance(mod)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -429.0842  864.  877.         497
> augment(mod)
# A tibble: 500 × 4
       x      y .fitted   .resid
   <int>  <dbl>   <dbl>    <dbl>
 1     1 0.0382  0.0399 -0.00171
 2     2 0.0682  0.0657  0.00250
 3     3 0.101   0.108  -0.00728
 4     4 0.209   0.177   0.0315 
 5     5 0.303   0.289   0.0137 
 6     6 0.435   0.469  -0.0332 
 7     7 0.796   0.751   0.0448 
 8     8 1.28    1.18    0.0982 
 9     9 1.93    1.81    0.118  
10    10 2.61    2.67   -0.0671 
# ℹ 490 more rows
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("glance.nls")
> ### * glance.nls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.nls
> ### Title: Glance at a(n) nls object
> ### Aliases: glance.nls
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit model
+ n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(n)
+ augment(n)
+ glance(n)
+ 
+ library(ggplot2)
+ 
+ ggplot(augment(n), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
+ 
+ newdata <- head(mtcars)
+ newdata$wt <- newdata$wt + 1
+ 
+ augment(n, newdata = newdata)
+ ## Don't show: 
+ }) # examplesIf
> n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
> tidy(n)
# A tibble: 2 × 5
  term  estimate std.error statistic  p.value
  <chr>    <dbl>     <dbl>     <dbl>    <dbl>
1 k       49.7      3.79        13.1 5.96e-14
2 e        0.746    0.0199      37.5 8.86e-27
> augment(n)
# A tibble: 32 × 4
     mpg    wt .fitted .resid
   <dbl> <dbl>   <dbl>  <dbl>
 1  21    2.62    23.0 -2.01 
 2  21    2.88    21.4 -0.352
 3  22.8  2.32    25.1 -2.33 
 4  21.4  3.22    19.3  2.08 
 5  18.7  3.44    18.1  0.611
 6  18.1  3.46    18.0  0.117
 7  14.3  3.57    17.4 -3.11 
 8  24.4  3.19    19.5  4.93 
 9  22.8  3.15    19.7  3.10 
10  19.2  3.44    18.1  1.11 
# ℹ 22 more rows
> glance(n)
# A tibble: 1 × 9
  sigma isConv     finTol logLik   AIC   BIC deviance df.residual  nobs
  <dbl> <lgl>       <dbl>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1  2.67 TRUE   0.00000204  -75.8  158.  162.     214.          30    32
> library(ggplot2)
> ggplot(augment(n), aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted))
> newdata <- head(mtcars)
> newdata$wt <- newdata$wt + 1
> augment(n, newdata = newdata)
# A tibble: 6 × 13
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 1 more variable: .fitted <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("glance.orcutt")
> ### * glance.orcutt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.orcutt
> ### Title: Glance at a(n) orcutt object
> ### Aliases: glance.orcutt
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("orcutt")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(orcutt)
+ 
+ # fit model and summarize results
+ reg <- lm(mpg ~ wt + qsec + disp, mtcars)
+ tidy(reg)
+ 
+ 
+ co <- cochrane.orcutt(reg)
+ tidy(co)
+ glance(co)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.pam")
> ### * glance.pam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.pam
> ### Title: Glance at a(n) pam object
> ### Aliases: glance.pam
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("cluster", "modeldata", "ggplot2")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(dplyr)
+ library(ggplot2)
+ library(cluster)
+ library(modeldata)
+ data(hpc_data)
+ 
+ x <- hpc_data[, 2:5]
+ p <- pam(x, k = 4)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(p)
+ glance(p)
+ augment(p, x)
+ 
+ augment(p, x) %>%
+   ggplot(aes(compounds, input_fields)) +
+   geom_point(aes(color = .cluster)) +
+   geom_text(aes(label = cluster), data = tidy(p), size = 10)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.plm")
> ### * glance.plm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.plm
> ### Title: Glance at a(n) plm object
> ### Aliases: glance.plm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("plm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(plm)
+ 
+ # load data
+ data("Produc", package = "plm")
+ 
+ # fit model
+ zz <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,
+   data = Produc, index = c("state", "year")
+ )
+ 
+ # summarize model fit with tidiers
+ summary(zz)
+ 
+ tidy(zz)
+ tidy(zz, conf.int = TRUE)
+ tidy(zz, conf.int = TRUE, conf.level = 0.9)
+ 
+ augment(zz)
+ glance(zz)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.poLCA")
> ### * glance.poLCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.poLCA
> ### Title: Glance at a(n) poLCA object
> ### Aliases: glance.poLCA
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("poLCA", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(poLCA)
+ library(dplyr)
+ 
+ # generate data
+ data(values)
+ 
+ f <- cbind(A, B, C, D) ~ 1
+ 
+ # fit model
+ M1 <- poLCA(f, values, nclass = 2, verbose = FALSE)
+ 
+ M1
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(M1)
+ augment(M1)
+ glance(M1)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(M1), aes(factor(class), estimate, fill = factor(outcome))) +
+   geom_bar(stat = "identity", width = 1) +
+   facet_wrap(~variable)
+ 
+ # three-class model with a single covariate.
+ data(election)
+ 
+ f2a <- cbind(
+   MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG,
+   MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB
+ ) ~ PARTY
+ 
+ nes2a <- poLCA(f2a, election, nclass = 3, nrep = 5, verbose = FALSE)
+ 
+ td <- tidy(nes2a)
+ td
+ 
+ ggplot(td, aes(outcome, estimate, color = factor(class), group = class)) +
+   geom_line() +
+   facet_wrap(~variable, nrow = 2) +
+   theme(axis.text.x = element_text(angle = 90, hjust = 1))
+ 
+ au <- augment(nes2a)
+ 
+ au
+ 
+ count(au, .class)
+ 
+ # if the original data is provided, it leads to NAs in new columns
+ # for rows that weren't predicted
+ au2 <- augment(nes2a, data = election)
+ 
+ au2
+ 
+ dim(au2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.polr")
> ### * glance.polr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.polr
> ### Title: Glance at a(n) polr object
> ### Aliases: glance.polr
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ fit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
+ 
+ # summarize model fit with tidiers
+ tidy(fit, exponentiate = TRUE, conf.int = TRUE)
+ 
+ glance(fit)
+ augment(fit, type.predict = "class")
+ 
+ fit2 <- polr(factor(gear) ~ am + mpg + qsec, data = mtcars)
+ 
+ tidy(fit, p.values = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> fit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
> tidy(fit, exponentiate = TRUE, conf.int = TRUE)

Re-fitting to get Hessian

# A tibble: 8 × 7
  term          estimate std.error statistic conf.low conf.high coef.type  
  <chr>            <dbl>     <dbl>     <dbl>    <dbl>     <dbl> <chr>      
1 InflMedium       1.76     0.105       5.41    1.44      2.16  coefficient
2 InflHigh         3.63     0.127      10.1     2.83      4.66  coefficient
3 TypeApartment    0.564    0.119      -4.80    0.446     0.712 coefficient
4 TypeAtrium       0.693    0.155      -2.36    0.511     0.940 coefficient
5 TypeTerrace      0.336    0.151      -7.20    0.249     0.451 coefficient
6 ContHigh         1.43     0.0955      3.77    1.19      1.73  coefficient
7 Low|Medium       0.609    0.125      -3.97   NA        NA     scale      
8 Medium|High      2.00     0.125       5.50   NA        NA     scale      
> glance(fit)
# A tibble: 1 × 7
    edf logLik   AIC   BIC deviance df.residual  nobs
  <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1     8 -1740. 3495. 3539.    3479.        1673  1681
> augment(fit, type.predict = "class")
# A tibble: 72 × 6
   Sat    Infl   Type      Cont  `(weights)` .fitted
   <ord>  <fct>  <fct>     <fct>       <int> <fct>  
 1 Low    Low    Tower     Low            21 Low    
 2 Medium Low    Tower     Low            21 Low    
 3 High   Low    Tower     Low            28 Low    
 4 Low    Medium Tower     Low            34 High   
 5 Medium Medium Tower     Low            22 High   
 6 High   Medium Tower     Low            36 High   
 7 Low    High   Tower     Low            10 High   
 8 Medium High   Tower     Low            11 High   
 9 High   High   Tower     Low            36 High   
10 Low    Low    Apartment Low            61 Low    
# ℹ 62 more rows
> fit2 <- polr(factor(gear) ~ am + mpg + qsec, data = mtcars)
> tidy(fit, p.values = TRUE)

Re-fitting to get Hessian

p-values can presently only be returned for models that contain
              no categorical variables with more than two levels
# A tibble: 8 × 6
  term          estimate std.error statistic p.value coef.type  
  <chr>            <dbl>     <dbl>     <dbl> <lgl>   <chr>      
1 InflMedium       0.566    0.105       5.41 NA      coefficient
2 InflHigh         1.29     0.127      10.1  NA      coefficient
3 TypeApartment   -0.572    0.119      -4.80 NA      coefficient
4 TypeAtrium      -0.366    0.155      -2.36 NA      coefficient
5 TypeTerrace     -1.09     0.151      -7.20 NA      coefficient
6 ContHigh         0.360    0.0955      3.77 NA      coefficient
7 Low|Medium      -0.496    0.125      -3.97 NA      scale      
8 Medium|High      0.691    0.125       5.50 NA      scale      
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("glance.pyears")
> ### * glance.pyears
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.pyears
> ### Title: Glance at a(n) pyears object
> ### Aliases: glance.pyears
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # generate and format data
+ temp.yr <- tcut(mgus$dxyr, 55:92, labels = as.character(55:91))
+ temp.age <- tcut(mgus$age, 34:101, labels = as.character(34:100))
+ ptime <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
+ pstat <- ifelse(is.na(mgus$pctime), 0, 1)
+ pfit <- pyears(Surv(ptime / 365.25, pstat) ~ temp.yr + temp.age + sex, mgus,
+   data.frame = TRUE
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(pfit)
+ glance(pfit)
+ 
+ # if data.frame argument is not given, different information is present in
+ # output
+ pfit2 <- pyears(Surv(ptime / 365.25, pstat) ~ temp.yr + temp.age + sex, mgus)
+ 
+ tidy(pfit2)
+ glance(pfit2)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> temp.yr <- tcut(mgus$dxyr, 55:92, labels = as.character(55:91))
> temp.age <- tcut(mgus$age, 34:101, labels = as.character(34:100))
> ptime <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
> pstat <- ifelse(is.na(mgus$pctime), 0, 1)
> pfit <- pyears(Surv(ptime/365.25, pstat) ~ temp.yr + temp.age + sex, mgus, 
+     data.frame = TRUE)
> tidy(pfit)
# A tibble: 1,752 × 6
   temp.yr temp.age sex     pyears     n event
   <fct>   <fct>    <fct>    <dbl> <dbl> <dbl>
 1 71      34       female 0.00274     1     0
 2 68      35       female 0.00274     1     0
 3 72      35       female 0.00274     1     0
 4 69      36       female 0.00274     1     0
 5 73      36       female 0.00274     1     0
 6 69      37       female 0.00274     1     0
 7 70      37       female 0.00274     1     0
 8 74      37       female 0.00274     1     0
 9 70      38       female 0.00274     1     0
10 71      38       female 0.00274     1     0
# ℹ 1,742 more rows
> glance(pfit)
# A tibble: 1 × 3
  total offtable  nobs
  <dbl>    <dbl> <int>
1  8.32    0.727   241
> pfit2 <- pyears(Surv(ptime/365.25, pstat) ~ temp.yr + temp.age + sex, 
+     mgus)
> tidy(pfit2)
# A tibble: 37 × 402
   pyears.34.female pyears.35.female pyears.36.female pyears.37.female
              <dbl>            <dbl>            <dbl>            <dbl>
 1                0                0                0                0
 2                0                0                0                0
 3                0                0                0                0
 4                0                0                0                0
 5                0                0                0                0
 6                0                0                0                0
 7                0                0                0                0
 8                0                0                0                0
 9                0                0                0                0
10                0                0                0                0
# ℹ 27 more rows
# ℹ 398 more variables: pyears.38.female <dbl>, pyears.39.female <dbl>,
#   pyears.40.female <dbl>, pyears.41.female <dbl>, pyears.42.female <dbl>,
#   pyears.43.female <dbl>, pyears.44.female <dbl>, pyears.45.female <dbl>,
#   pyears.46.female <dbl>, pyears.47.female <dbl>, pyears.48.female <dbl>,
#   pyears.49.female <dbl>, pyears.50.female <dbl>, pyears.51.female <dbl>,
#   pyears.52.female <dbl>, pyears.53.female <dbl>, pyears.54.female <dbl>, …
> glance(pfit2)
# A tibble: 1 × 3
  total offtable  nobs
  <dbl>    <dbl> <int>
1  8.32    0.727   241
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("glance.ridgelm")
> ### * glance.ridgelm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.ridgelm
> ### Title: Glance at a(n) ridgelm object
> ### Aliases: glance.ridgelm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("MASS", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ names(longley)[1] <- "y"
+ 
+ # fit model and summarizd results
+ fit1 <- lm.ridge(y ~ ., longley)
+ tidy(fit1)
+ 
+ fit2 <- lm.ridge(y ~ ., longley, lambda = seq(0.001, .05, .001))
+ td2 <- tidy(fit2)
+ g2 <- glance(fit2)
+ 
+ # coefficient plot
+ library(ggplot2)
+ ggplot(td2, aes(lambda, estimate, color = term)) +
+   geom_line()
+ 
+ # GCV plot
+ ggplot(td2, aes(lambda, GCV)) +
+   geom_line()
+ 
+ # add line for the GCV minimizing estimate
+ ggplot(td2, aes(lambda, GCV)) +
+   geom_line() +
+   geom_vline(xintercept = g2$lambdaGCV, col = "red", lty = 2)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> names(longley)[1] <- "y"
> fit1 <- lm.ridge(y ~ ., longley)
> tidy(fit1)
# A tibble: 6 × 5
  lambda   GCV term         estimate scale
   <dbl> <dbl> <chr>           <dbl> <dbl>
1      0 0.128 GNP            25.4   96.2 
2      0 0.128 Unemployed      3.30  90.5 
3      0 0.128 Armed.Forces    0.752 67.4 
4      0 0.128 Population    -11.7    6.74
5      0 0.128 Year           -6.54   4.61
6      0 0.128 Employed        0.786  3.40
> fit2 <- lm.ridge(y ~ ., longley, lambda = seq(0.001, 0.05, 0.001))
> td2 <- tidy(fit2)
> g2 <- glance(fit2)
> library(ggplot2)
> ggplot(td2, aes(lambda, estimate, color = term)) + geom_line()
> ggplot(td2, aes(lambda, GCV)) + geom_line()
> ggplot(td2, aes(lambda, GCV)) + geom_line() + geom_vline(xintercept = g2$lambdaGCV, 
+     col = "red", lty = 2)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:MASS’

> nameEx("glance.rlm")
> ### * glance.rlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.rlm
> ### Title: Glance at a(n) rlm object
> ### Aliases: glance.rlm rlm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ r <- rlm(stack.loss ~ ., stackloss)
+ 
+ # summarize model fit with tidiers
+ tidy(r)
+ augment(r)
+ glance(r)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> r <- rlm(stack.loss ~ ., stackloss)
> tidy(r)
# A tibble: 4 × 4
  term        estimate std.error statistic
  <chr>          <dbl>     <dbl>     <dbl>
1 (Intercept)  -41.0       9.81     -4.18 
2 Air.Flow       0.829     0.111     7.46 
3 Water.Temp     0.926     0.303     3.05 
4 Acid.Conc.    -0.128     0.129    -0.992
> augment(r)
# A tibble: 21 × 10
   stack.loss Air.Flow Water.Temp Acid.Conc. .fitted .resid   .hat .sigma
        <dbl>    <dbl>      <dbl>      <dbl>   <dbl>  <dbl>  <dbl>  <dbl>
 1         42       80         27         89    38.9  3.05  0.327    3.32
 2         37       80         27         88    39.1 -2.08  0.343    3.39
 3         37       75         25         90    32.8  4.18  0.155    3.26
 4         28       62         24         87    21.5  6.50  0.0713   3.01
 5         18       62         22         87    19.6 -1.65  0.0562   3.42
 6         18       62         23         87    20.6 -2.57  0.0835   3.38
 7         19       62         24         93    20.7 -1.73  0.230    3.42
 8         20       62         24         93    20.7 -0.731 0.230    3.44
 9         15       58         23         87    17.3 -2.25  0.155    3.40
10         14       58         18         80    13.5  0.481 0.213    3.45
# ℹ 11 more rows
# ℹ 2 more variables: .cooksd <dbl>, .std.resid <dbl>
> glance(r)
# A tibble: 1 × 7
  sigma converged logLik     AIC   BIC deviance  nobs
  <dbl> <lgl>     <logLik> <dbl> <dbl>    <dbl> <int>
1  2.44 TRUE      -52.954   116.  121.     191.    21
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("glance.rma")
> ### * glance.rma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.rma
> ### Title: Glance at a(n) rma object
> ### Aliases: glance.rma
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("metafor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(metafor)
+ 
+ df <-
+   escalc(
+     measure = "RR",
+     ai = tpos,
+     bi = tneg,
+     ci = cpos,
+     di = cneg,
+     data = dat.bcg
+   )
+ 
+ meta_analysis <- rma(yi, vi, data = df, method = "EB")
+ 
+ glance(meta_analysis)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.robustbase.lmrob")
> ### * glance.robustbase.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.lmrob
> ### Title: Glance at a(n) lmrob object
> ### Aliases: glance.lmrob
> 
> ### ** Examples
> 
> 
> if (requireNamespace("robustbase", quietly = TRUE)) {
+   # load libraries for models and data
+   library(robustbase)
+ 
+   data(coleman)
+   set.seed(0)
+ 
+   m <- lmrob(Y ~ ., data = coleman)
+   tidy(m)
+   augment(m)
+   glance(m)
+ 
+   data(carrots)
+ 
+   Rfit <- glmrob(cbind(success, total - success) ~ logdose + block,
+     family = binomial, data = carrots, method = "Mqle",
+     control = glmrobMqle.control(tcc = 1.2)
+   )
+ 
+   tidy(Rfit)
+   augment(Rfit)
+ }
> 
> 
> 
> cleanEx()
> nameEx("glance.rq")
> ### * glance.rq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.rq
> ### Title: Glance at a(n) rq object
> ### Aliases: glance.rq
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library and data
+ library(quantreg)
+ 
+ data(stackloss)
+ 
+ # median (l1) regression fit for the stackloss data.
+ mod1 <- rq(stack.loss ~ stack.x, .5)
+ 
+ # weighted sample median
+ mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
+ 
+ # summarize model fit with tidiers
+ tidy(mod1)
+ glance(mod1)
+ augment(mod1)
+ 
+ tidy(mod2)
+ glance(mod2)
+ augment(mod2)
+ 
+ # varying tau to generate an rqs object
+ mod3 <- rq(stack.loss ~ stack.x, tau = c(.25, .5))
+ 
+ tidy(mod3)
+ augment(mod3)
+ 
+ # glance cannot handle rqs objects like `mod3`--use a purrr
+ # `map`-based workflow instead
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> data(stackloss)
> mod1 <- rq(stack.loss ~ stack.x, 0.5)
> mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
> tidy(mod1)
# A tibble: 4 × 5
  term              estimate conf.low conf.high   tau
  <chr>                <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -39.7     -53.8    -24.5      0.5
2 stack.xAir.Flow     0.832     0.509    1.17     0.5
3 stack.xWater.Temp   0.574     0.272    3.04     0.5
4 stack.xAcid.Conc.  -0.0609   -0.278    0.0153   0.5
> glance(mod1)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -50.15272  108.  112.          17
> augment(mod1)
# A tibble: 21 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"]    .resid .fitted  .tau
        <dbl>                <dbl>           <dbl>     <dbl>   <dbl> <dbl>
 1         42                   80              27  5.06e+ 0    36.9   0.5
 2         37                   80              27 -1.42e-14    37     0.5
 3         37                   75              25  5.43e+ 0    31.6   0.5
 4         28                   62              24  7.63e+ 0    20.4   0.5
 5         18                   62              22 -1.22e+ 0    19.2   0.5
 6         18                   62              23 -1.79e+ 0    19.8   0.5
 7         19                   62              24 -1.00e+ 0    20     0.5
 8         20                   62              24 -7.11e-15    20     0.5
 9         15                   58              23 -1.46e+ 0    16.5   0.5
10         14                   58              18 -2.03e- 2    14.0   0.5
# ℹ 11 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> tidy(mod2)
# A tibble: 1 × 5
  term        estimate conf.low conf.high   tau
  <chr>          <dbl> <lgl>    <lgl>     <dbl>
1 (Intercept)    0.390 NA       NA          0.5
> glance(mod2)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -64.46761  131.  133.          49
> augment(mod2)
# A tibble: 50 × 5
   `rnorm(50)` `(weights)`  .resid .fitted  .tau
         <dbl>       <dbl>   <dbl>   <dbl> <dbl>
 1      -0.626       0.655 -1.02     0.390   0.5
 2       0.184       0.353 -0.206    0.390   0.5
 3      -0.836       0.270 -1.23     0.390   0.5
 4       1.60        0.993  1.21     0.390   0.5
 5       0.330       0.633 -0.0603   0.390   0.5
 6      -0.820       0.213 -1.21     0.390   0.5
 7       0.487       0.129  0.0976   0.390   0.5
 8       0.738       0.478  0.348    0.390   0.5
 9       0.576       0.924  0.186    0.390   0.5
10      -0.305       0.599 -0.695    0.390   0.5
# ℹ 40 more rows
> mod3 <- rq(stack.loss ~ stack.x, tau = c(0.25, 0.5))
> tidy(mod3)
# A tibble: 8 × 5
  term               estimate conf.low conf.high   tau
  <chr>                 <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -3.6 e+ 1  -59.0     -7.84    0.25
2 stack.xAir.Flow    5.00e- 1    0.229    0.970   0.25
3 stack.xWater.Temp  1.00e+ 0    0.286    2.26    0.25
4 stack.xAcid.Conc. -4.58e-16   -0.643    0.0861  0.25
5 (Intercept)       -3.97e+ 1  -53.8    -24.5     0.5 
6 stack.xAir.Flow    8.32e- 1    0.509    1.17    0.5 
7 stack.xWater.Temp  5.74e- 1    0.272    3.04    0.5 
8 stack.xAcid.Conc. -6.09e- 2   -0.278    0.0153  0.5 
> augment(mod3)
# A tibble: 42 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"] .tau     .resid .fitted
        <dbl>                <dbl>           <dbl> <chr>     <dbl>   <dbl>
 1         42                   80              27 0.25   1.10e+ 1    31.0
 2         42                   80              27 0.5    5.06e+ 0    36.9
 3         37                   80              27 0.25   6.00e+ 0    31.0
 4         37                   80              27 0.5   -1.42e-14    37  
 5         37                   75              25 0.25   1.05e+ 1    26.5
 6         37                   75              25 0.5    5.43e+ 0    31.6
 7         28                   62              24 0.25   9.00e+ 0    19  
 8         28                   62              24 0.5    7.63e+ 0    20.4
 9         18                   62              22 0.25   1.00e+ 0    17.0
10         18                   62              22 0.5   -1.22e+ 0    19.2
# ℹ 32 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("glance.sarlm")
> ### * glance.sarlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.sarlm
> ### Title: Glance at a(n) spatialreg object
> ### Aliases: glance.sarlm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("spdep", "spatialreg")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ 
+ # load libraries for models and data
+ library(spatialreg)
+ library(spdep)
+ 
+ # load data
+ data(oldcol, package = "spdep")
+ 
+ listw <- nb2listw(COL.nb, style = "W")
+ 
+ # fit model
+ crime_sar <-
+   lagsarlm(CRIME ~ INC + HOVAL,
+     data = COL.OLD,
+     listw = listw,
+     method = "eigen"
+   )
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sar)
+ tidy(crime_sar, conf.int = TRUE)
+ glance(crime_sar)
+ augment(crime_sar)
+ 
+ # fit another model
+ crime_sem <- errorsarlm(CRIME ~ INC + HOVAL, data = COL.OLD, listw)
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sem)
+ tidy(crime_sem, conf.int = TRUE)
+ glance(crime_sem)
+ augment(crime_sem)
+ 
+ # fit another model
+ crime_sac <- sacsarlm(CRIME ~ INC + HOVAL, data = COL.OLD, listw)
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sac)
+ tidy(crime_sac, conf.int = TRUE)
+ glance(crime_sac)
+ augment(crime_sac)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.smooth.spline")
> ### * glance.smooth.spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.smooth.spline
> ### Title: Tidy a(n) smooth.spine object
> ### Aliases: glance.smooth.spline
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit model
+ spl <- smooth.spline(mtcars$wt, mtcars$mpg, df = 4)
+ 
+ # summarize model fit with tidiers
+ augment(spl, mtcars)
+ 
+ # calls original columns x and y
+ augment(spl)
+ 
+ library(ggplot2)
+ ggplot(augment(spl, mtcars), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
+ ## Don't show: 
+ }) # examplesIf
> spl <- smooth.spline(mtcars$wt, mtcars$mpg, df = 4)
> augment(spl, mtcars)
# A tibble: 32 × 13
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4    22.9
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4    21.1
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1    25.3
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1    19.1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2    17.8
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1    17.7
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4    17.1
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2    19.2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2    19.5
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4    17.8
# ℹ 22 more rows
# ℹ 1 more variable: .resid <dbl>
> augment(spl)
# A tibble: 32 × 5
       x     y     w .fitted .resid
   <dbl> <dbl> <dbl>   <dbl>  <dbl>
 1  2.62  21       1    22.9 -1.87 
 2  2.88  21       1    21.1 -0.117
 3  2.32  22.8     1    25.3 -2.48 
 4  3.22  21.4     1    19.1  2.33 
 5  3.44  18.7     1    17.8  0.928
 6  3.46  18.1     1    17.7  0.437
 7  3.57  14.3     1    17.1 -2.79 
 8  3.19  24.4     1    19.2  5.19 
 9  3.15  22.8     1    19.5  3.35 
10  3.44  19.2     1    17.8  1.43 
# ℹ 22 more rows
> library(ggplot2)
> ggplot(augment(spl, mtcars), aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted))
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("glance.speedglm")
> ### * glance.speedglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.speedglm
> ### Title: Glance at a(n) speedglm object
> ### Aliases: glance.speedglm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("speedglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(speedglm)
+ 
+ # generate data
+ clotting <- data.frame(
+   u = c(5, 10, 15, 20, 30, 40, 60, 80, 100),
+   lot1 = c(118, 58, 42, 35, 27, 25, 21, 19, 18)
+ )
+ 
+ # fit model
+ fit <- speedglm(lot1 ~ log(u), data = clotting, family = Gamma(log))
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ glance(fit)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.speedlm")
> ### * glance.speedlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.speedlm
> ### Title: Glance at a(n) speedlm object
> ### Aliases: glance.speedlm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("speedglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(speedglm)
+ 
+ # fit model
+ mod <- speedlm(mpg ~ wt + qsec, data = mtcars, fitted = TRUE)
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ augment(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.summary.lm")
> ### * glance.summary.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.summary.lm
> ### Title: Glance at a(n) summary.lm object
> ### Aliases: glance.summary.lm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(ggplot2)
+ library(dplyr)
+ 
+ mod <- lm(mpg ~ wt + qsec, data = mtcars)
+ 
+ tidy(mod)
+ glance(mod)
+ 
+ # coefficient plot
+ d <- tidy(mod, conf.int = TRUE)
+ 
+ ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) +
+   geom_point() +
+   geom_vline(xintercept = 0, lty = 4) +
+   geom_errorbarh()
+ 
+ # aside: There are tidy() and glance() methods for lm.summary objects too.
+ # this can be useful when you want to conserve memory by converting large lm
+ # objects into their leaner summary.lm equivalents.
+ s <- summary(mod)
+ tidy(s, conf.int = TRUE)
+ glance(s)
+ 
+ augment(mod)
+ augment(mod, mtcars, interval = "confidence")
+ 
+ # predict on new data
+ newdata <- mtcars %>%
+   head(6) %>%
+   mutate(wt = wt + 1)
+ augment(mod, newdata = newdata)
+ 
+ # ggplot2 example where we also construct 95% prediction interval
+ 
+ # simpler bivariate model since we're plotting in 2D
+ mod2 <- lm(mpg ~ wt, data = mtcars)
+ 
+ au <- augment(mod2, newdata = newdata, interval = "prediction")
+ 
+ ggplot(au, aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted)) +
+   geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
+ 
+ # predict on new data without outcome variable. Output does not include .resid
+ newdata <- newdata %>%
+   select(-mpg)
+ 
+ augment(mod, newdata = newdata)
+ 
+ au <- augment(mod, data = mtcars)
+ 
+ ggplot(au, aes(.hat, .std.resid)) +
+   geom_vline(size = 2, colour = "white", xintercept = 0) +
+   geom_hline(size = 2, colour = "white", yintercept = 0) +
+   geom_point() +
+   geom_smooth(se = FALSE)
+ 
+ plot(mod, which = 6)
+ 
+ ggplot(au, aes(.hat, .cooksd)) +
+   geom_vline(xintercept = 0, colour = NA) +
+   geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
+   geom_smooth(se = FALSE) +
+   geom_point()
+ 
+ # column-wise models
+ a <- matrix(rnorm(20), nrow = 10)
+ b <- a + rnorm(length(a))
+ result <- lm(b ~ a)
+ 
+ tidy(result)
+ ## Don't show: 
+ }) # examplesIf
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> mod <- lm(mpg ~ wt + qsec, data = mtcars)
> tidy(mod)
# A tibble: 3 × 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4
2 wt            -5.05      0.484    -10.4  2.52e-11
3 qsec           0.929     0.265      3.51 1.50e- 3
> glance(mod)
# A tibble: 1 × 12
  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2  -74.4  157.  163.
# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>
> d <- tidy(mod, conf.int = TRUE)
> ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) + 
+     geom_point() + geom_vline(xintercept = 0, lty = 4) + geom_errorbarh()
> s <- summary(mod)
> tidy(s, conf.int = TRUE)
# A tibble: 3 × 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4    9.00      30.5 
2 wt            -5.05      0.484    -10.4  2.52e-11   -6.04      -4.06
3 qsec           0.929     0.265      3.51 1.50e- 3    0.387      1.47
> glance(s)
# A tibble: 1 × 8
  r.squared adj.r.squared sigma statistic  p.value    df df.residual  nobs
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>       <int> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2          29    32
> augment(mod)
# A tibble: 32 × 10
   .rownames    mpg    wt  qsec .fitted  .resid   .hat .sigma .cooksd .std.resid
   <chr>      <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl>
 1 Mazda RX4   21    2.62  16.5    21.8 -0.815  0.0693   2.64 2.63e-3    -0.325 
 2 Mazda RX4…  21    2.88  17.0    21.0 -0.0482 0.0444   2.64 5.59e-6    -0.0190
 3 Datsun 710  22.8  2.32  18.6    25.3 -2.53   0.0607   2.60 2.17e-2    -1.00  
 4 Hornet 4 …  21.4  3.22  19.4    21.6 -0.181  0.0576   2.64 1.05e-4    -0.0716
 5 Hornet Sp…  18.7  3.44  17.0    18.2  0.504  0.0389   2.64 5.29e-4     0.198 
 6 Valiant     18.1  3.46  20.2    21.1 -2.97   0.0957   2.58 5.10e-2    -1.20  
 7 Duster 360  14.3  3.57  15.8    16.4 -2.14   0.0729   2.61 1.93e-2    -0.857 
 8 Merc 240D   24.4  3.19  20      22.2  2.17   0.0791   2.61 2.18e-2     0.872 
 9 Merc 230    22.8  3.15  22.9    25.1 -2.32   0.295    2.59 1.59e-1    -1.07  
10 Merc 280    19.2  3.44  18.3    19.4 -0.185  0.0358   2.64 6.55e-5    -0.0728
# ℹ 22 more rows
> augment(mod, mtcars, interval = "confidence")
# A tibble: 32 × 20
   .rownames     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 8 more variables: .fitted <dbl>, .lower <dbl>, .upper <dbl>, .resid <dbl>,
#   .hat <dbl>, .sigma <dbl>, .cooksd <dbl>, .std.resid <dbl>
> newdata <- mtcars %>% head(6) %>% mutate(wt = wt + 1)
> augment(mod, newdata = newdata)
# A tibble: 6 × 14
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 2 more variables: .fitted <dbl>, .resid <dbl>
> mod2 <- lm(mpg ~ wt, data = mtcars)
> au <- augment(mod2, newdata = newdata, interval = "prediction")
> ggplot(au, aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted)) + 
+     geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
> newdata <- newdata %>% select(-mpg)
> augment(mod, newdata = newdata)
# A tibble: 6 × 12
  .rownames    cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
1 Mazda RX4      6   160   110  3.9   3.62  16.5     0     1     4     4    16.8
2 Mazda RX4…     6   160   110  3.9   3.88  17.0     0     1     4     4    16.0
3 Datsun 710     4   108    93  3.85  3.32  18.6     1     1     4     1    20.3
4 Hornet 4 …     6   258   110  3.08  4.22  19.4     1     0     3     1    16.5
5 Hornet Sp…     8   360   175  3.15  4.44  17.0     0     0     3     2    13.1
6 Valiant        6   225   105  2.76  4.46  20.2     1     0     3     1    16.0
> au <- augment(mod, data = mtcars)
> ggplot(au, aes(.hat, .std.resid)) + geom_vline(size = 2, colour = "white", 
+     xintercept = 0) + geom_hline(size = 2, colour = "white", yintercept = 0) + geom_point() + 
+     geom_smooth(se = FALSE)
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> plot(mod, which = 6)
> ggplot(au, aes(.hat, .cooksd)) + geom_vline(xintercept = 0, colour = NA) + 
+     geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") + geom_smooth(se = FALSE) + 
+     geom_point()
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> a <- matrix(rnorm(20), nrow = 10)
> b <- a + rnorm(length(a))
> result <- lm(b ~ a)
> tidy(result)
# A tibble: 6 × 6
  response term        estimate std.error statistic p.value
  <chr>    <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 Y1       (Intercept)   -0.128     0.219    -0.585 0.577  
2 Y1       a1             0.303     0.299     1.02  0.343  
3 Y1       a2             0.348     0.218     1.60  0.154  
4 Y2       (Intercept)    0.131     0.300     0.437 0.676  
5 Y2       a1            -0.215     0.408    -0.527 0.614  
6 Y2       a2             1.07      0.298     3.61  0.00867
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’

> nameEx("glance.survdiff")
> ### * glance.survdiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.survdiff
> ### Title: Glance at a(n) survdiff object
> ### Aliases: glance.survdiff
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ s <- survdiff(
+   Surv(time, status) ~ pat.karno + strata(inst),
+   data = lung
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(s)
+ glance(s)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> s <- survdiff(Surv(time, status) ~ pat.karno + strata(inst), data = lung)
> tidy(s)
# A tibble: 8 × 4
  pat.karno     N   obs    exp
  <chr>     <dbl> <dbl>  <dbl>
1 30            2     1  0.692
2 40            2     1  1.10 
3 50            4     4  1.17 
4 60           30    27 16.3  
5 70           41    31 26.4  
6 80           50    38 41.9  
7 90           60    38 47.2  
8 100          35    21 26.2  
> glance(s)
# A tibble: 1 × 3
  statistic    df p.value
      <dbl> <dbl>   <dbl>
1      21.4     7 0.00326
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("glance.survexp")
> ### * glance.survexp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.survexp
> ### Title: Glance at a(n) survexp object
> ### Aliases: glance.survexp
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ sexpfit <- survexp(
+   futime ~ 1,
+   rmap = list(
+     sex = "male",
+     year = accept.dt,
+     age = (accept.dt - birth.dt)
+   ),
+   method = "conditional",
+   data = jasa
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(sexpfit)
+ glance(sexpfit)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> sexpfit <- survexp(futime ~ 1, rmap = list(sex = "male", year = accept.dt, 
+     age = (accept.dt - birth.dt)), method = "conditional", data = jasa)
> tidy(sexpfit)
# A tibble: 88 × 3
    time estimate n.risk
   <dbl>    <dbl>  <int>
 1     0     1       102
 2     1     1.00    102
 3     2     1.00     99
 4     4     1.00     96
 5     5     1.00     94
 6     7     1.00     92
 7     8     1.00     91
 8    10     1.00     90
 9    11     1.00     89
10    15     1.00     88
# ℹ 78 more rows
> glance(sexpfit)
# A tibble: 1 × 3
  n.max n.start timepoints
  <int>   <int>      <int>
1   102     102         88
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("glance.survfit")
> ### * glance.survfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.survfit
> ### Title: Glance at a(n) survfit object
> ### Aliases: glance.survfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ cfit <- coxph(Surv(time, status) ~ age + sex, lung)
+ sfit <- survfit(cfit)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(sfit)
+ glance(sfit)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(sfit), aes(time, estimate)) +
+   geom_line() +
+   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+ 
+ # multi-state
+ fitCI <- survfit(Surv(stop, status * as.numeric(event), type = "mstate") ~ 1,
+   data = mgus1, subset = (start == 0)
+ )
+ 
+ td_multi <- tidy(fitCI)
+ 
+ td_multi
+ 
+ ggplot(td_multi, aes(time, estimate, group = state)) +
+   geom_line(aes(color = state)) +
+   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> sfit <- survfit(cfit)
> tidy(sfit)
# A tibble: 186 × 8
    time n.risk n.event n.censor estimate std.error conf.high conf.low
   <dbl>  <dbl>   <dbl>    <dbl>    <dbl>     <dbl>     <dbl>    <dbl>
 1     5    228       1        0    0.996   0.00419     1        0.988
 2    11    227       3        0    0.983   0.00845     1.00     0.967
 3    12    224       1        0    0.979   0.00947     0.997    0.961
 4    13    223       2        0    0.971   0.0113      0.992    0.949
 5    15    221       1        0    0.966   0.0121      0.990    0.944
 6    26    220       1        0    0.962   0.0129      0.987    0.938
 7    30    219       1        0    0.958   0.0136      0.984    0.933
 8    31    218       1        0    0.954   0.0143      0.981    0.927
 9    53    217       2        0    0.945   0.0157      0.975    0.917
10    54    215       1        0    0.941   0.0163      0.972    0.911
# ℹ 176 more rows
> glance(sfit)
# A tibble: 1 × 10
  records n.max n.start events rmean rmean.std.error median conf.low conf.high
    <dbl> <dbl>   <dbl>  <dbl> <dbl>           <dbl>  <dbl>    <dbl>     <dbl>
1     228   228     228    165  381.            20.3    320      285       363
# ℹ 1 more variable: nobs <int>
> library(ggplot2)
> ggplot(tidy(sfit), aes(time, estimate)) + geom_line() + geom_ribbon(aes(ymin = conf.low, 
+     ymax = conf.high), alpha = 0.25)
> fitCI <- survfit(Surv(stop, status * as.numeric(event), type = "mstate") ~ 
+     1, data = mgus1, subset = (start == 0))
> td_multi <- tidy(fitCI)
> td_multi
# A tibble: 711 × 9
    time n.risk n.event n.censor estimate std.error conf.high conf.low state
   <dbl>  <int>   <int>    <int>    <dbl>     <dbl>     <dbl>    <dbl> <chr>
 1     6    241       0        0    0.996   0.00414     1        0.988 (s0) 
 2     7    240       0        0    0.992   0.00584     1        0.980 (s0) 
 3    31    239       0        0    0.988   0.00714     1        0.974 (s0) 
 4    32    238       0        0    0.983   0.00823     1.00     0.967 (s0) 
 5    39    237       0        0    0.979   0.00918     0.997    0.961 (s0) 
 6    60    236       0        0    0.975   0.0100      0.995    0.956 (s0) 
 7    61    235       0        0    0.967   0.0115      0.990    0.944 (s0) 
 8   152    233       0        0    0.963   0.0122      0.987    0.939 (s0) 
 9   153    232       0        0    0.959   0.0128      0.984    0.934 (s0) 
10   174    231       0        0    0.954   0.0134      0.981    0.928 (s0) 
# ℹ 701 more rows
> ggplot(td_multi, aes(time, estimate, group = state)) + geom_line(aes(color = state)) + 
+     geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.25)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("glance.survreg")
> ### * glance.survreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.survreg
> ### Title: Glance at a(n) survreg object
> ### Aliases: glance.survreg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ sr <- survreg(
+   Surv(futime, fustat) ~ ecog.ps + rx,
+   ovarian,
+   dist = "exponential"
+ )
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(sr)
+ augment(sr, ovarian)
+ glance(sr)
+ 
+ # coefficient plot
+ td <- tidy(sr, conf.int = TRUE)
+ 
+ library(ggplot2)
+ 
+ ggplot(td, aes(estimate, term)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> sr <- survreg(Surv(futime, fustat) ~ ecog.ps + rx, ovarian, dist = "exponential")
> tidy(sr)
# A tibble: 3 × 5
  term        estimate std.error statistic     p.value
  <chr>          <dbl>     <dbl>     <dbl>       <dbl>
1 (Intercept)    6.96      1.32      5.27  0.000000139
2 ecog.ps       -0.433     0.587    -0.738 0.461      
3 rx             0.582     0.587     0.991 0.322      
> augment(sr, ovarian)
# A tibble: 26 × 9
   futime fustat   age resid.ds    rx ecog.ps .fitted .se.fit .resid
    <dbl>  <dbl> <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>
 1     59      1  72.3        2     1       1   1224.    639. -1165.
 2    115      1  74.5        2     1       1   1224.    639. -1109.
 3    156      1  66.5        2     1       2    794.    350.  -638.
 4    421      0  53.4        2     2       1   2190.   1202. -1769.
 5    431      1  50.3        2     1       1   1224.    639.  -793.
 6    448      0  56.4        1     1       2    794.    350.  -346.
 7    464      1  56.9        2     2       2   1420.    741.  -956.
 8    475      1  59.9        2     2       2   1420.    741.  -945.
 9    477      0  64.2        2     1       1   1224.    639.  -747.
10    563      1  55.2        1     2       2   1420.    741.  -857.
# ℹ 16 more rows
> glance(sr)
# A tibble: 1 × 9
   iter    df statistic logLik   AIC   BIC df.residual  nobs p.value
  <int> <int>     <dbl>  <dbl> <dbl> <dbl>       <int> <int>   <dbl>
1     4     3      1.67  -97.2  200.  204.          23    26   0.434
> td <- tidy(sr, conf.int = TRUE)
> library(ggplot2)
> ggplot(td, aes(estimate, term)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, 
+     xmax = conf.high), height = 0) + geom_vline(xintercept = 0)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("glance.svyglm")
> ### * glance.svyglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.svyglm
> ### Title: Glance at a(n) svyglm object
> ### Aliases: glance.svyglm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survey")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survey)
+ 
+ set.seed(123)
+ data(api)
+ 
+ # survey design
+ dstrat <-
+   svydesign(
+     id = ~1,
+     strata = ~stype,
+     weights = ~pw,
+     data = apistrat,
+     fpc = ~fpc
+   )
+ 
+ # model
+ m <- svyglm(
+   formula = sch.wide ~ ell + meals + mobility,
+   design = dstrat,
+   family = quasibinomial()
+ )
+ 
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.svyolr")
> ### * glance.svyolr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.svyolr
> ### Title: Glance at a(n) svyolr object
> ### Aliases: glance.svyolr
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survey", "MASS"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(broom)
+ library(survey)
+ 
+ data(api)
+ dclus1 <- svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ dclus1 <- update(dclus1, mealcat = cut(meals, c(0, 25, 50, 75, 100)))
+ 
+ m <- svyolr(mealcat ~ avg.ed + mobility + stype, design = dclus1)
+ 
+ m
+ 
+ tidy(m, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance.varest")
> ### * glance.varest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.varest
> ### Title: Glance at a(n) varest object
> ### Aliases: glance.varest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("vars")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(vars)
+ 
+ # load data
+ data("Canada", package = "vars")
+ 
+ # fit models
+ mod <- VAR(Canada, p = 1, type = "both")
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("glance_optim")
> ### * glance_optim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance_optim
> ### Title: Tidy a(n) optim object masquerading as list
> ### Aliases: glance_optim glance.optim
> 
> ### ** Examples
> 
> 
> f <- function(x) (x[1] - 2)^2 + (x[2] - 3)^2 + (x[3] - 8)^2
> o <- optim(c(1, 1, 1), f)
> 
> 
> 
> 
> cleanEx()
> nameEx("leveneTest_tidiers")
> ### * leveneTest_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leveneTest_tidiers
> ### Title: Tidy/glance a(n) leveneTest object
> ### Aliases: leveneTest_tidiers tidy.leveneTest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("car")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(car)
+ 
+ data(Moore)
+ 
+ lt <- with(Moore, leveneTest(conformity, fcategory))
+ 
+ tidy(lt)
+ glance(lt)
+ ## Don't show: 
+ }) # examplesIf
> library(car)
Loading required package: carData
> data(Moore)
> lt <- with(Moore, leveneTest(conformity, fcategory))
> tidy(lt)
# A tibble: 1 × 4
  statistic p.value    df df.residual
      <dbl>   <dbl> <int>       <int>
1    0.0460   0.955     2          42
> glance(lt)
# A tibble: 0 × 0
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:car’, ‘package:carData’

> nameEx("metafor_tidiers")
> ### * metafor_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.rma
> ### Title: Tidy a(n) rma object
> ### Aliases: tidy.rma
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("metafor")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(metafor)
+ 
+ df <-
+   escalc(
+     measure = "RR",
+     ai = tpos,
+     bi = tneg,
+     ci = cpos,
+     di = cneg,
+     data = dat.bcg
+   )
+ 
+ meta_analysis <- rma(yi, vi, data = df, method = "EB")
+ 
+ tidy(meta_analysis)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("summary_tidiers")
> ### * summary_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary_tidiers
> ### Title: (Deprecated) Tidy summaryDefault objects
> ### Aliases: summary_tidiers tidy.summaryDefault glance.summaryDefault
> 
> ### ** Examples
> 
> 
> v <- rnorm(1000)
> s <- summary(v)
> s
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.00805 -0.69737 -0.03532 -0.01165  0.68843  3.81028 
> 
> tidy(s)
Warning in tidy.summaryDefault(s) :
  `tidy.summaryDefault()` is deprecated. Please use `skimr::skim()` instead.
# A tibble: 1 × 6
  minimum     q1  median    mean    q3 maximum
    <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl>
1   -3.01 -0.697 -0.0353 -0.0116 0.688    3.81
> glance(s)
Warning in glance.summaryDefault(s) :
  `tidy.summaryDefault()` is deprecated. Please use `skimr::skim()` instead.
# A tibble: 1 × 6
  minimum     q1  median    mean    q3 maximum
    <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl>
1   -3.01 -0.697 -0.0353 -0.0116 0.688    3.81
> 
> v2 <- c(v,NA)
> tidy(summary(v2))
Warning in tidy.summaryDefault(summary(v2)) :
  `tidy.summaryDefault()` is deprecated. Please use `skimr::skim()` instead.
# A tibble: 1 × 7
  minimum     q1  median    mean    q3 maximum    na
    <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl> <dbl>
1   -3.01 -0.697 -0.0353 -0.0116 0.688    3.81     1
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.Arima")
> ### * tidy.Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Arima
> ### Title: Tidy a(n) Arima object
> ### Aliases: tidy.Arima Arima_tidiers
> 
> ### ** Examples
> 
> 
> # fit model
> fit <- arima(lh, order = c(1, 0, 0))
> 
> # summarize model fit with tidiers
> tidy(fit)
# A tibble: 2 × 3
  term      estimate std.error
  <chr>        <dbl>     <dbl>
1 ar1          0.574     0.116
2 intercept    2.41      0.147
> glance(fit)
# A tibble: 1 × 5
  sigma logLik   AIC   BIC  nobs
  <dbl>  <dbl> <dbl> <dbl> <int>
1 0.444  -29.4  64.8  70.4    48
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.Kendall")
> ### * tidy.Kendall
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Kendall
> ### Title: Tidy a(n) Kendall object
> ### Aliases: tidy.Kendall Kendall_tidiers kendall_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("Kendall")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(Kendall)
+ 
+ A <- c(2.5, 2.5, 2.5, 2.5, 5, 6.5, 6.5, 10, 10, 10, 10, 10, 14, 14, 14, 16, 17)
+ B <- c(1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2)
+ 
+ # fit models and summarize results
+ f_res <- Kendall(A, B)
+ tidy(f_res)
+ 
+ s_res <- MannKendall(B)
+ tidy(s_res)
+ 
+ t_res <- SeasonalMannKendall(ts(A))
+ tidy(t_res)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.Mclust")
> ### * tidy.Mclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Mclust
> ### Title: Tidy a(n) Mclust object
> ### Aliases: tidy.Mclust mclust_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mclust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load library for models and data
+ library(mclust)
+ 
+ # load data manipulation libraries
+ library(dplyr)
+ library(tibble)
+ library(purrr)
+ library(tidyr)
+ 
+ set.seed(27)
+ 
+ centers <- tibble(
+   cluster = factor(1:3),
+   # number points in each cluster
+   num_points = c(100, 150, 50),
+   # x1 coordinate of cluster center
+   x1 = c(5, 0, -3),
+   # x2 coordinate of cluster center
+   x2 = c(-1, 1, -2)
+ )
+ 
+ points <- centers %>%
+   mutate(
+     x1 = map2(num_points, x1, rnorm),
+     x2 = map2(num_points, x2, rnorm)
+   ) %>%
+   select(-num_points, -cluster) %>%
+   unnest(c(x1, x2))
+ 
+ # fit model
+ m <- Mclust(points)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m, points)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.TukeyHSD")
> ### * tidy.TukeyHSD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.TukeyHSD
> ### Title: Tidy a(n) TukeyHSD object
> ### Aliases: tidy.TukeyHSD
> 
> ### ** Examples
> 
> 
> fm1 <- aov(breaks ~ wool + tension, data = warpbreaks)
> thsd <- TukeyHSD(fm1, "tension", ordered = TRUE)
> tidy(thsd)
# A tibble: 3 × 7
  term    contrast null.value estimate conf.low conf.high adj.p.value
  <chr>   <chr>         <dbl>    <dbl>    <dbl>     <dbl>       <dbl>
1 tension M-H               0     4.72   -4.63       14.1     0.447  
2 tension L-H               0    14.7     5.37       24.1     0.00112
3 tension L-M               0    10.0     0.647      19.4     0.0336 
> 
> # may include comparisons on multiple terms
> fm2 <- aov(mpg ~ as.factor(gear) * as.factor(cyl), data = mtcars)
> tidy(TukeyHSD(fm2))
# A tibble: 42 × 7
   term              contrast null.value estimate conf.low conf.high adj.p.value
   <chr>             <chr>         <dbl>    <dbl>    <dbl>     <dbl>       <dbl>
 1 as.factor(gear)   4-3               0    8.43     5.19      11.7   0.00000297
 2 as.factor(gear)   5-3               0    5.27     0.955      9.59  0.0147    
 3 as.factor(gear)   5-4               0   -3.15    -7.60       1.30  0.201     
 4 as.factor(cyl)    6-4               0   -5.40    -9.45      -1.36  0.00748   
 5 as.factor(cyl)    8-4               0   -5.23    -8.60      -1.86  0.00201   
 6 as.factor(cyl)    8-6               0    0.172   -3.70       4.04  0.993     
 7 as.factor(gear):… 4:4-3:4           0    5.43    -6.65      17.5   0.832     
 8 as.factor(gear):… 5:4-3:4           0    6.70    -7.24      20.6   0.778     
 9 as.factor(gear):… 3:6-3:4           0   -1.75   -15.7       12.2   1.00      
10 as.factor(gear):… 4:6-3:4           0   -1.75   -14.5       11.0   1.00      
# ℹ 32 more rows
> 
> 
> 
> cleanEx()
> nameEx("tidy.aareg")
> ### * tidy.aareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.aareg
> ### Title: Tidy a(n) aareg object
> ### Aliases: tidy.aareg aareg_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ afit <- aareg(
+   Surv(time, status) ~ age + sex + ph.ecog,
+   data = lung,
+   dfbeta = TRUE
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(afit)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> afit <- aareg(Surv(time, status) ~ age + sex + ph.ecog, data = lung, dfbeta = TRUE)
> tidy(afit)
# A tibble: 4 × 7
  term        estimate  statistic std.error robust.se statistic.z  p.value
  <chr>          <dbl>      <dbl>     <dbl>     <dbl>       <dbl>    <dbl>
1 Intercept  0.00505    0.00587   0.00474   0.00477          1.23 0.219   
2 age        0.0000401  0.0000715 0.0000723 0.0000700        1.02 0.307   
3 sex       -0.00316   -0.00403   0.00122   0.00123         -3.28 0.00103 
4 ph.ecog    0.00301    0.00367   0.00102   0.00102          3.62 0.000299
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("tidy.acf")
> ### * tidy.acf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.acf
> ### Title: Tidy a(n) acf object
> ### Aliases: tidy.acf
> 
> ### ** Examples
> 
> 
> tidy(acf(lh, plot = FALSE))
# A tibble: 17 × 2
     lag      acf
   <dbl>    <dbl>
 1     0  1      
 2     1  0.576  
 3     2  0.182  
 4     3 -0.145  
 5     4 -0.175  
 6     5 -0.150  
 7     6 -0.0210 
 8     7 -0.0203 
 9     8 -0.00420
10     9 -0.136  
11    10 -0.154  
12    11 -0.0972 
13    12  0.0490 
14    13  0.120  
15    14  0.0867 
16    15  0.119  
17    16  0.151  
> tidy(ccf(mdeaths, fdeaths, plot = FALSE))
# A tibble: 31 × 2
      lag     acf
    <dbl>   <dbl>
 1 -1.25   0.0151
 2 -1.17   0.366 
 3 -1.08   0.615 
 4 -1      0.708 
 5 -0.917  0.622 
 6 -0.833  0.340 
 7 -0.75  -0.0245
 8 -0.667 -0.382 
 9 -0.583 -0.612 
10 -0.5   -0.678 
# ℹ 21 more rows
> tidy(pacf(lh, plot = FALSE))
# A tibble: 16 × 2
     lag      acf
   <dbl>    <dbl>
 1     1  0.576  
 2     2 -0.223  
 3     3 -0.227  
 4     4  0.103  
 5     5 -0.0759 
 6     6  0.0676 
 7     7 -0.104  
 8     8  0.0120 
 9     9 -0.188  
10    10  0.00255
11    11  0.0656 
12    12  0.0320 
13    13  0.0219 
14    14 -0.0931 
15    15  0.230  
16    16  0.0444 
> 
> 
> 
> cleanEx()
> nameEx("tidy.anova")
> ### * tidy.anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.anova
> ### Title: Tidy a(n) anova object
> ### Aliases: tidy.anova
> 
> ### ** Examples
> 
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit models
+ a <- lm(mpg ~ wt + qsec + disp, mtcars)
+ b <- lm(mpg ~ wt + qsec, mtcars)
+ 
+ mod <- anova(a, b)
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ 
+ # car::linearHypothesis() example
+ library(car)
+ mod_lht <- linearHypothesis(a, "wt - disp")
+ tidy(mod_lht)
+ glance(mod_lht)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.aov")
> ### * tidy.aov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.aov
> ### Title: Tidy a(n) aov object
> ### Aliases: tidy.aov
> 
> ### ** Examples
> 
> 
> a <- aov(mpg ~ wt + qsec + disp, mtcars)
> tidy(a)
# A tibble: 4 × 6
  term         df     sumsq    meansq  statistic   p.value
  <chr>     <dbl>     <dbl>     <dbl>      <dbl>     <dbl>
1 wt            1 848.      848.      121.        1.08e-11
2 qsec          1  82.9      82.9      11.9       1.82e- 3
3 disp          1   0.00102   0.00102   0.000147  9.90e- 1
4 Residuals    28 195.        6.98     NA        NA       
> 
> 
> 
> cleanEx()
> nameEx("tidy.aovlist")
> ### * tidy.aovlist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.aovlist
> ### Title: Tidy a(n) aovlist object
> ### Aliases: tidy.aovlist
> 
> ### ** Examples
> 
> 
> a <- aov(mpg ~ wt + qsec + Error(disp / am), mtcars)
> tidy(a)
# A tibble: 5 × 7
  stratum term         df   sumsq  meansq statistic  p.value
  <chr>   <chr>     <dbl>   <dbl>   <dbl>     <dbl>    <dbl>
1 disp    wt            1 809.    809.        NA    NA      
2 disp:am wt            1   0.389   0.389     NA    NA      
3 Within  wt            1  87.2    87.2       12.0   0.00176
4 Within  qsec          1  34.2    34.2        4.72  0.0387 
5 Within  Residuals    27 195.      7.24      NA    NA      
> 
> 
> 
> cleanEx()
> nameEx("tidy.betamfx")
> ### * tidy.betamfx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.betamfx
> ### Title: Tidy a(n) betamfx object
> ### Aliases: tidy.betamfx
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mfx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(mfx)
+ 
+ # Simulate some data
+ set.seed(12345)
+ n <- 1000
+ x <- rnorm(n)
+ 
+ # Beta outcome
+ y <- rbeta(n, shape1 = plogis(1 + 0.5 * x), shape2 = (abs(0.2 * x)))
+ # Use Smithson and Verkuilen correction
+ y <- (y * (n - 1) + 0.5) / n
+ 
+ d <- data.frame(y, x)
+ mod_betamfx <- betamfx(y ~ x | x, data = d)
+ 
+ tidy(mod_betamfx, conf.int = TRUE)
+ 
+ # Compare with the naive model coefficients of the equivalent betareg call (not run)
+ # tidy(betamfx(y ~ x | x, data = d), conf.int = TRUE)
+ 
+ augment(mod_betamfx)
+ glance(mod_betamfx)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.betareg")
> ### * tidy.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.betareg
> ### Title: Tidy a(n) betareg object
> ### Aliases: tidy.betareg betareg_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("betareg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(betareg)
+ 
+ # load dats
+ data("GasolineYield", package = "betareg")
+ 
+ # fit model
+ mod <- betareg(yield ~ batch + temp, data = GasolineYield)
+ 
+ mod
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ tidy(mod, conf.int = TRUE, conf.level = .99)
+ 
+ augment(mod)
+ 
+ glance(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.biglm")
> ### * tidy.biglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.biglm
> ### Title: Tidy a(n) biglm object
> ### Aliases: tidy.biglm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("biglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(biglm)
+ 
+ # fit model -- linear regression
+ bfit <- biglm(mpg ~ wt + disp, mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(bfit)
+ tidy(bfit, conf.int = TRUE)
+ tidy(bfit, conf.int = TRUE, conf.level = .9)
+ 
+ glance(bfit)
+ 
+ # fit model -- logistic regression
+ bgfit <- bigglm(am ~ mpg, mtcars, family = binomial())
+ 
+ # summarize model fit with tidiers
+ tidy(bgfit)
+ tidy(bgfit, exponentiate = TRUE)
+ tidy(bgfit, conf.int = TRUE)
+ tidy(bgfit, conf.int = TRUE, conf.level = .9)
+ tidy(bgfit, conf.int = TRUE, conf.level = .9, exponentiate = TRUE)
+ 
+ glance(bgfit)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.binDesign")
> ### * tidy.binDesign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.binDesign
> ### Title: Tidy a(n) binDesign object
> ### Aliases: tidy.binDesign bindesign_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("binGroup", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(binGroup)
+ des <- binDesign(
+   nmax = 300, delta = 0.06,
+   p.hyp = 0.1, power = .8
+ )
+ 
+ glance(des)
+ tidy(des)
+ 
+ # the ggplot2 equivalent of plot(des)
+ library(ggplot2)
+ ggplot(tidy(des), aes(n, power)) +
+   geom_line()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.binWidth")
> ### * tidy.binWidth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.binWidth
> ### Title: Tidy a(n) binWidth object
> ### Aliases: tidy.binWidth binwidth_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("binGroup")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries
+ library(binGroup)
+ 
+ # fit model
+ bw <- binWidth(100, .1)
+ 
+ bw
+ 
+ # summarize model fit with tidiers
+ tidy(bw)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.boot")
> ### * tidy.boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.boot
> ### Title: Tidy a(n) boot object
> ### Aliases: tidy.boot boot_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("boot")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(boot)
+ 
+ clotting <- data.frame(
+   u = c(5, 10, 15, 20, 30, 40, 60, 80, 100),
+   lot1 = c(118, 58, 42, 35, 27, 25, 21, 19, 18),
+   lot2 = c(69, 35, 26, 21, 18, 16, 13, 12, 12)
+ )
+ 
+ # fit models
+ g1 <- glm(lot2 ~ log(u), data = clotting, family = Gamma)
+ 
+ bootfun <- function(d, i) {
+   coef(update(g1, data = d[i, ]))
+ }
+ 
+ bootres <- boot(clotting, bootfun, R = 999)
+ 
+ # summarize model fits with tidiers
+ tidy(g1, conf.int = TRUE)
+ tidy(bootres, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> library(boot)
> clotting <- data.frame(u = c(5, 10, 15, 20, 30, 40, 60, 80, 100), lot1 = c(118, 
+     58, 42, 35, 27, 25, 21, 19, 18), lot2 = c(69, 35, 26, 21, 18, 16, 13, 12, 12))
> g1 <- glm(lot2 ~ log(u), data = clotting, family = Gamma)
> bootfun <- function(d, i) {
+     coef(update(g1, data = d[i, ]))
+ }
> bootres <- boot(clotting, bootfun, R = 999)
> tidy(g1, conf.int = TRUE)
# A tibble: 2 × 7
  term        estimate std.error statistic       p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>         <dbl>    <dbl>     <dbl>
1 (Intercept)  -0.0239  0.00133      -18.0 0.000000400    -0.0265   -0.0213
2 log(u)        0.0236  0.000577      40.9 0.00000000136   0.0225    0.0247
> tidy(bootres, conf.int = TRUE)
# A tibble: 2 × 6
  term        statistic      bias std.error conf.low conf.high
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
1 (Intercept)   -0.0239 -0.00193    0.00335  -0.0330   -0.0223
2 log(u)         0.0236  0.000590   0.00107   0.0227    0.0265
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:boot’

> nameEx("tidy.btergm")
> ### * tidy.btergm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.btergm
> ### Title: Tidy a(n) btergm object
> ### Aliases: tidy.btergm btergm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("btergm", "network"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(btergm)
+ library(network)
+ 
+ set.seed(5)
+ 
+ # create 10 random networks with 10 actors
+ networks <- list()
+ for (i in 1:10) {
+   mat <- matrix(rbinom(100, 1, .25), nrow = 10, ncol = 10)
+   diag(mat) <- 0
+   nw <- network(mat)
+   networks[[i]] <- nw
+ }
+ 
+ # create 10 matrices as covariates
+ covariates <- list()
+ for (i in 1:10) {
+   mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
+   covariates[[i]] <- mat
+ }
+ 
+ # fit the model
+ mod <- btergm(networks ~ edges + istar(2) + edgecov(covariates), R = 100)
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.cch")
> ### * tidy.cch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.cch
> ### Title: Tidy a(n) cch object
> ### Aliases: tidy.cch cch_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # examples come from cch documentation
+ subcoh <- nwtco$in.subcohort
+ selccoh <- with(nwtco, rel == 1 | subcoh == 1)
+ ccoh.data <- nwtco[selccoh, ]
+ ccoh.data$subcohort <- subcoh[selccoh]
+ 
+ # central-lab histology
+ ccoh.data$histol <- factor(ccoh.data$histol, labels = c("FH", "UH"))
+ 
+ # tumour stage
+ ccoh.data$stage <- factor(ccoh.data$stage, labels = c("I", "II", "III", "IV"))
+ ccoh.data$age <- ccoh.data$age / 12 # age in years
+ 
+ # fit model
+ fit.ccP <- cch(Surv(edrel, rel) ~ stage + histol + age,
+   data = ccoh.data,
+   subcoh = ~subcohort, id = ~seqno, cohort.size = 4028
+ )
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(fit.ccP)
+ 
+ # coefficient plot
+ library(ggplot2)
+ 
+ ggplot(tidy(fit.ccP), aes(x = estimate, y = term)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> subcoh <- nwtco$in.subcohort
> selccoh <- with(nwtco, rel == 1 | subcoh == 1)
> ccoh.data <- nwtco[selccoh, ]
> ccoh.data$subcohort <- subcoh[selccoh]
> ccoh.data$histol <- factor(ccoh.data$histol, labels = c("FH", "UH"))
> ccoh.data$stage <- factor(ccoh.data$stage, labels = c("I", "II", "III", 
+     "IV"))
> ccoh.data$age <- ccoh.data$age/12
> fit.ccP <- cch(Surv(edrel, rel) ~ stage + histol + age, data = ccoh.data, 
+     subcoh = ~subcohort, id = ~seqno, cohort.size = 4028)
> tidy(fit.ccP)
# A tibble: 5 × 7
  term     estimate std.error statistic  p.value conf.low conf.high
  <chr>       <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 stageII    0.735     0.168       4.36 1.30e- 5  0.404      1.06  
2 stageIII   0.597     0.173       3.44 5.77e- 4  0.257      0.937 
3 stageIV    1.38      0.205       6.76 1.40e-11  0.983      1.79  
4 histolUH   1.50      0.160       9.38 0         1.19       1.81  
5 age        0.0433    0.0237      1.82 6.83e- 2 -0.00324    0.0898
> library(ggplot2)
> ggplot(tidy(fit.ccP), aes(x = estimate, y = term)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, 
+     xmax = conf.high), height = 0) + geom_vline(xintercept = 0)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("tidy.cld")
> ### * tidy.cld
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.cld
> ### Title: Tidy a(n) cld object
> ### Aliases: tidy.cld
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("multcomp", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(multcomp)
+ library(ggplot2)
+ 
+ amod <- aov(breaks ~ wool + tension, data = warpbreaks)
+ wht <- glht(amod, linfct = mcp(tension = "Tukey"))
+ 
+ tidy(wht)
+ 
+ ggplot(wht, aes(lhs, estimate)) +
+   geom_point()
+ 
+ CI <- confint(wht)
+ 
+ tidy(CI)
+ 
+ ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
+   geom_pointrange()
+ 
+ tidy(summary(wht))
+ ggplot(mapping = aes(lhs, estimate)) +
+   geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
+   geom_point(aes(size = p), data = summary(wht)) +
+   scale_size(trans = "reverse")
+ 
+ cld <- cld(wht)
+ tidy(cld)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.clm")
> ### * tidy.clm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.clm
> ### Title: Tidy a(n) clm object
> ### Aliases: tidy.clm ordinal_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ordinal")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ordinal)
+ 
+ # fit model
+ fit <- clm(rating ~ temp * contact, data = wine)
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ tidy(fit, conf.int = TRUE, conf.level = 0.9)
+ tidy(fit, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
+ 
+ glance(fit)
+ augment(fit, type.predict = "prob")
+ augment(fit, type.predict = "class")
+ 
+ # ...and again with another model specification
+ fit2 <- clm(rating ~ temp, nominal = ~contact, data = wine)
+ 
+ tidy(fit2)
+ glance(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(ordinal)
> fit <- clm(rating ~ temp * contact, data = wine)
> tidy(fit)
# A tibble: 7 × 6
  term                estimate std.error statistic  p.value coef.type
  <chr>                  <dbl>     <dbl>     <dbl>    <dbl> <chr>    
1 1|2                   -1.41      0.545    -2.59  9.66e- 3 intercept
2 2|3                    1.14      0.510     2.24  2.48e- 2 intercept
3 3|4                    3.38      0.638     5.29  1.21e- 7 intercept
4 4|5                    4.94      0.751     6.58  4.66e-11 intercept
5 tempwarm               2.32      0.701     3.31  9.28e- 4 location 
6 contactyes             1.35      0.660     2.04  4.13e- 2 location 
7 tempwarm:contactyes    0.360     0.924     0.389 6.97e- 1 location 
> tidy(fit, conf.int = TRUE, conf.level = 0.9)
# A tibble: 7 × 8
  term        estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           -1.41      0.545    -2.59  9.66e- 3   NA         NA    intercept
2 2|3            1.14      0.510     2.24  2.48e- 2   NA         NA    intercept
3 3|4            3.38      0.638     5.29  1.21e- 7   NA         NA    intercept
4 4|5            4.94      0.751     6.58  4.66e-11   NA         NA    intercept
5 tempwarm       2.32      0.701     3.31  9.28e- 4    1.20       3.52 location 
6 contactyes     1.35      0.660     2.04  4.13e- 2    0.284      2.47 location 
7 tempwarm:c…    0.360     0.924     0.389 6.97e- 1   -1.17       1.89 location 
> tidy(fit, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
# A tibble: 7 × 8
  term        estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2            0.244     0.545    -2.59  9.66e- 3   0.0837     0.710 intercept
2 2|3            3.14      0.510     2.24  2.48e- 2   1.16       8.52  intercept
3 3|4           29.3       0.638     5.29  1.21e- 7   8.38     102.    intercept
4 4|5          140.        0.751     6.58  4.66e-11  32.1      610.    intercept
5 tempwarm      10.2       0.701     3.31  9.28e- 4   2.58      40.2   location 
6 contactyes     3.85      0.660     2.04  4.13e- 2   1.05      14.0   location 
7 tempwarm:c…    1.43      0.924     0.389 6.97e- 1   0.234      8.76  location 
> glance(fit)
# A tibble: 1 × 6
    edf   AIC   BIC logLik   df.residual  nobs
  <int> <dbl> <dbl> <logLik>       <dbl> <dbl>
1     7  187.  203. -86.4162          65    72
> augment(fit, type.predict = "prob")
# A tibble: 72 × 4
   rating temp  contact .fitted
   <ord>  <fct> <fct>     <dbl>
 1 2      cold  no       0.562 
 2 3      cold  no       0.209 
 3 3      cold  yes      0.435 
 4 4      cold  yes      0.0894
 5 4      warm  no       0.190 
 6 4      warm  no       0.190 
 7 5      warm  yes      0.286 
 8 5      warm  yes      0.286 
 9 1      cold  no       0.196 
10 2      cold  no       0.562 
# ℹ 62 more rows
> augment(fit, type.predict = "class")
# A tibble: 72 × 4
   rating temp  contact .fitted
   <ord>  <fct> <fct>   <fct>  
 1 2      cold  no      2      
 2 3      cold  no      2      
 3 3      cold  yes     3      
 4 4      cold  yes     3      
 5 4      warm  no      3      
 6 4      warm  no      3      
 7 5      warm  yes     4      
 8 5      warm  yes     4      
 9 1      cold  no      2      
10 2      cold  no      2      
# ℹ 62 more rows
> fit2 <- clm(rating ~ temp, nominal = ~contact, data = wine)
> tidy(fit2)
# A tibble: 9 × 6
  term            estimate std.error statistic      p.value coef.type
  <chr>              <dbl>     <dbl>     <dbl>        <dbl> <chr>    
1 1|2.(Intercept)    -1.32     0.562     -2.35 0.0186       intercept
2 2|3.(Intercept)     1.25     0.475      2.63 0.00866      intercept
3 3|4.(Intercept)     3.55     0.656      5.41 0.0000000625 intercept
4 4|5.(Intercept)     4.66     0.860      5.42 0.0000000608 intercept
5 1|2.contactyes     -1.62     1.16      -1.39 0.164        intercept
6 2|3.contactyes     -1.51     0.591     -2.56 0.0105       intercept
7 3|4.contactyes     -1.67     0.649     -2.58 0.00985      intercept
8 4|5.contactyes     -1.05     0.897     -1.17 0.241        intercept
9 tempwarm            2.52     0.535      4.71 0.00000250   location 
> glance(fit2)
# A tibble: 1 × 6
    edf   AIC   BIC logLik    df.residual  nobs
  <int> <dbl> <dbl> <logLik>        <dbl> <dbl>
1     9  190.  211. -86.20855          63    72
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ordinal’

> nameEx("tidy.clmm")
> ### * tidy.clmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.clmm
> ### Title: Tidy a(n) clmm object
> ### Aliases: tidy.clmm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ordinal")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ordinal)
+ 
+ # fit model
+ fit <- clmm(rating ~ temp + contact + (1 | judge), data = wine)
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ tidy(fit, conf.int = TRUE, conf.level = 0.9)
+ tidy(fit, conf.int = TRUE, exponentiate = TRUE)
+ 
+ glance(fit)
+ 
+ # ...and again with another model specification
+ fit2 <- clmm(rating ~ temp + (1 | judge), nominal = ~contact, data = wine)
+ 
+ tidy(fit2)
+ glance(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(ordinal)
> fit <- clmm(rating ~ temp + contact + (1 | judge), data = wine)
> tidy(fit)
# A tibble: 6 × 6
  term       estimate std.error statistic  p.value coef.type
  <chr>         <dbl>     <dbl>     <dbl>    <dbl> <chr>    
1 1|2           -1.62     0.682     -2.38 1.74e- 2 intercept
2 2|3            1.51     0.604      2.51 1.22e- 2 intercept
3 3|4            4.23     0.809      5.23 1.72e- 7 intercept
4 4|5            6.09     0.972      6.26 3.82e-10 intercept
5 tempwarm       3.06     0.595      5.14 2.68e- 7 location 
6 contactyes     1.83     0.513      3.58 3.44e- 4 location 
> tidy(fit, conf.int = TRUE, conf.level = 0.9)
# A tibble: 6 × 8
  term       estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>         <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           -1.62     0.682     -2.38 1.74e- 2   -2.75     -0.501 intercept
2 2|3            1.51     0.604      2.51 1.22e- 2    0.520     2.51  intercept
3 3|4            4.23     0.809      5.23 1.72e- 7    2.90      5.56  intercept
4 4|5            6.09     0.972      6.26 3.82e-10    4.49      7.69  intercept
5 tempwarm       3.06     0.595      5.14 2.68e- 7    2.08      4.04  location 
6 contactyes     1.83     0.513      3.58 3.44e- 4    0.992     2.68  location 
> tidy(fit, conf.int = TRUE, exponentiate = TRUE)
# A tibble: 6 × 8
  term       estimate std.error statistic  p.value conf.low conf.high coef.type
  <chr>         <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>    
1 1|2           0.197     0.682     -2.38 1.74e- 2   0.0518     0.751 intercept
2 2|3           4.54      0.604      2.51 1.22e- 2   1.39      14.8   intercept
3 3|4          68.6       0.809      5.23 1.72e- 7  14.1      335.    intercept
4 4|5         441.        0.972      6.26 3.82e-10  65.5     2965.    intercept
5 tempwarm     21.4       0.595      5.14 2.68e- 7   6.66      68.7   location 
6 contactyes    6.26      0.513      3.58 3.44e- 4   2.29      17.1   location 
> glance(fit)
# A tibble: 1 × 5
    edf   AIC   BIC logLik     nobs
  <dbl> <dbl> <dbl> <logLik>  <dbl>
1     7  177.  193. -81.56541    72
> fit2 <- clmm(rating ~ temp + (1 | judge), nominal = ~contact, data = wine)
Warning in nlminb(rho$par, function(par) obj.fun(rho, par), control = control) :
  unrecognized control elements named ‘nominal’ ignored
> tidy(fit2)
# A tibble: 5 × 6
  term     estimate std.error statistic       p.value coef.type
  <chr>       <dbl>     <dbl>     <dbl>         <dbl> <chr>    
1 1|2        -2.20      0.613     -3.59 0.000333      intercept
2 2|3         0.545     0.476      1.15 0.252         intercept
3 3|4         2.84      0.607      4.68 0.00000291    intercept
4 4|5         4.48      0.751      5.96 0.00000000256 intercept
5 tempwarm    2.67      0.554      4.81 0.00000147    location 
> glance(fit2)
# A tibble: 1 × 5
    edf   AIC   BIC logLik     nobs
  <dbl> <dbl> <dbl> <logLik>  <dbl>
1     6  189.  203. -88.73882    72
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ordinal’

> nameEx("tidy.coeftest")
> ### * tidy.coeftest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.coeftest
> ### Title: Tidy a(n) coeftest object
> ### Aliases: tidy.coeftest lmtest_tidiers coeftest_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lmtest")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lmtest)
+ 
+ m <- lm(dist ~ speed, data = cars)
+ 
+ coeftest(m)
+ tidy(coeftest(m))
+ tidy(coeftest(m, conf.int = TRUE))
+ 
+ # a very common workflow is to combine lmtest::coeftest with alternate
+ # variance-covariance matrices via the sandwich package. The lmtest
+ # tidiers support this workflow too, enabling you to adjust the standard
+ # errors of your tidied models on the fly.
+ library(sandwich)
+ 
+ # "HC3" (default) robust SEs
+ tidy(coeftest(m, vcov = vcovHC))
+ 
+ # "HC2" robust SEs
+ tidy(coeftest(m, vcov = vcovHC, type = "HC2"))
+ 
+ # N-W HAC robust SEs
+ tidy(coeftest(m, vcov = NeweyWest))
+ 
+ # the columns of the returned tibble for glance.coeftest() will vary
+ # depending on whether the coeftest object retains the underlying model.
+ # Users can control this with the "save = TRUE" argument of coeftest().
+ glance(coeftest(m))
+ glance(coeftest(m, save = TRUE))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.confint.glht")
> ### * tidy.confint.glht
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.confint.glht
> ### Title: Tidy a(n) confint.glht object
> ### Aliases: tidy.confint.glht
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("multcomp", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(multcomp)
+ library(ggplot2)
+ 
+ amod <- aov(breaks ~ wool + tension, data = warpbreaks)
+ wht <- glht(amod, linfct = mcp(tension = "Tukey"))
+ 
+ tidy(wht)
+ 
+ ggplot(wht, aes(lhs, estimate)) +
+   geom_point()
+ 
+ CI <- confint(wht)
+ 
+ tidy(CI)
+ 
+ ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
+   geom_pointrange()
+ 
+ tidy(summary(wht))
+ ggplot(mapping = aes(lhs, estimate)) +
+   geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
+   geom_point(aes(size = p), data = summary(wht)) +
+   scale_size(trans = "reverse")
+ 
+ cld <- cld(wht)
+ tidy(cld)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.confusionMatrix")
> ### * tidy.confusionMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.confusionMatrix
> ### Title: Tidy a(n) confusionMatrix object
> ### Aliases: tidy.confusionMatrix caret_tidiers confusionMatrix_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("caret")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(caret)
+ 
+ set.seed(27)
+ 
+ # generate data
+ two_class_sample1 <- as.factor(sample(letters[1:2], 100, TRUE))
+ two_class_sample2 <- as.factor(sample(letters[1:2], 100, TRUE))
+ 
+ two_class_cm <- confusionMatrix(
+   two_class_sample1,
+   two_class_sample2
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(two_class_cm)
+ tidy(two_class_cm, by_class = FALSE)
+ 
+ # multiclass example
+ six_class_sample1 <- as.factor(sample(letters[1:6], 100, TRUE))
+ six_class_sample2 <- as.factor(sample(letters[1:6], 100, TRUE))
+ 
+ six_class_cm <- confusionMatrix(
+   six_class_sample1,
+   six_class_sample2
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(six_class_cm)
+ tidy(six_class_cm, by_class = FALSE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.coxph")
> ### * tidy.coxph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.coxph
> ### Title: Tidy a(n) coxph object
> ### Aliases: tidy.coxph coxph_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ cfit <- coxph(Surv(time, status) ~ age + sex, lung)
+ 
+ # summarize model fit with tidiers
+ tidy(cfit)
+ tidy(cfit, exponentiate = TRUE)
+ 
+ lp <- augment(cfit, lung)
+ risks <- augment(cfit, lung, type.predict = "risk")
+ expected <- augment(cfit, lung, type.predict = "expected")
+ 
+ glance(cfit)
+ 
+ # also works on clogit models
+ resp <- levels(logan$occupation)
+ n <- nrow(logan)
+ indx <- rep(1:n, length(resp))
+ logan2 <- data.frame(
+   logan[indx, ],
+   id = indx,
+   tocc = factor(rep(resp, each = n))
+ )
+ 
+ logan2$case <- (logan2$occupation == logan2$tocc)
+ 
+ cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
+ 
+ tidy(cl)
+ glance(cl)
+ 
+ library(ggplot2)
+ 
+ ggplot(lp, aes(age, .fitted, color = sex)) +
+   geom_point()
+ 
+ ggplot(risks, aes(age, .fitted, color = sex)) +
+   geom_point()
+ 
+ ggplot(expected, aes(time, .fitted, color = sex)) +
+   geom_point()
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> tidy(cfit)
# A tibble: 2 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 age     0.0170   0.00922      1.85 0.0646 
2 sex    -0.513    0.167       -3.06 0.00218
> tidy(cfit, exponentiate = TRUE)
# A tibble: 2 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 age      1.02    0.00922      1.85 0.0646 
2 sex      0.599   0.167       -3.06 0.00218
> lp <- augment(cfit, lung)
> risks <- augment(cfit, lung, type.predict = "risk")
> expected <- augment(cfit, lung, type.predict = "expected")
> glance(cfit)
# A tibble: 1 × 18
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1   228    165          14.1    0.000857         13.7    0.00105           13.5
# ℹ 11 more variables: p.value.wald <dbl>, statistic.robust <dbl>,
#   p.value.robust <dbl>, r.squared <dbl>, r.squared.max <dbl>,
#   concordance <dbl>, std.error.concordance <dbl>, logLik <dbl>, AIC <dbl>,
#   BIC <dbl>, nobs <int>
> resp <- levels(logan$occupation)
> n <- nrow(logan)
> indx <- rep(1:n, length(resp))
> logan2 <- data.frame(logan[indx, ], id = indx, tocc = factor(rep(resp, 
+     each = n)))
> logan2$case <- (logan2$occupation == logan2$tocc)
> cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
> tidy(cl)
# A tibble: 9 × 5
  term                       estimate std.error statistic   p.value
  <chr>                         <dbl>     <dbl>     <dbl>     <dbl>
1 toccfarm                     -1.90     1.38       -1.37  1.70e- 1
2 toccoperatives                1.17     0.566       2.06  3.91e- 2
3 toccprofessional             -8.10     0.699     -11.6   4.45e-31
4 toccsales                    -5.03     0.770      -6.53  6.54e-11
5 tocccraftsmen:education      -0.332    0.0569     -5.84  5.13e- 9
6 toccfarm:education           -0.370    0.116      -3.18  1.47e- 3
7 toccoperatives:education     -0.422    0.0584     -7.23  4.98e-13
8 toccprofessional:education    0.278    0.0510      5.45  4.94e- 8
9 toccsales:education          NA        0          NA    NA       
> glance(cl)
# A tibble: 1 × 18
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1  4190    838          666.   1.90e-138         682.  5.01e-142           414.
# ℹ 11 more variables: p.value.wald <dbl>, statistic.robust <dbl>,
#   p.value.robust <dbl>, r.squared <dbl>, r.squared.max <dbl>,
#   concordance <dbl>, std.error.concordance <dbl>, logLik <dbl>, AIC <dbl>,
#   BIC <dbl>, nobs <int>
> library(ggplot2)
> ggplot(lp, aes(age, .fitted, color = sex)) + geom_point()
> ggplot(risks, aes(age, .fitted, color = sex)) + geom_point()
> ggplot(expected, aes(time, .fitted, color = sex)) + geom_point()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("tidy.crr")
> ### * tidy.crr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.crr
> ### Title: Tidy a(n) cmprsk object
> ### Aliases: tidy.crr cmprsk_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("cmprsk")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(cmprsk)
+ 
+ # time to loco-regional failure (lrf)
+ lrf_time <- rexp(100)
+ lrf_event <- sample(0:2, 100, replace = TRUE)
+ trt <- sample(0:1, 100, replace = TRUE)
+ strt <- sample(1:2, 100, replace = TRUE)
+ 
+ # fit model
+ x <- crr(lrf_time, lrf_event, cbind(trt, strt))
+ 
+ # summarize model fit with tidiers
+ tidy(x, conf.int = TRUE)
+ glance(x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.cv.glmnet")
> ### * tidy.cv.glmnet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.cv.glmnet
> ### Title: Tidy a(n) cv.glmnet object
> ### Aliases: tidy.cv.glmnet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("glmnet", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(glmnet)
+ 
+ set.seed(27)
+ 
+ nobs <- 100
+ nvar <- 50
+ real <- 5
+ 
+ x <- matrix(rnorm(nobs * nvar), nobs, nvar)
+ beta <- c(rnorm(real, 0, 1), rep(0, nvar - real))
+ y <- c(t(beta) %*% t(x)) + rnorm(nvar, sd = 3)
+ 
+ cvfit1 <- cv.glmnet(x, y)
+ 
+ tidy(cvfit1)
+ glance(cvfit1)
+ 
+ library(ggplot2)
+ 
+ tidied_cv <- tidy(cvfit1)
+ glance_cv <- glance(cvfit1)
+ 
+ # plot of MSE as a function of lambda
+ g <- ggplot(tidied_cv, aes(lambda, estimate)) +
+   geom_line() +
+   scale_x_log10()
+ g
+ 
+ # plot of MSE as a function of lambda with confidence ribbon
+ g <- g + geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+ g
+ 
+ # plot of MSE as a function of lambda with confidence ribbon and choices
+ # of minimum lambda marked
+ g <- g +
+   geom_vline(xintercept = glance_cv$lambda.min) +
+   geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+ g
+ 
+ # plot of number of zeros for each choice of lambda
+ ggplot(tidied_cv, aes(lambda, nzero)) +
+   geom_line() +
+   scale_x_log10()
+ 
+ # coefficient plot with min lambda shown
+ tidied <- tidy(cvfit1$glmnet.fit)
+ 
+ ggplot(tidied, aes(lambda, estimate, group = term)) +
+   scale_x_log10() +
+   geom_line() +
+   geom_vline(xintercept = glance_cv$lambda.min) +
+   geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+ ## Don't show: 
+ }) # examplesIf
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.1-8
> set.seed(27)
> nobs <- 100
> nvar <- 50
> real <- 5
> x <- matrix(rnorm(nobs * nvar), nobs, nvar)
> beta <- c(rnorm(real, 0, 1), rep(0, nvar - real))
> y <- c(t(beta) %*% t(x)) + rnorm(nvar, sd = 3)
> cvfit1 <- cv.glmnet(x, y)
> tidy(cvfit1)
# A tibble: 74 × 6
   lambda estimate std.error conf.low conf.high nzero
    <dbl>    <dbl>     <dbl>    <dbl>     <dbl> <int>
 1  1.45      17.4      2.28     15.1      19.7     0
 2  1.32      17.4      2.28     15.1      19.7     1
 3  1.20      17.2      2.22     15.0      19.5     1
 4  1.09      17.0      2.15     14.8      19.1     1
 5  0.997     16.8      2.09     14.7      18.9     1
 6  0.909     16.7      2.03     14.7      18.7     2
 7  0.828     16.7      1.99     14.7      18.6     3
 8  0.754     16.7      1.95     14.7      18.6     5
 9  0.687     16.8      1.93     14.8      18.7     7
10  0.626     16.9      1.91     15.0      18.8     7
# ℹ 64 more rows
> glance(cvfit1)
# A tibble: 1 × 3
  lambda.min lambda.1se  nobs
       <dbl>      <dbl> <int>
1      0.828       1.45   100
> library(ggplot2)
> tidied_cv <- tidy(cvfit1)
> glance_cv <- glance(cvfit1)
> g <- ggplot(tidied_cv, aes(lambda, estimate)) + geom_line() + scale_x_log10()
> g
> g <- g + geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.25)
> g
> g <- g + geom_vline(xintercept = glance_cv$lambda.min) + geom_vline(xintercept = glance_cv$lambda.1se, 
+     lty = 2)
> g
> ggplot(tidied_cv, aes(lambda, nzero)) + geom_line() + scale_x_log10()
> tidied <- tidy(cvfit1$glmnet.fit)
> ggplot(tidied, aes(lambda, estimate, group = term)) + scale_x_log10() + 
+     geom_line() + geom_vline(xintercept = glance_cv$lambda.min) + geom_vline(xintercept = glance_cv$lambda.1se, 
+     lty = 2)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:glmnet’, ‘package:Matrix’

> nameEx("tidy.dist")
> ### * tidy.dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.dist
> ### Title: (Deprecated) Tidy dist objects
> ### Aliases: tidy.dist
> 
> ### ** Examples
> 
> 
> cars_dist <- dist(t(mtcars[, 1:4]))
> cars_dist
            mpg        cyl       disp
cyl    89.32586                      
disp 1391.49546 1441.25177           
hp    824.37547  878.17652  656.64044
> 
> tidy(cars_dist)
# A tibble: 6 × 3
  item1 item2 distance
  <fct> <fct>    <dbl>
1 mpg   cyl       89.3
2 mpg   disp    1391. 
3 mpg   hp       824. 
4 cyl   disp    1441. 
5 cyl   hp       878. 
6 disp  hp       657. 
> tidy(cars_dist, upper = TRUE)
# A tibble: 12 × 3
   item1 item2 distance
   <fct> <fct>    <dbl>
 1 mpg   cyl       89.3
 2 mpg   disp    1391. 
 3 mpg   hp       824. 
 4 cyl   mpg       89.3
 5 cyl   disp    1441. 
 6 cyl   hp       878. 
 7 disp  mpg     1391. 
 8 disp  cyl     1441. 
 9 disp  hp       657. 
10 hp    mpg      824. 
11 hp    cyl      878. 
12 hp    disp     657. 
> tidy(cars_dist, diagonal = TRUE)
# A tibble: 10 × 3
   item1 item2 distance
   <fct> <fct>    <dbl>
 1 mpg   mpg        0  
 2 mpg   cyl       89.3
 3 mpg   disp    1391. 
 4 mpg   hp       824. 
 5 cyl   cyl        0  
 6 cyl   disp    1441. 
 7 cyl   hp       878. 
 8 disp  disp       0  
 9 disp  hp       657. 
10 hp    hp         0  
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.drc")
> ### * tidy.drc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.drc
> ### Title: Tidy a(n) drc object
> ### Aliases: tidy.drc drc_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("drc")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(drc)
+ 
+ # fit model
+ mod <- drm(dead / total ~ conc, type,
+   weights = total, data = selenium, fct = LL.2(), type = "binomial"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ 
+ glance(mod)
+ 
+ augment(mod, selenium)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.emmGrid")
> ### * tidy.emmGrid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.emmGrid
> ### Title: Tidy a(n) emmGrid object
> ### Aliases: tidy.emmGrid
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("emmeans", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(emmeans)
+ 
+ # linear model for sales of oranges per day
+ oranges_lm1 <- lm(sales1 ~ price1 + price2 + day + store, data = oranges)
+ 
+ # reference grid; see vignette("basics", package = "emmeans")
+ oranges_rg1 <- ref_grid(oranges_lm1)
+ td <- tidy(oranges_rg1)
+ td
+ 
+ # marginal averages
+ marginal <- emmeans(oranges_rg1, "day")
+ tidy(marginal)
+ 
+ # contrasts
+ tidy(contrast(marginal))
+ tidy(contrast(marginal, method = "pairwise"))
+ 
+ # plot confidence intervals
+ library(ggplot2)
+ 
+ ggplot(tidy(marginal, conf.int = TRUE), aes(day, estimate)) +
+   geom_point() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # by multiple prices
+ by_price <- emmeans(oranges_lm1, "day",
+   by = "price2",
+   at = list(
+     price1 = 50, price2 = c(40, 60, 80),
+     day = c("2", "3", "4")
+   )
+ )
+ 
+ by_price
+ 
+ tidy(by_price)
+ 
+ ggplot(tidy(by_price, conf.int = TRUE), aes(price2, estimate, color = day)) +
+   geom_line() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # joint_tests
+ tidy(joint_tests(oranges_lm1))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.epi.2by2")
> ### * tidy.epi.2by2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.epi.2by2
> ### Title: Tidy a(n) epi.2by2 object
> ### Aliases: tidy.epi.2by2 epiR_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("epiR")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(epiR)
+ 
+ # generate data
+ dat <- matrix(c(13, 2163, 5, 3349), nrow = 2, byrow = TRUE)
+ 
+ rownames(dat) <- c("DF+", "DF-")
+ colnames(dat) <- c("FUS+", "FUS-")
+ 
+ # fit model
+ fit <- epi.2by2(
+   dat = as.table(dat), method = "cross.sectional",
+   conf.level = 0.95, units = 100, outcome = "as.columns"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(fit, parameters = "moa")
+ tidy(fit, parameters = "stat")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.ergm")
> ### * tidy.ergm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ergm
> ### Title: Tidy a(n) ergm object
> ### Aliases: tidy.ergm ergm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ergm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ergm)
+ 
+ # load the Florentine marriage network data
+ data(florentine)
+ 
+ # fit a model where the propensity to form ties between
+ # families depends on the absolute difference in wealth
+ gest <- ergm(flomarriage ~ edges + absdiff("wealth"))
+ 
+ # show terms, coefficient estimates and errors
+ tidy(gest)
+ 
+ # show coefficients as odds ratios with a 99% CI
+ tidy(gest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.99)
+ 
+ # take a look at likelihood measures and other
+ # control parameters used during MCMC estimation
+ glance(gest)
+ glance(gest, deviance = TRUE)
+ glance(gest, mcmc = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.factanal")
> ### * tidy.factanal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.factanal
> ### Title: Tidy a(n) factanal object
> ### Aliases: tidy.factanal factanal_tidiers
> 
> ### ** Examples
> 
> 
> set.seed(123)
> 
> # generate data
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(purrr)
> 
> m1 <- tibble(
+   v1 = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 4, 5, 6),
+   v2 = c(1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 3, 4, 3, 3, 3, 4, 6, 5),
+   v3 = c(3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 6),
+   v4 = c(3, 3, 4, 3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 5, 6, 4),
+   v5 = c(1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 6, 4, 5),
+   v6 = c(1, 1, 1, 2, 1, 3, 3, 3, 4, 3, 1, 1, 1, 2, 1, 6, 5, 4)
+ )
> 
> # new data
> m2 <- map_dfr(m1, rev)
> 
> # factor analysis objects
> fit1 <- factanal(m1, factors = 3, scores = "Bartlett")
> fit2 <- factanal(m1, factors = 3, scores = "regression")
> 
> # tidying the object
> tidy(fit1)
# A tibble: 6 × 5
  variable uniqueness   fl1   fl2   fl3
  <chr>         <dbl> <dbl> <dbl> <dbl>
1 v1           0.005  0.944 0.182 0.267
2 v2           0.101  0.905 0.235 0.159
3 v3           0.005  0.236 0.210 0.946
4 v4           0.224  0.180 0.242 0.828
5 v5           0.0843 0.242 0.881 0.286
6 v6           0.005  0.193 0.959 0.196
> tidy(fit2)
# A tibble: 6 × 5
  variable uniqueness   fl1   fl2   fl3
  <chr>         <dbl> <dbl> <dbl> <dbl>
1 v1           0.005  0.944 0.182 0.267
2 v2           0.101  0.905 0.235 0.159
3 v3           0.005  0.236 0.210 0.946
4 v4           0.224  0.180 0.242 0.828
5 v5           0.0843 0.242 0.881 0.286
6 v6           0.005  0.193 0.959 0.196
> 
> # augmented dataframe
> augment(fit1)
# A tibble: 18 × 4
   .rownames   .fs1   .fs2   .fs3
   <chr>      <dbl>  <dbl>  <dbl>
 1 1         -0.904 -0.931  0.948
 2 2         -0.869 -0.933  0.935
 3 3         -0.908 -0.932  0.962
 4 4         -1.00  -0.253  0.818
 5 5         -0.904 -0.931  0.948
 6 6         -0.745  0.727 -0.788
 7 7         -0.710  0.725 -0.801
 8 8         -0.750  0.726 -0.774
 9 9         -0.808  1.40  -0.930
10 10        -0.745  0.727 -0.788
11 11         0.927 -0.931 -0.837
12 12         0.963 -0.933 -0.849
13 13         0.923 -0.932 -0.823
14 14         0.829 -0.253 -0.967
15 15         0.927 -0.931 -0.837
16 16         0.422  2.05   1.29 
17 17         1.47   1.29   0.545
18 18         1.88   0.309  1.95 
> augment(fit2)
# A tibble: 18 × 4
   .rownames   .fs1   .fs2   .fs3
   <chr>      <dbl>  <dbl>  <dbl>
 1 1         -0.897 -0.925  0.936
 2 2         -0.861 -0.927  0.924
 3 3         -0.901 -0.926  0.950
 4 4         -0.993 -0.251  0.809
 5 5         -0.897 -0.925  0.936
 6 6         -0.741  0.720 -0.784
 7 7         -0.706  0.718 -0.796
 8 8         -0.745  0.719 -0.770
 9 9         -0.803  1.39  -0.923
10 10        -0.741  0.720 -0.784
11 11         0.917 -0.925 -0.830
12 12         0.952 -0.927 -0.842
13 13         0.913 -0.926 -0.816
14 14         0.820 -0.252 -0.958
15 15         0.917 -0.925 -0.830
16 16         0.426  2.04   1.28 
17 17         1.46   1.29   0.548
18 18         1.88   0.314  1.95 
> 
> # augmented dataframe (with new data)
> augment(fit1, data = m2)
# A tibble: 18 × 10
   .rownames    v1    v2    v3    v4    v5    v6   .fs1   .fs2   .fs3
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>
 1 1             6     5     6     4     5     4 -0.904 -0.931  0.948
 2 2             5     6     4     6     4     5 -0.869 -0.933  0.935
 3 3             4     4     5     5     6     6 -0.908 -0.932  0.962
 4 4             3     3     1     1     1     1 -1.00  -0.253  0.818
 5 5             3     3     1     1     1     2 -0.904 -0.931  0.948
 6 6             3     3     1     2     1     1 -0.745  0.727 -0.788
 7 7             3     4     1     1     1     1 -0.710  0.725 -0.801
 8 8             3     3     1     1     1     1 -0.750  0.726 -0.774
 9 9             1     1     1     1     3     3 -0.808  1.40  -0.930
10 10            1     2     1     1     3     4 -0.745  0.727 -0.788
11 11            1     1     1     2     3     3  0.927 -0.931 -0.837
12 12            1     2     1     1     3     3  0.963 -0.933 -0.849
13 13            1     1     1     1     3     3  0.923 -0.932 -0.823
14 14            1     1     3     3     1     1  0.829 -0.253 -0.967
15 15            1     1     3     3     1     2  0.927 -0.931 -0.837
16 16            1     1     3     4     1     1  0.422  2.05   1.29 
17 17            1     2     3     3     1     1  1.47   1.29   0.545
18 18            1     1     3     3     1     1  1.88   0.309  1.95 
> augment(fit2, data = m2)
# A tibble: 18 × 10
   .rownames    v1    v2    v3    v4    v5    v6   .fs1   .fs2   .fs3
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>  <dbl>
 1 1             6     5     6     4     5     4 -0.897 -0.925  0.936
 2 2             5     6     4     6     4     5 -0.861 -0.927  0.924
 3 3             4     4     5     5     6     6 -0.901 -0.926  0.950
 4 4             3     3     1     1     1     1 -0.993 -0.251  0.809
 5 5             3     3     1     1     1     2 -0.897 -0.925  0.936
 6 6             3     3     1     2     1     1 -0.741  0.720 -0.784
 7 7             3     4     1     1     1     1 -0.706  0.718 -0.796
 8 8             3     3     1     1     1     1 -0.745  0.719 -0.770
 9 9             1     1     1     1     3     3 -0.803  1.39  -0.923
10 10            1     2     1     1     3     4 -0.741  0.720 -0.784
11 11            1     1     1     2     3     3  0.917 -0.925 -0.830
12 12            1     2     1     1     3     3  0.952 -0.927 -0.842
13 13            1     1     1     1     3     3  0.913 -0.926 -0.816
14 14            1     1     3     3     1     1  0.820 -0.252 -0.958
15 15            1     1     3     3     1     2  0.917 -0.925 -0.830
16 16            1     1     3     4     1     1  0.426  2.04   1.28 
17 17            1     2     3     3     1     1  1.46   1.29   0.548
18 18            1     1     3     3     1     1  1.88   0.314  1.95 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:purrr’, ‘package:dplyr’

> nameEx("tidy.felm")
> ### * tidy.felm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.felm
> ### Title: Tidy a(n) felm object
> ### Aliases: tidy.felm felm_tidiers lfe_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lfe")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lfe)
+ 
+ # use built-in `airquality` dataset
+ head(airquality)
+ 
+ # no FEs; same as lm()
+ est0 <- felm(Ozone ~ Temp + Wind + Solar.R, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est0)
+ augment(est0)
+ 
+ # add month fixed effects
+ est1 <- felm(Ozone ~ Temp + Wind + Solar.R | Month, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est1)
+ tidy(est1, fe = TRUE)
+ augment(est1)
+ glance(est1)
+ 
+ # the "se.type" argument can be used to switch out different standard errors
+ # types on the fly. In turn, this can be useful exploring the effect of
+ # different error structures on model inference.
+ tidy(est1, se.type = "iid")
+ tidy(est1, se.type = "robust")
+ 
+ # add clustered SEs (also by month)
+ est2 <- felm(Ozone ~ Temp + Wind + Solar.R | Month | 0 | Month, airquality)
+ 
+ # summarize model fit with tidiers
+ tidy(est2, conf.int = TRUE)
+ tidy(est2, conf.int = TRUE, se.type = "cluster")
+ tidy(est2, conf.int = TRUE, se.type = "robust")
+ tidy(est2, conf.int = TRUE, se.type = "iid")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.fitdistr")
> ### * tidy.fitdistr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.fitdistr
> ### Title: Tidy a(n) fitdistr object
> ### Aliases: tidy.fitdistr fitdistr_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # generate data
+ set.seed(2015)
+ x <- rnorm(100, 5, 2)
+ 
+ #  fit models
+ fit <- fitdistr(x, dnorm, list(mean = 3, sd = 1))
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ glance(fit)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> set.seed(2015)
> x <- rnorm(100, 5, 2)
> fit <- fitdistr(x, dnorm, list(mean = 3, sd = 1))
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
> tidy(fit)
# A tibble: 2 × 3
  term  estimate std.error
  <chr>    <dbl>     <dbl>
1 mean      4.90     0.201
2 sd        2.01     0.142
> glance(fit)
# A tibble: 1 × 4
  logLik      AIC   BIC  nobs
  <logLik>  <dbl> <dbl> <int>
1 -211.6533  427.  433.   100
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("tidy.fixest")
> ### * tidy.fixest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.fixest
> ### Title: Tidy a(n) fixest object
> ### Aliases: tidy.fixest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("fixest") & !broom:::is_cran_check()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(fixest)
+ 
+ gravity <-
+   feols(
+     log(Euros) ~ log(dist_km) | Origin + Destination + Product + Year, trade
+   )
+ 
+ tidy(gravity)
+ glance(gravity)
+ augment(gravity, trade)
+ 
+ # to get robust or clustered SEs, users can either:
+ 
+ # 1) specify the arguments directly in the `tidy()` call
+ 
+ tidy(gravity, conf.int = TRUE, cluster = c("Product", "Year"))
+ 
+ tidy(gravity, conf.int = TRUE, se = "threeway")
+ 
+ # 2) or, feed tidy() a summary.fixest object that has already accepted
+ # these arguments
+ 
+ gravity_summ <- summary(gravity, cluster = c("Product", "Year"))
+ 
+ tidy(gravity_summ, conf.int = TRUE)
+ 
+ # approach (1) is preferred.
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.gam")
> ### * tidy.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.gam
> ### Title: Tidy a(n) gam object
> ### Aliases: tidy.gam mgcv_tidiers gam_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mgcv")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mgcv)
+ 
+ # fit model
+ g <- gam(mpg ~ s(hp) + am + qsec, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(g)
+ tidy(g, parametric = TRUE)
+ glance(g)
+ augment(g)
+ ## Don't show: 
+ }) # examplesIf
> library(mgcv)
Loading required package: nlme
This is mgcv 1.9-1. For overview type 'help("mgcv-package")'.
> g <- gam(mpg ~ s(hp) + am + qsec, data = mtcars)
> tidy(g)
# A tibble: 1 × 5
  term    edf ref.df statistic p.value
  <chr> <dbl>  <dbl>     <dbl>   <dbl>
1 s(hp)  2.36   3.02      6.34 0.00218
> tidy(g, parametric = TRUE)
# A tibble: 3 × 5
  term        estimate std.error statistic p.value
  <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 (Intercept)  16.7        9.83      1.70  0.101  
2 am            4.37       1.56      2.81  0.00918
3 qsec          0.0904     0.525     0.172 0.865  
> glance(g)
# A tibble: 1 × 9
     df logLik   AIC   BIC deviance df.residual  nobs adj.r.squared  npar
  <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl> <int>         <dbl> <int>
1  5.36  -74.4  162.  171.     196.        26.6    32         0.797    12
> augment(g)
# A tibble: 32 × 11
   .rownames          mpg    am  qsec    hp .fitted .se.fit .resid   .hat .sigma
   <chr>            <dbl> <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl> <lgl> 
 1 Mazda RX4         21       1  16.5   110    24.3   1.03  -3.25  0.145  NA    
 2 Mazda RX4 Wag     21       1  17.0   110    24.3   0.925 -3.30  0.116  NA    
 3 Datsun 710        22.8     1  18.6    93    26.0   0.894 -3.22  0.109  NA    
 4 Hornet 4 Drive    21.4     0  19.4   110    20.2   0.827  1.25  0.0930 NA    
 5 Hornet Sportabo…  18.7     0  17.0   175    15.7   0.815  3.02  0.0902 NA    
 6 Valiant           18.1     0  20.2   105    20.7   0.914 -2.56  0.113  NA    
 7 Duster 360        14.3     0  15.8   245    12.7   1.11   1.63  0.167  NA    
 8 Merc 240D         24.4     0  20      62    25.0   1.45  -0.618 0.287  NA    
 9 Merc 230          22.8     0  22.9    95    21.8   1.81   0.959 0.446  NA    
10 Merc 280          19.2     0  18.3   123    19.0   0.864  0.211 0.102  NA    
# ℹ 22 more rows
# ℹ 1 more variable: .cooksd <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("tidy.garch")
> ### * tidy.garch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.garch
> ### Title: Tidy a(n) garch object
> ### Aliases: tidy.garch garch_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("tseries")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(tseries)
+ 
+ # load data
+ data(EuStockMarkets)
+ 
+ # fit model
+ dax <- diff(log(EuStockMarkets))[, "DAX"]
+ dax.garch <- garch(dax)
+ dax.garch
+ 
+ # summarize model fit with tidiers
+ tidy(dax.garch)
+ glance(dax.garch)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.geeglm")
> ### * tidy.geeglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.geeglm
> ### Title: Tidy a(n) geeglm object
> ### Aliases: tidy.geeglm geeglm_tidiers geepack_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("geepack")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(geepack)
+ 
+ # load data
+ data(state)
+ 
+ 
+ ds <- data.frame(state.region, state.x77)
+ 
+ # fit model
+ geefit <- geeglm(Income ~ Frost + Murder,
+   id = state.region,
+   data = ds,
+   corstr = "exchangeable"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(geefit)
+ tidy(geefit, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.glht")
> ### * tidy.glht
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glht
> ### Title: Tidy a(n) glht object
> ### Aliases: tidy.glht multcomp_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("multcomp", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(multcomp)
+ library(ggplot2)
+ 
+ amod <- aov(breaks ~ wool + tension, data = warpbreaks)
+ wht <- glht(amod, linfct = mcp(tension = "Tukey"))
+ 
+ tidy(wht)
+ 
+ ggplot(wht, aes(lhs, estimate)) +
+   geom_point()
+ 
+ CI <- confint(wht)
+ 
+ tidy(CI)
+ 
+ ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
+   geom_pointrange()
+ 
+ tidy(summary(wht))
+ ggplot(mapping = aes(lhs, estimate)) +
+   geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
+   geom_point(aes(size = p), data = summary(wht)) +
+   scale_size(trans = "reverse")
+ 
+ cld <- cld(wht)
+ tidy(cld)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.glmRob")
> ### * tidy.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glmRob
> ### Title: Tidy a(n) glmRob object
> ### Aliases: tidy.glmRob
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("robust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(robust)
+ 
+ # fit model
+ gm <- glmRob(am ~ wt, data = mtcars, family = "binomial")
+ 
+ # summarize model fit with tidiers
+ tidy(gm)
+ glance(gm)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.glmnet")
> ### * tidy.glmnet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glmnet
> ### Title: Tidy a(n) glmnet object
> ### Aliases: tidy.glmnet glmnet_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("glmnet", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(glmnet)
+ 
+ set.seed(2014)
+ x <- matrix(rnorm(100 * 20), 100, 20)
+ y <- rnorm(100)
+ fit1 <- glmnet(x, y)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(fit1)
+ glance(fit1)
+ 
+ library(dplyr)
+ library(ggplot2)
+ 
+ tidied <- tidy(fit1) %>% filter(term != "(Intercept)")
+ 
+ ggplot(tidied, aes(step, estimate, group = term)) +
+   geom_line()
+ 
+ ggplot(tidied, aes(lambda, estimate, group = term)) +
+   geom_line() +
+   scale_x_log10()
+ 
+ ggplot(tidied, aes(lambda, dev.ratio)) +
+   geom_line()
+ 
+ # works for other types of regressions as well, such as logistic
+ g2 <- sample(1:2, 100, replace = TRUE)
+ fit2 <- glmnet(x, g2, family = "binomial")
+ tidy(fit2)
+ ## Don't show: 
+ }) # examplesIf
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.1-8
> set.seed(2014)
> x <- matrix(rnorm(100 * 20), 100, 20)
> y <- rnorm(100)
> fit1 <- glmnet(x, y)
> tidy(fit1)
# A tibble: 1,086 × 5
   term         step estimate lambda dev.ratio
   <chr>       <dbl>    <dbl>  <dbl>     <dbl>
 1 (Intercept)     1   -0.207 0.152    0      
 2 (Intercept)     2   -0.208 0.139    0.00464
 3 (Intercept)     3   -0.209 0.127    0.0111 
 4 (Intercept)     4   -0.210 0.115    0.0165 
 5 (Intercept)     5   -0.210 0.105    0.0240 
 6 (Intercept)     6   -0.210 0.0957   0.0321 
 7 (Intercept)     7   -0.210 0.0872   0.0412 
 8 (Intercept)     8   -0.210 0.0795   0.0497 
 9 (Intercept)     9   -0.209 0.0724   0.0593 
10 (Intercept)    10   -0.208 0.0660   0.0682 
# ℹ 1,076 more rows
> glance(fit1)
# A tibble: 1 × 3
  nulldev npasses  nobs
    <dbl>   <int> <int>
1    104.     255   100
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> tidied <- tidy(fit1) %>% filter(term != "(Intercept)")
> ggplot(tidied, aes(step, estimate, group = term)) + geom_line()
> ggplot(tidied, aes(lambda, estimate, group = term)) + geom_line() + scale_x_log10()
> ggplot(tidied, aes(lambda, dev.ratio)) + geom_line()
> g2 <- sample(1:2, 100, replace = TRUE)
> fit2 <- glmnet(x, g2, family = "binomial")
> tidy(fit2)
# A tibble: 947 × 5
   term         step estimate lambda dev.ratio
   <chr>       <dbl>    <dbl>  <dbl>     <dbl>
 1 (Intercept)     1    0.282 0.0906 -1.62e-15
 2 (Intercept)     2    0.281 0.0826  6.28e- 3
 3 (Intercept)     3    0.279 0.0753  1.55e- 2
 4 (Intercept)     4    0.277 0.0686  2.48e- 2
 5 (Intercept)     5    0.284 0.0625  4.17e- 2
 6 (Intercept)     6    0.293 0.0569  5.79e- 2
 7 (Intercept)     7    0.303 0.0519  7.39e- 2
 8 (Intercept)     8    0.314 0.0473  8.94e- 2
 9 (Intercept)     9    0.325 0.0431  1.03e- 1
10 (Intercept)    10    0.336 0.0392  1.14e- 1
# ℹ 937 more rows
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’, ‘package:glmnet’,
  ‘package:Matrix’

> nameEx("tidy.gmm")
> ### * tidy.gmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.gmm
> ### Title: Tidy a(n) gmm object
> ### Aliases: tidy.gmm gmm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("gmm", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(gmm)
+ 
+ # examples come from the "gmm" package
+ # CAPM test with GMM
+ data(Finance)
+ r <- Finance[1:300, 1:10]
+ rm <- Finance[1:300, "rm"]
+ rf <- Finance[1:300, "rf"]
+ 
+ z <- as.matrix(r - rf)
+ t <- nrow(z)
+ zm <- rm - rf
+ h <- matrix(zm, t, 1)
+ res <- gmm(z ~ zm, x = h)
+ 
+ # tidy result
+ tidy(res)
+ tidy(res, conf.int = TRUE)
+ tidy(res, conf.int = TRUE, conf.level = .99)
+ 
+ # coefficient plot
+ library(ggplot2)
+ library(dplyr)
+ 
+ tidy(res, conf.int = TRUE) %>%
+   mutate(variable = reorder(term, estimate)) %>%
+   ggplot(aes(estimate, variable)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+   geom_vline(xintercept = 0, color = "red", lty = 2)
+ 
+ # from a function instead of a matrix
+ g <- function(theta, x) {
+   e <- x[, 2:11] - theta[1] - (x[, 1] - theta[1]) %*% matrix(theta[2:11], 1, 10)
+   gmat <- cbind(e, e * c(x[, 1]))
+   return(gmat)
+ }
+ 
+ x <- as.matrix(cbind(rm, r))
+ res_black <- gmm(g, x = x, t0 = rep(0, 11))
+ 
+ tidy(res_black)
+ tidy(res_black, conf.int = TRUE)
+ 
+ # APT test with Fama-French factors and GMM
+ 
+ f1 <- zm
+ f2 <- Finance[1:300, "hml"] - rf
+ f3 <- Finance[1:300, "smb"] - rf
+ h <- cbind(f1, f2, f3)
+ res2 <- gmm(z ~ f1 + f2 + f3, x = h)
+ 
+ td2 <- tidy(res2, conf.int = TRUE)
+ td2
+ 
+ # coefficient plot
+ td2 %>%
+   mutate(variable = reorder(term, estimate)) %>%
+   ggplot(aes(estimate, variable)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+   geom_vline(xintercept = 0, color = "red", lty = 2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.htest")
> ### * tidy.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.htest
> ### Title: Tidy/glance a(n) htest object
> ### Aliases: tidy.htest htest_tidiers glance.htest
> 
> ### ** Examples
> 
> 
> tt <- t.test(rnorm(10))
> 
> tidy(tt)
# A tibble: 1 × 8
  estimate statistic p.value parameter conf.low conf.high method     alternative
     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      
1    0.132     0.536   0.605         9   -0.426     0.691 One Sampl… two.sided  
> 
> # the glance output will be the same for each of the below tests
> glance(tt)
# A tibble: 1 × 8
  estimate statistic p.value parameter conf.low conf.high method     alternative
     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      
1    0.132     0.536   0.605         9   -0.426     0.691 One Sampl… two.sided  
> 
> tt <- t.test(mpg ~ am, data = mtcars)
> 
> tidy(tt)
# A tibble: 1 × 10
  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high
     <dbl>     <dbl>     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl>
1    -7.24      17.1      24.4     -3.77 0.00137      18.3    -11.3     -3.21
# ℹ 2 more variables: method <chr>, alternative <chr>
> 
> wt <- wilcox.test(mpg ~ am, data = mtcars, conf.int = TRUE, exact = FALSE)
> 
> tidy(wt)
# A tibble: 1 × 7
  estimate statistic p.value conf.low conf.high method               alternative
     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> <chr>                <chr>      
1    -6.80        42 0.00187    -11.7     -2.90 Wilcoxon rank sum t… two.sided  
> 
> ct <- cor.test(mtcars$wt, mtcars$mpg)
> 
> tidy(ct)
# A tibble: 1 × 8
  estimate statistic  p.value parameter conf.low conf.high method    alternative
     <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl> <chr>     <chr>      
1   -0.868     -9.56 1.29e-10        30   -0.934    -0.744 Pearson'… two.sided  
> 
> chit <- chisq.test(xtabs(Freq ~ Sex + Class, data = as.data.frame(Titanic)))
> 
> tidy(chit)
# A tibble: 1 × 4
  statistic  p.value parameter method                    
      <dbl>    <dbl>     <int> <chr>                     
1      350. 1.56e-75         3 Pearson's Chi-squared test
> augment(chit)
# A tibble: 8 × 9
  Sex    Class .observed  .prop .row.prop .col.prop .expected .resid .std.resid
  <fct>  <fct>     <dbl>  <dbl>     <dbl>     <dbl>     <dbl>  <dbl>      <dbl>
1 Male   1st         180 0.0818    0.104     0.554      256.   -4.73     -11.1 
2 Female 1st         145 0.0659    0.309     0.446       69.4   9.07      11.1 
3 Male   2nd         179 0.0813    0.103     0.628      224.   -3.02      -6.99
4 Female 2nd         106 0.0482    0.226     0.372       60.9   5.79       6.99
5 Male   3rd         510 0.232     0.295     0.722      555.   -1.92      -5.04
6 Female 3rd         196 0.0891    0.417     0.278      151.    3.68       5.04
7 Male   Crew        862 0.392     0.498     0.974      696.    6.29      17.6 
8 Female Crew         23 0.0104    0.0489    0.0260     189.  -12.1      -17.6 
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.ivreg")
> ### * tidy.ivreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ivreg
> ### Title: Tidy a(n) ivreg object
> ### Aliases: tidy.ivreg ivreg_tidiers aer_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("AER")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(AER)
+ 
+ # load data
+ data("CigarettesSW", package = "AER")
+ 
+ # fit model
+ ivr <- ivreg(
+   log(packs) ~ income | population,
+   data = CigarettesSW,
+   subset = year == "1995"
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(ivr)
+ tidy(ivr, conf.int = TRUE)
+ tidy(ivr, conf.int = TRUE, instruments = TRUE)
+ 
+ augment(ivr)
+ augment(ivr, data = CigarettesSW)
+ augment(ivr, newdata = CigarettesSW)
+ 
+ glance(ivr)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.kappa")
> ### * tidy.kappa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.kappa
> ### Title: Tidy a(n) kappa object
> ### Aliases: tidy.kappa kappa_tidiers psych_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("psych", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(psych)
+ 
+ # generate example data
+ rater1 <- 1:9
+ rater2 <- c(1, 3, 1, 6, 1, 5, 5, 6, 7)
+ 
+ # fit model
+ ck <- cohen.kappa(cbind(rater1, rater2))
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(ck)
+ 
+ # graph the confidence intervals
+ library(ggplot2)
+ 
+ ggplot(tidy(ck), aes(estimate, type)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.kde")
> ### * tidy.kde
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.kde
> ### Title: Tidy a(n) kde object
> ### Aliases: tidy.kde kde_tidiers ks_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("ks", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(ks)
+ 
+ # generate data
+ dat <- replicate(2, rnorm(100))
+ k <- kde(dat)
+ 
+ # summarize model fit with tidiers + visualization
+ td <- tidy(k)
+ td
+ 
+ library(ggplot2)
+ library(dplyr)
+ library(tidyr)
+ 
+ td %>%
+   pivot_wider(c(obs, estimate),
+     names_from = variable,
+     values_from = value
+   ) %>%
+   ggplot(aes(x1, x2, fill = estimate)) +
+   geom_tile() +
+   theme_void()
+ 
+ # also works with 3 dimensions
+ dat3 <- replicate(3, rnorm(100))
+ k3 <- kde(dat3)
+ 
+ td3 <- tidy(k3)
+ td3
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.kmeans")
> ### * tidy.kmeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.kmeans
> ### Title: Tidy a(n) kmeans object
> ### Aliases: tidy.kmeans kmeans_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("cluster", "modeldata")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(cluster)
+ library(modeldata)
+ library(dplyr)
+ 
+ data(hpc_data)
+ 
+ x <- hpc_data[, 2:5]
+ 
+ fit <- pam(x, k = 4)
+ 
+ tidy(fit)
+ glance(fit)
+ augment(fit, x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.lavaan")
> ### * tidy.lavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lavaan
> ### Title: Tidy a(n) lavaan object
> ### Aliases: tidy.lavaan lavaan_tidiers sem_tidiers cfa_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lavaan")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lavaan)
+ 
+ cfa.fit <- cfa("F =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9",
+   data = HolzingerSwineford1939, group = "school"
+ )
+ 
+ tidy(cfa.fit)
+ ## Don't show: 
+ }) # examplesIf
> library(lavaan)
This is lavaan 0.6-18
lavaan is FREE software! Please report any bugs.
> cfa.fit <- cfa("F =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9", data = HolzingerSwineford1939, 
+     group = "school")
> tidy(cfa.fit)
# A tibble: 58 × 10
   term   op    block group estimate std.error statistic  p.value std.lv std.all
   <chr>  <chr> <int> <int>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>   <dbl>
 1 F =~ … =~        1     1    1         0         NA    NA        0.567   0.480
 2 F =~ … =~        1     1    0.333     0.190      1.76  7.89e-2  0.189   0.154
 3 F =~ … =~        1     1    0.400     0.182      2.20  2.80e-2  0.227   0.196
 4 F =~ … =~        1     1    1.66      0.280      5.92  3.28e-9  0.941   0.819
 5 F =~ … =~        1     1    1.92      0.323      5.95  2.60e-9  1.09    0.835
 6 F =~ … =~        1     1    1.48      0.247      5.98  2.23e-9  0.837   0.848
 7 F =~ … =~        1     1    0.453     0.173      2.61  8.96e-3  0.257   0.238
 8 F =~ … =~        1     1    0.376     0.155      2.43  1.51e-2  0.213   0.219
 9 F =~ … =~        1     1    0.422     0.159      2.66  7.80e-3  0.240   0.242
10 x1 ~~… ~~        1     1    1.07      0.127      8.47  0        1.07    0.769
# ℹ 48 more rows
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:lavaan’

> nameEx("tidy.lm")
> ### * tidy.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lm
> ### Title: Tidy a(n) lm object
> ### Aliases: tidy.lm lm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(ggplot2)
+ library(dplyr)
+ 
+ mod <- lm(mpg ~ wt + qsec, data = mtcars)
+ 
+ tidy(mod)
+ glance(mod)
+ 
+ # coefficient plot
+ d <- tidy(mod, conf.int = TRUE)
+ 
+ ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) +
+   geom_point() +
+   geom_vline(xintercept = 0, lty = 4) +
+   geom_errorbarh()
+ 
+ # aside: There are tidy() and glance() methods for lm.summary objects too.
+ # this can be useful when you want to conserve memory by converting large lm
+ # objects into their leaner summary.lm equivalents.
+ s <- summary(mod)
+ tidy(s, conf.int = TRUE)
+ glance(s)
+ 
+ augment(mod)
+ augment(mod, mtcars, interval = "confidence")
+ 
+ # predict on new data
+ newdata <- mtcars %>%
+   head(6) %>%
+   mutate(wt = wt + 1)
+ augment(mod, newdata = newdata)
+ 
+ # ggplot2 example where we also construct 95% prediction interval
+ 
+ # simpler bivariate model since we're plotting in 2D
+ mod2 <- lm(mpg ~ wt, data = mtcars)
+ 
+ au <- augment(mod2, newdata = newdata, interval = "prediction")
+ 
+ ggplot(au, aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted)) +
+   geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
+ 
+ # predict on new data without outcome variable. Output does not include .resid
+ newdata <- newdata %>%
+   select(-mpg)
+ 
+ augment(mod, newdata = newdata)
+ 
+ au <- augment(mod, data = mtcars)
+ 
+ ggplot(au, aes(.hat, .std.resid)) +
+   geom_vline(size = 2, colour = "white", xintercept = 0) +
+   geom_hline(size = 2, colour = "white", yintercept = 0) +
+   geom_point() +
+   geom_smooth(se = FALSE)
+ 
+ plot(mod, which = 6)
+ 
+ ggplot(au, aes(.hat, .cooksd)) +
+   geom_vline(xintercept = 0, colour = NA) +
+   geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
+   geom_smooth(se = FALSE) +
+   geom_point()
+ 
+ # column-wise models
+ a <- matrix(rnorm(20), nrow = 10)
+ b <- a + rnorm(length(a))
+ result <- lm(b ~ a)
+ 
+ tidy(result)
+ ## Don't show: 
+ }) # examplesIf
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> mod <- lm(mpg ~ wt + qsec, data = mtcars)
> tidy(mod)
# A tibble: 3 × 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4
2 wt            -5.05      0.484    -10.4  2.52e-11
3 qsec           0.929     0.265      3.51 1.50e- 3
> glance(mod)
# A tibble: 1 × 12
  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2  -74.4  157.  163.
# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>
> d <- tidy(mod, conf.int = TRUE)
> ggplot(d, aes(estimate, term, xmin = conf.low, xmax = conf.high, height = 0)) + 
+     geom_point() + geom_vline(xintercept = 0, lty = 4) + geom_errorbarh()
> s <- summary(mod)
> tidy(s, conf.int = TRUE)
# A tibble: 3 × 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4    9.00      30.5 
2 wt            -5.05      0.484    -10.4  2.52e-11   -6.04      -4.06
3 qsec           0.929     0.265      3.51 1.50e- 3    0.387      1.47
> glance(s)
# A tibble: 1 × 8
  r.squared adj.r.squared sigma statistic  p.value    df df.residual  nobs
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>       <int> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2          29    32
> augment(mod)
# A tibble: 32 × 10
   .rownames    mpg    wt  qsec .fitted  .resid   .hat .sigma .cooksd .std.resid
   <chr>      <dbl> <dbl> <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl>
 1 Mazda RX4   21    2.62  16.5    21.8 -0.815  0.0693   2.64 2.63e-3    -0.325 
 2 Mazda RX4…  21    2.88  17.0    21.0 -0.0482 0.0444   2.64 5.59e-6    -0.0190
 3 Datsun 710  22.8  2.32  18.6    25.3 -2.53   0.0607   2.60 2.17e-2    -1.00  
 4 Hornet 4 …  21.4  3.22  19.4    21.6 -0.181  0.0576   2.64 1.05e-4    -0.0716
 5 Hornet Sp…  18.7  3.44  17.0    18.2  0.504  0.0389   2.64 5.29e-4     0.198 
 6 Valiant     18.1  3.46  20.2    21.1 -2.97   0.0957   2.58 5.10e-2    -1.20  
 7 Duster 360  14.3  3.57  15.8    16.4 -2.14   0.0729   2.61 1.93e-2    -0.857 
 8 Merc 240D   24.4  3.19  20      22.2  2.17   0.0791   2.61 2.18e-2     0.872 
 9 Merc 230    22.8  3.15  22.9    25.1 -2.32   0.295    2.59 1.59e-1    -1.07  
10 Merc 280    19.2  3.44  18.3    19.4 -0.185  0.0358   2.64 6.55e-5    -0.0728
# ℹ 22 more rows
> augment(mod, mtcars, interval = "confidence")
# A tibble: 32 × 20
   .rownames     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 8 more variables: .fitted <dbl>, .lower <dbl>, .upper <dbl>, .resid <dbl>,
#   .hat <dbl>, .sigma <dbl>, .cooksd <dbl>, .std.resid <dbl>
> newdata <- mtcars %>% head(6) %>% mutate(wt = wt + 1)
> augment(mod, newdata = newdata)
# A tibble: 6 × 14
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 2 more variables: .fitted <dbl>, .resid <dbl>
> mod2 <- lm(mpg ~ wt, data = mtcars)
> au <- augment(mod2, newdata = newdata, interval = "prediction")
> ggplot(au, aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted)) + 
+     geom_ribbon(aes(ymin = .lower, ymax = .upper), col = NA, alpha = 0.3)
> newdata <- newdata %>% select(-mpg)
> augment(mod, newdata = newdata)
# A tibble: 6 × 12
  .rownames    cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
  <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
1 Mazda RX4      6   160   110  3.9   3.62  16.5     0     1     4     4    16.8
2 Mazda RX4…     6   160   110  3.9   3.88  17.0     0     1     4     4    16.0
3 Datsun 710     4   108    93  3.85  3.32  18.6     1     1     4     1    20.3
4 Hornet 4 …     6   258   110  3.08  4.22  19.4     1     0     3     1    16.5
5 Hornet Sp…     8   360   175  3.15  4.44  17.0     0     0     3     2    13.1
6 Valiant        6   225   105  2.76  4.46  20.2     1     0     3     1    16.0
> au <- augment(mod, data = mtcars)
> ggplot(au, aes(.hat, .std.resid)) + geom_vline(size = 2, colour = "white", 
+     xintercept = 0) + geom_hline(size = 2, colour = "white", yintercept = 0) + geom_point() + 
+     geom_smooth(se = FALSE)
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> plot(mod, which = 6)
> ggplot(au, aes(.hat, .cooksd)) + geom_vline(xintercept = 0, colour = NA) + 
+     geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") + geom_smooth(se = FALSE) + 
+     geom_point()
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> a <- matrix(rnorm(20), nrow = 10)
> b <- a + rnorm(length(a))
> result <- lm(b ~ a)
> tidy(result)
# A tibble: 6 × 6
  response term        estimate std.error statistic p.value
  <chr>    <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 Y1       (Intercept)   -0.128     0.219    -0.585 0.577  
2 Y1       a1             0.303     0.299     1.02  0.343  
3 Y1       a2             0.348     0.218     1.60  0.154  
4 Y2       (Intercept)    0.131     0.300     0.437 0.676  
5 Y2       a1            -0.215     0.408    -0.527 0.614  
6 Y2       a2             1.07      0.298     3.61  0.00867
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’

> nameEx("tidy.lm.beta")
> ### * tidy.lm.beta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lm.beta
> ### Title: Tidy a(n) lm.beta object
> ### Aliases: tidy.lm.beta
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("lm.beta")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lm.beta)
+ 
+ # fit models
+ mod <- stats::lm(speed ~ ., data = cars)
+ std <- lm.beta(mod)
+ 
+ # summarize model fit with tidiers
+ tidy(std, conf.int = TRUE)
+ 
+ # generate data
+ ctl <- c(4.17, 5.58, 5.18, 6.11, 4.50, 4.61, 5.17, 4.53, 5.33, 5.14)
+ trt <- c(4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69)
+ group <- gl(2, 10, 20, labels = c("Ctl", "Trt"))
+ weight <- c(ctl, trt)
+ 
+ # fit models
+ mod2 <- lm(weight ~ group)
+ std2 <- lm.beta(mod2)
+ 
+ # summarize model fit with tidiers
+ tidy(std2, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.lmRob")
> ### * tidy.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lmRob
> ### Title: Tidy a(n) lmRob object
> ### Aliases: tidy.lmRob robust_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("robust")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(robust)
+ 
+ # fit model
+ m <- lmRob(mpg ~ wt, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.lmodel2")
> ### * tidy.lmodel2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lmodel2
> ### Title: Tidy a(n) lmodel2 object
> ### Aliases: tidy.lmodel2 lmodel2_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("lmodel2", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(lmodel2)
+ 
+ data(mod2ex2)
+ Ex2.res <- lmodel2(Prey ~ Predators, data = mod2ex2, "relative", "relative", 99)
+ Ex2.res
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(Ex2.res)
+ glance(Ex2.res)
+ 
+ # this allows coefficient plots with ggplot2
+ library(ggplot2)
+ 
+ ggplot(tidy(Ex2.res), aes(estimate, term, color = method)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.lsmobj")
> ### * tidy.lsmobj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lsmobj
> ### Title: Tidy a(n) lsmobj object
> ### Aliases: tidy.lsmobj emmeans_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("emmeans", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(emmeans)
+ 
+ # linear model for sales of oranges per day
+ oranges_lm1 <- lm(sales1 ~ price1 + price2 + day + store, data = oranges)
+ 
+ # reference grid; see vignette("basics", package = "emmeans")
+ oranges_rg1 <- ref_grid(oranges_lm1)
+ td <- tidy(oranges_rg1)
+ td
+ 
+ # marginal averages
+ marginal <- emmeans(oranges_rg1, "day")
+ tidy(marginal)
+ 
+ # contrasts
+ tidy(contrast(marginal))
+ tidy(contrast(marginal, method = "pairwise"))
+ 
+ # plot confidence intervals
+ library(ggplot2)
+ 
+ ggplot(tidy(marginal, conf.int = TRUE), aes(day, estimate)) +
+   geom_point() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # by multiple prices
+ by_price <- emmeans(oranges_lm1, "day",
+   by = "price2",
+   at = list(
+     price1 = 50, price2 = c(40, 60, 80),
+     day = c("2", "3", "4")
+   )
+ )
+ 
+ by_price
+ 
+ tidy(by_price)
+ 
+ ggplot(tidy(by_price, conf.int = TRUE), aes(price2, estimate, color = day)) +
+   geom_line() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # joint_tests
+ tidy(joint_tests(oranges_lm1))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.manova")
> ### * tidy.manova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.manova
> ### Title: Tidy a(n) manova object
> ### Aliases: tidy.manova
> 
> ### ** Examples
> 
> 
> npk2 <- within(npk, foo <- rnorm(24))
> m <- manova(cbind(yield, foo) ~ block + N * P * K, npk2)
> tidy(m)
# A tibble: 8 × 7
  term         df pillai statistic num.df den.df p.value
  <chr>     <dbl>  <dbl>     <dbl>  <dbl>  <dbl>   <dbl>
1 block         5  0.895      1.94     10     24  0.0886
2 N             1  0.506      5.63      2     11  0.0207
3 P             1  0.171      1.13      2     11  0.357 
4 K             1  0.344      2.89      2     11  0.0982
5 N:P           1  0.302      2.37      2     11  0.139 
6 N:K           1  0.217      1.52      2     11  0.261 
7 P:K           1  0.420      3.98      2     11  0.0500
8 Residuals    12 NA         NA        NA     NA NA     
> 
> 
> 
> cleanEx()
> nameEx("tidy.map")
> ### * tidy.map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.map
> ### Title: Tidy a(n) map object
> ### Aliases: tidy.map maps_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("maps", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(maps)
+ library(ggplot2)
+ 
+ ca <- map("county", "ca", plot = FALSE, fill = TRUE)
+ 
+ tidy(ca)
+ 
+ qplot(long, lat, data = ca, geom = "polygon", group = group)
+ 
+ tx <- map("county", "texas", plot = FALSE, fill = TRUE)
+ tidy(tx)
+ qplot(long, lat,
+   data = tx, geom = "polygon", group = group,
+   colour = I("white")
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.mediate")
> ### * tidy.mediate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mediate
> ### Title: Tidy a(n) mediate object
> ### Aliases: tidy.mediate mediate_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mediation")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mediation)
+ 
+ data(jobs)
+ 
+ # fit models
+ b <- lm(job_seek ~ treat + econ_hard + sex + age, data = jobs)
+ c <- lm(depress2 ~ treat + job_seek + econ_hard + sex + age, data = jobs)
+ mod <- mediate(b, c, sims = 50, treat = "treat", mediator = "job_seek")
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ tidy(mod, conf.int = TRUE)
+ tidy(mod, conf.int = TRUE, conf.level = .99)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.mfx")
> ### * tidy.mfx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mfx
> ### Title: Tidy a(n) mfx object
> ### Aliases: tidy.mfx tidy.logitmfx tidy.negbinmfx tidy.poissonmfx
> ###   tidy.probitmfx
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mfx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mfx)
+ 
+ # get the marginal effects from a logit regression
+ mod_logmfx <- logitmfx(am ~ cyl + hp + wt, atmean = TRUE, data = mtcars)
+ 
+ tidy(mod_logmfx, conf.int = TRUE)
+ 
+ # compare with the naive model coefficients of the same logit call
+ tidy(
+   glm(am ~ cyl + hp + wt, family = binomial, data = mtcars),
+   conf.int = TRUE
+ )
+ 
+ augment(mod_logmfx)
+ glance(mod_logmfx)
+ 
+ # another example, this time using probit regression
+ mod_probmfx <- probitmfx(am ~ cyl + hp + wt, atmean = TRUE, data = mtcars)
+ 
+ tidy(mod_probmfx, conf.int = TRUE)
+ augment(mod_probmfx)
+ glance(mod_probmfx)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.mjoint")
> ### * tidy.mjoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mjoint
> ### Title: Tidy a(n) mjoint object
> ### Aliases: tidy.mjoint mjoint_tidiers joinerml_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("joineRML")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # broom only skips running these examples because the example models take a
+ # while to generate—they should run just fine, though!
+ ## Not run: 
+ ##D 
+ ##D 
+ ##D # load libraries for models and data
+ ##D library(joineRML)
+ ##D 
+ ##D # fit a joint model with bivariate longitudinal outcomes
+ ##D data(heart.valve)
+ ##D 
+ ##D hvd <- heart.valve[!is.na(heart.valve$log.grad) &
+ ##D   !is.na(heart.valve$log.lvmi) &
+ ##D   heart.valve$num <= 50, ]
+ ##D 
+ ##D fit <- mjoint(
+ ##D   formLongFixed = list(
+ ##D     "grad" = log.grad ~ time + sex + hs,
+ ##D     "lvmi" = log.lvmi ~ time + sex
+ ##D   ),
+ ##D   formLongRandom = list(
+ ##D     "grad" = ~ 1 | num,
+ ##D     "lvmi" = ~ time | num
+ ##D   ),
+ ##D   formSurv = Surv(fuyrs, status) ~ age,
+ ##D   data = hvd,
+ ##D   inits = list("gamma" = c(0.11, 1.51, 0.80)),
+ ##D   timeVar = "time"
+ ##D )
+ ##D 
+ ##D # extract the survival fixed effects
+ ##D tidy(fit)
+ ##D 
+ ##D # extract the longitudinal fixed effects
+ ##D tidy(fit, component = "longitudinal")
+ ##D 
+ ##D # extract the survival fixed effects with confidence intervals
+ ##D tidy(fit, ci = TRUE)
+ ##D 
+ ##D # extract the survival fixed effects with confidence intervals based
+ ##D # on bootstrapped standard errors
+ ##D bSE <- bootSE(fit, nboot = 5, safe.boot = TRUE)
+ ##D tidy(fit, boot_se = bSE, ci = TRUE)
+ ##D 
+ ##D # augment original data with fitted longitudinal values and residuals
+ ##D hvd2 <- augment(fit)
+ ##D 
+ ##D # extract model statistics
+ ##D glance(fit)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.mle2")
> ### * tidy.mle2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mle2
> ### Title: Tidy a(n) mle2 object
> ### Aliases: tidy.mle2 mle2_tidiers bbmle_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("bbmle")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(bbmle)
+ 
+ # generate data
+ x <- 0:10
+ y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
+ d <- data.frame(x, y)
+ 
+ # fit model
+ fit <- mle2(y ~ dpois(lambda = ymean),
+   start = list(ymean = mean(y)), data = d
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.mlm")
> ### * tidy.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mlm
> ### Title: Tidy a(n) mlm object
> ### Aliases: tidy.mlm
> 
> ### ** Examples
> 
> 
> # fit model
> mod <- lm(cbind(mpg, disp) ~ wt, mtcars)
> 
> # summarize model fit with tidiers
> tidy(mod, conf.int = TRUE)
# A tibble: 4 × 8
  response term        estimate std.error statistic  p.value conf.low conf.high
  <chr>    <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 mpg      (Intercept)    37.3      1.88      19.9  8.24e-19    33.5      41.1 
2 mpg      wt             -5.34     0.559     -9.56 1.29e-10    -6.49     -4.20
3 disp     (Intercept)  -131.      35.7       -3.67 9.33e- 4  -204.      -58.2 
4 disp     wt            112.      10.6       10.6  1.22e-11    90.8     134.  
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.mlogit")
> ### * tidy.mlogit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mlogit
> ### Title: Tidying methods for logit models
> ### Aliases: tidy.mlogit mlogit_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("mlogit")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(mlogit)
+ 
+ data("Fishing", package = "mlogit")
+ Fish <- dfidx(Fishing, varying = 2:9, shape = "wide", choice = "mode")
+ 
+ # fit model
+ m <- mlogit(mode ~ price + catch | income, data = Fish)
+ 
+ # summarize model fit with tidiers
+ tidy(m)
+ augment(m)
+ glance(m)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.muhaz")
> ### * tidy.muhaz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.muhaz
> ### Title: Tidy a(n) muhaz object
> ### Aliases: tidy.muhaz muhaz_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("muhaz", "survival"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(muhaz)
+ library(survival)
+ 
+ # fit model
+ x <- muhaz(ovarian$futime, ovarian$fustat)
+ 
+ # summarize model fit with tidiers
+ tidy(x)
+ glance(x)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.multinom")
> ### * tidy.multinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.multinom
> ### Title: Tidying methods for multinomial logistic regression models
> ### Aliases: tidy.multinom multinom_tidiers nnet_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("nnet", "MASS"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(nnet)
+ library(MASS)
+ 
+ example(birthwt)
+ 
+ bwt.mu <- multinom(low ~ ., bwt)
+ 
+ tidy(bwt.mu)
+ glance(bwt.mu)
+ 
+ # or, for output from a multinomial logistic regression
+ fit.gear <- multinom(gear ~ mpg + factor(am), data = mtcars)
+ tidy(fit.gear)
+ glance(fit.gear)
+ ## Don't show: 
+ }) # examplesIf
> library(nnet)
> library(MASS)
> example(birthwt)

brthwt> bwt <- with(birthwt, {
brthwt+ race <- factor(race, labels = c("white", "black", "other"))
brthwt+ ptd <- factor(ptl > 0)
brthwt+ ftv <- factor(ftv)
brthwt+ levels(ftv)[-(1:2)] <- "2+"
brthwt+ data.frame(low = factor(low), age, lwt, race, smoke = (smoke > 0),
brthwt+            ptd, ht = (ht > 0), ui = (ui > 0), ftv)
brthwt+ })

brthwt> options(contrasts = c("contr.treatment", "contr.poly"))

brthwt> glm(low ~ ., binomial, bwt)

Call:  glm(formula = low ~ ., family = binomial, data = bwt)

Coefficients:
(Intercept)          age          lwt    raceblack    raceother    smokeTRUE  
    0.82302     -0.03723     -0.01565      1.19241      0.74068      0.75553  
    ptdTRUE       htTRUE       uiTRUE         ftv1        ftv2+  
    1.34376      1.91317      0.68020     -0.43638      0.17901  

Degrees of Freedom: 188 Total (i.e. Null);  178 Residual
Null Deviance:	    234.7 
Residual Deviance: 195.5 	AIC: 217.5
> bwt.mu <- multinom(low ~ ., bwt)
# weights:  12 (11 variable)
initial  value 131.004817 
iter  10 value 98.029803
final  value 97.737759 
converged
> tidy(bwt.mu)
# A tibble: 11 × 6
   y.level term        estimate std.error statistic p.value
   <chr>   <chr>          <dbl>     <dbl>     <dbl>   <dbl>
 1 1       (Intercept)   0.823    1.24        0.661 0.508  
 2 1       age          -0.0372   0.0387     -0.962 0.336  
 3 1       lwt          -0.0157   0.00708    -2.21  0.0271 
 4 1       raceblack     1.19     0.536       2.22  0.0261 
 5 1       raceother     0.741    0.462       1.60  0.109  
 6 1       smokeTRUE     0.756    0.425       1.78  0.0755 
 7 1       ptdTRUE       1.34     0.481       2.80  0.00518
 8 1       htTRUE        1.91     0.721       2.65  0.00794
 9 1       uiTRUE        0.680    0.464       1.46  0.143  
10 1       ftv1         -0.436    0.479      -0.910 0.363  
11 1       ftv2+         0.179    0.456       0.392 0.695  
> glance(bwt.mu)
# A tibble: 1 × 4
    edf deviance   AIC  nobs
  <dbl>    <dbl> <dbl> <int>
1    11     195.  217.   189
> fit.gear <- multinom(gear ~ mpg + factor(am), data = mtcars)
# weights:  12 (6 variable)
initial  value 35.155593 
iter  10 value 14.156582
iter  20 value 14.031881
iter  30 value 14.025659
iter  40 value 14.021414
iter  50 value 14.019824
iter  60 value 14.019278
iter  70 value 14.018601
iter  80 value 14.018282
iter  80 value 14.018282
iter  90 value 14.017126
final  value 14.015374 
converged
> tidy(fit.gear)
# A tibble: 6 × 6
  y.level term        estimate std.error statistic  p.value
  <chr>   <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 4       (Intercept)  -11.2       5.32     -2.10  3.60e- 2
2 4       mpg            0.525     0.268     1.96  5.02e- 2
3 4       factor(am)1   11.9      66.9       0.178 8.59e- 1
4 5       (Intercept)  -18.4      67.9      -0.271 7.87e- 1
5 5       mpg            0.366     0.292     1.25  2.10e- 1
6 5       factor(am)1   22.4       2.17     10.3   4.54e-25
> glance(fit.gear)
# A tibble: 1 × 4
    edf deviance   AIC  nobs
  <dbl>    <dbl> <dbl> <int>
1     6     28.0  40.0    32
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’, ‘package:nnet’

> nameEx("tidy.negbin")
> ### * tidy.negbin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.negbin
> ### Title: Tidy a(n) negbin object
> ### Aliases: tidy.negbin
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ r <- glm.nb(Days ~ Sex / (Age + Eth * Lrn), data = quine)
+ 
+ # summarize model fit with tidiers
+ tidy(r)
+ glance(r)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> r <- glm.nb(Days ~ Sex/(Age + Eth * Lrn), data = quine)
> tidy(r)
# A tibble: 14 × 5
   term            estimate std.error statistic  p.value
   <chr>              <dbl>     <dbl>     <dbl>    <dbl>
 1 (Intercept)       3.02       0.297    10.2   2.89e-24
 2 SexM             -0.475      0.396    -1.20  2.29e- 1
 3 SexF:AgeF1       -0.709      0.323    -2.19  2.83e- 2
 4 SexM:AgeF1       -0.724      0.330    -2.19  2.85e- 2
 5 SexF:AgeF2       -0.615      0.371    -1.66  9.78e- 2
 6 SexM:AgeF2        0.628      0.274     2.30  2.17e- 2
 7 SexF:AgeF3       -0.342      0.327    -1.05  2.95e- 1
 8 SexM:AgeF3        1.15       0.314     3.67  2.46e- 4
 9 SexF:EthN        -0.0731     0.265    -0.276 7.83e- 1
10 SexM:EthN        -0.679      0.256    -2.65  8.07e- 3
11 SexF:LrnSL        0.944      0.322     2.93  3.43e- 3
12 SexM:LrnSL        0.239      0.336     0.712 4.76e- 1
13 SexF:EthN:LrnSL  -1.36       0.377    -3.60  3.16e- 4
14 SexM:EthN:LrnSL   0.761      0.441     1.73  8.45e- 2
> glance(r)
# A tibble: 1 × 8
  null.deviance df.null logLik      AIC   BIC deviance df.residual  nobs
          <dbl>   <int> <logLik>  <dbl> <dbl>    <dbl>       <int> <int>
1          235.     145 -531.5125 1093. 1138.     168.         132   146
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("tidy.nlrq")
> ### * tidy.nlrq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.nlrq
> ### Title: Tidy a(n) nlrq object
> ### Aliases: tidy.nlrq nlrq_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(quantreg)
+ 
+ # build artificial data with multiplicative error
+ set.seed(1)
+ dat <- NULL
+ dat$x <- rep(1:25, 20)
+ dat$y <- SSlogis(dat$x, 10, 12, 2) * rnorm(500, 1, 0.1)
+ 
+ # fit the median using nlrq
+ mod <- nlrq(y ~ SSlogis(x, Asym, mid, scal),
+   data = dat, tau = 0.5, trace = TRUE
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ augment(mod)
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> set.seed(1)
> dat <- NULL
> dat$x <- rep(1:25, 20)
> dat$y <- SSlogis(dat$x, 10, 12, 2) * rnorm(500, 1, 0.1)
> mod <- nlrq(y ~ SSlogis(x, Asym, mid, scal), data = dat, tau = 0.5, trace = TRUE)
109.059 :   9.968027 11.947208  1.962113 
final  value 108.942725 
converged
lambda = 1 
108.9427 :   9.958648 11.943273  1.967144 
final  value 108.490939 
stopped after 2 iterations
lambda = 0.9750984 
108.4909 :   9.949430 11.987472  1.998607 
final  value 108.471416 
converged
lambda = 0.9999299 
108.4714 :   9.94163 11.99077  1.99344 
final  value 108.471243 
converged
lambda = 1 
108.4712 :   9.941008 11.990550  1.992921 
final  value 108.470935 
converged
lambda = 0.8621249 
108.4709 :   9.942734 11.992773  1.993209 
final  value 108.470923 
converged
lambda = 0.9999613 
108.4709 :   9.942629 11.992728  1.993136 
final  value 108.470919 
converged
lambda = 1 
108.4709 :   9.942644 11.992737  1.993144 
final  value 108.470919 
converged
lambda = 1 
108.4709 :   9.942644 11.992737  1.993144 
final  value 108.470919 
converged
lambda = 1 
108.4709 :   9.942644 11.992737  1.993144 
> tidy(mod)
# A tibble: 3 × 5
  term  estimate std.error statistic p.value
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>
1 Asym      9.94    0.0841     118.        0
2 mid      12.0     0.0673     178.        0
3 scal      1.99    0.0248      80.3       0
> glance(mod)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -429.0842  864.  877.         497
> augment(mod)
# A tibble: 500 × 4
       x      y .fitted   .resid
   <int>  <dbl>   <dbl>    <dbl>
 1     1 0.0382  0.0399 -0.00171
 2     2 0.0682  0.0657  0.00250
 3     3 0.101   0.108  -0.00728
 4     4 0.209   0.177   0.0315 
 5     5 0.303   0.289   0.0137 
 6     6 0.435   0.469  -0.0332 
 7     7 0.796   0.751   0.0448 
 8     8 1.28    1.18    0.0982 
 9     9 1.93    1.81    0.118  
10    10 2.61    2.67   -0.0671 
# ℹ 490 more rows
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("tidy.nls")
> ### * tidy.nls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.nls
> ### Title: Tidy a(n) nls object
> ### Aliases: tidy.nls nls_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # fit model
+ n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(n)
+ augment(n)
+ glance(n)
+ 
+ library(ggplot2)
+ 
+ ggplot(augment(n), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
+ 
+ newdata <- head(mtcars)
+ newdata$wt <- newdata$wt + 1
+ 
+ augment(n, newdata = newdata)
+ ## Don't show: 
+ }) # examplesIf
> n <- nls(mpg ~ k * e^wt, data = mtcars, start = list(k = 1, e = 2))
> tidy(n)
# A tibble: 2 × 5
  term  estimate std.error statistic  p.value
  <chr>    <dbl>     <dbl>     <dbl>    <dbl>
1 k       49.7      3.79        13.1 5.96e-14
2 e        0.746    0.0199      37.5 8.86e-27
> augment(n)
# A tibble: 32 × 4
     mpg    wt .fitted .resid
   <dbl> <dbl>   <dbl>  <dbl>
 1  21    2.62    23.0 -2.01 
 2  21    2.88    21.4 -0.352
 3  22.8  2.32    25.1 -2.33 
 4  21.4  3.22    19.3  2.08 
 5  18.7  3.44    18.1  0.611
 6  18.1  3.46    18.0  0.117
 7  14.3  3.57    17.4 -3.11 
 8  24.4  3.19    19.5  4.93 
 9  22.8  3.15    19.7  3.10 
10  19.2  3.44    18.1  1.11 
# ℹ 22 more rows
> glance(n)
# A tibble: 1 × 9
  sigma isConv     finTol logLik   AIC   BIC deviance df.residual  nobs
  <dbl> <lgl>       <dbl>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1  2.67 TRUE   0.00000204  -75.8  158.  162.     214.          30    32
> library(ggplot2)
> ggplot(augment(n), aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted))
> newdata <- head(mtcars)
> newdata$wt <- newdata$wt + 1
> augment(n, newdata = newdata)
# A tibble: 6 × 13
  .rownames      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4     21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 Mazda RX4 W…  21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 Datsun 710    22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 Hornet 4 Dr…  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 Hornet Spor…  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 Valiant       18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# ℹ 1 more variable: .fitted <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("tidy.orcutt")
> ### * tidy.orcutt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.orcutt
> ### Title: Tidy a(n) orcutt object
> ### Aliases: tidy.orcutt orcutt_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("orcutt")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(orcutt)
+ 
+ # fit model and summarize results
+ reg <- lm(mpg ~ wt + qsec + disp, mtcars)
+ tidy(reg)
+ 
+ 
+ co <- cochrane.orcutt(reg)
+ tidy(co)
+ glance(co)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.pairwise.htest")
> ### * tidy.pairwise.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.pairwise.htest
> ### Title: Tidy a(n) pairwise.htest object
> ### Aliases: tidy.pairwise.htest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("modeldata")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ attach(airquality)
+ Month <- factor(Month, labels = month.abb[5:9])
+ ptt <- pairwise.t.test(Ozone, Month)
+ tidy(ptt)
+ 
+ library(modeldata)
+ data(hpc_data)
+ attach(hpc_data)
+ ptt2 <- pairwise.t.test(compounds, class)
+ tidy(ptt2)
+ 
+ tidy(pairwise.t.test(compounds, class, alternative = "greater"))
+ tidy(pairwise.t.test(compounds, class, alternative = "less"))
+ 
+ tidy(pairwise.wilcox.test(compounds, class))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.pam")
> ### * tidy.pam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.pam
> ### Title: Tidy a(n) pam object
> ### Aliases: tidy.pam pam_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("cluster", "modeldata", "ggplot2")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(dplyr)
+ library(ggplot2)
+ library(cluster)
+ library(modeldata)
+ data(hpc_data)
+ 
+ x <- hpc_data[, 2:5]
+ p <- pam(x, k = 4)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(p)
+ glance(p)
+ augment(p, x)
+ 
+ augment(p, x) %>%
+   ggplot(aes(compounds, input_fields)) +
+   geom_point(aes(color = .cluster)) +
+   geom_text(aes(label = cluster), data = tidy(p), size = 10)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.plm")
> ### * tidy.plm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.plm
> ### Title: Tidy a(n) plm object
> ### Aliases: tidy.plm plm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("plm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(plm)
+ 
+ # load data
+ data("Produc", package = "plm")
+ 
+ # fit model
+ zz <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,
+   data = Produc, index = c("state", "year")
+ )
+ 
+ # summarize model fit with tidiers
+ summary(zz)
+ 
+ tidy(zz)
+ tidy(zz, conf.int = TRUE)
+ tidy(zz, conf.int = TRUE, conf.level = 0.9)
+ 
+ augment(zz)
+ glance(zz)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.poLCA")
> ### * tidy.poLCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.poLCA
> ### Title: Tidy a(n) poLCA object
> ### Aliases: tidy.poLCA poLCA_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("poLCA", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(poLCA)
+ library(dplyr)
+ 
+ # generate data
+ data(values)
+ 
+ f <- cbind(A, B, C, D) ~ 1
+ 
+ # fit model
+ M1 <- poLCA(f, values, nclass = 2, verbose = FALSE)
+ 
+ M1
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(M1)
+ augment(M1)
+ glance(M1)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(M1), aes(factor(class), estimate, fill = factor(outcome))) +
+   geom_bar(stat = "identity", width = 1) +
+   facet_wrap(~variable)
+ 
+ # three-class model with a single covariate.
+ data(election)
+ 
+ f2a <- cbind(
+   MORALG, CARESG, KNOWG, LEADG, DISHONG, INTELG,
+   MORALB, CARESB, KNOWB, LEADB, DISHONB, INTELB
+ ) ~ PARTY
+ 
+ nes2a <- poLCA(f2a, election, nclass = 3, nrep = 5, verbose = FALSE)
+ 
+ td <- tidy(nes2a)
+ td
+ 
+ ggplot(td, aes(outcome, estimate, color = factor(class), group = class)) +
+   geom_line() +
+   facet_wrap(~variable, nrow = 2) +
+   theme(axis.text.x = element_text(angle = 90, hjust = 1))
+ 
+ au <- augment(nes2a)
+ 
+ au
+ 
+ count(au, .class)
+ 
+ # if the original data is provided, it leads to NAs in new columns
+ # for rows that weren't predicted
+ au2 <- augment(nes2a, data = election)
+ 
+ au2
+ 
+ dim(au2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.polr")
> ### * tidy.polr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.polr
> ### Title: Tidy a(n) polr object
> ### Aliases: tidy.polr polr_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("MASS")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ # fit model
+ fit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
+ 
+ # summarize model fit with tidiers
+ tidy(fit, exponentiate = TRUE, conf.int = TRUE)
+ 
+ glance(fit)
+ augment(fit, type.predict = "class")
+ 
+ fit2 <- polr(factor(gear) ~ am + mpg + qsec, data = mtcars)
+ 
+ tidy(fit, p.values = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> fit <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
> tidy(fit, exponentiate = TRUE, conf.int = TRUE)

Re-fitting to get Hessian

# A tibble: 8 × 7
  term          estimate std.error statistic conf.low conf.high coef.type  
  <chr>            <dbl>     <dbl>     <dbl>    <dbl>     <dbl> <chr>      
1 InflMedium       1.76     0.105       5.41    1.44      2.16  coefficient
2 InflHigh         3.63     0.127      10.1     2.83      4.66  coefficient
3 TypeApartment    0.564    0.119      -4.80    0.446     0.712 coefficient
4 TypeAtrium       0.693    0.155      -2.36    0.511     0.940 coefficient
5 TypeTerrace      0.336    0.151      -7.20    0.249     0.451 coefficient
6 ContHigh         1.43     0.0955      3.77    1.19      1.73  coefficient
7 Low|Medium       0.609    0.125      -3.97   NA        NA     scale      
8 Medium|High      2.00     0.125       5.50   NA        NA     scale      
> glance(fit)
# A tibble: 1 × 7
    edf logLik   AIC   BIC deviance df.residual  nobs
  <int>  <dbl> <dbl> <dbl>    <dbl>       <int> <int>
1     8 -1740. 3495. 3539.    3479.        1673  1681
> augment(fit, type.predict = "class")
# A tibble: 72 × 6
   Sat    Infl   Type      Cont  `(weights)` .fitted
   <ord>  <fct>  <fct>     <fct>       <int> <fct>  
 1 Low    Low    Tower     Low            21 Low    
 2 Medium Low    Tower     Low            21 Low    
 3 High   Low    Tower     Low            28 Low    
 4 Low    Medium Tower     Low            34 High   
 5 Medium Medium Tower     Low            22 High   
 6 High   Medium Tower     Low            36 High   
 7 Low    High   Tower     Low            10 High   
 8 Medium High   Tower     Low            11 High   
 9 High   High   Tower     Low            36 High   
10 Low    Low    Apartment Low            61 Low    
# ℹ 62 more rows
> fit2 <- polr(factor(gear) ~ am + mpg + qsec, data = mtcars)
> tidy(fit, p.values = TRUE)

Re-fitting to get Hessian

p-values can presently only be returned for models that contain
              no categorical variables with more than two levels
# A tibble: 8 × 6
  term          estimate std.error statistic p.value coef.type  
  <chr>            <dbl>     <dbl>     <dbl> <lgl>   <chr>      
1 InflMedium       0.566    0.105       5.41 NA      coefficient
2 InflHigh         1.29     0.127      10.1  NA      coefficient
3 TypeApartment   -0.572    0.119      -4.80 NA      coefficient
4 TypeAtrium      -0.366    0.155      -2.36 NA      coefficient
5 TypeTerrace     -1.09     0.151      -7.20 NA      coefficient
6 ContHigh         0.360    0.0955      3.77 NA      coefficient
7 Low|Medium      -0.496    0.125      -3.97 NA      scale      
8 Medium|High      0.691    0.125       5.50 NA      scale      
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("tidy.power.htest")
> ### * tidy.power.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.power.htest
> ### Title: Tidy a(n) power.htest object
> ### Aliases: tidy.power.htest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ptt <- power.t.test(n = 2:30, delta = 1)
+ tidy(ptt)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(ptt), aes(n, power)) +
+   geom_line()
+ ## Don't show: 
+ }) # examplesIf
> ptt <- power.t.test(n = 2:30, delta = 1)
> tidy(ptt)
# A tibble: 29 × 5
       n delta    sd sig.level  power
   <int> <dbl> <dbl>     <dbl>  <dbl>
 1     2     1     1      0.05 0.0913
 2     3     1     1      0.05 0.157 
 3     4     1     1      0.05 0.222 
 4     5     1     1      0.05 0.286 
 5     6     1     1      0.05 0.347 
 6     7     1     1      0.05 0.406 
 7     8     1     1      0.05 0.461 
 8     9     1     1      0.05 0.513 
 9    10     1     1      0.05 0.562 
10    11     1     1      0.05 0.607 
# ℹ 19 more rows
> library(ggplot2)
> ggplot(tidy(ptt), aes(n, power)) + geom_line()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("tidy.prcomp")
> ### * tidy.prcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.prcomp
> ### Title: Tidy a(n) prcomp object
> ### Aliases: tidy.prcomp prcomp_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("maps", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ pc <- prcomp(USArrests, scale = TRUE)
+ 
+ # information about rotation
+ tidy(pc)
+ 
+ # information about samples (states)
+ tidy(pc, "samples")
+ 
+ # information about PCs
+ tidy(pc, "pcs")
+ 
+ # state map
+ library(dplyr)
+ library(ggplot2)
+ library(maps)
+ 
+ pc %>%
+   tidy(matrix = "samples") %>%
+   mutate(region = tolower(row)) %>%
+   inner_join(map_data("state"), by = "region") %>%
+   ggplot(aes(long, lat, group = group, fill = value)) +
+   geom_polygon() +
+   facet_wrap(~PC) +
+   theme_void() +
+   ggtitle("Principal components of arrest data")
+ 
+ au <- augment(pc, data = USArrests)
+ 
+ au
+ 
+ ggplot(au, aes(.fittedPC1, .fittedPC2)) +
+   geom_point() +
+   geom_text(aes(label = .rownames), vjust = 1, hjust = 1)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.pyears")
> ### * tidy.pyears
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.pyears
> ### Title: Tidy a(n) pyears object
> ### Aliases: tidy.pyears pyears_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # generate and format data
+ temp.yr <- tcut(mgus$dxyr, 55:92, labels = as.character(55:91))
+ temp.age <- tcut(mgus$age, 34:101, labels = as.character(34:100))
+ ptime <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
+ pstat <- ifelse(is.na(mgus$pctime), 0, 1)
+ pfit <- pyears(Surv(ptime / 365.25, pstat) ~ temp.yr + temp.age + sex, mgus,
+   data.frame = TRUE
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(pfit)
+ glance(pfit)
+ 
+ # if data.frame argument is not given, different information is present in
+ # output
+ pfit2 <- pyears(Surv(ptime / 365.25, pstat) ~ temp.yr + temp.age + sex, mgus)
+ 
+ tidy(pfit2)
+ glance(pfit2)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> temp.yr <- tcut(mgus$dxyr, 55:92, labels = as.character(55:91))
> temp.age <- tcut(mgus$age, 34:101, labels = as.character(34:100))
> ptime <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
> pstat <- ifelse(is.na(mgus$pctime), 0, 1)
> pfit <- pyears(Surv(ptime/365.25, pstat) ~ temp.yr + temp.age + sex, mgus, 
+     data.frame = TRUE)
> tidy(pfit)
# A tibble: 1,752 × 6
   temp.yr temp.age sex     pyears     n event
   <fct>   <fct>    <fct>    <dbl> <dbl> <dbl>
 1 71      34       female 0.00274     1     0
 2 68      35       female 0.00274     1     0
 3 72      35       female 0.00274     1     0
 4 69      36       female 0.00274     1     0
 5 73      36       female 0.00274     1     0
 6 69      37       female 0.00274     1     0
 7 70      37       female 0.00274     1     0
 8 74      37       female 0.00274     1     0
 9 70      38       female 0.00274     1     0
10 71      38       female 0.00274     1     0
# ℹ 1,742 more rows
> glance(pfit)
# A tibble: 1 × 3
  total offtable  nobs
  <dbl>    <dbl> <int>
1  8.32    0.727   241
> pfit2 <- pyears(Surv(ptime/365.25, pstat) ~ temp.yr + temp.age + sex, 
+     mgus)
> tidy(pfit2)
# A tibble: 37 × 402
   pyears.34.female pyears.35.female pyears.36.female pyears.37.female
              <dbl>            <dbl>            <dbl>            <dbl>
 1                0                0                0                0
 2                0                0                0                0
 3                0                0                0                0
 4                0                0                0                0
 5                0                0                0                0
 6                0                0                0                0
 7                0                0                0                0
 8                0                0                0                0
 9                0                0                0                0
10                0                0                0                0
# ℹ 27 more rows
# ℹ 398 more variables: pyears.38.female <dbl>, pyears.39.female <dbl>,
#   pyears.40.female <dbl>, pyears.41.female <dbl>, pyears.42.female <dbl>,
#   pyears.43.female <dbl>, pyears.44.female <dbl>, pyears.45.female <dbl>,
#   pyears.46.female <dbl>, pyears.47.female <dbl>, pyears.48.female <dbl>,
#   pyears.49.female <dbl>, pyears.50.female <dbl>, pyears.51.female <dbl>,
#   pyears.52.female <dbl>, pyears.53.female <dbl>, pyears.54.female <dbl>, …
> glance(pfit2)
# A tibble: 1 × 3
  total offtable  nobs
  <dbl>    <dbl> <int>
1  8.32    0.727   241
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("tidy.rcorr")
> ### * tidy.rcorr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.rcorr
> ### Title: Tidy a(n) rcorr object
> ### Aliases: tidy.rcorr rcorr_tidiers Hmisc_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("Hmisc", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(Hmisc)
+ 
+ mat <- replicate(52, rnorm(100))
+ 
+ # add some NAs
+ mat[sample(length(mat), 2000)] <- NA
+ 
+ # also, column names
+ colnames(mat) <- c(LETTERS, letters)
+ 
+ # fit model
+ rc <- rcorr(mat)
+ 
+ # summarize model fit with tidiers  + visualization
+ td <- tidy(rc)
+ td
+ 
+ library(ggplot2)
+ ggplot(td, aes(p.value)) +
+   geom_histogram(binwidth = .1)
+ 
+ ggplot(td, aes(estimate, p.value)) +
+   geom_point() +
+   scale_y_log10()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.ref.grid")
> ### * tidy.ref.grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ref.grid
> ### Title: Tidy a(n) ref.grid object
> ### Aliases: tidy.ref.grid
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("emmeans", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(emmeans)
+ 
+ # linear model for sales of oranges per day
+ oranges_lm1 <- lm(sales1 ~ price1 + price2 + day + store, data = oranges)
+ 
+ # reference grid; see vignette("basics", package = "emmeans")
+ oranges_rg1 <- ref_grid(oranges_lm1)
+ td <- tidy(oranges_rg1)
+ td
+ 
+ # marginal averages
+ marginal <- emmeans(oranges_rg1, "day")
+ tidy(marginal)
+ 
+ # contrasts
+ tidy(contrast(marginal))
+ tidy(contrast(marginal, method = "pairwise"))
+ 
+ # plot confidence intervals
+ library(ggplot2)
+ 
+ ggplot(tidy(marginal, conf.int = TRUE), aes(day, estimate)) +
+   geom_point() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # by multiple prices
+ by_price <- emmeans(oranges_lm1, "day",
+   by = "price2",
+   at = list(
+     price1 = 50, price2 = c(40, 60, 80),
+     day = c("2", "3", "4")
+   )
+ )
+ 
+ by_price
+ 
+ tidy(by_price)
+ 
+ ggplot(tidy(by_price, conf.int = TRUE), aes(price2, estimate, color = day)) +
+   geom_line() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # joint_tests
+ tidy(joint_tests(oranges_lm1))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.regsubsets")
> ### * tidy.regsubsets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.regsubsets
> ### Title: Tidy a(n) regsubsets object
> ### Aliases: tidy.regsubsets leaps_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("leaps")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(leaps)
+ 
+ # fit model
+ all_fits <- regsubsets(hp ~ ., mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(all_fits)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.ridgelm")
> ### * tidy.ridgelm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ridgelm
> ### Title: Tidy a(n) ridgelm object
> ### Aliases: tidy.ridgelm ridgelm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("MASS", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(MASS)
+ 
+ names(longley)[1] <- "y"
+ 
+ # fit model and summarizd results
+ fit1 <- lm.ridge(y ~ ., longley)
+ tidy(fit1)
+ 
+ fit2 <- lm.ridge(y ~ ., longley, lambda = seq(0.001, .05, .001))
+ td2 <- tidy(fit2)
+ g2 <- glance(fit2)
+ 
+ # coefficient plot
+ library(ggplot2)
+ ggplot(td2, aes(lambda, estimate, color = term)) +
+   geom_line()
+ 
+ # GCV plot
+ ggplot(td2, aes(lambda, GCV)) +
+   geom_line()
+ 
+ # add line for the GCV minimizing estimate
+ ggplot(td2, aes(lambda, GCV)) +
+   geom_line() +
+   geom_vline(xintercept = g2$lambdaGCV, col = "red", lty = 2)
+ ## Don't show: 
+ }) # examplesIf
> library(MASS)
> names(longley)[1] <- "y"
> fit1 <- lm.ridge(y ~ ., longley)
> tidy(fit1)
# A tibble: 6 × 5
  lambda   GCV term         estimate scale
   <dbl> <dbl> <chr>           <dbl> <dbl>
1      0 0.128 GNP            25.4   96.2 
2      0 0.128 Unemployed      3.30  90.5 
3      0 0.128 Armed.Forces    0.752 67.4 
4      0 0.128 Population    -11.7    6.74
5      0 0.128 Year           -6.54   4.61
6      0 0.128 Employed        0.786  3.40
> fit2 <- lm.ridge(y ~ ., longley, lambda = seq(0.001, 0.05, 0.001))
> td2 <- tidy(fit2)
> g2 <- glance(fit2)
> library(ggplot2)
> ggplot(td2, aes(lambda, estimate, color = term)) + geom_line()
> ggplot(td2, aes(lambda, GCV)) + geom_line()
> ggplot(td2, aes(lambda, GCV)) + geom_line() + geom_vline(xintercept = g2$lambdaGCV, 
+     col = "red", lty = 2)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:MASS’

> nameEx("tidy.robustbase.glmrob")
> ### * tidy.robustbase.glmrob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glmrob
> ### Title: Tidy a(n) glmrob object
> ### Aliases: tidy.glmrob
> 
> ### ** Examples
> 
> 
> if (requireNamespace("robustbase", quietly = TRUE)) {
+   # load libraries for models and data
+   library(robustbase)
+ 
+   data(coleman)
+   set.seed(0)
+ 
+   m <- lmrob(Y ~ ., data = coleman)
+   tidy(m)
+   augment(m)
+   glance(m)
+ 
+   data(carrots)
+ 
+   Rfit <- glmrob(cbind(success, total - success) ~ logdose + block,
+     family = binomial, data = carrots, method = "Mqle",
+     control = glmrobMqle.control(tcc = 1.2)
+   )
+ 
+   tidy(Rfit)
+   augment(Rfit)
+ }
> 
> 
> 
> cleanEx()
> nameEx("tidy.robustbase.lmrob")
> ### * tidy.robustbase.lmrob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lmrob
> ### Title: Tidy a(n) lmrob object
> ### Aliases: tidy.lmrob robustbase_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("robustbase", quietly = TRUE)) {
+   # load libraries for models and data
+   library(robustbase)
+ 
+   data(coleman)
+   set.seed(0)
+ 
+   m <- lmrob(Y ~ ., data = coleman)
+   tidy(m)
+   augment(m)
+   glance(m)
+ 
+   data(carrots)
+ 
+   Rfit <- glmrob(cbind(success, total - success) ~ logdose + block,
+     family = binomial, data = carrots, method = "Mqle",
+     control = glmrobMqle.control(tcc = 1.2)
+   )
+ 
+   tidy(Rfit)
+   augment(Rfit)
+ }
> 
> 
> 
> cleanEx()
> nameEx("tidy.roc")
> ### * tidy.roc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.roc
> ### Title: Tidy a(n) roc object
> ### Aliases: tidy.roc auc_tidiers roc_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("AUC", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(AUC)
+ 
+ # load data
+ data(churn)
+ 
+ # fit model
+ r <- roc(churn$predictions, churn$labels)
+ 
+ # summarize with tidiers + visualization
+ td <- tidy(r)
+ td
+ 
+ library(ggplot2)
+ 
+ ggplot(td, aes(fpr, tpr)) +
+   geom_line()
+ 
+ # compare the ROC curves for two prediction algorithms
+ library(dplyr)
+ library(tidyr)
+ 
+ rocs <- churn %>%
+   pivot_longer(contains("predictions"),
+     names_to = "algorithm",
+     values_to = "value"
+   ) %>%
+   nest(data = -algorithm) %>%
+   mutate(tidy_roc = purrr::map(data, ~ tidy(roc(.x$value, .x$labels)))) %>%
+   unnest(tidy_roc)
+ 
+ ggplot(rocs, aes(fpr, tpr, color = algorithm)) +
+   geom_line()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.rq")
> ### * tidy.rq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.rq
> ### Title: Tidy a(n) rq object
> ### Aliases: tidy.rq rq_tidiers quantreg_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library and data
+ library(quantreg)
+ 
+ data(stackloss)
+ 
+ # median (l1) regression fit for the stackloss data.
+ mod1 <- rq(stack.loss ~ stack.x, .5)
+ 
+ # weighted sample median
+ mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
+ 
+ # summarize model fit with tidiers
+ tidy(mod1)
+ glance(mod1)
+ augment(mod1)
+ 
+ tidy(mod2)
+ glance(mod2)
+ augment(mod2)
+ 
+ # varying tau to generate an rqs object
+ mod3 <- rq(stack.loss ~ stack.x, tau = c(.25, .5))
+ 
+ tidy(mod3)
+ augment(mod3)
+ 
+ # glance cannot handle rqs objects like `mod3`--use a purrr
+ # `map`-based workflow instead
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> data(stackloss)
> mod1 <- rq(stack.loss ~ stack.x, 0.5)
> mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
> tidy(mod1)
# A tibble: 4 × 5
  term              estimate conf.low conf.high   tau
  <chr>                <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -39.7     -53.8    -24.5      0.5
2 stack.xAir.Flow     0.832     0.509    1.17     0.5
3 stack.xWater.Temp   0.574     0.272    3.04     0.5
4 stack.xAcid.Conc.  -0.0609   -0.278    0.0153   0.5
> glance(mod1)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -50.15272  108.  112.          17
> augment(mod1)
# A tibble: 21 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"]    .resid .fitted  .tau
        <dbl>                <dbl>           <dbl>     <dbl>   <dbl> <dbl>
 1         42                   80              27  5.06e+ 0    36.9   0.5
 2         37                   80              27 -1.42e-14    37     0.5
 3         37                   75              25  5.43e+ 0    31.6   0.5
 4         28                   62              24  7.63e+ 0    20.4   0.5
 5         18                   62              22 -1.22e+ 0    19.2   0.5
 6         18                   62              23 -1.79e+ 0    19.8   0.5
 7         19                   62              24 -1.00e+ 0    20     0.5
 8         20                   62              24 -7.11e-15    20     0.5
 9         15                   58              23 -1.46e+ 0    16.5   0.5
10         14                   58              18 -2.03e- 2    14.0   0.5
# ℹ 11 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> tidy(mod2)
# A tibble: 1 × 5
  term        estimate conf.low conf.high   tau
  <chr>          <dbl> <lgl>    <lgl>     <dbl>
1 (Intercept)    0.390 NA       NA          0.5
> glance(mod2)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -64.46761  131.  133.          49
> augment(mod2)
# A tibble: 50 × 5
   `rnorm(50)` `(weights)`  .resid .fitted  .tau
         <dbl>       <dbl>   <dbl>   <dbl> <dbl>
 1      -0.626       0.655 -1.02     0.390   0.5
 2       0.184       0.353 -0.206    0.390   0.5
 3      -0.836       0.270 -1.23     0.390   0.5
 4       1.60        0.993  1.21     0.390   0.5
 5       0.330       0.633 -0.0603   0.390   0.5
 6      -0.820       0.213 -1.21     0.390   0.5
 7       0.487       0.129  0.0976   0.390   0.5
 8       0.738       0.478  0.348    0.390   0.5
 9       0.576       0.924  0.186    0.390   0.5
10      -0.305       0.599 -0.695    0.390   0.5
# ℹ 40 more rows
> mod3 <- rq(stack.loss ~ stack.x, tau = c(0.25, 0.5))
> tidy(mod3)
# A tibble: 8 × 5
  term               estimate conf.low conf.high   tau
  <chr>                 <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -3.6 e+ 1  -59.0     -7.84    0.25
2 stack.xAir.Flow    5.00e- 1    0.229    0.970   0.25
3 stack.xWater.Temp  1.00e+ 0    0.286    2.26    0.25
4 stack.xAcid.Conc. -4.58e-16   -0.643    0.0861  0.25
5 (Intercept)       -3.97e+ 1  -53.8    -24.5     0.5 
6 stack.xAir.Flow    8.32e- 1    0.509    1.17    0.5 
7 stack.xWater.Temp  5.74e- 1    0.272    3.04    0.5 
8 stack.xAcid.Conc. -6.09e- 2   -0.278    0.0153  0.5 
> augment(mod3)
# A tibble: 42 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"] .tau     .resid .fitted
        <dbl>                <dbl>           <dbl> <chr>     <dbl>   <dbl>
 1         42                   80              27 0.25   1.10e+ 1    31.0
 2         42                   80              27 0.5    5.06e+ 0    36.9
 3         37                   80              27 0.25   6.00e+ 0    31.0
 4         37                   80              27 0.5   -1.42e-14    37  
 5         37                   75              25 0.25   1.05e+ 1    26.5
 6         37                   75              25 0.5    5.43e+ 0    31.6
 7         28                   62              24 0.25   9.00e+ 0    19  
 8         28                   62              24 0.5    7.63e+ 0    20.4
 9         18                   62              22 0.25   1.00e+ 0    17.0
10         18                   62              22 0.5   -1.22e+ 0    19.2
# ℹ 32 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("tidy.rqs")
> ### * tidy.rqs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.rqs
> ### Title: Tidy a(n) rqs object
> ### Aliases: tidy.rqs rqs_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("quantreg")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library and data
+ library(quantreg)
+ 
+ data(stackloss)
+ 
+ # median (l1) regression fit for the stackloss data.
+ mod1 <- rq(stack.loss ~ stack.x, .5)
+ 
+ # weighted sample median
+ mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
+ 
+ # summarize model fit with tidiers
+ tidy(mod1)
+ glance(mod1)
+ augment(mod1)
+ 
+ tidy(mod2)
+ glance(mod2)
+ augment(mod2)
+ 
+ # varying tau to generate an rqs object
+ mod3 <- rq(stack.loss ~ stack.x, tau = c(.25, .5))
+ 
+ tidy(mod3)
+ augment(mod3)
+ 
+ # glance cannot handle rqs objects like `mod3`--use a purrr
+ # `map`-based workflow instead
+ ## Don't show: 
+ }) # examplesIf
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> data(stackloss)
> mod1 <- rq(stack.loss ~ stack.x, 0.5)
> mod2 <- rq(rnorm(50) ~ 1, weights = runif(50))
> tidy(mod1)
# A tibble: 4 × 5
  term              estimate conf.low conf.high   tau
  <chr>                <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -39.7     -53.8    -24.5      0.5
2 stack.xAir.Flow     0.832     0.509    1.17     0.5
3 stack.xWater.Temp   0.574     0.272    3.04     0.5
4 stack.xAcid.Conc.  -0.0609   -0.278    0.0153   0.5
> glance(mod1)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -50.15272  108.  112.          17
> augment(mod1)
# A tibble: 21 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"]    .resid .fitted  .tau
        <dbl>                <dbl>           <dbl>     <dbl>   <dbl> <dbl>
 1         42                   80              27  5.06e+ 0    36.9   0.5
 2         37                   80              27 -1.42e-14    37     0.5
 3         37                   75              25  5.43e+ 0    31.6   0.5
 4         28                   62              24  7.63e+ 0    20.4   0.5
 5         18                   62              22 -1.22e+ 0    19.2   0.5
 6         18                   62              23 -1.79e+ 0    19.8   0.5
 7         19                   62              24 -1.00e+ 0    20     0.5
 8         20                   62              24 -7.11e-15    20     0.5
 9         15                   58              23 -1.46e+ 0    16.5   0.5
10         14                   58              18 -2.03e- 2    14.0   0.5
# ℹ 11 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> tidy(mod2)
# A tibble: 1 × 5
  term        estimate conf.low conf.high   tau
  <chr>          <dbl> <lgl>    <lgl>     <dbl>
1 (Intercept)    0.390 NA       NA          0.5
> glance(mod2)
# A tibble: 1 × 5
    tau logLik      AIC   BIC df.residual
  <dbl> <logLik>  <dbl> <dbl>       <int>
1   0.5 -64.46761  131.  133.          49
> augment(mod2)
# A tibble: 50 × 5
   `rnorm(50)` `(weights)`  .resid .fitted  .tau
         <dbl>       <dbl>   <dbl>   <dbl> <dbl>
 1      -0.626       0.655 -1.02     0.390   0.5
 2       0.184       0.353 -0.206    0.390   0.5
 3      -0.836       0.270 -1.23     0.390   0.5
 4       1.60        0.993  1.21     0.390   0.5
 5       0.330       0.633 -0.0603   0.390   0.5
 6      -0.820       0.213 -1.21     0.390   0.5
 7       0.487       0.129  0.0976   0.390   0.5
 8       0.738       0.478  0.348    0.390   0.5
 9       0.576       0.924  0.186    0.390   0.5
10      -0.305       0.599 -0.695    0.390   0.5
# ℹ 40 more rows
> mod3 <- rq(stack.loss ~ stack.x, tau = c(0.25, 0.5))
> tidy(mod3)
# A tibble: 8 × 5
  term               estimate conf.low conf.high   tau
  <chr>                 <dbl>    <dbl>     <dbl> <dbl>
1 (Intercept)       -3.6 e+ 1  -59.0     -7.84    0.25
2 stack.xAir.Flow    5.00e- 1    0.229    0.970   0.25
3 stack.xWater.Temp  1.00e+ 0    0.286    2.26    0.25
4 stack.xAcid.Conc. -4.58e-16   -0.643    0.0861  0.25
5 (Intercept)       -3.97e+ 1  -53.8    -24.5     0.5 
6 stack.xAir.Flow    8.32e- 1    0.509    1.17    0.5 
7 stack.xWater.Temp  5.74e- 1    0.272    3.04    0.5 
8 stack.xAcid.Conc. -6.09e- 2   -0.278    0.0153  0.5 
> augment(mod3)
# A tibble: 42 × 5
   stack.loss stack.x[,"Air.Flow"] [,"Water.Temp"] .tau     .resid .fitted
        <dbl>                <dbl>           <dbl> <chr>     <dbl>   <dbl>
 1         42                   80              27 0.25   1.10e+ 1    31.0
 2         42                   80              27 0.5    5.06e+ 0    36.9
 3         37                   80              27 0.25   6.00e+ 0    31.0
 4         37                   80              27 0.5   -1.42e-14    37  
 5         37                   75              25 0.25   1.05e+ 1    26.5
 6         37                   75              25 0.5    5.43e+ 0    31.6
 7         28                   62              24 0.25   9.00e+ 0    19  
 8         28                   62              24 0.5    7.63e+ 0    20.4
 9         18                   62              22 0.25   1.00e+ 0    17.0
10         18                   62              22 0.5   -1.22e+ 0    19.2
# ℹ 32 more rows
# ℹ 1 more variable: stack.x[3] <dbl>
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:quantreg’, ‘package:SparseM’

> nameEx("tidy.sarlm")
> ### * tidy.sarlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.sarlm
> ### Title: Tidying methods for spatially autoregressive models
> ### Aliases: tidy.sarlm spatialreg_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("spdep", "spatialreg")) && identical(Sys.getenv("NOT_CRAN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ 
+ # load libraries for models and data
+ library(spatialreg)
+ library(spdep)
+ 
+ # load data
+ data(oldcol, package = "spdep")
+ 
+ listw <- nb2listw(COL.nb, style = "W")
+ 
+ # fit model
+ crime_sar <-
+   lagsarlm(CRIME ~ INC + HOVAL,
+     data = COL.OLD,
+     listw = listw,
+     method = "eigen"
+   )
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sar)
+ tidy(crime_sar, conf.int = TRUE)
+ glance(crime_sar)
+ augment(crime_sar)
+ 
+ # fit another model
+ crime_sem <- errorsarlm(CRIME ~ INC + HOVAL, data = COL.OLD, listw)
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sem)
+ tidy(crime_sem, conf.int = TRUE)
+ glance(crime_sem)
+ augment(crime_sem)
+ 
+ # fit another model
+ crime_sac <- sacsarlm(CRIME ~ INC + HOVAL, data = COL.OLD, listw)
+ 
+ # summarize model fit with tidiers
+ tidy(crime_sac)
+ tidy(crime_sac, conf.int = TRUE)
+ glance(crime_sac)
+ augment(crime_sac)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.spec")
> ### * tidy.spec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.spec
> ### Title: Tidy a(n) spec object
> ### Aliases: tidy.spec
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("ggplot2")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ spc <- spectrum(lh)
+ tidy(spc)
+ 
+ library(ggplot2)
+ ggplot(tidy(spc), aes(freq, spec)) +
+   geom_line()
+ ## Don't show: 
+ }) # examplesIf
> spc <- spectrum(lh)
> tidy(spc)
# A tibble: 24 × 2
     freq   spec
    <dbl>  <dbl>
 1 0.0208 0.0912
 2 0.0417 0.331 
 3 0.0625 0.836 
 4 0.0833 1.17  
 5 0.104  0.350 
 6 0.125  1.51  
 7 0.146  0.328 
 8 0.167  0.618 
 9 0.188  0.320 
10 0.208  0.0675
# ℹ 14 more rows
> library(ggplot2)
> ggplot(tidy(spc), aes(freq, spec)) + geom_line()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("tidy.speedglm")
> ### * tidy.speedglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.speedglm
> ### Title: Tidy a(n) speedglm object
> ### Aliases: tidy.speedglm speedglm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("speedglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(speedglm)
+ 
+ # generate data
+ clotting <- data.frame(
+   u = c(5, 10, 15, 20, 30, 40, 60, 80, 100),
+   lot1 = c(118, 58, 42, 35, 27, 25, 21, 19, 18)
+ )
+ 
+ # fit model
+ fit <- speedglm(lot1 ~ log(u), data = clotting, family = Gamma(log))
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ glance(fit)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.speedlm")
> ### * tidy.speedlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.speedlm
> ### Title: Tidy a(n) speedlm object
> ### Aliases: tidy.speedlm speedlm_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("speedglm")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load modeling library
+ library(speedglm)
+ 
+ # fit model
+ mod <- speedlm(mpg ~ wt + qsec, data = mtcars, fitted = TRUE)
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ augment(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.summary.glht")
> ### * tidy.summary.glht
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.summary.glht
> ### Title: Tidy a(n) summary.glht object
> ### Aliases: tidy.summary.glht
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("multcomp", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(multcomp)
+ library(ggplot2)
+ 
+ amod <- aov(breaks ~ wool + tension, data = warpbreaks)
+ wht <- glht(amod, linfct = mcp(tension = "Tukey"))
+ 
+ tidy(wht)
+ 
+ ggplot(wht, aes(lhs, estimate)) +
+   geom_point()
+ 
+ CI <- confint(wht)
+ 
+ tidy(CI)
+ 
+ ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
+   geom_pointrange()
+ 
+ tidy(summary(wht))
+ ggplot(mapping = aes(lhs, estimate)) +
+   geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
+   geom_point(aes(size = p), data = summary(wht)) +
+   scale_size(trans = "reverse")
+ 
+ cld <- cld(wht)
+ tidy(cld)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.summary.lm")
> ### * tidy.summary.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.summary.lm
> ### Title: Tidy a(n) summary.lm object
> ### Aliases: tidy.summary.lm
> 
> ### ** Examples
> 
> 
> # fit model
> mod <- lm(mpg ~ wt + qsec, data = mtcars)
> modsumm <- summary(mod)
> 
> # summarize model fit with tidiers
> tidy(mod, conf.int = TRUE)
# A tibble: 3 × 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4    9.00      30.5 
2 wt            -5.05      0.484    -10.4  2.52e-11   -6.04      -4.06
3 qsec           0.929     0.265      3.51 1.50e- 3    0.387      1.47
> 
> # equivalent to the above
> tidy(modsumm, conf.int = TRUE)
# A tibble: 3 × 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4    9.00      30.5 
2 wt            -5.05      0.484    -10.4  2.52e-11   -6.04      -4.06
3 qsec           0.929     0.265      3.51 1.50e- 3    0.387      1.47
> 
> glance(mod)
# A tibble: 1 × 12
  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2  -74.4  157.  163.
# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>
> 
> # mostly the same, except for a few missing columns
> glance(modsumm)
# A tibble: 1 × 8
  r.squared adj.r.squared sigma statistic  p.value    df df.residual  nobs
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>       <int> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     2          29    32
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.summary_emm")
> ### * tidy.summary_emm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.summary_emm
> ### Title: Tidy a(n) summary_emm object
> ### Aliases: tidy.summary_emm
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("emmeans", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(emmeans)
+ 
+ # linear model for sales of oranges per day
+ oranges_lm1 <- lm(sales1 ~ price1 + price2 + day + store, data = oranges)
+ 
+ # reference grid; see vignette("basics", package = "emmeans")
+ oranges_rg1 <- ref_grid(oranges_lm1)
+ td <- tidy(oranges_rg1)
+ td
+ 
+ # marginal averages
+ marginal <- emmeans(oranges_rg1, "day")
+ tidy(marginal)
+ 
+ # contrasts
+ tidy(contrast(marginal))
+ tidy(contrast(marginal, method = "pairwise"))
+ 
+ # plot confidence intervals
+ library(ggplot2)
+ 
+ ggplot(tidy(marginal, conf.int = TRUE), aes(day, estimate)) +
+   geom_point() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # by multiple prices
+ by_price <- emmeans(oranges_lm1, "day",
+   by = "price2",
+   at = list(
+     price1 = 50, price2 = c(40, 60, 80),
+     day = c("2", "3", "4")
+   )
+ )
+ 
+ by_price
+ 
+ tidy(by_price)
+ 
+ ggplot(tidy(by_price, conf.int = TRUE), aes(price2, estimate, color = day)) +
+   geom_line() +
+   geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+ # joint_tests
+ tidy(joint_tests(oranges_lm1))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.survdiff")
> ### * tidy.survdiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survdiff
> ### Title: Tidy a(n) survdiff object
> ### Aliases: tidy.survdiff survdiff_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ s <- survdiff(
+   Surv(time, status) ~ pat.karno + strata(inst),
+   data = lung
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(s)
+ glance(s)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> s <- survdiff(Surv(time, status) ~ pat.karno + strata(inst), data = lung)
> tidy(s)
# A tibble: 8 × 4
  pat.karno     N   obs    exp
  <chr>     <dbl> <dbl>  <dbl>
1 30            2     1  0.692
2 40            2     1  1.10 
3 50            4     4  1.17 
4 60           30    27 16.3  
5 70           41    31 26.4  
6 80           50    38 41.9  
7 90           60    38 47.2  
8 100          35    21 26.2  
> glance(s)
# A tibble: 1 × 3
  statistic    df p.value
      <dbl> <dbl>   <dbl>
1      21.4     7 0.00326
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("tidy.survexp")
> ### * tidy.survexp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survexp
> ### Title: Tidy a(n) survexp object
> ### Aliases: tidy.survexp sexpfit_tidiers survexp_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("survival")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ sexpfit <- survexp(
+   futime ~ 1,
+   rmap = list(
+     sex = "male",
+     year = accept.dt,
+     age = (accept.dt - birth.dt)
+   ),
+   method = "conditional",
+   data = jasa
+ )
+ 
+ # summarize model fit with tidiers
+ tidy(sexpfit)
+ glance(sexpfit)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> sexpfit <- survexp(futime ~ 1, rmap = list(sex = "male", year = accept.dt, 
+     age = (accept.dt - birth.dt)), method = "conditional", data = jasa)
> tidy(sexpfit)
# A tibble: 88 × 3
    time estimate n.risk
   <dbl>    <dbl>  <int>
 1     0     1       102
 2     1     1.00    102
 3     2     1.00     99
 4     4     1.00     96
 5     5     1.00     94
 6     7     1.00     92
 7     8     1.00     91
 8    10     1.00     90
 9    11     1.00     89
10    15     1.00     88
# ℹ 78 more rows
> glance(sexpfit)
# A tibble: 1 × 3
  n.max n.start timepoints
  <int>   <int>      <int>
1   102     102         88
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("tidy.survfit")
> ### * tidy.survfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survfit
> ### Title: Tidy a(n) survfit object
> ### Aliases: tidy.survfit survfit_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ cfit <- coxph(Surv(time, status) ~ age + sex, lung)
+ sfit <- survfit(cfit)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(sfit)
+ glance(sfit)
+ 
+ library(ggplot2)
+ 
+ ggplot(tidy(sfit), aes(time, estimate)) +
+   geom_line() +
+   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+ 
+ # multi-state
+ fitCI <- survfit(Surv(stop, status * as.numeric(event), type = "mstate") ~ 1,
+   data = mgus1, subset = (start == 0)
+ )
+ 
+ td_multi <- tidy(fitCI)
+ 
+ td_multi
+ 
+ ggplot(td_multi, aes(time, estimate, group = state)) +
+   geom_line(aes(color = state)) +
+   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> sfit <- survfit(cfit)
> tidy(sfit)
# A tibble: 186 × 8
    time n.risk n.event n.censor estimate std.error conf.high conf.low
   <dbl>  <dbl>   <dbl>    <dbl>    <dbl>     <dbl>     <dbl>    <dbl>
 1     5    228       1        0    0.996   0.00419     1        0.988
 2    11    227       3        0    0.983   0.00845     1.00     0.967
 3    12    224       1        0    0.979   0.00947     0.997    0.961
 4    13    223       2        0    0.971   0.0113      0.992    0.949
 5    15    221       1        0    0.966   0.0121      0.990    0.944
 6    26    220       1        0    0.962   0.0129      0.987    0.938
 7    30    219       1        0    0.958   0.0136      0.984    0.933
 8    31    218       1        0    0.954   0.0143      0.981    0.927
 9    53    217       2        0    0.945   0.0157      0.975    0.917
10    54    215       1        0    0.941   0.0163      0.972    0.911
# ℹ 176 more rows
> glance(sfit)
# A tibble: 1 × 10
  records n.max n.start events rmean rmean.std.error median conf.low conf.high
    <dbl> <dbl>   <dbl>  <dbl> <dbl>           <dbl>  <dbl>    <dbl>     <dbl>
1     228   228     228    165  381.            20.3    320      285       363
# ℹ 1 more variable: nobs <int>
> library(ggplot2)
> ggplot(tidy(sfit), aes(time, estimate)) + geom_line() + geom_ribbon(aes(ymin = conf.low, 
+     ymax = conf.high), alpha = 0.25)
> fitCI <- survfit(Surv(stop, status * as.numeric(event), type = "mstate") ~ 
+     1, data = mgus1, subset = (start == 0))
> td_multi <- tidy(fitCI)
> td_multi
# A tibble: 711 × 9
    time n.risk n.event n.censor estimate std.error conf.high conf.low state
   <dbl>  <int>   <int>    <int>    <dbl>     <dbl>     <dbl>    <dbl> <chr>
 1     6    241       0        0    0.996   0.00414     1        0.988 (s0) 
 2     7    240       0        0    0.992   0.00584     1        0.980 (s0) 
 3    31    239       0        0    0.988   0.00714     1        0.974 (s0) 
 4    32    238       0        0    0.983   0.00823     1.00     0.967 (s0) 
 5    39    237       0        0    0.979   0.00918     0.997    0.961 (s0) 
 6    60    236       0        0    0.975   0.0100      0.995    0.956 (s0) 
 7    61    235       0        0    0.967   0.0115      0.990    0.944 (s0) 
 8   152    233       0        0    0.963   0.0122      0.987    0.939 (s0) 
 9   153    232       0        0    0.959   0.0128      0.984    0.934 (s0) 
10   174    231       0        0    0.954   0.0134      0.981    0.928 (s0) 
# ℹ 701 more rows
> ggplot(td_multi, aes(time, estimate, group = state)) + geom_line(aes(color = state)) + 
+     geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.25)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("tidy.survreg")
> ### * tidy.survreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survreg
> ### Title: Tidy a(n) survreg object
> ### Aliases: tidy.survreg survreg_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survival", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(survival)
+ 
+ # fit model
+ sr <- survreg(
+   Surv(futime, fustat) ~ ecog.ps + rx,
+   ovarian,
+   dist = "exponential"
+ )
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(sr)
+ augment(sr, ovarian)
+ glance(sr)
+ 
+ # coefficient plot
+ td <- tidy(sr, conf.int = TRUE)
+ 
+ library(ggplot2)
+ 
+ ggplot(td, aes(estimate, term)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> sr <- survreg(Surv(futime, fustat) ~ ecog.ps + rx, ovarian, dist = "exponential")
> tidy(sr)
# A tibble: 3 × 5
  term        estimate std.error statistic     p.value
  <chr>          <dbl>     <dbl>     <dbl>       <dbl>
1 (Intercept)    6.96      1.32      5.27  0.000000139
2 ecog.ps       -0.433     0.587    -0.738 0.461      
3 rx             0.582     0.587     0.991 0.322      
> augment(sr, ovarian)
# A tibble: 26 × 9
   futime fustat   age resid.ds    rx ecog.ps .fitted .se.fit .resid
    <dbl>  <dbl> <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>
 1     59      1  72.3        2     1       1   1224.    639. -1165.
 2    115      1  74.5        2     1       1   1224.    639. -1109.
 3    156      1  66.5        2     1       2    794.    350.  -638.
 4    421      0  53.4        2     2       1   2190.   1202. -1769.
 5    431      1  50.3        2     1       1   1224.    639.  -793.
 6    448      0  56.4        1     1       2    794.    350.  -346.
 7    464      1  56.9        2     2       2   1420.    741.  -956.
 8    475      1  59.9        2     2       2   1420.    741.  -945.
 9    477      0  64.2        2     1       1   1224.    639.  -747.
10    563      1  55.2        1     2       2   1420.    741.  -857.
# ℹ 16 more rows
> glance(sr)
# A tibble: 1 × 9
   iter    df statistic logLik   AIC   BIC df.residual  nobs p.value
  <int> <int>     <dbl>  <dbl> <dbl> <dbl>       <int> <int>   <dbl>
1     4     3      1.67  -97.2  200.  204.          23    26   0.434
> td <- tidy(sr, conf.int = TRUE)
> library(ggplot2)
> ggplot(td, aes(estimate, term)) + geom_point() + geom_errorbarh(aes(xmin = conf.low, 
+     xmax = conf.high), height = 0) + geom_vline(xintercept = 0)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:survival’

> nameEx("tidy.svyolr")
> ### * tidy.svyolr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.svyolr
> ### Title: Tidy a(n) svyolr object
> ### Aliases: tidy.svyolr svyolr_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("survey", "MASS"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(broom)
+ library(survey)
+ 
+ data(api)
+ dclus1 <- svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ dclus1 <- update(dclus1, mealcat = cut(meals, c(0, 25, 50, 75, 100)))
+ 
+ m <- svyolr(mealcat ~ avg.ed + mobility + stype, design = dclus1)
+ 
+ m
+ 
+ tidy(m, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.systemfit")
> ### * tidy.systemfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.systemfit
> ### Title: Tidy a(n) systemfit object
> ### Aliases: tidy.systemfit systemfit_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("systemfit")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ set.seed(27)
+ 
+ # load libraries for models and data
+ library(systemfit)
+ 
+ # generate data
+ df <- data.frame(
+   X = rnorm(100),
+   Y = rnorm(100),
+   Z = rnorm(100),
+   W = rnorm(100)
+ )
+ 
+ # fit model
+ fit <- systemfit(formula = list(Y ~ Z, W ~ X), data = df, method = "SUR")
+ 
+ # summarize model fit with tidiers
+ tidy(fit)
+ tidy(fit, conf.int = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.ts")
> ### * tidy.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ts
> ### Title: Tidy a(n) ts object
> ### Aliases: tidy.ts
> 
> ### ** Examples
> 
> 
> set.seed(678)
> 
> tidy(ts(1:10, frequency = 4, start = c(1959, 2)))
# A tibble: 10 × 2
   index value
   <dbl> <int>
 1 1959.     1
 2 1960.     2
 3 1960.     3
 4 1960      4
 5 1960.     5
 6 1960.     6
 7 1961.     7
 8 1961      8
 9 1961.     9
10 1962.    10
> 
> z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)
> colnames(z) <- c("Aa", "Bb", "Cc")
> 
> tidy(z)
# A tibble: 300 × 3
   index series  value
   <dbl> <chr>   <dbl>
 1 1961  Aa     -0.773
 2 1961  Bb      0.855
 3 1961  Cc     -1.43 
 4 1961. Aa      0.933
 5 1961. Bb     -0.738
 6 1961. Cc     -2.55 
 7 1961. Aa      0.466
 8 1961. Bb      2.37 
 9 1961. Cc      1.22 
10 1961. Aa     -1.08 
# ℹ 290 more rows
> 
> 
> 
> cleanEx()
> nameEx("tidy.varest")
> ### * tidy.varest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.varest
> ### Title: Tidy a(n) varest object
> ### Aliases: tidy.varest vars_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("vars")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(vars)
+ 
+ # load data
+ data("Canada", package = "vars")
+ 
+ # fit models
+ mod <- VAR(Canada, p = 1, type = "both")
+ 
+ # summarize model fit with tidiers
+ tidy(mod)
+ glance(mod)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy.zoo")
> ### * tidy.zoo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.zoo
> ### Title: Tidy a(n) zoo object
> ### Aliases: tidy.zoo zoo_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("zoo", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(zoo)
+ library(ggplot2)
+ 
+ set.seed(1071)
+ 
+ # generate data
+ Z.index <- as.Date(sample(12450:12500, 10))
+ Z.data <- matrix(rnorm(30), ncol = 3)
+ colnames(Z.data) <- c("Aa", "Bb", "Cc")
+ Z <- zoo(Z.data, Z.index)
+ 
+ # summarize model fit with tidiers + visualization
+ tidy(Z)
+ 
+ ggplot(tidy(Z), aes(index, value, color = series)) +
+   geom_line()
+ 
+ ggplot(tidy(Z), aes(index, value)) +
+   geom_line() +
+   facet_wrap(~series, ncol = 1)
+ 
+ Zrolled <- rollmean(Z, 5)
+ ggplot(tidy(Zrolled), aes(index, value, color = series)) +
+   geom_line()
+ ## Don't show: 
+ }) # examplesIf
> library(zoo)

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> library(ggplot2)
> set.seed(1071)
> Z.index <- as.Date(sample(12450:12500, 10))
> Z.data <- matrix(rnorm(30), ncol = 3)
> colnames(Z.data) <- c("Aa", "Bb", "Cc")
> Z <- zoo(Z.data, Z.index)
> tidy(Z)
# A tibble: 30 × 3
   index      series   value
   <date>     <chr>    <dbl>
 1 2004-02-02 Aa     -0.537 
 2 2004-02-02 Bb      0.746 
 3 2004-02-02 Cc     -0.634 
 4 2004-02-06 Aa     -0.586 
 5 2004-02-06 Bb     -0.0779
 6 2004-02-06 Cc      0.0397
 7 2004-02-08 Aa     -0.289 
 8 2004-02-08 Bb     -1.11  
 9 2004-02-08 Cc     -0.341 
10 2004-02-12 Aa      1.85  
# ℹ 20 more rows
> ggplot(tidy(Z), aes(index, value, color = series)) + geom_line()
> ggplot(tidy(Z), aes(index, value)) + geom_line() + facet_wrap(~series, 
+     ncol = 1)
> Zrolled <- rollmean(Z, 5)
> ggplot(tidy(Zrolled), aes(index, value, color = series)) + geom_line()
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:zoo’

> nameEx("tidy_gam_hastie")
> ### * tidy_gam_hastie
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Gam
> ### Title: Tidy a(n) Gam object
> ### Aliases: tidy.Gam Gam_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("gam")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # load libraries for models and data
+ library(gam)
+ 
+ # fit model
+ g <- gam(mpg ~ s(hp, 4) + am + qsec, data = mtcars)
+ 
+ # summarize model fit with tidiers
+ tidy(g)
+ glance(g)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy_irlba")
> ### * tidy_irlba
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_irlba
> ### Title: Tidy a(n) irlba object masquerading as list
> ### Aliases: tidy_irlba tidy.irlba irlba_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("modeldata", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(modeldata)
+ data(hpc_data)
+ 
+ mat <- scale(as.matrix(hpc_data[, 2:5]))
+ s <- svd(mat)
+ 
+ tidy_u <- tidy(s, matrix = "u")
+ tidy_u
+ 
+ tidy_d <- tidy(s, matrix = "d")
+ tidy_d
+ 
+ tidy_v <- tidy(s, matrix = "v")
+ tidy_v
+ 
+ library(ggplot2)
+ library(dplyr)
+ 
+ ggplot(tidy_d, aes(PC, percent)) +
+   geom_point() +
+   ylab("% of variance explained")
+ 
+ tidy_u %>%
+   mutate(class = hpc_data$class[row]) %>%
+   ggplot(aes(class, value)) +
+   geom_boxplot() +
+   facet_wrap(~PC, scale = "free_y")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy_optim")
> ### * tidy_optim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_optim
> ### Title: Tidy a(n) optim object masquerading as list
> ### Aliases: tidy_optim optim_tidiers tidy.optim
> 
> ### ** Examples
> 
> 
> f <- function(x) (x[1] - 2)^2 + (x[2] - 3)^2 + (x[3] - 8)^2
> o <- optim(c(1, 1, 1), f)
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy_svd")
> ### * tidy_svd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_svd
> ### Title: Tidy a(n) svd object masquerading as list
> ### Aliases: tidy_svd svd_tidiers
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("modeldata", "ggplot2"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(modeldata)
+ data(hpc_data)
+ 
+ mat <- scale(as.matrix(hpc_data[, 2:5]))
+ s <- svd(mat)
+ 
+ tidy_u <- tidy(s, matrix = "u")
+ tidy_u
+ 
+ tidy_d <- tidy(s, matrix = "d")
+ tidy_d
+ 
+ tidy_v <- tidy(s, matrix = "v")
+ tidy_v
+ 
+ library(ggplot2)
+ library(dplyr)
+ 
+ ggplot(tidy_d, aes(PC, percent)) +
+   geom_point() +
+   ylab("% of variance explained")
+ 
+ tidy_u %>%
+   mutate(class = hpc_data$class[row]) %>%
+   ggplot(aes(class, value)) +
+   geom_boxplot() +
+   facet_wrap(~PC, scale = "free_y")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("tidy_xyz")
> ### * tidy_xyz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_xyz
> ### Title: Tidy a(n) xyz object masquerading as list
> ### Aliases: tidy_xyz xyz_tidiers
> 
> ### ** Examples
> 
> 
> A <- list(x = 1:5, y = 1:3, z = matrix(runif(5 * 3), nrow = 5))
> image(A)
> tidy(A)
# A tibble: 15 × 3
       x     y      z
   <int> <int>  <dbl>
 1     1     1 0.266 
 2     2     1 0.372 
 3     3     1 0.573 
 4     4     1 0.908 
 5     5     1 0.202 
 6     1     2 0.898 
 7     2     2 0.945 
 8     3     2 0.661 
 9     4     2 0.629 
10     5     2 0.0618
11     1     3 0.206 
12     2     3 0.177 
13     3     3 0.687 
14     4     3 0.384 
15     5     3 0.770 
> 
> 
> 
> cleanEx()
> nameEx("vector_tidiers")
> ### * vector_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.numeric
> ### Title: Tidy atomic vectors
> ### Aliases: tidy.numeric tidy.character tidy.logical
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D x <- 1:5
> ##D names(x) <- letters[1:5]
> ##D tidy(x)
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.023 7.997 17.813 0.002 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
