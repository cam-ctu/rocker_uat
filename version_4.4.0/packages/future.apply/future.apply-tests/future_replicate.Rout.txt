
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[09:29:21.586] plan(): Setting new future strategy stack:
[09:29:21.587] List of future strategies:
[09:29:21.587] 1. sequential:
[09:29:21.587]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.587]    - tweaked: FALSE
[09:29:21.587]    - call: future::plan("sequential")
[09:29:21.600] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[09:29:21.623] plan(): Setting new future strategy stack:
[09:29:21.623] List of future strategies:
[09:29:21.623] 1. sequential:
[09:29:21.623]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.623]    - tweaked: FALSE
[09:29:21.623]    - call: plan(strategy)
[09:29:21.635] plan(): nbrOfWorkers() = 1
[09:29:21.636] future_lapply() ...
[09:29:21.640] Generating random seeds ...
[09:29:21.640] Generating random seed streams for 5 elements ...
[09:29:21.640] Generating random seed streams for 5 elements ... DONE
[09:29:21.640] Generating random seeds ... DONE
[09:29:21.640] Will set RNG state on exit: 10403, 10, 1121545315, 223238401, -550546320, 561238030, -165851015, 1878200331, 414114106, 1203830844, 1123247999, 1912241365, -495820564, 1668422210, -101991011, 858130455, -2003333762, -1924402376, -1215435749, -251161223, -2002205752, 1861316598, 184848945, -1189583773, -292664270, -61355644, -115544121, 1019044509, 1313047060, 319844538, -2125734651, 1460954847, 559475558, 1590921968, -84518381, -853986383, 401104480, -684160002, 1930752905, 1770804411, -473132918, -773655700, -738477841, -1527819483, -80290340, -1962570830, -1505824083, -319059353, -1762207346, 573976168, 840088171, -1167485943, -813315432, 884878790, -1924829919, 1128594867, 1400404258, 1884730132, -2001359977, -301681779, 1222651556, -1230864246, 1810228981, -1424565937, 1444337238, -224449280, -926681021, -1655694367, 1360675664, -832866898, 1937578841, -1826401941, 325425370, 1517048220, -636797537, -1164644363, 2000559756, 558267234, 72651581, 891577271, 1129506910, 722404760, -1857834757, -1091130215, 335965480, -2146460714, 1908891729, -1966501117, -1117805934, 303730724, 1058078439, -149630147, -1501877324, -1252796390, -222712987, -1110411777, 2027141254, 1529635856, -618703181, -2021636783, 1463622912, 1603413982, -986323927, 1406010331, -1992091414, -155601268, 1800792527, 1508859269, -836516292, 875793170, -1964529651, 1953569607, 2073940270, 2090555528, 178716043, -509409943, -38967496, -1240864282, 1286294913, -1617469165, -1736442174, -11208332, 1789976951, -2120174995, -1116652284, 1874237482, 2132768149, 112482863, 1168254774, -181397664, 983727523, -65259839, 864308912, -1781519922, 1439579449, 1136963915, 1389089530, 120243196, -1018747841, -1547936491, 973293100, 1866328834, 1414346717, 1262658263, -1016513090, -53151752, 759329755, -1974448583, 381491080, 354215734, 843896177, -1354395741, -1323419918, -618529212, -484204281, -901457699, -405533228, -1819344646, -759261115, -1574739809, -1545041370, -912769360, 1252991827, -256258447, -229805152, -499264706, -503727543, -176075013, -576958774, 1560711212, 27879471, 63625445, 656617884, 236182514, -1064343955, -325946457, 1476963790, 81521448, -235298517, -772318391, 1840291928, 810587398, 1457406177, 1644476531, -1065675550, 768959572, -258586281, -1758615219, 177622244, -130912054, 53730613, 246346639, -701405034, 104396864, 708321539, -1315074783, 1348607504, -1586663954, 864117145, 6401579, 1036351258, -813511204, 2137535455, -192662603, 827608396, -1286722654, 232555261, -1043964937, -126745314, 2080663512, -1443268293, 1475727065, 1341383272, -798801002, -1306106095, 126173379, 1493229778, 418268516, -391808857, -743551491, -2141949964, -1984587558, 1975179813, -1619085505, -1375308602, -1456723632, 1035540851, 1762534289, 1668986304, -1978307632, 1645067618, 1987972840, 308178124, 1710088700, 1307983346, -288217984, 408726004, -413939064, 146316090, 322112848, 62245996, 1559745940, 934084690, 714677728, -1098427188, 702070432, -65638014, 357591272, 792759020, -1690507972, -418361230, 482439792, -1518372316, 1245882424, 1978427674, -934796080, 10742076, 660657044, 159614850, -281121856, 318764604, 490512784, -404768734, -280505080, -74307444, -125833444, 1549210770, 943281536, -1473626092, 549439272, -235813318, 772837840, -363906708, 1509082036, -1421735406, 1417193440, 1343367628, -369395488, -909980638, 1029157672, 929257996, 460714812, 979054578, -1541840144, 51223108, 2077507160, -601770182, -1670279184, -845143364, -1218185964, -2638654, -645063584, -1092622980, 859938768, -1875259102, -271272280, -1103849588, -1337957188, -1795933390, -1470986688, 1299301556, 459863112, -961989190, -707102192, 922131692, -962231980, 63271698, -353505888, 1736391372, 1613167200, -1895968830, -41159896, -1930888788, -1626612420, -1599464590, 742780208, 1069016868, -1374920, -625588518, 1573281680, -1093084420, 1005329300, -1367706558, -2094140160, 1557366844, 1359854928, -92674910, -31020216, 582704908, 1377255132, 2051780434, 1713157760, -1179518892, -1227013144, 1862527738, 1869878608, 336985900, 1964974964, 696034194, -1918782880, 856037260, -1622067360, -1168309278, 1945017256, -260944692, -936142340, -1178060878, 1764279792, -975215164, -423020200, -1766519430, 1917631920, 1137583036, -539160492, 1877602242, -996270048, -228200260, -943318448, -1252120606, -10125720, -1303163316, -1153699588, 834058226, -1113807616, 1776165748, 810098696, -1865715270, -1821811248, 65713132, -39728236, 1074387922, 1140565856, -2109488820, -1210371808, -1122037886, -1656977688, 626710764, -769829316, -1998933134, 629003888, -650091484, 1299476280, -1517397862, 858779344, -914830148, 1906444948, -875830654, 1695060160, -1045002948, -69609328, -759769566, 1239446024, -132874996, 127533724, -1247201774, 1675712896, 1732893204, -1696948696, 98820410, -1090966576, 1274826348, 412484404, -1271651694, -2122078880, 1452416332, 1976595424, -1237561438, -165494872, 1872996236, -1374909764, 212566898, 438429936, 1313739844, 833058136, -2011074502, -833432720, -771341252, -45118700, 1643681218, 2123828448, 944676732, -595974448, -1867433310, -2067188696, -190504692, -2136548420, 1985260850, -126285888, -1526643148, -482782264, -1647645510, -589848688, -1160445460, -1470045100, -471065966, 1677183776, 94759372, 1482163168, 1858621122, -1558141400, -783466836, 1627319996, 94245362, -1539780304, 709580964, 1071012536, -1585019046, 516365712, -1964216964, -1701099244, -959589054, 1680732928, -46873668, -1568689328, 745065762, -2041759416, -1155651518, -419395497, 1214098337, -1133523866, 1259357284, -52371563, -739886913, -985872296, -883565450, -1229364093, 433079493, -1762786846, 1165895760, -1652385415, 2011930283, 1327961628, 1014800714, 1827189055, 2067732361, -1368795234, -489273780, 1354330141, 1084957095, 1196016848, 1876403822, -729284325, -951889283, -1907718038, 241341704, -342933071, -1665673693, -1977363676, 94516178, 679309351, -389576079, 75759798, -715753388, -618960667, 1880990959, 1717831720, 400792710, 1236416179, 1439561749, 724974194, 354256576, 1977563945, 2018425243, -867746196, -1661246854, 499344303, 2069919417, -81168178, 1655566876, -1468786291, -754706441, -1937097984, 1573208414, 458555947, -1491391187, 1965961626, -1535275176, 859227841, -269731469, 946401940, 1013950242, 1894285879, -1476163839, 29195782, -265092028, 347452789, -1639982881, -696734664, 278989846, 1964452899, -234955803, -2139484670, -1575426960, -1271066087, -1984316405, -1709072644, 1825085226, 875641183, -1618226967, 172894206, -137171988, 1294720829, 768328455, -2083153168, -804240754, 1965841595, 219855005, 947766346, 632659560, 1745408593, -1114320573, -2138617788, 2087422706, 540971719, -997019503, -120668650, 1750088820, -1411074299, 2084951375, 667690824, -1448628506, -1769156589, 1471211381, -449083566, 1392476064, -1069479287, -348606789, -1579115252, -28696422, 431379983, 330957401, 553352942, -76948100, 428072429, 136362647, 1031443808, -491302594, 592542219, 891485837, -717986886, -1824359944, -1420819039, -1480352941, 996913780, -432761854, 580826775, -557424543, 1031109798, -651457372, -245232299, -777411073, -391435112, 248650166, 876225091, -1482487931, -1139301342, -1360664816, -916507975, 2083202923, 734619228, -1125569654, 959726463, -1191334199, -1903843490, -371557364, 1946368989, 1168490215, 863682320, 934448686, 926987483, 772102589, 763500330, 612249544, 1179174129, 68319843, 329588324, -895031918, 507548263, 1305496113, 1689003894, 849464468, 1422123685, 1772973999, -306729880, -779337658, -1115166764
[09:29:21.641] Number of chunks: 1
[09:29:21.641] getGlobalsAndPackagesXApply() ...
[09:29:21.642]  - future.globals: TRUE
[09:29:21.642] getGlobalsAndPackages() ...
[09:29:21.642] Searching for globals...
[09:29:21.644] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.644] Searching for globals ... DONE
[09:29:21.645] Resolving globals: FALSE
[09:29:21.645] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.646] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.646] - globals: [1] ‘FUN’
[09:29:21.646] 
[09:29:21.646] getGlobalsAndPackages() ... DONE
[09:29:21.646]  - globals found/used: [n=1] ‘FUN’
[09:29:21.646]  - needed namespaces: [n=0] 
[09:29:21.646] Finding globals ... DONE
[09:29:21.647]  - use_args: TRUE
[09:29:21.647]  - Getting '...' globals ...
[09:29:21.647] resolve() on list ...
[09:29:21.647]  recursive: 0
[09:29:21.648]  length: 1
[09:29:21.648]  elements: ‘...’
[09:29:21.648]  length: 0 (resolved future 1)
[09:29:21.648] resolve() on list ... DONE
[09:29:21.648]    - '...' content: [n=0] 
[09:29:21.648] List of 1
[09:29:21.648]  $ ...: list()
[09:29:21.648]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.648]  - attr(*, "where")=List of 1
[09:29:21.648]   ..$ ...:<environment: 0x55d1c98549b8> 
[09:29:21.648]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.648]  - attr(*, "resolved")= logi TRUE
[09:29:21.648]  - attr(*, "total_size")= num NA
[09:29:21.653]  - Getting '...' globals ... DONE
[09:29:21.653] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:21.653] List of 2
[09:29:21.653]  $ ...future.FUN:function (...)  
[09:29:21.653]  $ ...          : list()
[09:29:21.653]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.653]  - attr(*, "where")=List of 2
[09:29:21.653]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.653]   ..$ ...          :<environment: 0x55d1c98549b8> 
[09:29:21.653]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.653]  - attr(*, "resolved")= logi FALSE
[09:29:21.653]  - attr(*, "total_size")= num 616
[09:29:21.656] Packages to be attached in all futures: [n=0] 
[09:29:21.656] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.656] Number of futures (= number of chunks): 1
[09:29:21.656] Launching 1 futures (chunks) ...
[09:29:21.656] Chunk #1 of 1 ...
[09:29:21.656]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.656] getGlobalsAndPackages() ...
[09:29:21.657] Searching for globals...
[09:29:21.657] 
[09:29:21.657] Searching for globals ... DONE
[09:29:21.657] - globals: [0] <none>
[09:29:21.657] getGlobalsAndPackages() ... DONE
[09:29:21.657]    + additional globals found: [n=0] 
[09:29:21.657]    + additional namespaces needed: [n=0] 
[09:29:21.657]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.657]  - seeds: [5] <seeds>
[09:29:21.658]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.658] getGlobalsAndPackages() ...
[09:29:21.658] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.658] Resolving globals: FALSE
[09:29:21.658] Tweak future expression to call with '...' arguments ...
[09:29:21.658] {
[09:29:21.658]     do.call(function(...) {
[09:29:21.658]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.658]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.658]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.658]             on.exit(options(oopts), add = TRUE)
[09:29:21.658]         }
[09:29:21.658]         {
[09:29:21.658]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.658]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.658]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.658]                   envir = globalenv(), inherits = FALSE)
[09:29:21.658]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.658]             })
[09:29:21.658]         }
[09:29:21.658]     }, args = future.call.arguments)
[09:29:21.658] }
[09:29:21.658] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.659] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.659] 
[09:29:21.659] getGlobalsAndPackages() ... DONE
[09:29:21.660] run() for ‘Future’ ...
[09:29:21.660] - state: ‘created’
[09:29:21.660] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:29:21.660] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.660] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:29:21.660]   - Field: ‘label’
[09:29:21.661]   - Field: ‘local’
[09:29:21.661]   - Field: ‘owner’
[09:29:21.661]   - Field: ‘envir’
[09:29:21.661]   - Field: ‘packages’
[09:29:21.661]   - Field: ‘gc’
[09:29:21.661]   - Field: ‘conditions’
[09:29:21.661]   - Field: ‘expr’
[09:29:21.661]   - Field: ‘uuid’
[09:29:21.661]   - Field: ‘seed’
[09:29:21.661]   - Field: ‘version’
[09:29:21.661]   - Field: ‘result’
[09:29:21.662]   - Field: ‘asynchronous’
[09:29:21.662]   - Field: ‘calls’
[09:29:21.662]   - Field: ‘globals’
[09:29:21.662]   - Field: ‘stdout’
[09:29:21.662]   - Field: ‘earlySignal’
[09:29:21.662]   - Field: ‘lazy’
[09:29:21.662]   - Field: ‘state’
[09:29:21.662] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:29:21.662] - Launch lazy future ...
[09:29:21.663] Packages needed by the future expression (n = 0): <none>
[09:29:21.665] Packages needed by future strategies (n = 0): <none>
[09:29:21.666] {
[09:29:21.666]     {
[09:29:21.666]         {
[09:29:21.666]             ...future.startTime <- base::Sys.time()
[09:29:21.666]             {
[09:29:21.666]                 {
[09:29:21.666]                   {
[09:29:21.666]                     base::local({
[09:29:21.666]                       has_future <- base::requireNamespace("future", 
[09:29:21.666]                         quietly = TRUE)
[09:29:21.666]                       if (has_future) {
[09:29:21.666]                         ns <- base::getNamespace("future")
[09:29:21.666]                         version <- ns[[".package"]][["version"]]
[09:29:21.666]                         if (is.null(version)) 
[09:29:21.666]                           version <- utils::packageVersion("future")
[09:29:21.666]                       }
[09:29:21.666]                       else {
[09:29:21.666]                         version <- NULL
[09:29:21.666]                       }
[09:29:21.666]                       if (!has_future || version < "1.8.0") {
[09:29:21.666]                         info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.666]                           "", base::R.version$version.string), 
[09:29:21.666]                           platform = base::sprintf("%s (%s-bit)", 
[09:29:21.666]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.666]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.666]                             "release", "version")], collapse = " "), 
[09:29:21.666]                           hostname = base::Sys.info()[["nodename"]])
[09:29:21.666]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.666]                           info)
[09:29:21.666]                         info <- base::paste(info, collapse = "; ")
[09:29:21.666]                         if (!has_future) {
[09:29:21.666]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.666]                             info)
[09:29:21.666]                         }
[09:29:21.666]                         else {
[09:29:21.666]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.666]                             info, version)
[09:29:21.666]                         }
[09:29:21.666]                         base::stop(msg)
[09:29:21.666]                       }
[09:29:21.666]                     })
[09:29:21.666]                   }
[09:29:21.666]                   ...future.strategy.old <- future::plan("list")
[09:29:21.666]                   options(future.plan = NULL)
[09:29:21.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.666]                 }
[09:29:21.666]                 ...future.workdir <- getwd()
[09:29:21.666]             }
[09:29:21.666]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.666]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.666]         }
[09:29:21.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:21.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.666]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.666]             base::names(...future.oldOptions))
[09:29:21.666]     }
[09:29:21.666]     if (FALSE) {
[09:29:21.666]     }
[09:29:21.666]     else {
[09:29:21.666]         if (TRUE) {
[09:29:21.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.666]                 open = "w")
[09:29:21.666]         }
[09:29:21.666]         else {
[09:29:21.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.666]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.666]         }
[09:29:21.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.666]             base::sink(type = "output", split = FALSE)
[09:29:21.666]             base::close(...future.stdout)
[09:29:21.666]         }, add = TRUE)
[09:29:21.666]     }
[09:29:21.666]     ...future.frame <- base::sys.nframe()
[09:29:21.666]     ...future.conditions <- base::list()
[09:29:21.666]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.666]     if (FALSE) {
[09:29:21.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.666]     }
[09:29:21.666]     ...future.result <- base::tryCatch({
[09:29:21.666]         base::withCallingHandlers({
[09:29:21.666]             ...future.value <- base::withVisible(base::local({
[09:29:21.666]                 do.call(function(...) {
[09:29:21.666]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.666]                   if (!identical(...future.globals.maxSize.org, 
[09:29:21.666]                     ...future.globals.maxSize)) {
[09:29:21.666]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.666]                     on.exit(options(oopts), add = TRUE)
[09:29:21.666]                   }
[09:29:21.666]                   {
[09:29:21.666]                     lapply(seq_along(...future.elements_ii), 
[09:29:21.666]                       FUN = function(jj) {
[09:29:21.666]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.666]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.666]                           envir = globalenv(), inherits = FALSE)
[09:29:21.666]                         ...future.FUN(...future.X_jj, ...)
[09:29:21.666]                       })
[09:29:21.666]                   }
[09:29:21.666]                 }, args = future.call.arguments)
[09:29:21.666]             }))
[09:29:21.666]             future::FutureResult(value = ...future.value$value, 
[09:29:21.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.666]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.666]                     ...future.globalenv.names))
[09:29:21.666]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.666]         }, condition = base::local({
[09:29:21.666]             c <- base::c
[09:29:21.666]             inherits <- base::inherits
[09:29:21.666]             invokeRestart <- base::invokeRestart
[09:29:21.666]             length <- base::length
[09:29:21.666]             list <- base::list
[09:29:21.666]             seq.int <- base::seq.int
[09:29:21.666]             signalCondition <- base::signalCondition
[09:29:21.666]             sys.calls <- base::sys.calls
[09:29:21.666]             `[[` <- base::`[[`
[09:29:21.666]             `+` <- base::`+`
[09:29:21.666]             `<<-` <- base::`<<-`
[09:29:21.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.666]                   3L)]
[09:29:21.666]             }
[09:29:21.666]             function(cond) {
[09:29:21.666]                 is_error <- inherits(cond, "error")
[09:29:21.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.666]                   NULL)
[09:29:21.666]                 if (is_error) {
[09:29:21.666]                   sessionInformation <- function() {
[09:29:21.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.666]                       search = base::search(), system = base::Sys.info())
[09:29:21.666]                   }
[09:29:21.666]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.666]                     cond$call), session = sessionInformation(), 
[09:29:21.666]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.666]                   signalCondition(cond)
[09:29:21.666]                 }
[09:29:21.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.666]                 "immediateCondition"))) {
[09:29:21.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.666]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.666]                   if (TRUE && !signal) {
[09:29:21.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.666]                     {
[09:29:21.666]                       inherits <- base::inherits
[09:29:21.666]                       invokeRestart <- base::invokeRestart
[09:29:21.666]                       is.null <- base::is.null
[09:29:21.666]                       muffled <- FALSE
[09:29:21.666]                       if (inherits(cond, "message")) {
[09:29:21.666]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.666]                         if (muffled) 
[09:29:21.666]                           invokeRestart("muffleMessage")
[09:29:21.666]                       }
[09:29:21.666]                       else if (inherits(cond, "warning")) {
[09:29:21.666]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.666]                         if (muffled) 
[09:29:21.666]                           invokeRestart("muffleWarning")
[09:29:21.666]                       }
[09:29:21.666]                       else if (inherits(cond, "condition")) {
[09:29:21.666]                         if (!is.null(pattern)) {
[09:29:21.666]                           computeRestarts <- base::computeRestarts
[09:29:21.666]                           grepl <- base::grepl
[09:29:21.666]                           restarts <- computeRestarts(cond)
[09:29:21.666]                           for (restart in restarts) {
[09:29:21.666]                             name <- restart$name
[09:29:21.666]                             if (is.null(name)) 
[09:29:21.666]                               next
[09:29:21.666]                             if (!grepl(pattern, name)) 
[09:29:21.666]                               next
[09:29:21.666]                             invokeRestart(restart)
[09:29:21.666]                             muffled <- TRUE
[09:29:21.666]                             break
[09:29:21.666]                           }
[09:29:21.666]                         }
[09:29:21.666]                       }
[09:29:21.666]                       invisible(muffled)
[09:29:21.666]                     }
[09:29:21.666]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.666]                   }
[09:29:21.666]                 }
[09:29:21.666]                 else {
[09:29:21.666]                   if (TRUE) {
[09:29:21.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.666]                     {
[09:29:21.666]                       inherits <- base::inherits
[09:29:21.666]                       invokeRestart <- base::invokeRestart
[09:29:21.666]                       is.null <- base::is.null
[09:29:21.666]                       muffled <- FALSE
[09:29:21.666]                       if (inherits(cond, "message")) {
[09:29:21.666]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.666]                         if (muffled) 
[09:29:21.666]                           invokeRestart("muffleMessage")
[09:29:21.666]                       }
[09:29:21.666]                       else if (inherits(cond, "warning")) {
[09:29:21.666]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.666]                         if (muffled) 
[09:29:21.666]                           invokeRestart("muffleWarning")
[09:29:21.666]                       }
[09:29:21.666]                       else if (inherits(cond, "condition")) {
[09:29:21.666]                         if (!is.null(pattern)) {
[09:29:21.666]                           computeRestarts <- base::computeRestarts
[09:29:21.666]                           grepl <- base::grepl
[09:29:21.666]                           restarts <- computeRestarts(cond)
[09:29:21.666]                           for (restart in restarts) {
[09:29:21.666]                             name <- restart$name
[09:29:21.666]                             if (is.null(name)) 
[09:29:21.666]                               next
[09:29:21.666]                             if (!grepl(pattern, name)) 
[09:29:21.666]                               next
[09:29:21.666]                             invokeRestart(restart)
[09:29:21.666]                             muffled <- TRUE
[09:29:21.666]                             break
[09:29:21.666]                           }
[09:29:21.666]                         }
[09:29:21.666]                       }
[09:29:21.666]                       invisible(muffled)
[09:29:21.666]                     }
[09:29:21.666]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.666]                   }
[09:29:21.666]                 }
[09:29:21.666]             }
[09:29:21.666]         }))
[09:29:21.666]     }, error = function(ex) {
[09:29:21.666]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.666]                 ...future.rng), started = ...future.startTime, 
[09:29:21.666]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.666]             version = "1.8"), class = "FutureResult")
[09:29:21.666]     }, finally = {
[09:29:21.666]         if (!identical(...future.workdir, getwd())) 
[09:29:21.666]             setwd(...future.workdir)
[09:29:21.666]         {
[09:29:21.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.666]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.666]             }
[09:29:21.666]             base::options(...future.oldOptions)
[09:29:21.666]             if (.Platform$OS.type == "windows") {
[09:29:21.666]                 old_names <- names(...future.oldEnvVars)
[09:29:21.666]                 envs <- base::Sys.getenv()
[09:29:21.666]                 names <- names(envs)
[09:29:21.666]                 common <- intersect(names, old_names)
[09:29:21.666]                 added <- setdiff(names, old_names)
[09:29:21.666]                 removed <- setdiff(old_names, names)
[09:29:21.666]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.666]                   envs[common]]
[09:29:21.666]                 NAMES <- toupper(changed)
[09:29:21.666]                 args <- list()
[09:29:21.666]                 for (kk in seq_along(NAMES)) {
[09:29:21.666]                   name <- changed[[kk]]
[09:29:21.666]                   NAME <- NAMES[[kk]]
[09:29:21.666]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.666]                     next
[09:29:21.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.666]                 }
[09:29:21.666]                 NAMES <- toupper(added)
[09:29:21.666]                 for (kk in seq_along(NAMES)) {
[09:29:21.666]                   name <- added[[kk]]
[09:29:21.666]                   NAME <- NAMES[[kk]]
[09:29:21.666]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.666]                     next
[09:29:21.666]                   args[[name]] <- ""
[09:29:21.666]                 }
[09:29:21.666]                 NAMES <- toupper(removed)
[09:29:21.666]                 for (kk in seq_along(NAMES)) {
[09:29:21.666]                   name <- removed[[kk]]
[09:29:21.666]                   NAME <- NAMES[[kk]]
[09:29:21.666]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.666]                     next
[09:29:21.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.666]                 }
[09:29:21.666]                 if (length(args) > 0) 
[09:29:21.666]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.666]             }
[09:29:21.666]             else {
[09:29:21.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.666]             }
[09:29:21.666]             {
[09:29:21.666]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.666]                   0L) {
[09:29:21.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.666]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.666]                   base::options(opts)
[09:29:21.666]                 }
[09:29:21.666]                 {
[09:29:21.666]                   {
[09:29:21.666]                     base::assign(".Random.seed", c(10403L, 10L, 
[09:29:21.666]                     1121545315L, 223238401L, -550546320L, 561238030L, 
[09:29:21.666]                     -165851015L, 1878200331L, 414114106L, 1203830844L, 
[09:29:21.666]                     1123247999L, 1912241365L, -495820564L, 1668422210L, 
[09:29:21.666]                     -101991011L, 858130455L, -2003333762L, -1924402376L, 
[09:29:21.666]                     -1215435749L, -251161223L, -2002205752L, 
[09:29:21.666]                     1861316598L, 184848945L, -1189583773L, -292664270L, 
[09:29:21.666]                     -61355644L, -115544121L, 1019044509L, 1313047060L, 
[09:29:21.666]                     319844538L, -2125734651L, 1460954847L, 559475558L, 
[09:29:21.666]                     1590921968L, -84518381L, -853986383L, 401104480L, 
[09:29:21.666]                     -684160002L, 1930752905L, 1770804411L, -473132918L, 
[09:29:21.666]                     -773655700L, -738477841L, -1527819483L, -80290340L, 
[09:29:21.666]                     -1962570830L, -1505824083L, -319059353L, 
[09:29:21.666]                     -1762207346L, 573976168L, 840088171L, -1167485943L, 
[09:29:21.666]                     -813315432L, 884878790L, -1924829919L, 1128594867L, 
[09:29:21.666]                     1400404258L, 1884730132L, -2001359977L, -301681779L, 
[09:29:21.666]                     1222651556L, -1230864246L, 1810228981L, -1424565937L, 
[09:29:21.666]                     1444337238L, -224449280L, -926681021L, -1655694367L, 
[09:29:21.666]                     1360675664L, -832866898L, 1937578841L, -1826401941L, 
[09:29:21.666]                     325425370L, 1517048220L, -636797537L, -1164644363L, 
[09:29:21.666]                     2000559756L, 558267234L, 72651581L, 891577271L, 
[09:29:21.666]                     1129506910L, 722404760L, -1857834757L, -1091130215L, 
[09:29:21.666]                     335965480L, -2146460714L, 1908891729L, -1966501117L, 
[09:29:21.666]                     -1117805934L, 303730724L, 1058078439L, -149630147L, 
[09:29:21.666]                     -1501877324L, -1252796390L, -222712987L, 
[09:29:21.666]                     -1110411777L, 2027141254L, 1529635856L, -618703181L, 
[09:29:21.666]                     -2021636783L, 1463622912L, 1603413982L, -986323927L, 
[09:29:21.666]                     1406010331L, -1992091414L, -155601268L, 1800792527L, 
[09:29:21.666]                     1508859269L, -836516292L, 875793170L, -1964529651L, 
[09:29:21.666]                     1953569607L, 2073940270L, 2090555528L, 178716043L, 
[09:29:21.666]                     -509409943L, -38967496L, -1240864282L, 1286294913L, 
[09:29:21.666]                     -1617469165L, -1736442174L, -11208332L, 1789976951L, 
[09:29:21.666]                     -2120174995L, -1116652284L, 1874237482L, 
[09:29:21.666]                     2132768149L, 112482863L, 1168254774L, -181397664L, 
[09:29:21.666]                     983727523L, -65259839L, 864308912L, -1781519922L, 
[09:29:21.666]                     1439579449L, 1136963915L, 1389089530L, 120243196L, 
[09:29:21.666]                     -1018747841L, -1547936491L, 973293100L, 1866328834L, 
[09:29:21.666]                     1414346717L, 1262658263L, -1016513090L, -53151752L, 
[09:29:21.666]                     759329755L, -1974448583L, 381491080L, 354215734L, 
[09:29:21.666]                     843896177L, -1354395741L, -1323419918L, -618529212L, 
[09:29:21.666]                     -484204281L, -901457699L, -405533228L, -1819344646L, 
[09:29:21.666]                     -759261115L, -1574739809L, -1545041370L, 
[09:29:21.666]                     -912769360L, 1252991827L, -256258447L, -229805152L, 
[09:29:21.666]                     -499264706L, -503727543L, -176075013L, -576958774L, 
[09:29:21.666]                     1560711212L, 27879471L, 63625445L, 656617884L, 
[09:29:21.666]                     236182514L, -1064343955L, -325946457L, 1476963790L, 
[09:29:21.666]                     81521448L, -235298517L, -772318391L, 1840291928L, 
[09:29:21.666]                     810587398L, 1457406177L, 1644476531L, -1065675550L, 
[09:29:21.666]                     768959572L, -258586281L, -1758615219L, 177622244L, 
[09:29:21.666]                     -130912054L, 53730613L, 246346639L, -701405034L, 
[09:29:21.666]                     104396864L, 708321539L, -1315074783L, 1348607504L, 
[09:29:21.666]                     -1586663954L, 864117145L, 6401579L, 1036351258L, 
[09:29:21.666]                     -813511204L, 2137535455L, -192662603L, 827608396L, 
[09:29:21.666]                     -1286722654L, 232555261L, -1043964937L, -126745314L, 
[09:29:21.666]                     2080663512L, -1443268293L, 1475727065L, 1341383272L, 
[09:29:21.666]                     -798801002L, -1306106095L, 126173379L, 1493229778L, 
[09:29:21.666]                     418268516L, -391808857L, -743551491L, -2141949964L, 
[09:29:21.666]                     -1984587558L, 1975179813L, -1619085505L, 
[09:29:21.666]                     -1375308602L, -1456723632L, 1035540851L, 
[09:29:21.666]                     1762534289L, 1668986304L, -1978307632L, 1645067618L, 
[09:29:21.666]                     1987972840L, 308178124L, 1710088700L, 1307983346L, 
[09:29:21.666]                     -288217984L, 408726004L, -413939064L, 146316090L, 
[09:29:21.666]                     322112848L, 62245996L, 1559745940L, 934084690L, 
[09:29:21.666]                     714677728L, -1098427188L, 702070432L, -65638014L, 
[09:29:21.666]                     357591272L, 792759020L, -1690507972L, -418361230L, 
[09:29:21.666]                     482439792L, -1518372316L, 1245882424L, 1978427674L, 
[09:29:21.666]                     -934796080L, 10742076L, 660657044L, 159614850L, 
[09:29:21.666]                     -281121856L, 318764604L, 490512784L, -404768734L, 
[09:29:21.666]                     -280505080L, -74307444L, -125833444L, 1549210770L, 
[09:29:21.666]                     943281536L, -1473626092L, 549439272L, -235813318L, 
[09:29:21.666]                     772837840L, -363906708L, 1509082036L, -1421735406L, 
[09:29:21.666]                     1417193440L, 1343367628L, -369395488L, -909980638L, 
[09:29:21.666]                     1029157672L, 929257996L, 460714812L, 979054578L, 
[09:29:21.666]                     -1541840144L, 51223108L, 2077507160L, -601770182L, 
[09:29:21.666]                     -1670279184L, -845143364L, -1218185964L, 
[09:29:21.666]                     -2638654L, -645063584L, -1092622980L, 859938768L, 
[09:29:21.666]                     -1875259102L, -271272280L, -1103849588L, 
[09:29:21.666]                     -1337957188L, -1795933390L, -1470986688L, 
[09:29:21.666]                     1299301556L, 459863112L, -961989190L, -707102192L, 
[09:29:21.666]                     922131692L, -962231980L, 63271698L, -353505888L, 
[09:29:21.666]                     1736391372L, 1613167200L, -1895968830L, -41159896L, 
[09:29:21.666]                     -1930888788L, -1626612420L, -1599464590L, 
[09:29:21.666]                     742780208L, 1069016868L, -1374920L, -625588518L, 
[09:29:21.666]                     1573281680L, -1093084420L, 1005329300L, -1367706558L, 
[09:29:21.666]                     -2094140160L, 1557366844L, 1359854928L, -92674910L, 
[09:29:21.666]                     -31020216L, 582704908L, 1377255132L, 2051780434L, 
[09:29:21.666]                     1713157760L, -1179518892L, -1227013144L, 
[09:29:21.666]                     1862527738L, 1869878608L, 336985900L, 1964974964L, 
[09:29:21.666]                     696034194L, -1918782880L, 856037260L, -1622067360L, 
[09:29:21.666]                     -1168309278L, 1945017256L, -260944692L, -936142340L, 
[09:29:21.666]                     -1178060878L, 1764279792L, -975215164L, -423020200L, 
[09:29:21.666]                     -1766519430L, 1917631920L, 1137583036L, -539160492L, 
[09:29:21.666]                     1877602242L, -996270048L, -228200260L, -943318448L, 
[09:29:21.666]                     -1252120606L, -10125720L, -1303163316L, -1153699588L, 
[09:29:21.666]                     834058226L, -1113807616L, 1776165748L, 810098696L, 
[09:29:21.666]                     -1865715270L, -1821811248L, 65713132L, -39728236L, 
[09:29:21.666]                     1074387922L, 1140565856L, -2109488820L, -1210371808L, 
[09:29:21.666]                     -1122037886L, -1656977688L, 626710764L, -769829316L, 
[09:29:21.666]                     -1998933134L, 629003888L, -650091484L, 1299476280L, 
[09:29:21.666]                     -1517397862L, 858779344L, -914830148L, 1906444948L, 
[09:29:21.666]                     -875830654L, 1695060160L, -1045002948L, -69609328L, 
[09:29:21.666]                     -759769566L, 1239446024L, -132874996L, 127533724L, 
[09:29:21.666]                     -1247201774L, 1675712896L, 1732893204L, -1696948696L, 
[09:29:21.666]                     98820410L, -1090966576L, 1274826348L, 412484404L, 
[09:29:21.666]                     -1271651694L, -2122078880L, 1452416332L, 
[09:29:21.666]                     1976595424L, -1237561438L, -165494872L, 1872996236L, 
[09:29:21.666]                     -1374909764L, 212566898L, 438429936L, 1313739844L, 
[09:29:21.666]                     833058136L, -2011074502L, -833432720L, -771341252L, 
[09:29:21.666]                     -45118700L, 1643681218L, 2123828448L, 944676732L, 
[09:29:21.666]                     -595974448L, -1867433310L, -2067188696L, 
[09:29:21.666]                     -190504692L, -2136548420L, 1985260850L, -126285888L, 
[09:29:21.666]                     -1526643148L, -482782264L, -1647645510L, 
[09:29:21.666]                     -589848688L, -1160445460L, -1470045100L, 
[09:29:21.666]                     -471065966L, 1677183776L, 94759372L, 1482163168L, 
[09:29:21.666]                     1858621122L, -1558141400L, -783466836L, 1627319996L, 
[09:29:21.666]                     94245362L, -1539780304L, 709580964L, 1071012536L, 
[09:29:21.666]                     -1585019046L, 516365712L, -1964216964L, -1701099244L, 
[09:29:21.666]                     -959589054L, 1680732928L, -46873668L, -1568689328L, 
[09:29:21.666]                     745065762L, -2041759416L, -1155651518L, -419395497L, 
[09:29:21.666]                     1214098337L, -1133523866L, 1259357284L, -52371563L, 
[09:29:21.666]                     -739886913L, -985872296L, -883565450L, -1229364093L, 
[09:29:21.666]                     433079493L, -1762786846L, 1165895760L, -1652385415L, 
[09:29:21.666]                     2011930283L, 1327961628L, 1014800714L, 1827189055L, 
[09:29:21.666]                     2067732361L, -1368795234L, -489273780L, 1354330141L, 
[09:29:21.666]                     1084957095L, 1196016848L, 1876403822L, -729284325L, 
[09:29:21.666]                     -951889283L, -1907718038L, 241341704L, -342933071L, 
[09:29:21.666]                     -1665673693L, -1977363676L, 94516178L, 679309351L, 
[09:29:21.666]                     -389576079L, 75759798L, -715753388L, -618960667L, 
[09:29:21.666]                     1880990959L, 1717831720L, 400792710L, 1236416179L, 
[09:29:21.666]                     1439561749L, 724974194L, 354256576L, 1977563945L, 
[09:29:21.666]                     2018425243L, -867746196L, -1661246854L, 499344303L, 
[09:29:21.666]                     2069919417L, -81168178L, 1655566876L, -1468786291L, 
[09:29:21.666]                     -754706441L, -1937097984L, 1573208414L, 458555947L, 
[09:29:21.666]                     -1491391187L, 1965961626L, -1535275176L, 
[09:29:21.666]                     859227841L, -269731469L, 946401940L, 1013950242L, 
[09:29:21.666]                     1894285879L, -1476163839L, 29195782L, -265092028L, 
[09:29:21.666]                     347452789L, -1639982881L, -696734664L, 278989846L, 
[09:29:21.666]                     1964452899L, -234955803L, -2139484670L, -1575426960L, 
[09:29:21.666]                     -1271066087L, -1984316405L, -1709072644L, 
[09:29:21.666]                     1825085226L, 875641183L, -1618226967L, 172894206L, 
[09:29:21.666]                     -137171988L, 1294720829L, 768328455L, -2083153168L, 
[09:29:21.666]                     -804240754L, 1965841595L, 219855005L, 947766346L, 
[09:29:21.666]                     632659560L, 1745408593L, -1114320573L, -2138617788L, 
[09:29:21.666]                     2087422706L, 540971719L, -997019503L, -120668650L, 
[09:29:21.666]                     1750088820L, -1411074299L, 2084951375L, 667690824L, 
[09:29:21.666]                     -1448628506L, -1769156589L, 1471211381L, 
[09:29:21.666]                     -449083566L, 1392476064L, -1069479287L, -348606789L, 
[09:29:21.666]                     -1579115252L, -28696422L, 431379983L, 330957401L, 
[09:29:21.666]                     553352942L, -76948100L, 428072429L, 136362647L, 
[09:29:21.666]                     1031443808L, -491302594L, 592542219L, 891485837L, 
[09:29:21.666]                     -717986886L, -1824359944L, -1420819039L, 
[09:29:21.666]                     -1480352941L, 996913780L, -432761854L, 580826775L, 
[09:29:21.666]                     -557424543L, 1031109798L, -651457372L, -245232299L, 
[09:29:21.666]                     -777411073L, -391435112L, 248650166L, 876225091L, 
[09:29:21.666]                     -1482487931L, -1139301342L, -1360664816L, 
[09:29:21.666]                     -916507975L, 2083202923L, 734619228L, -1125569654L, 
[09:29:21.666]                     959726463L, -1191334199L, -1903843490L, -371557364L, 
[09:29:21.666]                     1946368989L, 1168490215L, 863682320L, 934448686L, 
[09:29:21.666]                     926987483L, 772102589L, 763500330L, 612249544L, 
[09:29:21.666]                     1179174129L, 68319843L, 329588324L, -895031918L, 
[09:29:21.666]                     507548263L, 1305496113L, 1689003894L, 849464468L, 
[09:29:21.666]                     1422123685L, 1772973999L, -306729880L, -779337658L, 
[09:29:21.666]                     -1115166764L), envir = base::globalenv(), 
[09:29:21.666]                       inherits = FALSE)
[09:29:21.666]                     NULL
[09:29:21.666]                   }
[09:29:21.666]                   options(future.plan = NULL)
[09:29:21.666]                   if (is.na(NA_character_)) 
[09:29:21.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.666]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.666]                     .init = FALSE)
[09:29:21.666]                 }
[09:29:21.666]             }
[09:29:21.666]         }
[09:29:21.666]     })
[09:29:21.666]     if (TRUE) {
[09:29:21.666]         base::sink(type = "output", split = FALSE)
[09:29:21.666]         if (TRUE) {
[09:29:21.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.666]         }
[09:29:21.666]         else {
[09:29:21.666]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.666]         }
[09:29:21.666]         base::close(...future.stdout)
[09:29:21.666]         ...future.stdout <- NULL
[09:29:21.666]     }
[09:29:21.666]     ...future.result$conditions <- ...future.conditions
[09:29:21.666]     ...future.result$finished <- base::Sys.time()
[09:29:21.666]     ...future.result
[09:29:21.666] }
[09:29:21.668] assign_globals() ...
[09:29:21.668] List of 5
[09:29:21.668]  $ ...future.FUN            :function (...)  
[09:29:21.668]  $ future.call.arguments    : list()
[09:29:21.668]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.668]  $ ...future.elements_ii    :List of 5
[09:29:21.668]   ..$ : int 0
[09:29:21.668]   ..$ : int 0
[09:29:21.668]   ..$ : int 0
[09:29:21.668]   ..$ : int 0
[09:29:21.668]   ..$ : int 0
[09:29:21.668]  $ ...future.seeds_ii       :List of 5
[09:29:21.668]   ..$ : int [1:7] 10407 -760769289 1845410365 500205580 139767129 262776609 1754229706
[09:29:21.668]   ..$ : int [1:7] 10407 884009564 991507210 -1535625999 1928065526 992001030 2035579833
[09:29:21.668]   ..$ : int [1:7] 10407 -739928795 -1045601469 2106597293 -813959395 -1188356024 -1123552164
[09:29:21.668]   ..$ : int [1:7] 10407 -910815592 1768242085 -171837075 1961178164 -1328009220 911503959
[09:29:21.668]   ..$ : int [1:7] 10407 -470140337 2110646679 2123637469 1772493102 -1071217433 -73499562
[09:29:21.668]  $ ...future.globals.maxSize: NULL
[09:29:21.668]  - attr(*, "where")=List of 5
[09:29:21.668]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.668]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.668]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.668]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.668]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.668]  - attr(*, "resolved")= logi FALSE
[09:29:21.668]  - attr(*, "total_size")= num 616
[09:29:21.668]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.668]  - attr(*, "already-done")= logi TRUE
[09:29:21.675] - reassign environment for ‘...future.FUN’
[09:29:21.675] - copied ‘...future.FUN’ to environment
[09:29:21.676] - copied ‘future.call.arguments’ to environment
[09:29:21.676] - copied ‘...future.elements_ii’ to environment
[09:29:21.676] - copied ‘...future.seeds_ii’ to environment
[09:29:21.676] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.676] assign_globals() ... done
[09:29:21.676] plan(): Setting new future strategy stack:
[09:29:21.676] List of future strategies:
[09:29:21.676] 1. sequential:
[09:29:21.676]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.676]    - tweaked: FALSE
[09:29:21.676]    - call: NULL
[09:29:21.677] plan(): nbrOfWorkers() = 1
[09:29:21.678] plan(): Setting new future strategy stack:
[09:29:21.678] List of future strategies:
[09:29:21.678] 1. sequential:
[09:29:21.678]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.678]    - tweaked: FALSE
[09:29:21.678]    - call: plan(strategy)
[09:29:21.678] plan(): nbrOfWorkers() = 1
[09:29:21.679] SequentialFuture started (and completed)
[09:29:21.679] - Launch lazy future ... done
[09:29:21.679] run() for ‘SequentialFuture’ ... done
[09:29:21.679] Created future:
[09:29:21.679] SequentialFuture:
[09:29:21.679] Label: ‘future_replicate-1’
[09:29:21.679] Expression:
[09:29:21.679] {
[09:29:21.679]     do.call(function(...) {
[09:29:21.679]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.679]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.679]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.679]             on.exit(options(oopts), add = TRUE)
[09:29:21.679]         }
[09:29:21.679]         {
[09:29:21.679]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.679]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.679]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.679]                   envir = globalenv(), inherits = FALSE)
[09:29:21.679]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.679]             })
[09:29:21.679]         }
[09:29:21.679]     }, args = future.call.arguments)
[09:29:21.679] }
[09:29:21.679] Lazy evaluation: FALSE
[09:29:21.679] Asynchronous evaluation: FALSE
[09:29:21.679] Local evaluation: TRUE
[09:29:21.679] Environment: R_GlobalEnv
[09:29:21.679] Capture standard output: TRUE
[09:29:21.679] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.679] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.679] Packages: <none>
[09:29:21.679] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.679] Resolved: TRUE
[09:29:21.679] Value: 280 bytes of class ‘list’
[09:29:21.679] Early signaling: FALSE
[09:29:21.679] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.679] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.681] Chunk #1 of 1 ... DONE
[09:29:21.681] Launching 1 futures (chunks) ... DONE
[09:29:21.681] Resolving 1 futures (chunks) ...
[09:29:21.681] resolve() on list ...
[09:29:21.681]  recursive: 0
[09:29:21.681]  length: 1
[09:29:21.681] 
[09:29:21.681] resolved() for ‘SequentialFuture’ ...
[09:29:21.682] - state: ‘finished’
[09:29:21.682] - run: TRUE
[09:29:21.682] - result: ‘FutureResult’
[09:29:21.682] resolved() for ‘SequentialFuture’ ... done
[09:29:21.682] Future #1
[09:29:21.682] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:29:21.682] - nx: 1
[09:29:21.682] - relay: TRUE
[09:29:21.683] - stdout: TRUE
[09:29:21.683] - signal: TRUE
[09:29:21.683] - resignal: FALSE
[09:29:21.683] - force: TRUE
[09:29:21.683] - relayed: [n=1] FALSE
[09:29:21.683] - queued futures: [n=1] FALSE
[09:29:21.683]  - until=1
[09:29:21.683]  - relaying element #1
[09:29:21.683] - relayed: [n=1] TRUE
[09:29:21.683] - queued futures: [n=1] TRUE
[09:29:21.683] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:29:21.684]  length: 0 (resolved future 1)
[09:29:21.684] Relaying remaining futures
[09:29:21.684] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.684] - nx: 1
[09:29:21.684] - relay: TRUE
[09:29:21.684] - stdout: TRUE
[09:29:21.684] - signal: TRUE
[09:29:21.684] - resignal: FALSE
[09:29:21.684] - force: TRUE
[09:29:21.684] - relayed: [n=1] TRUE
[09:29:21.685] - queued futures: [n=1] TRUE
 - flush all
[09:29:21.685] - relayed: [n=1] TRUE
[09:29:21.685] - queued futures: [n=1] TRUE
[09:29:21.685] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.685] resolve() on list ... DONE
[09:29:21.685]  - Number of value chunks collected: 1
[09:29:21.685] Resolving 1 futures (chunks) ... DONE
[09:29:21.685] Reducing values from 1 chunks ...
[09:29:21.685]  - Number of values collected after concatenation: 5
[09:29:21.685]  - Number of values expected: 5
[09:29:21.686] Reducing values from 1 chunks ... DONE
[09:29:21.686] future_lapply() ... DONE
[09:29:21.686] future_lapply() ...
[09:29:21.686] Generating random seeds ...
[09:29:21.686] Generating random seed streams for 5 elements ...
[09:29:21.686] Generating random seed streams for 5 elements ... DONE
[09:29:21.687] Generating random seeds ... DONE
[09:29:21.687] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.687] Number of chunks: 1
[09:29:21.687] getGlobalsAndPackagesXApply() ...
[09:29:21.687]  - future.globals: TRUE
[09:29:21.687] getGlobalsAndPackages() ...
[09:29:21.688] Searching for globals...
[09:29:21.689] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.689] Searching for globals ... DONE
[09:29:21.689] Resolving globals: FALSE
[09:29:21.689] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.689] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.689] - globals: [1] ‘FUN’
[09:29:21.690] 
[09:29:21.690] getGlobalsAndPackages() ... DONE
[09:29:21.690]  - globals found/used: [n=1] ‘FUN’
[09:29:21.690]  - needed namespaces: [n=0] 
[09:29:21.690] Finding globals ... DONE
[09:29:21.690]  - use_args: TRUE
[09:29:21.690]  - Getting '...' globals ...
[09:29:21.690] resolve() on list ...
[09:29:21.690]  recursive: 0
[09:29:21.691]  length: 1
[09:29:21.691]  elements: ‘...’
[09:29:21.691]  length: 0 (resolved future 1)
[09:29:21.691] resolve() on list ... DONE
[09:29:21.691]    - '...' content: [n=0] 
[09:29:21.691] List of 1
[09:29:21.691]  $ ...: list()
[09:29:21.691]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.691]  - attr(*, "where")=List of 1
[09:29:21.691]   ..$ ...:<environment: 0x55d1cb7a45b0> 
[09:29:21.691]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.691]  - attr(*, "resolved")= logi TRUE
[09:29:21.691]  - attr(*, "total_size")= num NA
[09:29:21.695]  - Getting '...' globals ... DONE
[09:29:21.695] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:21.695] List of 2
[09:29:21.695]  $ ...future.FUN:function (...)  
[09:29:21.695]  $ ...          : list()
[09:29:21.695]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.695]  - attr(*, "where")=List of 2
[09:29:21.695]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.695]   ..$ ...          :<environment: 0x55d1cb7a45b0> 
[09:29:21.695]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.695]  - attr(*, "resolved")= logi FALSE
[09:29:21.695]  - attr(*, "total_size")= num 616
[09:29:21.697] Packages to be attached in all futures: [n=0] 
[09:29:21.698] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.698] Number of futures (= number of chunks): 1
[09:29:21.698] Launching 1 futures (chunks) ...
[09:29:21.698] Chunk #1 of 1 ...
[09:29:21.698]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.698] getGlobalsAndPackages() ...
[09:29:21.698] Searching for globals...
[09:29:21.698] 
[09:29:21.699] Searching for globals ... DONE
[09:29:21.699] - globals: [0] <none>
[09:29:21.699] getGlobalsAndPackages() ... DONE
[09:29:21.699]    + additional globals found: [n=0] 
[09:29:21.699]    + additional namespaces needed: [n=0] 
[09:29:21.699]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.699]  - seeds: [5] <seeds>
[09:29:21.699]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.699] getGlobalsAndPackages() ...
[09:29:21.699] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.699] Resolving globals: FALSE
[09:29:21.700] Tweak future expression to call with '...' arguments ...
[09:29:21.700] {
[09:29:21.700]     do.call(function(...) {
[09:29:21.700]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.700]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.700]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.700]             on.exit(options(oopts), add = TRUE)
[09:29:21.700]         }
[09:29:21.700]         {
[09:29:21.700]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.700]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.700]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.700]                   envir = globalenv(), inherits = FALSE)
[09:29:21.700]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.700]             })
[09:29:21.700]         }
[09:29:21.700]     }, args = future.call.arguments)
[09:29:21.700] }
[09:29:21.700] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.700] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.700] 
[09:29:21.700] getGlobalsAndPackages() ... DONE
[09:29:21.701] run() for ‘Future’ ...
[09:29:21.701] - state: ‘created’
[09:29:21.701] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:29:21.701] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.701] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:29:21.701]   - Field: ‘label’
[09:29:21.701]   - Field: ‘local’
[09:29:21.702]   - Field: ‘owner’
[09:29:21.702]   - Field: ‘envir’
[09:29:21.702]   - Field: ‘packages’
[09:29:21.702]   - Field: ‘gc’
[09:29:21.702]   - Field: ‘conditions’
[09:29:21.702]   - Field: ‘expr’
[09:29:21.702]   - Field: ‘uuid’
[09:29:21.702]   - Field: ‘seed’
[09:29:21.702]   - Field: ‘version’
[09:29:21.702]   - Field: ‘result’
[09:29:21.702]   - Field: ‘asynchronous’
[09:29:21.703]   - Field: ‘calls’
[09:29:21.703]   - Field: ‘globals’
[09:29:21.703]   - Field: ‘stdout’
[09:29:21.703]   - Field: ‘earlySignal’
[09:29:21.703]   - Field: ‘lazy’
[09:29:21.703]   - Field: ‘state’
[09:29:21.703] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:29:21.703] - Launch lazy future ...
[09:29:21.703] Packages needed by the future expression (n = 0): <none>
[09:29:21.703] Packages needed by future strategies (n = 0): <none>
[09:29:21.704] {
[09:29:21.704]     {
[09:29:21.704]         {
[09:29:21.704]             ...future.startTime <- base::Sys.time()
[09:29:21.704]             {
[09:29:21.704]                 {
[09:29:21.704]                   {
[09:29:21.704]                     base::local({
[09:29:21.704]                       has_future <- base::requireNamespace("future", 
[09:29:21.704]                         quietly = TRUE)
[09:29:21.704]                       if (has_future) {
[09:29:21.704]                         ns <- base::getNamespace("future")
[09:29:21.704]                         version <- ns[[".package"]][["version"]]
[09:29:21.704]                         if (is.null(version)) 
[09:29:21.704]                           version <- utils::packageVersion("future")
[09:29:21.704]                       }
[09:29:21.704]                       else {
[09:29:21.704]                         version <- NULL
[09:29:21.704]                       }
[09:29:21.704]                       if (!has_future || version < "1.8.0") {
[09:29:21.704]                         info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.704]                           "", base::R.version$version.string), 
[09:29:21.704]                           platform = base::sprintf("%s (%s-bit)", 
[09:29:21.704]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.704]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.704]                             "release", "version")], collapse = " "), 
[09:29:21.704]                           hostname = base::Sys.info()[["nodename"]])
[09:29:21.704]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.704]                           info)
[09:29:21.704]                         info <- base::paste(info, collapse = "; ")
[09:29:21.704]                         if (!has_future) {
[09:29:21.704]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.704]                             info)
[09:29:21.704]                         }
[09:29:21.704]                         else {
[09:29:21.704]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.704]                             info, version)
[09:29:21.704]                         }
[09:29:21.704]                         base::stop(msg)
[09:29:21.704]                       }
[09:29:21.704]                     })
[09:29:21.704]                   }
[09:29:21.704]                   ...future.strategy.old <- future::plan("list")
[09:29:21.704]                   options(future.plan = NULL)
[09:29:21.704]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.704]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.704]                 }
[09:29:21.704]                 ...future.workdir <- getwd()
[09:29:21.704]             }
[09:29:21.704]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.704]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.704]         }
[09:29:21.704]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.704]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:21.704]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.704]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.704]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.704]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.704]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.704]             base::names(...future.oldOptions))
[09:29:21.704]     }
[09:29:21.704]     if (FALSE) {
[09:29:21.704]     }
[09:29:21.704]     else {
[09:29:21.704]         if (TRUE) {
[09:29:21.704]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.704]                 open = "w")
[09:29:21.704]         }
[09:29:21.704]         else {
[09:29:21.704]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.704]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.704]         }
[09:29:21.704]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.704]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.704]             base::sink(type = "output", split = FALSE)
[09:29:21.704]             base::close(...future.stdout)
[09:29:21.704]         }, add = TRUE)
[09:29:21.704]     }
[09:29:21.704]     ...future.frame <- base::sys.nframe()
[09:29:21.704]     ...future.conditions <- base::list()
[09:29:21.704]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.704]     if (FALSE) {
[09:29:21.704]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.704]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.704]     }
[09:29:21.704]     ...future.result <- base::tryCatch({
[09:29:21.704]         base::withCallingHandlers({
[09:29:21.704]             ...future.value <- base::withVisible(base::local({
[09:29:21.704]                 do.call(function(...) {
[09:29:21.704]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.704]                   if (!identical(...future.globals.maxSize.org, 
[09:29:21.704]                     ...future.globals.maxSize)) {
[09:29:21.704]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.704]                     on.exit(options(oopts), add = TRUE)
[09:29:21.704]                   }
[09:29:21.704]                   {
[09:29:21.704]                     lapply(seq_along(...future.elements_ii), 
[09:29:21.704]                       FUN = function(jj) {
[09:29:21.704]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.704]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.704]                           envir = globalenv(), inherits = FALSE)
[09:29:21.704]                         ...future.FUN(...future.X_jj, ...)
[09:29:21.704]                       })
[09:29:21.704]                   }
[09:29:21.704]                 }, args = future.call.arguments)
[09:29:21.704]             }))
[09:29:21.704]             future::FutureResult(value = ...future.value$value, 
[09:29:21.704]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.704]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.704]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.704]                     ...future.globalenv.names))
[09:29:21.704]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.704]         }, condition = base::local({
[09:29:21.704]             c <- base::c
[09:29:21.704]             inherits <- base::inherits
[09:29:21.704]             invokeRestart <- base::invokeRestart
[09:29:21.704]             length <- base::length
[09:29:21.704]             list <- base::list
[09:29:21.704]             seq.int <- base::seq.int
[09:29:21.704]             signalCondition <- base::signalCondition
[09:29:21.704]             sys.calls <- base::sys.calls
[09:29:21.704]             `[[` <- base::`[[`
[09:29:21.704]             `+` <- base::`+`
[09:29:21.704]             `<<-` <- base::`<<-`
[09:29:21.704]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.704]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.704]                   3L)]
[09:29:21.704]             }
[09:29:21.704]             function(cond) {
[09:29:21.704]                 is_error <- inherits(cond, "error")
[09:29:21.704]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.704]                   NULL)
[09:29:21.704]                 if (is_error) {
[09:29:21.704]                   sessionInformation <- function() {
[09:29:21.704]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.704]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.704]                       search = base::search(), system = base::Sys.info())
[09:29:21.704]                   }
[09:29:21.704]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.704]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.704]                     cond$call), session = sessionInformation(), 
[09:29:21.704]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.704]                   signalCondition(cond)
[09:29:21.704]                 }
[09:29:21.704]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.704]                 "immediateCondition"))) {
[09:29:21.704]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.704]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.704]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.704]                   if (TRUE && !signal) {
[09:29:21.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.704]                     {
[09:29:21.704]                       inherits <- base::inherits
[09:29:21.704]                       invokeRestart <- base::invokeRestart
[09:29:21.704]                       is.null <- base::is.null
[09:29:21.704]                       muffled <- FALSE
[09:29:21.704]                       if (inherits(cond, "message")) {
[09:29:21.704]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.704]                         if (muffled) 
[09:29:21.704]                           invokeRestart("muffleMessage")
[09:29:21.704]                       }
[09:29:21.704]                       else if (inherits(cond, "warning")) {
[09:29:21.704]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.704]                         if (muffled) 
[09:29:21.704]                           invokeRestart("muffleWarning")
[09:29:21.704]                       }
[09:29:21.704]                       else if (inherits(cond, "condition")) {
[09:29:21.704]                         if (!is.null(pattern)) {
[09:29:21.704]                           computeRestarts <- base::computeRestarts
[09:29:21.704]                           grepl <- base::grepl
[09:29:21.704]                           restarts <- computeRestarts(cond)
[09:29:21.704]                           for (restart in restarts) {
[09:29:21.704]                             name <- restart$name
[09:29:21.704]                             if (is.null(name)) 
[09:29:21.704]                               next
[09:29:21.704]                             if (!grepl(pattern, name)) 
[09:29:21.704]                               next
[09:29:21.704]                             invokeRestart(restart)
[09:29:21.704]                             muffled <- TRUE
[09:29:21.704]                             break
[09:29:21.704]                           }
[09:29:21.704]                         }
[09:29:21.704]                       }
[09:29:21.704]                       invisible(muffled)
[09:29:21.704]                     }
[09:29:21.704]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.704]                   }
[09:29:21.704]                 }
[09:29:21.704]                 else {
[09:29:21.704]                   if (TRUE) {
[09:29:21.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.704]                     {
[09:29:21.704]                       inherits <- base::inherits
[09:29:21.704]                       invokeRestart <- base::invokeRestart
[09:29:21.704]                       is.null <- base::is.null
[09:29:21.704]                       muffled <- FALSE
[09:29:21.704]                       if (inherits(cond, "message")) {
[09:29:21.704]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.704]                         if (muffled) 
[09:29:21.704]                           invokeRestart("muffleMessage")
[09:29:21.704]                       }
[09:29:21.704]                       else if (inherits(cond, "warning")) {
[09:29:21.704]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.704]                         if (muffled) 
[09:29:21.704]                           invokeRestart("muffleWarning")
[09:29:21.704]                       }
[09:29:21.704]                       else if (inherits(cond, "condition")) {
[09:29:21.704]                         if (!is.null(pattern)) {
[09:29:21.704]                           computeRestarts <- base::computeRestarts
[09:29:21.704]                           grepl <- base::grepl
[09:29:21.704]                           restarts <- computeRestarts(cond)
[09:29:21.704]                           for (restart in restarts) {
[09:29:21.704]                             name <- restart$name
[09:29:21.704]                             if (is.null(name)) 
[09:29:21.704]                               next
[09:29:21.704]                             if (!grepl(pattern, name)) 
[09:29:21.704]                               next
[09:29:21.704]                             invokeRestart(restart)
[09:29:21.704]                             muffled <- TRUE
[09:29:21.704]                             break
[09:29:21.704]                           }
[09:29:21.704]                         }
[09:29:21.704]                       }
[09:29:21.704]                       invisible(muffled)
[09:29:21.704]                     }
[09:29:21.704]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.704]                   }
[09:29:21.704]                 }
[09:29:21.704]             }
[09:29:21.704]         }))
[09:29:21.704]     }, error = function(ex) {
[09:29:21.704]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.704]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.704]                 ...future.rng), started = ...future.startTime, 
[09:29:21.704]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.704]             version = "1.8"), class = "FutureResult")
[09:29:21.704]     }, finally = {
[09:29:21.704]         if (!identical(...future.workdir, getwd())) 
[09:29:21.704]             setwd(...future.workdir)
[09:29:21.704]         {
[09:29:21.704]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.704]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.704]             }
[09:29:21.704]             base::options(...future.oldOptions)
[09:29:21.704]             if (.Platform$OS.type == "windows") {
[09:29:21.704]                 old_names <- names(...future.oldEnvVars)
[09:29:21.704]                 envs <- base::Sys.getenv()
[09:29:21.704]                 names <- names(envs)
[09:29:21.704]                 common <- intersect(names, old_names)
[09:29:21.704]                 added <- setdiff(names, old_names)
[09:29:21.704]                 removed <- setdiff(old_names, names)
[09:29:21.704]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.704]                   envs[common]]
[09:29:21.704]                 NAMES <- toupper(changed)
[09:29:21.704]                 args <- list()
[09:29:21.704]                 for (kk in seq_along(NAMES)) {
[09:29:21.704]                   name <- changed[[kk]]
[09:29:21.704]                   NAME <- NAMES[[kk]]
[09:29:21.704]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.704]                     next
[09:29:21.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.704]                 }
[09:29:21.704]                 NAMES <- toupper(added)
[09:29:21.704]                 for (kk in seq_along(NAMES)) {
[09:29:21.704]                   name <- added[[kk]]
[09:29:21.704]                   NAME <- NAMES[[kk]]
[09:29:21.704]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.704]                     next
[09:29:21.704]                   args[[name]] <- ""
[09:29:21.704]                 }
[09:29:21.704]                 NAMES <- toupper(removed)
[09:29:21.704]                 for (kk in seq_along(NAMES)) {
[09:29:21.704]                   name <- removed[[kk]]
[09:29:21.704]                   NAME <- NAMES[[kk]]
[09:29:21.704]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.704]                     next
[09:29:21.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.704]                 }
[09:29:21.704]                 if (length(args) > 0) 
[09:29:21.704]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.704]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.704]             }
[09:29:21.704]             else {
[09:29:21.704]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.704]             }
[09:29:21.704]             {
[09:29:21.704]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.704]                   0L) {
[09:29:21.704]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.704]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.704]                   base::options(opts)
[09:29:21.704]                 }
[09:29:21.704]                 {
[09:29:21.704]                   {
[09:29:21.704]                     base::assign(".Random.seed", c(10403L, 2L, 
[09:29:21.704]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[09:29:21.704]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[09:29:21.704]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[09:29:21.704]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[09:29:21.704]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[09:29:21.704]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[09:29:21.704]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[09:29:21.704]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[09:29:21.704]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[09:29:21.704]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[09:29:21.704]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[09:29:21.704]                     -1512233174L, -1985955764L, -425390065L, 
[09:29:21.704]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[09:29:21.704]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[09:29:21.704]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[09:29:21.704]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[09:29:21.704]                     1818328109L, -1284085436L, -1981489558L, 
[09:29:21.704]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[09:29:21.704]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[09:29:21.704]                     -1718567047L, -793788661L, -1133789126L, 
[09:29:21.704]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[09:29:21.704]                     -1823521982L, -1345991523L, -1672661737L, 
[09:29:21.704]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[09:29:21.704]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[09:29:21.704]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[09:29:21.704]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[09:29:21.704]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[09:29:21.704]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[09:29:21.704]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[09:29:21.704]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[09:29:21.704]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[09:29:21.704]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[09:29:21.704]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[09:29:21.704]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[09:29:21.704]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[09:29:21.704]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[09:29:21.704]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[09:29:21.704]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[09:29:21.704]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[09:29:21.704]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[09:29:21.704]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[09:29:21.704]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[09:29:21.704]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[09:29:21.704]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[09:29:21.704]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[09:29:21.704]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[09:29:21.704]                     -1119334354L, -1521015416L, -2041922421L, 
[09:29:21.704]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[09:29:21.704]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[09:29:21.704]                     1232111981L, -1801753084L, -1608606422L, 
[09:29:21.704]                     -1172096363L, 1420874031L, -1210473418L, 
[09:29:21.704]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[09:29:21.704]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[09:29:21.704]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[09:29:21.704]                     679371266L, -591318819L, -104578089L, -172818754L, 
[09:29:21.704]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[09:29:21.704]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[09:29:21.704]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[09:29:21.704]                     -332493318L, -1978392251L, -1691039632L, 
[09:29:21.704]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[09:29:21.704]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[09:29:21.704]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[09:29:21.704]                     87560756L, -87565624L, 426345146L, -699970416L, 
[09:29:21.704]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[09:29:21.704]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[09:29:21.704]                     -1178330196L, -687617348L, -1701912078L, 
[09:29:21.704]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[09:29:21.704]                     -1345416048L, 1816730492L, -1570431212L, 
[09:29:21.704]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[09:29:21.704]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[09:29:21.704]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[09:29:21.704]                     -1493184262L, -1943836976L, -590788308L, 
[09:29:21.704]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[09:29:21.704]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[09:29:21.704]                     1274857340L, -1205842638L, -1938479504L, 
[09:29:21.704]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[09:29:21.704]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[09:29:21.704]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[09:29:21.704]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[09:29:21.704]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[09:29:21.704]                     -1460751252L, 1201879444L, -1459788718L, 
[09:29:21.704]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[09:29:21.704]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[09:29:21.704]                     -420945808L, -1997735900L, -1838404552L, 
[09:29:21.704]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[09:29:21.704]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[09:29:21.704]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[09:29:21.704]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[09:29:21.704]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[09:29:21.704]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[09:29:21.704]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[09:29:21.704]                     942193650L, 751741680L, 689743428L, -18455976L, 
[09:29:21.704]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[09:29:21.704]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[09:29:21.704]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[09:29:21.704]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[09:29:21.704]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[09:29:21.704]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[09:29:21.704]                     -1357570110L, 1896595240L, -2066952276L, 
[09:29:21.704]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[09:29:21.704]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[09:29:21.704]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[09:29:21.704]                     769655120L, 236357794L, 181393736L, -13334772L, 
[09:29:21.704]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[09:29:21.704]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[09:29:21.704]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[09:29:21.704]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[09:29:21.704]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[09:29:21.704]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[09:29:21.704]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[09:29:21.704]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[09:29:21.704]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[09:29:21.704]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[09:29:21.704]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[09:29:21.704]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[09:29:21.704]                     -1365842884L, -438961294L, -1851472272L, 
[09:29:21.704]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[09:29:21.704]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[09:29:21.704]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[09:29:21.704]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[09:29:21.704]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[09:29:21.704]                     -594809770L, -2146766621L, -2013964635L, 
[09:29:21.704]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[09:29:21.704]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[09:29:21.704]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[09:29:21.704]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[09:29:21.704]                     -1426021878L, -1285634264L, 1507547537L, 
[09:29:21.704]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[09:29:21.704]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[09:29:21.704]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[09:29:21.704]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[09:29:21.704]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[09:29:21.704]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[09:29:21.704]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[09:29:21.704]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[09:29:21.704]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[09:29:21.704]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[09:29:21.704]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[09:29:21.704]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[09:29:21.704]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[09:29:21.704]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[09:29:21.704]                     -1604604761L, 1421229008L, -1268333714L, 
[09:29:21.704]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[09:29:21.704]                     -2070476623L, -2099222749L, 1141171236L, 
[09:29:21.704]                     -146426158L, -1797385433L, -1129376399L, 
[09:29:21.704]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[09:29:21.704]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[09:29:21.704]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[09:29:21.704]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[09:29:21.704]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[09:29:21.704]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[09:29:21.704]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[09:29:21.704]                     -1092079724L, -1765622238L, -1882554057L, 
[09:29:21.704]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[09:29:21.704]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[09:29:21.704]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[09:29:21.704]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[09:29:21.704]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[09:29:21.704]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[09:29:21.704]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[09:29:21.704]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[09:29:21.704]                     865377681L, -1127426242L), envir = base::globalenv(), 
[09:29:21.704]                       inherits = FALSE)
[09:29:21.704]                     NULL
[09:29:21.704]                   }
[09:29:21.704]                   options(future.plan = NULL)
[09:29:21.704]                   if (is.na(NA_character_)) 
[09:29:21.704]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.704]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.704]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.704]                     .init = FALSE)
[09:29:21.704]                 }
[09:29:21.704]             }
[09:29:21.704]         }
[09:29:21.704]     })
[09:29:21.704]     if (TRUE) {
[09:29:21.704]         base::sink(type = "output", split = FALSE)
[09:29:21.704]         if (TRUE) {
[09:29:21.704]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.704]         }
[09:29:21.704]         else {
[09:29:21.704]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.704]         }
[09:29:21.704]         base::close(...future.stdout)
[09:29:21.704]         ...future.stdout <- NULL
[09:29:21.704]     }
[09:29:21.704]     ...future.result$conditions <- ...future.conditions
[09:29:21.704]     ...future.result$finished <- base::Sys.time()
[09:29:21.704]     ...future.result
[09:29:21.704] }
[09:29:21.706] assign_globals() ...
[09:29:21.706] List of 5
[09:29:21.706]  $ ...future.FUN            :function (...)  
[09:29:21.706]  $ future.call.arguments    : list()
[09:29:21.706]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.706]  $ ...future.elements_ii    :List of 5
[09:29:21.706]   ..$ : int 0
[09:29:21.706]   ..$ : int 0
[09:29:21.706]   ..$ : int 0
[09:29:21.706]   ..$ : int 0
[09:29:21.706]   ..$ : int 0
[09:29:21.706]  $ ...future.seeds_ii       :List of 5
[09:29:21.706]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[09:29:21.706]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[09:29:21.706]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[09:29:21.706]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[09:29:21.706]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[09:29:21.706]  $ ...future.globals.maxSize: NULL
[09:29:21.706]  - attr(*, "where")=List of 5
[09:29:21.706]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.706]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.706]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.706]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.706]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.706]  - attr(*, "resolved")= logi FALSE
[09:29:21.706]  - attr(*, "total_size")= num 616
[09:29:21.706]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.706]  - attr(*, "already-done")= logi TRUE
[09:29:21.713] - reassign environment for ‘...future.FUN’
[09:29:21.713] - copied ‘...future.FUN’ to environment
[09:29:21.713] - copied ‘future.call.arguments’ to environment
[09:29:21.713] - copied ‘...future.elements_ii’ to environment
[09:29:21.713] - copied ‘...future.seeds_ii’ to environment
[09:29:21.714] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.714] assign_globals() ... done
[09:29:21.714] plan(): Setting new future strategy stack:
[09:29:21.714] List of future strategies:
[09:29:21.714] 1. sequential:
[09:29:21.714]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.714]    - tweaked: FALSE
[09:29:21.714]    - call: NULL
[09:29:21.714] plan(): nbrOfWorkers() = 1
[09:29:21.715] plan(): Setting new future strategy stack:
[09:29:21.715] List of future strategies:
[09:29:21.715] 1. sequential:
[09:29:21.715]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.715]    - tweaked: FALSE
[09:29:21.715]    - call: plan(strategy)
[09:29:21.716] plan(): nbrOfWorkers() = 1
[09:29:21.716] SequentialFuture started (and completed)
[09:29:21.716] - Launch lazy future ... done
[09:29:21.716] run() for ‘SequentialFuture’ ... done
[09:29:21.716] Created future:
[09:29:21.716] SequentialFuture:
[09:29:21.716] Label: ‘future_replicate-1’
[09:29:21.716] Expression:
[09:29:21.716] {
[09:29:21.716]     do.call(function(...) {
[09:29:21.716]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.716]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.716]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.716]             on.exit(options(oopts), add = TRUE)
[09:29:21.716]         }
[09:29:21.716]         {
[09:29:21.716]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.716]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.716]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.716]                   envir = globalenv(), inherits = FALSE)
[09:29:21.716]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.716]             })
[09:29:21.716]         }
[09:29:21.716]     }, args = future.call.arguments)
[09:29:21.716] }
[09:29:21.716] Lazy evaluation: FALSE
[09:29:21.716] Asynchronous evaluation: FALSE
[09:29:21.716] Local evaluation: TRUE
[09:29:21.716] Environment: R_GlobalEnv
[09:29:21.716] Capture standard output: TRUE
[09:29:21.716] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.716] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.716] Packages: <none>
[09:29:21.716] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.716] Resolved: TRUE
[09:29:21.716] Value: 280 bytes of class ‘list’
[09:29:21.716] Early signaling: FALSE
[09:29:21.716] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.716] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.717] Chunk #1 of 1 ... DONE
[09:29:21.717] Launching 1 futures (chunks) ... DONE
[09:29:21.717] Resolving 1 futures (chunks) ...
[09:29:21.717] resolve() on list ...
[09:29:21.717]  recursive: 0
[09:29:21.718]  length: 1
[09:29:21.718] 
[09:29:21.718] resolved() for ‘SequentialFuture’ ...
[09:29:21.718] - state: ‘finished’
[09:29:21.718] - run: TRUE
[09:29:21.718] - result: ‘FutureResult’
[09:29:21.718] resolved() for ‘SequentialFuture’ ... done
[09:29:21.718] Future #1
[09:29:21.718] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:29:21.718] - nx: 1
[09:29:21.718] - relay: TRUE
[09:29:21.719] - stdout: TRUE
[09:29:21.719] - signal: TRUE
[09:29:21.719] - resignal: FALSE
[09:29:21.719] - force: TRUE
[09:29:21.719] - relayed: [n=1] FALSE
[09:29:21.719] - queued futures: [n=1] FALSE
[09:29:21.719]  - until=1
[09:29:21.720]  - relaying element #1
[09:29:21.720] - relayed: [n=1] TRUE
[09:29:21.720] - queued futures: [n=1] TRUE
[09:29:21.721] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:29:21.721]  length: 0 (resolved future 1)
[09:29:21.721] Relaying remaining futures
[09:29:21.721] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.721] - nx: 1
[09:29:21.721] - relay: TRUE
[09:29:21.721] - stdout: TRUE
[09:29:21.721] - signal: TRUE
[09:29:21.721] - resignal: FALSE
[09:29:21.721] - force: TRUE
[09:29:21.721] - relayed: [n=1] TRUE
[09:29:21.721] - queued futures: [n=1] TRUE
 - flush all
[09:29:21.722] - relayed: [n=1] TRUE
[09:29:21.722] - queued futures: [n=1] TRUE
[09:29:21.722] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.722] resolve() on list ... DONE
[09:29:21.722]  - Number of value chunks collected: 1
[09:29:21.722] Resolving 1 futures (chunks) ... DONE
[09:29:21.722] Reducing values from 1 chunks ...
[09:29:21.722]  - Number of values collected after concatenation: 5
[09:29:21.722]  - Number of values expected: 5
[09:29:21.722] Reducing values from 1 chunks ... DONE
[09:29:21.722] future_lapply() ... DONE
[09:29:21.723] future_lapply() ...
[09:29:21.723] Generating random seeds ...
[09:29:21.723] Generating random seed streams for 5 elements ...
[09:29:21.723] Generating random seed streams for 5 elements ... DONE
[09:29:21.723] Generating random seeds ... DONE
[09:29:21.723] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.724] Number of chunks: 1
[09:29:21.724] getGlobalsAndPackagesXApply() ...
[09:29:21.724]  - future.globals: TRUE
[09:29:21.724] getGlobalsAndPackages() ...
[09:29:21.724] Searching for globals...
[09:29:21.725] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.725] Searching for globals ... DONE
[09:29:21.725] Resolving globals: FALSE
[09:29:21.726] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.726] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.726] - globals: [1] ‘FUN’
[09:29:21.726] 
[09:29:21.726] getGlobalsAndPackages() ... DONE
[09:29:21.726]  - globals found/used: [n=1] ‘FUN’
[09:29:21.726]  - needed namespaces: [n=0] 
[09:29:21.727] Finding globals ... DONE
[09:29:21.727]  - use_args: TRUE
[09:29:21.727]  - Getting '...' globals ...
[09:29:21.727] resolve() on list ...
[09:29:21.727]  recursive: 0
[09:29:21.727]  length: 1
[09:29:21.727]  elements: ‘...’
[09:29:21.727]  length: 0 (resolved future 1)
[09:29:21.727] resolve() on list ... DONE
[09:29:21.728]    - '...' content: [n=0] 
[09:29:21.728] List of 1
[09:29:21.728]  $ ...: list()
[09:29:21.728]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.728]  - attr(*, "where")=List of 1
[09:29:21.728]   ..$ ...:<environment: 0x55d1c9e37c80> 
[09:29:21.728]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.728]  - attr(*, "resolved")= logi TRUE
[09:29:21.728]  - attr(*, "total_size")= num NA
[09:29:21.730]  - Getting '...' globals ... DONE
[09:29:21.730] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:21.730] List of 2
[09:29:21.730]  $ ...future.FUN:function (...)  
[09:29:21.730]  $ ...          : list()
[09:29:21.730]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.730]  - attr(*, "where")=List of 2
[09:29:21.730]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.730]   ..$ ...          :<environment: 0x55d1c9e37c80> 
[09:29:21.730]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.730]  - attr(*, "resolved")= logi FALSE
[09:29:21.730]  - attr(*, "total_size")= num 616
[09:29:21.733] Packages to be attached in all futures: [n=0] 
[09:29:21.733] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.733] Number of futures (= number of chunks): 1
[09:29:21.733] Launching 1 futures (chunks) ...
[09:29:21.733] Chunk #1 of 1 ...
[09:29:21.733]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.733] getGlobalsAndPackages() ...
[09:29:21.733] Searching for globals...
[09:29:21.734] 
[09:29:21.734] Searching for globals ... DONE
[09:29:21.734] - globals: [0] <none>
[09:29:21.734] getGlobalsAndPackages() ... DONE
[09:29:21.734]    + additional globals found: [n=0] 
[09:29:21.734]    + additional namespaces needed: [n=0] 
[09:29:21.734]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.734]  - seeds: [5] <seeds>
[09:29:21.734]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.734] getGlobalsAndPackages() ...
[09:29:21.734] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.735] Resolving globals: FALSE
[09:29:21.735] Tweak future expression to call with '...' arguments ...
[09:29:21.735] {
[09:29:21.735]     do.call(function(...) {
[09:29:21.735]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.735]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.735]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.735]             on.exit(options(oopts), add = TRUE)
[09:29:21.735]         }
[09:29:21.735]         {
[09:29:21.735]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.735]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.735]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.735]                   envir = globalenv(), inherits = FALSE)
[09:29:21.735]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.735]             })
[09:29:21.735]         }
[09:29:21.735]     }, args = future.call.arguments)
[09:29:21.735] }
[09:29:21.735] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.735] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.735] 
[09:29:21.736] getGlobalsAndPackages() ... DONE
[09:29:21.736] run() for ‘Future’ ...
[09:29:21.736] - state: ‘created’
[09:29:21.736] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:29:21.736] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.736] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:29:21.737]   - Field: ‘label’
[09:29:21.737]   - Field: ‘local’
[09:29:21.737]   - Field: ‘owner’
[09:29:21.737]   - Field: ‘envir’
[09:29:21.737]   - Field: ‘packages’
[09:29:21.737]   - Field: ‘gc’
[09:29:21.737]   - Field: ‘conditions’
[09:29:21.737]   - Field: ‘expr’
[09:29:21.737]   - Field: ‘uuid’
[09:29:21.737]   - Field: ‘seed’
[09:29:21.737]   - Field: ‘version’
[09:29:21.737]   - Field: ‘result’
[09:29:21.738]   - Field: ‘asynchronous’
[09:29:21.738]   - Field: ‘calls’
[09:29:21.738]   - Field: ‘globals’
[09:29:21.738]   - Field: ‘stdout’
[09:29:21.738]   - Field: ‘earlySignal’
[09:29:21.738]   - Field: ‘lazy’
[09:29:21.738]   - Field: ‘state’
[09:29:21.738] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:29:21.738] - Launch lazy future ...
[09:29:21.738] Packages needed by the future expression (n = 0): <none>
[09:29:21.738] Packages needed by future strategies (n = 0): <none>
[09:29:21.739] {
[09:29:21.739]     {
[09:29:21.739]         {
[09:29:21.739]             ...future.startTime <- base::Sys.time()
[09:29:21.739]             {
[09:29:21.739]                 {
[09:29:21.739]                   {
[09:29:21.739]                     base::local({
[09:29:21.739]                       has_future <- base::requireNamespace("future", 
[09:29:21.739]                         quietly = TRUE)
[09:29:21.739]                       if (has_future) {
[09:29:21.739]                         ns <- base::getNamespace("future")
[09:29:21.739]                         version <- ns[[".package"]][["version"]]
[09:29:21.739]                         if (is.null(version)) 
[09:29:21.739]                           version <- utils::packageVersion("future")
[09:29:21.739]                       }
[09:29:21.739]                       else {
[09:29:21.739]                         version <- NULL
[09:29:21.739]                       }
[09:29:21.739]                       if (!has_future || version < "1.8.0") {
[09:29:21.739]                         info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.739]                           "", base::R.version$version.string), 
[09:29:21.739]                           platform = base::sprintf("%s (%s-bit)", 
[09:29:21.739]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.739]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.739]                             "release", "version")], collapse = " "), 
[09:29:21.739]                           hostname = base::Sys.info()[["nodename"]])
[09:29:21.739]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.739]                           info)
[09:29:21.739]                         info <- base::paste(info, collapse = "; ")
[09:29:21.739]                         if (!has_future) {
[09:29:21.739]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.739]                             info)
[09:29:21.739]                         }
[09:29:21.739]                         else {
[09:29:21.739]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.739]                             info, version)
[09:29:21.739]                         }
[09:29:21.739]                         base::stop(msg)
[09:29:21.739]                       }
[09:29:21.739]                     })
[09:29:21.739]                   }
[09:29:21.739]                   ...future.strategy.old <- future::plan("list")
[09:29:21.739]                   options(future.plan = NULL)
[09:29:21.739]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.739]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.739]                 }
[09:29:21.739]                 ...future.workdir <- getwd()
[09:29:21.739]             }
[09:29:21.739]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.739]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.739]         }
[09:29:21.739]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.739]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:21.739]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.739]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.739]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.739]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.739]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.739]             base::names(...future.oldOptions))
[09:29:21.739]     }
[09:29:21.739]     if (FALSE) {
[09:29:21.739]     }
[09:29:21.739]     else {
[09:29:21.739]         if (TRUE) {
[09:29:21.739]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.739]                 open = "w")
[09:29:21.739]         }
[09:29:21.739]         else {
[09:29:21.739]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.739]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.739]         }
[09:29:21.739]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.739]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.739]             base::sink(type = "output", split = FALSE)
[09:29:21.739]             base::close(...future.stdout)
[09:29:21.739]         }, add = TRUE)
[09:29:21.739]     }
[09:29:21.739]     ...future.frame <- base::sys.nframe()
[09:29:21.739]     ...future.conditions <- base::list()
[09:29:21.739]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.739]     if (FALSE) {
[09:29:21.739]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.739]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.739]     }
[09:29:21.739]     ...future.result <- base::tryCatch({
[09:29:21.739]         base::withCallingHandlers({
[09:29:21.739]             ...future.value <- base::withVisible(base::local({
[09:29:21.739]                 do.call(function(...) {
[09:29:21.739]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.739]                   if (!identical(...future.globals.maxSize.org, 
[09:29:21.739]                     ...future.globals.maxSize)) {
[09:29:21.739]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.739]                     on.exit(options(oopts), add = TRUE)
[09:29:21.739]                   }
[09:29:21.739]                   {
[09:29:21.739]                     lapply(seq_along(...future.elements_ii), 
[09:29:21.739]                       FUN = function(jj) {
[09:29:21.739]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.739]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.739]                           envir = globalenv(), inherits = FALSE)
[09:29:21.739]                         ...future.FUN(...future.X_jj, ...)
[09:29:21.739]                       })
[09:29:21.739]                   }
[09:29:21.739]                 }, args = future.call.arguments)
[09:29:21.739]             }))
[09:29:21.739]             future::FutureResult(value = ...future.value$value, 
[09:29:21.739]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.739]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.739]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.739]                     ...future.globalenv.names))
[09:29:21.739]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.739]         }, condition = base::local({
[09:29:21.739]             c <- base::c
[09:29:21.739]             inherits <- base::inherits
[09:29:21.739]             invokeRestart <- base::invokeRestart
[09:29:21.739]             length <- base::length
[09:29:21.739]             list <- base::list
[09:29:21.739]             seq.int <- base::seq.int
[09:29:21.739]             signalCondition <- base::signalCondition
[09:29:21.739]             sys.calls <- base::sys.calls
[09:29:21.739]             `[[` <- base::`[[`
[09:29:21.739]             `+` <- base::`+`
[09:29:21.739]             `<<-` <- base::`<<-`
[09:29:21.739]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.739]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.739]                   3L)]
[09:29:21.739]             }
[09:29:21.739]             function(cond) {
[09:29:21.739]                 is_error <- inherits(cond, "error")
[09:29:21.739]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.739]                   NULL)
[09:29:21.739]                 if (is_error) {
[09:29:21.739]                   sessionInformation <- function() {
[09:29:21.739]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.739]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.739]                       search = base::search(), system = base::Sys.info())
[09:29:21.739]                   }
[09:29:21.739]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.739]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.739]                     cond$call), session = sessionInformation(), 
[09:29:21.739]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.739]                   signalCondition(cond)
[09:29:21.739]                 }
[09:29:21.739]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.739]                 "immediateCondition"))) {
[09:29:21.739]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.739]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.739]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.739]                   if (TRUE && !signal) {
[09:29:21.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.739]                     {
[09:29:21.739]                       inherits <- base::inherits
[09:29:21.739]                       invokeRestart <- base::invokeRestart
[09:29:21.739]                       is.null <- base::is.null
[09:29:21.739]                       muffled <- FALSE
[09:29:21.739]                       if (inherits(cond, "message")) {
[09:29:21.739]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.739]                         if (muffled) 
[09:29:21.739]                           invokeRestart("muffleMessage")
[09:29:21.739]                       }
[09:29:21.739]                       else if (inherits(cond, "warning")) {
[09:29:21.739]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.739]                         if (muffled) 
[09:29:21.739]                           invokeRestart("muffleWarning")
[09:29:21.739]                       }
[09:29:21.739]                       else if (inherits(cond, "condition")) {
[09:29:21.739]                         if (!is.null(pattern)) {
[09:29:21.739]                           computeRestarts <- base::computeRestarts
[09:29:21.739]                           grepl <- base::grepl
[09:29:21.739]                           restarts <- computeRestarts(cond)
[09:29:21.739]                           for (restart in restarts) {
[09:29:21.739]                             name <- restart$name
[09:29:21.739]                             if (is.null(name)) 
[09:29:21.739]                               next
[09:29:21.739]                             if (!grepl(pattern, name)) 
[09:29:21.739]                               next
[09:29:21.739]                             invokeRestart(restart)
[09:29:21.739]                             muffled <- TRUE
[09:29:21.739]                             break
[09:29:21.739]                           }
[09:29:21.739]                         }
[09:29:21.739]                       }
[09:29:21.739]                       invisible(muffled)
[09:29:21.739]                     }
[09:29:21.739]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.739]                   }
[09:29:21.739]                 }
[09:29:21.739]                 else {
[09:29:21.739]                   if (TRUE) {
[09:29:21.739]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.739]                     {
[09:29:21.739]                       inherits <- base::inherits
[09:29:21.739]                       invokeRestart <- base::invokeRestart
[09:29:21.739]                       is.null <- base::is.null
[09:29:21.739]                       muffled <- FALSE
[09:29:21.739]                       if (inherits(cond, "message")) {
[09:29:21.739]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.739]                         if (muffled) 
[09:29:21.739]                           invokeRestart("muffleMessage")
[09:29:21.739]                       }
[09:29:21.739]                       else if (inherits(cond, "warning")) {
[09:29:21.739]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.739]                         if (muffled) 
[09:29:21.739]                           invokeRestart("muffleWarning")
[09:29:21.739]                       }
[09:29:21.739]                       else if (inherits(cond, "condition")) {
[09:29:21.739]                         if (!is.null(pattern)) {
[09:29:21.739]                           computeRestarts <- base::computeRestarts
[09:29:21.739]                           grepl <- base::grepl
[09:29:21.739]                           restarts <- computeRestarts(cond)
[09:29:21.739]                           for (restart in restarts) {
[09:29:21.739]                             name <- restart$name
[09:29:21.739]                             if (is.null(name)) 
[09:29:21.739]                               next
[09:29:21.739]                             if (!grepl(pattern, name)) 
[09:29:21.739]                               next
[09:29:21.739]                             invokeRestart(restart)
[09:29:21.739]                             muffled <- TRUE
[09:29:21.739]                             break
[09:29:21.739]                           }
[09:29:21.739]                         }
[09:29:21.739]                       }
[09:29:21.739]                       invisible(muffled)
[09:29:21.739]                     }
[09:29:21.739]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.739]                   }
[09:29:21.739]                 }
[09:29:21.739]             }
[09:29:21.739]         }))
[09:29:21.739]     }, error = function(ex) {
[09:29:21.739]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.739]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.739]                 ...future.rng), started = ...future.startTime, 
[09:29:21.739]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.739]             version = "1.8"), class = "FutureResult")
[09:29:21.739]     }, finally = {
[09:29:21.739]         if (!identical(...future.workdir, getwd())) 
[09:29:21.739]             setwd(...future.workdir)
[09:29:21.739]         {
[09:29:21.739]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.739]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.739]             }
[09:29:21.739]             base::options(...future.oldOptions)
[09:29:21.739]             if (.Platform$OS.type == "windows") {
[09:29:21.739]                 old_names <- names(...future.oldEnvVars)
[09:29:21.739]                 envs <- base::Sys.getenv()
[09:29:21.739]                 names <- names(envs)
[09:29:21.739]                 common <- intersect(names, old_names)
[09:29:21.739]                 added <- setdiff(names, old_names)
[09:29:21.739]                 removed <- setdiff(old_names, names)
[09:29:21.739]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.739]                   envs[common]]
[09:29:21.739]                 NAMES <- toupper(changed)
[09:29:21.739]                 args <- list()
[09:29:21.739]                 for (kk in seq_along(NAMES)) {
[09:29:21.739]                   name <- changed[[kk]]
[09:29:21.739]                   NAME <- NAMES[[kk]]
[09:29:21.739]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.739]                     next
[09:29:21.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.739]                 }
[09:29:21.739]                 NAMES <- toupper(added)
[09:29:21.739]                 for (kk in seq_along(NAMES)) {
[09:29:21.739]                   name <- added[[kk]]
[09:29:21.739]                   NAME <- NAMES[[kk]]
[09:29:21.739]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.739]                     next
[09:29:21.739]                   args[[name]] <- ""
[09:29:21.739]                 }
[09:29:21.739]                 NAMES <- toupper(removed)
[09:29:21.739]                 for (kk in seq_along(NAMES)) {
[09:29:21.739]                   name <- removed[[kk]]
[09:29:21.739]                   NAME <- NAMES[[kk]]
[09:29:21.739]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.739]                     next
[09:29:21.739]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.739]                 }
[09:29:21.739]                 if (length(args) > 0) 
[09:29:21.739]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.739]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.739]             }
[09:29:21.739]             else {
[09:29:21.739]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.739]             }
[09:29:21.739]             {
[09:29:21.739]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.739]                   0L) {
[09:29:21.739]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.739]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.739]                   base::options(opts)
[09:29:21.739]                 }
[09:29:21.739]                 {
[09:29:21.739]                   {
[09:29:21.739]                     base::assign(".Random.seed", c(10403L, 2L, 
[09:29:21.739]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[09:29:21.739]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[09:29:21.739]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[09:29:21.739]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[09:29:21.739]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[09:29:21.739]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[09:29:21.739]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[09:29:21.739]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[09:29:21.739]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[09:29:21.739]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[09:29:21.739]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[09:29:21.739]                     -1512233174L, -1985955764L, -425390065L, 
[09:29:21.739]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[09:29:21.739]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[09:29:21.739]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[09:29:21.739]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[09:29:21.739]                     1818328109L, -1284085436L, -1981489558L, 
[09:29:21.739]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[09:29:21.739]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[09:29:21.739]                     -1718567047L, -793788661L, -1133789126L, 
[09:29:21.739]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[09:29:21.739]                     -1823521982L, -1345991523L, -1672661737L, 
[09:29:21.739]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[09:29:21.739]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[09:29:21.739]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[09:29:21.739]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[09:29:21.739]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[09:29:21.739]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[09:29:21.739]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[09:29:21.739]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[09:29:21.739]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[09:29:21.739]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[09:29:21.739]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[09:29:21.739]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[09:29:21.739]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[09:29:21.739]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[09:29:21.739]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[09:29:21.739]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[09:29:21.739]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[09:29:21.739]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[09:29:21.739]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[09:29:21.739]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[09:29:21.739]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[09:29:21.739]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[09:29:21.739]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[09:29:21.739]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[09:29:21.739]                     -1119334354L, -1521015416L, -2041922421L, 
[09:29:21.739]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[09:29:21.739]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[09:29:21.739]                     1232111981L, -1801753084L, -1608606422L, 
[09:29:21.739]                     -1172096363L, 1420874031L, -1210473418L, 
[09:29:21.739]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[09:29:21.739]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[09:29:21.739]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[09:29:21.739]                     679371266L, -591318819L, -104578089L, -172818754L, 
[09:29:21.739]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[09:29:21.739]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[09:29:21.739]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[09:29:21.739]                     -332493318L, -1978392251L, -1691039632L, 
[09:29:21.739]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[09:29:21.739]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[09:29:21.739]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[09:29:21.739]                     87560756L, -87565624L, 426345146L, -699970416L, 
[09:29:21.739]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[09:29:21.739]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[09:29:21.739]                     -1178330196L, -687617348L, -1701912078L, 
[09:29:21.739]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[09:29:21.739]                     -1345416048L, 1816730492L, -1570431212L, 
[09:29:21.739]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[09:29:21.739]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[09:29:21.739]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[09:29:21.739]                     -1493184262L, -1943836976L, -590788308L, 
[09:29:21.739]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[09:29:21.739]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[09:29:21.739]                     1274857340L, -1205842638L, -1938479504L, 
[09:29:21.739]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[09:29:21.739]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[09:29:21.739]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[09:29:21.739]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[09:29:21.739]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[09:29:21.739]                     -1460751252L, 1201879444L, -1459788718L, 
[09:29:21.739]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[09:29:21.739]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[09:29:21.739]                     -420945808L, -1997735900L, -1838404552L, 
[09:29:21.739]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[09:29:21.739]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[09:29:21.739]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[09:29:21.739]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[09:29:21.739]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[09:29:21.739]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[09:29:21.739]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[09:29:21.739]                     942193650L, 751741680L, 689743428L, -18455976L, 
[09:29:21.739]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[09:29:21.739]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[09:29:21.739]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[09:29:21.739]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[09:29:21.739]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[09:29:21.739]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[09:29:21.739]                     -1357570110L, 1896595240L, -2066952276L, 
[09:29:21.739]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[09:29:21.739]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[09:29:21.739]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[09:29:21.739]                     769655120L, 236357794L, 181393736L, -13334772L, 
[09:29:21.739]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[09:29:21.739]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[09:29:21.739]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[09:29:21.739]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[09:29:21.739]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[09:29:21.739]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[09:29:21.739]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[09:29:21.739]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[09:29:21.739]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[09:29:21.739]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[09:29:21.739]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[09:29:21.739]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[09:29:21.739]                     -1365842884L, -438961294L, -1851472272L, 
[09:29:21.739]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[09:29:21.739]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[09:29:21.739]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[09:29:21.739]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[09:29:21.739]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[09:29:21.739]                     -594809770L, -2146766621L, -2013964635L, 
[09:29:21.739]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[09:29:21.739]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[09:29:21.739]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[09:29:21.739]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[09:29:21.739]                     -1426021878L, -1285634264L, 1507547537L, 
[09:29:21.739]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[09:29:21.739]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[09:29:21.739]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[09:29:21.739]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[09:29:21.739]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[09:29:21.739]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[09:29:21.739]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[09:29:21.739]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[09:29:21.739]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[09:29:21.739]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[09:29:21.739]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[09:29:21.739]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[09:29:21.739]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[09:29:21.739]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[09:29:21.739]                     -1604604761L, 1421229008L, -1268333714L, 
[09:29:21.739]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[09:29:21.739]                     -2070476623L, -2099222749L, 1141171236L, 
[09:29:21.739]                     -146426158L, -1797385433L, -1129376399L, 
[09:29:21.739]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[09:29:21.739]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[09:29:21.739]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[09:29:21.739]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[09:29:21.739]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[09:29:21.739]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[09:29:21.739]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[09:29:21.739]                     -1092079724L, -1765622238L, -1882554057L, 
[09:29:21.739]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[09:29:21.739]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[09:29:21.739]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[09:29:21.739]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[09:29:21.739]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[09:29:21.739]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[09:29:21.739]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[09:29:21.739]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[09:29:21.739]                     865377681L, -1127426242L), envir = base::globalenv(), 
[09:29:21.739]                       inherits = FALSE)
[09:29:21.739]                     NULL
[09:29:21.739]                   }
[09:29:21.739]                   options(future.plan = NULL)
[09:29:21.739]                   if (is.na(NA_character_)) 
[09:29:21.739]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.739]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.739]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.739]                     .init = FALSE)
[09:29:21.739]                 }
[09:29:21.739]             }
[09:29:21.739]         }
[09:29:21.739]     })
[09:29:21.739]     if (TRUE) {
[09:29:21.739]         base::sink(type = "output", split = FALSE)
[09:29:21.739]         if (TRUE) {
[09:29:21.739]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.739]         }
[09:29:21.739]         else {
[09:29:21.739]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.739]         }
[09:29:21.739]         base::close(...future.stdout)
[09:29:21.739]         ...future.stdout <- NULL
[09:29:21.739]     }
[09:29:21.739]     ...future.result$conditions <- ...future.conditions
[09:29:21.739]     ...future.result$finished <- base::Sys.time()
[09:29:21.739]     ...future.result
[09:29:21.739] }
[09:29:21.741] assign_globals() ...
[09:29:21.741] List of 5
[09:29:21.741]  $ ...future.FUN            :function (...)  
[09:29:21.741]  $ future.call.arguments    : list()
[09:29:21.741]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.741]  $ ...future.elements_ii    :List of 5
[09:29:21.741]   ..$ : int 0
[09:29:21.741]   ..$ : int 0
[09:29:21.741]   ..$ : int 0
[09:29:21.741]   ..$ : int 0
[09:29:21.741]   ..$ : int 0
[09:29:21.741]  $ ...future.seeds_ii       :List of 5
[09:29:21.741]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[09:29:21.741]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[09:29:21.741]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[09:29:21.741]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[09:29:21.741]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[09:29:21.741]  $ ...future.globals.maxSize: NULL
[09:29:21.741]  - attr(*, "where")=List of 5
[09:29:21.741]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.741]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.741]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.741]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.741]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.741]  - attr(*, "resolved")= logi FALSE
[09:29:21.741]  - attr(*, "total_size")= num 616
[09:29:21.741]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.741]  - attr(*, "already-done")= logi TRUE
[09:29:21.749] - reassign environment for ‘...future.FUN’
[09:29:21.749] - copied ‘...future.FUN’ to environment
[09:29:21.749] - copied ‘future.call.arguments’ to environment
[09:29:21.750] - copied ‘...future.elements_ii’ to environment
[09:29:21.750] - copied ‘...future.seeds_ii’ to environment
[09:29:21.750] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.750] assign_globals() ... done
[09:29:21.750] plan(): Setting new future strategy stack:
[09:29:21.750] List of future strategies:
[09:29:21.750] 1. sequential:
[09:29:21.750]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.750]    - tweaked: FALSE
[09:29:21.750]    - call: NULL
[09:29:21.751] plan(): nbrOfWorkers() = 1
[09:29:21.751] plan(): Setting new future strategy stack:
[09:29:21.751] List of future strategies:
[09:29:21.751] 1. sequential:
[09:29:21.751]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.751]    - tweaked: FALSE
[09:29:21.751]    - call: plan(strategy)
[09:29:21.752] plan(): nbrOfWorkers() = 1
[09:29:21.752] SequentialFuture started (and completed)
[09:29:21.752] - Launch lazy future ... done
[09:29:21.752] run() for ‘SequentialFuture’ ... done
[09:29:21.752] Created future:
[09:29:21.752] SequentialFuture:
[09:29:21.752] Label: ‘future_replicate-1’
[09:29:21.752] Expression:
[09:29:21.752] {
[09:29:21.752]     do.call(function(...) {
[09:29:21.752]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.752]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.752]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.752]             on.exit(options(oopts), add = TRUE)
[09:29:21.752]         }
[09:29:21.752]         {
[09:29:21.752]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.752]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.752]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.752]                   envir = globalenv(), inherits = FALSE)
[09:29:21.752]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.752]             })
[09:29:21.752]         }
[09:29:21.752]     }, args = future.call.arguments)
[09:29:21.752] }
[09:29:21.752] Lazy evaluation: FALSE
[09:29:21.752] Asynchronous evaluation: FALSE
[09:29:21.752] Local evaluation: TRUE
[09:29:21.752] Environment: R_GlobalEnv
[09:29:21.752] Capture standard output: TRUE
[09:29:21.752] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.752] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.752] Packages: <none>
[09:29:21.752] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.752] Resolved: TRUE
[09:29:21.752] Value: 280 bytes of class ‘list’
[09:29:21.752] Early signaling: FALSE
[09:29:21.752] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.752] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.753] Chunk #1 of 1 ... DONE
[09:29:21.753] Launching 1 futures (chunks) ... DONE
[09:29:21.753] Resolving 1 futures (chunks) ...
[09:29:21.754] resolve() on list ...
[09:29:21.754]  recursive: 0
[09:29:21.754]  length: 1
[09:29:21.754] 
[09:29:21.754] resolved() for ‘SequentialFuture’ ...
[09:29:21.754] - state: ‘finished’
[09:29:21.754] - run: TRUE
[09:29:21.754] - result: ‘FutureResult’
[09:29:21.754] resolved() for ‘SequentialFuture’ ... done
[09:29:21.754] Future #1
[09:29:21.755] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:29:21.755] - nx: 1
[09:29:21.755] - relay: TRUE
[09:29:21.755] - stdout: TRUE
[09:29:21.755] - signal: TRUE
[09:29:21.755] - resignal: FALSE
[09:29:21.755] - force: TRUE
[09:29:21.755] - relayed: [n=1] FALSE
[09:29:21.755] - queued futures: [n=1] FALSE
[09:29:21.755]  - until=1
[09:29:21.755]  - relaying element #1
[09:29:21.756] - relayed: [n=1] TRUE
[09:29:21.756] - queued futures: [n=1] TRUE
[09:29:21.756] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:29:21.756]  length: 0 (resolved future 1)
[09:29:21.756] Relaying remaining futures
[09:29:21.756] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.756] - nx: 1
[09:29:21.756] - relay: TRUE
[09:29:21.756] - stdout: TRUE
[09:29:21.756] - signal: TRUE
[09:29:21.756] - resignal: FALSE
[09:29:21.756] - force: TRUE
[09:29:21.757] - relayed: [n=1] TRUE
[09:29:21.757] - queued futures: [n=1] TRUE
 - flush all
[09:29:21.757] - relayed: [n=1] TRUE
[09:29:21.757] - queued futures: [n=1] TRUE
[09:29:21.757] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.757] resolve() on list ... DONE
[09:29:21.757]  - Number of value chunks collected: 1
[09:29:21.757] Resolving 1 futures (chunks) ... DONE
[09:29:21.757] Reducing values from 1 chunks ...
[09:29:21.757]  - Number of values collected after concatenation: 5
[09:29:21.757]  - Number of values expected: 5
[09:29:21.758] Reducing values from 1 chunks ... DONE
[09:29:21.758] future_lapply() ... DONE
[09:29:21.758] future_lapply() ...
[09:29:21.758] Generating random seeds ...
[09:29:21.759] Generating random seed streams for 5 elements ...
[09:29:21.759] Generating random seed streams for 5 elements ... DONE
[09:29:21.759] Generating random seeds ... DONE
[09:29:21.759] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.759] Number of chunks: 1
[09:29:21.759] getGlobalsAndPackagesXApply() ...
[09:29:21.759]  - future.globals: TRUE
[09:29:21.760] getGlobalsAndPackages() ...
[09:29:21.760] Searching for globals...
[09:29:21.761] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.761] Searching for globals ... DONE
[09:29:21.761] Resolving globals: FALSE
[09:29:21.761] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.761] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.762] - globals: [1] ‘FUN’
[09:29:21.762] 
[09:29:21.762] getGlobalsAndPackages() ... DONE
[09:29:21.762]  - globals found/used: [n=1] ‘FUN’
[09:29:21.762]  - needed namespaces: [n=0] 
[09:29:21.762] Finding globals ... DONE
[09:29:21.762]  - use_args: TRUE
[09:29:21.762]  - Getting '...' globals ...
[09:29:21.762] resolve() on list ...
[09:29:21.763]  recursive: 0
[09:29:21.763]  length: 1
[09:29:21.763]  elements: ‘...’
[09:29:21.763]  length: 0 (resolved future 1)
[09:29:21.763] resolve() on list ... DONE
[09:29:21.763]    - '...' content: [n=0] 
[09:29:21.763] List of 1
[09:29:21.763]  $ ...: list()
[09:29:21.763]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.763]  - attr(*, "where")=List of 1
[09:29:21.763]   ..$ ...:<environment: 0x55d1cb429758> 
[09:29:21.763]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.763]  - attr(*, "resolved")= logi TRUE
[09:29:21.763]  - attr(*, "total_size")= num NA
[09:29:21.765]  - Getting '...' globals ... DONE
[09:29:21.765] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:21.766] List of 2
[09:29:21.766]  $ ...future.FUN:function (...)  
[09:29:21.766]  $ ...          : list()
[09:29:21.766]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.766]  - attr(*, "where")=List of 2
[09:29:21.766]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.766]   ..$ ...          :<environment: 0x55d1cb429758> 
[09:29:21.766]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.766]  - attr(*, "resolved")= logi FALSE
[09:29:21.766]  - attr(*, "total_size")= num 616
[09:29:21.768] Packages to be attached in all futures: [n=0] 
[09:29:21.768] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.768] Number of futures (= number of chunks): 1
[09:29:21.768] Launching 1 futures (chunks) ...
[09:29:21.769] Chunk #1 of 1 ...
[09:29:21.769]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.770] getGlobalsAndPackages() ...
[09:29:21.770] Searching for globals...
[09:29:21.770] 
[09:29:21.770] Searching for globals ... DONE
[09:29:21.770] - globals: [0] <none>
[09:29:21.770] getGlobalsAndPackages() ... DONE
[09:29:21.770]    + additional globals found: [n=0] 
[09:29:21.770]    + additional namespaces needed: [n=0] 
[09:29:21.771]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.771]  - seeds: [5] <seeds>
[09:29:21.771]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.771] getGlobalsAndPackages() ...
[09:29:21.771] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.771] Resolving globals: FALSE
[09:29:21.771] Tweak future expression to call with '...' arguments ...
[09:29:21.771] {
[09:29:21.771]     do.call(function(...) {
[09:29:21.771]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.771]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.771]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.771]             on.exit(options(oopts), add = TRUE)
[09:29:21.771]         }
[09:29:21.771]         {
[09:29:21.771]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.771]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.771]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.771]                   envir = globalenv(), inherits = FALSE)
[09:29:21.771]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.771]             })
[09:29:21.771]         }
[09:29:21.771]     }, args = future.call.arguments)
[09:29:21.771] }
[09:29:21.771] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.772] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.772] 
[09:29:21.772] getGlobalsAndPackages() ... DONE
[09:29:21.772] run() for ‘Future’ ...
[09:29:21.772] - state: ‘created’
[09:29:21.772] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:29:21.773] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.773] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:29:21.773]   - Field: ‘label’
[09:29:21.773]   - Field: ‘local’
[09:29:21.773]   - Field: ‘owner’
[09:29:21.773]   - Field: ‘envir’
[09:29:21.773]   - Field: ‘packages’
[09:29:21.773]   - Field: ‘gc’
[09:29:21.773]   - Field: ‘conditions’
[09:29:21.773]   - Field: ‘expr’
[09:29:21.774]   - Field: ‘uuid’
[09:29:21.774]   - Field: ‘seed’
[09:29:21.774]   - Field: ‘version’
[09:29:21.774]   - Field: ‘result’
[09:29:21.774]   - Field: ‘asynchronous’
[09:29:21.774]   - Field: ‘calls’
[09:29:21.774]   - Field: ‘globals’
[09:29:21.774]   - Field: ‘stdout’
[09:29:21.774]   - Field: ‘earlySignal’
[09:29:21.774]   - Field: ‘lazy’
[09:29:21.774]   - Field: ‘state’
[09:29:21.775] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:29:21.775] - Launch lazy future ...
[09:29:21.775] Packages needed by the future expression (n = 0): <none>
[09:29:21.775] Packages needed by future strategies (n = 0): <none>
[09:29:21.775] {
[09:29:21.775]     {
[09:29:21.775]         {
[09:29:21.775]             ...future.startTime <- base::Sys.time()
[09:29:21.775]             {
[09:29:21.775]                 {
[09:29:21.775]                   {
[09:29:21.775]                     base::local({
[09:29:21.775]                       has_future <- base::requireNamespace("future", 
[09:29:21.775]                         quietly = TRUE)
[09:29:21.775]                       if (has_future) {
[09:29:21.775]                         ns <- base::getNamespace("future")
[09:29:21.775]                         version <- ns[[".package"]][["version"]]
[09:29:21.775]                         if (is.null(version)) 
[09:29:21.775]                           version <- utils::packageVersion("future")
[09:29:21.775]                       }
[09:29:21.775]                       else {
[09:29:21.775]                         version <- NULL
[09:29:21.775]                       }
[09:29:21.775]                       if (!has_future || version < "1.8.0") {
[09:29:21.775]                         info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.775]                           "", base::R.version$version.string), 
[09:29:21.775]                           platform = base::sprintf("%s (%s-bit)", 
[09:29:21.775]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.775]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.775]                             "release", "version")], collapse = " "), 
[09:29:21.775]                           hostname = base::Sys.info()[["nodename"]])
[09:29:21.775]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.775]                           info)
[09:29:21.775]                         info <- base::paste(info, collapse = "; ")
[09:29:21.775]                         if (!has_future) {
[09:29:21.775]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.775]                             info)
[09:29:21.775]                         }
[09:29:21.775]                         else {
[09:29:21.775]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.775]                             info, version)
[09:29:21.775]                         }
[09:29:21.775]                         base::stop(msg)
[09:29:21.775]                       }
[09:29:21.775]                     })
[09:29:21.775]                   }
[09:29:21.775]                   ...future.strategy.old <- future::plan("list")
[09:29:21.775]                   options(future.plan = NULL)
[09:29:21.775]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.775]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.775]                 }
[09:29:21.775]                 ...future.workdir <- getwd()
[09:29:21.775]             }
[09:29:21.775]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.775]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.775]         }
[09:29:21.775]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.775]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:21.775]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.775]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.775]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.775]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.775]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.775]             base::names(...future.oldOptions))
[09:29:21.775]     }
[09:29:21.775]     if (FALSE) {
[09:29:21.775]     }
[09:29:21.775]     else {
[09:29:21.775]         if (TRUE) {
[09:29:21.775]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.775]                 open = "w")
[09:29:21.775]         }
[09:29:21.775]         else {
[09:29:21.775]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.775]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.775]         }
[09:29:21.775]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.775]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.775]             base::sink(type = "output", split = FALSE)
[09:29:21.775]             base::close(...future.stdout)
[09:29:21.775]         }, add = TRUE)
[09:29:21.775]     }
[09:29:21.775]     ...future.frame <- base::sys.nframe()
[09:29:21.775]     ...future.conditions <- base::list()
[09:29:21.775]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.775]     if (FALSE) {
[09:29:21.775]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.775]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.775]     }
[09:29:21.775]     ...future.result <- base::tryCatch({
[09:29:21.775]         base::withCallingHandlers({
[09:29:21.775]             ...future.value <- base::withVisible(base::local({
[09:29:21.775]                 do.call(function(...) {
[09:29:21.775]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.775]                   if (!identical(...future.globals.maxSize.org, 
[09:29:21.775]                     ...future.globals.maxSize)) {
[09:29:21.775]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.775]                     on.exit(options(oopts), add = TRUE)
[09:29:21.775]                   }
[09:29:21.775]                   {
[09:29:21.775]                     lapply(seq_along(...future.elements_ii), 
[09:29:21.775]                       FUN = function(jj) {
[09:29:21.775]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.775]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.775]                           envir = globalenv(), inherits = FALSE)
[09:29:21.775]                         ...future.FUN(...future.X_jj, ...)
[09:29:21.775]                       })
[09:29:21.775]                   }
[09:29:21.775]                 }, args = future.call.arguments)
[09:29:21.775]             }))
[09:29:21.775]             future::FutureResult(value = ...future.value$value, 
[09:29:21.775]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.775]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.775]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.775]                     ...future.globalenv.names))
[09:29:21.775]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.775]         }, condition = base::local({
[09:29:21.775]             c <- base::c
[09:29:21.775]             inherits <- base::inherits
[09:29:21.775]             invokeRestart <- base::invokeRestart
[09:29:21.775]             length <- base::length
[09:29:21.775]             list <- base::list
[09:29:21.775]             seq.int <- base::seq.int
[09:29:21.775]             signalCondition <- base::signalCondition
[09:29:21.775]             sys.calls <- base::sys.calls
[09:29:21.775]             `[[` <- base::`[[`
[09:29:21.775]             `+` <- base::`+`
[09:29:21.775]             `<<-` <- base::`<<-`
[09:29:21.775]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.775]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.775]                   3L)]
[09:29:21.775]             }
[09:29:21.775]             function(cond) {
[09:29:21.775]                 is_error <- inherits(cond, "error")
[09:29:21.775]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.775]                   NULL)
[09:29:21.775]                 if (is_error) {
[09:29:21.775]                   sessionInformation <- function() {
[09:29:21.775]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.775]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.775]                       search = base::search(), system = base::Sys.info())
[09:29:21.775]                   }
[09:29:21.775]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.775]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.775]                     cond$call), session = sessionInformation(), 
[09:29:21.775]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.775]                   signalCondition(cond)
[09:29:21.775]                 }
[09:29:21.775]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.775]                 "immediateCondition"))) {
[09:29:21.775]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.775]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.775]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.775]                   if (TRUE && !signal) {
[09:29:21.775]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.775]                     {
[09:29:21.775]                       inherits <- base::inherits
[09:29:21.775]                       invokeRestart <- base::invokeRestart
[09:29:21.775]                       is.null <- base::is.null
[09:29:21.775]                       muffled <- FALSE
[09:29:21.775]                       if (inherits(cond, "message")) {
[09:29:21.775]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.775]                         if (muffled) 
[09:29:21.775]                           invokeRestart("muffleMessage")
[09:29:21.775]                       }
[09:29:21.775]                       else if (inherits(cond, "warning")) {
[09:29:21.775]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.775]                         if (muffled) 
[09:29:21.775]                           invokeRestart("muffleWarning")
[09:29:21.775]                       }
[09:29:21.775]                       else if (inherits(cond, "condition")) {
[09:29:21.775]                         if (!is.null(pattern)) {
[09:29:21.775]                           computeRestarts <- base::computeRestarts
[09:29:21.775]                           grepl <- base::grepl
[09:29:21.775]                           restarts <- computeRestarts(cond)
[09:29:21.775]                           for (restart in restarts) {
[09:29:21.775]                             name <- restart$name
[09:29:21.775]                             if (is.null(name)) 
[09:29:21.775]                               next
[09:29:21.775]                             if (!grepl(pattern, name)) 
[09:29:21.775]                               next
[09:29:21.775]                             invokeRestart(restart)
[09:29:21.775]                             muffled <- TRUE
[09:29:21.775]                             break
[09:29:21.775]                           }
[09:29:21.775]                         }
[09:29:21.775]                       }
[09:29:21.775]                       invisible(muffled)
[09:29:21.775]                     }
[09:29:21.775]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.775]                   }
[09:29:21.775]                 }
[09:29:21.775]                 else {
[09:29:21.775]                   if (TRUE) {
[09:29:21.775]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.775]                     {
[09:29:21.775]                       inherits <- base::inherits
[09:29:21.775]                       invokeRestart <- base::invokeRestart
[09:29:21.775]                       is.null <- base::is.null
[09:29:21.775]                       muffled <- FALSE
[09:29:21.775]                       if (inherits(cond, "message")) {
[09:29:21.775]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.775]                         if (muffled) 
[09:29:21.775]                           invokeRestart("muffleMessage")
[09:29:21.775]                       }
[09:29:21.775]                       else if (inherits(cond, "warning")) {
[09:29:21.775]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.775]                         if (muffled) 
[09:29:21.775]                           invokeRestart("muffleWarning")
[09:29:21.775]                       }
[09:29:21.775]                       else if (inherits(cond, "condition")) {
[09:29:21.775]                         if (!is.null(pattern)) {
[09:29:21.775]                           computeRestarts <- base::computeRestarts
[09:29:21.775]                           grepl <- base::grepl
[09:29:21.775]                           restarts <- computeRestarts(cond)
[09:29:21.775]                           for (restart in restarts) {
[09:29:21.775]                             name <- restart$name
[09:29:21.775]                             if (is.null(name)) 
[09:29:21.775]                               next
[09:29:21.775]                             if (!grepl(pattern, name)) 
[09:29:21.775]                               next
[09:29:21.775]                             invokeRestart(restart)
[09:29:21.775]                             muffled <- TRUE
[09:29:21.775]                             break
[09:29:21.775]                           }
[09:29:21.775]                         }
[09:29:21.775]                       }
[09:29:21.775]                       invisible(muffled)
[09:29:21.775]                     }
[09:29:21.775]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.775]                   }
[09:29:21.775]                 }
[09:29:21.775]             }
[09:29:21.775]         }))
[09:29:21.775]     }, error = function(ex) {
[09:29:21.775]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.775]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.775]                 ...future.rng), started = ...future.startTime, 
[09:29:21.775]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.775]             version = "1.8"), class = "FutureResult")
[09:29:21.775]     }, finally = {
[09:29:21.775]         if (!identical(...future.workdir, getwd())) 
[09:29:21.775]             setwd(...future.workdir)
[09:29:21.775]         {
[09:29:21.775]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.775]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.775]             }
[09:29:21.775]             base::options(...future.oldOptions)
[09:29:21.775]             if (.Platform$OS.type == "windows") {
[09:29:21.775]                 old_names <- names(...future.oldEnvVars)
[09:29:21.775]                 envs <- base::Sys.getenv()
[09:29:21.775]                 names <- names(envs)
[09:29:21.775]                 common <- intersect(names, old_names)
[09:29:21.775]                 added <- setdiff(names, old_names)
[09:29:21.775]                 removed <- setdiff(old_names, names)
[09:29:21.775]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.775]                   envs[common]]
[09:29:21.775]                 NAMES <- toupper(changed)
[09:29:21.775]                 args <- list()
[09:29:21.775]                 for (kk in seq_along(NAMES)) {
[09:29:21.775]                   name <- changed[[kk]]
[09:29:21.775]                   NAME <- NAMES[[kk]]
[09:29:21.775]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.775]                     next
[09:29:21.775]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.775]                 }
[09:29:21.775]                 NAMES <- toupper(added)
[09:29:21.775]                 for (kk in seq_along(NAMES)) {
[09:29:21.775]                   name <- added[[kk]]
[09:29:21.775]                   NAME <- NAMES[[kk]]
[09:29:21.775]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.775]                     next
[09:29:21.775]                   args[[name]] <- ""
[09:29:21.775]                 }
[09:29:21.775]                 NAMES <- toupper(removed)
[09:29:21.775]                 for (kk in seq_along(NAMES)) {
[09:29:21.775]                   name <- removed[[kk]]
[09:29:21.775]                   NAME <- NAMES[[kk]]
[09:29:21.775]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.775]                     next
[09:29:21.775]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.775]                 }
[09:29:21.775]                 if (length(args) > 0) 
[09:29:21.775]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.775]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.775]             }
[09:29:21.775]             else {
[09:29:21.775]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.775]             }
[09:29:21.775]             {
[09:29:21.775]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.775]                   0L) {
[09:29:21.775]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.775]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.775]                   base::options(opts)
[09:29:21.775]                 }
[09:29:21.775]                 {
[09:29:21.775]                   {
[09:29:21.775]                     base::assign(".Random.seed", c(10403L, 4L, 
[09:29:21.775]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[09:29:21.775]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[09:29:21.775]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[09:29:21.775]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[09:29:21.775]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[09:29:21.775]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[09:29:21.775]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[09:29:21.775]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[09:29:21.775]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[09:29:21.775]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[09:29:21.775]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[09:29:21.775]                     -1512233174L, -1985955764L, -425390065L, 
[09:29:21.775]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[09:29:21.775]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[09:29:21.775]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[09:29:21.775]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[09:29:21.775]                     1818328109L, -1284085436L, -1981489558L, 
[09:29:21.775]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[09:29:21.775]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[09:29:21.775]                     -1718567047L, -793788661L, -1133789126L, 
[09:29:21.775]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[09:29:21.775]                     -1823521982L, -1345991523L, -1672661737L, 
[09:29:21.775]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[09:29:21.775]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[09:29:21.775]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[09:29:21.775]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[09:29:21.775]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[09:29:21.775]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[09:29:21.775]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[09:29:21.775]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[09:29:21.775]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[09:29:21.775]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[09:29:21.775]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[09:29:21.775]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[09:29:21.775]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[09:29:21.775]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[09:29:21.775]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[09:29:21.775]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[09:29:21.775]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[09:29:21.775]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[09:29:21.775]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[09:29:21.775]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[09:29:21.775]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[09:29:21.775]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[09:29:21.775]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[09:29:21.775]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[09:29:21.775]                     -1119334354L, -1521015416L, -2041922421L, 
[09:29:21.775]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[09:29:21.775]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[09:29:21.775]                     1232111981L, -1801753084L, -1608606422L, 
[09:29:21.775]                     -1172096363L, 1420874031L, -1210473418L, 
[09:29:21.775]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[09:29:21.775]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[09:29:21.775]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[09:29:21.775]                     679371266L, -591318819L, -104578089L, -172818754L, 
[09:29:21.775]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[09:29:21.775]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[09:29:21.775]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[09:29:21.775]                     -332493318L, -1978392251L, -1691039632L, 
[09:29:21.775]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[09:29:21.775]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[09:29:21.775]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[09:29:21.775]                     87560756L, -87565624L, 426345146L, -699970416L, 
[09:29:21.775]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[09:29:21.775]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[09:29:21.775]                     -1178330196L, -687617348L, -1701912078L, 
[09:29:21.775]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[09:29:21.775]                     -1345416048L, 1816730492L, -1570431212L, 
[09:29:21.775]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[09:29:21.775]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[09:29:21.775]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[09:29:21.775]                     -1493184262L, -1943836976L, -590788308L, 
[09:29:21.775]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[09:29:21.775]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[09:29:21.775]                     1274857340L, -1205842638L, -1938479504L, 
[09:29:21.775]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[09:29:21.775]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[09:29:21.775]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[09:29:21.775]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[09:29:21.775]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[09:29:21.775]                     -1460751252L, 1201879444L, -1459788718L, 
[09:29:21.775]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[09:29:21.775]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[09:29:21.775]                     -420945808L, -1997735900L, -1838404552L, 
[09:29:21.775]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[09:29:21.775]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[09:29:21.775]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[09:29:21.775]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[09:29:21.775]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[09:29:21.775]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[09:29:21.775]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[09:29:21.775]                     942193650L, 751741680L, 689743428L, -18455976L, 
[09:29:21.775]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[09:29:21.775]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[09:29:21.775]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[09:29:21.775]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[09:29:21.775]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[09:29:21.775]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[09:29:21.775]                     -1357570110L, 1896595240L, -2066952276L, 
[09:29:21.775]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[09:29:21.775]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[09:29:21.775]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[09:29:21.775]                     769655120L, 236357794L, 181393736L, -13334772L, 
[09:29:21.775]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[09:29:21.775]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[09:29:21.775]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[09:29:21.775]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[09:29:21.775]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[09:29:21.775]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[09:29:21.775]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[09:29:21.775]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[09:29:21.775]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[09:29:21.775]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[09:29:21.775]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[09:29:21.775]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[09:29:21.775]                     -1365842884L, -438961294L, -1851472272L, 
[09:29:21.775]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[09:29:21.775]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[09:29:21.775]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[09:29:21.775]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[09:29:21.775]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[09:29:21.775]                     -594809770L, -2146766621L, -2013964635L, 
[09:29:21.775]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[09:29:21.775]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[09:29:21.775]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[09:29:21.775]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[09:29:21.775]                     -1426021878L, -1285634264L, 1507547537L, 
[09:29:21.775]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[09:29:21.775]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[09:29:21.775]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[09:29:21.775]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[09:29:21.775]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[09:29:21.775]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[09:29:21.775]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[09:29:21.775]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[09:29:21.775]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[09:29:21.775]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[09:29:21.775]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[09:29:21.775]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[09:29:21.775]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[09:29:21.775]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[09:29:21.775]                     -1604604761L, 1421229008L, -1268333714L, 
[09:29:21.775]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[09:29:21.775]                     -2070476623L, -2099222749L, 1141171236L, 
[09:29:21.775]                     -146426158L, -1797385433L, -1129376399L, 
[09:29:21.775]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[09:29:21.775]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[09:29:21.775]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[09:29:21.775]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[09:29:21.775]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[09:29:21.775]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[09:29:21.775]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[09:29:21.775]                     -1092079724L, -1765622238L, -1882554057L, 
[09:29:21.775]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[09:29:21.775]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[09:29:21.775]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[09:29:21.775]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[09:29:21.775]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[09:29:21.775]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[09:29:21.775]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[09:29:21.775]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[09:29:21.775]                     865377681L, -1127426242L), envir = base::globalenv(), 
[09:29:21.775]                       inherits = FALSE)
[09:29:21.775]                     NULL
[09:29:21.775]                   }
[09:29:21.775]                   options(future.plan = NULL)
[09:29:21.775]                   if (is.na(NA_character_)) 
[09:29:21.775]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.775]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.775]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.775]                     .init = FALSE)
[09:29:21.775]                 }
[09:29:21.775]             }
[09:29:21.775]         }
[09:29:21.775]     })
[09:29:21.775]     if (TRUE) {
[09:29:21.775]         base::sink(type = "output", split = FALSE)
[09:29:21.775]         if (TRUE) {
[09:29:21.775]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.775]         }
[09:29:21.775]         else {
[09:29:21.775]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.775]         }
[09:29:21.775]         base::close(...future.stdout)
[09:29:21.775]         ...future.stdout <- NULL
[09:29:21.775]     }
[09:29:21.775]     ...future.result$conditions <- ...future.conditions
[09:29:21.775]     ...future.result$finished <- base::Sys.time()
[09:29:21.775]     ...future.result
[09:29:21.775] }
[09:29:21.778] assign_globals() ...
[09:29:21.778] List of 5
[09:29:21.778]  $ ...future.FUN            :function (...)  
[09:29:21.778]  $ future.call.arguments    : list()
[09:29:21.778]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.778]  $ ...future.elements_ii    :List of 5
[09:29:21.778]   ..$ : int 0
[09:29:21.778]   ..$ : int 0
[09:29:21.778]   ..$ : int 0
[09:29:21.778]   ..$ : int 0
[09:29:21.778]   ..$ : int 0
[09:29:21.778]  $ ...future.seeds_ii       :List of 5
[09:29:21.778]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[09:29:21.778]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[09:29:21.778]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[09:29:21.778]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[09:29:21.778]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[09:29:21.778]  $ ...future.globals.maxSize: NULL
[09:29:21.778]  - attr(*, "where")=List of 5
[09:29:21.778]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.778]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.778]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.778]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.778]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.778]  - attr(*, "resolved")= logi FALSE
[09:29:21.778]  - attr(*, "total_size")= num 616
[09:29:21.778]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.778]  - attr(*, "already-done")= logi TRUE
[09:29:21.784] - reassign environment for ‘...future.FUN’
[09:29:21.785] - copied ‘...future.FUN’ to environment
[09:29:21.785] - copied ‘future.call.arguments’ to environment
[09:29:21.785] - copied ‘...future.elements_ii’ to environment
[09:29:21.785] - copied ‘...future.seeds_ii’ to environment
[09:29:21.785] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.785] assign_globals() ... done
[09:29:21.785] plan(): Setting new future strategy stack:
[09:29:21.785] List of future strategies:
[09:29:21.785] 1. sequential:
[09:29:21.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.785]    - tweaked: FALSE
[09:29:21.785]    - call: NULL
[09:29:21.786] plan(): nbrOfWorkers() = 1
[09:29:21.786] plan(): Setting new future strategy stack:
[09:29:21.787] List of future strategies:
[09:29:21.787] 1. sequential:
[09:29:21.787]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.787]    - tweaked: FALSE
[09:29:21.787]    - call: plan(strategy)
[09:29:21.787] plan(): nbrOfWorkers() = 1
[09:29:21.787] SequentialFuture started (and completed)
[09:29:21.787] - Launch lazy future ... done
[09:29:21.787] run() for ‘SequentialFuture’ ... done
[09:29:21.787] Created future:
[09:29:21.787] SequentialFuture:
[09:29:21.787] Label: ‘future_replicate-1’
[09:29:21.787] Expression:
[09:29:21.787] {
[09:29:21.787]     do.call(function(...) {
[09:29:21.787]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.787]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.787]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.787]             on.exit(options(oopts), add = TRUE)
[09:29:21.787]         }
[09:29:21.787]         {
[09:29:21.787]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.787]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.787]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.787]                   envir = globalenv(), inherits = FALSE)
[09:29:21.787]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.787]             })
[09:29:21.787]         }
[09:29:21.787]     }, args = future.call.arguments)
[09:29:21.787] }
[09:29:21.787] Lazy evaluation: FALSE
[09:29:21.787] Asynchronous evaluation: FALSE
[09:29:21.787] Local evaluation: TRUE
[09:29:21.787] Environment: R_GlobalEnv
[09:29:21.787] Capture standard output: TRUE
[09:29:21.787] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.787] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.787] Packages: <none>
[09:29:21.787] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.787] Resolved: TRUE
[09:29:21.787] Value: 280 bytes of class ‘list’
[09:29:21.787] Early signaling: FALSE
[09:29:21.787] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.787] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.788] Chunk #1 of 1 ... DONE
[09:29:21.789] Launching 1 futures (chunks) ... DONE
[09:29:21.789] Resolving 1 futures (chunks) ...
[09:29:21.789] resolve() on list ...
[09:29:21.789]  recursive: 0
[09:29:21.789]  length: 1
[09:29:21.789] 
[09:29:21.789] resolved() for ‘SequentialFuture’ ...
[09:29:21.789] - state: ‘finished’
[09:29:21.789] - run: TRUE
[09:29:21.789] - result: ‘FutureResult’
[09:29:21.789] resolved() for ‘SequentialFuture’ ... done
[09:29:21.789] Future #1
[09:29:21.790] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:29:21.790] - nx: 1
[09:29:21.790] - relay: TRUE
[09:29:21.790] - stdout: TRUE
[09:29:21.790] - signal: TRUE
[09:29:21.790] - resignal: FALSE
[09:29:21.790] - force: TRUE
[09:29:21.790] - relayed: [n=1] FALSE
[09:29:21.790] - queued futures: [n=1] FALSE
[09:29:21.790]  - until=1
[09:29:21.790]  - relaying element #1
[09:29:21.791] - relayed: [n=1] TRUE
[09:29:21.791] - queued futures: [n=1] TRUE
[09:29:21.791] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:29:21.791]  length: 0 (resolved future 1)
[09:29:21.791] Relaying remaining futures
[09:29:21.791] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.791] - nx: 1
[09:29:21.791] - relay: TRUE
[09:29:21.791] - stdout: TRUE
[09:29:21.791] - signal: TRUE
[09:29:21.791] - resignal: FALSE
[09:29:21.791] - force: TRUE
[09:29:21.792] - relayed: [n=1] TRUE
[09:29:21.792] - queued futures: [n=1] TRUE
 - flush all
[09:29:21.792] - relayed: [n=1] TRUE
[09:29:21.792] - queued futures: [n=1] TRUE
[09:29:21.792] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.792] resolve() on list ... DONE
[09:29:21.792]  - Number of value chunks collected: 1
[09:29:21.792] Resolving 1 futures (chunks) ... DONE
[09:29:21.792] Reducing values from 1 chunks ...
[09:29:21.792]  - Number of values collected after concatenation: 5
[09:29:21.792]  - Number of values expected: 5
[09:29:21.793] Reducing values from 1 chunks ... DONE
[09:29:21.793] future_lapply() ... DONE
[09:29:21.793] future_lapply() ...
[09:29:21.793] Generating random seeds ...
[09:29:21.793] Generating random seed streams for 5 elements ...
[09:29:21.793] Generating random seed streams for 5 elements ... DONE
[09:29:21.793] Generating random seeds ... DONE
[09:29:21.794] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.795] Number of chunks: 1
[09:29:21.795] getGlobalsAndPackagesXApply() ...
[09:29:21.795]  - future.globals: TRUE
[09:29:21.795] getGlobalsAndPackages() ...
[09:29:21.795] Searching for globals...
[09:29:21.796] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.796] Searching for globals ... DONE
[09:29:21.797] Resolving globals: FALSE
[09:29:21.797] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.797] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.797] - globals: [1] ‘FUN’
[09:29:21.797] 
[09:29:21.797] getGlobalsAndPackages() ... DONE
[09:29:21.798]  - globals found/used: [n=1] ‘FUN’
[09:29:21.798]  - needed namespaces: [n=0] 
[09:29:21.798] Finding globals ... DONE
[09:29:21.798]  - use_args: TRUE
[09:29:21.798]  - Getting '...' globals ...
[09:29:21.798] resolve() on list ...
[09:29:21.798]  recursive: 0
[09:29:21.798]  length: 1
[09:29:21.798]  elements: ‘...’
[09:29:21.799]  length: 0 (resolved future 1)
[09:29:21.799] resolve() on list ... DONE
[09:29:21.799]    - '...' content: [n=0] 
[09:29:21.799] List of 1
[09:29:21.799]  $ ...: list()
[09:29:21.799]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.799]  - attr(*, "where")=List of 1
[09:29:21.799]   ..$ ...:<environment: 0x55d1cbdcc148> 
[09:29:21.799]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.799]  - attr(*, "resolved")= logi TRUE
[09:29:21.799]  - attr(*, "total_size")= num NA
[09:29:21.801]  - Getting '...' globals ... DONE
[09:29:21.801] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:21.801] List of 2
[09:29:21.801]  $ ...future.FUN:function (...)  
[09:29:21.801]  $ ...          : list()
[09:29:21.801]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.801]  - attr(*, "where")=List of 2
[09:29:21.801]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.801]   ..$ ...          :<environment: 0x55d1cbdcc148> 
[09:29:21.801]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.801]  - attr(*, "resolved")= logi FALSE
[09:29:21.801]  - attr(*, "total_size")= num 616
[09:29:21.804] Packages to be attached in all futures: [n=0] 
[09:29:21.804] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.804] Number of futures (= number of chunks): 1
[09:29:21.804] Launching 1 futures (chunks) ...
[09:29:21.804] Chunk #1 of 1 ...
[09:29:21.804]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.804] getGlobalsAndPackages() ...
[09:29:21.805] Searching for globals...
[09:29:21.805] 
[09:29:21.805] Searching for globals ... DONE
[09:29:21.805] - globals: [0] <none>
[09:29:21.805] getGlobalsAndPackages() ... DONE
[09:29:21.805]    + additional globals found: [n=0] 
[09:29:21.805]    + additional namespaces needed: [n=0] 
[09:29:21.805]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.805]  - seeds: [5] <seeds>
[09:29:21.805]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.806] getGlobalsAndPackages() ...
[09:29:21.806] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.806] Resolving globals: FALSE
[09:29:21.806] Tweak future expression to call with '...' arguments ...
[09:29:21.806] {
[09:29:21.806]     do.call(function(...) {
[09:29:21.806]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.806]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.806]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.806]             on.exit(options(oopts), add = TRUE)
[09:29:21.806]         }
[09:29:21.806]         {
[09:29:21.806]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.806]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.806]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.806]                   envir = globalenv(), inherits = FALSE)
[09:29:21.806]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.806]             })
[09:29:21.806]         }
[09:29:21.806]     }, args = future.call.arguments)
[09:29:21.806] }
[09:29:21.806] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.806] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.807] 
[09:29:21.807] getGlobalsAndPackages() ... DONE
[09:29:21.807] run() for ‘Future’ ...
[09:29:21.807] - state: ‘created’
[09:29:21.807] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:29:21.807] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.807] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:29:21.808]   - Field: ‘label’
[09:29:21.808]   - Field: ‘local’
[09:29:21.808]   - Field: ‘owner’
[09:29:21.808]   - Field: ‘envir’
[09:29:21.808]   - Field: ‘packages’
[09:29:21.808]   - Field: ‘gc’
[09:29:21.808]   - Field: ‘conditions’
[09:29:21.808]   - Field: ‘expr’
[09:29:21.808]   - Field: ‘uuid’
[09:29:21.808]   - Field: ‘seed’
[09:29:21.808]   - Field: ‘version’
[09:29:21.809]   - Field: ‘result’
[09:29:21.809]   - Field: ‘asynchronous’
[09:29:21.809]   - Field: ‘calls’
[09:29:21.809]   - Field: ‘globals’
[09:29:21.809]   - Field: ‘stdout’
[09:29:21.809]   - Field: ‘earlySignal’
[09:29:21.809]   - Field: ‘lazy’
[09:29:21.809]   - Field: ‘state’
[09:29:21.809] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:29:21.809] - Launch lazy future ...
[09:29:21.809] Packages needed by the future expression (n = 0): <none>
[09:29:21.810] Packages needed by future strategies (n = 0): <none>
[09:29:21.810] {
[09:29:21.810]     {
[09:29:21.810]         {
[09:29:21.810]             ...future.startTime <- base::Sys.time()
[09:29:21.810]             {
[09:29:21.810]                 {
[09:29:21.810]                   {
[09:29:21.810]                     base::local({
[09:29:21.810]                       has_future <- base::requireNamespace("future", 
[09:29:21.810]                         quietly = TRUE)
[09:29:21.810]                       if (has_future) {
[09:29:21.810]                         ns <- base::getNamespace("future")
[09:29:21.810]                         version <- ns[[".package"]][["version"]]
[09:29:21.810]                         if (is.null(version)) 
[09:29:21.810]                           version <- utils::packageVersion("future")
[09:29:21.810]                       }
[09:29:21.810]                       else {
[09:29:21.810]                         version <- NULL
[09:29:21.810]                       }
[09:29:21.810]                       if (!has_future || version < "1.8.0") {
[09:29:21.810]                         info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.810]                           "", base::R.version$version.string), 
[09:29:21.810]                           platform = base::sprintf("%s (%s-bit)", 
[09:29:21.810]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.810]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.810]                             "release", "version")], collapse = " "), 
[09:29:21.810]                           hostname = base::Sys.info()[["nodename"]])
[09:29:21.810]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.810]                           info)
[09:29:21.810]                         info <- base::paste(info, collapse = "; ")
[09:29:21.810]                         if (!has_future) {
[09:29:21.810]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.810]                             info)
[09:29:21.810]                         }
[09:29:21.810]                         else {
[09:29:21.810]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.810]                             info, version)
[09:29:21.810]                         }
[09:29:21.810]                         base::stop(msg)
[09:29:21.810]                       }
[09:29:21.810]                     })
[09:29:21.810]                   }
[09:29:21.810]                   ...future.strategy.old <- future::plan("list")
[09:29:21.810]                   options(future.plan = NULL)
[09:29:21.810]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.810]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.810]                 }
[09:29:21.810]                 ...future.workdir <- getwd()
[09:29:21.810]             }
[09:29:21.810]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.810]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.810]         }
[09:29:21.810]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.810]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:21.810]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.810]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.810]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.810]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.810]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.810]             base::names(...future.oldOptions))
[09:29:21.810]     }
[09:29:21.810]     if (FALSE) {
[09:29:21.810]     }
[09:29:21.810]     else {
[09:29:21.810]         if (TRUE) {
[09:29:21.810]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.810]                 open = "w")
[09:29:21.810]         }
[09:29:21.810]         else {
[09:29:21.810]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.810]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.810]         }
[09:29:21.810]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.810]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.810]             base::sink(type = "output", split = FALSE)
[09:29:21.810]             base::close(...future.stdout)
[09:29:21.810]         }, add = TRUE)
[09:29:21.810]     }
[09:29:21.810]     ...future.frame <- base::sys.nframe()
[09:29:21.810]     ...future.conditions <- base::list()
[09:29:21.810]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.810]     if (FALSE) {
[09:29:21.810]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.810]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.810]     }
[09:29:21.810]     ...future.result <- base::tryCatch({
[09:29:21.810]         base::withCallingHandlers({
[09:29:21.810]             ...future.value <- base::withVisible(base::local({
[09:29:21.810]                 do.call(function(...) {
[09:29:21.810]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.810]                   if (!identical(...future.globals.maxSize.org, 
[09:29:21.810]                     ...future.globals.maxSize)) {
[09:29:21.810]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.810]                     on.exit(options(oopts), add = TRUE)
[09:29:21.810]                   }
[09:29:21.810]                   {
[09:29:21.810]                     lapply(seq_along(...future.elements_ii), 
[09:29:21.810]                       FUN = function(jj) {
[09:29:21.810]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.810]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.810]                           envir = globalenv(), inherits = FALSE)
[09:29:21.810]                         ...future.FUN(...future.X_jj, ...)
[09:29:21.810]                       })
[09:29:21.810]                   }
[09:29:21.810]                 }, args = future.call.arguments)
[09:29:21.810]             }))
[09:29:21.810]             future::FutureResult(value = ...future.value$value, 
[09:29:21.810]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.810]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.810]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.810]                     ...future.globalenv.names))
[09:29:21.810]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.810]         }, condition = base::local({
[09:29:21.810]             c <- base::c
[09:29:21.810]             inherits <- base::inherits
[09:29:21.810]             invokeRestart <- base::invokeRestart
[09:29:21.810]             length <- base::length
[09:29:21.810]             list <- base::list
[09:29:21.810]             seq.int <- base::seq.int
[09:29:21.810]             signalCondition <- base::signalCondition
[09:29:21.810]             sys.calls <- base::sys.calls
[09:29:21.810]             `[[` <- base::`[[`
[09:29:21.810]             `+` <- base::`+`
[09:29:21.810]             `<<-` <- base::`<<-`
[09:29:21.810]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.810]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.810]                   3L)]
[09:29:21.810]             }
[09:29:21.810]             function(cond) {
[09:29:21.810]                 is_error <- inherits(cond, "error")
[09:29:21.810]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.810]                   NULL)
[09:29:21.810]                 if (is_error) {
[09:29:21.810]                   sessionInformation <- function() {
[09:29:21.810]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.810]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.810]                       search = base::search(), system = base::Sys.info())
[09:29:21.810]                   }
[09:29:21.810]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.810]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.810]                     cond$call), session = sessionInformation(), 
[09:29:21.810]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.810]                   signalCondition(cond)
[09:29:21.810]                 }
[09:29:21.810]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.810]                 "immediateCondition"))) {
[09:29:21.810]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.810]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.810]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.810]                   if (TRUE && !signal) {
[09:29:21.810]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.810]                     {
[09:29:21.810]                       inherits <- base::inherits
[09:29:21.810]                       invokeRestart <- base::invokeRestart
[09:29:21.810]                       is.null <- base::is.null
[09:29:21.810]                       muffled <- FALSE
[09:29:21.810]                       if (inherits(cond, "message")) {
[09:29:21.810]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.810]                         if (muffled) 
[09:29:21.810]                           invokeRestart("muffleMessage")
[09:29:21.810]                       }
[09:29:21.810]                       else if (inherits(cond, "warning")) {
[09:29:21.810]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.810]                         if (muffled) 
[09:29:21.810]                           invokeRestart("muffleWarning")
[09:29:21.810]                       }
[09:29:21.810]                       else if (inherits(cond, "condition")) {
[09:29:21.810]                         if (!is.null(pattern)) {
[09:29:21.810]                           computeRestarts <- base::computeRestarts
[09:29:21.810]                           grepl <- base::grepl
[09:29:21.810]                           restarts <- computeRestarts(cond)
[09:29:21.810]                           for (restart in restarts) {
[09:29:21.810]                             name <- restart$name
[09:29:21.810]                             if (is.null(name)) 
[09:29:21.810]                               next
[09:29:21.810]                             if (!grepl(pattern, name)) 
[09:29:21.810]                               next
[09:29:21.810]                             invokeRestart(restart)
[09:29:21.810]                             muffled <- TRUE
[09:29:21.810]                             break
[09:29:21.810]                           }
[09:29:21.810]                         }
[09:29:21.810]                       }
[09:29:21.810]                       invisible(muffled)
[09:29:21.810]                     }
[09:29:21.810]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.810]                   }
[09:29:21.810]                 }
[09:29:21.810]                 else {
[09:29:21.810]                   if (TRUE) {
[09:29:21.810]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.810]                     {
[09:29:21.810]                       inherits <- base::inherits
[09:29:21.810]                       invokeRestart <- base::invokeRestart
[09:29:21.810]                       is.null <- base::is.null
[09:29:21.810]                       muffled <- FALSE
[09:29:21.810]                       if (inherits(cond, "message")) {
[09:29:21.810]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.810]                         if (muffled) 
[09:29:21.810]                           invokeRestart("muffleMessage")
[09:29:21.810]                       }
[09:29:21.810]                       else if (inherits(cond, "warning")) {
[09:29:21.810]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.810]                         if (muffled) 
[09:29:21.810]                           invokeRestart("muffleWarning")
[09:29:21.810]                       }
[09:29:21.810]                       else if (inherits(cond, "condition")) {
[09:29:21.810]                         if (!is.null(pattern)) {
[09:29:21.810]                           computeRestarts <- base::computeRestarts
[09:29:21.810]                           grepl <- base::grepl
[09:29:21.810]                           restarts <- computeRestarts(cond)
[09:29:21.810]                           for (restart in restarts) {
[09:29:21.810]                             name <- restart$name
[09:29:21.810]                             if (is.null(name)) 
[09:29:21.810]                               next
[09:29:21.810]                             if (!grepl(pattern, name)) 
[09:29:21.810]                               next
[09:29:21.810]                             invokeRestart(restart)
[09:29:21.810]                             muffled <- TRUE
[09:29:21.810]                             break
[09:29:21.810]                           }
[09:29:21.810]                         }
[09:29:21.810]                       }
[09:29:21.810]                       invisible(muffled)
[09:29:21.810]                     }
[09:29:21.810]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.810]                   }
[09:29:21.810]                 }
[09:29:21.810]             }
[09:29:21.810]         }))
[09:29:21.810]     }, error = function(ex) {
[09:29:21.810]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.810]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.810]                 ...future.rng), started = ...future.startTime, 
[09:29:21.810]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.810]             version = "1.8"), class = "FutureResult")
[09:29:21.810]     }, finally = {
[09:29:21.810]         if (!identical(...future.workdir, getwd())) 
[09:29:21.810]             setwd(...future.workdir)
[09:29:21.810]         {
[09:29:21.810]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.810]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.810]             }
[09:29:21.810]             base::options(...future.oldOptions)
[09:29:21.810]             if (.Platform$OS.type == "windows") {
[09:29:21.810]                 old_names <- names(...future.oldEnvVars)
[09:29:21.810]                 envs <- base::Sys.getenv()
[09:29:21.810]                 names <- names(envs)
[09:29:21.810]                 common <- intersect(names, old_names)
[09:29:21.810]                 added <- setdiff(names, old_names)
[09:29:21.810]                 removed <- setdiff(old_names, names)
[09:29:21.810]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.810]                   envs[common]]
[09:29:21.810]                 NAMES <- toupper(changed)
[09:29:21.810]                 args <- list()
[09:29:21.810]                 for (kk in seq_along(NAMES)) {
[09:29:21.810]                   name <- changed[[kk]]
[09:29:21.810]                   NAME <- NAMES[[kk]]
[09:29:21.810]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.810]                     next
[09:29:21.810]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.810]                 }
[09:29:21.810]                 NAMES <- toupper(added)
[09:29:21.810]                 for (kk in seq_along(NAMES)) {
[09:29:21.810]                   name <- added[[kk]]
[09:29:21.810]                   NAME <- NAMES[[kk]]
[09:29:21.810]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.810]                     next
[09:29:21.810]                   args[[name]] <- ""
[09:29:21.810]                 }
[09:29:21.810]                 NAMES <- toupper(removed)
[09:29:21.810]                 for (kk in seq_along(NAMES)) {
[09:29:21.810]                   name <- removed[[kk]]
[09:29:21.810]                   NAME <- NAMES[[kk]]
[09:29:21.810]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.810]                     next
[09:29:21.810]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.810]                 }
[09:29:21.810]                 if (length(args) > 0) 
[09:29:21.810]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.810]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.810]             }
[09:29:21.810]             else {
[09:29:21.810]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.810]             }
[09:29:21.810]             {
[09:29:21.810]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.810]                   0L) {
[09:29:21.810]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.810]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.810]                   base::options(opts)
[09:29:21.810]                 }
[09:29:21.810]                 {
[09:29:21.810]                   {
[09:29:21.810]                     base::assign(".Random.seed", c(10403L, 6L, 
[09:29:21.810]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[09:29:21.810]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[09:29:21.810]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[09:29:21.810]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[09:29:21.810]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[09:29:21.810]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[09:29:21.810]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[09:29:21.810]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[09:29:21.810]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[09:29:21.810]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[09:29:21.810]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[09:29:21.810]                     -1512233174L, -1985955764L, -425390065L, 
[09:29:21.810]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[09:29:21.810]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[09:29:21.810]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[09:29:21.810]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[09:29:21.810]                     1818328109L, -1284085436L, -1981489558L, 
[09:29:21.810]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[09:29:21.810]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[09:29:21.810]                     -1718567047L, -793788661L, -1133789126L, 
[09:29:21.810]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[09:29:21.810]                     -1823521982L, -1345991523L, -1672661737L, 
[09:29:21.810]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[09:29:21.810]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[09:29:21.810]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[09:29:21.810]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[09:29:21.810]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[09:29:21.810]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[09:29:21.810]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[09:29:21.810]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[09:29:21.810]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[09:29:21.810]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[09:29:21.810]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[09:29:21.810]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[09:29:21.810]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[09:29:21.810]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[09:29:21.810]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[09:29:21.810]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[09:29:21.810]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[09:29:21.810]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[09:29:21.810]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[09:29:21.810]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[09:29:21.810]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[09:29:21.810]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[09:29:21.810]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[09:29:21.810]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[09:29:21.810]                     -1119334354L, -1521015416L, -2041922421L, 
[09:29:21.810]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[09:29:21.810]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[09:29:21.810]                     1232111981L, -1801753084L, -1608606422L, 
[09:29:21.810]                     -1172096363L, 1420874031L, -1210473418L, 
[09:29:21.810]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[09:29:21.810]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[09:29:21.810]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[09:29:21.810]                     679371266L, -591318819L, -104578089L, -172818754L, 
[09:29:21.810]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[09:29:21.810]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[09:29:21.810]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[09:29:21.810]                     -332493318L, -1978392251L, -1691039632L, 
[09:29:21.810]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[09:29:21.810]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[09:29:21.810]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[09:29:21.810]                     87560756L, -87565624L, 426345146L, -699970416L, 
[09:29:21.810]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[09:29:21.810]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[09:29:21.810]                     -1178330196L, -687617348L, -1701912078L, 
[09:29:21.810]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[09:29:21.810]                     -1345416048L, 1816730492L, -1570431212L, 
[09:29:21.810]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[09:29:21.810]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[09:29:21.810]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[09:29:21.810]                     -1493184262L, -1943836976L, -590788308L, 
[09:29:21.810]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[09:29:21.810]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[09:29:21.810]                     1274857340L, -1205842638L, -1938479504L, 
[09:29:21.810]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[09:29:21.810]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[09:29:21.810]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[09:29:21.810]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[09:29:21.810]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[09:29:21.810]                     -1460751252L, 1201879444L, -1459788718L, 
[09:29:21.810]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[09:29:21.810]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[09:29:21.810]                     -420945808L, -1997735900L, -1838404552L, 
[09:29:21.810]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[09:29:21.810]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[09:29:21.810]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[09:29:21.810]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[09:29:21.810]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[09:29:21.810]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[09:29:21.810]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[09:29:21.810]                     942193650L, 751741680L, 689743428L, -18455976L, 
[09:29:21.810]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[09:29:21.810]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[09:29:21.810]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[09:29:21.810]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[09:29:21.810]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[09:29:21.810]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[09:29:21.810]                     -1357570110L, 1896595240L, -2066952276L, 
[09:29:21.810]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[09:29:21.810]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[09:29:21.810]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[09:29:21.810]                     769655120L, 236357794L, 181393736L, -13334772L, 
[09:29:21.810]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[09:29:21.810]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[09:29:21.810]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[09:29:21.810]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[09:29:21.810]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[09:29:21.810]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[09:29:21.810]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[09:29:21.810]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[09:29:21.810]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[09:29:21.810]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[09:29:21.810]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[09:29:21.810]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[09:29:21.810]                     -1365842884L, -438961294L, -1851472272L, 
[09:29:21.810]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[09:29:21.810]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[09:29:21.810]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[09:29:21.810]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[09:29:21.810]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[09:29:21.810]                     -594809770L, -2146766621L, -2013964635L, 
[09:29:21.810]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[09:29:21.810]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[09:29:21.810]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[09:29:21.810]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[09:29:21.810]                     -1426021878L, -1285634264L, 1507547537L, 
[09:29:21.810]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[09:29:21.810]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[09:29:21.810]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[09:29:21.810]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[09:29:21.810]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[09:29:21.810]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[09:29:21.810]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[09:29:21.810]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[09:29:21.810]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[09:29:21.810]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[09:29:21.810]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[09:29:21.810]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[09:29:21.810]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[09:29:21.810]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[09:29:21.810]                     -1604604761L, 1421229008L, -1268333714L, 
[09:29:21.810]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[09:29:21.810]                     -2070476623L, -2099222749L, 1141171236L, 
[09:29:21.810]                     -146426158L, -1797385433L, -1129376399L, 
[09:29:21.810]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[09:29:21.810]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[09:29:21.810]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[09:29:21.810]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[09:29:21.810]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[09:29:21.810]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[09:29:21.810]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[09:29:21.810]                     -1092079724L, -1765622238L, -1882554057L, 
[09:29:21.810]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[09:29:21.810]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[09:29:21.810]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[09:29:21.810]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[09:29:21.810]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[09:29:21.810]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[09:29:21.810]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[09:29:21.810]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[09:29:21.810]                     865377681L, -1127426242L), envir = base::globalenv(), 
[09:29:21.810]                       inherits = FALSE)
[09:29:21.810]                     NULL
[09:29:21.810]                   }
[09:29:21.810]                   options(future.plan = NULL)
[09:29:21.810]                   if (is.na(NA_character_)) 
[09:29:21.810]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.810]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.810]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.810]                     .init = FALSE)
[09:29:21.810]                 }
[09:29:21.810]             }
[09:29:21.810]         }
[09:29:21.810]     })
[09:29:21.810]     if (TRUE) {
[09:29:21.810]         base::sink(type = "output", split = FALSE)
[09:29:21.810]         if (TRUE) {
[09:29:21.810]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.810]         }
[09:29:21.810]         else {
[09:29:21.810]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.810]         }
[09:29:21.810]         base::close(...future.stdout)
[09:29:21.810]         ...future.stdout <- NULL
[09:29:21.810]     }
[09:29:21.810]     ...future.result$conditions <- ...future.conditions
[09:29:21.810]     ...future.result$finished <- base::Sys.time()
[09:29:21.810]     ...future.result
[09:29:21.810] }
[09:29:21.812] assign_globals() ...
[09:29:21.813] List of 5
[09:29:21.813]  $ ...future.FUN            :function (...)  
[09:29:21.813]  $ future.call.arguments    : list()
[09:29:21.813]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.813]  $ ...future.elements_ii    :List of 5
[09:29:21.813]   ..$ : int 0
[09:29:21.813]   ..$ : int 0
[09:29:21.813]   ..$ : int 0
[09:29:21.813]   ..$ : int 0
[09:29:21.813]   ..$ : int 0
[09:29:21.813]  $ ...future.seeds_ii       :List of 5
[09:29:21.813]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[09:29:21.813]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[09:29:21.813]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[09:29:21.813]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[09:29:21.813]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[09:29:21.813]  $ ...future.globals.maxSize: NULL
[09:29:21.813]  - attr(*, "where")=List of 5
[09:29:21.813]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.813]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.813]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.813]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.813]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.813]  - attr(*, "resolved")= logi FALSE
[09:29:21.813]  - attr(*, "total_size")= num 616
[09:29:21.813]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.813]  - attr(*, "already-done")= logi TRUE
[09:29:21.820] - reassign environment for ‘...future.FUN’
[09:29:21.820] - copied ‘...future.FUN’ to environment
[09:29:21.820] - copied ‘future.call.arguments’ to environment
[09:29:21.820] - copied ‘...future.elements_ii’ to environment
[09:29:21.821] - copied ‘...future.seeds_ii’ to environment
[09:29:21.821] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.821] assign_globals() ... done
[09:29:21.821] plan(): Setting new future strategy stack:
[09:29:21.821] List of future strategies:
[09:29:21.821] 1. sequential:
[09:29:21.821]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.821]    - tweaked: FALSE
[09:29:21.821]    - call: NULL
[09:29:21.821] plan(): nbrOfWorkers() = 1
[09:29:21.822] plan(): Setting new future strategy stack:
[09:29:21.822] List of future strategies:
[09:29:21.822] 1. sequential:
[09:29:21.822]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.822]    - tweaked: FALSE
[09:29:21.822]    - call: plan(strategy)
[09:29:21.823] plan(): nbrOfWorkers() = 1
[09:29:21.823] SequentialFuture started (and completed)
[09:29:21.823] - Launch lazy future ... done
[09:29:21.823] run() for ‘SequentialFuture’ ... done
[09:29:21.823] Created future:
[09:29:21.823] SequentialFuture:
[09:29:21.823] Label: ‘future_replicate-1’
[09:29:21.823] Expression:
[09:29:21.823] {
[09:29:21.823]     do.call(function(...) {
[09:29:21.823]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.823]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.823]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.823]             on.exit(options(oopts), add = TRUE)
[09:29:21.823]         }
[09:29:21.823]         {
[09:29:21.823]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.823]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.823]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.823]                   envir = globalenv(), inherits = FALSE)
[09:29:21.823]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.823]             })
[09:29:21.823]         }
[09:29:21.823]     }, args = future.call.arguments)
[09:29:21.823] }
[09:29:21.823] Lazy evaluation: FALSE
[09:29:21.823] Asynchronous evaluation: FALSE
[09:29:21.823] Local evaluation: TRUE
[09:29:21.823] Environment: R_GlobalEnv
[09:29:21.823] Capture standard output: TRUE
[09:29:21.823] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.823] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.823] Packages: <none>
[09:29:21.823] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.823] Resolved: TRUE
[09:29:21.823] Value: 280 bytes of class ‘list’
[09:29:21.823] Early signaling: FALSE
[09:29:21.823] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.823] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.824] Chunk #1 of 1 ... DONE
[09:29:21.824] Launching 1 futures (chunks) ... DONE
[09:29:21.824] Resolving 1 futures (chunks) ...
[09:29:21.824] resolve() on list ...
[09:29:21.825]  recursive: 0
[09:29:21.825]  length: 1
[09:29:21.825] 
[09:29:21.825] resolved() for ‘SequentialFuture’ ...
[09:29:21.825] - state: ‘finished’
[09:29:21.825] - run: TRUE
[09:29:21.825] - result: ‘FutureResult’
[09:29:21.825] resolved() for ‘SequentialFuture’ ... done
[09:29:21.825] Future #1
[09:29:21.825] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:29:21.825] - nx: 1
[09:29:21.826] - relay: TRUE
[09:29:21.826] - stdout: TRUE
[09:29:21.826] - signal: TRUE
[09:29:21.826] - resignal: FALSE
[09:29:21.826] - force: TRUE
[09:29:21.826] - relayed: [n=1] FALSE
[09:29:21.826] - queued futures: [n=1] FALSE
[09:29:21.826]  - until=1
[09:29:21.826]  - relaying element #1
[09:29:21.826] - relayed: [n=1] TRUE
[09:29:21.826] - queued futures: [n=1] TRUE
[09:29:21.827] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:29:21.827]  length: 0 (resolved future 1)
[09:29:21.827] Relaying remaining futures
[09:29:21.827] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.827] - nx: 1
[09:29:21.827] - relay: TRUE
[09:29:21.827] - stdout: TRUE
[09:29:21.827] - signal: TRUE
[09:29:21.827] - resignal: FALSE
[09:29:21.827] - force: TRUE
[09:29:21.827] - relayed: [n=1] TRUE
[09:29:21.827] - queued futures: [n=1] TRUE
 - flush all
[09:29:21.828] - relayed: [n=1] TRUE
[09:29:21.828] - queued futures: [n=1] TRUE
[09:29:21.828] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.828] resolve() on list ... DONE
[09:29:21.828]  - Number of value chunks collected: 1
[09:29:21.828] Resolving 1 futures (chunks) ... DONE
[09:29:21.828] Reducing values from 1 chunks ...
[09:29:21.828]  - Number of values collected after concatenation: 5
[09:29:21.828]  - Number of values expected: 5
[09:29:21.828] Reducing values from 1 chunks ... DONE
[09:29:21.828] future_lapply() ... DONE
- example(replicate) ...
[09:29:21.829] future_lapply() ...
[09:29:21.829] Generating random seeds ...
[09:29:21.829] Generating random seed streams for 5 elements ...
[09:29:21.829] Generating random seed streams for 5 elements ... DONE
[09:29:21.829] Generating random seeds ... DONE
[09:29:21.830] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.830] Number of chunks: 1
[09:29:21.830] getGlobalsAndPackagesXApply() ...
[09:29:21.830]  - future.globals: TRUE
[09:29:21.830] getGlobalsAndPackages() ...
[09:29:21.830] Searching for globals...
[09:29:21.832] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[09:29:21.832] Searching for globals ... DONE
[09:29:21.832] Resolving globals: FALSE
[09:29:21.833] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[09:29:21.833] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[09:29:21.833] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[09:29:21.833] 
[09:29:21.833] getGlobalsAndPackages() ... DONE
[09:29:21.833]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[09:29:21.833]  - needed namespaces: [n=0] 
[09:29:21.834] Finding globals ... DONE
[09:29:21.834]  - use_args: TRUE
[09:29:21.834]  - Getting '...' globals ...
[09:29:21.834] resolve() on list ...
[09:29:21.834]  recursive: 0
[09:29:21.834]  length: 1
[09:29:21.834]  elements: ‘...’
[09:29:21.834]  length: 0 (resolved future 1)
[09:29:21.834] resolve() on list ... DONE
[09:29:21.834]    - '...' content: [n=0] 
[09:29:21.835] List of 1
[09:29:21.835]  $ ...: list()
[09:29:21.835]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.835]  - attr(*, "where")=List of 1
[09:29:21.835]   ..$ ...:<environment: 0x55d1cadc3d10> 
[09:29:21.835]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.835]  - attr(*, "resolved")= logi TRUE
[09:29:21.835]  - attr(*, "total_size")= num NA
[09:29:21.837]  - Getting '...' globals ... DONE
[09:29:21.837] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[09:29:21.837] List of 4
[09:29:21.837]  $ ...future.FUN:function (...)  
[09:29:21.837]  $ foo          :function (x = 1, y = 2)  
[09:29:21.837]  $ x            : num 3
[09:29:21.837]  $ ...          : list()
[09:29:21.837]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.837]  - attr(*, "where")=List of 4
[09:29:21.837]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.837]   ..$ foo          :<environment: R_EmptyEnv> 
[09:29:21.837]   ..$ x            :<environment: R_EmptyEnv> 
[09:29:21.837]   ..$ ...          :<environment: 0x55d1cadc3d10> 
[09:29:21.837]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.837]  - attr(*, "resolved")= logi FALSE
[09:29:21.837]  - attr(*, "total_size")= num 2200
[09:29:21.840] Packages to be attached in all futures: [n=0] 
[09:29:21.841] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.841] Number of futures (= number of chunks): 1
[09:29:21.841] Launching 1 futures (chunks) ...
[09:29:21.841] Chunk #1 of 1 ...
[09:29:21.841]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.841] getGlobalsAndPackages() ...
[09:29:21.842] Searching for globals...
[09:29:21.842] 
[09:29:21.842] Searching for globals ... DONE
[09:29:21.843] - globals: [0] <none>
[09:29:21.843] getGlobalsAndPackages() ... DONE
[09:29:21.843]    + additional globals found: [n=0] 
[09:29:21.843]    + additional namespaces needed: [n=0] 
[09:29:21.843]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.843]  - seeds: [5] <seeds>
[09:29:21.843]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.843] getGlobalsAndPackages() ...
[09:29:21.843] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.843] Resolving globals: FALSE
[09:29:21.843] Tweak future expression to call with '...' arguments ...
[09:29:21.844] {
[09:29:21.844]     do.call(function(...) {
[09:29:21.844]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.844]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.844]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.844]             on.exit(options(oopts), add = TRUE)
[09:29:21.844]         }
[09:29:21.844]         {
[09:29:21.844]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.844]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.844]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.844]                   envir = globalenv(), inherits = FALSE)
[09:29:21.844]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.844]             })
[09:29:21.844]         }
[09:29:21.844]     }, args = future.call.arguments)
[09:29:21.844] }
[09:29:21.844] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.844] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.844] 
[09:29:21.844] getGlobalsAndPackages() ... DONE
[09:29:21.845] run() for ‘Future’ ...
[09:29:21.845] - state: ‘created’
[09:29:21.845] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[09:29:21.845] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.845] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[09:29:21.845]   - Field: ‘label’
[09:29:21.845]   - Field: ‘local’
[09:29:21.845]   - Field: ‘owner’
[09:29:21.846]   - Field: ‘envir’
[09:29:21.846]   - Field: ‘packages’
[09:29:21.846]   - Field: ‘gc’
[09:29:21.846]   - Field: ‘conditions’
[09:29:21.846]   - Field: ‘expr’
[09:29:21.846]   - Field: ‘uuid’
[09:29:21.846]   - Field: ‘seed’
[09:29:21.846]   - Field: ‘version’
[09:29:21.846]   - Field: ‘result’
[09:29:21.846]   - Field: ‘asynchronous’
[09:29:21.846]   - Field: ‘calls’
[09:29:21.846]   - Field: ‘globals’
[09:29:21.847]   - Field: ‘stdout’
[09:29:21.847]   - Field: ‘earlySignal’
[09:29:21.847]   - Field: ‘lazy’
[09:29:21.847]   - Field: ‘state’
[09:29:21.847] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[09:29:21.847] - Launch lazy future ...
[09:29:21.847] Packages needed by the future expression (n = 0): <none>
[09:29:21.847] Packages needed by future strategies (n = 0): <none>
[09:29:21.848] {
[09:29:21.848]     {
[09:29:21.848]         {
[09:29:21.848]             ...future.startTime <- base::Sys.time()
[09:29:21.848]             {
[09:29:21.848]                 {
[09:29:21.848]                   {
[09:29:21.848]                     base::local({
[09:29:21.848]                       has_future <- base::requireNamespace("future", 
[09:29:21.848]                         quietly = TRUE)
[09:29:21.848]                       if (has_future) {
[09:29:21.848]                         ns <- base::getNamespace("future")
[09:29:21.848]                         version <- ns[[".package"]][["version"]]
[09:29:21.848]                         if (is.null(version)) 
[09:29:21.848]                           version <- utils::packageVersion("future")
[09:29:21.848]                       }
[09:29:21.848]                       else {
[09:29:21.848]                         version <- NULL
[09:29:21.848]                       }
[09:29:21.848]                       if (!has_future || version < "1.8.0") {
[09:29:21.848]                         info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.848]                           "", base::R.version$version.string), 
[09:29:21.848]                           platform = base::sprintf("%s (%s-bit)", 
[09:29:21.848]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.848]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.848]                             "release", "version")], collapse = " "), 
[09:29:21.848]                           hostname = base::Sys.info()[["nodename"]])
[09:29:21.848]                         info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.848]                           info)
[09:29:21.848]                         info <- base::paste(info, collapse = "; ")
[09:29:21.848]                         if (!has_future) {
[09:29:21.848]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.848]                             info)
[09:29:21.848]                         }
[09:29:21.848]                         else {
[09:29:21.848]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.848]                             info, version)
[09:29:21.848]                         }
[09:29:21.848]                         base::stop(msg)
[09:29:21.848]                       }
[09:29:21.848]                     })
[09:29:21.848]                   }
[09:29:21.848]                   ...future.strategy.old <- future::plan("list")
[09:29:21.848]                   options(future.plan = NULL)
[09:29:21.848]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.848]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.848]                 }
[09:29:21.848]                 ...future.workdir <- getwd()
[09:29:21.848]             }
[09:29:21.848]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.848]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.848]         }
[09:29:21.848]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.848]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:21.848]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.848]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.848]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.848]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.848]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.848]             base::names(...future.oldOptions))
[09:29:21.848]     }
[09:29:21.848]     if (FALSE) {
[09:29:21.848]     }
[09:29:21.848]     else {
[09:29:21.848]         if (TRUE) {
[09:29:21.848]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.848]                 open = "w")
[09:29:21.848]         }
[09:29:21.848]         else {
[09:29:21.848]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.848]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.848]         }
[09:29:21.848]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.848]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.848]             base::sink(type = "output", split = FALSE)
[09:29:21.848]             base::close(...future.stdout)
[09:29:21.848]         }, add = TRUE)
[09:29:21.848]     }
[09:29:21.848]     ...future.frame <- base::sys.nframe()
[09:29:21.848]     ...future.conditions <- base::list()
[09:29:21.848]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.848]     if (FALSE) {
[09:29:21.848]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.848]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.848]     }
[09:29:21.848]     ...future.result <- base::tryCatch({
[09:29:21.848]         base::withCallingHandlers({
[09:29:21.848]             ...future.value <- base::withVisible(base::local({
[09:29:21.848]                 do.call(function(...) {
[09:29:21.848]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.848]                   if (!identical(...future.globals.maxSize.org, 
[09:29:21.848]                     ...future.globals.maxSize)) {
[09:29:21.848]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.848]                     on.exit(options(oopts), add = TRUE)
[09:29:21.848]                   }
[09:29:21.848]                   {
[09:29:21.848]                     lapply(seq_along(...future.elements_ii), 
[09:29:21.848]                       FUN = function(jj) {
[09:29:21.848]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.848]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.848]                           envir = globalenv(), inherits = FALSE)
[09:29:21.848]                         ...future.FUN(...future.X_jj, ...)
[09:29:21.848]                       })
[09:29:21.848]                   }
[09:29:21.848]                 }, args = future.call.arguments)
[09:29:21.848]             }))
[09:29:21.848]             future::FutureResult(value = ...future.value$value, 
[09:29:21.848]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.848]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.848]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.848]                     ...future.globalenv.names))
[09:29:21.848]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.848]         }, condition = base::local({
[09:29:21.848]             c <- base::c
[09:29:21.848]             inherits <- base::inherits
[09:29:21.848]             invokeRestart <- base::invokeRestart
[09:29:21.848]             length <- base::length
[09:29:21.848]             list <- base::list
[09:29:21.848]             seq.int <- base::seq.int
[09:29:21.848]             signalCondition <- base::signalCondition
[09:29:21.848]             sys.calls <- base::sys.calls
[09:29:21.848]             `[[` <- base::`[[`
[09:29:21.848]             `+` <- base::`+`
[09:29:21.848]             `<<-` <- base::`<<-`
[09:29:21.848]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.848]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.848]                   3L)]
[09:29:21.848]             }
[09:29:21.848]             function(cond) {
[09:29:21.848]                 is_error <- inherits(cond, "error")
[09:29:21.848]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.848]                   NULL)
[09:29:21.848]                 if (is_error) {
[09:29:21.848]                   sessionInformation <- function() {
[09:29:21.848]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.848]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.848]                       search = base::search(), system = base::Sys.info())
[09:29:21.848]                   }
[09:29:21.848]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.848]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.848]                     cond$call), session = sessionInformation(), 
[09:29:21.848]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.848]                   signalCondition(cond)
[09:29:21.848]                 }
[09:29:21.848]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.848]                 "immediateCondition"))) {
[09:29:21.848]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.848]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.848]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.848]                   if (TRUE && !signal) {
[09:29:21.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.848]                     {
[09:29:21.848]                       inherits <- base::inherits
[09:29:21.848]                       invokeRestart <- base::invokeRestart
[09:29:21.848]                       is.null <- base::is.null
[09:29:21.848]                       muffled <- FALSE
[09:29:21.848]                       if (inherits(cond, "message")) {
[09:29:21.848]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.848]                         if (muffled) 
[09:29:21.848]                           invokeRestart("muffleMessage")
[09:29:21.848]                       }
[09:29:21.848]                       else if (inherits(cond, "warning")) {
[09:29:21.848]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.848]                         if (muffled) 
[09:29:21.848]                           invokeRestart("muffleWarning")
[09:29:21.848]                       }
[09:29:21.848]                       else if (inherits(cond, "condition")) {
[09:29:21.848]                         if (!is.null(pattern)) {
[09:29:21.848]                           computeRestarts <- base::computeRestarts
[09:29:21.848]                           grepl <- base::grepl
[09:29:21.848]                           restarts <- computeRestarts(cond)
[09:29:21.848]                           for (restart in restarts) {
[09:29:21.848]                             name <- restart$name
[09:29:21.848]                             if (is.null(name)) 
[09:29:21.848]                               next
[09:29:21.848]                             if (!grepl(pattern, name)) 
[09:29:21.848]                               next
[09:29:21.848]                             invokeRestart(restart)
[09:29:21.848]                             muffled <- TRUE
[09:29:21.848]                             break
[09:29:21.848]                           }
[09:29:21.848]                         }
[09:29:21.848]                       }
[09:29:21.848]                       invisible(muffled)
[09:29:21.848]                     }
[09:29:21.848]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.848]                   }
[09:29:21.848]                 }
[09:29:21.848]                 else {
[09:29:21.848]                   if (TRUE) {
[09:29:21.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.848]                     {
[09:29:21.848]                       inherits <- base::inherits
[09:29:21.848]                       invokeRestart <- base::invokeRestart
[09:29:21.848]                       is.null <- base::is.null
[09:29:21.848]                       muffled <- FALSE
[09:29:21.848]                       if (inherits(cond, "message")) {
[09:29:21.848]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.848]                         if (muffled) 
[09:29:21.848]                           invokeRestart("muffleMessage")
[09:29:21.848]                       }
[09:29:21.848]                       else if (inherits(cond, "warning")) {
[09:29:21.848]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.848]                         if (muffled) 
[09:29:21.848]                           invokeRestart("muffleWarning")
[09:29:21.848]                       }
[09:29:21.848]                       else if (inherits(cond, "condition")) {
[09:29:21.848]                         if (!is.null(pattern)) {
[09:29:21.848]                           computeRestarts <- base::computeRestarts
[09:29:21.848]                           grepl <- base::grepl
[09:29:21.848]                           restarts <- computeRestarts(cond)
[09:29:21.848]                           for (restart in restarts) {
[09:29:21.848]                             name <- restart$name
[09:29:21.848]                             if (is.null(name)) 
[09:29:21.848]                               next
[09:29:21.848]                             if (!grepl(pattern, name)) 
[09:29:21.848]                               next
[09:29:21.848]                             invokeRestart(restart)
[09:29:21.848]                             muffled <- TRUE
[09:29:21.848]                             break
[09:29:21.848]                           }
[09:29:21.848]                         }
[09:29:21.848]                       }
[09:29:21.848]                       invisible(muffled)
[09:29:21.848]                     }
[09:29:21.848]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.848]                   }
[09:29:21.848]                 }
[09:29:21.848]             }
[09:29:21.848]         }))
[09:29:21.848]     }, error = function(ex) {
[09:29:21.848]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.848]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.848]                 ...future.rng), started = ...future.startTime, 
[09:29:21.848]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.848]             version = "1.8"), class = "FutureResult")
[09:29:21.848]     }, finally = {
[09:29:21.848]         if (!identical(...future.workdir, getwd())) 
[09:29:21.848]             setwd(...future.workdir)
[09:29:21.848]         {
[09:29:21.848]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.848]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.848]             }
[09:29:21.848]             base::options(...future.oldOptions)
[09:29:21.848]             if (.Platform$OS.type == "windows") {
[09:29:21.848]                 old_names <- names(...future.oldEnvVars)
[09:29:21.848]                 envs <- base::Sys.getenv()
[09:29:21.848]                 names <- names(envs)
[09:29:21.848]                 common <- intersect(names, old_names)
[09:29:21.848]                 added <- setdiff(names, old_names)
[09:29:21.848]                 removed <- setdiff(old_names, names)
[09:29:21.848]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.848]                   envs[common]]
[09:29:21.848]                 NAMES <- toupper(changed)
[09:29:21.848]                 args <- list()
[09:29:21.848]                 for (kk in seq_along(NAMES)) {
[09:29:21.848]                   name <- changed[[kk]]
[09:29:21.848]                   NAME <- NAMES[[kk]]
[09:29:21.848]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.848]                     next
[09:29:21.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.848]                 }
[09:29:21.848]                 NAMES <- toupper(added)
[09:29:21.848]                 for (kk in seq_along(NAMES)) {
[09:29:21.848]                   name <- added[[kk]]
[09:29:21.848]                   NAME <- NAMES[[kk]]
[09:29:21.848]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.848]                     next
[09:29:21.848]                   args[[name]] <- ""
[09:29:21.848]                 }
[09:29:21.848]                 NAMES <- toupper(removed)
[09:29:21.848]                 for (kk in seq_along(NAMES)) {
[09:29:21.848]                   name <- removed[[kk]]
[09:29:21.848]                   NAME <- NAMES[[kk]]
[09:29:21.848]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.848]                     next
[09:29:21.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.848]                 }
[09:29:21.848]                 if (length(args) > 0) 
[09:29:21.848]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.848]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.848]             }
[09:29:21.848]             else {
[09:29:21.848]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.848]             }
[09:29:21.848]             {
[09:29:21.848]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.848]                   0L) {
[09:29:21.848]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.848]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.848]                   base::options(opts)
[09:29:21.848]                 }
[09:29:21.848]                 {
[09:29:21.848]                   {
[09:29:21.848]                     base::assign(".Random.seed", c(10403L, 8L, 
[09:29:21.848]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[09:29:21.848]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[09:29:21.848]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[09:29:21.848]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[09:29:21.848]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[09:29:21.848]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[09:29:21.848]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[09:29:21.848]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[09:29:21.848]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[09:29:21.848]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[09:29:21.848]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[09:29:21.848]                     -1512233174L, -1985955764L, -425390065L, 
[09:29:21.848]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[09:29:21.848]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[09:29:21.848]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[09:29:21.848]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[09:29:21.848]                     1818328109L, -1284085436L, -1981489558L, 
[09:29:21.848]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[09:29:21.848]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[09:29:21.848]                     -1718567047L, -793788661L, -1133789126L, 
[09:29:21.848]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[09:29:21.848]                     -1823521982L, -1345991523L, -1672661737L, 
[09:29:21.848]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[09:29:21.848]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[09:29:21.848]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[09:29:21.848]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[09:29:21.848]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[09:29:21.848]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[09:29:21.848]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[09:29:21.848]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[09:29:21.848]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[09:29:21.848]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[09:29:21.848]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[09:29:21.848]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[09:29:21.848]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[09:29:21.848]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[09:29:21.848]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[09:29:21.848]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[09:29:21.848]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[09:29:21.848]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[09:29:21.848]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[09:29:21.848]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[09:29:21.848]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[09:29:21.848]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[09:29:21.848]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[09:29:21.848]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[09:29:21.848]                     -1119334354L, -1521015416L, -2041922421L, 
[09:29:21.848]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[09:29:21.848]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[09:29:21.848]                     1232111981L, -1801753084L, -1608606422L, 
[09:29:21.848]                     -1172096363L, 1420874031L, -1210473418L, 
[09:29:21.848]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[09:29:21.848]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[09:29:21.848]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[09:29:21.848]                     679371266L, -591318819L, -104578089L, -172818754L, 
[09:29:21.848]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[09:29:21.848]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[09:29:21.848]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[09:29:21.848]                     -332493318L, -1978392251L, -1691039632L, 
[09:29:21.848]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[09:29:21.848]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[09:29:21.848]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[09:29:21.848]                     87560756L, -87565624L, 426345146L, -699970416L, 
[09:29:21.848]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[09:29:21.848]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[09:29:21.848]                     -1178330196L, -687617348L, -1701912078L, 
[09:29:21.848]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[09:29:21.848]                     -1345416048L, 1816730492L, -1570431212L, 
[09:29:21.848]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[09:29:21.848]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[09:29:21.848]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[09:29:21.848]                     -1493184262L, -1943836976L, -590788308L, 
[09:29:21.848]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[09:29:21.848]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[09:29:21.848]                     1274857340L, -1205842638L, -1938479504L, 
[09:29:21.848]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[09:29:21.848]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[09:29:21.848]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[09:29:21.848]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[09:29:21.848]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[09:29:21.848]                     -1460751252L, 1201879444L, -1459788718L, 
[09:29:21.848]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[09:29:21.848]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[09:29:21.848]                     -420945808L, -1997735900L, -1838404552L, 
[09:29:21.848]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[09:29:21.848]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[09:29:21.848]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[09:29:21.848]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[09:29:21.848]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[09:29:21.848]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[09:29:21.848]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[09:29:21.848]                     942193650L, 751741680L, 689743428L, -18455976L, 
[09:29:21.848]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[09:29:21.848]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[09:29:21.848]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[09:29:21.848]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[09:29:21.848]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[09:29:21.848]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[09:29:21.848]                     -1357570110L, 1896595240L, -2066952276L, 
[09:29:21.848]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[09:29:21.848]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[09:29:21.848]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[09:29:21.848]                     769655120L, 236357794L, 181393736L, -13334772L, 
[09:29:21.848]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[09:29:21.848]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[09:29:21.848]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[09:29:21.848]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[09:29:21.848]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[09:29:21.848]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[09:29:21.848]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[09:29:21.848]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[09:29:21.848]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[09:29:21.848]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[09:29:21.848]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[09:29:21.848]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[09:29:21.848]                     -1365842884L, -438961294L, -1851472272L, 
[09:29:21.848]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[09:29:21.848]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[09:29:21.848]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[09:29:21.848]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[09:29:21.848]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[09:29:21.848]                     -594809770L, -2146766621L, -2013964635L, 
[09:29:21.848]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[09:29:21.848]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[09:29:21.848]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[09:29:21.848]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[09:29:21.848]                     -1426021878L, -1285634264L, 1507547537L, 
[09:29:21.848]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[09:29:21.848]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[09:29:21.848]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[09:29:21.848]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[09:29:21.848]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[09:29:21.848]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[09:29:21.848]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[09:29:21.848]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[09:29:21.848]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[09:29:21.848]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[09:29:21.848]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[09:29:21.848]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[09:29:21.848]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[09:29:21.848]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[09:29:21.848]                     -1604604761L, 1421229008L, -1268333714L, 
[09:29:21.848]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[09:29:21.848]                     -2070476623L, -2099222749L, 1141171236L, 
[09:29:21.848]                     -146426158L, -1797385433L, -1129376399L, 
[09:29:21.848]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[09:29:21.848]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[09:29:21.848]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[09:29:21.848]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[09:29:21.848]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[09:29:21.848]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[09:29:21.848]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[09:29:21.848]                     -1092079724L, -1765622238L, -1882554057L, 
[09:29:21.848]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[09:29:21.848]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[09:29:21.848]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[09:29:21.848]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[09:29:21.848]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[09:29:21.848]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[09:29:21.848]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[09:29:21.848]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[09:29:21.848]                     865377681L, -1127426242L), envir = base::globalenv(), 
[09:29:21.848]                       inherits = FALSE)
[09:29:21.848]                     NULL
[09:29:21.848]                   }
[09:29:21.848]                   options(future.plan = NULL)
[09:29:21.848]                   if (is.na(NA_character_)) 
[09:29:21.848]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.848]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.848]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.848]                     .init = FALSE)
[09:29:21.848]                 }
[09:29:21.848]             }
[09:29:21.848]         }
[09:29:21.848]     })
[09:29:21.848]     if (TRUE) {
[09:29:21.848]         base::sink(type = "output", split = FALSE)
[09:29:21.848]         if (TRUE) {
[09:29:21.848]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.848]         }
[09:29:21.848]         else {
[09:29:21.848]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.848]         }
[09:29:21.848]         base::close(...future.stdout)
[09:29:21.848]         ...future.stdout <- NULL
[09:29:21.848]     }
[09:29:21.848]     ...future.result$conditions <- ...future.conditions
[09:29:21.848]     ...future.result$finished <- base::Sys.time()
[09:29:21.848]     ...future.result
[09:29:21.848] }
[09:29:21.850] assign_globals() ...
[09:29:21.850] List of 7
[09:29:21.850]  $ ...future.FUN            :function (...)  
[09:29:21.850]  $ foo                      :function (x = 1, y = 2)  
[09:29:21.850]  $ x                        : num 3
[09:29:21.850]  $ future.call.arguments    : list()
[09:29:21.850]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.850]  $ ...future.elements_ii    :List of 5
[09:29:21.850]   ..$ : int 0
[09:29:21.850]   ..$ : int 0
[09:29:21.850]   ..$ : int 0
[09:29:21.850]   ..$ : int 0
[09:29:21.850]   ..$ : int 0
[09:29:21.850]  $ ...future.seeds_ii       :List of 5
[09:29:21.850]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[09:29:21.850]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[09:29:21.850]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[09:29:21.850]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[09:29:21.850]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[09:29:21.850]  $ ...future.globals.maxSize: NULL
[09:29:21.850]  - attr(*, "where")=List of 7
[09:29:21.850]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.850]   ..$ foo                      :<environment: R_EmptyEnv> 
[09:29:21.850]   ..$ x                        :<environment: R_EmptyEnv> 
[09:29:21.850]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.850]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.850]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.850]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.850]  - attr(*, "resolved")= logi FALSE
[09:29:21.850]  - attr(*, "total_size")= num 2200
[09:29:21.850]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.850]  - attr(*, "already-done")= logi TRUE
[09:29:21.858] - reassign environment for ‘...future.FUN’
[09:29:21.858] - copied ‘...future.FUN’ to environment
[09:29:21.858] - reassign environment for ‘foo’
[09:29:21.858] - copied ‘foo’ to environment
[09:29:21.858] - copied ‘x’ to environment
[09:29:21.858] - copied ‘future.call.arguments’ to environment
[09:29:21.858] - copied ‘...future.elements_ii’ to environment
[09:29:21.858] - copied ‘...future.seeds_ii’ to environment
[09:29:21.858] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.858] assign_globals() ... done
[09:29:21.859] plan(): Setting new future strategy stack:
[09:29:21.859] List of future strategies:
[09:29:21.859] 1. sequential:
[09:29:21.859]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.859]    - tweaked: FALSE
[09:29:21.859]    - call: NULL
[09:29:21.859] plan(): nbrOfWorkers() = 1
[09:29:21.860] plan(): Setting new future strategy stack:
[09:29:21.860] List of future strategies:
[09:29:21.860] 1. sequential:
[09:29:21.860]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.860]    - tweaked: FALSE
[09:29:21.860]    - call: plan(strategy)
[09:29:21.860] plan(): nbrOfWorkers() = 1
[09:29:21.860] SequentialFuture started (and completed)
[09:29:21.861] - Launch lazy future ... done
[09:29:21.861] run() for ‘SequentialFuture’ ... done
[09:29:21.861] Created future:
[09:29:21.861] SequentialFuture:
[09:29:21.861] Label: ‘future_replicate-1’
[09:29:21.861] Expression:
[09:29:21.861] {
[09:29:21.861]     do.call(function(...) {
[09:29:21.861]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.861]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.861]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.861]             on.exit(options(oopts), add = TRUE)
[09:29:21.861]         }
[09:29:21.861]         {
[09:29:21.861]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.861]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.861]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.861]                   envir = globalenv(), inherits = FALSE)
[09:29:21.861]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.861]             })
[09:29:21.861]         }
[09:29:21.861]     }, args = future.call.arguments)
[09:29:21.861] }
[09:29:21.861] Lazy evaluation: FALSE
[09:29:21.861] Asynchronous evaluation: FALSE
[09:29:21.861] Local evaluation: TRUE
[09:29:21.861] Environment: 0x55d1cadc1680
[09:29:21.861] Capture standard output: TRUE
[09:29:21.861] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.861] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[09:29:21.861] Packages: <none>
[09:29:21.861] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.861] Resolved: TRUE
[09:29:21.861] Value: 320 bytes of class ‘list’
[09:29:21.861] Early signaling: FALSE
[09:29:21.861] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.861] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[09:29:21.862] Chunk #1 of 1 ... DONE
[09:29:21.862] Launching 1 futures (chunks) ... DONE
[09:29:21.862] Resolving 1 futures (chunks) ...
[09:29:21.862] resolve() on list ...
[09:29:21.862]  recursive: 0
[09:29:21.862]  length: 1
[09:29:21.862] 
[09:29:21.863] resolved() for ‘SequentialFuture’ ...
[09:29:21.863] - state: ‘finished’
[09:29:21.863] - run: TRUE
[09:29:21.863] - result: ‘FutureResult’
[09:29:21.863] resolved() for ‘SequentialFuture’ ... done
[09:29:21.863] Future #1
[09:29:21.863] signalConditionsASAP(SequentialFuture, pos=1) ...
[09:29:21.863] - nx: 1
[09:29:21.863] - relay: TRUE
[09:29:21.863] - stdout: TRUE
[09:29:21.863] - signal: TRUE
[09:29:21.863] - resignal: FALSE
[09:29:21.864] - force: TRUE
[09:29:21.864] - relayed: [n=1] FALSE
[09:29:21.864] - queued futures: [n=1] FALSE
[09:29:21.864]  - until=1
[09:29:21.864]  - relaying element #1
[09:29:21.864] - relayed: [n=1] TRUE
[09:29:21.864] - queued futures: [n=1] TRUE
[09:29:21.864] signalConditionsASAP(SequentialFuture, pos=1) ... done
[09:29:21.864]  length: 0 (resolved future 1)
[09:29:21.864] Relaying remaining futures
[09:29:21.865] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.865] - nx: 1
[09:29:21.865] - relay: TRUE
[09:29:21.865] - stdout: TRUE
[09:29:21.865] - signal: TRUE
[09:29:21.865] - resignal: FALSE
[09:29:21.865] - force: TRUE
[09:29:21.865] - relayed: [n=1] TRUE
[09:29:21.865] - queued futures: [n=1] TRUE
 - flush all
[09:29:21.865] - relayed: [n=1] TRUE
[09:29:21.866] - queued futures: [n=1] TRUE
[09:29:21.866] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.866] resolve() on list ... DONE
[09:29:21.867]  - Number of value chunks collected: 1
[09:29:21.867] Resolving 1 futures (chunks) ... DONE
[09:29:21.867] Reducing values from 1 chunks ...
[09:29:21.867]  - Number of values collected after concatenation: 5
[09:29:21.867]  - Number of values expected: 5
[09:29:21.867] Reducing values from 1 chunks ... DONE
[09:29:21.867] future_lapply() ... DONE
[09:29:21.868] plan(): Setting new future strategy stack:
[09:29:21.868] List of future strategies:
[09:29:21.868] 1. sequential:
[09:29:21.868]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.868]    - tweaked: FALSE
[09:29:21.868]    - call: plan(sequential)
[09:29:21.868] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[09:29:21.868] plan(): Setting new future strategy stack:
[09:29:21.869] List of future strategies:
[09:29:21.869] 1. multicore:
[09:29:21.869]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:21.869]    - tweaked: FALSE
[09:29:21.869]    - call: plan(strategy)
[09:29:21.873] plan(): nbrOfWorkers() = 2
[09:29:21.873] future_lapply() ...
[09:29:21.873] Generating random seeds ...
[09:29:21.873] Generating random seed streams for 5 elements ...
[09:29:21.874] Generating random seed streams for 5 elements ... DONE
[09:29:21.874] Generating random seeds ... DONE
[09:29:21.874] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.879] Number of chunks: 2
[09:29:21.879] getGlobalsAndPackagesXApply() ...
[09:29:21.879]  - future.globals: TRUE
[09:29:21.879] getGlobalsAndPackages() ...
[09:29:21.879] Searching for globals...
[09:29:21.880] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.880] Searching for globals ... DONE
[09:29:21.881] Resolving globals: FALSE
[09:29:21.881] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.881] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.881] - globals: [1] ‘FUN’
[09:29:21.881] 
[09:29:21.881] getGlobalsAndPackages() ... DONE
[09:29:21.882]  - globals found/used: [n=1] ‘FUN’
[09:29:21.882]  - needed namespaces: [n=0] 
[09:29:21.882] Finding globals ... DONE
[09:29:21.882]  - use_args: TRUE
[09:29:21.882]  - Getting '...' globals ...
[09:29:21.882] resolve() on list ...
[09:29:21.882]  recursive: 0
[09:29:21.882]  length: 1
[09:29:21.882]  elements: ‘...’
[09:29:21.883]  length: 0 (resolved future 1)
[09:29:21.883] resolve() on list ... DONE
[09:29:21.883]    - '...' content: [n=0] 
[09:29:21.883] List of 1
[09:29:21.883]  $ ...: list()
[09:29:21.883]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.883]  - attr(*, "where")=List of 1
[09:29:21.883]   ..$ ...:<environment: 0x55d1c9b0b3a0> 
[09:29:21.883]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.883]  - attr(*, "resolved")= logi TRUE
[09:29:21.883]  - attr(*, "total_size")= num NA
[09:29:21.885]  - Getting '...' globals ... DONE
[09:29:21.885] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:21.885] List of 2
[09:29:21.885]  $ ...future.FUN:function (...)  
[09:29:21.885]  $ ...          : list()
[09:29:21.885]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.885]  - attr(*, "where")=List of 2
[09:29:21.885]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:21.885]   ..$ ...          :<environment: 0x55d1c9b0b3a0> 
[09:29:21.885]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.885]  - attr(*, "resolved")= logi FALSE
[09:29:21.885]  - attr(*, "total_size")= num 616
[09:29:21.888] Packages to be attached in all futures: [n=0] 
[09:29:21.888] getGlobalsAndPackagesXApply() ... DONE
[09:29:21.888] Number of futures (= number of chunks): 2
[09:29:21.888] Launching 2 futures (chunks) ...
[09:29:21.888] Chunk #1 of 2 ...
[09:29:21.888]  - Finding globals in 'X' for chunk #1 ...
[09:29:21.889] getGlobalsAndPackages() ...
[09:29:21.889] Searching for globals...
[09:29:21.889] 
[09:29:21.889] Searching for globals ... DONE
[09:29:21.889] - globals: [0] <none>
[09:29:21.889] getGlobalsAndPackages() ... DONE
[09:29:21.889]    + additional globals found: [n=0] 
[09:29:21.889]    + additional namespaces needed: [n=0] 
[09:29:21.889]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:21.889]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:21.890]  - seeds: [2] <seeds>
[09:29:21.890]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.890] getGlobalsAndPackages() ...
[09:29:21.890] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.890] Resolving globals: FALSE
[09:29:21.890] Tweak future expression to call with '...' arguments ...
[09:29:21.890] {
[09:29:21.890]     do.call(function(...) {
[09:29:21.890]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.890]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.890]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.890]             on.exit(options(oopts), add = TRUE)
[09:29:21.890]         }
[09:29:21.890]         {
[09:29:21.890]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.890]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.890]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.890]                   envir = globalenv(), inherits = FALSE)
[09:29:21.890]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.890]             })
[09:29:21.890]         }
[09:29:21.890]     }, args = future.call.arguments)
[09:29:21.890] }
[09:29:21.890] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.891] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.891] 
[09:29:21.891] getGlobalsAndPackages() ... DONE
[09:29:21.891] run() for ‘Future’ ...
[09:29:21.891] - state: ‘created’
[09:29:21.891] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:21.895] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:21.895] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:21.895]   - Field: ‘label’
[09:29:21.895]   - Field: ‘local’
[09:29:21.895]   - Field: ‘owner’
[09:29:21.895]   - Field: ‘envir’
[09:29:21.895]   - Field: ‘workers’
[09:29:21.895]   - Field: ‘packages’
[09:29:21.896]   - Field: ‘gc’
[09:29:21.896]   - Field: ‘job’
[09:29:21.896]   - Field: ‘conditions’
[09:29:21.896]   - Field: ‘expr’
[09:29:21.896]   - Field: ‘uuid’
[09:29:21.896]   - Field: ‘seed’
[09:29:21.896]   - Field: ‘version’
[09:29:21.896]   - Field: ‘result’
[09:29:21.896]   - Field: ‘asynchronous’
[09:29:21.896]   - Field: ‘calls’
[09:29:21.896]   - Field: ‘globals’
[09:29:21.897]   - Field: ‘stdout’
[09:29:21.898]   - Field: ‘earlySignal’
[09:29:21.898]   - Field: ‘lazy’
[09:29:21.898]   - Field: ‘state’
[09:29:21.898] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:21.898] - Launch lazy future ...
[09:29:21.899] Packages needed by the future expression (n = 0): <none>
[09:29:21.899] Packages needed by future strategies (n = 0): <none>
[09:29:21.900] {
[09:29:21.900]     {
[09:29:21.900]         {
[09:29:21.900]             ...future.startTime <- base::Sys.time()
[09:29:21.900]             {
[09:29:21.900]                 {
[09:29:21.900]                   {
[09:29:21.900]                     {
[09:29:21.900]                       base::local({
[09:29:21.900]                         has_future <- base::requireNamespace("future", 
[09:29:21.900]                           quietly = TRUE)
[09:29:21.900]                         if (has_future) {
[09:29:21.900]                           ns <- base::getNamespace("future")
[09:29:21.900]                           version <- ns[[".package"]][["version"]]
[09:29:21.900]                           if (is.null(version)) 
[09:29:21.900]                             version <- utils::packageVersion("future")
[09:29:21.900]                         }
[09:29:21.900]                         else {
[09:29:21.900]                           version <- NULL
[09:29:21.900]                         }
[09:29:21.900]                         if (!has_future || version < "1.8.0") {
[09:29:21.900]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.900]                             "", base::R.version$version.string), 
[09:29:21.900]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:21.900]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.900]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.900]                               "release", "version")], collapse = " "), 
[09:29:21.900]                             hostname = base::Sys.info()[["nodename"]])
[09:29:21.900]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.900]                             info)
[09:29:21.900]                           info <- base::paste(info, collapse = "; ")
[09:29:21.900]                           if (!has_future) {
[09:29:21.900]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.900]                               info)
[09:29:21.900]                           }
[09:29:21.900]                           else {
[09:29:21.900]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.900]                               info, version)
[09:29:21.900]                           }
[09:29:21.900]                           base::stop(msg)
[09:29:21.900]                         }
[09:29:21.900]                       })
[09:29:21.900]                     }
[09:29:21.900]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:21.900]                     base::options(mc.cores = 1L)
[09:29:21.900]                   }
[09:29:21.900]                   ...future.strategy.old <- future::plan("list")
[09:29:21.900]                   options(future.plan = NULL)
[09:29:21.900]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.900]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.900]                 }
[09:29:21.900]                 ...future.workdir <- getwd()
[09:29:21.900]             }
[09:29:21.900]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.900]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.900]         }
[09:29:21.900]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.900]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:21.900]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.900]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.900]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.900]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.900]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.900]             base::names(...future.oldOptions))
[09:29:21.900]     }
[09:29:21.900]     if (FALSE) {
[09:29:21.900]     }
[09:29:21.900]     else {
[09:29:21.900]         if (TRUE) {
[09:29:21.900]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.900]                 open = "w")
[09:29:21.900]         }
[09:29:21.900]         else {
[09:29:21.900]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.900]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.900]         }
[09:29:21.900]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.900]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.900]             base::sink(type = "output", split = FALSE)
[09:29:21.900]             base::close(...future.stdout)
[09:29:21.900]         }, add = TRUE)
[09:29:21.900]     }
[09:29:21.900]     ...future.frame <- base::sys.nframe()
[09:29:21.900]     ...future.conditions <- base::list()
[09:29:21.900]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.900]     if (FALSE) {
[09:29:21.900]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.900]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.900]     }
[09:29:21.900]     ...future.result <- base::tryCatch({
[09:29:21.900]         base::withCallingHandlers({
[09:29:21.900]             ...future.value <- base::withVisible(base::local({
[09:29:21.900]                 withCallingHandlers({
[09:29:21.900]                   {
[09:29:21.900]                     do.call(function(...) {
[09:29:21.900]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.900]                       if (!identical(...future.globals.maxSize.org, 
[09:29:21.900]                         ...future.globals.maxSize)) {
[09:29:21.900]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.900]                         on.exit(options(oopts), add = TRUE)
[09:29:21.900]                       }
[09:29:21.900]                       {
[09:29:21.900]                         lapply(seq_along(...future.elements_ii), 
[09:29:21.900]                           FUN = function(jj) {
[09:29:21.900]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.900]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.900]                               envir = globalenv(), inherits = FALSE)
[09:29:21.900]                             ...future.FUN(...future.X_jj, ...)
[09:29:21.900]                           })
[09:29:21.900]                       }
[09:29:21.900]                     }, args = future.call.arguments)
[09:29:21.900]                   }
[09:29:21.900]                 }, immediateCondition = function(cond) {
[09:29:21.900]                   save_rds <- function (object, pathname, ...) 
[09:29:21.900]                   {
[09:29:21.900]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:21.900]                     if (file_test("-f", pathname_tmp)) {
[09:29:21.900]                       fi_tmp <- file.info(pathname_tmp)
[09:29:21.900]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:21.900]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:21.900]                         fi_tmp[["mtime"]])
[09:29:21.900]                     }
[09:29:21.900]                     tryCatch({
[09:29:21.900]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:21.900]                     }, error = function(ex) {
[09:29:21.900]                       msg <- conditionMessage(ex)
[09:29:21.900]                       fi_tmp <- file.info(pathname_tmp)
[09:29:21.900]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:21.900]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:21.900]                         fi_tmp[["mtime"]], msg)
[09:29:21.900]                       ex$message <- msg
[09:29:21.900]                       stop(ex)
[09:29:21.900]                     })
[09:29:21.900]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:21.900]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:21.900]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:21.900]                       fi_tmp <- file.info(pathname_tmp)
[09:29:21.900]                       fi <- file.info(pathname)
[09:29:21.900]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:21.900]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:21.900]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:21.900]                         fi[["size"]], fi[["mtime"]])
[09:29:21.900]                       stop(msg)
[09:29:21.900]                     }
[09:29:21.900]                     invisible(pathname)
[09:29:21.900]                   }
[09:29:21.900]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:21.900]                     rootPath = tempdir()) 
[09:29:21.900]                   {
[09:29:21.900]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:21.900]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:21.900]                       tmpdir = path, fileext = ".rds")
[09:29:21.900]                     save_rds(obj, file)
[09:29:21.900]                   }
[09:29:21.900]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:21.900]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.900]                   {
[09:29:21.900]                     inherits <- base::inherits
[09:29:21.900]                     invokeRestart <- base::invokeRestart
[09:29:21.900]                     is.null <- base::is.null
[09:29:21.900]                     muffled <- FALSE
[09:29:21.900]                     if (inherits(cond, "message")) {
[09:29:21.900]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:21.900]                       if (muffled) 
[09:29:21.900]                         invokeRestart("muffleMessage")
[09:29:21.900]                     }
[09:29:21.900]                     else if (inherits(cond, "warning")) {
[09:29:21.900]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:21.900]                       if (muffled) 
[09:29:21.900]                         invokeRestart("muffleWarning")
[09:29:21.900]                     }
[09:29:21.900]                     else if (inherits(cond, "condition")) {
[09:29:21.900]                       if (!is.null(pattern)) {
[09:29:21.900]                         computeRestarts <- base::computeRestarts
[09:29:21.900]                         grepl <- base::grepl
[09:29:21.900]                         restarts <- computeRestarts(cond)
[09:29:21.900]                         for (restart in restarts) {
[09:29:21.900]                           name <- restart$name
[09:29:21.900]                           if (is.null(name)) 
[09:29:21.900]                             next
[09:29:21.900]                           if (!grepl(pattern, name)) 
[09:29:21.900]                             next
[09:29:21.900]                           invokeRestart(restart)
[09:29:21.900]                           muffled <- TRUE
[09:29:21.900]                           break
[09:29:21.900]                         }
[09:29:21.900]                       }
[09:29:21.900]                     }
[09:29:21.900]                     invisible(muffled)
[09:29:21.900]                   }
[09:29:21.900]                   muffleCondition(cond)
[09:29:21.900]                 })
[09:29:21.900]             }))
[09:29:21.900]             future::FutureResult(value = ...future.value$value, 
[09:29:21.900]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.900]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.900]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.900]                     ...future.globalenv.names))
[09:29:21.900]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.900]         }, condition = base::local({
[09:29:21.900]             c <- base::c
[09:29:21.900]             inherits <- base::inherits
[09:29:21.900]             invokeRestart <- base::invokeRestart
[09:29:21.900]             length <- base::length
[09:29:21.900]             list <- base::list
[09:29:21.900]             seq.int <- base::seq.int
[09:29:21.900]             signalCondition <- base::signalCondition
[09:29:21.900]             sys.calls <- base::sys.calls
[09:29:21.900]             `[[` <- base::`[[`
[09:29:21.900]             `+` <- base::`+`
[09:29:21.900]             `<<-` <- base::`<<-`
[09:29:21.900]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.900]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.900]                   3L)]
[09:29:21.900]             }
[09:29:21.900]             function(cond) {
[09:29:21.900]                 is_error <- inherits(cond, "error")
[09:29:21.900]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.900]                   NULL)
[09:29:21.900]                 if (is_error) {
[09:29:21.900]                   sessionInformation <- function() {
[09:29:21.900]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.900]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.900]                       search = base::search(), system = base::Sys.info())
[09:29:21.900]                   }
[09:29:21.900]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.900]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.900]                     cond$call), session = sessionInformation(), 
[09:29:21.900]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.900]                   signalCondition(cond)
[09:29:21.900]                 }
[09:29:21.900]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.900]                 "immediateCondition"))) {
[09:29:21.900]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.900]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.900]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.900]                   if (TRUE && !signal) {
[09:29:21.900]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.900]                     {
[09:29:21.900]                       inherits <- base::inherits
[09:29:21.900]                       invokeRestart <- base::invokeRestart
[09:29:21.900]                       is.null <- base::is.null
[09:29:21.900]                       muffled <- FALSE
[09:29:21.900]                       if (inherits(cond, "message")) {
[09:29:21.900]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.900]                         if (muffled) 
[09:29:21.900]                           invokeRestart("muffleMessage")
[09:29:21.900]                       }
[09:29:21.900]                       else if (inherits(cond, "warning")) {
[09:29:21.900]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.900]                         if (muffled) 
[09:29:21.900]                           invokeRestart("muffleWarning")
[09:29:21.900]                       }
[09:29:21.900]                       else if (inherits(cond, "condition")) {
[09:29:21.900]                         if (!is.null(pattern)) {
[09:29:21.900]                           computeRestarts <- base::computeRestarts
[09:29:21.900]                           grepl <- base::grepl
[09:29:21.900]                           restarts <- computeRestarts(cond)
[09:29:21.900]                           for (restart in restarts) {
[09:29:21.900]                             name <- restart$name
[09:29:21.900]                             if (is.null(name)) 
[09:29:21.900]                               next
[09:29:21.900]                             if (!grepl(pattern, name)) 
[09:29:21.900]                               next
[09:29:21.900]                             invokeRestart(restart)
[09:29:21.900]                             muffled <- TRUE
[09:29:21.900]                             break
[09:29:21.900]                           }
[09:29:21.900]                         }
[09:29:21.900]                       }
[09:29:21.900]                       invisible(muffled)
[09:29:21.900]                     }
[09:29:21.900]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.900]                   }
[09:29:21.900]                 }
[09:29:21.900]                 else {
[09:29:21.900]                   if (TRUE) {
[09:29:21.900]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.900]                     {
[09:29:21.900]                       inherits <- base::inherits
[09:29:21.900]                       invokeRestart <- base::invokeRestart
[09:29:21.900]                       is.null <- base::is.null
[09:29:21.900]                       muffled <- FALSE
[09:29:21.900]                       if (inherits(cond, "message")) {
[09:29:21.900]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.900]                         if (muffled) 
[09:29:21.900]                           invokeRestart("muffleMessage")
[09:29:21.900]                       }
[09:29:21.900]                       else if (inherits(cond, "warning")) {
[09:29:21.900]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.900]                         if (muffled) 
[09:29:21.900]                           invokeRestart("muffleWarning")
[09:29:21.900]                       }
[09:29:21.900]                       else if (inherits(cond, "condition")) {
[09:29:21.900]                         if (!is.null(pattern)) {
[09:29:21.900]                           computeRestarts <- base::computeRestarts
[09:29:21.900]                           grepl <- base::grepl
[09:29:21.900]                           restarts <- computeRestarts(cond)
[09:29:21.900]                           for (restart in restarts) {
[09:29:21.900]                             name <- restart$name
[09:29:21.900]                             if (is.null(name)) 
[09:29:21.900]                               next
[09:29:21.900]                             if (!grepl(pattern, name)) 
[09:29:21.900]                               next
[09:29:21.900]                             invokeRestart(restart)
[09:29:21.900]                             muffled <- TRUE
[09:29:21.900]                             break
[09:29:21.900]                           }
[09:29:21.900]                         }
[09:29:21.900]                       }
[09:29:21.900]                       invisible(muffled)
[09:29:21.900]                     }
[09:29:21.900]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.900]                   }
[09:29:21.900]                 }
[09:29:21.900]             }
[09:29:21.900]         }))
[09:29:21.900]     }, error = function(ex) {
[09:29:21.900]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.900]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.900]                 ...future.rng), started = ...future.startTime, 
[09:29:21.900]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.900]             version = "1.8"), class = "FutureResult")
[09:29:21.900]     }, finally = {
[09:29:21.900]         if (!identical(...future.workdir, getwd())) 
[09:29:21.900]             setwd(...future.workdir)
[09:29:21.900]         {
[09:29:21.900]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.900]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.900]             }
[09:29:21.900]             base::options(...future.oldOptions)
[09:29:21.900]             if (.Platform$OS.type == "windows") {
[09:29:21.900]                 old_names <- names(...future.oldEnvVars)
[09:29:21.900]                 envs <- base::Sys.getenv()
[09:29:21.900]                 names <- names(envs)
[09:29:21.900]                 common <- intersect(names, old_names)
[09:29:21.900]                 added <- setdiff(names, old_names)
[09:29:21.900]                 removed <- setdiff(old_names, names)
[09:29:21.900]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.900]                   envs[common]]
[09:29:21.900]                 NAMES <- toupper(changed)
[09:29:21.900]                 args <- list()
[09:29:21.900]                 for (kk in seq_along(NAMES)) {
[09:29:21.900]                   name <- changed[[kk]]
[09:29:21.900]                   NAME <- NAMES[[kk]]
[09:29:21.900]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.900]                     next
[09:29:21.900]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.900]                 }
[09:29:21.900]                 NAMES <- toupper(added)
[09:29:21.900]                 for (kk in seq_along(NAMES)) {
[09:29:21.900]                   name <- added[[kk]]
[09:29:21.900]                   NAME <- NAMES[[kk]]
[09:29:21.900]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.900]                     next
[09:29:21.900]                   args[[name]] <- ""
[09:29:21.900]                 }
[09:29:21.900]                 NAMES <- toupper(removed)
[09:29:21.900]                 for (kk in seq_along(NAMES)) {
[09:29:21.900]                   name <- removed[[kk]]
[09:29:21.900]                   NAME <- NAMES[[kk]]
[09:29:21.900]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.900]                     next
[09:29:21.900]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.900]                 }
[09:29:21.900]                 if (length(args) > 0) 
[09:29:21.900]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.900]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.900]             }
[09:29:21.900]             else {
[09:29:21.900]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.900]             }
[09:29:21.900]             {
[09:29:21.900]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.900]                   0L) {
[09:29:21.900]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.900]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.900]                   base::options(opts)
[09:29:21.900]                 }
[09:29:21.900]                 {
[09:29:21.900]                   {
[09:29:21.900]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:21.900]                     NULL
[09:29:21.900]                   }
[09:29:21.900]                   options(future.plan = NULL)
[09:29:21.900]                   if (is.na(NA_character_)) 
[09:29:21.900]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.900]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.900]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.900]                     .init = FALSE)
[09:29:21.900]                 }
[09:29:21.900]             }
[09:29:21.900]         }
[09:29:21.900]     })
[09:29:21.900]     if (TRUE) {
[09:29:21.900]         base::sink(type = "output", split = FALSE)
[09:29:21.900]         if (TRUE) {
[09:29:21.900]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.900]         }
[09:29:21.900]         else {
[09:29:21.900]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.900]         }
[09:29:21.900]         base::close(...future.stdout)
[09:29:21.900]         ...future.stdout <- NULL
[09:29:21.900]     }
[09:29:21.900]     ...future.result$conditions <- ...future.conditions
[09:29:21.900]     ...future.result$finished <- base::Sys.time()
[09:29:21.900]     ...future.result
[09:29:21.900] }
[09:29:21.902] assign_globals() ...
[09:29:21.902] List of 5
[09:29:21.902]  $ ...future.FUN            :function (...)  
[09:29:21.902]  $ future.call.arguments    : list()
[09:29:21.902]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.902]  $ ...future.elements_ii    :List of 2
[09:29:21.902]   ..$ : int 0
[09:29:21.902]   ..$ : int 0
[09:29:21.902]  $ ...future.seeds_ii       :List of 2
[09:29:21.902]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[09:29:21.902]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[09:29:21.902]  $ ...future.globals.maxSize: NULL
[09:29:21.902]  - attr(*, "where")=List of 5
[09:29:21.902]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.902]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.902]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.902]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.902]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.902]  - attr(*, "resolved")= logi FALSE
[09:29:21.902]  - attr(*, "total_size")= num 616
[09:29:21.902]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.902]  - attr(*, "already-done")= logi TRUE
[09:29:21.907] - reassign environment for ‘...future.FUN’
[09:29:21.907] - copied ‘...future.FUN’ to environment
[09:29:21.907] - copied ‘future.call.arguments’ to environment
[09:29:21.908] - copied ‘...future.elements_ii’ to environment
[09:29:21.908] - copied ‘...future.seeds_ii’ to environment
[09:29:21.908] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.908] assign_globals() ... done
[09:29:21.908] requestCore(): workers = 2
[09:29:21.911] MulticoreFuture started
[09:29:21.911] - Launch lazy future ... done
[09:29:21.911] run() for ‘MulticoreFuture’ ... done
[09:29:21.912] Created future:
[09:29:21.912] plan(): Setting new future strategy stack:
[09:29:21.912] List of future strategies:
[09:29:21.912] 1. sequential:
[09:29:21.912]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.912]    - tweaked: FALSE
[09:29:21.912]    - call: NULL
[09:29:21.913] plan(): nbrOfWorkers() = 1
[09:29:21.915] plan(): Setting new future strategy stack:
[09:29:21.915] List of future strategies:
[09:29:21.915] 1. multicore:
[09:29:21.915]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:21.915]    - tweaked: FALSE
[09:29:21.915]    - call: plan(strategy)
[09:29:21.920] plan(): nbrOfWorkers() = 2
[09:29:21.912] MulticoreFuture:
[09:29:21.912] Label: ‘future_replicate-1’
[09:29:21.912] Expression:
[09:29:21.912] {
[09:29:21.912]     do.call(function(...) {
[09:29:21.912]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.912]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.912]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.912]             on.exit(options(oopts), add = TRUE)
[09:29:21.912]         }
[09:29:21.912]         {
[09:29:21.912]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.912]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.912]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.912]                   envir = globalenv(), inherits = FALSE)
[09:29:21.912]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.912]             })
[09:29:21.912]         }
[09:29:21.912]     }, args = future.call.arguments)
[09:29:21.912] }
[09:29:21.912] Lazy evaluation: FALSE
[09:29:21.912] Asynchronous evaluation: TRUE
[09:29:21.912] Local evaluation: TRUE
[09:29:21.912] Environment: R_GlobalEnv
[09:29:21.912] Capture standard output: TRUE
[09:29:21.912] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.912] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.912] Packages: <none>
[09:29:21.912] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.912] Resolved: TRUE
[09:29:21.912] Value: <not collected>
[09:29:21.912] Conditions captured: <none>
[09:29:21.912] Early signaling: FALSE
[09:29:21.912] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.912] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:21.921] Chunk #1 of 2 ... DONE
[09:29:21.921] Chunk #2 of 2 ...
[09:29:21.922]  - Finding globals in 'X' for chunk #2 ...
[09:29:21.922] getGlobalsAndPackages() ...
[09:29:21.922] Searching for globals...
[09:29:21.922] 
[09:29:21.922] Searching for globals ... DONE
[09:29:21.923] - globals: [0] <none>
[09:29:21.923] getGlobalsAndPackages() ... DONE
[09:29:21.923]    + additional globals found: [n=0] 
[09:29:21.923]    + additional namespaces needed: [n=0] 
[09:29:21.923]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:21.923]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:21.923]  - seeds: [3] <seeds>
[09:29:21.923]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.924] getGlobalsAndPackages() ...
[09:29:21.924] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.924] Resolving globals: FALSE
[09:29:21.924] Tweak future expression to call with '...' arguments ...
[09:29:21.924] {
[09:29:21.924]     do.call(function(...) {
[09:29:21.924]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.924]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.924]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.924]             on.exit(options(oopts), add = TRUE)
[09:29:21.924]         }
[09:29:21.924]         {
[09:29:21.924]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.924]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.924]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.924]                   envir = globalenv(), inherits = FALSE)
[09:29:21.924]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.924]             })
[09:29:21.924]         }
[09:29:21.924]     }, args = future.call.arguments)
[09:29:21.924] }
[09:29:21.925] Tweak future expression to call with '...' arguments ... DONE
[09:29:21.925] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:21.926] 
[09:29:21.926] getGlobalsAndPackages() ... DONE
[09:29:21.926] run() for ‘Future’ ...
[09:29:21.926] - state: ‘created’
[09:29:21.926] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:21.931] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:21.931] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:21.931]   - Field: ‘label’
[09:29:21.931]   - Field: ‘local’
[09:29:21.932]   - Field: ‘owner’
[09:29:21.932]   - Field: ‘envir’
[09:29:21.932]   - Field: ‘workers’
[09:29:21.932]   - Field: ‘packages’
[09:29:21.932]   - Field: ‘gc’
[09:29:21.932]   - Field: ‘job’
[09:29:21.932]   - Field: ‘conditions’
[09:29:21.933]   - Field: ‘expr’
[09:29:21.933]   - Field: ‘uuid’
[09:29:21.933]   - Field: ‘seed’
[09:29:21.933]   - Field: ‘version’
[09:29:21.933]   - Field: ‘result’
[09:29:21.933]   - Field: ‘asynchronous’
[09:29:21.933]   - Field: ‘calls’
[09:29:21.933]   - Field: ‘globals’
[09:29:21.933]   - Field: ‘stdout’
[09:29:21.934]   - Field: ‘earlySignal’
[09:29:21.934]   - Field: ‘lazy’
[09:29:21.934]   - Field: ‘state’
[09:29:21.934] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:21.934] - Launch lazy future ...
[09:29:21.935] Packages needed by the future expression (n = 0): <none>
[09:29:21.935] Packages needed by future strategies (n = 0): <none>
[09:29:21.935] {
[09:29:21.935]     {
[09:29:21.935]         {
[09:29:21.935]             ...future.startTime <- base::Sys.time()
[09:29:21.935]             {
[09:29:21.935]                 {
[09:29:21.935]                   {
[09:29:21.935]                     {
[09:29:21.935]                       base::local({
[09:29:21.935]                         has_future <- base::requireNamespace("future", 
[09:29:21.935]                           quietly = TRUE)
[09:29:21.935]                         if (has_future) {
[09:29:21.935]                           ns <- base::getNamespace("future")
[09:29:21.935]                           version <- ns[[".package"]][["version"]]
[09:29:21.935]                           if (is.null(version)) 
[09:29:21.935]                             version <- utils::packageVersion("future")
[09:29:21.935]                         }
[09:29:21.935]                         else {
[09:29:21.935]                           version <- NULL
[09:29:21.935]                         }
[09:29:21.935]                         if (!has_future || version < "1.8.0") {
[09:29:21.935]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:21.935]                             "", base::R.version$version.string), 
[09:29:21.935]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:21.935]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:21.935]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:21.935]                               "release", "version")], collapse = " "), 
[09:29:21.935]                             hostname = base::Sys.info()[["nodename"]])
[09:29:21.935]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:21.935]                             info)
[09:29:21.935]                           info <- base::paste(info, collapse = "; ")
[09:29:21.935]                           if (!has_future) {
[09:29:21.935]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:21.935]                               info)
[09:29:21.935]                           }
[09:29:21.935]                           else {
[09:29:21.935]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:21.935]                               info, version)
[09:29:21.935]                           }
[09:29:21.935]                           base::stop(msg)
[09:29:21.935]                         }
[09:29:21.935]                       })
[09:29:21.935]                     }
[09:29:21.935]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:21.935]                     base::options(mc.cores = 1L)
[09:29:21.935]                   }
[09:29:21.935]                   ...future.strategy.old <- future::plan("list")
[09:29:21.935]                   options(future.plan = NULL)
[09:29:21.935]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.935]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:21.935]                 }
[09:29:21.935]                 ...future.workdir <- getwd()
[09:29:21.935]             }
[09:29:21.935]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:21.935]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:21.935]         }
[09:29:21.935]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:21.935]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:21.935]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:21.935]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:21.935]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:21.935]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:21.935]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:21.935]             base::names(...future.oldOptions))
[09:29:21.935]     }
[09:29:21.935]     if (FALSE) {
[09:29:21.935]     }
[09:29:21.935]     else {
[09:29:21.935]         if (TRUE) {
[09:29:21.935]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:21.935]                 open = "w")
[09:29:21.935]         }
[09:29:21.935]         else {
[09:29:21.935]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:21.935]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:21.935]         }
[09:29:21.935]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:21.935]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:21.935]             base::sink(type = "output", split = FALSE)
[09:29:21.935]             base::close(...future.stdout)
[09:29:21.935]         }, add = TRUE)
[09:29:21.935]     }
[09:29:21.935]     ...future.frame <- base::sys.nframe()
[09:29:21.935]     ...future.conditions <- base::list()
[09:29:21.935]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:21.935]     if (FALSE) {
[09:29:21.935]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:21.935]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:21.935]     }
[09:29:21.935]     ...future.result <- base::tryCatch({
[09:29:21.935]         base::withCallingHandlers({
[09:29:21.935]             ...future.value <- base::withVisible(base::local({
[09:29:21.935]                 withCallingHandlers({
[09:29:21.935]                   {
[09:29:21.935]                     do.call(function(...) {
[09:29:21.935]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.935]                       if (!identical(...future.globals.maxSize.org, 
[09:29:21.935]                         ...future.globals.maxSize)) {
[09:29:21.935]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.935]                         on.exit(options(oopts), add = TRUE)
[09:29:21.935]                       }
[09:29:21.935]                       {
[09:29:21.935]                         lapply(seq_along(...future.elements_ii), 
[09:29:21.935]                           FUN = function(jj) {
[09:29:21.935]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.935]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.935]                               envir = globalenv(), inherits = FALSE)
[09:29:21.935]                             ...future.FUN(...future.X_jj, ...)
[09:29:21.935]                           })
[09:29:21.935]                       }
[09:29:21.935]                     }, args = future.call.arguments)
[09:29:21.935]                   }
[09:29:21.935]                 }, immediateCondition = function(cond) {
[09:29:21.935]                   save_rds <- function (object, pathname, ...) 
[09:29:21.935]                   {
[09:29:21.935]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:21.935]                     if (file_test("-f", pathname_tmp)) {
[09:29:21.935]                       fi_tmp <- file.info(pathname_tmp)
[09:29:21.935]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:21.935]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:21.935]                         fi_tmp[["mtime"]])
[09:29:21.935]                     }
[09:29:21.935]                     tryCatch({
[09:29:21.935]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:21.935]                     }, error = function(ex) {
[09:29:21.935]                       msg <- conditionMessage(ex)
[09:29:21.935]                       fi_tmp <- file.info(pathname_tmp)
[09:29:21.935]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:21.935]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:21.935]                         fi_tmp[["mtime"]], msg)
[09:29:21.935]                       ex$message <- msg
[09:29:21.935]                       stop(ex)
[09:29:21.935]                     })
[09:29:21.935]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:21.935]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:21.935]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:21.935]                       fi_tmp <- file.info(pathname_tmp)
[09:29:21.935]                       fi <- file.info(pathname)
[09:29:21.935]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:21.935]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:21.935]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:21.935]                         fi[["size"]], fi[["mtime"]])
[09:29:21.935]                       stop(msg)
[09:29:21.935]                     }
[09:29:21.935]                     invisible(pathname)
[09:29:21.935]                   }
[09:29:21.935]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:21.935]                     rootPath = tempdir()) 
[09:29:21.935]                   {
[09:29:21.935]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:21.935]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:21.935]                       tmpdir = path, fileext = ".rds")
[09:29:21.935]                     save_rds(obj, file)
[09:29:21.935]                   }
[09:29:21.935]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:21.935]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.935]                   {
[09:29:21.935]                     inherits <- base::inherits
[09:29:21.935]                     invokeRestart <- base::invokeRestart
[09:29:21.935]                     is.null <- base::is.null
[09:29:21.935]                     muffled <- FALSE
[09:29:21.935]                     if (inherits(cond, "message")) {
[09:29:21.935]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:21.935]                       if (muffled) 
[09:29:21.935]                         invokeRestart("muffleMessage")
[09:29:21.935]                     }
[09:29:21.935]                     else if (inherits(cond, "warning")) {
[09:29:21.935]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:21.935]                       if (muffled) 
[09:29:21.935]                         invokeRestart("muffleWarning")
[09:29:21.935]                     }
[09:29:21.935]                     else if (inherits(cond, "condition")) {
[09:29:21.935]                       if (!is.null(pattern)) {
[09:29:21.935]                         computeRestarts <- base::computeRestarts
[09:29:21.935]                         grepl <- base::grepl
[09:29:21.935]                         restarts <- computeRestarts(cond)
[09:29:21.935]                         for (restart in restarts) {
[09:29:21.935]                           name <- restart$name
[09:29:21.935]                           if (is.null(name)) 
[09:29:21.935]                             next
[09:29:21.935]                           if (!grepl(pattern, name)) 
[09:29:21.935]                             next
[09:29:21.935]                           invokeRestart(restart)
[09:29:21.935]                           muffled <- TRUE
[09:29:21.935]                           break
[09:29:21.935]                         }
[09:29:21.935]                       }
[09:29:21.935]                     }
[09:29:21.935]                     invisible(muffled)
[09:29:21.935]                   }
[09:29:21.935]                   muffleCondition(cond)
[09:29:21.935]                 })
[09:29:21.935]             }))
[09:29:21.935]             future::FutureResult(value = ...future.value$value, 
[09:29:21.935]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.935]                   ...future.rng), globalenv = if (FALSE) 
[09:29:21.935]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:21.935]                     ...future.globalenv.names))
[09:29:21.935]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:21.935]         }, condition = base::local({
[09:29:21.935]             c <- base::c
[09:29:21.935]             inherits <- base::inherits
[09:29:21.935]             invokeRestart <- base::invokeRestart
[09:29:21.935]             length <- base::length
[09:29:21.935]             list <- base::list
[09:29:21.935]             seq.int <- base::seq.int
[09:29:21.935]             signalCondition <- base::signalCondition
[09:29:21.935]             sys.calls <- base::sys.calls
[09:29:21.935]             `[[` <- base::`[[`
[09:29:21.935]             `+` <- base::`+`
[09:29:21.935]             `<<-` <- base::`<<-`
[09:29:21.935]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:21.935]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:21.935]                   3L)]
[09:29:21.935]             }
[09:29:21.935]             function(cond) {
[09:29:21.935]                 is_error <- inherits(cond, "error")
[09:29:21.935]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:21.935]                   NULL)
[09:29:21.935]                 if (is_error) {
[09:29:21.935]                   sessionInformation <- function() {
[09:29:21.935]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:21.935]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:21.935]                       search = base::search(), system = base::Sys.info())
[09:29:21.935]                   }
[09:29:21.935]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.935]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:21.935]                     cond$call), session = sessionInformation(), 
[09:29:21.935]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:21.935]                   signalCondition(cond)
[09:29:21.935]                 }
[09:29:21.935]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:21.935]                 "immediateCondition"))) {
[09:29:21.935]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:21.935]                   ...future.conditions[[length(...future.conditions) + 
[09:29:21.935]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:21.935]                   if (TRUE && !signal) {
[09:29:21.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.935]                     {
[09:29:21.935]                       inherits <- base::inherits
[09:29:21.935]                       invokeRestart <- base::invokeRestart
[09:29:21.935]                       is.null <- base::is.null
[09:29:21.935]                       muffled <- FALSE
[09:29:21.935]                       if (inherits(cond, "message")) {
[09:29:21.935]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.935]                         if (muffled) 
[09:29:21.935]                           invokeRestart("muffleMessage")
[09:29:21.935]                       }
[09:29:21.935]                       else if (inherits(cond, "warning")) {
[09:29:21.935]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.935]                         if (muffled) 
[09:29:21.935]                           invokeRestart("muffleWarning")
[09:29:21.935]                       }
[09:29:21.935]                       else if (inherits(cond, "condition")) {
[09:29:21.935]                         if (!is.null(pattern)) {
[09:29:21.935]                           computeRestarts <- base::computeRestarts
[09:29:21.935]                           grepl <- base::grepl
[09:29:21.935]                           restarts <- computeRestarts(cond)
[09:29:21.935]                           for (restart in restarts) {
[09:29:21.935]                             name <- restart$name
[09:29:21.935]                             if (is.null(name)) 
[09:29:21.935]                               next
[09:29:21.935]                             if (!grepl(pattern, name)) 
[09:29:21.935]                               next
[09:29:21.935]                             invokeRestart(restart)
[09:29:21.935]                             muffled <- TRUE
[09:29:21.935]                             break
[09:29:21.935]                           }
[09:29:21.935]                         }
[09:29:21.935]                       }
[09:29:21.935]                       invisible(muffled)
[09:29:21.935]                     }
[09:29:21.935]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.935]                   }
[09:29:21.935]                 }
[09:29:21.935]                 else {
[09:29:21.935]                   if (TRUE) {
[09:29:21.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:21.935]                     {
[09:29:21.935]                       inherits <- base::inherits
[09:29:21.935]                       invokeRestart <- base::invokeRestart
[09:29:21.935]                       is.null <- base::is.null
[09:29:21.935]                       muffled <- FALSE
[09:29:21.935]                       if (inherits(cond, "message")) {
[09:29:21.935]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:21.935]                         if (muffled) 
[09:29:21.935]                           invokeRestart("muffleMessage")
[09:29:21.935]                       }
[09:29:21.935]                       else if (inherits(cond, "warning")) {
[09:29:21.935]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:21.935]                         if (muffled) 
[09:29:21.935]                           invokeRestart("muffleWarning")
[09:29:21.935]                       }
[09:29:21.935]                       else if (inherits(cond, "condition")) {
[09:29:21.935]                         if (!is.null(pattern)) {
[09:29:21.935]                           computeRestarts <- base::computeRestarts
[09:29:21.935]                           grepl <- base::grepl
[09:29:21.935]                           restarts <- computeRestarts(cond)
[09:29:21.935]                           for (restart in restarts) {
[09:29:21.935]                             name <- restart$name
[09:29:21.935]                             if (is.null(name)) 
[09:29:21.935]                               next
[09:29:21.935]                             if (!grepl(pattern, name)) 
[09:29:21.935]                               next
[09:29:21.935]                             invokeRestart(restart)
[09:29:21.935]                             muffled <- TRUE
[09:29:21.935]                             break
[09:29:21.935]                           }
[09:29:21.935]                         }
[09:29:21.935]                       }
[09:29:21.935]                       invisible(muffled)
[09:29:21.935]                     }
[09:29:21.935]                     muffleCondition(cond, pattern = "^muffle")
[09:29:21.935]                   }
[09:29:21.935]                 }
[09:29:21.935]             }
[09:29:21.935]         }))
[09:29:21.935]     }, error = function(ex) {
[09:29:21.935]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:21.935]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:21.935]                 ...future.rng), started = ...future.startTime, 
[09:29:21.935]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:21.935]             version = "1.8"), class = "FutureResult")
[09:29:21.935]     }, finally = {
[09:29:21.935]         if (!identical(...future.workdir, getwd())) 
[09:29:21.935]             setwd(...future.workdir)
[09:29:21.935]         {
[09:29:21.935]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:21.935]                 ...future.oldOptions$nwarnings <- NULL
[09:29:21.935]             }
[09:29:21.935]             base::options(...future.oldOptions)
[09:29:21.935]             if (.Platform$OS.type == "windows") {
[09:29:21.935]                 old_names <- names(...future.oldEnvVars)
[09:29:21.935]                 envs <- base::Sys.getenv()
[09:29:21.935]                 names <- names(envs)
[09:29:21.935]                 common <- intersect(names, old_names)
[09:29:21.935]                 added <- setdiff(names, old_names)
[09:29:21.935]                 removed <- setdiff(old_names, names)
[09:29:21.935]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:21.935]                   envs[common]]
[09:29:21.935]                 NAMES <- toupper(changed)
[09:29:21.935]                 args <- list()
[09:29:21.935]                 for (kk in seq_along(NAMES)) {
[09:29:21.935]                   name <- changed[[kk]]
[09:29:21.935]                   NAME <- NAMES[[kk]]
[09:29:21.935]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.935]                     next
[09:29:21.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.935]                 }
[09:29:21.935]                 NAMES <- toupper(added)
[09:29:21.935]                 for (kk in seq_along(NAMES)) {
[09:29:21.935]                   name <- added[[kk]]
[09:29:21.935]                   NAME <- NAMES[[kk]]
[09:29:21.935]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.935]                     next
[09:29:21.935]                   args[[name]] <- ""
[09:29:21.935]                 }
[09:29:21.935]                 NAMES <- toupper(removed)
[09:29:21.935]                 for (kk in seq_along(NAMES)) {
[09:29:21.935]                   name <- removed[[kk]]
[09:29:21.935]                   NAME <- NAMES[[kk]]
[09:29:21.935]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:21.935]                     next
[09:29:21.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:21.935]                 }
[09:29:21.935]                 if (length(args) > 0) 
[09:29:21.935]                   base::do.call(base::Sys.setenv, args = args)
[09:29:21.935]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:21.935]             }
[09:29:21.935]             else {
[09:29:21.935]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:21.935]             }
[09:29:21.935]             {
[09:29:21.935]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:21.935]                   0L) {
[09:29:21.935]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:21.935]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:21.935]                   base::options(opts)
[09:29:21.935]                 }
[09:29:21.935]                 {
[09:29:21.935]                   {
[09:29:21.935]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:21.935]                     NULL
[09:29:21.935]                   }
[09:29:21.935]                   options(future.plan = NULL)
[09:29:21.935]                   if (is.na(NA_character_)) 
[09:29:21.935]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:21.935]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:21.935]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:21.935]                     .init = FALSE)
[09:29:21.935]                 }
[09:29:21.935]             }
[09:29:21.935]         }
[09:29:21.935]     })
[09:29:21.935]     if (TRUE) {
[09:29:21.935]         base::sink(type = "output", split = FALSE)
[09:29:21.935]         if (TRUE) {
[09:29:21.935]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:21.935]         }
[09:29:21.935]         else {
[09:29:21.935]             ...future.result["stdout"] <- base::list(NULL)
[09:29:21.935]         }
[09:29:21.935]         base::close(...future.stdout)
[09:29:21.935]         ...future.stdout <- NULL
[09:29:21.935]     }
[09:29:21.935]     ...future.result$conditions <- ...future.conditions
[09:29:21.935]     ...future.result$finished <- base::Sys.time()
[09:29:21.935]     ...future.result
[09:29:21.935] }
[09:29:21.938] assign_globals() ...
[09:29:21.939] List of 5
[09:29:21.939]  $ ...future.FUN            :function (...)  
[09:29:21.939]  $ future.call.arguments    : list()
[09:29:21.939]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.939]  $ ...future.elements_ii    :List of 3
[09:29:21.939]   ..$ : int 0
[09:29:21.939]   ..$ : int 0
[09:29:21.939]   ..$ : int 0
[09:29:21.939]  $ ...future.seeds_ii       :List of 3
[09:29:21.939]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[09:29:21.939]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[09:29:21.939]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[09:29:21.939]  $ ...future.globals.maxSize: NULL
[09:29:21.939]  - attr(*, "where")=List of 5
[09:29:21.939]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:21.939]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:21.939]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:21.939]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:21.939]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:21.939]  - attr(*, "resolved")= logi FALSE
[09:29:21.939]  - attr(*, "total_size")= num 616
[09:29:21.939]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.939]  - attr(*, "already-done")= logi TRUE
[09:29:21.951] - reassign environment for ‘...future.FUN’
[09:29:21.951] - copied ‘...future.FUN’ to environment
[09:29:21.952] - copied ‘future.call.arguments’ to environment
[09:29:21.952] - copied ‘...future.elements_ii’ to environment
[09:29:21.952] - copied ‘...future.seeds_ii’ to environment
[09:29:21.952] - copied ‘...future.globals.maxSize’ to environment
[09:29:21.952] assign_globals() ... done
[09:29:21.952] requestCore(): workers = 2
[09:29:21.958] MulticoreFuture started
[09:29:21.958] - Launch lazy future ... done
[09:29:21.959] run() for ‘MulticoreFuture’ ... done
[09:29:21.959] Created future:
[09:29:21.959] plan(): Setting new future strategy stack:
[09:29:21.959] List of future strategies:
[09:29:21.959] 1. sequential:
[09:29:21.959]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:21.959]    - tweaked: FALSE
[09:29:21.959]    - call: NULL
[09:29:21.960] plan(): nbrOfWorkers() = 1
[09:29:21.963] plan(): Setting new future strategy stack:
[09:29:21.963] List of future strategies:
[09:29:21.963] 1. multicore:
[09:29:21.963]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:21.963]    - tweaked: FALSE
[09:29:21.963]    - call: plan(strategy)
[09:29:21.968] plan(): nbrOfWorkers() = 2
[09:29:21.959] MulticoreFuture:
[09:29:21.959] Label: ‘future_replicate-2’
[09:29:21.959] Expression:
[09:29:21.959] {
[09:29:21.959]     do.call(function(...) {
[09:29:21.959]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:21.959]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:21.959]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:21.959]             on.exit(options(oopts), add = TRUE)
[09:29:21.959]         }
[09:29:21.959]         {
[09:29:21.959]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:21.959]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:21.959]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:21.959]                   envir = globalenv(), inherits = FALSE)
[09:29:21.959]                 ...future.FUN(...future.X_jj, ...)
[09:29:21.959]             })
[09:29:21.959]         }
[09:29:21.959]     }, args = future.call.arguments)
[09:29:21.959] }
[09:29:21.959] Lazy evaluation: FALSE
[09:29:21.959] Asynchronous evaluation: TRUE
[09:29:21.959] Local evaluation: TRUE
[09:29:21.959] Environment: R_GlobalEnv
[09:29:21.959] Capture standard output: TRUE
[09:29:21.959] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:21.959] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:21.959] Packages: <none>
[09:29:21.959] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:21.959] Resolved: TRUE
[09:29:21.959] Value: <not collected>
[09:29:21.959] Conditions captured: <none>
[09:29:21.959] Early signaling: FALSE
[09:29:21.959] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:21.959] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:21.969] Chunk #2 of 2 ... DONE
[09:29:21.969] Launching 2 futures (chunks) ... DONE
[09:29:21.969] Resolving 2 futures (chunks) ...
[09:29:21.969] resolve() on list ...
[09:29:21.969]  recursive: 0
[09:29:21.970]  length: 2
[09:29:21.970] 
[09:29:21.970] Future #1
[09:29:21.971] result() for MulticoreFuture ...
[09:29:21.972] result() for MulticoreFuture ...
[09:29:21.972] result() for MulticoreFuture ... done
[09:29:21.973] result() for MulticoreFuture ... done
[09:29:21.973] result() for MulticoreFuture ...
[09:29:21.973] result() for MulticoreFuture ... done
[09:29:21.973] signalConditionsASAP(MulticoreFuture, pos=1) ...
[09:29:21.973] - nx: 2
[09:29:21.973] - relay: TRUE
[09:29:21.974] - stdout: TRUE
[09:29:21.974] - signal: TRUE
[09:29:21.974] - resignal: FALSE
[09:29:21.974] - force: TRUE
[09:29:21.974] - relayed: [n=2] FALSE, FALSE
[09:29:21.974] - queued futures: [n=2] FALSE, FALSE
[09:29:21.974]  - until=1
[09:29:21.974]  - relaying element #1
[09:29:21.975] result() for MulticoreFuture ...
[09:29:21.975] result() for MulticoreFuture ... done
[09:29:21.975] result() for MulticoreFuture ...
[09:29:21.975] result() for MulticoreFuture ... done
[09:29:21.975] result() for MulticoreFuture ...
[09:29:21.975] result() for MulticoreFuture ... done
[09:29:21.976] result() for MulticoreFuture ...
[09:29:21.976] result() for MulticoreFuture ... done
[09:29:21.976] - relayed: [n=2] TRUE, FALSE
[09:29:21.976] - queued futures: [n=2] TRUE, FALSE
[09:29:21.976] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[09:29:21.976]  length: 1 (resolved future 1)
[09:29:21.977] Future #2
[09:29:21.977] result() for MulticoreFuture ...
[09:29:21.977] result() for MulticoreFuture ...
[09:29:21.977] result() for MulticoreFuture ... done
[09:29:21.978] result() for MulticoreFuture ... done
[09:29:21.978] result() for MulticoreFuture ...
[09:29:21.978] result() for MulticoreFuture ... done
[09:29:21.978] signalConditionsASAP(MulticoreFuture, pos=2) ...
[09:29:21.978] - nx: 2
[09:29:21.978] - relay: TRUE
[09:29:21.978] - stdout: TRUE
[09:29:21.979] - signal: TRUE
[09:29:21.979] - resignal: FALSE
[09:29:21.979] - force: TRUE
[09:29:21.979] - relayed: [n=2] TRUE, FALSE
[09:29:21.979] - queued futures: [n=2] TRUE, FALSE
[09:29:21.979]  - until=2
[09:29:21.979]  - relaying element #2
[09:29:21.979] result() for MulticoreFuture ...
[09:29:21.979] result() for MulticoreFuture ... done
[09:29:21.980] result() for MulticoreFuture ...
[09:29:21.980] result() for MulticoreFuture ... done
[09:29:21.980] result() for MulticoreFuture ...
[09:29:21.980] result() for MulticoreFuture ... done
[09:29:21.980] result() for MulticoreFuture ...
[09:29:21.980] result() for MulticoreFuture ... done
[09:29:21.980] - relayed: [n=2] TRUE, TRUE
[09:29:21.980] - queued futures: [n=2] TRUE, TRUE
[09:29:21.980] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[09:29:21.981]  length: 0 (resolved future 2)
[09:29:21.981] Relaying remaining futures
[09:29:21.981] signalConditionsASAP(NULL, pos=0) ...
[09:29:21.981] - nx: 2
[09:29:21.981] - relay: TRUE
[09:29:21.981] - stdout: TRUE
[09:29:21.981] - signal: TRUE
[09:29:21.981] - resignal: FALSE
[09:29:21.981] - force: TRUE
[09:29:21.981] - relayed: [n=2] TRUE, TRUE
[09:29:21.981] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:21.982] - relayed: [n=2] TRUE, TRUE
[09:29:21.982] - queued futures: [n=2] TRUE, TRUE
[09:29:21.982] signalConditionsASAP(NULL, pos=0) ... done
[09:29:21.982] resolve() on list ... DONE
[09:29:21.982] result() for MulticoreFuture ...
[09:29:21.982] result() for MulticoreFuture ... done
[09:29:21.982] result() for MulticoreFuture ...
[09:29:21.982] result() for MulticoreFuture ... done
[09:29:21.982] result() for MulticoreFuture ...
[09:29:21.983] result() for MulticoreFuture ... done
[09:29:21.983] result() for MulticoreFuture ...
[09:29:21.983] result() for MulticoreFuture ... done
[09:29:21.983]  - Number of value chunks collected: 2
[09:29:21.983] Resolving 2 futures (chunks) ... DONE
[09:29:21.983] Reducing values from 2 chunks ...
[09:29:21.983]  - Number of values collected after concatenation: 5
[09:29:21.983]  - Number of values expected: 5
[09:29:21.983] Reducing values from 2 chunks ... DONE
[09:29:21.984] future_lapply() ... DONE
[09:29:21.984] future_lapply() ...
[09:29:21.984] Generating random seeds ...
[09:29:21.984] Generating random seed streams for 5 elements ...
[09:29:21.985] Generating random seed streams for 5 elements ... DONE
[09:29:21.985] Generating random seeds ... DONE
[09:29:21.985] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:21.989] Number of chunks: 2
[09:29:21.989] getGlobalsAndPackagesXApply() ...
[09:29:21.989]  - future.globals: TRUE
[09:29:21.990] getGlobalsAndPackages() ...
[09:29:21.990] Searching for globals...
[09:29:21.993] - globals found: [2] ‘FUN’, ‘sample’
[09:29:21.993] Searching for globals ... DONE
[09:29:21.993] Resolving globals: FALSE
[09:29:21.994] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:21.994] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:21.994] - globals: [1] ‘FUN’
[09:29:21.994] 
[09:29:21.995] getGlobalsAndPackages() ... DONE
[09:29:21.995]  - globals found/used: [n=1] ‘FUN’
[09:29:21.995]  - needed namespaces: [n=0] 
[09:29:21.995] Finding globals ... DONE
[09:29:21.995]  - use_args: TRUE
[09:29:21.995]  - Getting '...' globals ...
[09:29:21.996] resolve() on list ...
[09:29:21.996]  recursive: 0
[09:29:21.996]  length: 1
[09:29:21.996]  elements: ‘...’
[09:29:21.996]  length: 0 (resolved future 1)
[09:29:21.996] resolve() on list ... DONE
[09:29:21.996]    - '...' content: [n=0] 
[09:29:21.996] List of 1
[09:29:21.996]  $ ...: list()
[09:29:21.996]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:21.996]  - attr(*, "where")=List of 1
[09:29:21.996]   ..$ ...:<environment: 0x55d1cb9144a0> 
[09:29:21.996]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:21.996]  - attr(*, "resolved")= logi TRUE
[09:29:21.996]  - attr(*, "total_size")= num NA
[09:29:21.999]  - Getting '...' globals ... DONE
[09:29:22.000] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:22.000] List of 2
[09:29:22.000]  $ ...future.FUN:function (...)  
[09:29:22.000]  $ ...          : list()
[09:29:22.000]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.000]  - attr(*, "where")=List of 2
[09:29:22.000]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:22.000]   ..$ ...          :<environment: 0x55d1cb9144a0> 
[09:29:22.000]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.000]  - attr(*, "resolved")= logi FALSE
[09:29:22.000]  - attr(*, "total_size")= num 616
[09:29:22.002] Packages to be attached in all futures: [n=0] 
[09:29:22.003] getGlobalsAndPackagesXApply() ... DONE
[09:29:22.003] Number of futures (= number of chunks): 2
[09:29:22.003] Launching 2 futures (chunks) ...
[09:29:22.003] Chunk #1 of 2 ...
[09:29:22.003]  - Finding globals in 'X' for chunk #1 ...
[09:29:22.003] getGlobalsAndPackages() ...
[09:29:22.003] Searching for globals...
[09:29:22.003] 
[09:29:22.004] Searching for globals ... DONE
[09:29:22.004] - globals: [0] <none>
[09:29:22.004] getGlobalsAndPackages() ... DONE
[09:29:22.004]    + additional globals found: [n=0] 
[09:29:22.004]    + additional namespaces needed: [n=0] 
[09:29:22.004]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:22.004]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.004]  - seeds: [2] <seeds>
[09:29:22.004]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.004] getGlobalsAndPackages() ...
[09:29:22.005] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.005] Resolving globals: FALSE
[09:29:22.005] Tweak future expression to call with '...' arguments ...
[09:29:22.005] {
[09:29:22.005]     do.call(function(...) {
[09:29:22.005]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.005]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.005]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.005]             on.exit(options(oopts), add = TRUE)
[09:29:22.005]         }
[09:29:22.005]         {
[09:29:22.005]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.005]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.005]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.005]                   envir = globalenv(), inherits = FALSE)
[09:29:22.005]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.005]             })
[09:29:22.005]         }
[09:29:22.005]     }, args = future.call.arguments)
[09:29:22.005] }
[09:29:22.005] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.005] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.006] 
[09:29:22.006] getGlobalsAndPackages() ... DONE
[09:29:22.006] run() for ‘Future’ ...
[09:29:22.006] - state: ‘created’
[09:29:22.006] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.010] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.010] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.010]   - Field: ‘label’
[09:29:22.010]   - Field: ‘local’
[09:29:22.010]   - Field: ‘owner’
[09:29:22.010]   - Field: ‘envir’
[09:29:22.010]   - Field: ‘workers’
[09:29:22.010]   - Field: ‘packages’
[09:29:22.010]   - Field: ‘gc’
[09:29:22.011]   - Field: ‘job’
[09:29:22.011]   - Field: ‘conditions’
[09:29:22.011]   - Field: ‘expr’
[09:29:22.011]   - Field: ‘uuid’
[09:29:22.011]   - Field: ‘seed’
[09:29:22.011]   - Field: ‘version’
[09:29:22.011]   - Field: ‘result’
[09:29:22.011]   - Field: ‘asynchronous’
[09:29:22.011]   - Field: ‘calls’
[09:29:22.011]   - Field: ‘globals’
[09:29:22.011]   - Field: ‘stdout’
[09:29:22.012]   - Field: ‘earlySignal’
[09:29:22.012]   - Field: ‘lazy’
[09:29:22.012]   - Field: ‘state’
[09:29:22.012] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.012] - Launch lazy future ...
[09:29:22.012] Packages needed by the future expression (n = 0): <none>
[09:29:22.012] Packages needed by future strategies (n = 0): <none>
[09:29:22.013] {
[09:29:22.013]     {
[09:29:22.013]         {
[09:29:22.013]             ...future.startTime <- base::Sys.time()
[09:29:22.013]             {
[09:29:22.013]                 {
[09:29:22.013]                   {
[09:29:22.013]                     {
[09:29:22.013]                       base::local({
[09:29:22.013]                         has_future <- base::requireNamespace("future", 
[09:29:22.013]                           quietly = TRUE)
[09:29:22.013]                         if (has_future) {
[09:29:22.013]                           ns <- base::getNamespace("future")
[09:29:22.013]                           version <- ns[[".package"]][["version"]]
[09:29:22.013]                           if (is.null(version)) 
[09:29:22.013]                             version <- utils::packageVersion("future")
[09:29:22.013]                         }
[09:29:22.013]                         else {
[09:29:22.013]                           version <- NULL
[09:29:22.013]                         }
[09:29:22.013]                         if (!has_future || version < "1.8.0") {
[09:29:22.013]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.013]                             "", base::R.version$version.string), 
[09:29:22.013]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.013]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.013]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.013]                               "release", "version")], collapse = " "), 
[09:29:22.013]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.013]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.013]                             info)
[09:29:22.013]                           info <- base::paste(info, collapse = "; ")
[09:29:22.013]                           if (!has_future) {
[09:29:22.013]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.013]                               info)
[09:29:22.013]                           }
[09:29:22.013]                           else {
[09:29:22.013]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.013]                               info, version)
[09:29:22.013]                           }
[09:29:22.013]                           base::stop(msg)
[09:29:22.013]                         }
[09:29:22.013]                       })
[09:29:22.013]                     }
[09:29:22.013]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.013]                     base::options(mc.cores = 1L)
[09:29:22.013]                   }
[09:29:22.013]                   ...future.strategy.old <- future::plan("list")
[09:29:22.013]                   options(future.plan = NULL)
[09:29:22.013]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.013]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.013]                 }
[09:29:22.013]                 ...future.workdir <- getwd()
[09:29:22.013]             }
[09:29:22.013]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.013]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.013]         }
[09:29:22.013]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.013]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.013]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.013]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.013]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.013]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.013]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.013]             base::names(...future.oldOptions))
[09:29:22.013]     }
[09:29:22.013]     if (FALSE) {
[09:29:22.013]     }
[09:29:22.013]     else {
[09:29:22.013]         if (TRUE) {
[09:29:22.013]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.013]                 open = "w")
[09:29:22.013]         }
[09:29:22.013]         else {
[09:29:22.013]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.013]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.013]         }
[09:29:22.013]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.013]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.013]             base::sink(type = "output", split = FALSE)
[09:29:22.013]             base::close(...future.stdout)
[09:29:22.013]         }, add = TRUE)
[09:29:22.013]     }
[09:29:22.013]     ...future.frame <- base::sys.nframe()
[09:29:22.013]     ...future.conditions <- base::list()
[09:29:22.013]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.013]     if (FALSE) {
[09:29:22.013]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.013]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.013]     }
[09:29:22.013]     ...future.result <- base::tryCatch({
[09:29:22.013]         base::withCallingHandlers({
[09:29:22.013]             ...future.value <- base::withVisible(base::local({
[09:29:22.013]                 withCallingHandlers({
[09:29:22.013]                   {
[09:29:22.013]                     do.call(function(...) {
[09:29:22.013]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.013]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.013]                         ...future.globals.maxSize)) {
[09:29:22.013]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.013]                         on.exit(options(oopts), add = TRUE)
[09:29:22.013]                       }
[09:29:22.013]                       {
[09:29:22.013]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.013]                           FUN = function(jj) {
[09:29:22.013]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.013]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.013]                               envir = globalenv(), inherits = FALSE)
[09:29:22.013]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.013]                           })
[09:29:22.013]                       }
[09:29:22.013]                     }, args = future.call.arguments)
[09:29:22.013]                   }
[09:29:22.013]                 }, immediateCondition = function(cond) {
[09:29:22.013]                   save_rds <- function (object, pathname, ...) 
[09:29:22.013]                   {
[09:29:22.013]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.013]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.013]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.013]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.013]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.013]                         fi_tmp[["mtime"]])
[09:29:22.013]                     }
[09:29:22.013]                     tryCatch({
[09:29:22.013]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.013]                     }, error = function(ex) {
[09:29:22.013]                       msg <- conditionMessage(ex)
[09:29:22.013]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.013]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.013]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.013]                         fi_tmp[["mtime"]], msg)
[09:29:22.013]                       ex$message <- msg
[09:29:22.013]                       stop(ex)
[09:29:22.013]                     })
[09:29:22.013]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.013]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.013]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.013]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.013]                       fi <- file.info(pathname)
[09:29:22.013]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.013]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.013]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.013]                         fi[["size"]], fi[["mtime"]])
[09:29:22.013]                       stop(msg)
[09:29:22.013]                     }
[09:29:22.013]                     invisible(pathname)
[09:29:22.013]                   }
[09:29:22.013]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.013]                     rootPath = tempdir()) 
[09:29:22.013]                   {
[09:29:22.013]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.013]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.013]                       tmpdir = path, fileext = ".rds")
[09:29:22.013]                     save_rds(obj, file)
[09:29:22.013]                   }
[09:29:22.013]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.013]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.013]                   {
[09:29:22.013]                     inherits <- base::inherits
[09:29:22.013]                     invokeRestart <- base::invokeRestart
[09:29:22.013]                     is.null <- base::is.null
[09:29:22.013]                     muffled <- FALSE
[09:29:22.013]                     if (inherits(cond, "message")) {
[09:29:22.013]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.013]                       if (muffled) 
[09:29:22.013]                         invokeRestart("muffleMessage")
[09:29:22.013]                     }
[09:29:22.013]                     else if (inherits(cond, "warning")) {
[09:29:22.013]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.013]                       if (muffled) 
[09:29:22.013]                         invokeRestart("muffleWarning")
[09:29:22.013]                     }
[09:29:22.013]                     else if (inherits(cond, "condition")) {
[09:29:22.013]                       if (!is.null(pattern)) {
[09:29:22.013]                         computeRestarts <- base::computeRestarts
[09:29:22.013]                         grepl <- base::grepl
[09:29:22.013]                         restarts <- computeRestarts(cond)
[09:29:22.013]                         for (restart in restarts) {
[09:29:22.013]                           name <- restart$name
[09:29:22.013]                           if (is.null(name)) 
[09:29:22.013]                             next
[09:29:22.013]                           if (!grepl(pattern, name)) 
[09:29:22.013]                             next
[09:29:22.013]                           invokeRestart(restart)
[09:29:22.013]                           muffled <- TRUE
[09:29:22.013]                           break
[09:29:22.013]                         }
[09:29:22.013]                       }
[09:29:22.013]                     }
[09:29:22.013]                     invisible(muffled)
[09:29:22.013]                   }
[09:29:22.013]                   muffleCondition(cond)
[09:29:22.013]                 })
[09:29:22.013]             }))
[09:29:22.013]             future::FutureResult(value = ...future.value$value, 
[09:29:22.013]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.013]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.013]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.013]                     ...future.globalenv.names))
[09:29:22.013]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.013]         }, condition = base::local({
[09:29:22.013]             c <- base::c
[09:29:22.013]             inherits <- base::inherits
[09:29:22.013]             invokeRestart <- base::invokeRestart
[09:29:22.013]             length <- base::length
[09:29:22.013]             list <- base::list
[09:29:22.013]             seq.int <- base::seq.int
[09:29:22.013]             signalCondition <- base::signalCondition
[09:29:22.013]             sys.calls <- base::sys.calls
[09:29:22.013]             `[[` <- base::`[[`
[09:29:22.013]             `+` <- base::`+`
[09:29:22.013]             `<<-` <- base::`<<-`
[09:29:22.013]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.013]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.013]                   3L)]
[09:29:22.013]             }
[09:29:22.013]             function(cond) {
[09:29:22.013]                 is_error <- inherits(cond, "error")
[09:29:22.013]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.013]                   NULL)
[09:29:22.013]                 if (is_error) {
[09:29:22.013]                   sessionInformation <- function() {
[09:29:22.013]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.013]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.013]                       search = base::search(), system = base::Sys.info())
[09:29:22.013]                   }
[09:29:22.013]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.013]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.013]                     cond$call), session = sessionInformation(), 
[09:29:22.013]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.013]                   signalCondition(cond)
[09:29:22.013]                 }
[09:29:22.013]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.013]                 "immediateCondition"))) {
[09:29:22.013]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.013]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.013]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.013]                   if (TRUE && !signal) {
[09:29:22.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.013]                     {
[09:29:22.013]                       inherits <- base::inherits
[09:29:22.013]                       invokeRestart <- base::invokeRestart
[09:29:22.013]                       is.null <- base::is.null
[09:29:22.013]                       muffled <- FALSE
[09:29:22.013]                       if (inherits(cond, "message")) {
[09:29:22.013]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.013]                         if (muffled) 
[09:29:22.013]                           invokeRestart("muffleMessage")
[09:29:22.013]                       }
[09:29:22.013]                       else if (inherits(cond, "warning")) {
[09:29:22.013]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.013]                         if (muffled) 
[09:29:22.013]                           invokeRestart("muffleWarning")
[09:29:22.013]                       }
[09:29:22.013]                       else if (inherits(cond, "condition")) {
[09:29:22.013]                         if (!is.null(pattern)) {
[09:29:22.013]                           computeRestarts <- base::computeRestarts
[09:29:22.013]                           grepl <- base::grepl
[09:29:22.013]                           restarts <- computeRestarts(cond)
[09:29:22.013]                           for (restart in restarts) {
[09:29:22.013]                             name <- restart$name
[09:29:22.013]                             if (is.null(name)) 
[09:29:22.013]                               next
[09:29:22.013]                             if (!grepl(pattern, name)) 
[09:29:22.013]                               next
[09:29:22.013]                             invokeRestart(restart)
[09:29:22.013]                             muffled <- TRUE
[09:29:22.013]                             break
[09:29:22.013]                           }
[09:29:22.013]                         }
[09:29:22.013]                       }
[09:29:22.013]                       invisible(muffled)
[09:29:22.013]                     }
[09:29:22.013]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.013]                   }
[09:29:22.013]                 }
[09:29:22.013]                 else {
[09:29:22.013]                   if (TRUE) {
[09:29:22.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.013]                     {
[09:29:22.013]                       inherits <- base::inherits
[09:29:22.013]                       invokeRestart <- base::invokeRestart
[09:29:22.013]                       is.null <- base::is.null
[09:29:22.013]                       muffled <- FALSE
[09:29:22.013]                       if (inherits(cond, "message")) {
[09:29:22.013]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.013]                         if (muffled) 
[09:29:22.013]                           invokeRestart("muffleMessage")
[09:29:22.013]                       }
[09:29:22.013]                       else if (inherits(cond, "warning")) {
[09:29:22.013]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.013]                         if (muffled) 
[09:29:22.013]                           invokeRestart("muffleWarning")
[09:29:22.013]                       }
[09:29:22.013]                       else if (inherits(cond, "condition")) {
[09:29:22.013]                         if (!is.null(pattern)) {
[09:29:22.013]                           computeRestarts <- base::computeRestarts
[09:29:22.013]                           grepl <- base::grepl
[09:29:22.013]                           restarts <- computeRestarts(cond)
[09:29:22.013]                           for (restart in restarts) {
[09:29:22.013]                             name <- restart$name
[09:29:22.013]                             if (is.null(name)) 
[09:29:22.013]                               next
[09:29:22.013]                             if (!grepl(pattern, name)) 
[09:29:22.013]                               next
[09:29:22.013]                             invokeRestart(restart)
[09:29:22.013]                             muffled <- TRUE
[09:29:22.013]                             break
[09:29:22.013]                           }
[09:29:22.013]                         }
[09:29:22.013]                       }
[09:29:22.013]                       invisible(muffled)
[09:29:22.013]                     }
[09:29:22.013]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.013]                   }
[09:29:22.013]                 }
[09:29:22.013]             }
[09:29:22.013]         }))
[09:29:22.013]     }, error = function(ex) {
[09:29:22.013]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.013]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.013]                 ...future.rng), started = ...future.startTime, 
[09:29:22.013]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.013]             version = "1.8"), class = "FutureResult")
[09:29:22.013]     }, finally = {
[09:29:22.013]         if (!identical(...future.workdir, getwd())) 
[09:29:22.013]             setwd(...future.workdir)
[09:29:22.013]         {
[09:29:22.013]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.013]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.013]             }
[09:29:22.013]             base::options(...future.oldOptions)
[09:29:22.013]             if (.Platform$OS.type == "windows") {
[09:29:22.013]                 old_names <- names(...future.oldEnvVars)
[09:29:22.013]                 envs <- base::Sys.getenv()
[09:29:22.013]                 names <- names(envs)
[09:29:22.013]                 common <- intersect(names, old_names)
[09:29:22.013]                 added <- setdiff(names, old_names)
[09:29:22.013]                 removed <- setdiff(old_names, names)
[09:29:22.013]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.013]                   envs[common]]
[09:29:22.013]                 NAMES <- toupper(changed)
[09:29:22.013]                 args <- list()
[09:29:22.013]                 for (kk in seq_along(NAMES)) {
[09:29:22.013]                   name <- changed[[kk]]
[09:29:22.013]                   NAME <- NAMES[[kk]]
[09:29:22.013]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.013]                     next
[09:29:22.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.013]                 }
[09:29:22.013]                 NAMES <- toupper(added)
[09:29:22.013]                 for (kk in seq_along(NAMES)) {
[09:29:22.013]                   name <- added[[kk]]
[09:29:22.013]                   NAME <- NAMES[[kk]]
[09:29:22.013]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.013]                     next
[09:29:22.013]                   args[[name]] <- ""
[09:29:22.013]                 }
[09:29:22.013]                 NAMES <- toupper(removed)
[09:29:22.013]                 for (kk in seq_along(NAMES)) {
[09:29:22.013]                   name <- removed[[kk]]
[09:29:22.013]                   NAME <- NAMES[[kk]]
[09:29:22.013]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.013]                     next
[09:29:22.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.013]                 }
[09:29:22.013]                 if (length(args) > 0) 
[09:29:22.013]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.013]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.013]             }
[09:29:22.013]             else {
[09:29:22.013]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.013]             }
[09:29:22.013]             {
[09:29:22.013]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.013]                   0L) {
[09:29:22.013]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.013]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.013]                   base::options(opts)
[09:29:22.013]                 }
[09:29:22.013]                 {
[09:29:22.013]                   {
[09:29:22.013]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.013]                     NULL
[09:29:22.013]                   }
[09:29:22.013]                   options(future.plan = NULL)
[09:29:22.013]                   if (is.na(NA_character_)) 
[09:29:22.013]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.013]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.013]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.013]                     .init = FALSE)
[09:29:22.013]                 }
[09:29:22.013]             }
[09:29:22.013]         }
[09:29:22.013]     })
[09:29:22.013]     if (TRUE) {
[09:29:22.013]         base::sink(type = "output", split = FALSE)
[09:29:22.013]         if (TRUE) {
[09:29:22.013]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.013]         }
[09:29:22.013]         else {
[09:29:22.013]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.013]         }
[09:29:22.013]         base::close(...future.stdout)
[09:29:22.013]         ...future.stdout <- NULL
[09:29:22.013]     }
[09:29:22.013]     ...future.result$conditions <- ...future.conditions
[09:29:22.013]     ...future.result$finished <- base::Sys.time()
[09:29:22.013]     ...future.result
[09:29:22.013] }
[09:29:22.015] assign_globals() ...
[09:29:22.015] List of 5
[09:29:22.015]  $ ...future.FUN            :function (...)  
[09:29:22.015]  $ future.call.arguments    : list()
[09:29:22.015]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.015]  $ ...future.elements_ii    :List of 2
[09:29:22.015]   ..$ : int 0
[09:29:22.015]   ..$ : int 0
[09:29:22.015]  $ ...future.seeds_ii       :List of 2
[09:29:22.015]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[09:29:22.015]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[09:29:22.015]  $ ...future.globals.maxSize: NULL
[09:29:22.015]  - attr(*, "where")=List of 5
[09:29:22.015]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.015]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.015]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.015]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.015]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.015]  - attr(*, "resolved")= logi FALSE
[09:29:22.015]  - attr(*, "total_size")= num 616
[09:29:22.015]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.015]  - attr(*, "already-done")= logi TRUE
[09:29:22.022] - reassign environment for ‘...future.FUN’
[09:29:22.022] - copied ‘...future.FUN’ to environment
[09:29:22.022] - copied ‘future.call.arguments’ to environment
[09:29:22.022] - copied ‘...future.elements_ii’ to environment
[09:29:22.022] - copied ‘...future.seeds_ii’ to environment
[09:29:22.023] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.023] assign_globals() ... done
[09:29:22.023] requestCore(): workers = 2
[09:29:22.025] MulticoreFuture started
[09:29:22.025] - Launch lazy future ... done
[09:29:22.025] run() for ‘MulticoreFuture’ ... done
[09:29:22.026] Created future:
[09:29:22.026] plan(): Setting new future strategy stack:
[09:29:22.026] List of future strategies:
[09:29:22.026] 1. sequential:
[09:29:22.026]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.026]    - tweaked: FALSE
[09:29:22.026]    - call: NULL
[09:29:22.027] plan(): nbrOfWorkers() = 1
[09:29:22.029] plan(): Setting new future strategy stack:
[09:29:22.029] List of future strategies:
[09:29:22.029] 1. multicore:
[09:29:22.029]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.029]    - tweaked: FALSE
[09:29:22.029]    - call: plan(strategy)
[09:29:22.034] plan(): nbrOfWorkers() = 2
[09:29:22.026] MulticoreFuture:
[09:29:22.026] Label: ‘future_replicate-1’
[09:29:22.026] Expression:
[09:29:22.026] {
[09:29:22.026]     do.call(function(...) {
[09:29:22.026]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.026]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.026]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.026]             on.exit(options(oopts), add = TRUE)
[09:29:22.026]         }
[09:29:22.026]         {
[09:29:22.026]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.026]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.026]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.026]                   envir = globalenv(), inherits = FALSE)
[09:29:22.026]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.026]             })
[09:29:22.026]         }
[09:29:22.026]     }, args = future.call.arguments)
[09:29:22.026] }
[09:29:22.026] Lazy evaluation: FALSE
[09:29:22.026] Asynchronous evaluation: TRUE
[09:29:22.026] Local evaluation: TRUE
[09:29:22.026] Environment: R_GlobalEnv
[09:29:22.026] Capture standard output: TRUE
[09:29:22.026] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.026] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.026] Packages: <none>
[09:29:22.026] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.026] Resolved: TRUE
[09:29:22.026] Value: <not collected>
[09:29:22.026] Conditions captured: <none>
[09:29:22.026] Early signaling: FALSE
[09:29:22.026] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.026] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.035] Chunk #1 of 2 ... DONE
[09:29:22.035] Chunk #2 of 2 ...
[09:29:22.036]  - Finding globals in 'X' for chunk #2 ...
[09:29:22.036] getGlobalsAndPackages() ...
[09:29:22.036] Searching for globals...
[09:29:22.036] 
[09:29:22.037] Searching for globals ... DONE
[09:29:22.037] - globals: [0] <none>
[09:29:22.037] getGlobalsAndPackages() ... DONE
[09:29:22.037]    + additional globals found: [n=0] 
[09:29:22.037]    + additional namespaces needed: [n=0] 
[09:29:22.037]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:22.037]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.037]  - seeds: [3] <seeds>
[09:29:22.038]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.038] getGlobalsAndPackages() ...
[09:29:22.038] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.038] Resolving globals: FALSE
[09:29:22.038] Tweak future expression to call with '...' arguments ...
[09:29:22.039] {
[09:29:22.039]     do.call(function(...) {
[09:29:22.039]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.039]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.039]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.039]             on.exit(options(oopts), add = TRUE)
[09:29:22.039]         }
[09:29:22.039]         {
[09:29:22.039]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.039]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.039]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.039]                   envir = globalenv(), inherits = FALSE)
[09:29:22.039]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.039]             })
[09:29:22.039]         }
[09:29:22.039]     }, args = future.call.arguments)
[09:29:22.039] }
[09:29:22.039] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.040] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.040] 
[09:29:22.040] getGlobalsAndPackages() ... DONE
[09:29:22.040] run() for ‘Future’ ...
[09:29:22.040] - state: ‘created’
[09:29:22.041] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.045] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.045] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.046]   - Field: ‘label’
[09:29:22.046]   - Field: ‘local’
[09:29:22.046]   - Field: ‘owner’
[09:29:22.046]   - Field: ‘envir’
[09:29:22.046]   - Field: ‘workers’
[09:29:22.046]   - Field: ‘packages’
[09:29:22.046]   - Field: ‘gc’
[09:29:22.047]   - Field: ‘job’
[09:29:22.047]   - Field: ‘conditions’
[09:29:22.047]   - Field: ‘expr’
[09:29:22.047]   - Field: ‘uuid’
[09:29:22.047]   - Field: ‘seed’
[09:29:22.047]   - Field: ‘version’
[09:29:22.047]   - Field: ‘result’
[09:29:22.048]   - Field: ‘asynchronous’
[09:29:22.048]   - Field: ‘calls’
[09:29:22.048]   - Field: ‘globals’
[09:29:22.048]   - Field: ‘stdout’
[09:29:22.048]   - Field: ‘earlySignal’
[09:29:22.048]   - Field: ‘lazy’
[09:29:22.048]   - Field: ‘state’
[09:29:22.049] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.049] - Launch lazy future ...
[09:29:22.049] Packages needed by the future expression (n = 0): <none>
[09:29:22.049] Packages needed by future strategies (n = 0): <none>
[09:29:22.050] {
[09:29:22.050]     {
[09:29:22.050]         {
[09:29:22.050]             ...future.startTime <- base::Sys.time()
[09:29:22.050]             {
[09:29:22.050]                 {
[09:29:22.050]                   {
[09:29:22.050]                     {
[09:29:22.050]                       base::local({
[09:29:22.050]                         has_future <- base::requireNamespace("future", 
[09:29:22.050]                           quietly = TRUE)
[09:29:22.050]                         if (has_future) {
[09:29:22.050]                           ns <- base::getNamespace("future")
[09:29:22.050]                           version <- ns[[".package"]][["version"]]
[09:29:22.050]                           if (is.null(version)) 
[09:29:22.050]                             version <- utils::packageVersion("future")
[09:29:22.050]                         }
[09:29:22.050]                         else {
[09:29:22.050]                           version <- NULL
[09:29:22.050]                         }
[09:29:22.050]                         if (!has_future || version < "1.8.0") {
[09:29:22.050]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.050]                             "", base::R.version$version.string), 
[09:29:22.050]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.050]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.050]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.050]                               "release", "version")], collapse = " "), 
[09:29:22.050]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.050]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.050]                             info)
[09:29:22.050]                           info <- base::paste(info, collapse = "; ")
[09:29:22.050]                           if (!has_future) {
[09:29:22.050]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.050]                               info)
[09:29:22.050]                           }
[09:29:22.050]                           else {
[09:29:22.050]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.050]                               info, version)
[09:29:22.050]                           }
[09:29:22.050]                           base::stop(msg)
[09:29:22.050]                         }
[09:29:22.050]                       })
[09:29:22.050]                     }
[09:29:22.050]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.050]                     base::options(mc.cores = 1L)
[09:29:22.050]                   }
[09:29:22.050]                   ...future.strategy.old <- future::plan("list")
[09:29:22.050]                   options(future.plan = NULL)
[09:29:22.050]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.050]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.050]                 }
[09:29:22.050]                 ...future.workdir <- getwd()
[09:29:22.050]             }
[09:29:22.050]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.050]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.050]         }
[09:29:22.050]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.050]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.050]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.050]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.050]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.050]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.050]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.050]             base::names(...future.oldOptions))
[09:29:22.050]     }
[09:29:22.050]     if (FALSE) {
[09:29:22.050]     }
[09:29:22.050]     else {
[09:29:22.050]         if (TRUE) {
[09:29:22.050]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.050]                 open = "w")
[09:29:22.050]         }
[09:29:22.050]         else {
[09:29:22.050]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.050]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.050]         }
[09:29:22.050]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.050]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.050]             base::sink(type = "output", split = FALSE)
[09:29:22.050]             base::close(...future.stdout)
[09:29:22.050]         }, add = TRUE)
[09:29:22.050]     }
[09:29:22.050]     ...future.frame <- base::sys.nframe()
[09:29:22.050]     ...future.conditions <- base::list()
[09:29:22.050]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.050]     if (FALSE) {
[09:29:22.050]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.050]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.050]     }
[09:29:22.050]     ...future.result <- base::tryCatch({
[09:29:22.050]         base::withCallingHandlers({
[09:29:22.050]             ...future.value <- base::withVisible(base::local({
[09:29:22.050]                 withCallingHandlers({
[09:29:22.050]                   {
[09:29:22.050]                     do.call(function(...) {
[09:29:22.050]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.050]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.050]                         ...future.globals.maxSize)) {
[09:29:22.050]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.050]                         on.exit(options(oopts), add = TRUE)
[09:29:22.050]                       }
[09:29:22.050]                       {
[09:29:22.050]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.050]                           FUN = function(jj) {
[09:29:22.050]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.050]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.050]                               envir = globalenv(), inherits = FALSE)
[09:29:22.050]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.050]                           })
[09:29:22.050]                       }
[09:29:22.050]                     }, args = future.call.arguments)
[09:29:22.050]                   }
[09:29:22.050]                 }, immediateCondition = function(cond) {
[09:29:22.050]                   save_rds <- function (object, pathname, ...) 
[09:29:22.050]                   {
[09:29:22.050]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.050]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.050]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.050]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.050]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.050]                         fi_tmp[["mtime"]])
[09:29:22.050]                     }
[09:29:22.050]                     tryCatch({
[09:29:22.050]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.050]                     }, error = function(ex) {
[09:29:22.050]                       msg <- conditionMessage(ex)
[09:29:22.050]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.050]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.050]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.050]                         fi_tmp[["mtime"]], msg)
[09:29:22.050]                       ex$message <- msg
[09:29:22.050]                       stop(ex)
[09:29:22.050]                     })
[09:29:22.050]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.050]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.050]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.050]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.050]                       fi <- file.info(pathname)
[09:29:22.050]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.050]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.050]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.050]                         fi[["size"]], fi[["mtime"]])
[09:29:22.050]                       stop(msg)
[09:29:22.050]                     }
[09:29:22.050]                     invisible(pathname)
[09:29:22.050]                   }
[09:29:22.050]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.050]                     rootPath = tempdir()) 
[09:29:22.050]                   {
[09:29:22.050]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.050]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.050]                       tmpdir = path, fileext = ".rds")
[09:29:22.050]                     save_rds(obj, file)
[09:29:22.050]                   }
[09:29:22.050]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.050]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.050]                   {
[09:29:22.050]                     inherits <- base::inherits
[09:29:22.050]                     invokeRestart <- base::invokeRestart
[09:29:22.050]                     is.null <- base::is.null
[09:29:22.050]                     muffled <- FALSE
[09:29:22.050]                     if (inherits(cond, "message")) {
[09:29:22.050]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.050]                       if (muffled) 
[09:29:22.050]                         invokeRestart("muffleMessage")
[09:29:22.050]                     }
[09:29:22.050]                     else if (inherits(cond, "warning")) {
[09:29:22.050]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.050]                       if (muffled) 
[09:29:22.050]                         invokeRestart("muffleWarning")
[09:29:22.050]                     }
[09:29:22.050]                     else if (inherits(cond, "condition")) {
[09:29:22.050]                       if (!is.null(pattern)) {
[09:29:22.050]                         computeRestarts <- base::computeRestarts
[09:29:22.050]                         grepl <- base::grepl
[09:29:22.050]                         restarts <- computeRestarts(cond)
[09:29:22.050]                         for (restart in restarts) {
[09:29:22.050]                           name <- restart$name
[09:29:22.050]                           if (is.null(name)) 
[09:29:22.050]                             next
[09:29:22.050]                           if (!grepl(pattern, name)) 
[09:29:22.050]                             next
[09:29:22.050]                           invokeRestart(restart)
[09:29:22.050]                           muffled <- TRUE
[09:29:22.050]                           break
[09:29:22.050]                         }
[09:29:22.050]                       }
[09:29:22.050]                     }
[09:29:22.050]                     invisible(muffled)
[09:29:22.050]                   }
[09:29:22.050]                   muffleCondition(cond)
[09:29:22.050]                 })
[09:29:22.050]             }))
[09:29:22.050]             future::FutureResult(value = ...future.value$value, 
[09:29:22.050]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.050]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.050]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.050]                     ...future.globalenv.names))
[09:29:22.050]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.050]         }, condition = base::local({
[09:29:22.050]             c <- base::c
[09:29:22.050]             inherits <- base::inherits
[09:29:22.050]             invokeRestart <- base::invokeRestart
[09:29:22.050]             length <- base::length
[09:29:22.050]             list <- base::list
[09:29:22.050]             seq.int <- base::seq.int
[09:29:22.050]             signalCondition <- base::signalCondition
[09:29:22.050]             sys.calls <- base::sys.calls
[09:29:22.050]             `[[` <- base::`[[`
[09:29:22.050]             `+` <- base::`+`
[09:29:22.050]             `<<-` <- base::`<<-`
[09:29:22.050]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.050]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.050]                   3L)]
[09:29:22.050]             }
[09:29:22.050]             function(cond) {
[09:29:22.050]                 is_error <- inherits(cond, "error")
[09:29:22.050]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.050]                   NULL)
[09:29:22.050]                 if (is_error) {
[09:29:22.050]                   sessionInformation <- function() {
[09:29:22.050]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.050]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.050]                       search = base::search(), system = base::Sys.info())
[09:29:22.050]                   }
[09:29:22.050]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.050]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.050]                     cond$call), session = sessionInformation(), 
[09:29:22.050]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.050]                   signalCondition(cond)
[09:29:22.050]                 }
[09:29:22.050]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.050]                 "immediateCondition"))) {
[09:29:22.050]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.050]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.050]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.050]                   if (TRUE && !signal) {
[09:29:22.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.050]                     {
[09:29:22.050]                       inherits <- base::inherits
[09:29:22.050]                       invokeRestart <- base::invokeRestart
[09:29:22.050]                       is.null <- base::is.null
[09:29:22.050]                       muffled <- FALSE
[09:29:22.050]                       if (inherits(cond, "message")) {
[09:29:22.050]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.050]                         if (muffled) 
[09:29:22.050]                           invokeRestart("muffleMessage")
[09:29:22.050]                       }
[09:29:22.050]                       else if (inherits(cond, "warning")) {
[09:29:22.050]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.050]                         if (muffled) 
[09:29:22.050]                           invokeRestart("muffleWarning")
[09:29:22.050]                       }
[09:29:22.050]                       else if (inherits(cond, "condition")) {
[09:29:22.050]                         if (!is.null(pattern)) {
[09:29:22.050]                           computeRestarts <- base::computeRestarts
[09:29:22.050]                           grepl <- base::grepl
[09:29:22.050]                           restarts <- computeRestarts(cond)
[09:29:22.050]                           for (restart in restarts) {
[09:29:22.050]                             name <- restart$name
[09:29:22.050]                             if (is.null(name)) 
[09:29:22.050]                               next
[09:29:22.050]                             if (!grepl(pattern, name)) 
[09:29:22.050]                               next
[09:29:22.050]                             invokeRestart(restart)
[09:29:22.050]                             muffled <- TRUE
[09:29:22.050]                             break
[09:29:22.050]                           }
[09:29:22.050]                         }
[09:29:22.050]                       }
[09:29:22.050]                       invisible(muffled)
[09:29:22.050]                     }
[09:29:22.050]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.050]                   }
[09:29:22.050]                 }
[09:29:22.050]                 else {
[09:29:22.050]                   if (TRUE) {
[09:29:22.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.050]                     {
[09:29:22.050]                       inherits <- base::inherits
[09:29:22.050]                       invokeRestart <- base::invokeRestart
[09:29:22.050]                       is.null <- base::is.null
[09:29:22.050]                       muffled <- FALSE
[09:29:22.050]                       if (inherits(cond, "message")) {
[09:29:22.050]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.050]                         if (muffled) 
[09:29:22.050]                           invokeRestart("muffleMessage")
[09:29:22.050]                       }
[09:29:22.050]                       else if (inherits(cond, "warning")) {
[09:29:22.050]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.050]                         if (muffled) 
[09:29:22.050]                           invokeRestart("muffleWarning")
[09:29:22.050]                       }
[09:29:22.050]                       else if (inherits(cond, "condition")) {
[09:29:22.050]                         if (!is.null(pattern)) {
[09:29:22.050]                           computeRestarts <- base::computeRestarts
[09:29:22.050]                           grepl <- base::grepl
[09:29:22.050]                           restarts <- computeRestarts(cond)
[09:29:22.050]                           for (restart in restarts) {
[09:29:22.050]                             name <- restart$name
[09:29:22.050]                             if (is.null(name)) 
[09:29:22.050]                               next
[09:29:22.050]                             if (!grepl(pattern, name)) 
[09:29:22.050]                               next
[09:29:22.050]                             invokeRestart(restart)
[09:29:22.050]                             muffled <- TRUE
[09:29:22.050]                             break
[09:29:22.050]                           }
[09:29:22.050]                         }
[09:29:22.050]                       }
[09:29:22.050]                       invisible(muffled)
[09:29:22.050]                     }
[09:29:22.050]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.050]                   }
[09:29:22.050]                 }
[09:29:22.050]             }
[09:29:22.050]         }))
[09:29:22.050]     }, error = function(ex) {
[09:29:22.050]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.050]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.050]                 ...future.rng), started = ...future.startTime, 
[09:29:22.050]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.050]             version = "1.8"), class = "FutureResult")
[09:29:22.050]     }, finally = {
[09:29:22.050]         if (!identical(...future.workdir, getwd())) 
[09:29:22.050]             setwd(...future.workdir)
[09:29:22.050]         {
[09:29:22.050]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.050]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.050]             }
[09:29:22.050]             base::options(...future.oldOptions)
[09:29:22.050]             if (.Platform$OS.type == "windows") {
[09:29:22.050]                 old_names <- names(...future.oldEnvVars)
[09:29:22.050]                 envs <- base::Sys.getenv()
[09:29:22.050]                 names <- names(envs)
[09:29:22.050]                 common <- intersect(names, old_names)
[09:29:22.050]                 added <- setdiff(names, old_names)
[09:29:22.050]                 removed <- setdiff(old_names, names)
[09:29:22.050]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.050]                   envs[common]]
[09:29:22.050]                 NAMES <- toupper(changed)
[09:29:22.050]                 args <- list()
[09:29:22.050]                 for (kk in seq_along(NAMES)) {
[09:29:22.050]                   name <- changed[[kk]]
[09:29:22.050]                   NAME <- NAMES[[kk]]
[09:29:22.050]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.050]                     next
[09:29:22.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.050]                 }
[09:29:22.050]                 NAMES <- toupper(added)
[09:29:22.050]                 for (kk in seq_along(NAMES)) {
[09:29:22.050]                   name <- added[[kk]]
[09:29:22.050]                   NAME <- NAMES[[kk]]
[09:29:22.050]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.050]                     next
[09:29:22.050]                   args[[name]] <- ""
[09:29:22.050]                 }
[09:29:22.050]                 NAMES <- toupper(removed)
[09:29:22.050]                 for (kk in seq_along(NAMES)) {
[09:29:22.050]                   name <- removed[[kk]]
[09:29:22.050]                   NAME <- NAMES[[kk]]
[09:29:22.050]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.050]                     next
[09:29:22.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.050]                 }
[09:29:22.050]                 if (length(args) > 0) 
[09:29:22.050]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.050]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.050]             }
[09:29:22.050]             else {
[09:29:22.050]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.050]             }
[09:29:22.050]             {
[09:29:22.050]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.050]                   0L) {
[09:29:22.050]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.050]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.050]                   base::options(opts)
[09:29:22.050]                 }
[09:29:22.050]                 {
[09:29:22.050]                   {
[09:29:22.050]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.050]                     NULL
[09:29:22.050]                   }
[09:29:22.050]                   options(future.plan = NULL)
[09:29:22.050]                   if (is.na(NA_character_)) 
[09:29:22.050]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.050]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.050]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.050]                     .init = FALSE)
[09:29:22.050]                 }
[09:29:22.050]             }
[09:29:22.050]         }
[09:29:22.050]     })
[09:29:22.050]     if (TRUE) {
[09:29:22.050]         base::sink(type = "output", split = FALSE)
[09:29:22.050]         if (TRUE) {
[09:29:22.050]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.050]         }
[09:29:22.050]         else {
[09:29:22.050]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.050]         }
[09:29:22.050]         base::close(...future.stdout)
[09:29:22.050]         ...future.stdout <- NULL
[09:29:22.050]     }
[09:29:22.050]     ...future.result$conditions <- ...future.conditions
[09:29:22.050]     ...future.result$finished <- base::Sys.time()
[09:29:22.050]     ...future.result
[09:29:22.050] }
[09:29:22.053] assign_globals() ...
[09:29:22.054] List of 5
[09:29:22.054]  $ ...future.FUN            :function (...)  
[09:29:22.054]  $ future.call.arguments    : list()
[09:29:22.054]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.054]  $ ...future.elements_ii    :List of 3
[09:29:22.054]   ..$ : int 0
[09:29:22.054]   ..$ : int 0
[09:29:22.054]   ..$ : int 0
[09:29:22.054]  $ ...future.seeds_ii       :List of 3
[09:29:22.054]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[09:29:22.054]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[09:29:22.054]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[09:29:22.054]  $ ...future.globals.maxSize: NULL
[09:29:22.054]  - attr(*, "where")=List of 5
[09:29:22.054]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.054]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.054]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.054]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.054]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.054]  - attr(*, "resolved")= logi FALSE
[09:29:22.054]  - attr(*, "total_size")= num 616
[09:29:22.054]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.054]  - attr(*, "already-done")= logi TRUE
[09:29:22.062] - reassign environment for ‘...future.FUN’
[09:29:22.062] - copied ‘...future.FUN’ to environment
[09:29:22.062] - copied ‘future.call.arguments’ to environment
[09:29:22.063] - copied ‘...future.elements_ii’ to environment
[09:29:22.063] - copied ‘...future.seeds_ii’ to environment
[09:29:22.063] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.063] assign_globals() ... done
[09:29:22.063] requestCore(): workers = 2
[09:29:22.065] MulticoreFuture started
[09:29:22.065] - Launch lazy future ... done
[09:29:22.066] run() for ‘MulticoreFuture’ ... done
[09:29:22.066] Created future:
[09:29:22.066] plan(): Setting new future strategy stack:
[09:29:22.066] List of future strategies:
[09:29:22.066] 1. sequential:
[09:29:22.066]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.066]    - tweaked: FALSE
[09:29:22.066]    - call: NULL
[09:29:22.067] plan(): nbrOfWorkers() = 1
[09:29:22.072] plan(): Setting new future strategy stack:
[09:29:22.073] List of future strategies:
[09:29:22.073] 1. multicore:
[09:29:22.073]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.073]    - tweaked: FALSE
[09:29:22.073]    - call: plan(strategy)
[09:29:22.078] plan(): nbrOfWorkers() = 2
[09:29:22.066] MulticoreFuture:
[09:29:22.066] Label: ‘future_replicate-2’
[09:29:22.066] Expression:
[09:29:22.066] {
[09:29:22.066]     do.call(function(...) {
[09:29:22.066]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.066]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.066]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.066]             on.exit(options(oopts), add = TRUE)
[09:29:22.066]         }
[09:29:22.066]         {
[09:29:22.066]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.066]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.066]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.066]                   envir = globalenv(), inherits = FALSE)
[09:29:22.066]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.066]             })
[09:29:22.066]         }
[09:29:22.066]     }, args = future.call.arguments)
[09:29:22.066] }
[09:29:22.066] Lazy evaluation: FALSE
[09:29:22.066] Asynchronous evaluation: TRUE
[09:29:22.066] Local evaluation: TRUE
[09:29:22.066] Environment: R_GlobalEnv
[09:29:22.066] Capture standard output: TRUE
[09:29:22.066] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.066] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.066] Packages: <none>
[09:29:22.066] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.066] Resolved: TRUE
[09:29:22.066] Value: <not collected>
[09:29:22.066] Conditions captured: <none>
[09:29:22.066] Early signaling: FALSE
[09:29:22.066] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.066] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.079] Chunk #2 of 2 ... DONE
[09:29:22.079] Launching 2 futures (chunks) ... DONE
[09:29:22.079] Resolving 2 futures (chunks) ...
[09:29:22.080] resolve() on list ...
[09:29:22.080]  recursive: 0
[09:29:22.080]  length: 2
[09:29:22.080] 
[09:29:22.081] Future #1
[09:29:22.081] result() for MulticoreFuture ...
[09:29:22.082] result() for MulticoreFuture ...
[09:29:22.082] result() for MulticoreFuture ... done
[09:29:22.082] result() for MulticoreFuture ... done
[09:29:22.082] result() for MulticoreFuture ...
[09:29:22.083] result() for MulticoreFuture ... done
[09:29:22.083] signalConditionsASAP(MulticoreFuture, pos=1) ...
[09:29:22.083] - nx: 2
[09:29:22.083] - relay: TRUE
[09:29:22.083] - stdout: TRUE
[09:29:22.083] - signal: TRUE
[09:29:22.084] - resignal: FALSE
[09:29:22.084] - force: TRUE
[09:29:22.084] - relayed: [n=2] FALSE, FALSE
[09:29:22.084] - queued futures: [n=2] FALSE, FALSE
[09:29:22.084]  - until=1
[09:29:22.084]  - relaying element #1
[09:29:22.085] result() for MulticoreFuture ...
[09:29:22.085] result() for MulticoreFuture ... done
[09:29:22.085] result() for MulticoreFuture ...
[09:29:22.085] result() for MulticoreFuture ... done
[09:29:22.085] result() for MulticoreFuture ...
[09:29:22.085] result() for MulticoreFuture ... done
[09:29:22.086] result() for MulticoreFuture ...
[09:29:22.086] result() for MulticoreFuture ... done
[09:29:22.086] - relayed: [n=2] TRUE, FALSE
[09:29:22.086] - queued futures: [n=2] TRUE, FALSE
[09:29:22.086] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[09:29:22.086]  length: 1 (resolved future 1)
[09:29:22.087] Future #2
[09:29:22.087] result() for MulticoreFuture ...
[09:29:22.087] result() for MulticoreFuture ...
[09:29:22.088] result() for MulticoreFuture ... done
[09:29:22.088] result() for MulticoreFuture ... done
[09:29:22.088] result() for MulticoreFuture ...
[09:29:22.088] result() for MulticoreFuture ... done
[09:29:22.088] signalConditionsASAP(MulticoreFuture, pos=2) ...
[09:29:22.088] - nx: 2
[09:29:22.088] - relay: TRUE
[09:29:22.089] - stdout: TRUE
[09:29:22.089] - signal: TRUE
[09:29:22.089] - resignal: FALSE
[09:29:22.089] - force: TRUE
[09:29:22.089] - relayed: [n=2] TRUE, FALSE
[09:29:22.089] - queued futures: [n=2] TRUE, FALSE
[09:29:22.089]  - until=2
[09:29:22.089]  - relaying element #2
[09:29:22.090] result() for MulticoreFuture ...
[09:29:22.090] result() for MulticoreFuture ... done
[09:29:22.090] result() for MulticoreFuture ...
[09:29:22.090] result() for MulticoreFuture ... done
[09:29:22.090] result() for MulticoreFuture ...
[09:29:22.090] result() for MulticoreFuture ... done
[09:29:22.090] result() for MulticoreFuture ...
[09:29:22.090] result() for MulticoreFuture ... done
[09:29:22.091] - relayed: [n=2] TRUE, TRUE
[09:29:22.091] - queued futures: [n=2] TRUE, TRUE
[09:29:22.091] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[09:29:22.091]  length: 0 (resolved future 2)
[09:29:22.091] Relaying remaining futures
[09:29:22.091] signalConditionsASAP(NULL, pos=0) ...
[09:29:22.091] - nx: 2
[09:29:22.091] - relay: TRUE
[09:29:22.091] - stdout: TRUE
[09:29:22.091] - signal: TRUE
[09:29:22.092] - resignal: FALSE
[09:29:22.092] - force: TRUE
[09:29:22.092] - relayed: [n=2] TRUE, TRUE
[09:29:22.092] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:22.092] - relayed: [n=2] TRUE, TRUE
[09:29:22.092] - queued futures: [n=2] TRUE, TRUE
[09:29:22.092] signalConditionsASAP(NULL, pos=0) ... done
[09:29:22.092] resolve() on list ... DONE
[09:29:22.093] result() for MulticoreFuture ...
[09:29:22.093] result() for MulticoreFuture ... done
[09:29:22.093] result() for MulticoreFuture ...
[09:29:22.093] result() for MulticoreFuture ... done
[09:29:22.093] result() for MulticoreFuture ...
[09:29:22.093] result() for MulticoreFuture ... done
[09:29:22.093] result() for MulticoreFuture ...
[09:29:22.093] result() for MulticoreFuture ... done
[09:29:22.094]  - Number of value chunks collected: 2
[09:29:22.094] Resolving 2 futures (chunks) ... DONE
[09:29:22.094] Reducing values from 2 chunks ...
[09:29:22.094]  - Number of values collected after concatenation: 5
[09:29:22.094]  - Number of values expected: 5
[09:29:22.094] Reducing values from 2 chunks ... DONE
[09:29:22.094] future_lapply() ... DONE
[09:29:22.094] future_lapply() ...
[09:29:22.095] Generating random seeds ...
[09:29:22.095] Generating random seed streams for 5 elements ...
[09:29:22.095] Generating random seed streams for 5 elements ... DONE
[09:29:22.095] Generating random seeds ... DONE
[09:29:22.095] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:22.100] Number of chunks: 2
[09:29:22.100] getGlobalsAndPackagesXApply() ...
[09:29:22.100]  - future.globals: TRUE
[09:29:22.100] getGlobalsAndPackages() ...
[09:29:22.101] Searching for globals...
[09:29:22.102] - globals found: [2] ‘FUN’, ‘sample’
[09:29:22.102] Searching for globals ... DONE
[09:29:22.102] Resolving globals: FALSE
[09:29:22.102] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:22.103] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:22.103] - globals: [1] ‘FUN’
[09:29:22.103] 
[09:29:22.103] getGlobalsAndPackages() ... DONE
[09:29:22.103]  - globals found/used: [n=1] ‘FUN’
[09:29:22.103]  - needed namespaces: [n=0] 
[09:29:22.103] Finding globals ... DONE
[09:29:22.104]  - use_args: TRUE
[09:29:22.104]  - Getting '...' globals ...
[09:29:22.104] resolve() on list ...
[09:29:22.104]  recursive: 0
[09:29:22.104]  length: 1
[09:29:22.104]  elements: ‘...’
[09:29:22.105]  length: 0 (resolved future 1)
[09:29:22.105] resolve() on list ... DONE
[09:29:22.105]    - '...' content: [n=0] 
[09:29:22.105] List of 1
[09:29:22.105]  $ ...: list()
[09:29:22.105]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.105]  - attr(*, "where")=List of 1
[09:29:22.105]   ..$ ...:<environment: 0x55d1cb347b68> 
[09:29:22.105]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.105]  - attr(*, "resolved")= logi TRUE
[09:29:22.105]  - attr(*, "total_size")= num NA
[09:29:22.108]  - Getting '...' globals ... DONE
[09:29:22.108] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:22.108] List of 2
[09:29:22.108]  $ ...future.FUN:function (...)  
[09:29:22.108]  $ ...          : list()
[09:29:22.108]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.108]  - attr(*, "where")=List of 2
[09:29:22.108]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:22.108]   ..$ ...          :<environment: 0x55d1cb347b68> 
[09:29:22.108]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.108]  - attr(*, "resolved")= logi FALSE
[09:29:22.108]  - attr(*, "total_size")= num 616
[09:29:22.113] Packages to be attached in all futures: [n=0] 
[09:29:22.113] getGlobalsAndPackagesXApply() ... DONE
[09:29:22.113] Number of futures (= number of chunks): 2
[09:29:22.113] Launching 2 futures (chunks) ...
[09:29:22.113] Chunk #1 of 2 ...
[09:29:22.113]  - Finding globals in 'X' for chunk #1 ...
[09:29:22.114] getGlobalsAndPackages() ...
[09:29:22.114] Searching for globals...
[09:29:22.114] 
[09:29:22.114] Searching for globals ... DONE
[09:29:22.114] - globals: [0] <none>
[09:29:22.114] getGlobalsAndPackages() ... DONE
[09:29:22.114]    + additional globals found: [n=0] 
[09:29:22.114]    + additional namespaces needed: [n=0] 
[09:29:22.114]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:22.115]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.115]  - seeds: [2] <seeds>
[09:29:22.115]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.115] getGlobalsAndPackages() ...
[09:29:22.115] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.115] Resolving globals: FALSE
[09:29:22.115] Tweak future expression to call with '...' arguments ...
[09:29:22.115] {
[09:29:22.115]     do.call(function(...) {
[09:29:22.115]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.115]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.115]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.115]             on.exit(options(oopts), add = TRUE)
[09:29:22.115]         }
[09:29:22.115]         {
[09:29:22.115]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.115]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.115]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.115]                   envir = globalenv(), inherits = FALSE)
[09:29:22.115]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.115]             })
[09:29:22.115]         }
[09:29:22.115]     }, args = future.call.arguments)
[09:29:22.115] }
[09:29:22.116] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.116] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.116] 
[09:29:22.116] getGlobalsAndPackages() ... DONE
[09:29:22.116] run() for ‘Future’ ...
[09:29:22.117] - state: ‘created’
[09:29:22.117] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.120] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.121] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.121]   - Field: ‘label’
[09:29:22.121]   - Field: ‘local’
[09:29:22.121]   - Field: ‘owner’
[09:29:22.121]   - Field: ‘envir’
[09:29:22.121]   - Field: ‘workers’
[09:29:22.121]   - Field: ‘packages’
[09:29:22.121]   - Field: ‘gc’
[09:29:22.122]   - Field: ‘job’
[09:29:22.122]   - Field: ‘conditions’
[09:29:22.122]   - Field: ‘expr’
[09:29:22.122]   - Field: ‘uuid’
[09:29:22.122]   - Field: ‘seed’
[09:29:22.122]   - Field: ‘version’
[09:29:22.122]   - Field: ‘result’
[09:29:22.122]   - Field: ‘asynchronous’
[09:29:22.122]   - Field: ‘calls’
[09:29:22.123]   - Field: ‘globals’
[09:29:22.123]   - Field: ‘stdout’
[09:29:22.123]   - Field: ‘earlySignal’
[09:29:22.123]   - Field: ‘lazy’
[09:29:22.123]   - Field: ‘state’
[09:29:22.123] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.123] - Launch lazy future ...
[09:29:22.123] Packages needed by the future expression (n = 0): <none>
[09:29:22.124] Packages needed by future strategies (n = 0): <none>
[09:29:22.124] {
[09:29:22.124]     {
[09:29:22.124]         {
[09:29:22.124]             ...future.startTime <- base::Sys.time()
[09:29:22.124]             {
[09:29:22.124]                 {
[09:29:22.124]                   {
[09:29:22.124]                     {
[09:29:22.124]                       base::local({
[09:29:22.124]                         has_future <- base::requireNamespace("future", 
[09:29:22.124]                           quietly = TRUE)
[09:29:22.124]                         if (has_future) {
[09:29:22.124]                           ns <- base::getNamespace("future")
[09:29:22.124]                           version <- ns[[".package"]][["version"]]
[09:29:22.124]                           if (is.null(version)) 
[09:29:22.124]                             version <- utils::packageVersion("future")
[09:29:22.124]                         }
[09:29:22.124]                         else {
[09:29:22.124]                           version <- NULL
[09:29:22.124]                         }
[09:29:22.124]                         if (!has_future || version < "1.8.0") {
[09:29:22.124]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.124]                             "", base::R.version$version.string), 
[09:29:22.124]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.124]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.124]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.124]                               "release", "version")], collapse = " "), 
[09:29:22.124]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.124]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.124]                             info)
[09:29:22.124]                           info <- base::paste(info, collapse = "; ")
[09:29:22.124]                           if (!has_future) {
[09:29:22.124]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.124]                               info)
[09:29:22.124]                           }
[09:29:22.124]                           else {
[09:29:22.124]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.124]                               info, version)
[09:29:22.124]                           }
[09:29:22.124]                           base::stop(msg)
[09:29:22.124]                         }
[09:29:22.124]                       })
[09:29:22.124]                     }
[09:29:22.124]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.124]                     base::options(mc.cores = 1L)
[09:29:22.124]                   }
[09:29:22.124]                   ...future.strategy.old <- future::plan("list")
[09:29:22.124]                   options(future.plan = NULL)
[09:29:22.124]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.124]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.124]                 }
[09:29:22.124]                 ...future.workdir <- getwd()
[09:29:22.124]             }
[09:29:22.124]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.124]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.124]         }
[09:29:22.124]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.124]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.124]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.124]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.124]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.124]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.124]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.124]             base::names(...future.oldOptions))
[09:29:22.124]     }
[09:29:22.124]     if (FALSE) {
[09:29:22.124]     }
[09:29:22.124]     else {
[09:29:22.124]         if (TRUE) {
[09:29:22.124]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.124]                 open = "w")
[09:29:22.124]         }
[09:29:22.124]         else {
[09:29:22.124]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.124]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.124]         }
[09:29:22.124]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.124]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.124]             base::sink(type = "output", split = FALSE)
[09:29:22.124]             base::close(...future.stdout)
[09:29:22.124]         }, add = TRUE)
[09:29:22.124]     }
[09:29:22.124]     ...future.frame <- base::sys.nframe()
[09:29:22.124]     ...future.conditions <- base::list()
[09:29:22.124]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.124]     if (FALSE) {
[09:29:22.124]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.124]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.124]     }
[09:29:22.124]     ...future.result <- base::tryCatch({
[09:29:22.124]         base::withCallingHandlers({
[09:29:22.124]             ...future.value <- base::withVisible(base::local({
[09:29:22.124]                 withCallingHandlers({
[09:29:22.124]                   {
[09:29:22.124]                     do.call(function(...) {
[09:29:22.124]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.124]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.124]                         ...future.globals.maxSize)) {
[09:29:22.124]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.124]                         on.exit(options(oopts), add = TRUE)
[09:29:22.124]                       }
[09:29:22.124]                       {
[09:29:22.124]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.124]                           FUN = function(jj) {
[09:29:22.124]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.124]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.124]                               envir = globalenv(), inherits = FALSE)
[09:29:22.124]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.124]                           })
[09:29:22.124]                       }
[09:29:22.124]                     }, args = future.call.arguments)
[09:29:22.124]                   }
[09:29:22.124]                 }, immediateCondition = function(cond) {
[09:29:22.124]                   save_rds <- function (object, pathname, ...) 
[09:29:22.124]                   {
[09:29:22.124]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.124]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.124]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.124]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.124]                         fi_tmp[["mtime"]])
[09:29:22.124]                     }
[09:29:22.124]                     tryCatch({
[09:29:22.124]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.124]                     }, error = function(ex) {
[09:29:22.124]                       msg <- conditionMessage(ex)
[09:29:22.124]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.124]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.124]                         fi_tmp[["mtime"]], msg)
[09:29:22.124]                       ex$message <- msg
[09:29:22.124]                       stop(ex)
[09:29:22.124]                     })
[09:29:22.124]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.124]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.124]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.124]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.124]                       fi <- file.info(pathname)
[09:29:22.124]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.124]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.124]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.124]                         fi[["size"]], fi[["mtime"]])
[09:29:22.124]                       stop(msg)
[09:29:22.124]                     }
[09:29:22.124]                     invisible(pathname)
[09:29:22.124]                   }
[09:29:22.124]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.124]                     rootPath = tempdir()) 
[09:29:22.124]                   {
[09:29:22.124]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.124]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.124]                       tmpdir = path, fileext = ".rds")
[09:29:22.124]                     save_rds(obj, file)
[09:29:22.124]                   }
[09:29:22.124]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.124]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.124]                   {
[09:29:22.124]                     inherits <- base::inherits
[09:29:22.124]                     invokeRestart <- base::invokeRestart
[09:29:22.124]                     is.null <- base::is.null
[09:29:22.124]                     muffled <- FALSE
[09:29:22.124]                     if (inherits(cond, "message")) {
[09:29:22.124]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.124]                       if (muffled) 
[09:29:22.124]                         invokeRestart("muffleMessage")
[09:29:22.124]                     }
[09:29:22.124]                     else if (inherits(cond, "warning")) {
[09:29:22.124]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.124]                       if (muffled) 
[09:29:22.124]                         invokeRestart("muffleWarning")
[09:29:22.124]                     }
[09:29:22.124]                     else if (inherits(cond, "condition")) {
[09:29:22.124]                       if (!is.null(pattern)) {
[09:29:22.124]                         computeRestarts <- base::computeRestarts
[09:29:22.124]                         grepl <- base::grepl
[09:29:22.124]                         restarts <- computeRestarts(cond)
[09:29:22.124]                         for (restart in restarts) {
[09:29:22.124]                           name <- restart$name
[09:29:22.124]                           if (is.null(name)) 
[09:29:22.124]                             next
[09:29:22.124]                           if (!grepl(pattern, name)) 
[09:29:22.124]                             next
[09:29:22.124]                           invokeRestart(restart)
[09:29:22.124]                           muffled <- TRUE
[09:29:22.124]                           break
[09:29:22.124]                         }
[09:29:22.124]                       }
[09:29:22.124]                     }
[09:29:22.124]                     invisible(muffled)
[09:29:22.124]                   }
[09:29:22.124]                   muffleCondition(cond)
[09:29:22.124]                 })
[09:29:22.124]             }))
[09:29:22.124]             future::FutureResult(value = ...future.value$value, 
[09:29:22.124]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.124]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.124]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.124]                     ...future.globalenv.names))
[09:29:22.124]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.124]         }, condition = base::local({
[09:29:22.124]             c <- base::c
[09:29:22.124]             inherits <- base::inherits
[09:29:22.124]             invokeRestart <- base::invokeRestart
[09:29:22.124]             length <- base::length
[09:29:22.124]             list <- base::list
[09:29:22.124]             seq.int <- base::seq.int
[09:29:22.124]             signalCondition <- base::signalCondition
[09:29:22.124]             sys.calls <- base::sys.calls
[09:29:22.124]             `[[` <- base::`[[`
[09:29:22.124]             `+` <- base::`+`
[09:29:22.124]             `<<-` <- base::`<<-`
[09:29:22.124]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.124]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.124]                   3L)]
[09:29:22.124]             }
[09:29:22.124]             function(cond) {
[09:29:22.124]                 is_error <- inherits(cond, "error")
[09:29:22.124]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.124]                   NULL)
[09:29:22.124]                 if (is_error) {
[09:29:22.124]                   sessionInformation <- function() {
[09:29:22.124]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.124]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.124]                       search = base::search(), system = base::Sys.info())
[09:29:22.124]                   }
[09:29:22.124]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.124]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.124]                     cond$call), session = sessionInformation(), 
[09:29:22.124]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.124]                   signalCondition(cond)
[09:29:22.124]                 }
[09:29:22.124]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.124]                 "immediateCondition"))) {
[09:29:22.124]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.124]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.124]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.124]                   if (TRUE && !signal) {
[09:29:22.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.124]                     {
[09:29:22.124]                       inherits <- base::inherits
[09:29:22.124]                       invokeRestart <- base::invokeRestart
[09:29:22.124]                       is.null <- base::is.null
[09:29:22.124]                       muffled <- FALSE
[09:29:22.124]                       if (inherits(cond, "message")) {
[09:29:22.124]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.124]                         if (muffled) 
[09:29:22.124]                           invokeRestart("muffleMessage")
[09:29:22.124]                       }
[09:29:22.124]                       else if (inherits(cond, "warning")) {
[09:29:22.124]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.124]                         if (muffled) 
[09:29:22.124]                           invokeRestart("muffleWarning")
[09:29:22.124]                       }
[09:29:22.124]                       else if (inherits(cond, "condition")) {
[09:29:22.124]                         if (!is.null(pattern)) {
[09:29:22.124]                           computeRestarts <- base::computeRestarts
[09:29:22.124]                           grepl <- base::grepl
[09:29:22.124]                           restarts <- computeRestarts(cond)
[09:29:22.124]                           for (restart in restarts) {
[09:29:22.124]                             name <- restart$name
[09:29:22.124]                             if (is.null(name)) 
[09:29:22.124]                               next
[09:29:22.124]                             if (!grepl(pattern, name)) 
[09:29:22.124]                               next
[09:29:22.124]                             invokeRestart(restart)
[09:29:22.124]                             muffled <- TRUE
[09:29:22.124]                             break
[09:29:22.124]                           }
[09:29:22.124]                         }
[09:29:22.124]                       }
[09:29:22.124]                       invisible(muffled)
[09:29:22.124]                     }
[09:29:22.124]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.124]                   }
[09:29:22.124]                 }
[09:29:22.124]                 else {
[09:29:22.124]                   if (TRUE) {
[09:29:22.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.124]                     {
[09:29:22.124]                       inherits <- base::inherits
[09:29:22.124]                       invokeRestart <- base::invokeRestart
[09:29:22.124]                       is.null <- base::is.null
[09:29:22.124]                       muffled <- FALSE
[09:29:22.124]                       if (inherits(cond, "message")) {
[09:29:22.124]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.124]                         if (muffled) 
[09:29:22.124]                           invokeRestart("muffleMessage")
[09:29:22.124]                       }
[09:29:22.124]                       else if (inherits(cond, "warning")) {
[09:29:22.124]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.124]                         if (muffled) 
[09:29:22.124]                           invokeRestart("muffleWarning")
[09:29:22.124]                       }
[09:29:22.124]                       else if (inherits(cond, "condition")) {
[09:29:22.124]                         if (!is.null(pattern)) {
[09:29:22.124]                           computeRestarts <- base::computeRestarts
[09:29:22.124]                           grepl <- base::grepl
[09:29:22.124]                           restarts <- computeRestarts(cond)
[09:29:22.124]                           for (restart in restarts) {
[09:29:22.124]                             name <- restart$name
[09:29:22.124]                             if (is.null(name)) 
[09:29:22.124]                               next
[09:29:22.124]                             if (!grepl(pattern, name)) 
[09:29:22.124]                               next
[09:29:22.124]                             invokeRestart(restart)
[09:29:22.124]                             muffled <- TRUE
[09:29:22.124]                             break
[09:29:22.124]                           }
[09:29:22.124]                         }
[09:29:22.124]                       }
[09:29:22.124]                       invisible(muffled)
[09:29:22.124]                     }
[09:29:22.124]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.124]                   }
[09:29:22.124]                 }
[09:29:22.124]             }
[09:29:22.124]         }))
[09:29:22.124]     }, error = function(ex) {
[09:29:22.124]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.124]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.124]                 ...future.rng), started = ...future.startTime, 
[09:29:22.124]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.124]             version = "1.8"), class = "FutureResult")
[09:29:22.124]     }, finally = {
[09:29:22.124]         if (!identical(...future.workdir, getwd())) 
[09:29:22.124]             setwd(...future.workdir)
[09:29:22.124]         {
[09:29:22.124]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.124]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.124]             }
[09:29:22.124]             base::options(...future.oldOptions)
[09:29:22.124]             if (.Platform$OS.type == "windows") {
[09:29:22.124]                 old_names <- names(...future.oldEnvVars)
[09:29:22.124]                 envs <- base::Sys.getenv()
[09:29:22.124]                 names <- names(envs)
[09:29:22.124]                 common <- intersect(names, old_names)
[09:29:22.124]                 added <- setdiff(names, old_names)
[09:29:22.124]                 removed <- setdiff(old_names, names)
[09:29:22.124]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.124]                   envs[common]]
[09:29:22.124]                 NAMES <- toupper(changed)
[09:29:22.124]                 args <- list()
[09:29:22.124]                 for (kk in seq_along(NAMES)) {
[09:29:22.124]                   name <- changed[[kk]]
[09:29:22.124]                   NAME <- NAMES[[kk]]
[09:29:22.124]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.124]                     next
[09:29:22.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.124]                 }
[09:29:22.124]                 NAMES <- toupper(added)
[09:29:22.124]                 for (kk in seq_along(NAMES)) {
[09:29:22.124]                   name <- added[[kk]]
[09:29:22.124]                   NAME <- NAMES[[kk]]
[09:29:22.124]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.124]                     next
[09:29:22.124]                   args[[name]] <- ""
[09:29:22.124]                 }
[09:29:22.124]                 NAMES <- toupper(removed)
[09:29:22.124]                 for (kk in seq_along(NAMES)) {
[09:29:22.124]                   name <- removed[[kk]]
[09:29:22.124]                   NAME <- NAMES[[kk]]
[09:29:22.124]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.124]                     next
[09:29:22.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.124]                 }
[09:29:22.124]                 if (length(args) > 0) 
[09:29:22.124]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.124]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.124]             }
[09:29:22.124]             else {
[09:29:22.124]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.124]             }
[09:29:22.124]             {
[09:29:22.124]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.124]                   0L) {
[09:29:22.124]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.124]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.124]                   base::options(opts)
[09:29:22.124]                 }
[09:29:22.124]                 {
[09:29:22.124]                   {
[09:29:22.124]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.124]                     NULL
[09:29:22.124]                   }
[09:29:22.124]                   options(future.plan = NULL)
[09:29:22.124]                   if (is.na(NA_character_)) 
[09:29:22.124]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.124]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.124]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.124]                     .init = FALSE)
[09:29:22.124]                 }
[09:29:22.124]             }
[09:29:22.124]         }
[09:29:22.124]     })
[09:29:22.124]     if (TRUE) {
[09:29:22.124]         base::sink(type = "output", split = FALSE)
[09:29:22.124]         if (TRUE) {
[09:29:22.124]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.124]         }
[09:29:22.124]         else {
[09:29:22.124]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.124]         }
[09:29:22.124]         base::close(...future.stdout)
[09:29:22.124]         ...future.stdout <- NULL
[09:29:22.124]     }
[09:29:22.124]     ...future.result$conditions <- ...future.conditions
[09:29:22.124]     ...future.result$finished <- base::Sys.time()
[09:29:22.124]     ...future.result
[09:29:22.124] }
[09:29:22.126] assign_globals() ...
[09:29:22.126] List of 5
[09:29:22.126]  $ ...future.FUN            :function (...)  
[09:29:22.126]  $ future.call.arguments    : list()
[09:29:22.126]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.126]  $ ...future.elements_ii    :List of 2
[09:29:22.126]   ..$ : int 0
[09:29:22.126]   ..$ : int 0
[09:29:22.126]  $ ...future.seeds_ii       :List of 2
[09:29:22.126]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[09:29:22.126]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[09:29:22.126]  $ ...future.globals.maxSize: NULL
[09:29:22.126]  - attr(*, "where")=List of 5
[09:29:22.126]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.126]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.126]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.126]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.126]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.126]  - attr(*, "resolved")= logi FALSE
[09:29:22.126]  - attr(*, "total_size")= num 616
[09:29:22.126]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.126]  - attr(*, "already-done")= logi TRUE
[09:29:22.132] - reassign environment for ‘...future.FUN’
[09:29:22.132] - copied ‘...future.FUN’ to environment
[09:29:22.132] - copied ‘future.call.arguments’ to environment
[09:29:22.132] - copied ‘...future.elements_ii’ to environment
[09:29:22.132] - copied ‘...future.seeds_ii’ to environment
[09:29:22.132] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.132] assign_globals() ... done
[09:29:22.133] requestCore(): workers = 2
[09:29:22.135] MulticoreFuture started
[09:29:22.135] - Launch lazy future ... done
[09:29:22.135] run() for ‘MulticoreFuture’ ... done
[09:29:22.135] Created future:
[09:29:22.136] plan(): Setting new future strategy stack:
[09:29:22.136] List of future strategies:
[09:29:22.136] 1. sequential:
[09:29:22.136]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.136]    - tweaked: FALSE
[09:29:22.136]    - call: NULL
[09:29:22.137] plan(): nbrOfWorkers() = 1
[09:29:22.140] plan(): Setting new future strategy stack:
[09:29:22.140] List of future strategies:
[09:29:22.140] 1. multicore:
[09:29:22.140]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.140]    - tweaked: FALSE
[09:29:22.140]    - call: plan(strategy)
[09:29:22.145] plan(): nbrOfWorkers() = 2
[09:29:22.135] MulticoreFuture:
[09:29:22.135] Label: ‘future_replicate-1’
[09:29:22.135] Expression:
[09:29:22.135] {
[09:29:22.135]     do.call(function(...) {
[09:29:22.135]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.135]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.135]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.135]             on.exit(options(oopts), add = TRUE)
[09:29:22.135]         }
[09:29:22.135]         {
[09:29:22.135]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.135]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.135]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.135]                   envir = globalenv(), inherits = FALSE)
[09:29:22.135]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.135]             })
[09:29:22.135]         }
[09:29:22.135]     }, args = future.call.arguments)
[09:29:22.135] }
[09:29:22.135] Lazy evaluation: FALSE
[09:29:22.135] Asynchronous evaluation: TRUE
[09:29:22.135] Local evaluation: TRUE
[09:29:22.135] Environment: R_GlobalEnv
[09:29:22.135] Capture standard output: TRUE
[09:29:22.135] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.135] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.135] Packages: <none>
[09:29:22.135] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.135] Resolved: TRUE
[09:29:22.135] Value: <not collected>
[09:29:22.135] Conditions captured: <none>
[09:29:22.135] Early signaling: FALSE
[09:29:22.135] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.135] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.146] Chunk #1 of 2 ... DONE
[09:29:22.146] Chunk #2 of 2 ...
[09:29:22.146]  - Finding globals in 'X' for chunk #2 ...
[09:29:22.147] getGlobalsAndPackages() ...
[09:29:22.147] Searching for globals...
[09:29:22.147] 
[09:29:22.147] Searching for globals ... DONE
[09:29:22.147] - globals: [0] <none>
[09:29:22.148] getGlobalsAndPackages() ... DONE
[09:29:22.148]    + additional globals found: [n=0] 
[09:29:22.148]    + additional namespaces needed: [n=0] 
[09:29:22.148]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:22.148]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.148]  - seeds: [3] <seeds>
[09:29:22.148]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.149] getGlobalsAndPackages() ...
[09:29:22.149] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.149] Resolving globals: FALSE
[09:29:22.149] Tweak future expression to call with '...' arguments ...
[09:29:22.149] {
[09:29:22.149]     do.call(function(...) {
[09:29:22.149]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.149]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.149]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.149]             on.exit(options(oopts), add = TRUE)
[09:29:22.149]         }
[09:29:22.149]         {
[09:29:22.149]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.149]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.149]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.149]                   envir = globalenv(), inherits = FALSE)
[09:29:22.149]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.149]             })
[09:29:22.149]         }
[09:29:22.149]     }, args = future.call.arguments)
[09:29:22.149] }
[09:29:22.150] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.150] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.154] 
[09:29:22.154] getGlobalsAndPackages() ... DONE
[09:29:22.154] run() for ‘Future’ ...
[09:29:22.155] - state: ‘created’
[09:29:22.155] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.160] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.160] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.160]   - Field: ‘label’
[09:29:22.160]   - Field: ‘local’
[09:29:22.160]   - Field: ‘owner’
[09:29:22.161]   - Field: ‘envir’
[09:29:22.161]   - Field: ‘workers’
[09:29:22.161]   - Field: ‘packages’
[09:29:22.161]   - Field: ‘gc’
[09:29:22.161]   - Field: ‘job’
[09:29:22.161]   - Field: ‘conditions’
[09:29:22.162]   - Field: ‘expr’
[09:29:22.162]   - Field: ‘uuid’
[09:29:22.162]   - Field: ‘seed’
[09:29:22.162]   - Field: ‘version’
[09:29:22.162]   - Field: ‘result’
[09:29:22.162]   - Field: ‘asynchronous’
[09:29:22.162]   - Field: ‘calls’
[09:29:22.163]   - Field: ‘globals’
[09:29:22.163]   - Field: ‘stdout’
[09:29:22.163]   - Field: ‘earlySignal’
[09:29:22.163]   - Field: ‘lazy’
[09:29:22.163]   - Field: ‘state’
[09:29:22.163] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.163] - Launch lazy future ...
[09:29:22.164] Packages needed by the future expression (n = 0): <none>
[09:29:22.164] Packages needed by future strategies (n = 0): <none>
[09:29:22.165] {
[09:29:22.165]     {
[09:29:22.165]         {
[09:29:22.165]             ...future.startTime <- base::Sys.time()
[09:29:22.165]             {
[09:29:22.165]                 {
[09:29:22.165]                   {
[09:29:22.165]                     {
[09:29:22.165]                       base::local({
[09:29:22.165]                         has_future <- base::requireNamespace("future", 
[09:29:22.165]                           quietly = TRUE)
[09:29:22.165]                         if (has_future) {
[09:29:22.165]                           ns <- base::getNamespace("future")
[09:29:22.165]                           version <- ns[[".package"]][["version"]]
[09:29:22.165]                           if (is.null(version)) 
[09:29:22.165]                             version <- utils::packageVersion("future")
[09:29:22.165]                         }
[09:29:22.165]                         else {
[09:29:22.165]                           version <- NULL
[09:29:22.165]                         }
[09:29:22.165]                         if (!has_future || version < "1.8.0") {
[09:29:22.165]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.165]                             "", base::R.version$version.string), 
[09:29:22.165]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.165]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.165]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.165]                               "release", "version")], collapse = " "), 
[09:29:22.165]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.165]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.165]                             info)
[09:29:22.165]                           info <- base::paste(info, collapse = "; ")
[09:29:22.165]                           if (!has_future) {
[09:29:22.165]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.165]                               info)
[09:29:22.165]                           }
[09:29:22.165]                           else {
[09:29:22.165]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.165]                               info, version)
[09:29:22.165]                           }
[09:29:22.165]                           base::stop(msg)
[09:29:22.165]                         }
[09:29:22.165]                       })
[09:29:22.165]                     }
[09:29:22.165]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.165]                     base::options(mc.cores = 1L)
[09:29:22.165]                   }
[09:29:22.165]                   ...future.strategy.old <- future::plan("list")
[09:29:22.165]                   options(future.plan = NULL)
[09:29:22.165]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.165]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.165]                 }
[09:29:22.165]                 ...future.workdir <- getwd()
[09:29:22.165]             }
[09:29:22.165]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.165]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.165]         }
[09:29:22.165]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.165]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.165]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.165]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.165]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.165]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.165]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.165]             base::names(...future.oldOptions))
[09:29:22.165]     }
[09:29:22.165]     if (FALSE) {
[09:29:22.165]     }
[09:29:22.165]     else {
[09:29:22.165]         if (TRUE) {
[09:29:22.165]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.165]                 open = "w")
[09:29:22.165]         }
[09:29:22.165]         else {
[09:29:22.165]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.165]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.165]         }
[09:29:22.165]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.165]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.165]             base::sink(type = "output", split = FALSE)
[09:29:22.165]             base::close(...future.stdout)
[09:29:22.165]         }, add = TRUE)
[09:29:22.165]     }
[09:29:22.165]     ...future.frame <- base::sys.nframe()
[09:29:22.165]     ...future.conditions <- base::list()
[09:29:22.165]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.165]     if (FALSE) {
[09:29:22.165]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.165]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.165]     }
[09:29:22.165]     ...future.result <- base::tryCatch({
[09:29:22.165]         base::withCallingHandlers({
[09:29:22.165]             ...future.value <- base::withVisible(base::local({
[09:29:22.165]                 withCallingHandlers({
[09:29:22.165]                   {
[09:29:22.165]                     do.call(function(...) {
[09:29:22.165]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.165]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.165]                         ...future.globals.maxSize)) {
[09:29:22.165]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.165]                         on.exit(options(oopts), add = TRUE)
[09:29:22.165]                       }
[09:29:22.165]                       {
[09:29:22.165]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.165]                           FUN = function(jj) {
[09:29:22.165]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.165]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.165]                               envir = globalenv(), inherits = FALSE)
[09:29:22.165]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.165]                           })
[09:29:22.165]                       }
[09:29:22.165]                     }, args = future.call.arguments)
[09:29:22.165]                   }
[09:29:22.165]                 }, immediateCondition = function(cond) {
[09:29:22.165]                   save_rds <- function (object, pathname, ...) 
[09:29:22.165]                   {
[09:29:22.165]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.165]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.165]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.165]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.165]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.165]                         fi_tmp[["mtime"]])
[09:29:22.165]                     }
[09:29:22.165]                     tryCatch({
[09:29:22.165]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.165]                     }, error = function(ex) {
[09:29:22.165]                       msg <- conditionMessage(ex)
[09:29:22.165]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.165]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.165]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.165]                         fi_tmp[["mtime"]], msg)
[09:29:22.165]                       ex$message <- msg
[09:29:22.165]                       stop(ex)
[09:29:22.165]                     })
[09:29:22.165]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.165]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.165]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.165]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.165]                       fi <- file.info(pathname)
[09:29:22.165]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.165]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.165]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.165]                         fi[["size"]], fi[["mtime"]])
[09:29:22.165]                       stop(msg)
[09:29:22.165]                     }
[09:29:22.165]                     invisible(pathname)
[09:29:22.165]                   }
[09:29:22.165]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.165]                     rootPath = tempdir()) 
[09:29:22.165]                   {
[09:29:22.165]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.165]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.165]                       tmpdir = path, fileext = ".rds")
[09:29:22.165]                     save_rds(obj, file)
[09:29:22.165]                   }
[09:29:22.165]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.165]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.165]                   {
[09:29:22.165]                     inherits <- base::inherits
[09:29:22.165]                     invokeRestart <- base::invokeRestart
[09:29:22.165]                     is.null <- base::is.null
[09:29:22.165]                     muffled <- FALSE
[09:29:22.165]                     if (inherits(cond, "message")) {
[09:29:22.165]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.165]                       if (muffled) 
[09:29:22.165]                         invokeRestart("muffleMessage")
[09:29:22.165]                     }
[09:29:22.165]                     else if (inherits(cond, "warning")) {
[09:29:22.165]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.165]                       if (muffled) 
[09:29:22.165]                         invokeRestart("muffleWarning")
[09:29:22.165]                     }
[09:29:22.165]                     else if (inherits(cond, "condition")) {
[09:29:22.165]                       if (!is.null(pattern)) {
[09:29:22.165]                         computeRestarts <- base::computeRestarts
[09:29:22.165]                         grepl <- base::grepl
[09:29:22.165]                         restarts <- computeRestarts(cond)
[09:29:22.165]                         for (restart in restarts) {
[09:29:22.165]                           name <- restart$name
[09:29:22.165]                           if (is.null(name)) 
[09:29:22.165]                             next
[09:29:22.165]                           if (!grepl(pattern, name)) 
[09:29:22.165]                             next
[09:29:22.165]                           invokeRestart(restart)
[09:29:22.165]                           muffled <- TRUE
[09:29:22.165]                           break
[09:29:22.165]                         }
[09:29:22.165]                       }
[09:29:22.165]                     }
[09:29:22.165]                     invisible(muffled)
[09:29:22.165]                   }
[09:29:22.165]                   muffleCondition(cond)
[09:29:22.165]                 })
[09:29:22.165]             }))
[09:29:22.165]             future::FutureResult(value = ...future.value$value, 
[09:29:22.165]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.165]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.165]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.165]                     ...future.globalenv.names))
[09:29:22.165]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.165]         }, condition = base::local({
[09:29:22.165]             c <- base::c
[09:29:22.165]             inherits <- base::inherits
[09:29:22.165]             invokeRestart <- base::invokeRestart
[09:29:22.165]             length <- base::length
[09:29:22.165]             list <- base::list
[09:29:22.165]             seq.int <- base::seq.int
[09:29:22.165]             signalCondition <- base::signalCondition
[09:29:22.165]             sys.calls <- base::sys.calls
[09:29:22.165]             `[[` <- base::`[[`
[09:29:22.165]             `+` <- base::`+`
[09:29:22.165]             `<<-` <- base::`<<-`
[09:29:22.165]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.165]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.165]                   3L)]
[09:29:22.165]             }
[09:29:22.165]             function(cond) {
[09:29:22.165]                 is_error <- inherits(cond, "error")
[09:29:22.165]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.165]                   NULL)
[09:29:22.165]                 if (is_error) {
[09:29:22.165]                   sessionInformation <- function() {
[09:29:22.165]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.165]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.165]                       search = base::search(), system = base::Sys.info())
[09:29:22.165]                   }
[09:29:22.165]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.165]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.165]                     cond$call), session = sessionInformation(), 
[09:29:22.165]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.165]                   signalCondition(cond)
[09:29:22.165]                 }
[09:29:22.165]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.165]                 "immediateCondition"))) {
[09:29:22.165]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.165]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.165]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.165]                   if (TRUE && !signal) {
[09:29:22.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.165]                     {
[09:29:22.165]                       inherits <- base::inherits
[09:29:22.165]                       invokeRestart <- base::invokeRestart
[09:29:22.165]                       is.null <- base::is.null
[09:29:22.165]                       muffled <- FALSE
[09:29:22.165]                       if (inherits(cond, "message")) {
[09:29:22.165]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.165]                         if (muffled) 
[09:29:22.165]                           invokeRestart("muffleMessage")
[09:29:22.165]                       }
[09:29:22.165]                       else if (inherits(cond, "warning")) {
[09:29:22.165]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.165]                         if (muffled) 
[09:29:22.165]                           invokeRestart("muffleWarning")
[09:29:22.165]                       }
[09:29:22.165]                       else if (inherits(cond, "condition")) {
[09:29:22.165]                         if (!is.null(pattern)) {
[09:29:22.165]                           computeRestarts <- base::computeRestarts
[09:29:22.165]                           grepl <- base::grepl
[09:29:22.165]                           restarts <- computeRestarts(cond)
[09:29:22.165]                           for (restart in restarts) {
[09:29:22.165]                             name <- restart$name
[09:29:22.165]                             if (is.null(name)) 
[09:29:22.165]                               next
[09:29:22.165]                             if (!grepl(pattern, name)) 
[09:29:22.165]                               next
[09:29:22.165]                             invokeRestart(restart)
[09:29:22.165]                             muffled <- TRUE
[09:29:22.165]                             break
[09:29:22.165]                           }
[09:29:22.165]                         }
[09:29:22.165]                       }
[09:29:22.165]                       invisible(muffled)
[09:29:22.165]                     }
[09:29:22.165]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.165]                   }
[09:29:22.165]                 }
[09:29:22.165]                 else {
[09:29:22.165]                   if (TRUE) {
[09:29:22.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.165]                     {
[09:29:22.165]                       inherits <- base::inherits
[09:29:22.165]                       invokeRestart <- base::invokeRestart
[09:29:22.165]                       is.null <- base::is.null
[09:29:22.165]                       muffled <- FALSE
[09:29:22.165]                       if (inherits(cond, "message")) {
[09:29:22.165]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.165]                         if (muffled) 
[09:29:22.165]                           invokeRestart("muffleMessage")
[09:29:22.165]                       }
[09:29:22.165]                       else if (inherits(cond, "warning")) {
[09:29:22.165]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.165]                         if (muffled) 
[09:29:22.165]                           invokeRestart("muffleWarning")
[09:29:22.165]                       }
[09:29:22.165]                       else if (inherits(cond, "condition")) {
[09:29:22.165]                         if (!is.null(pattern)) {
[09:29:22.165]                           computeRestarts <- base::computeRestarts
[09:29:22.165]                           grepl <- base::grepl
[09:29:22.165]                           restarts <- computeRestarts(cond)
[09:29:22.165]                           for (restart in restarts) {
[09:29:22.165]                             name <- restart$name
[09:29:22.165]                             if (is.null(name)) 
[09:29:22.165]                               next
[09:29:22.165]                             if (!grepl(pattern, name)) 
[09:29:22.165]                               next
[09:29:22.165]                             invokeRestart(restart)
[09:29:22.165]                             muffled <- TRUE
[09:29:22.165]                             break
[09:29:22.165]                           }
[09:29:22.165]                         }
[09:29:22.165]                       }
[09:29:22.165]                       invisible(muffled)
[09:29:22.165]                     }
[09:29:22.165]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.165]                   }
[09:29:22.165]                 }
[09:29:22.165]             }
[09:29:22.165]         }))
[09:29:22.165]     }, error = function(ex) {
[09:29:22.165]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.165]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.165]                 ...future.rng), started = ...future.startTime, 
[09:29:22.165]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.165]             version = "1.8"), class = "FutureResult")
[09:29:22.165]     }, finally = {
[09:29:22.165]         if (!identical(...future.workdir, getwd())) 
[09:29:22.165]             setwd(...future.workdir)
[09:29:22.165]         {
[09:29:22.165]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.165]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.165]             }
[09:29:22.165]             base::options(...future.oldOptions)
[09:29:22.165]             if (.Platform$OS.type == "windows") {
[09:29:22.165]                 old_names <- names(...future.oldEnvVars)
[09:29:22.165]                 envs <- base::Sys.getenv()
[09:29:22.165]                 names <- names(envs)
[09:29:22.165]                 common <- intersect(names, old_names)
[09:29:22.165]                 added <- setdiff(names, old_names)
[09:29:22.165]                 removed <- setdiff(old_names, names)
[09:29:22.165]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.165]                   envs[common]]
[09:29:22.165]                 NAMES <- toupper(changed)
[09:29:22.165]                 args <- list()
[09:29:22.165]                 for (kk in seq_along(NAMES)) {
[09:29:22.165]                   name <- changed[[kk]]
[09:29:22.165]                   NAME <- NAMES[[kk]]
[09:29:22.165]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.165]                     next
[09:29:22.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.165]                 }
[09:29:22.165]                 NAMES <- toupper(added)
[09:29:22.165]                 for (kk in seq_along(NAMES)) {
[09:29:22.165]                   name <- added[[kk]]
[09:29:22.165]                   NAME <- NAMES[[kk]]
[09:29:22.165]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.165]                     next
[09:29:22.165]                   args[[name]] <- ""
[09:29:22.165]                 }
[09:29:22.165]                 NAMES <- toupper(removed)
[09:29:22.165]                 for (kk in seq_along(NAMES)) {
[09:29:22.165]                   name <- removed[[kk]]
[09:29:22.165]                   NAME <- NAMES[[kk]]
[09:29:22.165]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.165]                     next
[09:29:22.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.165]                 }
[09:29:22.165]                 if (length(args) > 0) 
[09:29:22.165]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.165]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.165]             }
[09:29:22.165]             else {
[09:29:22.165]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.165]             }
[09:29:22.165]             {
[09:29:22.165]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.165]                   0L) {
[09:29:22.165]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.165]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.165]                   base::options(opts)
[09:29:22.165]                 }
[09:29:22.165]                 {
[09:29:22.165]                   {
[09:29:22.165]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.165]                     NULL
[09:29:22.165]                   }
[09:29:22.165]                   options(future.plan = NULL)
[09:29:22.165]                   if (is.na(NA_character_)) 
[09:29:22.165]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.165]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.165]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.165]                     .init = FALSE)
[09:29:22.165]                 }
[09:29:22.165]             }
[09:29:22.165]         }
[09:29:22.165]     })
[09:29:22.165]     if (TRUE) {
[09:29:22.165]         base::sink(type = "output", split = FALSE)
[09:29:22.165]         if (TRUE) {
[09:29:22.165]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.165]         }
[09:29:22.165]         else {
[09:29:22.165]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.165]         }
[09:29:22.165]         base::close(...future.stdout)
[09:29:22.165]         ...future.stdout <- NULL
[09:29:22.165]     }
[09:29:22.165]     ...future.result$conditions <- ...future.conditions
[09:29:22.165]     ...future.result$finished <- base::Sys.time()
[09:29:22.165]     ...future.result
[09:29:22.165] }
[09:29:22.167] assign_globals() ...
[09:29:22.168] List of 5
[09:29:22.168]  $ ...future.FUN            :function (...)  
[09:29:22.168]  $ future.call.arguments    : list()
[09:29:22.168]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.168]  $ ...future.elements_ii    :List of 3
[09:29:22.168]   ..$ : int 0
[09:29:22.168]   ..$ : int 0
[09:29:22.168]   ..$ : int 0
[09:29:22.168]  $ ...future.seeds_ii       :List of 3
[09:29:22.168]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[09:29:22.168]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[09:29:22.168]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[09:29:22.168]  $ ...future.globals.maxSize: NULL
[09:29:22.168]  - attr(*, "where")=List of 5
[09:29:22.168]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.168]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.168]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.168]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.168]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.168]  - attr(*, "resolved")= logi FALSE
[09:29:22.168]  - attr(*, "total_size")= num 616
[09:29:22.168]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.168]  - attr(*, "already-done")= logi TRUE
[09:29:22.177] - reassign environment for ‘...future.FUN’
[09:29:22.177] - copied ‘...future.FUN’ to environment
[09:29:22.177] - copied ‘future.call.arguments’ to environment
[09:29:22.177] - copied ‘...future.elements_ii’ to environment
[09:29:22.177] - copied ‘...future.seeds_ii’ to environment
[09:29:22.178] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.178] assign_globals() ... done
[09:29:22.178] requestCore(): workers = 2
[09:29:22.180] MulticoreFuture started
[09:29:22.180] - Launch lazy future ... done
[09:29:22.181] run() for ‘MulticoreFuture’ ... done
[09:29:22.181] Created future:
[09:29:22.181] plan(): Setting new future strategy stack:
[09:29:22.182] List of future strategies:
[09:29:22.182] 1. sequential:
[09:29:22.182]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.182]    - tweaked: FALSE
[09:29:22.182]    - call: NULL
[09:29:22.182] plan(): nbrOfWorkers() = 1
[09:29:22.185] plan(): Setting new future strategy stack:
[09:29:22.185] List of future strategies:
[09:29:22.185] 1. multicore:
[09:29:22.185]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.185]    - tweaked: FALSE
[09:29:22.185]    - call: plan(strategy)
[09:29:22.189] plan(): nbrOfWorkers() = 2
[09:29:22.181] MulticoreFuture:
[09:29:22.181] Label: ‘future_replicate-2’
[09:29:22.181] Expression:
[09:29:22.181] {
[09:29:22.181]     do.call(function(...) {
[09:29:22.181]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.181]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.181]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.181]             on.exit(options(oopts), add = TRUE)
[09:29:22.181]         }
[09:29:22.181]         {
[09:29:22.181]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.181]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.181]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.181]                   envir = globalenv(), inherits = FALSE)
[09:29:22.181]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.181]             })
[09:29:22.181]         }
[09:29:22.181]     }, args = future.call.arguments)
[09:29:22.181] }
[09:29:22.181] Lazy evaluation: FALSE
[09:29:22.181] Asynchronous evaluation: TRUE
[09:29:22.181] Local evaluation: TRUE
[09:29:22.181] Environment: R_GlobalEnv
[09:29:22.181] Capture standard output: TRUE
[09:29:22.181] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.181] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.181] Packages: <none>
[09:29:22.181] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.181] Resolved: TRUE
[09:29:22.181] Value: <not collected>
[09:29:22.181] Conditions captured: <none>
[09:29:22.181] Early signaling: FALSE
[09:29:22.181] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.181] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.190] Chunk #2 of 2 ... DONE
[09:29:22.191] Launching 2 futures (chunks) ... DONE
[09:29:22.191] Resolving 2 futures (chunks) ...
[09:29:22.191] resolve() on list ...
[09:29:22.191]  recursive: 0
[09:29:22.191]  length: 2
[09:29:22.191] 
[09:29:22.192] Future #1
[09:29:22.192] result() for MulticoreFuture ...
[09:29:22.193] result() for MulticoreFuture ...
[09:29:22.193] result() for MulticoreFuture ... done
[09:29:22.193] result() for MulticoreFuture ... done
[09:29:22.193] result() for MulticoreFuture ...
[09:29:22.193] result() for MulticoreFuture ... done
[09:29:22.193] signalConditionsASAP(MulticoreFuture, pos=1) ...
[09:29:22.194] - nx: 2
[09:29:22.194] - relay: TRUE
[09:29:22.194] - stdout: TRUE
[09:29:22.194] - signal: TRUE
[09:29:22.194] - resignal: FALSE
[09:29:22.194] - force: TRUE
[09:29:22.194] - relayed: [n=2] FALSE, FALSE
[09:29:22.194] - queued futures: [n=2] FALSE, FALSE
[09:29:22.195]  - until=1
[09:29:22.195]  - relaying element #1
[09:29:22.195] result() for MulticoreFuture ...
[09:29:22.195] result() for MulticoreFuture ... done
[09:29:22.195] result() for MulticoreFuture ...
[09:29:22.195] result() for MulticoreFuture ... done
[09:29:22.195] result() for MulticoreFuture ...
[09:29:22.196] result() for MulticoreFuture ... done
[09:29:22.196] result() for MulticoreFuture ...
[09:29:22.196] result() for MulticoreFuture ... done
[09:29:22.196] - relayed: [n=2] TRUE, FALSE
[09:29:22.196] - queued futures: [n=2] TRUE, FALSE
[09:29:22.196] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[09:29:22.196]  length: 1 (resolved future 1)
[09:29:22.197] Future #2
[09:29:22.197] result() for MulticoreFuture ...
[09:29:22.198] result() for MulticoreFuture ...
[09:29:22.198] result() for MulticoreFuture ... done
[09:29:22.198] result() for MulticoreFuture ... done
[09:29:22.198] result() for MulticoreFuture ...
[09:29:22.198] result() for MulticoreFuture ... done
[09:29:22.198] signalConditionsASAP(MulticoreFuture, pos=2) ...
[09:29:22.198] - nx: 2
[09:29:22.199] - relay: TRUE
[09:29:22.199] - stdout: TRUE
[09:29:22.199] - signal: TRUE
[09:29:22.199] - resignal: FALSE
[09:29:22.199] - force: TRUE
[09:29:22.199] - relayed: [n=2] TRUE, FALSE
[09:29:22.199] - queued futures: [n=2] TRUE, FALSE
[09:29:22.199]  - until=2
[09:29:22.200]  - relaying element #2
[09:29:22.200] result() for MulticoreFuture ...
[09:29:22.200] result() for MulticoreFuture ... done
[09:29:22.200] result() for MulticoreFuture ...
[09:29:22.203] result() for MulticoreFuture ... done
[09:29:22.204] result() for MulticoreFuture ...
[09:29:22.204] result() for MulticoreFuture ... done
[09:29:22.204] result() for MulticoreFuture ...
[09:29:22.204] result() for MulticoreFuture ... done
[09:29:22.204] - relayed: [n=2] TRUE, TRUE
[09:29:22.204] - queued futures: [n=2] TRUE, TRUE
[09:29:22.204] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[09:29:22.205]  length: 0 (resolved future 2)
[09:29:22.205] Relaying remaining futures
[09:29:22.205] signalConditionsASAP(NULL, pos=0) ...
[09:29:22.205] - nx: 2
[09:29:22.205] - relay: TRUE
[09:29:22.205] - stdout: TRUE
[09:29:22.205] - signal: TRUE
[09:29:22.205] - resignal: FALSE
[09:29:22.205] - force: TRUE
[09:29:22.206] - relayed: [n=2] TRUE, TRUE
[09:29:22.206] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:22.206] - relayed: [n=2] TRUE, TRUE
[09:29:22.206] - queued futures: [n=2] TRUE, TRUE
[09:29:22.206] signalConditionsASAP(NULL, pos=0) ... done
[09:29:22.206] resolve() on list ... DONE
[09:29:22.206] result() for MulticoreFuture ...
[09:29:22.206] result() for MulticoreFuture ... done
[09:29:22.207] result() for MulticoreFuture ...
[09:29:22.207] result() for MulticoreFuture ... done
[09:29:22.207] result() for MulticoreFuture ...
[09:29:22.207] result() for MulticoreFuture ... done
[09:29:22.207] result() for MulticoreFuture ...
[09:29:22.207] result() for MulticoreFuture ... done
[09:29:22.207]  - Number of value chunks collected: 2
[09:29:22.207] Resolving 2 futures (chunks) ... DONE
[09:29:22.208] Reducing values from 2 chunks ...
[09:29:22.208]  - Number of values collected after concatenation: 5
[09:29:22.208]  - Number of values expected: 5
[09:29:22.208] Reducing values from 2 chunks ... DONE
[09:29:22.208] future_lapply() ... DONE
[09:29:22.208] future_lapply() ...
[09:29:22.209] Generating random seeds ...
[09:29:22.209] Generating random seed streams for 5 elements ...
[09:29:22.209] Generating random seed streams for 5 elements ... DONE
[09:29:22.209] Generating random seeds ... DONE
[09:29:22.209] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:22.214] Number of chunks: 2
[09:29:22.214] getGlobalsAndPackagesXApply() ...
[09:29:22.214]  - future.globals: TRUE
[09:29:22.214] getGlobalsAndPackages() ...
[09:29:22.214] Searching for globals...
[09:29:22.216] - globals found: [2] ‘FUN’, ‘sample’
[09:29:22.216] Searching for globals ... DONE
[09:29:22.216] Resolving globals: FALSE
[09:29:22.216] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:22.217] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:22.217] - globals: [1] ‘FUN’
[09:29:22.217] 
[09:29:22.217] getGlobalsAndPackages() ... DONE
[09:29:22.217]  - globals found/used: [n=1] ‘FUN’
[09:29:22.217]  - needed namespaces: [n=0] 
[09:29:22.217] Finding globals ... DONE
[09:29:22.217]  - use_args: TRUE
[09:29:22.218]  - Getting '...' globals ...
[09:29:22.218] resolve() on list ...
[09:29:22.218]  recursive: 0
[09:29:22.218]  length: 1
[09:29:22.218]  elements: ‘...’
[09:29:22.218]  length: 0 (resolved future 1)
[09:29:22.219] resolve() on list ... DONE
[09:29:22.219]    - '...' content: [n=0] 
[09:29:22.219] List of 1
[09:29:22.219]  $ ...: list()
[09:29:22.219]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.219]  - attr(*, "where")=List of 1
[09:29:22.219]   ..$ ...:<environment: 0x55d1c976c920> 
[09:29:22.219]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.219]  - attr(*, "resolved")= logi TRUE
[09:29:22.219]  - attr(*, "total_size")= num NA
[09:29:22.222]  - Getting '...' globals ... DONE
[09:29:22.222] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:22.222] List of 2
[09:29:22.222]  $ ...future.FUN:function (...)  
[09:29:22.222]  $ ...          : list()
[09:29:22.222]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.222]  - attr(*, "where")=List of 2
[09:29:22.222]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:22.222]   ..$ ...          :<environment: 0x55d1c976c920> 
[09:29:22.222]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.222]  - attr(*, "resolved")= logi FALSE
[09:29:22.222]  - attr(*, "total_size")= num 616
[09:29:22.225] Packages to be attached in all futures: [n=0] 
[09:29:22.225] getGlobalsAndPackagesXApply() ... DONE
[09:29:22.225] Number of futures (= number of chunks): 2
[09:29:22.225] Launching 2 futures (chunks) ...
[09:29:22.225] Chunk #1 of 2 ...
[09:29:22.225]  - Finding globals in 'X' for chunk #1 ...
[09:29:22.225] getGlobalsAndPackages() ...
[09:29:22.225] Searching for globals...
[09:29:22.226] 
[09:29:22.226] Searching for globals ... DONE
[09:29:22.226] - globals: [0] <none>
[09:29:22.226] getGlobalsAndPackages() ... DONE
[09:29:22.226]    + additional globals found: [n=0] 
[09:29:22.226]    + additional namespaces needed: [n=0] 
[09:29:22.226]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:22.226]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.226]  - seeds: [2] <seeds>
[09:29:22.226]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.227] getGlobalsAndPackages() ...
[09:29:22.227] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.227] Resolving globals: FALSE
[09:29:22.227] Tweak future expression to call with '...' arguments ...
[09:29:22.227] {
[09:29:22.227]     do.call(function(...) {
[09:29:22.227]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.227]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.227]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.227]             on.exit(options(oopts), add = TRUE)
[09:29:22.227]         }
[09:29:22.227]         {
[09:29:22.227]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.227]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.227]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.227]                   envir = globalenv(), inherits = FALSE)
[09:29:22.227]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.227]             })
[09:29:22.227]         }
[09:29:22.227]     }, args = future.call.arguments)
[09:29:22.227] }
[09:29:22.227] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.228] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.228] 
[09:29:22.228] getGlobalsAndPackages() ... DONE
[09:29:22.228] run() for ‘Future’ ...
[09:29:22.228] - state: ‘created’
[09:29:22.228] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.263] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.263] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.263]   - Field: ‘label’
[09:29:22.263]   - Field: ‘local’
[09:29:22.263]   - Field: ‘owner’
[09:29:22.264]   - Field: ‘envir’
[09:29:22.264]   - Field: ‘workers’
[09:29:22.264]   - Field: ‘packages’
[09:29:22.264]   - Field: ‘gc’
[09:29:22.264]   - Field: ‘job’
[09:29:22.264]   - Field: ‘conditions’
[09:29:22.264]   - Field: ‘expr’
[09:29:22.264]   - Field: ‘uuid’
[09:29:22.264]   - Field: ‘seed’
[09:29:22.265]   - Field: ‘version’
[09:29:22.265]   - Field: ‘result’
[09:29:22.265]   - Field: ‘asynchronous’
[09:29:22.265]   - Field: ‘calls’
[09:29:22.265]   - Field: ‘globals’
[09:29:22.265]   - Field: ‘stdout’
[09:29:22.265]   - Field: ‘earlySignal’
[09:29:22.265]   - Field: ‘lazy’
[09:29:22.265]   - Field: ‘state’
[09:29:22.265] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.265] - Launch lazy future ...
[09:29:22.266] Packages needed by the future expression (n = 0): <none>
[09:29:22.266] Packages needed by future strategies (n = 0): <none>
[09:29:22.266] {
[09:29:22.266]     {
[09:29:22.266]         {
[09:29:22.266]             ...future.startTime <- base::Sys.time()
[09:29:22.266]             {
[09:29:22.266]                 {
[09:29:22.266]                   {
[09:29:22.266]                     {
[09:29:22.266]                       base::local({
[09:29:22.266]                         has_future <- base::requireNamespace("future", 
[09:29:22.266]                           quietly = TRUE)
[09:29:22.266]                         if (has_future) {
[09:29:22.266]                           ns <- base::getNamespace("future")
[09:29:22.266]                           version <- ns[[".package"]][["version"]]
[09:29:22.266]                           if (is.null(version)) 
[09:29:22.266]                             version <- utils::packageVersion("future")
[09:29:22.266]                         }
[09:29:22.266]                         else {
[09:29:22.266]                           version <- NULL
[09:29:22.266]                         }
[09:29:22.266]                         if (!has_future || version < "1.8.0") {
[09:29:22.266]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.266]                             "", base::R.version$version.string), 
[09:29:22.266]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.266]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.266]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.266]                               "release", "version")], collapse = " "), 
[09:29:22.266]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.266]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.266]                             info)
[09:29:22.266]                           info <- base::paste(info, collapse = "; ")
[09:29:22.266]                           if (!has_future) {
[09:29:22.266]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.266]                               info)
[09:29:22.266]                           }
[09:29:22.266]                           else {
[09:29:22.266]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.266]                               info, version)
[09:29:22.266]                           }
[09:29:22.266]                           base::stop(msg)
[09:29:22.266]                         }
[09:29:22.266]                       })
[09:29:22.266]                     }
[09:29:22.266]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.266]                     base::options(mc.cores = 1L)
[09:29:22.266]                   }
[09:29:22.266]                   ...future.strategy.old <- future::plan("list")
[09:29:22.266]                   options(future.plan = NULL)
[09:29:22.266]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.266]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.266]                 }
[09:29:22.266]                 ...future.workdir <- getwd()
[09:29:22.266]             }
[09:29:22.266]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.266]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.266]         }
[09:29:22.266]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.266]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.266]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.266]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.266]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.266]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.266]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.266]             base::names(...future.oldOptions))
[09:29:22.266]     }
[09:29:22.266]     if (FALSE) {
[09:29:22.266]     }
[09:29:22.266]     else {
[09:29:22.266]         if (TRUE) {
[09:29:22.266]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.266]                 open = "w")
[09:29:22.266]         }
[09:29:22.266]         else {
[09:29:22.266]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.266]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.266]         }
[09:29:22.266]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.266]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.266]             base::sink(type = "output", split = FALSE)
[09:29:22.266]             base::close(...future.stdout)
[09:29:22.266]         }, add = TRUE)
[09:29:22.266]     }
[09:29:22.266]     ...future.frame <- base::sys.nframe()
[09:29:22.266]     ...future.conditions <- base::list()
[09:29:22.266]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.266]     if (FALSE) {
[09:29:22.266]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.266]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.266]     }
[09:29:22.266]     ...future.result <- base::tryCatch({
[09:29:22.266]         base::withCallingHandlers({
[09:29:22.266]             ...future.value <- base::withVisible(base::local({
[09:29:22.266]                 withCallingHandlers({
[09:29:22.266]                   {
[09:29:22.266]                     do.call(function(...) {
[09:29:22.266]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.266]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.266]                         ...future.globals.maxSize)) {
[09:29:22.266]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.266]                         on.exit(options(oopts), add = TRUE)
[09:29:22.266]                       }
[09:29:22.266]                       {
[09:29:22.266]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.266]                           FUN = function(jj) {
[09:29:22.266]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.266]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.266]                               envir = globalenv(), inherits = FALSE)
[09:29:22.266]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.266]                           })
[09:29:22.266]                       }
[09:29:22.266]                     }, args = future.call.arguments)
[09:29:22.266]                   }
[09:29:22.266]                 }, immediateCondition = function(cond) {
[09:29:22.266]                   save_rds <- function (object, pathname, ...) 
[09:29:22.266]                   {
[09:29:22.266]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.266]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.266]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.266]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.266]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.266]                         fi_tmp[["mtime"]])
[09:29:22.266]                     }
[09:29:22.266]                     tryCatch({
[09:29:22.266]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.266]                     }, error = function(ex) {
[09:29:22.266]                       msg <- conditionMessage(ex)
[09:29:22.266]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.266]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.266]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.266]                         fi_tmp[["mtime"]], msg)
[09:29:22.266]                       ex$message <- msg
[09:29:22.266]                       stop(ex)
[09:29:22.266]                     })
[09:29:22.266]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.266]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.266]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.266]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.266]                       fi <- file.info(pathname)
[09:29:22.266]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.266]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.266]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.266]                         fi[["size"]], fi[["mtime"]])
[09:29:22.266]                       stop(msg)
[09:29:22.266]                     }
[09:29:22.266]                     invisible(pathname)
[09:29:22.266]                   }
[09:29:22.266]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.266]                     rootPath = tempdir()) 
[09:29:22.266]                   {
[09:29:22.266]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.266]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.266]                       tmpdir = path, fileext = ".rds")
[09:29:22.266]                     save_rds(obj, file)
[09:29:22.266]                   }
[09:29:22.266]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.266]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.266]                   {
[09:29:22.266]                     inherits <- base::inherits
[09:29:22.266]                     invokeRestart <- base::invokeRestart
[09:29:22.266]                     is.null <- base::is.null
[09:29:22.266]                     muffled <- FALSE
[09:29:22.266]                     if (inherits(cond, "message")) {
[09:29:22.266]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.266]                       if (muffled) 
[09:29:22.266]                         invokeRestart("muffleMessage")
[09:29:22.266]                     }
[09:29:22.266]                     else if (inherits(cond, "warning")) {
[09:29:22.266]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.266]                       if (muffled) 
[09:29:22.266]                         invokeRestart("muffleWarning")
[09:29:22.266]                     }
[09:29:22.266]                     else if (inherits(cond, "condition")) {
[09:29:22.266]                       if (!is.null(pattern)) {
[09:29:22.266]                         computeRestarts <- base::computeRestarts
[09:29:22.266]                         grepl <- base::grepl
[09:29:22.266]                         restarts <- computeRestarts(cond)
[09:29:22.266]                         for (restart in restarts) {
[09:29:22.266]                           name <- restart$name
[09:29:22.266]                           if (is.null(name)) 
[09:29:22.266]                             next
[09:29:22.266]                           if (!grepl(pattern, name)) 
[09:29:22.266]                             next
[09:29:22.266]                           invokeRestart(restart)
[09:29:22.266]                           muffled <- TRUE
[09:29:22.266]                           break
[09:29:22.266]                         }
[09:29:22.266]                       }
[09:29:22.266]                     }
[09:29:22.266]                     invisible(muffled)
[09:29:22.266]                   }
[09:29:22.266]                   muffleCondition(cond)
[09:29:22.266]                 })
[09:29:22.266]             }))
[09:29:22.266]             future::FutureResult(value = ...future.value$value, 
[09:29:22.266]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.266]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.266]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.266]                     ...future.globalenv.names))
[09:29:22.266]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.266]         }, condition = base::local({
[09:29:22.266]             c <- base::c
[09:29:22.266]             inherits <- base::inherits
[09:29:22.266]             invokeRestart <- base::invokeRestart
[09:29:22.266]             length <- base::length
[09:29:22.266]             list <- base::list
[09:29:22.266]             seq.int <- base::seq.int
[09:29:22.266]             signalCondition <- base::signalCondition
[09:29:22.266]             sys.calls <- base::sys.calls
[09:29:22.266]             `[[` <- base::`[[`
[09:29:22.266]             `+` <- base::`+`
[09:29:22.266]             `<<-` <- base::`<<-`
[09:29:22.266]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.266]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.266]                   3L)]
[09:29:22.266]             }
[09:29:22.266]             function(cond) {
[09:29:22.266]                 is_error <- inherits(cond, "error")
[09:29:22.266]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.266]                   NULL)
[09:29:22.266]                 if (is_error) {
[09:29:22.266]                   sessionInformation <- function() {
[09:29:22.266]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.266]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.266]                       search = base::search(), system = base::Sys.info())
[09:29:22.266]                   }
[09:29:22.266]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.266]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.266]                     cond$call), session = sessionInformation(), 
[09:29:22.266]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.266]                   signalCondition(cond)
[09:29:22.266]                 }
[09:29:22.266]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.266]                 "immediateCondition"))) {
[09:29:22.266]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.266]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.266]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.266]                   if (TRUE && !signal) {
[09:29:22.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.266]                     {
[09:29:22.266]                       inherits <- base::inherits
[09:29:22.266]                       invokeRestart <- base::invokeRestart
[09:29:22.266]                       is.null <- base::is.null
[09:29:22.266]                       muffled <- FALSE
[09:29:22.266]                       if (inherits(cond, "message")) {
[09:29:22.266]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.266]                         if (muffled) 
[09:29:22.266]                           invokeRestart("muffleMessage")
[09:29:22.266]                       }
[09:29:22.266]                       else if (inherits(cond, "warning")) {
[09:29:22.266]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.266]                         if (muffled) 
[09:29:22.266]                           invokeRestart("muffleWarning")
[09:29:22.266]                       }
[09:29:22.266]                       else if (inherits(cond, "condition")) {
[09:29:22.266]                         if (!is.null(pattern)) {
[09:29:22.266]                           computeRestarts <- base::computeRestarts
[09:29:22.266]                           grepl <- base::grepl
[09:29:22.266]                           restarts <- computeRestarts(cond)
[09:29:22.266]                           for (restart in restarts) {
[09:29:22.266]                             name <- restart$name
[09:29:22.266]                             if (is.null(name)) 
[09:29:22.266]                               next
[09:29:22.266]                             if (!grepl(pattern, name)) 
[09:29:22.266]                               next
[09:29:22.266]                             invokeRestart(restart)
[09:29:22.266]                             muffled <- TRUE
[09:29:22.266]                             break
[09:29:22.266]                           }
[09:29:22.266]                         }
[09:29:22.266]                       }
[09:29:22.266]                       invisible(muffled)
[09:29:22.266]                     }
[09:29:22.266]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.266]                   }
[09:29:22.266]                 }
[09:29:22.266]                 else {
[09:29:22.266]                   if (TRUE) {
[09:29:22.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.266]                     {
[09:29:22.266]                       inherits <- base::inherits
[09:29:22.266]                       invokeRestart <- base::invokeRestart
[09:29:22.266]                       is.null <- base::is.null
[09:29:22.266]                       muffled <- FALSE
[09:29:22.266]                       if (inherits(cond, "message")) {
[09:29:22.266]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.266]                         if (muffled) 
[09:29:22.266]                           invokeRestart("muffleMessage")
[09:29:22.266]                       }
[09:29:22.266]                       else if (inherits(cond, "warning")) {
[09:29:22.266]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.266]                         if (muffled) 
[09:29:22.266]                           invokeRestart("muffleWarning")
[09:29:22.266]                       }
[09:29:22.266]                       else if (inherits(cond, "condition")) {
[09:29:22.266]                         if (!is.null(pattern)) {
[09:29:22.266]                           computeRestarts <- base::computeRestarts
[09:29:22.266]                           grepl <- base::grepl
[09:29:22.266]                           restarts <- computeRestarts(cond)
[09:29:22.266]                           for (restart in restarts) {
[09:29:22.266]                             name <- restart$name
[09:29:22.266]                             if (is.null(name)) 
[09:29:22.266]                               next
[09:29:22.266]                             if (!grepl(pattern, name)) 
[09:29:22.266]                               next
[09:29:22.266]                             invokeRestart(restart)
[09:29:22.266]                             muffled <- TRUE
[09:29:22.266]                             break
[09:29:22.266]                           }
[09:29:22.266]                         }
[09:29:22.266]                       }
[09:29:22.266]                       invisible(muffled)
[09:29:22.266]                     }
[09:29:22.266]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.266]                   }
[09:29:22.266]                 }
[09:29:22.266]             }
[09:29:22.266]         }))
[09:29:22.266]     }, error = function(ex) {
[09:29:22.266]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.266]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.266]                 ...future.rng), started = ...future.startTime, 
[09:29:22.266]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.266]             version = "1.8"), class = "FutureResult")
[09:29:22.266]     }, finally = {
[09:29:22.266]         if (!identical(...future.workdir, getwd())) 
[09:29:22.266]             setwd(...future.workdir)
[09:29:22.266]         {
[09:29:22.266]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.266]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.266]             }
[09:29:22.266]             base::options(...future.oldOptions)
[09:29:22.266]             if (.Platform$OS.type == "windows") {
[09:29:22.266]                 old_names <- names(...future.oldEnvVars)
[09:29:22.266]                 envs <- base::Sys.getenv()
[09:29:22.266]                 names <- names(envs)
[09:29:22.266]                 common <- intersect(names, old_names)
[09:29:22.266]                 added <- setdiff(names, old_names)
[09:29:22.266]                 removed <- setdiff(old_names, names)
[09:29:22.266]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.266]                   envs[common]]
[09:29:22.266]                 NAMES <- toupper(changed)
[09:29:22.266]                 args <- list()
[09:29:22.266]                 for (kk in seq_along(NAMES)) {
[09:29:22.266]                   name <- changed[[kk]]
[09:29:22.266]                   NAME <- NAMES[[kk]]
[09:29:22.266]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.266]                     next
[09:29:22.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.266]                 }
[09:29:22.266]                 NAMES <- toupper(added)
[09:29:22.266]                 for (kk in seq_along(NAMES)) {
[09:29:22.266]                   name <- added[[kk]]
[09:29:22.266]                   NAME <- NAMES[[kk]]
[09:29:22.266]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.266]                     next
[09:29:22.266]                   args[[name]] <- ""
[09:29:22.266]                 }
[09:29:22.266]                 NAMES <- toupper(removed)
[09:29:22.266]                 for (kk in seq_along(NAMES)) {
[09:29:22.266]                   name <- removed[[kk]]
[09:29:22.266]                   NAME <- NAMES[[kk]]
[09:29:22.266]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.266]                     next
[09:29:22.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.266]                 }
[09:29:22.266]                 if (length(args) > 0) 
[09:29:22.266]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.266]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.266]             }
[09:29:22.266]             else {
[09:29:22.266]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.266]             }
[09:29:22.266]             {
[09:29:22.266]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.266]                   0L) {
[09:29:22.266]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.266]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.266]                   base::options(opts)
[09:29:22.266]                 }
[09:29:22.266]                 {
[09:29:22.266]                   {
[09:29:22.266]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.266]                     NULL
[09:29:22.266]                   }
[09:29:22.266]                   options(future.plan = NULL)
[09:29:22.266]                   if (is.na(NA_character_)) 
[09:29:22.266]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.266]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.266]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.266]                     .init = FALSE)
[09:29:22.266]                 }
[09:29:22.266]             }
[09:29:22.266]         }
[09:29:22.266]     })
[09:29:22.266]     if (TRUE) {
[09:29:22.266]         base::sink(type = "output", split = FALSE)
[09:29:22.266]         if (TRUE) {
[09:29:22.266]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.266]         }
[09:29:22.266]         else {
[09:29:22.266]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.266]         }
[09:29:22.266]         base::close(...future.stdout)
[09:29:22.266]         ...future.stdout <- NULL
[09:29:22.266]     }
[09:29:22.266]     ...future.result$conditions <- ...future.conditions
[09:29:22.266]     ...future.result$finished <- base::Sys.time()
[09:29:22.266]     ...future.result
[09:29:22.266] }
[09:29:22.268] assign_globals() ...
[09:29:22.269] List of 5
[09:29:22.269]  $ ...future.FUN            :function (...)  
[09:29:22.269]  $ future.call.arguments    : list()
[09:29:22.269]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.269]  $ ...future.elements_ii    :List of 2
[09:29:22.269]   ..$ : int 0
[09:29:22.269]   ..$ : int 0
[09:29:22.269]  $ ...future.seeds_ii       :List of 2
[09:29:22.269]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[09:29:22.269]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[09:29:22.269]  $ ...future.globals.maxSize: NULL
[09:29:22.269]  - attr(*, "where")=List of 5
[09:29:22.269]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.269]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.269]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.269]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.269]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.269]  - attr(*, "resolved")= logi FALSE
[09:29:22.269]  - attr(*, "total_size")= num 616
[09:29:22.269]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.269]  - attr(*, "already-done")= logi TRUE
[09:29:22.274] - reassign environment for ‘...future.FUN’
[09:29:22.274] - copied ‘...future.FUN’ to environment
[09:29:22.274] - copied ‘future.call.arguments’ to environment
[09:29:22.274] - copied ‘...future.elements_ii’ to environment
[09:29:22.274] - copied ‘...future.seeds_ii’ to environment
[09:29:22.274] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.274] assign_globals() ... done
[09:29:22.274] requestCore(): workers = 2
[09:29:22.277] MulticoreFuture started
[09:29:22.277] - Launch lazy future ... done
[09:29:22.277] run() for ‘MulticoreFuture’ ... done
[09:29:22.278] Created future:
[09:29:22.278] plan(): Setting new future strategy stack:
[09:29:22.278] List of future strategies:
[09:29:22.278] 1. sequential:
[09:29:22.278]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.278]    - tweaked: FALSE
[09:29:22.278]    - call: NULL
[09:29:22.279] plan(): nbrOfWorkers() = 1
[09:29:22.282] plan(): Setting new future strategy stack:
[09:29:22.282] List of future strategies:
[09:29:22.282] 1. multicore:
[09:29:22.282]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.282]    - tweaked: FALSE
[09:29:22.282]    - call: plan(strategy)
[09:29:22.287] plan(): nbrOfWorkers() = 2
[09:29:22.278] MulticoreFuture:
[09:29:22.278] Label: ‘future_replicate-1’
[09:29:22.278] Expression:
[09:29:22.278] {
[09:29:22.278]     do.call(function(...) {
[09:29:22.278]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.278]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.278]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.278]             on.exit(options(oopts), add = TRUE)
[09:29:22.278]         }
[09:29:22.278]         {
[09:29:22.278]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.278]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.278]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.278]                   envir = globalenv(), inherits = FALSE)
[09:29:22.278]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.278]             })
[09:29:22.278]         }
[09:29:22.278]     }, args = future.call.arguments)
[09:29:22.278] }
[09:29:22.278] Lazy evaluation: FALSE
[09:29:22.278] Asynchronous evaluation: TRUE
[09:29:22.278] Local evaluation: TRUE
[09:29:22.278] Environment: R_GlobalEnv
[09:29:22.278] Capture standard output: TRUE
[09:29:22.278] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.278] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.278] Packages: <none>
[09:29:22.278] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.278] Resolved: TRUE
[09:29:22.278] Value: <not collected>
[09:29:22.278] Conditions captured: <none>
[09:29:22.278] Early signaling: FALSE
[09:29:22.278] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.278] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.288] Chunk #1 of 2 ... DONE
[09:29:22.288] Chunk #2 of 2 ...
[09:29:22.288]  - Finding globals in 'X' for chunk #2 ...
[09:29:22.289] getGlobalsAndPackages() ...
[09:29:22.289] Searching for globals...
[09:29:22.289] 
[09:29:22.289] Searching for globals ... DONE
[09:29:22.290] - globals: [0] <none>
[09:29:22.290] getGlobalsAndPackages() ... DONE
[09:29:22.290]    + additional globals found: [n=0] 
[09:29:22.290]    + additional namespaces needed: [n=0] 
[09:29:22.290]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:22.290]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.290]  - seeds: [3] <seeds>
[09:29:22.290]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.291] getGlobalsAndPackages() ...
[09:29:22.291] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.291] Resolving globals: FALSE
[09:29:22.291] Tweak future expression to call with '...' arguments ...
[09:29:22.291] {
[09:29:22.291]     do.call(function(...) {
[09:29:22.291]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.291]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.291]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.291]             on.exit(options(oopts), add = TRUE)
[09:29:22.291]         }
[09:29:22.291]         {
[09:29:22.291]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.291]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.291]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.291]                   envir = globalenv(), inherits = FALSE)
[09:29:22.291]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.291]             })
[09:29:22.291]         }
[09:29:22.291]     }, args = future.call.arguments)
[09:29:22.291] }
[09:29:22.292] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.292] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.293] 
[09:29:22.293] getGlobalsAndPackages() ... DONE
[09:29:22.293] run() for ‘Future’ ...
[09:29:22.293] - state: ‘created’
[09:29:22.294] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.298] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.298] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.299]   - Field: ‘label’
[09:29:22.299]   - Field: ‘local’
[09:29:22.299]   - Field: ‘owner’
[09:29:22.299]   - Field: ‘envir’
[09:29:22.299]   - Field: ‘workers’
[09:29:22.299]   - Field: ‘packages’
[09:29:22.299]   - Field: ‘gc’
[09:29:22.300]   - Field: ‘job’
[09:29:22.300]   - Field: ‘conditions’
[09:29:22.300]   - Field: ‘expr’
[09:29:22.300]   - Field: ‘uuid’
[09:29:22.300]   - Field: ‘seed’
[09:29:22.300]   - Field: ‘version’
[09:29:22.300]   - Field: ‘result’
[09:29:22.301]   - Field: ‘asynchronous’
[09:29:22.301]   - Field: ‘calls’
[09:29:22.301]   - Field: ‘globals’
[09:29:22.301]   - Field: ‘stdout’
[09:29:22.301]   - Field: ‘earlySignal’
[09:29:22.301]   - Field: ‘lazy’
[09:29:22.301]   - Field: ‘state’
[09:29:22.302] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.302] - Launch lazy future ...
[09:29:22.302] Packages needed by the future expression (n = 0): <none>
[09:29:22.302] Packages needed by future strategies (n = 0): <none>
[09:29:22.303] {
[09:29:22.303]     {
[09:29:22.303]         {
[09:29:22.303]             ...future.startTime <- base::Sys.time()
[09:29:22.303]             {
[09:29:22.303]                 {
[09:29:22.303]                   {
[09:29:22.303]                     {
[09:29:22.303]                       base::local({
[09:29:22.303]                         has_future <- base::requireNamespace("future", 
[09:29:22.303]                           quietly = TRUE)
[09:29:22.303]                         if (has_future) {
[09:29:22.303]                           ns <- base::getNamespace("future")
[09:29:22.303]                           version <- ns[[".package"]][["version"]]
[09:29:22.303]                           if (is.null(version)) 
[09:29:22.303]                             version <- utils::packageVersion("future")
[09:29:22.303]                         }
[09:29:22.303]                         else {
[09:29:22.303]                           version <- NULL
[09:29:22.303]                         }
[09:29:22.303]                         if (!has_future || version < "1.8.0") {
[09:29:22.303]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.303]                             "", base::R.version$version.string), 
[09:29:22.303]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.303]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.303]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.303]                               "release", "version")], collapse = " "), 
[09:29:22.303]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.303]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.303]                             info)
[09:29:22.303]                           info <- base::paste(info, collapse = "; ")
[09:29:22.303]                           if (!has_future) {
[09:29:22.303]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.303]                               info)
[09:29:22.303]                           }
[09:29:22.303]                           else {
[09:29:22.303]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.303]                               info, version)
[09:29:22.303]                           }
[09:29:22.303]                           base::stop(msg)
[09:29:22.303]                         }
[09:29:22.303]                       })
[09:29:22.303]                     }
[09:29:22.303]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.303]                     base::options(mc.cores = 1L)
[09:29:22.303]                   }
[09:29:22.303]                   ...future.strategy.old <- future::plan("list")
[09:29:22.303]                   options(future.plan = NULL)
[09:29:22.303]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.303]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.303]                 }
[09:29:22.303]                 ...future.workdir <- getwd()
[09:29:22.303]             }
[09:29:22.303]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.303]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.303]         }
[09:29:22.303]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.303]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.303]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.303]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.303]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.303]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.303]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.303]             base::names(...future.oldOptions))
[09:29:22.303]     }
[09:29:22.303]     if (FALSE) {
[09:29:22.303]     }
[09:29:22.303]     else {
[09:29:22.303]         if (TRUE) {
[09:29:22.303]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.303]                 open = "w")
[09:29:22.303]         }
[09:29:22.303]         else {
[09:29:22.303]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.303]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.303]         }
[09:29:22.303]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.303]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.303]             base::sink(type = "output", split = FALSE)
[09:29:22.303]             base::close(...future.stdout)
[09:29:22.303]         }, add = TRUE)
[09:29:22.303]     }
[09:29:22.303]     ...future.frame <- base::sys.nframe()
[09:29:22.303]     ...future.conditions <- base::list()
[09:29:22.303]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.303]     if (FALSE) {
[09:29:22.303]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.303]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.303]     }
[09:29:22.303]     ...future.result <- base::tryCatch({
[09:29:22.303]         base::withCallingHandlers({
[09:29:22.303]             ...future.value <- base::withVisible(base::local({
[09:29:22.303]                 withCallingHandlers({
[09:29:22.303]                   {
[09:29:22.303]                     do.call(function(...) {
[09:29:22.303]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.303]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.303]                         ...future.globals.maxSize)) {
[09:29:22.303]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.303]                         on.exit(options(oopts), add = TRUE)
[09:29:22.303]                       }
[09:29:22.303]                       {
[09:29:22.303]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.303]                           FUN = function(jj) {
[09:29:22.303]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.303]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.303]                               envir = globalenv(), inherits = FALSE)
[09:29:22.303]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.303]                           })
[09:29:22.303]                       }
[09:29:22.303]                     }, args = future.call.arguments)
[09:29:22.303]                   }
[09:29:22.303]                 }, immediateCondition = function(cond) {
[09:29:22.303]                   save_rds <- function (object, pathname, ...) 
[09:29:22.303]                   {
[09:29:22.303]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.303]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.303]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.303]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.303]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.303]                         fi_tmp[["mtime"]])
[09:29:22.303]                     }
[09:29:22.303]                     tryCatch({
[09:29:22.303]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.303]                     }, error = function(ex) {
[09:29:22.303]                       msg <- conditionMessage(ex)
[09:29:22.303]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.303]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.303]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.303]                         fi_tmp[["mtime"]], msg)
[09:29:22.303]                       ex$message <- msg
[09:29:22.303]                       stop(ex)
[09:29:22.303]                     })
[09:29:22.303]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.303]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.303]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.303]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.303]                       fi <- file.info(pathname)
[09:29:22.303]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.303]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.303]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.303]                         fi[["size"]], fi[["mtime"]])
[09:29:22.303]                       stop(msg)
[09:29:22.303]                     }
[09:29:22.303]                     invisible(pathname)
[09:29:22.303]                   }
[09:29:22.303]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.303]                     rootPath = tempdir()) 
[09:29:22.303]                   {
[09:29:22.303]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.303]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.303]                       tmpdir = path, fileext = ".rds")
[09:29:22.303]                     save_rds(obj, file)
[09:29:22.303]                   }
[09:29:22.303]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.303]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.303]                   {
[09:29:22.303]                     inherits <- base::inherits
[09:29:22.303]                     invokeRestart <- base::invokeRestart
[09:29:22.303]                     is.null <- base::is.null
[09:29:22.303]                     muffled <- FALSE
[09:29:22.303]                     if (inherits(cond, "message")) {
[09:29:22.303]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.303]                       if (muffled) 
[09:29:22.303]                         invokeRestart("muffleMessage")
[09:29:22.303]                     }
[09:29:22.303]                     else if (inherits(cond, "warning")) {
[09:29:22.303]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.303]                       if (muffled) 
[09:29:22.303]                         invokeRestart("muffleWarning")
[09:29:22.303]                     }
[09:29:22.303]                     else if (inherits(cond, "condition")) {
[09:29:22.303]                       if (!is.null(pattern)) {
[09:29:22.303]                         computeRestarts <- base::computeRestarts
[09:29:22.303]                         grepl <- base::grepl
[09:29:22.303]                         restarts <- computeRestarts(cond)
[09:29:22.303]                         for (restart in restarts) {
[09:29:22.303]                           name <- restart$name
[09:29:22.303]                           if (is.null(name)) 
[09:29:22.303]                             next
[09:29:22.303]                           if (!grepl(pattern, name)) 
[09:29:22.303]                             next
[09:29:22.303]                           invokeRestart(restart)
[09:29:22.303]                           muffled <- TRUE
[09:29:22.303]                           break
[09:29:22.303]                         }
[09:29:22.303]                       }
[09:29:22.303]                     }
[09:29:22.303]                     invisible(muffled)
[09:29:22.303]                   }
[09:29:22.303]                   muffleCondition(cond)
[09:29:22.303]                 })
[09:29:22.303]             }))
[09:29:22.303]             future::FutureResult(value = ...future.value$value, 
[09:29:22.303]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.303]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.303]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.303]                     ...future.globalenv.names))
[09:29:22.303]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.303]         }, condition = base::local({
[09:29:22.303]             c <- base::c
[09:29:22.303]             inherits <- base::inherits
[09:29:22.303]             invokeRestart <- base::invokeRestart
[09:29:22.303]             length <- base::length
[09:29:22.303]             list <- base::list
[09:29:22.303]             seq.int <- base::seq.int
[09:29:22.303]             signalCondition <- base::signalCondition
[09:29:22.303]             sys.calls <- base::sys.calls
[09:29:22.303]             `[[` <- base::`[[`
[09:29:22.303]             `+` <- base::`+`
[09:29:22.303]             `<<-` <- base::`<<-`
[09:29:22.303]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.303]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.303]                   3L)]
[09:29:22.303]             }
[09:29:22.303]             function(cond) {
[09:29:22.303]                 is_error <- inherits(cond, "error")
[09:29:22.303]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.303]                   NULL)
[09:29:22.303]                 if (is_error) {
[09:29:22.303]                   sessionInformation <- function() {
[09:29:22.303]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.303]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.303]                       search = base::search(), system = base::Sys.info())
[09:29:22.303]                   }
[09:29:22.303]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.303]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.303]                     cond$call), session = sessionInformation(), 
[09:29:22.303]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.303]                   signalCondition(cond)
[09:29:22.303]                 }
[09:29:22.303]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.303]                 "immediateCondition"))) {
[09:29:22.303]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.303]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.303]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.303]                   if (TRUE && !signal) {
[09:29:22.303]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.303]                     {
[09:29:22.303]                       inherits <- base::inherits
[09:29:22.303]                       invokeRestart <- base::invokeRestart
[09:29:22.303]                       is.null <- base::is.null
[09:29:22.303]                       muffled <- FALSE
[09:29:22.303]                       if (inherits(cond, "message")) {
[09:29:22.303]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.303]                         if (muffled) 
[09:29:22.303]                           invokeRestart("muffleMessage")
[09:29:22.303]                       }
[09:29:22.303]                       else if (inherits(cond, "warning")) {
[09:29:22.303]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.303]                         if (muffled) 
[09:29:22.303]                           invokeRestart("muffleWarning")
[09:29:22.303]                       }
[09:29:22.303]                       else if (inherits(cond, "condition")) {
[09:29:22.303]                         if (!is.null(pattern)) {
[09:29:22.303]                           computeRestarts <- base::computeRestarts
[09:29:22.303]                           grepl <- base::grepl
[09:29:22.303]                           restarts <- computeRestarts(cond)
[09:29:22.303]                           for (restart in restarts) {
[09:29:22.303]                             name <- restart$name
[09:29:22.303]                             if (is.null(name)) 
[09:29:22.303]                               next
[09:29:22.303]                             if (!grepl(pattern, name)) 
[09:29:22.303]                               next
[09:29:22.303]                             invokeRestart(restart)
[09:29:22.303]                             muffled <- TRUE
[09:29:22.303]                             break
[09:29:22.303]                           }
[09:29:22.303]                         }
[09:29:22.303]                       }
[09:29:22.303]                       invisible(muffled)
[09:29:22.303]                     }
[09:29:22.303]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.303]                   }
[09:29:22.303]                 }
[09:29:22.303]                 else {
[09:29:22.303]                   if (TRUE) {
[09:29:22.303]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.303]                     {
[09:29:22.303]                       inherits <- base::inherits
[09:29:22.303]                       invokeRestart <- base::invokeRestart
[09:29:22.303]                       is.null <- base::is.null
[09:29:22.303]                       muffled <- FALSE
[09:29:22.303]                       if (inherits(cond, "message")) {
[09:29:22.303]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.303]                         if (muffled) 
[09:29:22.303]                           invokeRestart("muffleMessage")
[09:29:22.303]                       }
[09:29:22.303]                       else if (inherits(cond, "warning")) {
[09:29:22.303]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.303]                         if (muffled) 
[09:29:22.303]                           invokeRestart("muffleWarning")
[09:29:22.303]                       }
[09:29:22.303]                       else if (inherits(cond, "condition")) {
[09:29:22.303]                         if (!is.null(pattern)) {
[09:29:22.303]                           computeRestarts <- base::computeRestarts
[09:29:22.303]                           grepl <- base::grepl
[09:29:22.303]                           restarts <- computeRestarts(cond)
[09:29:22.303]                           for (restart in restarts) {
[09:29:22.303]                             name <- restart$name
[09:29:22.303]                             if (is.null(name)) 
[09:29:22.303]                               next
[09:29:22.303]                             if (!grepl(pattern, name)) 
[09:29:22.303]                               next
[09:29:22.303]                             invokeRestart(restart)
[09:29:22.303]                             muffled <- TRUE
[09:29:22.303]                             break
[09:29:22.303]                           }
[09:29:22.303]                         }
[09:29:22.303]                       }
[09:29:22.303]                       invisible(muffled)
[09:29:22.303]                     }
[09:29:22.303]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.303]                   }
[09:29:22.303]                 }
[09:29:22.303]             }
[09:29:22.303]         }))
[09:29:22.303]     }, error = function(ex) {
[09:29:22.303]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.303]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.303]                 ...future.rng), started = ...future.startTime, 
[09:29:22.303]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.303]             version = "1.8"), class = "FutureResult")
[09:29:22.303]     }, finally = {
[09:29:22.303]         if (!identical(...future.workdir, getwd())) 
[09:29:22.303]             setwd(...future.workdir)
[09:29:22.303]         {
[09:29:22.303]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.303]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.303]             }
[09:29:22.303]             base::options(...future.oldOptions)
[09:29:22.303]             if (.Platform$OS.type == "windows") {
[09:29:22.303]                 old_names <- names(...future.oldEnvVars)
[09:29:22.303]                 envs <- base::Sys.getenv()
[09:29:22.303]                 names <- names(envs)
[09:29:22.303]                 common <- intersect(names, old_names)
[09:29:22.303]                 added <- setdiff(names, old_names)
[09:29:22.303]                 removed <- setdiff(old_names, names)
[09:29:22.303]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.303]                   envs[common]]
[09:29:22.303]                 NAMES <- toupper(changed)
[09:29:22.303]                 args <- list()
[09:29:22.303]                 for (kk in seq_along(NAMES)) {
[09:29:22.303]                   name <- changed[[kk]]
[09:29:22.303]                   NAME <- NAMES[[kk]]
[09:29:22.303]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.303]                     next
[09:29:22.303]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.303]                 }
[09:29:22.303]                 NAMES <- toupper(added)
[09:29:22.303]                 for (kk in seq_along(NAMES)) {
[09:29:22.303]                   name <- added[[kk]]
[09:29:22.303]                   NAME <- NAMES[[kk]]
[09:29:22.303]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.303]                     next
[09:29:22.303]                   args[[name]] <- ""
[09:29:22.303]                 }
[09:29:22.303]                 NAMES <- toupper(removed)
[09:29:22.303]                 for (kk in seq_along(NAMES)) {
[09:29:22.303]                   name <- removed[[kk]]
[09:29:22.303]                   NAME <- NAMES[[kk]]
[09:29:22.303]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.303]                     next
[09:29:22.303]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.303]                 }
[09:29:22.303]                 if (length(args) > 0) 
[09:29:22.303]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.303]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.303]             }
[09:29:22.303]             else {
[09:29:22.303]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.303]             }
[09:29:22.303]             {
[09:29:22.303]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.303]                   0L) {
[09:29:22.303]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.303]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.303]                   base::options(opts)
[09:29:22.303]                 }
[09:29:22.303]                 {
[09:29:22.303]                   {
[09:29:22.303]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.303]                     NULL
[09:29:22.303]                   }
[09:29:22.303]                   options(future.plan = NULL)
[09:29:22.303]                   if (is.na(NA_character_)) 
[09:29:22.303]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.303]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.303]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.303]                     .init = FALSE)
[09:29:22.303]                 }
[09:29:22.303]             }
[09:29:22.303]         }
[09:29:22.303]     })
[09:29:22.303]     if (TRUE) {
[09:29:22.303]         base::sink(type = "output", split = FALSE)
[09:29:22.303]         if (TRUE) {
[09:29:22.303]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.303]         }
[09:29:22.303]         else {
[09:29:22.303]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.303]         }
[09:29:22.303]         base::close(...future.stdout)
[09:29:22.303]         ...future.stdout <- NULL
[09:29:22.303]     }
[09:29:22.303]     ...future.result$conditions <- ...future.conditions
[09:29:22.303]     ...future.result$finished <- base::Sys.time()
[09:29:22.303]     ...future.result
[09:29:22.303] }
[09:29:22.306] assign_globals() ...
[09:29:22.306] List of 5
[09:29:22.306]  $ ...future.FUN            :function (...)  
[09:29:22.306]  $ future.call.arguments    : list()
[09:29:22.306]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.306]  $ ...future.elements_ii    :List of 3
[09:29:22.306]   ..$ : int 0
[09:29:22.306]   ..$ : int 0
[09:29:22.306]   ..$ : int 0
[09:29:22.306]  $ ...future.seeds_ii       :List of 3
[09:29:22.306]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[09:29:22.306]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[09:29:22.306]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[09:29:22.306]  $ ...future.globals.maxSize: NULL
[09:29:22.306]  - attr(*, "where")=List of 5
[09:29:22.306]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.306]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.306]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.306]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.306]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.306]  - attr(*, "resolved")= logi FALSE
[09:29:22.306]  - attr(*, "total_size")= num 616
[09:29:22.306]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.306]  - attr(*, "already-done")= logi TRUE
[09:29:22.319] - reassign environment for ‘...future.FUN’
[09:29:22.319] - copied ‘...future.FUN’ to environment
[09:29:22.319] - copied ‘future.call.arguments’ to environment
[09:29:22.319] - copied ‘...future.elements_ii’ to environment
[09:29:22.320] - copied ‘...future.seeds_ii’ to environment
[09:29:22.320] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.320] assign_globals() ... done
[09:29:22.320] requestCore(): workers = 2
[09:29:22.322] MulticoreFuture started
[09:29:22.323] - Launch lazy future ... done
[09:29:22.323] run() for ‘MulticoreFuture’ ... done
[09:29:22.323] Created future:
[09:29:22.324] plan(): Setting new future strategy stack:
[09:29:22.324] List of future strategies:
[09:29:22.324] 1. sequential:
[09:29:22.324]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.324]    - tweaked: FALSE
[09:29:22.324]    - call: NULL
[09:29:22.325] plan(): nbrOfWorkers() = 1
[09:29:22.328] plan(): Setting new future strategy stack:
[09:29:22.328] List of future strategies:
[09:29:22.328] 1. multicore:
[09:29:22.328]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.328]    - tweaked: FALSE
[09:29:22.328]    - call: plan(strategy)
[09:29:22.333] plan(): nbrOfWorkers() = 2
[09:29:22.324] MulticoreFuture:
[09:29:22.324] Label: ‘future_replicate-2’
[09:29:22.324] Expression:
[09:29:22.324] {
[09:29:22.324]     do.call(function(...) {
[09:29:22.324]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.324]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.324]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.324]             on.exit(options(oopts), add = TRUE)
[09:29:22.324]         }
[09:29:22.324]         {
[09:29:22.324]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.324]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.324]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.324]                   envir = globalenv(), inherits = FALSE)
[09:29:22.324]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.324]             })
[09:29:22.324]         }
[09:29:22.324]     }, args = future.call.arguments)
[09:29:22.324] }
[09:29:22.324] Lazy evaluation: FALSE
[09:29:22.324] Asynchronous evaluation: TRUE
[09:29:22.324] Local evaluation: TRUE
[09:29:22.324] Environment: R_GlobalEnv
[09:29:22.324] Capture standard output: TRUE
[09:29:22.324] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.324] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.324] Packages: <none>
[09:29:22.324] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.324] Resolved: TRUE
[09:29:22.324] Value: <not collected>
[09:29:22.324] Conditions captured: <none>
[09:29:22.324] Early signaling: FALSE
[09:29:22.324] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.324] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.334] Chunk #2 of 2 ... DONE
[09:29:22.334] Launching 2 futures (chunks) ... DONE
[09:29:22.334] Resolving 2 futures (chunks) ...
[09:29:22.334] resolve() on list ...
[09:29:22.335]  recursive: 0
[09:29:22.335]  length: 2
[09:29:22.335] 
[09:29:22.335] Future #1
[09:29:22.335] result() for MulticoreFuture ...
[09:29:22.336] result() for MulticoreFuture ...
[09:29:22.336] result() for MulticoreFuture ... done
[09:29:22.337] result() for MulticoreFuture ... done
[09:29:22.337] result() for MulticoreFuture ...
[09:29:22.337] result() for MulticoreFuture ... done
[09:29:22.337] signalConditionsASAP(MulticoreFuture, pos=1) ...
[09:29:22.337] - nx: 2
[09:29:22.337] - relay: TRUE
[09:29:22.337] - stdout: TRUE
[09:29:22.338] - signal: TRUE
[09:29:22.338] - resignal: FALSE
[09:29:22.338] - force: TRUE
[09:29:22.338] - relayed: [n=2] FALSE, FALSE
[09:29:22.338] - queued futures: [n=2] FALSE, FALSE
[09:29:22.338]  - until=1
[09:29:22.338]  - relaying element #1
[09:29:22.339] result() for MulticoreFuture ...
[09:29:22.339] result() for MulticoreFuture ... done
[09:29:22.339] result() for MulticoreFuture ...
[09:29:22.339] result() for MulticoreFuture ... done
[09:29:22.339] result() for MulticoreFuture ...
[09:29:22.339] result() for MulticoreFuture ... done
[09:29:22.340] result() for MulticoreFuture ...
[09:29:22.340] result() for MulticoreFuture ... done
[09:29:22.340] - relayed: [n=2] TRUE, FALSE
[09:29:22.340] - queued futures: [n=2] TRUE, FALSE
[09:29:22.340] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[09:29:22.340]  length: 1 (resolved future 1)
[09:29:22.341] Future #2
[09:29:22.341] result() for MulticoreFuture ...
[09:29:22.342] result() for MulticoreFuture ...
[09:29:22.342] result() for MulticoreFuture ... done
[09:29:22.342] result() for MulticoreFuture ... done
[09:29:22.342] result() for MulticoreFuture ...
[09:29:22.342] result() for MulticoreFuture ... done
[09:29:22.342] signalConditionsASAP(MulticoreFuture, pos=2) ...
[09:29:22.342] - nx: 2
[09:29:22.343] - relay: TRUE
[09:29:22.343] - stdout: TRUE
[09:29:22.343] - signal: TRUE
[09:29:22.343] - resignal: FALSE
[09:29:22.343] - force: TRUE
[09:29:22.343] - relayed: [n=2] TRUE, FALSE
[09:29:22.343] - queued futures: [n=2] TRUE, FALSE
[09:29:22.343]  - until=2
[09:29:22.344]  - relaying element #2
[09:29:22.344] result() for MulticoreFuture ...
[09:29:22.344] result() for MulticoreFuture ... done
[09:29:22.344] result() for MulticoreFuture ...
[09:29:22.344] result() for MulticoreFuture ... done
[09:29:22.344] result() for MulticoreFuture ...
[09:29:22.344] result() for MulticoreFuture ... done
[09:29:22.344] result() for MulticoreFuture ...
[09:29:22.345] result() for MulticoreFuture ... done
[09:29:22.345] - relayed: [n=2] TRUE, TRUE
[09:29:22.345] - queued futures: [n=2] TRUE, TRUE
[09:29:22.345] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[09:29:22.345]  length: 0 (resolved future 2)
[09:29:22.345] Relaying remaining futures
[09:29:22.345] signalConditionsASAP(NULL, pos=0) ...
[09:29:22.345] - nx: 2
[09:29:22.345] - relay: TRUE
[09:29:22.346] - stdout: TRUE
[09:29:22.346] - signal: TRUE
[09:29:22.346] - resignal: FALSE
[09:29:22.346] - force: TRUE
[09:29:22.346] - relayed: [n=2] TRUE, TRUE
[09:29:22.346] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:22.346] - relayed: [n=2] TRUE, TRUE
[09:29:22.346] - queued futures: [n=2] TRUE, TRUE
[09:29:22.346] signalConditionsASAP(NULL, pos=0) ... done
[09:29:22.347] resolve() on list ... DONE
[09:29:22.347] result() for MulticoreFuture ...
[09:29:22.347] result() for MulticoreFuture ... done
[09:29:22.347] result() for MulticoreFuture ...
[09:29:22.347] result() for MulticoreFuture ... done
[09:29:22.347] result() for MulticoreFuture ...
[09:29:22.347] result() for MulticoreFuture ... done
[09:29:22.347] result() for MulticoreFuture ...
[09:29:22.347] result() for MulticoreFuture ... done
[09:29:22.348]  - Number of value chunks collected: 2
[09:29:22.348] Resolving 2 futures (chunks) ... DONE
[09:29:22.348] Reducing values from 2 chunks ...
[09:29:22.348]  - Number of values collected after concatenation: 5
[09:29:22.348]  - Number of values expected: 5
[09:29:22.348] Reducing values from 2 chunks ... DONE
[09:29:22.348] future_lapply() ... DONE
[09:29:22.348] future_lapply() ...
[09:29:22.349] Generating random seeds ...
[09:29:22.349] Generating random seed streams for 5 elements ...
[09:29:22.349] Generating random seed streams for 5 elements ... DONE
[09:29:22.349] Generating random seeds ... DONE
[09:29:22.350] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:22.354] Number of chunks: 2
[09:29:22.354] getGlobalsAndPackagesXApply() ...
[09:29:22.354]  - future.globals: TRUE
[09:29:22.354] getGlobalsAndPackages() ...
[09:29:22.354] Searching for globals...
[09:29:22.356] - globals found: [2] ‘FUN’, ‘sample’
[09:29:22.356] Searching for globals ... DONE
[09:29:22.356] Resolving globals: FALSE
[09:29:22.356] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:22.357] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:22.357] - globals: [1] ‘FUN’
[09:29:22.357] 
[09:29:22.357] getGlobalsAndPackages() ... DONE
[09:29:22.357]  - globals found/used: [n=1] ‘FUN’
[09:29:22.357]  - needed namespaces: [n=0] 
[09:29:22.357] Finding globals ... DONE
[09:29:22.358]  - use_args: TRUE
[09:29:22.358]  - Getting '...' globals ...
[09:29:22.358] resolve() on list ...
[09:29:22.358]  recursive: 0
[09:29:22.358]  length: 1
[09:29:22.358]  elements: ‘...’
[09:29:22.358]  length: 0 (resolved future 1)
[09:29:22.359] resolve() on list ... DONE
[09:29:22.359]    - '...' content: [n=0] 
[09:29:22.359] List of 1
[09:29:22.359]  $ ...: list()
[09:29:22.359]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.359]  - attr(*, "where")=List of 1
[09:29:22.359]   ..$ ...:<environment: 0x55d1cb65e640> 
[09:29:22.359]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.359]  - attr(*, "resolved")= logi TRUE
[09:29:22.359]  - attr(*, "total_size")= num NA
[09:29:22.363]  - Getting '...' globals ... DONE
[09:29:22.364] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:22.364] List of 2
[09:29:22.364]  $ ...future.FUN:function (...)  
[09:29:22.364]  $ ...          : list()
[09:29:22.364]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.364]  - attr(*, "where")=List of 2
[09:29:22.364]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:22.364]   ..$ ...          :<environment: 0x55d1cb65e640> 
[09:29:22.364]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.364]  - attr(*, "resolved")= logi FALSE
[09:29:22.364]  - attr(*, "total_size")= num 616
[09:29:22.367] Packages to be attached in all futures: [n=0] 
[09:29:22.367] getGlobalsAndPackagesXApply() ... DONE
[09:29:22.367] Number of futures (= number of chunks): 2
[09:29:22.367] Launching 2 futures (chunks) ...
[09:29:22.367] Chunk #1 of 2 ...
[09:29:22.368]  - Finding globals in 'X' for chunk #1 ...
[09:29:22.368] getGlobalsAndPackages() ...
[09:29:22.368] Searching for globals...
[09:29:22.368] 
[09:29:22.368] Searching for globals ... DONE
[09:29:22.368] - globals: [0] <none>
[09:29:22.368] getGlobalsAndPackages() ... DONE
[09:29:22.368]    + additional globals found: [n=0] 
[09:29:22.369]    + additional namespaces needed: [n=0] 
[09:29:22.369]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:22.369]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.369]  - seeds: [2] <seeds>
[09:29:22.369]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.369] getGlobalsAndPackages() ...
[09:29:22.369] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.369] Resolving globals: FALSE
[09:29:22.369] Tweak future expression to call with '...' arguments ...
[09:29:22.369] {
[09:29:22.369]     do.call(function(...) {
[09:29:22.369]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.369]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.369]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.369]             on.exit(options(oopts), add = TRUE)
[09:29:22.369]         }
[09:29:22.369]         {
[09:29:22.369]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.369]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.369]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.369]                   envir = globalenv(), inherits = FALSE)
[09:29:22.369]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.369]             })
[09:29:22.369]         }
[09:29:22.369]     }, args = future.call.arguments)
[09:29:22.369] }
[09:29:22.370] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.370] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.370] 
[09:29:22.370] getGlobalsAndPackages() ... DONE
[09:29:22.371] run() for ‘Future’ ...
[09:29:22.371] - state: ‘created’
[09:29:22.371] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.374] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.374] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.375]   - Field: ‘label’
[09:29:22.375]   - Field: ‘local’
[09:29:22.375]   - Field: ‘owner’
[09:29:22.375]   - Field: ‘envir’
[09:29:22.375]   - Field: ‘workers’
[09:29:22.375]   - Field: ‘packages’
[09:29:22.375]   - Field: ‘gc’
[09:29:22.375]   - Field: ‘job’
[09:29:22.375]   - Field: ‘conditions’
[09:29:22.375]   - Field: ‘expr’
[09:29:22.376]   - Field: ‘uuid’
[09:29:22.376]   - Field: ‘seed’
[09:29:22.376]   - Field: ‘version’
[09:29:22.376]   - Field: ‘result’
[09:29:22.376]   - Field: ‘asynchronous’
[09:29:22.376]   - Field: ‘calls’
[09:29:22.376]   - Field: ‘globals’
[09:29:22.376]   - Field: ‘stdout’
[09:29:22.376]   - Field: ‘earlySignal’
[09:29:22.376]   - Field: ‘lazy’
[09:29:22.376]   - Field: ‘state’
[09:29:22.377] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.377] - Launch lazy future ...
[09:29:22.377] Packages needed by the future expression (n = 0): <none>
[09:29:22.377] Packages needed by future strategies (n = 0): <none>
[09:29:22.377] {
[09:29:22.377]     {
[09:29:22.377]         {
[09:29:22.377]             ...future.startTime <- base::Sys.time()
[09:29:22.377]             {
[09:29:22.377]                 {
[09:29:22.377]                   {
[09:29:22.377]                     {
[09:29:22.377]                       base::local({
[09:29:22.377]                         has_future <- base::requireNamespace("future", 
[09:29:22.377]                           quietly = TRUE)
[09:29:22.377]                         if (has_future) {
[09:29:22.377]                           ns <- base::getNamespace("future")
[09:29:22.377]                           version <- ns[[".package"]][["version"]]
[09:29:22.377]                           if (is.null(version)) 
[09:29:22.377]                             version <- utils::packageVersion("future")
[09:29:22.377]                         }
[09:29:22.377]                         else {
[09:29:22.377]                           version <- NULL
[09:29:22.377]                         }
[09:29:22.377]                         if (!has_future || version < "1.8.0") {
[09:29:22.377]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.377]                             "", base::R.version$version.string), 
[09:29:22.377]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.377]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.377]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.377]                               "release", "version")], collapse = " "), 
[09:29:22.377]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.377]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.377]                             info)
[09:29:22.377]                           info <- base::paste(info, collapse = "; ")
[09:29:22.377]                           if (!has_future) {
[09:29:22.377]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.377]                               info)
[09:29:22.377]                           }
[09:29:22.377]                           else {
[09:29:22.377]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.377]                               info, version)
[09:29:22.377]                           }
[09:29:22.377]                           base::stop(msg)
[09:29:22.377]                         }
[09:29:22.377]                       })
[09:29:22.377]                     }
[09:29:22.377]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.377]                     base::options(mc.cores = 1L)
[09:29:22.377]                   }
[09:29:22.377]                   ...future.strategy.old <- future::plan("list")
[09:29:22.377]                   options(future.plan = NULL)
[09:29:22.377]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.377]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.377]                 }
[09:29:22.377]                 ...future.workdir <- getwd()
[09:29:22.377]             }
[09:29:22.377]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.377]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.377]         }
[09:29:22.377]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.377]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.377]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.377]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.377]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.377]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.377]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.377]             base::names(...future.oldOptions))
[09:29:22.377]     }
[09:29:22.377]     if (FALSE) {
[09:29:22.377]     }
[09:29:22.377]     else {
[09:29:22.377]         if (TRUE) {
[09:29:22.377]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.377]                 open = "w")
[09:29:22.377]         }
[09:29:22.377]         else {
[09:29:22.377]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.377]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.377]         }
[09:29:22.377]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.377]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.377]             base::sink(type = "output", split = FALSE)
[09:29:22.377]             base::close(...future.stdout)
[09:29:22.377]         }, add = TRUE)
[09:29:22.377]     }
[09:29:22.377]     ...future.frame <- base::sys.nframe()
[09:29:22.377]     ...future.conditions <- base::list()
[09:29:22.377]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.377]     if (FALSE) {
[09:29:22.377]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.377]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.377]     }
[09:29:22.377]     ...future.result <- base::tryCatch({
[09:29:22.377]         base::withCallingHandlers({
[09:29:22.377]             ...future.value <- base::withVisible(base::local({
[09:29:22.377]                 withCallingHandlers({
[09:29:22.377]                   {
[09:29:22.377]                     do.call(function(...) {
[09:29:22.377]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.377]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.377]                         ...future.globals.maxSize)) {
[09:29:22.377]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.377]                         on.exit(options(oopts), add = TRUE)
[09:29:22.377]                       }
[09:29:22.377]                       {
[09:29:22.377]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.377]                           FUN = function(jj) {
[09:29:22.377]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.377]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.377]                               envir = globalenv(), inherits = FALSE)
[09:29:22.377]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.377]                           })
[09:29:22.377]                       }
[09:29:22.377]                     }, args = future.call.arguments)
[09:29:22.377]                   }
[09:29:22.377]                 }, immediateCondition = function(cond) {
[09:29:22.377]                   save_rds <- function (object, pathname, ...) 
[09:29:22.377]                   {
[09:29:22.377]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.377]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.377]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.377]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.377]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.377]                         fi_tmp[["mtime"]])
[09:29:22.377]                     }
[09:29:22.377]                     tryCatch({
[09:29:22.377]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.377]                     }, error = function(ex) {
[09:29:22.377]                       msg <- conditionMessage(ex)
[09:29:22.377]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.377]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.377]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.377]                         fi_tmp[["mtime"]], msg)
[09:29:22.377]                       ex$message <- msg
[09:29:22.377]                       stop(ex)
[09:29:22.377]                     })
[09:29:22.377]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.377]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.377]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.377]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.377]                       fi <- file.info(pathname)
[09:29:22.377]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.377]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.377]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.377]                         fi[["size"]], fi[["mtime"]])
[09:29:22.377]                       stop(msg)
[09:29:22.377]                     }
[09:29:22.377]                     invisible(pathname)
[09:29:22.377]                   }
[09:29:22.377]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.377]                     rootPath = tempdir()) 
[09:29:22.377]                   {
[09:29:22.377]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.377]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.377]                       tmpdir = path, fileext = ".rds")
[09:29:22.377]                     save_rds(obj, file)
[09:29:22.377]                   }
[09:29:22.377]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.377]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.377]                   {
[09:29:22.377]                     inherits <- base::inherits
[09:29:22.377]                     invokeRestart <- base::invokeRestart
[09:29:22.377]                     is.null <- base::is.null
[09:29:22.377]                     muffled <- FALSE
[09:29:22.377]                     if (inherits(cond, "message")) {
[09:29:22.377]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.377]                       if (muffled) 
[09:29:22.377]                         invokeRestart("muffleMessage")
[09:29:22.377]                     }
[09:29:22.377]                     else if (inherits(cond, "warning")) {
[09:29:22.377]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.377]                       if (muffled) 
[09:29:22.377]                         invokeRestart("muffleWarning")
[09:29:22.377]                     }
[09:29:22.377]                     else if (inherits(cond, "condition")) {
[09:29:22.377]                       if (!is.null(pattern)) {
[09:29:22.377]                         computeRestarts <- base::computeRestarts
[09:29:22.377]                         grepl <- base::grepl
[09:29:22.377]                         restarts <- computeRestarts(cond)
[09:29:22.377]                         for (restart in restarts) {
[09:29:22.377]                           name <- restart$name
[09:29:22.377]                           if (is.null(name)) 
[09:29:22.377]                             next
[09:29:22.377]                           if (!grepl(pattern, name)) 
[09:29:22.377]                             next
[09:29:22.377]                           invokeRestart(restart)
[09:29:22.377]                           muffled <- TRUE
[09:29:22.377]                           break
[09:29:22.377]                         }
[09:29:22.377]                       }
[09:29:22.377]                     }
[09:29:22.377]                     invisible(muffled)
[09:29:22.377]                   }
[09:29:22.377]                   muffleCondition(cond)
[09:29:22.377]                 })
[09:29:22.377]             }))
[09:29:22.377]             future::FutureResult(value = ...future.value$value, 
[09:29:22.377]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.377]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.377]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.377]                     ...future.globalenv.names))
[09:29:22.377]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.377]         }, condition = base::local({
[09:29:22.377]             c <- base::c
[09:29:22.377]             inherits <- base::inherits
[09:29:22.377]             invokeRestart <- base::invokeRestart
[09:29:22.377]             length <- base::length
[09:29:22.377]             list <- base::list
[09:29:22.377]             seq.int <- base::seq.int
[09:29:22.377]             signalCondition <- base::signalCondition
[09:29:22.377]             sys.calls <- base::sys.calls
[09:29:22.377]             `[[` <- base::`[[`
[09:29:22.377]             `+` <- base::`+`
[09:29:22.377]             `<<-` <- base::`<<-`
[09:29:22.377]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.377]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.377]                   3L)]
[09:29:22.377]             }
[09:29:22.377]             function(cond) {
[09:29:22.377]                 is_error <- inherits(cond, "error")
[09:29:22.377]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.377]                   NULL)
[09:29:22.377]                 if (is_error) {
[09:29:22.377]                   sessionInformation <- function() {
[09:29:22.377]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.377]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.377]                       search = base::search(), system = base::Sys.info())
[09:29:22.377]                   }
[09:29:22.377]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.377]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.377]                     cond$call), session = sessionInformation(), 
[09:29:22.377]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.377]                   signalCondition(cond)
[09:29:22.377]                 }
[09:29:22.377]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.377]                 "immediateCondition"))) {
[09:29:22.377]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.377]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.377]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.377]                   if (TRUE && !signal) {
[09:29:22.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.377]                     {
[09:29:22.377]                       inherits <- base::inherits
[09:29:22.377]                       invokeRestart <- base::invokeRestart
[09:29:22.377]                       is.null <- base::is.null
[09:29:22.377]                       muffled <- FALSE
[09:29:22.377]                       if (inherits(cond, "message")) {
[09:29:22.377]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.377]                         if (muffled) 
[09:29:22.377]                           invokeRestart("muffleMessage")
[09:29:22.377]                       }
[09:29:22.377]                       else if (inherits(cond, "warning")) {
[09:29:22.377]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.377]                         if (muffled) 
[09:29:22.377]                           invokeRestart("muffleWarning")
[09:29:22.377]                       }
[09:29:22.377]                       else if (inherits(cond, "condition")) {
[09:29:22.377]                         if (!is.null(pattern)) {
[09:29:22.377]                           computeRestarts <- base::computeRestarts
[09:29:22.377]                           grepl <- base::grepl
[09:29:22.377]                           restarts <- computeRestarts(cond)
[09:29:22.377]                           for (restart in restarts) {
[09:29:22.377]                             name <- restart$name
[09:29:22.377]                             if (is.null(name)) 
[09:29:22.377]                               next
[09:29:22.377]                             if (!grepl(pattern, name)) 
[09:29:22.377]                               next
[09:29:22.377]                             invokeRestart(restart)
[09:29:22.377]                             muffled <- TRUE
[09:29:22.377]                             break
[09:29:22.377]                           }
[09:29:22.377]                         }
[09:29:22.377]                       }
[09:29:22.377]                       invisible(muffled)
[09:29:22.377]                     }
[09:29:22.377]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.377]                   }
[09:29:22.377]                 }
[09:29:22.377]                 else {
[09:29:22.377]                   if (TRUE) {
[09:29:22.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.377]                     {
[09:29:22.377]                       inherits <- base::inherits
[09:29:22.377]                       invokeRestart <- base::invokeRestart
[09:29:22.377]                       is.null <- base::is.null
[09:29:22.377]                       muffled <- FALSE
[09:29:22.377]                       if (inherits(cond, "message")) {
[09:29:22.377]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.377]                         if (muffled) 
[09:29:22.377]                           invokeRestart("muffleMessage")
[09:29:22.377]                       }
[09:29:22.377]                       else if (inherits(cond, "warning")) {
[09:29:22.377]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.377]                         if (muffled) 
[09:29:22.377]                           invokeRestart("muffleWarning")
[09:29:22.377]                       }
[09:29:22.377]                       else if (inherits(cond, "condition")) {
[09:29:22.377]                         if (!is.null(pattern)) {
[09:29:22.377]                           computeRestarts <- base::computeRestarts
[09:29:22.377]                           grepl <- base::grepl
[09:29:22.377]                           restarts <- computeRestarts(cond)
[09:29:22.377]                           for (restart in restarts) {
[09:29:22.377]                             name <- restart$name
[09:29:22.377]                             if (is.null(name)) 
[09:29:22.377]                               next
[09:29:22.377]                             if (!grepl(pattern, name)) 
[09:29:22.377]                               next
[09:29:22.377]                             invokeRestart(restart)
[09:29:22.377]                             muffled <- TRUE
[09:29:22.377]                             break
[09:29:22.377]                           }
[09:29:22.377]                         }
[09:29:22.377]                       }
[09:29:22.377]                       invisible(muffled)
[09:29:22.377]                     }
[09:29:22.377]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.377]                   }
[09:29:22.377]                 }
[09:29:22.377]             }
[09:29:22.377]         }))
[09:29:22.377]     }, error = function(ex) {
[09:29:22.377]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.377]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.377]                 ...future.rng), started = ...future.startTime, 
[09:29:22.377]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.377]             version = "1.8"), class = "FutureResult")
[09:29:22.377]     }, finally = {
[09:29:22.377]         if (!identical(...future.workdir, getwd())) 
[09:29:22.377]             setwd(...future.workdir)
[09:29:22.377]         {
[09:29:22.377]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.377]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.377]             }
[09:29:22.377]             base::options(...future.oldOptions)
[09:29:22.377]             if (.Platform$OS.type == "windows") {
[09:29:22.377]                 old_names <- names(...future.oldEnvVars)
[09:29:22.377]                 envs <- base::Sys.getenv()
[09:29:22.377]                 names <- names(envs)
[09:29:22.377]                 common <- intersect(names, old_names)
[09:29:22.377]                 added <- setdiff(names, old_names)
[09:29:22.377]                 removed <- setdiff(old_names, names)
[09:29:22.377]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.377]                   envs[common]]
[09:29:22.377]                 NAMES <- toupper(changed)
[09:29:22.377]                 args <- list()
[09:29:22.377]                 for (kk in seq_along(NAMES)) {
[09:29:22.377]                   name <- changed[[kk]]
[09:29:22.377]                   NAME <- NAMES[[kk]]
[09:29:22.377]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.377]                     next
[09:29:22.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.377]                 }
[09:29:22.377]                 NAMES <- toupper(added)
[09:29:22.377]                 for (kk in seq_along(NAMES)) {
[09:29:22.377]                   name <- added[[kk]]
[09:29:22.377]                   NAME <- NAMES[[kk]]
[09:29:22.377]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.377]                     next
[09:29:22.377]                   args[[name]] <- ""
[09:29:22.377]                 }
[09:29:22.377]                 NAMES <- toupper(removed)
[09:29:22.377]                 for (kk in seq_along(NAMES)) {
[09:29:22.377]                   name <- removed[[kk]]
[09:29:22.377]                   NAME <- NAMES[[kk]]
[09:29:22.377]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.377]                     next
[09:29:22.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.377]                 }
[09:29:22.377]                 if (length(args) > 0) 
[09:29:22.377]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.377]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.377]             }
[09:29:22.377]             else {
[09:29:22.377]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.377]             }
[09:29:22.377]             {
[09:29:22.377]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.377]                   0L) {
[09:29:22.377]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.377]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.377]                   base::options(opts)
[09:29:22.377]                 }
[09:29:22.377]                 {
[09:29:22.377]                   {
[09:29:22.377]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.377]                     NULL
[09:29:22.377]                   }
[09:29:22.377]                   options(future.plan = NULL)
[09:29:22.377]                   if (is.na(NA_character_)) 
[09:29:22.377]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.377]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.377]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.377]                     .init = FALSE)
[09:29:22.377]                 }
[09:29:22.377]             }
[09:29:22.377]         }
[09:29:22.377]     })
[09:29:22.377]     if (TRUE) {
[09:29:22.377]         base::sink(type = "output", split = FALSE)
[09:29:22.377]         if (TRUE) {
[09:29:22.377]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.377]         }
[09:29:22.377]         else {
[09:29:22.377]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.377]         }
[09:29:22.377]         base::close(...future.stdout)
[09:29:22.377]         ...future.stdout <- NULL
[09:29:22.377]     }
[09:29:22.377]     ...future.result$conditions <- ...future.conditions
[09:29:22.377]     ...future.result$finished <- base::Sys.time()
[09:29:22.377]     ...future.result
[09:29:22.377] }
[09:29:22.380] assign_globals() ...
[09:29:22.380] List of 5
[09:29:22.380]  $ ...future.FUN            :function (...)  
[09:29:22.380]  $ future.call.arguments    : list()
[09:29:22.380]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.380]  $ ...future.elements_ii    :List of 2
[09:29:22.380]   ..$ : int 0
[09:29:22.380]   ..$ : int 0
[09:29:22.380]  $ ...future.seeds_ii       :List of 2
[09:29:22.380]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[09:29:22.380]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[09:29:22.380]  $ ...future.globals.maxSize: NULL
[09:29:22.380]  - attr(*, "where")=List of 5
[09:29:22.380]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.380]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.380]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.380]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.380]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.380]  - attr(*, "resolved")= logi FALSE
[09:29:22.380]  - attr(*, "total_size")= num 616
[09:29:22.380]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.380]  - attr(*, "already-done")= logi TRUE
[09:29:22.385] - reassign environment for ‘...future.FUN’
[09:29:22.385] - copied ‘...future.FUN’ to environment
[09:29:22.385] - copied ‘future.call.arguments’ to environment
[09:29:22.385] - copied ‘...future.elements_ii’ to environment
[09:29:22.386] - copied ‘...future.seeds_ii’ to environment
[09:29:22.386] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.386] assign_globals() ... done
[09:29:22.386] requestCore(): workers = 2
[09:29:22.388] MulticoreFuture started
[09:29:22.388] - Launch lazy future ... done
[09:29:22.388] run() for ‘MulticoreFuture’ ... done
[09:29:22.389] Created future:
[09:29:22.389] plan(): Setting new future strategy stack:
[09:29:22.389] List of future strategies:
[09:29:22.389] 1. sequential:
[09:29:22.389]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.389]    - tweaked: FALSE
[09:29:22.389]    - call: NULL
[09:29:22.390] plan(): nbrOfWorkers() = 1
[09:29:22.392] plan(): Setting new future strategy stack:
[09:29:22.392] List of future strategies:
[09:29:22.392] 1. multicore:
[09:29:22.392]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.392]    - tweaked: FALSE
[09:29:22.392]    - call: plan(strategy)
[09:29:22.397] plan(): nbrOfWorkers() = 2
[09:29:22.389] MulticoreFuture:
[09:29:22.389] Label: ‘future_replicate-1’
[09:29:22.389] Expression:
[09:29:22.389] {
[09:29:22.389]     do.call(function(...) {
[09:29:22.389]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.389]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.389]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.389]             on.exit(options(oopts), add = TRUE)
[09:29:22.389]         }
[09:29:22.389]         {
[09:29:22.389]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.389]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.389]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.389]                   envir = globalenv(), inherits = FALSE)
[09:29:22.389]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.389]             })
[09:29:22.389]         }
[09:29:22.389]     }, args = future.call.arguments)
[09:29:22.389] }
[09:29:22.389] Lazy evaluation: FALSE
[09:29:22.389] Asynchronous evaluation: TRUE
[09:29:22.389] Local evaluation: TRUE
[09:29:22.389] Environment: R_GlobalEnv
[09:29:22.389] Capture standard output: TRUE
[09:29:22.389] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.389] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.389] Packages: <none>
[09:29:22.389] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.389] Resolved: TRUE
[09:29:22.389] Value: <not collected>
[09:29:22.389] Conditions captured: <none>
[09:29:22.389] Early signaling: FALSE
[09:29:22.389] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.389] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.398] Chunk #1 of 2 ... DONE
[09:29:22.399] Chunk #2 of 2 ...
[09:29:22.399]  - Finding globals in 'X' for chunk #2 ...
[09:29:22.399] getGlobalsAndPackages() ...
[09:29:22.399] Searching for globals...
[09:29:22.400] 
[09:29:22.400] Searching for globals ... DONE
[09:29:22.400] - globals: [0] <none>
[09:29:22.400] getGlobalsAndPackages() ... DONE
[09:29:22.400]    + additional globals found: [n=0] 
[09:29:22.400]    + additional namespaces needed: [n=0] 
[09:29:22.400]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:22.401]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.401]  - seeds: [3] <seeds>
[09:29:22.401]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.401] getGlobalsAndPackages() ...
[09:29:22.401] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.401] Resolving globals: FALSE
[09:29:22.402] Tweak future expression to call with '...' arguments ...
[09:29:22.402] {
[09:29:22.402]     do.call(function(...) {
[09:29:22.402]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.402]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.402]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.402]             on.exit(options(oopts), add = TRUE)
[09:29:22.402]         }
[09:29:22.402]         {
[09:29:22.402]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.402]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.402]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.402]                   envir = globalenv(), inherits = FALSE)
[09:29:22.402]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.402]             })
[09:29:22.402]         }
[09:29:22.402]     }, args = future.call.arguments)
[09:29:22.402] }
[09:29:22.402] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.403] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.403] 
[09:29:22.403] getGlobalsAndPackages() ... DONE
[09:29:22.404] run() for ‘Future’ ...
[09:29:22.404] - state: ‘created’
[09:29:22.404] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.413] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.413] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.414]   - Field: ‘label’
[09:29:22.414]   - Field: ‘local’
[09:29:22.414]   - Field: ‘owner’
[09:29:22.414]   - Field: ‘envir’
[09:29:22.415]   - Field: ‘workers’
[09:29:22.415]   - Field: ‘packages’
[09:29:22.415]   - Field: ‘gc’
[09:29:22.415]   - Field: ‘job’
[09:29:22.415]   - Field: ‘conditions’
[09:29:22.416]   - Field: ‘expr’
[09:29:22.416]   - Field: ‘uuid’
[09:29:22.416]   - Field: ‘seed’
[09:29:22.416]   - Field: ‘version’
[09:29:22.416]   - Field: ‘result’
[09:29:22.416]   - Field: ‘asynchronous’
[09:29:22.416]   - Field: ‘calls’
[09:29:22.417]   - Field: ‘globals’
[09:29:22.417]   - Field: ‘stdout’
[09:29:22.417]   - Field: ‘earlySignal’
[09:29:22.417]   - Field: ‘lazy’
[09:29:22.417]   - Field: ‘state’
[09:29:22.418] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.418] - Launch lazy future ...
[09:29:22.418] Packages needed by the future expression (n = 0): <none>
[09:29:22.418] Packages needed by future strategies (n = 0): <none>
[09:29:22.419] {
[09:29:22.419]     {
[09:29:22.419]         {
[09:29:22.419]             ...future.startTime <- base::Sys.time()
[09:29:22.419]             {
[09:29:22.419]                 {
[09:29:22.419]                   {
[09:29:22.419]                     {
[09:29:22.419]                       base::local({
[09:29:22.419]                         has_future <- base::requireNamespace("future", 
[09:29:22.419]                           quietly = TRUE)
[09:29:22.419]                         if (has_future) {
[09:29:22.419]                           ns <- base::getNamespace("future")
[09:29:22.419]                           version <- ns[[".package"]][["version"]]
[09:29:22.419]                           if (is.null(version)) 
[09:29:22.419]                             version <- utils::packageVersion("future")
[09:29:22.419]                         }
[09:29:22.419]                         else {
[09:29:22.419]                           version <- NULL
[09:29:22.419]                         }
[09:29:22.419]                         if (!has_future || version < "1.8.0") {
[09:29:22.419]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.419]                             "", base::R.version$version.string), 
[09:29:22.419]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.419]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.419]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.419]                               "release", "version")], collapse = " "), 
[09:29:22.419]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.419]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.419]                             info)
[09:29:22.419]                           info <- base::paste(info, collapse = "; ")
[09:29:22.419]                           if (!has_future) {
[09:29:22.419]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.419]                               info)
[09:29:22.419]                           }
[09:29:22.419]                           else {
[09:29:22.419]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.419]                               info, version)
[09:29:22.419]                           }
[09:29:22.419]                           base::stop(msg)
[09:29:22.419]                         }
[09:29:22.419]                       })
[09:29:22.419]                     }
[09:29:22.419]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.419]                     base::options(mc.cores = 1L)
[09:29:22.419]                   }
[09:29:22.419]                   ...future.strategy.old <- future::plan("list")
[09:29:22.419]                   options(future.plan = NULL)
[09:29:22.419]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.419]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.419]                 }
[09:29:22.419]                 ...future.workdir <- getwd()
[09:29:22.419]             }
[09:29:22.419]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.419]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.419]         }
[09:29:22.419]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.419]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.419]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.419]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.419]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.419]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.419]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.419]             base::names(...future.oldOptions))
[09:29:22.419]     }
[09:29:22.419]     if (FALSE) {
[09:29:22.419]     }
[09:29:22.419]     else {
[09:29:22.419]         if (TRUE) {
[09:29:22.419]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.419]                 open = "w")
[09:29:22.419]         }
[09:29:22.419]         else {
[09:29:22.419]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.419]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.419]         }
[09:29:22.419]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.419]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.419]             base::sink(type = "output", split = FALSE)
[09:29:22.419]             base::close(...future.stdout)
[09:29:22.419]         }, add = TRUE)
[09:29:22.419]     }
[09:29:22.419]     ...future.frame <- base::sys.nframe()
[09:29:22.419]     ...future.conditions <- base::list()
[09:29:22.419]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.419]     if (FALSE) {
[09:29:22.419]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.419]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.419]     }
[09:29:22.419]     ...future.result <- base::tryCatch({
[09:29:22.419]         base::withCallingHandlers({
[09:29:22.419]             ...future.value <- base::withVisible(base::local({
[09:29:22.419]                 withCallingHandlers({
[09:29:22.419]                   {
[09:29:22.419]                     do.call(function(...) {
[09:29:22.419]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.419]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.419]                         ...future.globals.maxSize)) {
[09:29:22.419]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.419]                         on.exit(options(oopts), add = TRUE)
[09:29:22.419]                       }
[09:29:22.419]                       {
[09:29:22.419]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.419]                           FUN = function(jj) {
[09:29:22.419]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.419]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.419]                               envir = globalenv(), inherits = FALSE)
[09:29:22.419]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.419]                           })
[09:29:22.419]                       }
[09:29:22.419]                     }, args = future.call.arguments)
[09:29:22.419]                   }
[09:29:22.419]                 }, immediateCondition = function(cond) {
[09:29:22.419]                   save_rds <- function (object, pathname, ...) 
[09:29:22.419]                   {
[09:29:22.419]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.419]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.419]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.419]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.419]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.419]                         fi_tmp[["mtime"]])
[09:29:22.419]                     }
[09:29:22.419]                     tryCatch({
[09:29:22.419]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.419]                     }, error = function(ex) {
[09:29:22.419]                       msg <- conditionMessage(ex)
[09:29:22.419]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.419]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.419]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.419]                         fi_tmp[["mtime"]], msg)
[09:29:22.419]                       ex$message <- msg
[09:29:22.419]                       stop(ex)
[09:29:22.419]                     })
[09:29:22.419]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.419]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.419]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.419]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.419]                       fi <- file.info(pathname)
[09:29:22.419]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.419]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.419]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.419]                         fi[["size"]], fi[["mtime"]])
[09:29:22.419]                       stop(msg)
[09:29:22.419]                     }
[09:29:22.419]                     invisible(pathname)
[09:29:22.419]                   }
[09:29:22.419]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.419]                     rootPath = tempdir()) 
[09:29:22.419]                   {
[09:29:22.419]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.419]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.419]                       tmpdir = path, fileext = ".rds")
[09:29:22.419]                     save_rds(obj, file)
[09:29:22.419]                   }
[09:29:22.419]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.419]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.419]                   {
[09:29:22.419]                     inherits <- base::inherits
[09:29:22.419]                     invokeRestart <- base::invokeRestart
[09:29:22.419]                     is.null <- base::is.null
[09:29:22.419]                     muffled <- FALSE
[09:29:22.419]                     if (inherits(cond, "message")) {
[09:29:22.419]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.419]                       if (muffled) 
[09:29:22.419]                         invokeRestart("muffleMessage")
[09:29:22.419]                     }
[09:29:22.419]                     else if (inherits(cond, "warning")) {
[09:29:22.419]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.419]                       if (muffled) 
[09:29:22.419]                         invokeRestart("muffleWarning")
[09:29:22.419]                     }
[09:29:22.419]                     else if (inherits(cond, "condition")) {
[09:29:22.419]                       if (!is.null(pattern)) {
[09:29:22.419]                         computeRestarts <- base::computeRestarts
[09:29:22.419]                         grepl <- base::grepl
[09:29:22.419]                         restarts <- computeRestarts(cond)
[09:29:22.419]                         for (restart in restarts) {
[09:29:22.419]                           name <- restart$name
[09:29:22.419]                           if (is.null(name)) 
[09:29:22.419]                             next
[09:29:22.419]                           if (!grepl(pattern, name)) 
[09:29:22.419]                             next
[09:29:22.419]                           invokeRestart(restart)
[09:29:22.419]                           muffled <- TRUE
[09:29:22.419]                           break
[09:29:22.419]                         }
[09:29:22.419]                       }
[09:29:22.419]                     }
[09:29:22.419]                     invisible(muffled)
[09:29:22.419]                   }
[09:29:22.419]                   muffleCondition(cond)
[09:29:22.419]                 })
[09:29:22.419]             }))
[09:29:22.419]             future::FutureResult(value = ...future.value$value, 
[09:29:22.419]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.419]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.419]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.419]                     ...future.globalenv.names))
[09:29:22.419]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.419]         }, condition = base::local({
[09:29:22.419]             c <- base::c
[09:29:22.419]             inherits <- base::inherits
[09:29:22.419]             invokeRestart <- base::invokeRestart
[09:29:22.419]             length <- base::length
[09:29:22.419]             list <- base::list
[09:29:22.419]             seq.int <- base::seq.int
[09:29:22.419]             signalCondition <- base::signalCondition
[09:29:22.419]             sys.calls <- base::sys.calls
[09:29:22.419]             `[[` <- base::`[[`
[09:29:22.419]             `+` <- base::`+`
[09:29:22.419]             `<<-` <- base::`<<-`
[09:29:22.419]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.419]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.419]                   3L)]
[09:29:22.419]             }
[09:29:22.419]             function(cond) {
[09:29:22.419]                 is_error <- inherits(cond, "error")
[09:29:22.419]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.419]                   NULL)
[09:29:22.419]                 if (is_error) {
[09:29:22.419]                   sessionInformation <- function() {
[09:29:22.419]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.419]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.419]                       search = base::search(), system = base::Sys.info())
[09:29:22.419]                   }
[09:29:22.419]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.419]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.419]                     cond$call), session = sessionInformation(), 
[09:29:22.419]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.419]                   signalCondition(cond)
[09:29:22.419]                 }
[09:29:22.419]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.419]                 "immediateCondition"))) {
[09:29:22.419]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.419]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.419]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.419]                   if (TRUE && !signal) {
[09:29:22.419]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.419]                     {
[09:29:22.419]                       inherits <- base::inherits
[09:29:22.419]                       invokeRestart <- base::invokeRestart
[09:29:22.419]                       is.null <- base::is.null
[09:29:22.419]                       muffled <- FALSE
[09:29:22.419]                       if (inherits(cond, "message")) {
[09:29:22.419]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.419]                         if (muffled) 
[09:29:22.419]                           invokeRestart("muffleMessage")
[09:29:22.419]                       }
[09:29:22.419]                       else if (inherits(cond, "warning")) {
[09:29:22.419]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.419]                         if (muffled) 
[09:29:22.419]                           invokeRestart("muffleWarning")
[09:29:22.419]                       }
[09:29:22.419]                       else if (inherits(cond, "condition")) {
[09:29:22.419]                         if (!is.null(pattern)) {
[09:29:22.419]                           computeRestarts <- base::computeRestarts
[09:29:22.419]                           grepl <- base::grepl
[09:29:22.419]                           restarts <- computeRestarts(cond)
[09:29:22.419]                           for (restart in restarts) {
[09:29:22.419]                             name <- restart$name
[09:29:22.419]                             if (is.null(name)) 
[09:29:22.419]                               next
[09:29:22.419]                             if (!grepl(pattern, name)) 
[09:29:22.419]                               next
[09:29:22.419]                             invokeRestart(restart)
[09:29:22.419]                             muffled <- TRUE
[09:29:22.419]                             break
[09:29:22.419]                           }
[09:29:22.419]                         }
[09:29:22.419]                       }
[09:29:22.419]                       invisible(muffled)
[09:29:22.419]                     }
[09:29:22.419]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.419]                   }
[09:29:22.419]                 }
[09:29:22.419]                 else {
[09:29:22.419]                   if (TRUE) {
[09:29:22.419]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.419]                     {
[09:29:22.419]                       inherits <- base::inherits
[09:29:22.419]                       invokeRestart <- base::invokeRestart
[09:29:22.419]                       is.null <- base::is.null
[09:29:22.419]                       muffled <- FALSE
[09:29:22.419]                       if (inherits(cond, "message")) {
[09:29:22.419]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.419]                         if (muffled) 
[09:29:22.419]                           invokeRestart("muffleMessage")
[09:29:22.419]                       }
[09:29:22.419]                       else if (inherits(cond, "warning")) {
[09:29:22.419]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.419]                         if (muffled) 
[09:29:22.419]                           invokeRestart("muffleWarning")
[09:29:22.419]                       }
[09:29:22.419]                       else if (inherits(cond, "condition")) {
[09:29:22.419]                         if (!is.null(pattern)) {
[09:29:22.419]                           computeRestarts <- base::computeRestarts
[09:29:22.419]                           grepl <- base::grepl
[09:29:22.419]                           restarts <- computeRestarts(cond)
[09:29:22.419]                           for (restart in restarts) {
[09:29:22.419]                             name <- restart$name
[09:29:22.419]                             if (is.null(name)) 
[09:29:22.419]                               next
[09:29:22.419]                             if (!grepl(pattern, name)) 
[09:29:22.419]                               next
[09:29:22.419]                             invokeRestart(restart)
[09:29:22.419]                             muffled <- TRUE
[09:29:22.419]                             break
[09:29:22.419]                           }
[09:29:22.419]                         }
[09:29:22.419]                       }
[09:29:22.419]                       invisible(muffled)
[09:29:22.419]                     }
[09:29:22.419]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.419]                   }
[09:29:22.419]                 }
[09:29:22.419]             }
[09:29:22.419]         }))
[09:29:22.419]     }, error = function(ex) {
[09:29:22.419]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.419]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.419]                 ...future.rng), started = ...future.startTime, 
[09:29:22.419]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.419]             version = "1.8"), class = "FutureResult")
[09:29:22.419]     }, finally = {
[09:29:22.419]         if (!identical(...future.workdir, getwd())) 
[09:29:22.419]             setwd(...future.workdir)
[09:29:22.419]         {
[09:29:22.419]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.419]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.419]             }
[09:29:22.419]             base::options(...future.oldOptions)
[09:29:22.419]             if (.Platform$OS.type == "windows") {
[09:29:22.419]                 old_names <- names(...future.oldEnvVars)
[09:29:22.419]                 envs <- base::Sys.getenv()
[09:29:22.419]                 names <- names(envs)
[09:29:22.419]                 common <- intersect(names, old_names)
[09:29:22.419]                 added <- setdiff(names, old_names)
[09:29:22.419]                 removed <- setdiff(old_names, names)
[09:29:22.419]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.419]                   envs[common]]
[09:29:22.419]                 NAMES <- toupper(changed)
[09:29:22.419]                 args <- list()
[09:29:22.419]                 for (kk in seq_along(NAMES)) {
[09:29:22.419]                   name <- changed[[kk]]
[09:29:22.419]                   NAME <- NAMES[[kk]]
[09:29:22.419]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.419]                     next
[09:29:22.419]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.419]                 }
[09:29:22.419]                 NAMES <- toupper(added)
[09:29:22.419]                 for (kk in seq_along(NAMES)) {
[09:29:22.419]                   name <- added[[kk]]
[09:29:22.419]                   NAME <- NAMES[[kk]]
[09:29:22.419]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.419]                     next
[09:29:22.419]                   args[[name]] <- ""
[09:29:22.419]                 }
[09:29:22.419]                 NAMES <- toupper(removed)
[09:29:22.419]                 for (kk in seq_along(NAMES)) {
[09:29:22.419]                   name <- removed[[kk]]
[09:29:22.419]                   NAME <- NAMES[[kk]]
[09:29:22.419]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.419]                     next
[09:29:22.419]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.419]                 }
[09:29:22.419]                 if (length(args) > 0) 
[09:29:22.419]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.419]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.419]             }
[09:29:22.419]             else {
[09:29:22.419]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.419]             }
[09:29:22.419]             {
[09:29:22.419]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.419]                   0L) {
[09:29:22.419]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.419]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.419]                   base::options(opts)
[09:29:22.419]                 }
[09:29:22.419]                 {
[09:29:22.419]                   {
[09:29:22.419]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.419]                     NULL
[09:29:22.419]                   }
[09:29:22.419]                   options(future.plan = NULL)
[09:29:22.419]                   if (is.na(NA_character_)) 
[09:29:22.419]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.419]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.419]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.419]                     .init = FALSE)
[09:29:22.419]                 }
[09:29:22.419]             }
[09:29:22.419]         }
[09:29:22.419]     })
[09:29:22.419]     if (TRUE) {
[09:29:22.419]         base::sink(type = "output", split = FALSE)
[09:29:22.419]         if (TRUE) {
[09:29:22.419]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.419]         }
[09:29:22.419]         else {
[09:29:22.419]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.419]         }
[09:29:22.419]         base::close(...future.stdout)
[09:29:22.419]         ...future.stdout <- NULL
[09:29:22.419]     }
[09:29:22.419]     ...future.result$conditions <- ...future.conditions
[09:29:22.419]     ...future.result$finished <- base::Sys.time()
[09:29:22.419]     ...future.result
[09:29:22.419] }
[09:29:22.422] assign_globals() ...
[09:29:22.422] List of 5
[09:29:22.422]  $ ...future.FUN            :function (...)  
[09:29:22.422]  $ future.call.arguments    : list()
[09:29:22.422]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.422]  $ ...future.elements_ii    :List of 3
[09:29:22.422]   ..$ : int 0
[09:29:22.422]   ..$ : int 0
[09:29:22.422]   ..$ : int 0
[09:29:22.422]  $ ...future.seeds_ii       :List of 3
[09:29:22.422]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[09:29:22.422]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[09:29:22.422]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[09:29:22.422]  $ ...future.globals.maxSize: NULL
[09:29:22.422]  - attr(*, "where")=List of 5
[09:29:22.422]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.422]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.422]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.422]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.422]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.422]  - attr(*, "resolved")= logi FALSE
[09:29:22.422]  - attr(*, "total_size")= num 616
[09:29:22.422]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.422]  - attr(*, "already-done")= logi TRUE
[09:29:22.430] - reassign environment for ‘...future.FUN’
[09:29:22.430] - copied ‘...future.FUN’ to environment
[09:29:22.431] - copied ‘future.call.arguments’ to environment
[09:29:22.431] - copied ‘...future.elements_ii’ to environment
[09:29:22.431] - copied ‘...future.seeds_ii’ to environment
[09:29:22.431] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.431] assign_globals() ... done
[09:29:22.431] requestCore(): workers = 2
[09:29:22.433] MulticoreFuture started
[09:29:22.434] - Launch lazy future ... done
[09:29:22.434] run() for ‘MulticoreFuture’ ... done
[09:29:22.434] Created future:
[09:29:22.434] plan(): Setting new future strategy stack:
[09:29:22.435] List of future strategies:
[09:29:22.435] 1. sequential:
[09:29:22.435]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.435]    - tweaked: FALSE
[09:29:22.435]    - call: NULL
[09:29:22.436] plan(): nbrOfWorkers() = 1
[09:29:22.438] plan(): Setting new future strategy stack:
[09:29:22.438] List of future strategies:
[09:29:22.438] 1. multicore:
[09:29:22.438]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.438]    - tweaked: FALSE
[09:29:22.438]    - call: plan(strategy)
[09:29:22.444] plan(): nbrOfWorkers() = 2
[09:29:22.434] MulticoreFuture:
[09:29:22.434] Label: ‘future_replicate-2’
[09:29:22.434] Expression:
[09:29:22.434] {
[09:29:22.434]     do.call(function(...) {
[09:29:22.434]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.434]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.434]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.434]             on.exit(options(oopts), add = TRUE)
[09:29:22.434]         }
[09:29:22.434]         {
[09:29:22.434]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.434]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.434]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.434]                   envir = globalenv(), inherits = FALSE)
[09:29:22.434]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.434]             })
[09:29:22.434]         }
[09:29:22.434]     }, args = future.call.arguments)
[09:29:22.434] }
[09:29:22.434] Lazy evaluation: FALSE
[09:29:22.434] Asynchronous evaluation: TRUE
[09:29:22.434] Local evaluation: TRUE
[09:29:22.434] Environment: R_GlobalEnv
[09:29:22.434] Capture standard output: TRUE
[09:29:22.434] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.434] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:22.434] Packages: <none>
[09:29:22.434] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.434] Resolved: TRUE
[09:29:22.434] Value: <not collected>
[09:29:22.434] Conditions captured: <none>
[09:29:22.434] Early signaling: FALSE
[09:29:22.434] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.434] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.445] Chunk #2 of 2 ... DONE
[09:29:22.445] Launching 2 futures (chunks) ... DONE
[09:29:22.445] Resolving 2 futures (chunks) ...
[09:29:22.445] resolve() on list ...
[09:29:22.445]  recursive: 0
[09:29:22.445]  length: 2
[09:29:22.446] 
[09:29:22.446] Future #1
[09:29:22.446] result() for MulticoreFuture ...
[09:29:22.447] result() for MulticoreFuture ...
[09:29:22.447] result() for MulticoreFuture ... done
[09:29:22.447] result() for MulticoreFuture ... done
[09:29:22.447] result() for MulticoreFuture ...
[09:29:22.448] result() for MulticoreFuture ... done
[09:29:22.448] signalConditionsASAP(MulticoreFuture, pos=1) ...
[09:29:22.448] - nx: 2
[09:29:22.448] - relay: TRUE
[09:29:22.448] - stdout: TRUE
[09:29:22.448] - signal: TRUE
[09:29:22.448] - resignal: FALSE
[09:29:22.449] - force: TRUE
[09:29:22.449] - relayed: [n=2] FALSE, FALSE
[09:29:22.449] - queued futures: [n=2] FALSE, FALSE
[09:29:22.449]  - until=1
[09:29:22.449]  - relaying element #1
[09:29:22.449] result() for MulticoreFuture ...
[09:29:22.449] result() for MulticoreFuture ... done
[09:29:22.450] result() for MulticoreFuture ...
[09:29:22.450] result() for MulticoreFuture ... done
[09:29:22.450] result() for MulticoreFuture ...
[09:29:22.450] result() for MulticoreFuture ... done
[09:29:22.450] result() for MulticoreFuture ...
[09:29:22.450] result() for MulticoreFuture ... done
[09:29:22.451] - relayed: [n=2] TRUE, FALSE
[09:29:22.451] - queued futures: [n=2] TRUE, FALSE
[09:29:22.451] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[09:29:22.451]  length: 1 (resolved future 1)
[09:29:22.451] Future #2
[09:29:22.451] result() for MulticoreFuture ...
[09:29:22.452] result() for MulticoreFuture ...
[09:29:22.452] result() for MulticoreFuture ... done
[09:29:22.452] result() for MulticoreFuture ... done
[09:29:22.453] result() for MulticoreFuture ...
[09:29:22.453] result() for MulticoreFuture ... done
[09:29:22.453] signalConditionsASAP(MulticoreFuture, pos=2) ...
[09:29:22.453] - nx: 2
[09:29:22.453] - relay: TRUE
[09:29:22.453] - stdout: TRUE
[09:29:22.453] - signal: TRUE
[09:29:22.453] - resignal: FALSE
[09:29:22.454] - force: TRUE
[09:29:22.454] - relayed: [n=2] TRUE, FALSE
[09:29:22.454] - queued futures: [n=2] TRUE, FALSE
[09:29:22.454]  - until=2
[09:29:22.454]  - relaying element #2
[09:29:22.454] result() for MulticoreFuture ...
[09:29:22.454] result() for MulticoreFuture ... done
[09:29:22.454] result() for MulticoreFuture ...
[09:29:22.455] result() for MulticoreFuture ... done
[09:29:22.455] result() for MulticoreFuture ...
[09:29:22.455] result() for MulticoreFuture ... done
[09:29:22.455] result() for MulticoreFuture ...
[09:29:22.455] result() for MulticoreFuture ... done
[09:29:22.455] - relayed: [n=2] TRUE, TRUE
[09:29:22.455] - queued futures: [n=2] TRUE, TRUE
[09:29:22.455] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[09:29:22.456]  length: 0 (resolved future 2)
[09:29:22.456] Relaying remaining futures
[09:29:22.456] signalConditionsASAP(NULL, pos=0) ...
[09:29:22.456] - nx: 2
[09:29:22.456] - relay: TRUE
[09:29:22.456] - stdout: TRUE
[09:29:22.456] - signal: TRUE
[09:29:22.456] - resignal: FALSE
[09:29:22.456] - force: TRUE
[09:29:22.456] - relayed: [n=2] TRUE, TRUE
[09:29:22.457] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:22.457] - relayed: [n=2] TRUE, TRUE
[09:29:22.457] - queued futures: [n=2] TRUE, TRUE
[09:29:22.457] signalConditionsASAP(NULL, pos=0) ... done
[09:29:22.457] resolve() on list ... DONE
[09:29:22.457] result() for MulticoreFuture ...
[09:29:22.457] result() for MulticoreFuture ... done
[09:29:22.457] result() for MulticoreFuture ...
[09:29:22.457] result() for MulticoreFuture ... done
[09:29:22.458] result() for MulticoreFuture ...
[09:29:22.458] result() for MulticoreFuture ... done
[09:29:22.458] result() for MulticoreFuture ...
[09:29:22.458] result() for MulticoreFuture ... done
[09:29:22.458]  - Number of value chunks collected: 2
[09:29:22.458] Resolving 2 futures (chunks) ... DONE
[09:29:22.458] Reducing values from 2 chunks ...
[09:29:22.458]  - Number of values collected after concatenation: 5
[09:29:22.458]  - Number of values expected: 5
[09:29:22.459] Reducing values from 2 chunks ... DONE
[09:29:22.461] future_lapply() ... DONE
- example(replicate) ...
[09:29:22.461] future_lapply() ...
[09:29:22.462] Generating random seeds ...
[09:29:22.462] Generating random seed streams for 5 elements ...
[09:29:22.463] Generating random seed streams for 5 elements ... DONE
[09:29:22.463] Generating random seeds ... DONE
[09:29:22.463] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:22.467] Number of chunks: 2
[09:29:22.467] getGlobalsAndPackagesXApply() ...
[09:29:22.468]  - future.globals: TRUE
[09:29:22.468] getGlobalsAndPackages() ...
[09:29:22.468] Searching for globals...
[09:29:22.470] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[09:29:22.470] Searching for globals ... DONE
[09:29:22.470] Resolving globals: FALSE
[09:29:22.471] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[09:29:22.471] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[09:29:22.471] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[09:29:22.471] 
[09:29:22.472] getGlobalsAndPackages() ... DONE
[09:29:22.472]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[09:29:22.472]  - needed namespaces: [n=0] 
[09:29:22.472] Finding globals ... DONE
[09:29:22.472]  - use_args: TRUE
[09:29:22.472]  - Getting '...' globals ...
[09:29:22.472] resolve() on list ...
[09:29:22.473]  recursive: 0
[09:29:22.473]  length: 1
[09:29:22.473]  elements: ‘...’
[09:29:22.473]  length: 0 (resolved future 1)
[09:29:22.473] resolve() on list ... DONE
[09:29:22.473]    - '...' content: [n=0] 
[09:29:22.473] List of 1
[09:29:22.473]  $ ...: list()
[09:29:22.473]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.473]  - attr(*, "where")=List of 1
[09:29:22.473]   ..$ ...:<environment: 0x55d1cbe96a38> 
[09:29:22.473]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.473]  - attr(*, "resolved")= logi TRUE
[09:29:22.473]  - attr(*, "total_size")= num NA
[09:29:22.476]  - Getting '...' globals ... DONE
[09:29:22.476] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[09:29:22.476] List of 4
[09:29:22.476]  $ ...future.FUN:function (...)  
[09:29:22.476]  $ foo          :function (x = 1, y = 2)  
[09:29:22.476]  $ x            : num 3
[09:29:22.476]  $ ...          : list()
[09:29:22.476]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.476]  - attr(*, "where")=List of 4
[09:29:22.476]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:22.476]   ..$ foo          :<environment: R_EmptyEnv> 
[09:29:22.476]   ..$ x            :<environment: R_EmptyEnv> 
[09:29:22.476]   ..$ ...          :<environment: 0x55d1cbe96a38> 
[09:29:22.476]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.476]  - attr(*, "resolved")= logi FALSE
[09:29:22.476]  - attr(*, "total_size")= num 2200
[09:29:22.480] Packages to be attached in all futures: [n=0] 
[09:29:22.480] getGlobalsAndPackagesXApply() ... DONE
[09:29:22.480] Number of futures (= number of chunks): 2
[09:29:22.481] Launching 2 futures (chunks) ...
[09:29:22.481] Chunk #1 of 2 ...
[09:29:22.481]  - Finding globals in 'X' for chunk #1 ...
[09:29:22.481] getGlobalsAndPackages() ...
[09:29:22.481] Searching for globals...
[09:29:22.481] 
[09:29:22.481] Searching for globals ... DONE
[09:29:22.481] - globals: [0] <none>
[09:29:22.481] getGlobalsAndPackages() ... DONE
[09:29:22.481]    + additional globals found: [n=0] 
[09:29:22.482]    + additional namespaces needed: [n=0] 
[09:29:22.482]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:22.482]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.482]  - seeds: [2] <seeds>
[09:29:22.482]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.482] getGlobalsAndPackages() ...
[09:29:22.482] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.482] Resolving globals: FALSE
[09:29:22.482] Tweak future expression to call with '...' arguments ...
[09:29:22.482] {
[09:29:22.482]     do.call(function(...) {
[09:29:22.482]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.482]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.482]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.482]             on.exit(options(oopts), add = TRUE)
[09:29:22.482]         }
[09:29:22.482]         {
[09:29:22.482]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.482]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.482]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.482]                   envir = globalenv(), inherits = FALSE)
[09:29:22.482]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.482]             })
[09:29:22.482]         }
[09:29:22.482]     }, args = future.call.arguments)
[09:29:22.482] }
[09:29:22.483] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.483] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.483] 
[09:29:22.483] getGlobalsAndPackages() ... DONE
[09:29:22.484] run() for ‘Future’ ...
[09:29:22.484] - state: ‘created’
[09:29:22.484] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.487] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.487] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.488]   - Field: ‘label’
[09:29:22.488]   - Field: ‘local’
[09:29:22.488]   - Field: ‘owner’
[09:29:22.488]   - Field: ‘envir’
[09:29:22.488]   - Field: ‘workers’
[09:29:22.488]   - Field: ‘packages’
[09:29:22.488]   - Field: ‘gc’
[09:29:22.488]   - Field: ‘job’
[09:29:22.488]   - Field: ‘conditions’
[09:29:22.488]   - Field: ‘expr’
[09:29:22.488]   - Field: ‘uuid’
[09:29:22.489]   - Field: ‘seed’
[09:29:22.489]   - Field: ‘version’
[09:29:22.489]   - Field: ‘result’
[09:29:22.489]   - Field: ‘asynchronous’
[09:29:22.489]   - Field: ‘calls’
[09:29:22.489]   - Field: ‘globals’
[09:29:22.489]   - Field: ‘stdout’
[09:29:22.489]   - Field: ‘earlySignal’
[09:29:22.489]   - Field: ‘lazy’
[09:29:22.489]   - Field: ‘state’
[09:29:22.489] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.490] - Launch lazy future ...
[09:29:22.490] Packages needed by the future expression (n = 0): <none>
[09:29:22.490] Packages needed by future strategies (n = 0): <none>
[09:29:22.490] {
[09:29:22.490]     {
[09:29:22.490]         {
[09:29:22.490]             ...future.startTime <- base::Sys.time()
[09:29:22.490]             {
[09:29:22.490]                 {
[09:29:22.490]                   {
[09:29:22.490]                     {
[09:29:22.490]                       base::local({
[09:29:22.490]                         has_future <- base::requireNamespace("future", 
[09:29:22.490]                           quietly = TRUE)
[09:29:22.490]                         if (has_future) {
[09:29:22.490]                           ns <- base::getNamespace("future")
[09:29:22.490]                           version <- ns[[".package"]][["version"]]
[09:29:22.490]                           if (is.null(version)) 
[09:29:22.490]                             version <- utils::packageVersion("future")
[09:29:22.490]                         }
[09:29:22.490]                         else {
[09:29:22.490]                           version <- NULL
[09:29:22.490]                         }
[09:29:22.490]                         if (!has_future || version < "1.8.0") {
[09:29:22.490]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.490]                             "", base::R.version$version.string), 
[09:29:22.490]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.490]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.490]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.490]                               "release", "version")], collapse = " "), 
[09:29:22.490]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.490]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.490]                             info)
[09:29:22.490]                           info <- base::paste(info, collapse = "; ")
[09:29:22.490]                           if (!has_future) {
[09:29:22.490]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.490]                               info)
[09:29:22.490]                           }
[09:29:22.490]                           else {
[09:29:22.490]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.490]                               info, version)
[09:29:22.490]                           }
[09:29:22.490]                           base::stop(msg)
[09:29:22.490]                         }
[09:29:22.490]                       })
[09:29:22.490]                     }
[09:29:22.490]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.490]                     base::options(mc.cores = 1L)
[09:29:22.490]                   }
[09:29:22.490]                   ...future.strategy.old <- future::plan("list")
[09:29:22.490]                   options(future.plan = NULL)
[09:29:22.490]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.490]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.490]                 }
[09:29:22.490]                 ...future.workdir <- getwd()
[09:29:22.490]             }
[09:29:22.490]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.490]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.490]         }
[09:29:22.490]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.490]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.490]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.490]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.490]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.490]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.490]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.490]             base::names(...future.oldOptions))
[09:29:22.490]     }
[09:29:22.490]     if (FALSE) {
[09:29:22.490]     }
[09:29:22.490]     else {
[09:29:22.490]         if (TRUE) {
[09:29:22.490]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.490]                 open = "w")
[09:29:22.490]         }
[09:29:22.490]         else {
[09:29:22.490]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.490]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.490]         }
[09:29:22.490]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.490]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.490]             base::sink(type = "output", split = FALSE)
[09:29:22.490]             base::close(...future.stdout)
[09:29:22.490]         }, add = TRUE)
[09:29:22.490]     }
[09:29:22.490]     ...future.frame <- base::sys.nframe()
[09:29:22.490]     ...future.conditions <- base::list()
[09:29:22.490]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.490]     if (FALSE) {
[09:29:22.490]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.490]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.490]     }
[09:29:22.490]     ...future.result <- base::tryCatch({
[09:29:22.490]         base::withCallingHandlers({
[09:29:22.490]             ...future.value <- base::withVisible(base::local({
[09:29:22.490]                 withCallingHandlers({
[09:29:22.490]                   {
[09:29:22.490]                     do.call(function(...) {
[09:29:22.490]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.490]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.490]                         ...future.globals.maxSize)) {
[09:29:22.490]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.490]                         on.exit(options(oopts), add = TRUE)
[09:29:22.490]                       }
[09:29:22.490]                       {
[09:29:22.490]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.490]                           FUN = function(jj) {
[09:29:22.490]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.490]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.490]                               envir = globalenv(), inherits = FALSE)
[09:29:22.490]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.490]                           })
[09:29:22.490]                       }
[09:29:22.490]                     }, args = future.call.arguments)
[09:29:22.490]                   }
[09:29:22.490]                 }, immediateCondition = function(cond) {
[09:29:22.490]                   save_rds <- function (object, pathname, ...) 
[09:29:22.490]                   {
[09:29:22.490]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.490]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.490]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.490]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.490]                         fi_tmp[["mtime"]])
[09:29:22.490]                     }
[09:29:22.490]                     tryCatch({
[09:29:22.490]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.490]                     }, error = function(ex) {
[09:29:22.490]                       msg <- conditionMessage(ex)
[09:29:22.490]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.490]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.490]                         fi_tmp[["mtime"]], msg)
[09:29:22.490]                       ex$message <- msg
[09:29:22.490]                       stop(ex)
[09:29:22.490]                     })
[09:29:22.490]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.490]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.490]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.490]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.490]                       fi <- file.info(pathname)
[09:29:22.490]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.490]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.490]                         fi[["size"]], fi[["mtime"]])
[09:29:22.490]                       stop(msg)
[09:29:22.490]                     }
[09:29:22.490]                     invisible(pathname)
[09:29:22.490]                   }
[09:29:22.490]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.490]                     rootPath = tempdir()) 
[09:29:22.490]                   {
[09:29:22.490]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.490]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.490]                       tmpdir = path, fileext = ".rds")
[09:29:22.490]                     save_rds(obj, file)
[09:29:22.490]                   }
[09:29:22.490]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.490]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.490]                   {
[09:29:22.490]                     inherits <- base::inherits
[09:29:22.490]                     invokeRestart <- base::invokeRestart
[09:29:22.490]                     is.null <- base::is.null
[09:29:22.490]                     muffled <- FALSE
[09:29:22.490]                     if (inherits(cond, "message")) {
[09:29:22.490]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.490]                       if (muffled) 
[09:29:22.490]                         invokeRestart("muffleMessage")
[09:29:22.490]                     }
[09:29:22.490]                     else if (inherits(cond, "warning")) {
[09:29:22.490]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.490]                       if (muffled) 
[09:29:22.490]                         invokeRestart("muffleWarning")
[09:29:22.490]                     }
[09:29:22.490]                     else if (inherits(cond, "condition")) {
[09:29:22.490]                       if (!is.null(pattern)) {
[09:29:22.490]                         computeRestarts <- base::computeRestarts
[09:29:22.490]                         grepl <- base::grepl
[09:29:22.490]                         restarts <- computeRestarts(cond)
[09:29:22.490]                         for (restart in restarts) {
[09:29:22.490]                           name <- restart$name
[09:29:22.490]                           if (is.null(name)) 
[09:29:22.490]                             next
[09:29:22.490]                           if (!grepl(pattern, name)) 
[09:29:22.490]                             next
[09:29:22.490]                           invokeRestart(restart)
[09:29:22.490]                           muffled <- TRUE
[09:29:22.490]                           break
[09:29:22.490]                         }
[09:29:22.490]                       }
[09:29:22.490]                     }
[09:29:22.490]                     invisible(muffled)
[09:29:22.490]                   }
[09:29:22.490]                   muffleCondition(cond)
[09:29:22.490]                 })
[09:29:22.490]             }))
[09:29:22.490]             future::FutureResult(value = ...future.value$value, 
[09:29:22.490]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.490]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.490]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.490]                     ...future.globalenv.names))
[09:29:22.490]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.490]         }, condition = base::local({
[09:29:22.490]             c <- base::c
[09:29:22.490]             inherits <- base::inherits
[09:29:22.490]             invokeRestart <- base::invokeRestart
[09:29:22.490]             length <- base::length
[09:29:22.490]             list <- base::list
[09:29:22.490]             seq.int <- base::seq.int
[09:29:22.490]             signalCondition <- base::signalCondition
[09:29:22.490]             sys.calls <- base::sys.calls
[09:29:22.490]             `[[` <- base::`[[`
[09:29:22.490]             `+` <- base::`+`
[09:29:22.490]             `<<-` <- base::`<<-`
[09:29:22.490]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.490]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.490]                   3L)]
[09:29:22.490]             }
[09:29:22.490]             function(cond) {
[09:29:22.490]                 is_error <- inherits(cond, "error")
[09:29:22.490]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.490]                   NULL)
[09:29:22.490]                 if (is_error) {
[09:29:22.490]                   sessionInformation <- function() {
[09:29:22.490]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.490]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.490]                       search = base::search(), system = base::Sys.info())
[09:29:22.490]                   }
[09:29:22.490]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.490]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.490]                     cond$call), session = sessionInformation(), 
[09:29:22.490]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.490]                   signalCondition(cond)
[09:29:22.490]                 }
[09:29:22.490]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.490]                 "immediateCondition"))) {
[09:29:22.490]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.490]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.490]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.490]                   if (TRUE && !signal) {
[09:29:22.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.490]                     {
[09:29:22.490]                       inherits <- base::inherits
[09:29:22.490]                       invokeRestart <- base::invokeRestart
[09:29:22.490]                       is.null <- base::is.null
[09:29:22.490]                       muffled <- FALSE
[09:29:22.490]                       if (inherits(cond, "message")) {
[09:29:22.490]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.490]                         if (muffled) 
[09:29:22.490]                           invokeRestart("muffleMessage")
[09:29:22.490]                       }
[09:29:22.490]                       else if (inherits(cond, "warning")) {
[09:29:22.490]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.490]                         if (muffled) 
[09:29:22.490]                           invokeRestart("muffleWarning")
[09:29:22.490]                       }
[09:29:22.490]                       else if (inherits(cond, "condition")) {
[09:29:22.490]                         if (!is.null(pattern)) {
[09:29:22.490]                           computeRestarts <- base::computeRestarts
[09:29:22.490]                           grepl <- base::grepl
[09:29:22.490]                           restarts <- computeRestarts(cond)
[09:29:22.490]                           for (restart in restarts) {
[09:29:22.490]                             name <- restart$name
[09:29:22.490]                             if (is.null(name)) 
[09:29:22.490]                               next
[09:29:22.490]                             if (!grepl(pattern, name)) 
[09:29:22.490]                               next
[09:29:22.490]                             invokeRestart(restart)
[09:29:22.490]                             muffled <- TRUE
[09:29:22.490]                             break
[09:29:22.490]                           }
[09:29:22.490]                         }
[09:29:22.490]                       }
[09:29:22.490]                       invisible(muffled)
[09:29:22.490]                     }
[09:29:22.490]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.490]                   }
[09:29:22.490]                 }
[09:29:22.490]                 else {
[09:29:22.490]                   if (TRUE) {
[09:29:22.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.490]                     {
[09:29:22.490]                       inherits <- base::inherits
[09:29:22.490]                       invokeRestart <- base::invokeRestart
[09:29:22.490]                       is.null <- base::is.null
[09:29:22.490]                       muffled <- FALSE
[09:29:22.490]                       if (inherits(cond, "message")) {
[09:29:22.490]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.490]                         if (muffled) 
[09:29:22.490]                           invokeRestart("muffleMessage")
[09:29:22.490]                       }
[09:29:22.490]                       else if (inherits(cond, "warning")) {
[09:29:22.490]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.490]                         if (muffled) 
[09:29:22.490]                           invokeRestart("muffleWarning")
[09:29:22.490]                       }
[09:29:22.490]                       else if (inherits(cond, "condition")) {
[09:29:22.490]                         if (!is.null(pattern)) {
[09:29:22.490]                           computeRestarts <- base::computeRestarts
[09:29:22.490]                           grepl <- base::grepl
[09:29:22.490]                           restarts <- computeRestarts(cond)
[09:29:22.490]                           for (restart in restarts) {
[09:29:22.490]                             name <- restart$name
[09:29:22.490]                             if (is.null(name)) 
[09:29:22.490]                               next
[09:29:22.490]                             if (!grepl(pattern, name)) 
[09:29:22.490]                               next
[09:29:22.490]                             invokeRestart(restart)
[09:29:22.490]                             muffled <- TRUE
[09:29:22.490]                             break
[09:29:22.490]                           }
[09:29:22.490]                         }
[09:29:22.490]                       }
[09:29:22.490]                       invisible(muffled)
[09:29:22.490]                     }
[09:29:22.490]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.490]                   }
[09:29:22.490]                 }
[09:29:22.490]             }
[09:29:22.490]         }))
[09:29:22.490]     }, error = function(ex) {
[09:29:22.490]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.490]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.490]                 ...future.rng), started = ...future.startTime, 
[09:29:22.490]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.490]             version = "1.8"), class = "FutureResult")
[09:29:22.490]     }, finally = {
[09:29:22.490]         if (!identical(...future.workdir, getwd())) 
[09:29:22.490]             setwd(...future.workdir)
[09:29:22.490]         {
[09:29:22.490]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.490]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.490]             }
[09:29:22.490]             base::options(...future.oldOptions)
[09:29:22.490]             if (.Platform$OS.type == "windows") {
[09:29:22.490]                 old_names <- names(...future.oldEnvVars)
[09:29:22.490]                 envs <- base::Sys.getenv()
[09:29:22.490]                 names <- names(envs)
[09:29:22.490]                 common <- intersect(names, old_names)
[09:29:22.490]                 added <- setdiff(names, old_names)
[09:29:22.490]                 removed <- setdiff(old_names, names)
[09:29:22.490]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.490]                   envs[common]]
[09:29:22.490]                 NAMES <- toupper(changed)
[09:29:22.490]                 args <- list()
[09:29:22.490]                 for (kk in seq_along(NAMES)) {
[09:29:22.490]                   name <- changed[[kk]]
[09:29:22.490]                   NAME <- NAMES[[kk]]
[09:29:22.490]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.490]                     next
[09:29:22.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.490]                 }
[09:29:22.490]                 NAMES <- toupper(added)
[09:29:22.490]                 for (kk in seq_along(NAMES)) {
[09:29:22.490]                   name <- added[[kk]]
[09:29:22.490]                   NAME <- NAMES[[kk]]
[09:29:22.490]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.490]                     next
[09:29:22.490]                   args[[name]] <- ""
[09:29:22.490]                 }
[09:29:22.490]                 NAMES <- toupper(removed)
[09:29:22.490]                 for (kk in seq_along(NAMES)) {
[09:29:22.490]                   name <- removed[[kk]]
[09:29:22.490]                   NAME <- NAMES[[kk]]
[09:29:22.490]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.490]                     next
[09:29:22.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.490]                 }
[09:29:22.490]                 if (length(args) > 0) 
[09:29:22.490]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.490]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.490]             }
[09:29:22.490]             else {
[09:29:22.490]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.490]             }
[09:29:22.490]             {
[09:29:22.490]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.490]                   0L) {
[09:29:22.490]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.490]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.490]                   base::options(opts)
[09:29:22.490]                 }
[09:29:22.490]                 {
[09:29:22.490]                   {
[09:29:22.490]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.490]                     NULL
[09:29:22.490]                   }
[09:29:22.490]                   options(future.plan = NULL)
[09:29:22.490]                   if (is.na(NA_character_)) 
[09:29:22.490]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.490]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.490]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.490]                     .init = FALSE)
[09:29:22.490]                 }
[09:29:22.490]             }
[09:29:22.490]         }
[09:29:22.490]     })
[09:29:22.490]     if (TRUE) {
[09:29:22.490]         base::sink(type = "output", split = FALSE)
[09:29:22.490]         if (TRUE) {
[09:29:22.490]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.490]         }
[09:29:22.490]         else {
[09:29:22.490]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.490]         }
[09:29:22.490]         base::close(...future.stdout)
[09:29:22.490]         ...future.stdout <- NULL
[09:29:22.490]     }
[09:29:22.490]     ...future.result$conditions <- ...future.conditions
[09:29:22.490]     ...future.result$finished <- base::Sys.time()
[09:29:22.490]     ...future.result
[09:29:22.490] }
[09:29:22.493] assign_globals() ...
[09:29:22.493] List of 7
[09:29:22.493]  $ ...future.FUN            :function (...)  
[09:29:22.493]  $ foo                      :function (x = 1, y = 2)  
[09:29:22.493]  $ x                        : num 3
[09:29:22.493]  $ future.call.arguments    : list()
[09:29:22.493]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.493]  $ ...future.elements_ii    :List of 2
[09:29:22.493]   ..$ : int 0
[09:29:22.493]   ..$ : int 0
[09:29:22.493]  $ ...future.seeds_ii       :List of 2
[09:29:22.493]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[09:29:22.493]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[09:29:22.493]  $ ...future.globals.maxSize: NULL
[09:29:22.493]  - attr(*, "where")=List of 7
[09:29:22.493]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.493]   ..$ foo                      :<environment: R_EmptyEnv> 
[09:29:22.493]   ..$ x                        :<environment: R_EmptyEnv> 
[09:29:22.493]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.493]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.493]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.493]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.493]  - attr(*, "resolved")= logi FALSE
[09:29:22.493]  - attr(*, "total_size")= num 2200
[09:29:22.493]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.493]  - attr(*, "already-done")= logi TRUE
[09:29:22.500] - reassign environment for ‘...future.FUN’
[09:29:22.501] - copied ‘...future.FUN’ to environment
[09:29:22.501] - reassign environment for ‘foo’
[09:29:22.501] - copied ‘foo’ to environment
[09:29:22.501] - copied ‘x’ to environment
[09:29:22.501] - copied ‘future.call.arguments’ to environment
[09:29:22.501] - copied ‘...future.elements_ii’ to environment
[09:29:22.501] - copied ‘...future.seeds_ii’ to environment
[09:29:22.501] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.501] assign_globals() ... done
[09:29:22.501] requestCore(): workers = 2
[09:29:22.503] MulticoreFuture started
[09:29:22.504] - Launch lazy future ... done
[09:29:22.504] run() for ‘MulticoreFuture’ ... done
[09:29:22.504] Created future:
[09:29:22.505] plan(): Setting new future strategy stack:
[09:29:22.505] List of future strategies:
[09:29:22.505] 1. sequential:
[09:29:22.505]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.505]    - tweaked: FALSE
[09:29:22.505]    - call: NULL
[09:29:22.506] plan(): nbrOfWorkers() = 1
[09:29:22.508] plan(): Setting new future strategy stack:
[09:29:22.508] List of future strategies:
[09:29:22.508] 1. multicore:
[09:29:22.508]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.508]    - tweaked: FALSE
[09:29:22.508]    - call: plan(strategy)
[09:29:22.513] plan(): nbrOfWorkers() = 2
[09:29:22.504] MulticoreFuture:
[09:29:22.504] Label: ‘future_replicate-1’
[09:29:22.504] Expression:
[09:29:22.504] {
[09:29:22.504]     do.call(function(...) {
[09:29:22.504]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.504]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.504]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.504]             on.exit(options(oopts), add = TRUE)
[09:29:22.504]         }
[09:29:22.504]         {
[09:29:22.504]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.504]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.504]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.504]                   envir = globalenv(), inherits = FALSE)
[09:29:22.504]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.504]             })
[09:29:22.504]         }
[09:29:22.504]     }, args = future.call.arguments)
[09:29:22.504] }
[09:29:22.504] Lazy evaluation: FALSE
[09:29:22.504] Asynchronous evaluation: TRUE
[09:29:22.504] Local evaluation: TRUE
[09:29:22.504] Environment: 0x55d1cbe02ba0
[09:29:22.504] Capture standard output: TRUE
[09:29:22.504] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.504] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[09:29:22.504] Packages: <none>
[09:29:22.504] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.504] Resolved: TRUE
[09:29:22.504] Value: <not collected>
[09:29:22.504] Conditions captured: <none>
[09:29:22.504] Early signaling: FALSE
[09:29:22.504] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.504] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.514] Chunk #1 of 2 ... DONE
[09:29:22.514] Chunk #2 of 2 ...
[09:29:22.515]  - Finding globals in 'X' for chunk #2 ...
[09:29:22.515] getGlobalsAndPackages() ...
[09:29:22.515] Searching for globals...
[09:29:22.515] 
[09:29:22.516] Searching for globals ... DONE
[09:29:22.516] - globals: [0] <none>
[09:29:22.516] getGlobalsAndPackages() ... DONE
[09:29:22.516]    + additional globals found: [n=0] 
[09:29:22.516]    + additional namespaces needed: [n=0] 
[09:29:22.516]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:22.516]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:22.516]  - seeds: [3] <seeds>
[09:29:22.517]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.517] getGlobalsAndPackages() ...
[09:29:22.517] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.517] Resolving globals: FALSE
[09:29:22.517] Tweak future expression to call with '...' arguments ...
[09:29:22.518] {
[09:29:22.518]     do.call(function(...) {
[09:29:22.518]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.518]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.518]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.518]             on.exit(options(oopts), add = TRUE)
[09:29:22.518]         }
[09:29:22.518]         {
[09:29:22.518]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.518]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.518]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.518]                   envir = globalenv(), inherits = FALSE)
[09:29:22.518]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.518]             })
[09:29:22.518]         }
[09:29:22.518]     }, args = future.call.arguments)
[09:29:22.518] }
[09:29:22.518] Tweak future expression to call with '...' arguments ... DONE
[09:29:22.519] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:22.519] 
[09:29:22.519] getGlobalsAndPackages() ... DONE
[09:29:22.519] run() for ‘Future’ ...
[09:29:22.520] - state: ‘created’
[09:29:22.520] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[09:29:22.524] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.525] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[09:29:22.525]   - Field: ‘label’
[09:29:22.525]   - Field: ‘local’
[09:29:22.525]   - Field: ‘owner’
[09:29:22.525]   - Field: ‘envir’
[09:29:22.525]   - Field: ‘workers’
[09:29:22.525]   - Field: ‘packages’
[09:29:22.526]   - Field: ‘gc’
[09:29:22.526]   - Field: ‘job’
[09:29:22.526]   - Field: ‘conditions’
[09:29:22.526]   - Field: ‘expr’
[09:29:22.526]   - Field: ‘uuid’
[09:29:22.526]   - Field: ‘seed’
[09:29:22.526]   - Field: ‘version’
[09:29:22.527]   - Field: ‘result’
[09:29:22.527]   - Field: ‘asynchronous’
[09:29:22.527]   - Field: ‘calls’
[09:29:22.527]   - Field: ‘globals’
[09:29:22.527]   - Field: ‘stdout’
[09:29:22.527]   - Field: ‘earlySignal’
[09:29:22.527]   - Field: ‘lazy’
[09:29:22.528]   - Field: ‘state’
[09:29:22.528] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[09:29:22.528] - Launch lazy future ...
[09:29:22.528] Packages needed by the future expression (n = 0): <none>
[09:29:22.528] Packages needed by future strategies (n = 0): <none>
[09:29:22.529] {
[09:29:22.529]     {
[09:29:22.529]         {
[09:29:22.529]             ...future.startTime <- base::Sys.time()
[09:29:22.529]             {
[09:29:22.529]                 {
[09:29:22.529]                   {
[09:29:22.529]                     {
[09:29:22.529]                       base::local({
[09:29:22.529]                         has_future <- base::requireNamespace("future", 
[09:29:22.529]                           quietly = TRUE)
[09:29:22.529]                         if (has_future) {
[09:29:22.529]                           ns <- base::getNamespace("future")
[09:29:22.529]                           version <- ns[[".package"]][["version"]]
[09:29:22.529]                           if (is.null(version)) 
[09:29:22.529]                             version <- utils::packageVersion("future")
[09:29:22.529]                         }
[09:29:22.529]                         else {
[09:29:22.529]                           version <- NULL
[09:29:22.529]                         }
[09:29:22.529]                         if (!has_future || version < "1.8.0") {
[09:29:22.529]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:22.529]                             "", base::R.version$version.string), 
[09:29:22.529]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:22.529]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:22.529]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:22.529]                               "release", "version")], collapse = " "), 
[09:29:22.529]                             hostname = base::Sys.info()[["nodename"]])
[09:29:22.529]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:22.529]                             info)
[09:29:22.529]                           info <- base::paste(info, collapse = "; ")
[09:29:22.529]                           if (!has_future) {
[09:29:22.529]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:22.529]                               info)
[09:29:22.529]                           }
[09:29:22.529]                           else {
[09:29:22.529]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:22.529]                               info, version)
[09:29:22.529]                           }
[09:29:22.529]                           base::stop(msg)
[09:29:22.529]                         }
[09:29:22.529]                       })
[09:29:22.529]                     }
[09:29:22.529]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:22.529]                     base::options(mc.cores = 1L)
[09:29:22.529]                   }
[09:29:22.529]                   ...future.strategy.old <- future::plan("list")
[09:29:22.529]                   options(future.plan = NULL)
[09:29:22.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:22.529]                 }
[09:29:22.529]                 ...future.workdir <- getwd()
[09:29:22.529]             }
[09:29:22.529]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:22.529]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:22.529]         }
[09:29:22.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:22.529]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:22.529]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:22.529]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:22.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:22.529]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:22.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:22.529]             base::names(...future.oldOptions))
[09:29:22.529]     }
[09:29:22.529]     if (FALSE) {
[09:29:22.529]     }
[09:29:22.529]     else {
[09:29:22.529]         if (TRUE) {
[09:29:22.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:22.529]                 open = "w")
[09:29:22.529]         }
[09:29:22.529]         else {
[09:29:22.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:22.529]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:22.529]         }
[09:29:22.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:22.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:22.529]             base::sink(type = "output", split = FALSE)
[09:29:22.529]             base::close(...future.stdout)
[09:29:22.529]         }, add = TRUE)
[09:29:22.529]     }
[09:29:22.529]     ...future.frame <- base::sys.nframe()
[09:29:22.529]     ...future.conditions <- base::list()
[09:29:22.529]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:22.529]     if (FALSE) {
[09:29:22.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:22.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:22.529]     }
[09:29:22.529]     ...future.result <- base::tryCatch({
[09:29:22.529]         base::withCallingHandlers({
[09:29:22.529]             ...future.value <- base::withVisible(base::local({
[09:29:22.529]                 withCallingHandlers({
[09:29:22.529]                   {
[09:29:22.529]                     do.call(function(...) {
[09:29:22.529]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.529]                       if (!identical(...future.globals.maxSize.org, 
[09:29:22.529]                         ...future.globals.maxSize)) {
[09:29:22.529]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.529]                         on.exit(options(oopts), add = TRUE)
[09:29:22.529]                       }
[09:29:22.529]                       {
[09:29:22.529]                         lapply(seq_along(...future.elements_ii), 
[09:29:22.529]                           FUN = function(jj) {
[09:29:22.529]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.529]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.529]                               envir = globalenv(), inherits = FALSE)
[09:29:22.529]                             ...future.FUN(...future.X_jj, ...)
[09:29:22.529]                           })
[09:29:22.529]                       }
[09:29:22.529]                     }, args = future.call.arguments)
[09:29:22.529]                   }
[09:29:22.529]                 }, immediateCondition = function(cond) {
[09:29:22.529]                   save_rds <- function (object, pathname, ...) 
[09:29:22.529]                   {
[09:29:22.529]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[09:29:22.529]                     if (file_test("-f", pathname_tmp)) {
[09:29:22.529]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.529]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[09:29:22.529]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.529]                         fi_tmp[["mtime"]])
[09:29:22.529]                     }
[09:29:22.529]                     tryCatch({
[09:29:22.529]                       saveRDS(object, file = pathname_tmp, ...)
[09:29:22.529]                     }, error = function(ex) {
[09:29:22.529]                       msg <- conditionMessage(ex)
[09:29:22.529]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.529]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[09:29:22.529]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.529]                         fi_tmp[["mtime"]], msg)
[09:29:22.529]                       ex$message <- msg
[09:29:22.529]                       stop(ex)
[09:29:22.529]                     })
[09:29:22.529]                     stopifnot(file_test("-f", pathname_tmp))
[09:29:22.529]                     res <- file.rename(from = pathname_tmp, to = pathname)
[09:29:22.529]                     if (!res || file_test("-f", pathname_tmp)) {
[09:29:22.529]                       fi_tmp <- file.info(pathname_tmp)
[09:29:22.529]                       fi <- file.info(pathname)
[09:29:22.529]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[09:29:22.529]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[09:29:22.529]                         fi_tmp[["mtime"]], sQuote(pathname), 
[09:29:22.529]                         fi[["size"]], fi[["mtime"]])
[09:29:22.529]                       stop(msg)
[09:29:22.529]                     }
[09:29:22.529]                     invisible(pathname)
[09:29:22.529]                   }
[09:29:22.529]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[09:29:22.529]                     rootPath = tempdir()) 
[09:29:22.529]                   {
[09:29:22.529]                     obj <- list(time = Sys.time(), condition = cond)
[09:29:22.529]                     file <- tempfile(pattern = class(cond)[1], 
[09:29:22.529]                       tmpdir = path, fileext = ".rds")
[09:29:22.529]                     save_rds(obj, file)
[09:29:22.529]                   }
[09:29:22.529]                   saveImmediateCondition(cond, path = "/tmp/RtmpR2yAMg/.future/immediateConditions")
[09:29:22.529]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.529]                   {
[09:29:22.529]                     inherits <- base::inherits
[09:29:22.529]                     invokeRestart <- base::invokeRestart
[09:29:22.529]                     is.null <- base::is.null
[09:29:22.529]                     muffled <- FALSE
[09:29:22.529]                     if (inherits(cond, "message")) {
[09:29:22.529]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:22.529]                       if (muffled) 
[09:29:22.529]                         invokeRestart("muffleMessage")
[09:29:22.529]                     }
[09:29:22.529]                     else if (inherits(cond, "warning")) {
[09:29:22.529]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:22.529]                       if (muffled) 
[09:29:22.529]                         invokeRestart("muffleWarning")
[09:29:22.529]                     }
[09:29:22.529]                     else if (inherits(cond, "condition")) {
[09:29:22.529]                       if (!is.null(pattern)) {
[09:29:22.529]                         computeRestarts <- base::computeRestarts
[09:29:22.529]                         grepl <- base::grepl
[09:29:22.529]                         restarts <- computeRestarts(cond)
[09:29:22.529]                         for (restart in restarts) {
[09:29:22.529]                           name <- restart$name
[09:29:22.529]                           if (is.null(name)) 
[09:29:22.529]                             next
[09:29:22.529]                           if (!grepl(pattern, name)) 
[09:29:22.529]                             next
[09:29:22.529]                           invokeRestart(restart)
[09:29:22.529]                           muffled <- TRUE
[09:29:22.529]                           break
[09:29:22.529]                         }
[09:29:22.529]                       }
[09:29:22.529]                     }
[09:29:22.529]                     invisible(muffled)
[09:29:22.529]                   }
[09:29:22.529]                   muffleCondition(cond)
[09:29:22.529]                 })
[09:29:22.529]             }))
[09:29:22.529]             future::FutureResult(value = ...future.value$value, 
[09:29:22.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.529]                   ...future.rng), globalenv = if (FALSE) 
[09:29:22.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:22.529]                     ...future.globalenv.names))
[09:29:22.529]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:22.529]         }, condition = base::local({
[09:29:22.529]             c <- base::c
[09:29:22.529]             inherits <- base::inherits
[09:29:22.529]             invokeRestart <- base::invokeRestart
[09:29:22.529]             length <- base::length
[09:29:22.529]             list <- base::list
[09:29:22.529]             seq.int <- base::seq.int
[09:29:22.529]             signalCondition <- base::signalCondition
[09:29:22.529]             sys.calls <- base::sys.calls
[09:29:22.529]             `[[` <- base::`[[`
[09:29:22.529]             `+` <- base::`+`
[09:29:22.529]             `<<-` <- base::`<<-`
[09:29:22.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:22.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:22.529]                   3L)]
[09:29:22.529]             }
[09:29:22.529]             function(cond) {
[09:29:22.529]                 is_error <- inherits(cond, "error")
[09:29:22.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:22.529]                   NULL)
[09:29:22.529]                 if (is_error) {
[09:29:22.529]                   sessionInformation <- function() {
[09:29:22.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:22.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:22.529]                       search = base::search(), system = base::Sys.info())
[09:29:22.529]                   }
[09:29:22.529]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:22.529]                     cond$call), session = sessionInformation(), 
[09:29:22.529]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:22.529]                   signalCondition(cond)
[09:29:22.529]                 }
[09:29:22.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:22.529]                 "immediateCondition"))) {
[09:29:22.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:22.529]                   ...future.conditions[[length(...future.conditions) + 
[09:29:22.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:22.529]                   if (TRUE && !signal) {
[09:29:22.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.529]                     {
[09:29:22.529]                       inherits <- base::inherits
[09:29:22.529]                       invokeRestart <- base::invokeRestart
[09:29:22.529]                       is.null <- base::is.null
[09:29:22.529]                       muffled <- FALSE
[09:29:22.529]                       if (inherits(cond, "message")) {
[09:29:22.529]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.529]                         if (muffled) 
[09:29:22.529]                           invokeRestart("muffleMessage")
[09:29:22.529]                       }
[09:29:22.529]                       else if (inherits(cond, "warning")) {
[09:29:22.529]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.529]                         if (muffled) 
[09:29:22.529]                           invokeRestart("muffleWarning")
[09:29:22.529]                       }
[09:29:22.529]                       else if (inherits(cond, "condition")) {
[09:29:22.529]                         if (!is.null(pattern)) {
[09:29:22.529]                           computeRestarts <- base::computeRestarts
[09:29:22.529]                           grepl <- base::grepl
[09:29:22.529]                           restarts <- computeRestarts(cond)
[09:29:22.529]                           for (restart in restarts) {
[09:29:22.529]                             name <- restart$name
[09:29:22.529]                             if (is.null(name)) 
[09:29:22.529]                               next
[09:29:22.529]                             if (!grepl(pattern, name)) 
[09:29:22.529]                               next
[09:29:22.529]                             invokeRestart(restart)
[09:29:22.529]                             muffled <- TRUE
[09:29:22.529]                             break
[09:29:22.529]                           }
[09:29:22.529]                         }
[09:29:22.529]                       }
[09:29:22.529]                       invisible(muffled)
[09:29:22.529]                     }
[09:29:22.529]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.529]                   }
[09:29:22.529]                 }
[09:29:22.529]                 else {
[09:29:22.529]                   if (TRUE) {
[09:29:22.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:22.529]                     {
[09:29:22.529]                       inherits <- base::inherits
[09:29:22.529]                       invokeRestart <- base::invokeRestart
[09:29:22.529]                       is.null <- base::is.null
[09:29:22.529]                       muffled <- FALSE
[09:29:22.529]                       if (inherits(cond, "message")) {
[09:29:22.529]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:22.529]                         if (muffled) 
[09:29:22.529]                           invokeRestart("muffleMessage")
[09:29:22.529]                       }
[09:29:22.529]                       else if (inherits(cond, "warning")) {
[09:29:22.529]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:22.529]                         if (muffled) 
[09:29:22.529]                           invokeRestart("muffleWarning")
[09:29:22.529]                       }
[09:29:22.529]                       else if (inherits(cond, "condition")) {
[09:29:22.529]                         if (!is.null(pattern)) {
[09:29:22.529]                           computeRestarts <- base::computeRestarts
[09:29:22.529]                           grepl <- base::grepl
[09:29:22.529]                           restarts <- computeRestarts(cond)
[09:29:22.529]                           for (restart in restarts) {
[09:29:22.529]                             name <- restart$name
[09:29:22.529]                             if (is.null(name)) 
[09:29:22.529]                               next
[09:29:22.529]                             if (!grepl(pattern, name)) 
[09:29:22.529]                               next
[09:29:22.529]                             invokeRestart(restart)
[09:29:22.529]                             muffled <- TRUE
[09:29:22.529]                             break
[09:29:22.529]                           }
[09:29:22.529]                         }
[09:29:22.529]                       }
[09:29:22.529]                       invisible(muffled)
[09:29:22.529]                     }
[09:29:22.529]                     muffleCondition(cond, pattern = "^muffle")
[09:29:22.529]                   }
[09:29:22.529]                 }
[09:29:22.529]             }
[09:29:22.529]         }))
[09:29:22.529]     }, error = function(ex) {
[09:29:22.529]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:22.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:22.529]                 ...future.rng), started = ...future.startTime, 
[09:29:22.529]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:22.529]             version = "1.8"), class = "FutureResult")
[09:29:22.529]     }, finally = {
[09:29:22.529]         if (!identical(...future.workdir, getwd())) 
[09:29:22.529]             setwd(...future.workdir)
[09:29:22.529]         {
[09:29:22.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:22.529]                 ...future.oldOptions$nwarnings <- NULL
[09:29:22.529]             }
[09:29:22.529]             base::options(...future.oldOptions)
[09:29:22.529]             if (.Platform$OS.type == "windows") {
[09:29:22.529]                 old_names <- names(...future.oldEnvVars)
[09:29:22.529]                 envs <- base::Sys.getenv()
[09:29:22.529]                 names <- names(envs)
[09:29:22.529]                 common <- intersect(names, old_names)
[09:29:22.529]                 added <- setdiff(names, old_names)
[09:29:22.529]                 removed <- setdiff(old_names, names)
[09:29:22.529]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:22.529]                   envs[common]]
[09:29:22.529]                 NAMES <- toupper(changed)
[09:29:22.529]                 args <- list()
[09:29:22.529]                 for (kk in seq_along(NAMES)) {
[09:29:22.529]                   name <- changed[[kk]]
[09:29:22.529]                   NAME <- NAMES[[kk]]
[09:29:22.529]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.529]                     next
[09:29:22.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.529]                 }
[09:29:22.529]                 NAMES <- toupper(added)
[09:29:22.529]                 for (kk in seq_along(NAMES)) {
[09:29:22.529]                   name <- added[[kk]]
[09:29:22.529]                   NAME <- NAMES[[kk]]
[09:29:22.529]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.529]                     next
[09:29:22.529]                   args[[name]] <- ""
[09:29:22.529]                 }
[09:29:22.529]                 NAMES <- toupper(removed)
[09:29:22.529]                 for (kk in seq_along(NAMES)) {
[09:29:22.529]                   name <- removed[[kk]]
[09:29:22.529]                   NAME <- NAMES[[kk]]
[09:29:22.529]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:22.529]                     next
[09:29:22.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:22.529]                 }
[09:29:22.529]                 if (length(args) > 0) 
[09:29:22.529]                   base::do.call(base::Sys.setenv, args = args)
[09:29:22.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:22.529]             }
[09:29:22.529]             else {
[09:29:22.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:22.529]             }
[09:29:22.529]             {
[09:29:22.529]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:22.529]                   0L) {
[09:29:22.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:22.529]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:22.529]                   base::options(opts)
[09:29:22.529]                 }
[09:29:22.529]                 {
[09:29:22.529]                   {
[09:29:22.529]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:22.529]                     NULL
[09:29:22.529]                   }
[09:29:22.529]                   options(future.plan = NULL)
[09:29:22.529]                   if (is.na(NA_character_)) 
[09:29:22.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:22.529]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:22.529]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:22.529]                     .init = FALSE)
[09:29:22.529]                 }
[09:29:22.529]             }
[09:29:22.529]         }
[09:29:22.529]     })
[09:29:22.529]     if (TRUE) {
[09:29:22.529]         base::sink(type = "output", split = FALSE)
[09:29:22.529]         if (TRUE) {
[09:29:22.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:22.529]         }
[09:29:22.529]         else {
[09:29:22.529]             ...future.result["stdout"] <- base::list(NULL)
[09:29:22.529]         }
[09:29:22.529]         base::close(...future.stdout)
[09:29:22.529]         ...future.stdout <- NULL
[09:29:22.529]     }
[09:29:22.529]     ...future.result$conditions <- ...future.conditions
[09:29:22.529]     ...future.result$finished <- base::Sys.time()
[09:29:22.529]     ...future.result
[09:29:22.529] }
[09:29:22.533] assign_globals() ...
[09:29:22.533] List of 7
[09:29:22.533]  $ ...future.FUN            :function (...)  
[09:29:22.533]  $ foo                      :function (x = 1, y = 2)  
[09:29:22.533]  $ x                        : num 3
[09:29:22.533]  $ future.call.arguments    : list()
[09:29:22.533]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:22.533]  $ ...future.elements_ii    :List of 3
[09:29:22.533]   ..$ : int 0
[09:29:22.533]   ..$ : int 0
[09:29:22.533]   ..$ : int 0
[09:29:22.533]  $ ...future.seeds_ii       :List of 3
[09:29:22.533]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[09:29:22.533]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[09:29:22.533]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[09:29:22.533]  $ ...future.globals.maxSize: NULL
[09:29:22.533]  - attr(*, "where")=List of 7
[09:29:22.533]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[09:29:22.533]   ..$ foo                      :<environment: R_EmptyEnv> 
[09:29:22.533]   ..$ x                        :<environment: R_EmptyEnv> 
[09:29:22.533]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[09:29:22.533]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[09:29:22.533]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[09:29:22.533]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[09:29:22.533]  - attr(*, "resolved")= logi FALSE
[09:29:22.533]  - attr(*, "total_size")= num 2200
[09:29:22.533]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:22.533]  - attr(*, "already-done")= logi TRUE
[09:29:22.546] - reassign environment for ‘...future.FUN’
[09:29:22.546] - copied ‘...future.FUN’ to environment
[09:29:22.546] - reassign environment for ‘foo’
[09:29:22.546] - copied ‘foo’ to environment
[09:29:22.547] - copied ‘x’ to environment
[09:29:22.547] - copied ‘future.call.arguments’ to environment
[09:29:22.547] - copied ‘...future.elements_ii’ to environment
[09:29:22.547] - copied ‘...future.seeds_ii’ to environment
[09:29:22.547] - copied ‘...future.globals.maxSize’ to environment
[09:29:22.547] assign_globals() ... done
[09:29:22.548] requestCore(): workers = 2
[09:29:22.550] MulticoreFuture started
[09:29:22.550] - Launch lazy future ... done
[09:29:22.550] run() for ‘MulticoreFuture’ ... done
[09:29:22.551] Created future:
[09:29:22.551] plan(): Setting new future strategy stack:
[09:29:22.551] List of future strategies:
[09:29:22.551] 1. sequential:
[09:29:22.551]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.551]    - tweaked: FALSE
[09:29:22.551]    - call: NULL
[09:29:22.552] plan(): nbrOfWorkers() = 1
[09:29:22.555] plan(): Setting new future strategy stack:
[09:29:22.555] List of future strategies:
[09:29:22.555] 1. multicore:
[09:29:22.555]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[09:29:22.555]    - tweaked: FALSE
[09:29:22.555]    - call: plan(strategy)
[09:29:22.560] plan(): nbrOfWorkers() = 2
[09:29:22.551] MulticoreFuture:
[09:29:22.551] Label: ‘future_replicate-2’
[09:29:22.551] Expression:
[09:29:22.551] {
[09:29:22.551]     do.call(function(...) {
[09:29:22.551]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:22.551]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:22.551]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:22.551]             on.exit(options(oopts), add = TRUE)
[09:29:22.551]         }
[09:29:22.551]         {
[09:29:22.551]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:22.551]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:22.551]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:22.551]                   envir = globalenv(), inherits = FALSE)
[09:29:22.551]                 ...future.FUN(...future.X_jj, ...)
[09:29:22.551]             })
[09:29:22.551]         }
[09:29:22.551]     }, args = future.call.arguments)
[09:29:22.551] }
[09:29:22.551] Lazy evaluation: FALSE
[09:29:22.551] Asynchronous evaluation: TRUE
[09:29:22.551] Local evaluation: TRUE
[09:29:22.551] Environment: 0x55d1cbe02ba0
[09:29:22.551] Capture standard output: TRUE
[09:29:22.551] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:22.551] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[09:29:22.551] Packages: <none>
[09:29:22.551] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:22.551] Resolved: TRUE
[09:29:22.551] Value: <not collected>
[09:29:22.551] Conditions captured: <none>
[09:29:22.551] Early signaling: FALSE
[09:29:22.551] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:22.551] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:22.561] Chunk #2 of 2 ... DONE
[09:29:22.561] Launching 2 futures (chunks) ... DONE
[09:29:22.561] Resolving 2 futures (chunks) ...
[09:29:22.561] resolve() on list ...
[09:29:22.562]  recursive: 0
[09:29:22.562]  length: 2
[09:29:22.562] 
[09:29:22.562] Future #1
[09:29:22.562] result() for MulticoreFuture ...
[09:29:22.563] result() for MulticoreFuture ...
[09:29:22.564] result() for MulticoreFuture ... done
[09:29:22.564] result() for MulticoreFuture ... done
[09:29:22.564] result() for MulticoreFuture ...
[09:29:22.564] result() for MulticoreFuture ... done
[09:29:22.564] signalConditionsASAP(MulticoreFuture, pos=1) ...
[09:29:22.565] - nx: 2
[09:29:22.565] - relay: TRUE
[09:29:22.565] - stdout: TRUE
[09:29:22.565] - signal: TRUE
[09:29:22.565] - resignal: FALSE
[09:29:22.565] - force: TRUE
[09:29:22.566] - relayed: [n=2] FALSE, FALSE
[09:29:22.566] - queued futures: [n=2] FALSE, FALSE
[09:29:22.566]  - until=1
[09:29:22.566]  - relaying element #1
[09:29:22.566] result() for MulticoreFuture ...
[09:29:22.567] result() for MulticoreFuture ... done
[09:29:22.567] result() for MulticoreFuture ...
[09:29:22.567] result() for MulticoreFuture ... done
[09:29:22.567] result() for MulticoreFuture ...
[09:29:22.567] result() for MulticoreFuture ... done
[09:29:22.568] result() for MulticoreFuture ...
[09:29:22.568] result() for MulticoreFuture ... done
[09:29:22.568] - relayed: [n=2] TRUE, FALSE
[09:29:22.568] - queued futures: [n=2] TRUE, FALSE
[09:29:22.568] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[09:29:22.568]  length: 1 (resolved future 1)
[09:29:22.569] Future #2
[09:29:22.569] result() for MulticoreFuture ...
[09:29:22.570] result() for MulticoreFuture ...
[09:29:22.570] result() for MulticoreFuture ... done
[09:29:22.570] result() for MulticoreFuture ... done
[09:29:22.570] result() for MulticoreFuture ...
[09:29:22.571] result() for MulticoreFuture ... done
[09:29:22.571] signalConditionsASAP(MulticoreFuture, pos=2) ...
[09:29:22.571] - nx: 2
[09:29:22.571] - relay: TRUE
[09:29:22.571] - stdout: TRUE
[09:29:22.572] - signal: TRUE
[09:29:22.572] - resignal: FALSE
[09:29:22.572] - force: TRUE
[09:29:22.572] - relayed: [n=2] TRUE, FALSE
[09:29:22.572] - queued futures: [n=2] TRUE, FALSE
[09:29:22.572]  - until=2
[09:29:22.573]  - relaying element #2
[09:29:22.573] result() for MulticoreFuture ...
[09:29:22.573] result() for MulticoreFuture ... done
[09:29:22.573] result() for MulticoreFuture ...
[09:29:22.573] result() for MulticoreFuture ... done
[09:29:22.573] result() for MulticoreFuture ...
[09:29:22.573] result() for MulticoreFuture ... done
[09:29:22.574] result() for MulticoreFuture ...
[09:29:22.574] result() for MulticoreFuture ... done
[09:29:22.574] - relayed: [n=2] TRUE, TRUE
[09:29:22.574] - queued futures: [n=2] TRUE, TRUE
[09:29:22.574] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[09:29:22.574]  length: 0 (resolved future 2)
[09:29:22.574] Relaying remaining futures
[09:29:22.574] signalConditionsASAP(NULL, pos=0) ...
[09:29:22.574] - nx: 2
[09:29:22.575] - relay: TRUE
[09:29:22.575] - stdout: TRUE
[09:29:22.575] - signal: TRUE
[09:29:22.575] - resignal: FALSE
[09:29:22.575] - force: TRUE
[09:29:22.575] - relayed: [n=2] TRUE, TRUE
[09:29:22.575] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:22.575] - relayed: [n=2] TRUE, TRUE
[09:29:22.575] - queued futures: [n=2] TRUE, TRUE
[09:29:22.576] signalConditionsASAP(NULL, pos=0) ... done
[09:29:22.576] resolve() on list ... DONE
[09:29:22.576] result() for MulticoreFuture ...
[09:29:22.576] result() for MulticoreFuture ... done
[09:29:22.576] result() for MulticoreFuture ...
[09:29:22.576] result() for MulticoreFuture ... done
[09:29:22.576] result() for MulticoreFuture ...
[09:29:22.576] result() for MulticoreFuture ... done
[09:29:22.576] result() for MulticoreFuture ...
[09:29:22.577] result() for MulticoreFuture ... done
[09:29:22.577]  - Number of value chunks collected: 2
[09:29:22.577] Resolving 2 futures (chunks) ... DONE
[09:29:22.577] Reducing values from 2 chunks ...
[09:29:22.577]  - Number of values collected after concatenation: 5
[09:29:22.577]  - Number of values expected: 5
[09:29:22.577] Reducing values from 2 chunks ... DONE
[09:29:22.577] future_lapply() ... DONE
[09:29:22.578] plan(): Setting new future strategy stack:
[09:29:22.578] List of future strategies:
[09:29:22.578] 1. sequential:
[09:29:22.578]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:22.578]    - tweaked: FALSE
[09:29:22.578]    - call: plan(sequential)
[09:29:22.578] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[09:29:22.579] plan(): Setting new future strategy stack:
[09:29:22.579] List of future strategies:
[09:29:22.579] 1. multisession:
[09:29:22.579]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:29:22.579]    - tweaked: FALSE
[09:29:22.579]    - call: plan(strategy)
[09:29:22.579] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[09:29:22.580] multisession:
[09:29:22.580] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[09:29:22.580] - tweaked: FALSE
[09:29:22.580] - call: plan(strategy)
[09:29:22.586] getGlobalsAndPackages() ...
[09:29:22.586] Not searching for globals
[09:29:22.586] - globals: [0] <none>
[09:29:22.586] getGlobalsAndPackages() ... DONE
[09:29:22.587] [local output] makeClusterPSOCK() ...
[09:29:22.629] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[09:29:22.630] [local output] Base port: 11446
[09:29:22.630] [local output] Getting setup options for 2 cluster nodes ...
[09:29:22.631] [local output]  - Node 1 of 2 ...
[09:29:22.631] [local output] localMachine=TRUE => revtunnel=FALSE

[09:29:22.632] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpR2yAMg/worker.rank=1.parallelly.parent=34984.88a83732a781.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpR2yAMg/worker.rank=1.parallelly.parent=34984.88a83732a781.pid")'’
[09:29:22.818] - Possible to infer worker's PID: TRUE
[09:29:22.818] [local output] Rscript port: 11446

[09:29:22.819] [local output]  - Node 2 of 2 ...
[09:29:22.819] [local output] localMachine=TRUE => revtunnel=FALSE

[09:29:22.820] [local output] Rscript port: 11446

[09:29:22.820] [local output] Getting setup options for 2 cluster nodes ... done
[09:29:22.820] [local output]  - Parallel setup requested for some PSOCK nodes
[09:29:22.821] [local output] Setting up PSOCK nodes in parallel
[09:29:22.821] List of 36
[09:29:22.821]  $ worker          : chr "localhost"
[09:29:22.821]   ..- attr(*, "localhost")= logi TRUE
[09:29:22.821]  $ master          : chr "localhost"
[09:29:22.821]  $ port            : int 11446
[09:29:22.821]  $ connectTimeout  : num 120
[09:29:22.821]  $ timeout         : num 2592000
[09:29:22.821]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[09:29:22.821]  $ homogeneous     : logi TRUE
[09:29:22.821]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[09:29:22.821]  $ rscript_envs    : NULL
[09:29:22.821]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:29:22.821]  $ rscript_startup : NULL
[09:29:22.821]  $ rscript_sh      : chr "sh"
[09:29:22.821]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:29:22.821]  $ methods         : logi TRUE
[09:29:22.821]  $ socketOptions   : chr "no-delay"
[09:29:22.821]  $ useXDR          : logi FALSE
[09:29:22.821]  $ outfile         : chr "/dev/null"
[09:29:22.821]  $ renice          : int NA
[09:29:22.821]  $ rshcmd          : NULL
[09:29:22.821]  $ user            : chr(0) 
[09:29:22.821]  $ revtunnel       : logi FALSE
[09:29:22.821]  $ rshlogfile      : NULL
[09:29:22.821]  $ rshopts         : chr(0) 
[09:29:22.821]  $ rank            : int 1
[09:29:22.821]  $ manual          : logi FALSE
[09:29:22.821]  $ dryrun          : logi FALSE
[09:29:22.821]  $ quiet           : logi FALSE
[09:29:22.821]  $ setup_strategy  : chr "parallel"
[09:29:22.821]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:29:22.821]  $ pidfile         : chr "/tmp/RtmpR2yAMg/worker.rank=1.parallelly.parent=34984.88a83732a781.pid"
[09:29:22.821]  $ rshcmd_label    : NULL
[09:29:22.821]  $ rsh_call        : NULL
[09:29:22.821]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[09:29:22.821]  $ localMachine    : logi TRUE
[09:29:22.821]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[09:29:22.821]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[09:29:22.821]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[09:29:22.821]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[09:29:22.821]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[09:29:22.821]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[09:29:22.821]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[09:29:22.821]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[09:29:22.821]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[09:29:22.821]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[09:29:22.821]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[09:29:22.821]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[09:29:22.821]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[09:29:22.821]  $ arguments       :List of 28
[09:29:22.821]   ..$ worker          : chr "localhost"
[09:29:22.821]   ..$ master          : NULL
[09:29:22.821]   ..$ port            : int 11446
[09:29:22.821]   ..$ connectTimeout  : num 120
[09:29:22.821]   ..$ timeout         : num 2592000
[09:29:22.821]   ..$ rscript         : NULL
[09:29:22.821]   ..$ homogeneous     : NULL
[09:29:22.821]   ..$ rscript_args    : NULL
[09:29:22.821]   ..$ rscript_envs    : NULL
[09:29:22.821]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[09:29:22.821]   ..$ rscript_startup : NULL
[09:29:22.821]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[09:29:22.821]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[09:29:22.821]   ..$ methods         : logi TRUE
[09:29:22.821]   ..$ socketOptions   : chr "no-delay"
[09:29:22.821]   ..$ useXDR          : logi FALSE
[09:29:22.821]   ..$ outfile         : chr "/dev/null"
[09:29:22.821]   ..$ renice          : int NA
[09:29:22.821]   ..$ rshcmd          : NULL
[09:29:22.821]   ..$ user            : NULL
[09:29:22.821]   ..$ revtunnel       : logi NA
[09:29:22.821]   ..$ rshlogfile      : NULL
[09:29:22.821]   ..$ rshopts         : NULL
[09:29:22.821]   ..$ rank            : int 1
[09:29:22.821]   ..$ manual          : logi FALSE
[09:29:22.821]   ..$ dryrun          : logi FALSE
[09:29:22.821]   ..$ quiet           : logi FALSE
[09:29:22.821]   ..$ setup_strategy  : chr "parallel"
[09:29:22.821]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[09:29:22.837] [local output] System call to launch all workers:
[09:29:22.837] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpR2yAMg/worker.rank=1.parallelly.parent=34984.88a83732a781.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11446 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[09:29:22.838] [local output] Starting PSOCK main server
[09:29:22.843] [local output] Workers launched
[09:29:22.843] [local output] Waiting for workers to connect back
[09:29:22.844]  - [local output] 0 workers out of 2 ready
[09:29:23.086]  - [local output] 0 workers out of 2 ready
[09:29:23.086]  - [local output] 1 workers out of 2 ready
[09:29:23.089]  - [local output] 1 workers out of 2 ready
[09:29:23.089]  - [local output] 2 workers out of 2 ready
[09:29:23.089] [local output] Launching of workers completed
[09:29:23.089] [local output] Collecting session information from workers
[09:29:23.090] [local output]  - Worker #1 of 2
[09:29:23.091] [local output]  - Worker #2 of 2
[09:29:23.091] [local output] makeClusterPSOCK() ... done
[09:29:23.102] Packages needed by the future expression (n = 0): <none>
[09:29:23.102] Packages needed by future strategies (n = 0): <none>
[09:29:23.102] {
[09:29:23.102]     {
[09:29:23.102]         {
[09:29:23.102]             ...future.startTime <- base::Sys.time()
[09:29:23.102]             {
[09:29:23.102]                 {
[09:29:23.102]                   {
[09:29:23.102]                     {
[09:29:23.102]                       base::local({
[09:29:23.102]                         has_future <- base::requireNamespace("future", 
[09:29:23.102]                           quietly = TRUE)
[09:29:23.102]                         if (has_future) {
[09:29:23.102]                           ns <- base::getNamespace("future")
[09:29:23.102]                           version <- ns[[".package"]][["version"]]
[09:29:23.102]                           if (is.null(version)) 
[09:29:23.102]                             version <- utils::packageVersion("future")
[09:29:23.102]                         }
[09:29:23.102]                         else {
[09:29:23.102]                           version <- NULL
[09:29:23.102]                         }
[09:29:23.102]                         if (!has_future || version < "1.8.0") {
[09:29:23.102]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.102]                             "", base::R.version$version.string), 
[09:29:23.102]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.102]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.102]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.102]                               "release", "version")], collapse = " "), 
[09:29:23.102]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.102]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.102]                             info)
[09:29:23.102]                           info <- base::paste(info, collapse = "; ")
[09:29:23.102]                           if (!has_future) {
[09:29:23.102]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.102]                               info)
[09:29:23.102]                           }
[09:29:23.102]                           else {
[09:29:23.102]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.102]                               info, version)
[09:29:23.102]                           }
[09:29:23.102]                           base::stop(msg)
[09:29:23.102]                         }
[09:29:23.102]                       })
[09:29:23.102]                     }
[09:29:23.102]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.102]                     base::options(mc.cores = 1L)
[09:29:23.102]                   }
[09:29:23.102]                   ...future.strategy.old <- future::plan("list")
[09:29:23.102]                   options(future.plan = NULL)
[09:29:23.102]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.102]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.102]                 }
[09:29:23.102]                 ...future.workdir <- getwd()
[09:29:23.102]             }
[09:29:23.102]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.102]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.102]         }
[09:29:23.102]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.102]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[09:29:23.102]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.102]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.102]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.102]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.102]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.102]             base::names(...future.oldOptions))
[09:29:23.102]     }
[09:29:23.102]     if (FALSE) {
[09:29:23.102]     }
[09:29:23.102]     else {
[09:29:23.102]         if (TRUE) {
[09:29:23.102]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.102]                 open = "w")
[09:29:23.102]         }
[09:29:23.102]         else {
[09:29:23.102]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.102]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.102]         }
[09:29:23.102]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.102]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.102]             base::sink(type = "output", split = FALSE)
[09:29:23.102]             base::close(...future.stdout)
[09:29:23.102]         }, add = TRUE)
[09:29:23.102]     }
[09:29:23.102]     ...future.frame <- base::sys.nframe()
[09:29:23.102]     ...future.conditions <- base::list()
[09:29:23.102]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.102]     if (FALSE) {
[09:29:23.102]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.102]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.102]     }
[09:29:23.102]     ...future.result <- base::tryCatch({
[09:29:23.102]         base::withCallingHandlers({
[09:29:23.102]             ...future.value <- base::withVisible(base::local({
[09:29:23.102]                 ...future.makeSendCondition <- base::local({
[09:29:23.102]                   sendCondition <- NULL
[09:29:23.102]                   function(frame = 1L) {
[09:29:23.102]                     if (is.function(sendCondition)) 
[09:29:23.102]                       return(sendCondition)
[09:29:23.102]                     ns <- getNamespace("parallel")
[09:29:23.102]                     if (exists("sendData", mode = "function", 
[09:29:23.102]                       envir = ns)) {
[09:29:23.102]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.102]                         envir = ns)
[09:29:23.102]                       envir <- sys.frame(frame)
[09:29:23.102]                       master <- NULL
[09:29:23.102]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.102]                         !identical(envir, emptyenv())) {
[09:29:23.102]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.102]                           inherits = FALSE)) {
[09:29:23.102]                           master <- get("master", mode = "list", 
[09:29:23.102]                             envir = envir, inherits = FALSE)
[09:29:23.102]                           if (inherits(master, c("SOCKnode", 
[09:29:23.102]                             "SOCK0node"))) {
[09:29:23.102]                             sendCondition <<- function(cond) {
[09:29:23.102]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.102]                                 success = TRUE)
[09:29:23.102]                               parallel_sendData(master, data)
[09:29:23.102]                             }
[09:29:23.102]                             return(sendCondition)
[09:29:23.102]                           }
[09:29:23.102]                         }
[09:29:23.102]                         frame <- frame + 1L
[09:29:23.102]                         envir <- sys.frame(frame)
[09:29:23.102]                       }
[09:29:23.102]                     }
[09:29:23.102]                     sendCondition <<- function(cond) NULL
[09:29:23.102]                   }
[09:29:23.102]                 })
[09:29:23.102]                 withCallingHandlers({
[09:29:23.102]                   NA
[09:29:23.102]                 }, immediateCondition = function(cond) {
[09:29:23.102]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.102]                   sendCondition(cond)
[09:29:23.102]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.102]                   {
[09:29:23.102]                     inherits <- base::inherits
[09:29:23.102]                     invokeRestart <- base::invokeRestart
[09:29:23.102]                     is.null <- base::is.null
[09:29:23.102]                     muffled <- FALSE
[09:29:23.102]                     if (inherits(cond, "message")) {
[09:29:23.102]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.102]                       if (muffled) 
[09:29:23.102]                         invokeRestart("muffleMessage")
[09:29:23.102]                     }
[09:29:23.102]                     else if (inherits(cond, "warning")) {
[09:29:23.102]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.102]                       if (muffled) 
[09:29:23.102]                         invokeRestart("muffleWarning")
[09:29:23.102]                     }
[09:29:23.102]                     else if (inherits(cond, "condition")) {
[09:29:23.102]                       if (!is.null(pattern)) {
[09:29:23.102]                         computeRestarts <- base::computeRestarts
[09:29:23.102]                         grepl <- base::grepl
[09:29:23.102]                         restarts <- computeRestarts(cond)
[09:29:23.102]                         for (restart in restarts) {
[09:29:23.102]                           name <- restart$name
[09:29:23.102]                           if (is.null(name)) 
[09:29:23.102]                             next
[09:29:23.102]                           if (!grepl(pattern, name)) 
[09:29:23.102]                             next
[09:29:23.102]                           invokeRestart(restart)
[09:29:23.102]                           muffled <- TRUE
[09:29:23.102]                           break
[09:29:23.102]                         }
[09:29:23.102]                       }
[09:29:23.102]                     }
[09:29:23.102]                     invisible(muffled)
[09:29:23.102]                   }
[09:29:23.102]                   muffleCondition(cond)
[09:29:23.102]                 })
[09:29:23.102]             }))
[09:29:23.102]             future::FutureResult(value = ...future.value$value, 
[09:29:23.102]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.102]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.102]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.102]                     ...future.globalenv.names))
[09:29:23.102]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.102]         }, condition = base::local({
[09:29:23.102]             c <- base::c
[09:29:23.102]             inherits <- base::inherits
[09:29:23.102]             invokeRestart <- base::invokeRestart
[09:29:23.102]             length <- base::length
[09:29:23.102]             list <- base::list
[09:29:23.102]             seq.int <- base::seq.int
[09:29:23.102]             signalCondition <- base::signalCondition
[09:29:23.102]             sys.calls <- base::sys.calls
[09:29:23.102]             `[[` <- base::`[[`
[09:29:23.102]             `+` <- base::`+`
[09:29:23.102]             `<<-` <- base::`<<-`
[09:29:23.102]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.102]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.102]                   3L)]
[09:29:23.102]             }
[09:29:23.102]             function(cond) {
[09:29:23.102]                 is_error <- inherits(cond, "error")
[09:29:23.102]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.102]                   NULL)
[09:29:23.102]                 if (is_error) {
[09:29:23.102]                   sessionInformation <- function() {
[09:29:23.102]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.102]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.102]                       search = base::search(), system = base::Sys.info())
[09:29:23.102]                   }
[09:29:23.102]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.102]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.102]                     cond$call), session = sessionInformation(), 
[09:29:23.102]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.102]                   signalCondition(cond)
[09:29:23.102]                 }
[09:29:23.102]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.102]                 "immediateCondition"))) {
[09:29:23.102]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.102]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.102]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.102]                   if (TRUE && !signal) {
[09:29:23.102]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.102]                     {
[09:29:23.102]                       inherits <- base::inherits
[09:29:23.102]                       invokeRestart <- base::invokeRestart
[09:29:23.102]                       is.null <- base::is.null
[09:29:23.102]                       muffled <- FALSE
[09:29:23.102]                       if (inherits(cond, "message")) {
[09:29:23.102]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.102]                         if (muffled) 
[09:29:23.102]                           invokeRestart("muffleMessage")
[09:29:23.102]                       }
[09:29:23.102]                       else if (inherits(cond, "warning")) {
[09:29:23.102]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.102]                         if (muffled) 
[09:29:23.102]                           invokeRestart("muffleWarning")
[09:29:23.102]                       }
[09:29:23.102]                       else if (inherits(cond, "condition")) {
[09:29:23.102]                         if (!is.null(pattern)) {
[09:29:23.102]                           computeRestarts <- base::computeRestarts
[09:29:23.102]                           grepl <- base::grepl
[09:29:23.102]                           restarts <- computeRestarts(cond)
[09:29:23.102]                           for (restart in restarts) {
[09:29:23.102]                             name <- restart$name
[09:29:23.102]                             if (is.null(name)) 
[09:29:23.102]                               next
[09:29:23.102]                             if (!grepl(pattern, name)) 
[09:29:23.102]                               next
[09:29:23.102]                             invokeRestart(restart)
[09:29:23.102]                             muffled <- TRUE
[09:29:23.102]                             break
[09:29:23.102]                           }
[09:29:23.102]                         }
[09:29:23.102]                       }
[09:29:23.102]                       invisible(muffled)
[09:29:23.102]                     }
[09:29:23.102]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.102]                   }
[09:29:23.102]                 }
[09:29:23.102]                 else {
[09:29:23.102]                   if (TRUE) {
[09:29:23.102]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.102]                     {
[09:29:23.102]                       inherits <- base::inherits
[09:29:23.102]                       invokeRestart <- base::invokeRestart
[09:29:23.102]                       is.null <- base::is.null
[09:29:23.102]                       muffled <- FALSE
[09:29:23.102]                       if (inherits(cond, "message")) {
[09:29:23.102]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.102]                         if (muffled) 
[09:29:23.102]                           invokeRestart("muffleMessage")
[09:29:23.102]                       }
[09:29:23.102]                       else if (inherits(cond, "warning")) {
[09:29:23.102]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.102]                         if (muffled) 
[09:29:23.102]                           invokeRestart("muffleWarning")
[09:29:23.102]                       }
[09:29:23.102]                       else if (inherits(cond, "condition")) {
[09:29:23.102]                         if (!is.null(pattern)) {
[09:29:23.102]                           computeRestarts <- base::computeRestarts
[09:29:23.102]                           grepl <- base::grepl
[09:29:23.102]                           restarts <- computeRestarts(cond)
[09:29:23.102]                           for (restart in restarts) {
[09:29:23.102]                             name <- restart$name
[09:29:23.102]                             if (is.null(name)) 
[09:29:23.102]                               next
[09:29:23.102]                             if (!grepl(pattern, name)) 
[09:29:23.102]                               next
[09:29:23.102]                             invokeRestart(restart)
[09:29:23.102]                             muffled <- TRUE
[09:29:23.102]                             break
[09:29:23.102]                           }
[09:29:23.102]                         }
[09:29:23.102]                       }
[09:29:23.102]                       invisible(muffled)
[09:29:23.102]                     }
[09:29:23.102]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.102]                   }
[09:29:23.102]                 }
[09:29:23.102]             }
[09:29:23.102]         }))
[09:29:23.102]     }, error = function(ex) {
[09:29:23.102]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.102]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.102]                 ...future.rng), started = ...future.startTime, 
[09:29:23.102]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.102]             version = "1.8"), class = "FutureResult")
[09:29:23.102]     }, finally = {
[09:29:23.102]         if (!identical(...future.workdir, getwd())) 
[09:29:23.102]             setwd(...future.workdir)
[09:29:23.102]         {
[09:29:23.102]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.102]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.102]             }
[09:29:23.102]             base::options(...future.oldOptions)
[09:29:23.102]             if (.Platform$OS.type == "windows") {
[09:29:23.102]                 old_names <- names(...future.oldEnvVars)
[09:29:23.102]                 envs <- base::Sys.getenv()
[09:29:23.102]                 names <- names(envs)
[09:29:23.102]                 common <- intersect(names, old_names)
[09:29:23.102]                 added <- setdiff(names, old_names)
[09:29:23.102]                 removed <- setdiff(old_names, names)
[09:29:23.102]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.102]                   envs[common]]
[09:29:23.102]                 NAMES <- toupper(changed)
[09:29:23.102]                 args <- list()
[09:29:23.102]                 for (kk in seq_along(NAMES)) {
[09:29:23.102]                   name <- changed[[kk]]
[09:29:23.102]                   NAME <- NAMES[[kk]]
[09:29:23.102]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.102]                     next
[09:29:23.102]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.102]                 }
[09:29:23.102]                 NAMES <- toupper(added)
[09:29:23.102]                 for (kk in seq_along(NAMES)) {
[09:29:23.102]                   name <- added[[kk]]
[09:29:23.102]                   NAME <- NAMES[[kk]]
[09:29:23.102]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.102]                     next
[09:29:23.102]                   args[[name]] <- ""
[09:29:23.102]                 }
[09:29:23.102]                 NAMES <- toupper(removed)
[09:29:23.102]                 for (kk in seq_along(NAMES)) {
[09:29:23.102]                   name <- removed[[kk]]
[09:29:23.102]                   NAME <- NAMES[[kk]]
[09:29:23.102]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.102]                     next
[09:29:23.102]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.102]                 }
[09:29:23.102]                 if (length(args) > 0) 
[09:29:23.102]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.102]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.102]             }
[09:29:23.102]             else {
[09:29:23.102]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.102]             }
[09:29:23.102]             {
[09:29:23.102]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.102]                   0L) {
[09:29:23.102]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.102]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.102]                   base::options(opts)
[09:29:23.102]                 }
[09:29:23.102]                 {
[09:29:23.102]                   {
[09:29:23.102]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.102]                     NULL
[09:29:23.102]                   }
[09:29:23.102]                   options(future.plan = NULL)
[09:29:23.102]                   if (is.na(NA_character_)) 
[09:29:23.102]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.102]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.102]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.102]                     .init = FALSE)
[09:29:23.102]                 }
[09:29:23.102]             }
[09:29:23.102]         }
[09:29:23.102]     })
[09:29:23.102]     if (TRUE) {
[09:29:23.102]         base::sink(type = "output", split = FALSE)
[09:29:23.102]         if (TRUE) {
[09:29:23.102]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.102]         }
[09:29:23.102]         else {
[09:29:23.102]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.102]         }
[09:29:23.102]         base::close(...future.stdout)
[09:29:23.102]         ...future.stdout <- NULL
[09:29:23.102]     }
[09:29:23.102]     ...future.result$conditions <- ...future.conditions
[09:29:23.102]     ...future.result$finished <- base::Sys.time()
[09:29:23.102]     ...future.result
[09:29:23.102] }
[09:29:23.153] MultisessionFuture started
[09:29:23.154] result() for ClusterFuture ...
[09:29:23.154] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.154] - Validating connection of MultisessionFuture
[09:29:23.185] - received message: FutureResult
[09:29:23.185] - Received FutureResult
[09:29:23.185] - Erased future from FutureRegistry
[09:29:23.185] result() for ClusterFuture ...
[09:29:23.185] - result already collected: FutureResult
[09:29:23.185] result() for ClusterFuture ... done
[09:29:23.185] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.186] result() for ClusterFuture ... done
[09:29:23.186] result() for ClusterFuture ...
[09:29:23.186] - result already collected: FutureResult
[09:29:23.186] result() for ClusterFuture ... done
[09:29:23.186] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[09:29:23.190] plan(): nbrOfWorkers() = 2
[09:29:23.190] future_lapply() ...
[09:29:23.191] Generating random seeds ...
[09:29:23.191] Generating random seed streams for 5 elements ...
[09:29:23.191] Generating random seed streams for 5 elements ... DONE
[09:29:23.191] Generating random seeds ... DONE
[09:29:23.191] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:23.195] Number of chunks: 2
[09:29:23.195] getGlobalsAndPackagesXApply() ...
[09:29:23.196]  - future.globals: TRUE
[09:29:23.196] getGlobalsAndPackages() ...
[09:29:23.196] Searching for globals...
[09:29:23.197] - globals found: [2] ‘FUN’, ‘sample’
[09:29:23.197] Searching for globals ... DONE
[09:29:23.197] Resolving globals: FALSE
[09:29:23.198] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:23.198] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:23.198] - globals: [1] ‘FUN’
[09:29:23.198] 
[09:29:23.199] getGlobalsAndPackages() ... DONE
[09:29:23.199]  - globals found/used: [n=1] ‘FUN’
[09:29:23.199]  - needed namespaces: [n=0] 
[09:29:23.199] Finding globals ... DONE
[09:29:23.199]  - use_args: TRUE
[09:29:23.199]  - Getting '...' globals ...
[09:29:23.200] resolve() on list ...
[09:29:23.200]  recursive: 0
[09:29:23.200]  length: 1
[09:29:23.200]  elements: ‘...’
[09:29:23.200]  length: 0 (resolved future 1)
[09:29:23.200] resolve() on list ... DONE
[09:29:23.200]    - '...' content: [n=0] 
[09:29:23.200] List of 1
[09:29:23.200]  $ ...: list()
[09:29:23.200]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.200]  - attr(*, "where")=List of 1
[09:29:23.200]   ..$ ...:<environment: 0x55d1cc86b390> 
[09:29:23.200]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.200]  - attr(*, "resolved")= logi TRUE
[09:29:23.200]  - attr(*, "total_size")= num NA
[09:29:23.204]  - Getting '...' globals ... DONE
[09:29:23.204] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:23.204] List of 2
[09:29:23.204]  $ ...future.FUN:function (...)  
[09:29:23.204]  $ ...          : list()
[09:29:23.204]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.204]  - attr(*, "where")=List of 2
[09:29:23.204]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:23.204]   ..$ ...          :<environment: 0x55d1cc86b390> 
[09:29:23.204]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.204]  - attr(*, "resolved")= logi FALSE
[09:29:23.204]  - attr(*, "total_size")= num 616
[09:29:23.207] Packages to be attached in all futures: [n=0] 
[09:29:23.207] getGlobalsAndPackagesXApply() ... DONE
[09:29:23.208] Number of futures (= number of chunks): 2
[09:29:23.208] Launching 2 futures (chunks) ...
[09:29:23.208] Chunk #1 of 2 ...
[09:29:23.208]  - Finding globals in 'X' for chunk #1 ...
[09:29:23.208] getGlobalsAndPackages() ...
[09:29:23.208] Searching for globals...
[09:29:23.209] 
[09:29:23.209] Searching for globals ... DONE
[09:29:23.209] - globals: [0] <none>
[09:29:23.209] getGlobalsAndPackages() ... DONE
[09:29:23.209]    + additional globals found: [n=0] 
[09:29:23.209]    + additional namespaces needed: [n=0] 
[09:29:23.209]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:23.209]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.209]  - seeds: [2] <seeds>
[09:29:23.210]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.210] getGlobalsAndPackages() ...
[09:29:23.210] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.210] Resolving globals: FALSE
[09:29:23.210] Tweak future expression to call with '...' arguments ...
[09:29:23.210] {
[09:29:23.210]     do.call(function(...) {
[09:29:23.210]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.210]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.210]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.210]             on.exit(options(oopts), add = TRUE)
[09:29:23.210]         }
[09:29:23.210]         {
[09:29:23.210]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.210]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.210]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.210]                   envir = globalenv(), inherits = FALSE)
[09:29:23.210]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.210]             })
[09:29:23.210]         }
[09:29:23.210]     }, args = future.call.arguments)
[09:29:23.210] }
[09:29:23.211] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.211] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.211] 
[09:29:23.211] getGlobalsAndPackages() ... DONE
[09:29:23.212] run() for ‘Future’ ...
[09:29:23.212] - state: ‘created’
[09:29:23.212] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.226] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.227] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.227]   - Field: ‘node’
[09:29:23.227]   - Field: ‘label’
[09:29:23.227]   - Field: ‘local’
[09:29:23.227]   - Field: ‘owner’
[09:29:23.227]   - Field: ‘envir’
[09:29:23.227]   - Field: ‘workers’
[09:29:23.227]   - Field: ‘packages’
[09:29:23.227]   - Field: ‘gc’
[09:29:23.227]   - Field: ‘conditions’
[09:29:23.228]   - Field: ‘persistent’
[09:29:23.228]   - Field: ‘expr’
[09:29:23.228]   - Field: ‘uuid’
[09:29:23.228]   - Field: ‘seed’
[09:29:23.228]   - Field: ‘version’
[09:29:23.228]   - Field: ‘result’
[09:29:23.228]   - Field: ‘asynchronous’
[09:29:23.229]   - Field: ‘calls’
[09:29:23.229]   - Field: ‘globals’
[09:29:23.229]   - Field: ‘stdout’
[09:29:23.229]   - Field: ‘earlySignal’
[09:29:23.229]   - Field: ‘lazy’
[09:29:23.229]   - Field: ‘state’
[09:29:23.229] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.229] - Launch lazy future ...
[09:29:23.230] Packages needed by the future expression (n = 0): <none>
[09:29:23.230] Packages needed by future strategies (n = 0): <none>
[09:29:23.230] {
[09:29:23.230]     {
[09:29:23.230]         {
[09:29:23.230]             ...future.startTime <- base::Sys.time()
[09:29:23.230]             {
[09:29:23.230]                 {
[09:29:23.230]                   {
[09:29:23.230]                     {
[09:29:23.230]                       base::local({
[09:29:23.230]                         has_future <- base::requireNamespace("future", 
[09:29:23.230]                           quietly = TRUE)
[09:29:23.230]                         if (has_future) {
[09:29:23.230]                           ns <- base::getNamespace("future")
[09:29:23.230]                           version <- ns[[".package"]][["version"]]
[09:29:23.230]                           if (is.null(version)) 
[09:29:23.230]                             version <- utils::packageVersion("future")
[09:29:23.230]                         }
[09:29:23.230]                         else {
[09:29:23.230]                           version <- NULL
[09:29:23.230]                         }
[09:29:23.230]                         if (!has_future || version < "1.8.0") {
[09:29:23.230]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.230]                             "", base::R.version$version.string), 
[09:29:23.230]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.230]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.230]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.230]                               "release", "version")], collapse = " "), 
[09:29:23.230]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.230]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.230]                             info)
[09:29:23.230]                           info <- base::paste(info, collapse = "; ")
[09:29:23.230]                           if (!has_future) {
[09:29:23.230]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.230]                               info)
[09:29:23.230]                           }
[09:29:23.230]                           else {
[09:29:23.230]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.230]                               info, version)
[09:29:23.230]                           }
[09:29:23.230]                           base::stop(msg)
[09:29:23.230]                         }
[09:29:23.230]                       })
[09:29:23.230]                     }
[09:29:23.230]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.230]                     base::options(mc.cores = 1L)
[09:29:23.230]                   }
[09:29:23.230]                   ...future.strategy.old <- future::plan("list")
[09:29:23.230]                   options(future.plan = NULL)
[09:29:23.230]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.230]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.230]                 }
[09:29:23.230]                 ...future.workdir <- getwd()
[09:29:23.230]             }
[09:29:23.230]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.230]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.230]         }
[09:29:23.230]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.230]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.230]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.230]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.230]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.230]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.230]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.230]             base::names(...future.oldOptions))
[09:29:23.230]     }
[09:29:23.230]     if (FALSE) {
[09:29:23.230]     }
[09:29:23.230]     else {
[09:29:23.230]         if (TRUE) {
[09:29:23.230]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.230]                 open = "w")
[09:29:23.230]         }
[09:29:23.230]         else {
[09:29:23.230]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.230]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.230]         }
[09:29:23.230]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.230]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.230]             base::sink(type = "output", split = FALSE)
[09:29:23.230]             base::close(...future.stdout)
[09:29:23.230]         }, add = TRUE)
[09:29:23.230]     }
[09:29:23.230]     ...future.frame <- base::sys.nframe()
[09:29:23.230]     ...future.conditions <- base::list()
[09:29:23.230]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.230]     if (FALSE) {
[09:29:23.230]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.230]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.230]     }
[09:29:23.230]     ...future.result <- base::tryCatch({
[09:29:23.230]         base::withCallingHandlers({
[09:29:23.230]             ...future.value <- base::withVisible(base::local({
[09:29:23.230]                 ...future.makeSendCondition <- base::local({
[09:29:23.230]                   sendCondition <- NULL
[09:29:23.230]                   function(frame = 1L) {
[09:29:23.230]                     if (is.function(sendCondition)) 
[09:29:23.230]                       return(sendCondition)
[09:29:23.230]                     ns <- getNamespace("parallel")
[09:29:23.230]                     if (exists("sendData", mode = "function", 
[09:29:23.230]                       envir = ns)) {
[09:29:23.230]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.230]                         envir = ns)
[09:29:23.230]                       envir <- sys.frame(frame)
[09:29:23.230]                       master <- NULL
[09:29:23.230]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.230]                         !identical(envir, emptyenv())) {
[09:29:23.230]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.230]                           inherits = FALSE)) {
[09:29:23.230]                           master <- get("master", mode = "list", 
[09:29:23.230]                             envir = envir, inherits = FALSE)
[09:29:23.230]                           if (inherits(master, c("SOCKnode", 
[09:29:23.230]                             "SOCK0node"))) {
[09:29:23.230]                             sendCondition <<- function(cond) {
[09:29:23.230]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.230]                                 success = TRUE)
[09:29:23.230]                               parallel_sendData(master, data)
[09:29:23.230]                             }
[09:29:23.230]                             return(sendCondition)
[09:29:23.230]                           }
[09:29:23.230]                         }
[09:29:23.230]                         frame <- frame + 1L
[09:29:23.230]                         envir <- sys.frame(frame)
[09:29:23.230]                       }
[09:29:23.230]                     }
[09:29:23.230]                     sendCondition <<- function(cond) NULL
[09:29:23.230]                   }
[09:29:23.230]                 })
[09:29:23.230]                 withCallingHandlers({
[09:29:23.230]                   {
[09:29:23.230]                     do.call(function(...) {
[09:29:23.230]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.230]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.230]                         ...future.globals.maxSize)) {
[09:29:23.230]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.230]                         on.exit(options(oopts), add = TRUE)
[09:29:23.230]                       }
[09:29:23.230]                       {
[09:29:23.230]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.230]                           FUN = function(jj) {
[09:29:23.230]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.230]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.230]                               envir = globalenv(), inherits = FALSE)
[09:29:23.230]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.230]                           })
[09:29:23.230]                       }
[09:29:23.230]                     }, args = future.call.arguments)
[09:29:23.230]                   }
[09:29:23.230]                 }, immediateCondition = function(cond) {
[09:29:23.230]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.230]                   sendCondition(cond)
[09:29:23.230]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.230]                   {
[09:29:23.230]                     inherits <- base::inherits
[09:29:23.230]                     invokeRestart <- base::invokeRestart
[09:29:23.230]                     is.null <- base::is.null
[09:29:23.230]                     muffled <- FALSE
[09:29:23.230]                     if (inherits(cond, "message")) {
[09:29:23.230]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.230]                       if (muffled) 
[09:29:23.230]                         invokeRestart("muffleMessage")
[09:29:23.230]                     }
[09:29:23.230]                     else if (inherits(cond, "warning")) {
[09:29:23.230]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.230]                       if (muffled) 
[09:29:23.230]                         invokeRestart("muffleWarning")
[09:29:23.230]                     }
[09:29:23.230]                     else if (inherits(cond, "condition")) {
[09:29:23.230]                       if (!is.null(pattern)) {
[09:29:23.230]                         computeRestarts <- base::computeRestarts
[09:29:23.230]                         grepl <- base::grepl
[09:29:23.230]                         restarts <- computeRestarts(cond)
[09:29:23.230]                         for (restart in restarts) {
[09:29:23.230]                           name <- restart$name
[09:29:23.230]                           if (is.null(name)) 
[09:29:23.230]                             next
[09:29:23.230]                           if (!grepl(pattern, name)) 
[09:29:23.230]                             next
[09:29:23.230]                           invokeRestart(restart)
[09:29:23.230]                           muffled <- TRUE
[09:29:23.230]                           break
[09:29:23.230]                         }
[09:29:23.230]                       }
[09:29:23.230]                     }
[09:29:23.230]                     invisible(muffled)
[09:29:23.230]                   }
[09:29:23.230]                   muffleCondition(cond)
[09:29:23.230]                 })
[09:29:23.230]             }))
[09:29:23.230]             future::FutureResult(value = ...future.value$value, 
[09:29:23.230]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.230]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.230]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.230]                     ...future.globalenv.names))
[09:29:23.230]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.230]         }, condition = base::local({
[09:29:23.230]             c <- base::c
[09:29:23.230]             inherits <- base::inherits
[09:29:23.230]             invokeRestart <- base::invokeRestart
[09:29:23.230]             length <- base::length
[09:29:23.230]             list <- base::list
[09:29:23.230]             seq.int <- base::seq.int
[09:29:23.230]             signalCondition <- base::signalCondition
[09:29:23.230]             sys.calls <- base::sys.calls
[09:29:23.230]             `[[` <- base::`[[`
[09:29:23.230]             `+` <- base::`+`
[09:29:23.230]             `<<-` <- base::`<<-`
[09:29:23.230]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.230]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.230]                   3L)]
[09:29:23.230]             }
[09:29:23.230]             function(cond) {
[09:29:23.230]                 is_error <- inherits(cond, "error")
[09:29:23.230]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.230]                   NULL)
[09:29:23.230]                 if (is_error) {
[09:29:23.230]                   sessionInformation <- function() {
[09:29:23.230]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.230]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.230]                       search = base::search(), system = base::Sys.info())
[09:29:23.230]                   }
[09:29:23.230]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.230]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.230]                     cond$call), session = sessionInformation(), 
[09:29:23.230]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.230]                   signalCondition(cond)
[09:29:23.230]                 }
[09:29:23.230]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.230]                 "immediateCondition"))) {
[09:29:23.230]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.230]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.230]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.230]                   if (TRUE && !signal) {
[09:29:23.230]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.230]                     {
[09:29:23.230]                       inherits <- base::inherits
[09:29:23.230]                       invokeRestart <- base::invokeRestart
[09:29:23.230]                       is.null <- base::is.null
[09:29:23.230]                       muffled <- FALSE
[09:29:23.230]                       if (inherits(cond, "message")) {
[09:29:23.230]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.230]                         if (muffled) 
[09:29:23.230]                           invokeRestart("muffleMessage")
[09:29:23.230]                       }
[09:29:23.230]                       else if (inherits(cond, "warning")) {
[09:29:23.230]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.230]                         if (muffled) 
[09:29:23.230]                           invokeRestart("muffleWarning")
[09:29:23.230]                       }
[09:29:23.230]                       else if (inherits(cond, "condition")) {
[09:29:23.230]                         if (!is.null(pattern)) {
[09:29:23.230]                           computeRestarts <- base::computeRestarts
[09:29:23.230]                           grepl <- base::grepl
[09:29:23.230]                           restarts <- computeRestarts(cond)
[09:29:23.230]                           for (restart in restarts) {
[09:29:23.230]                             name <- restart$name
[09:29:23.230]                             if (is.null(name)) 
[09:29:23.230]                               next
[09:29:23.230]                             if (!grepl(pattern, name)) 
[09:29:23.230]                               next
[09:29:23.230]                             invokeRestart(restart)
[09:29:23.230]                             muffled <- TRUE
[09:29:23.230]                             break
[09:29:23.230]                           }
[09:29:23.230]                         }
[09:29:23.230]                       }
[09:29:23.230]                       invisible(muffled)
[09:29:23.230]                     }
[09:29:23.230]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.230]                   }
[09:29:23.230]                 }
[09:29:23.230]                 else {
[09:29:23.230]                   if (TRUE) {
[09:29:23.230]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.230]                     {
[09:29:23.230]                       inherits <- base::inherits
[09:29:23.230]                       invokeRestart <- base::invokeRestart
[09:29:23.230]                       is.null <- base::is.null
[09:29:23.230]                       muffled <- FALSE
[09:29:23.230]                       if (inherits(cond, "message")) {
[09:29:23.230]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.230]                         if (muffled) 
[09:29:23.230]                           invokeRestart("muffleMessage")
[09:29:23.230]                       }
[09:29:23.230]                       else if (inherits(cond, "warning")) {
[09:29:23.230]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.230]                         if (muffled) 
[09:29:23.230]                           invokeRestart("muffleWarning")
[09:29:23.230]                       }
[09:29:23.230]                       else if (inherits(cond, "condition")) {
[09:29:23.230]                         if (!is.null(pattern)) {
[09:29:23.230]                           computeRestarts <- base::computeRestarts
[09:29:23.230]                           grepl <- base::grepl
[09:29:23.230]                           restarts <- computeRestarts(cond)
[09:29:23.230]                           for (restart in restarts) {
[09:29:23.230]                             name <- restart$name
[09:29:23.230]                             if (is.null(name)) 
[09:29:23.230]                               next
[09:29:23.230]                             if (!grepl(pattern, name)) 
[09:29:23.230]                               next
[09:29:23.230]                             invokeRestart(restart)
[09:29:23.230]                             muffled <- TRUE
[09:29:23.230]                             break
[09:29:23.230]                           }
[09:29:23.230]                         }
[09:29:23.230]                       }
[09:29:23.230]                       invisible(muffled)
[09:29:23.230]                     }
[09:29:23.230]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.230]                   }
[09:29:23.230]                 }
[09:29:23.230]             }
[09:29:23.230]         }))
[09:29:23.230]     }, error = function(ex) {
[09:29:23.230]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.230]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.230]                 ...future.rng), started = ...future.startTime, 
[09:29:23.230]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.230]             version = "1.8"), class = "FutureResult")
[09:29:23.230]     }, finally = {
[09:29:23.230]         if (!identical(...future.workdir, getwd())) 
[09:29:23.230]             setwd(...future.workdir)
[09:29:23.230]         {
[09:29:23.230]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.230]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.230]             }
[09:29:23.230]             base::options(...future.oldOptions)
[09:29:23.230]             if (.Platform$OS.type == "windows") {
[09:29:23.230]                 old_names <- names(...future.oldEnvVars)
[09:29:23.230]                 envs <- base::Sys.getenv()
[09:29:23.230]                 names <- names(envs)
[09:29:23.230]                 common <- intersect(names, old_names)
[09:29:23.230]                 added <- setdiff(names, old_names)
[09:29:23.230]                 removed <- setdiff(old_names, names)
[09:29:23.230]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.230]                   envs[common]]
[09:29:23.230]                 NAMES <- toupper(changed)
[09:29:23.230]                 args <- list()
[09:29:23.230]                 for (kk in seq_along(NAMES)) {
[09:29:23.230]                   name <- changed[[kk]]
[09:29:23.230]                   NAME <- NAMES[[kk]]
[09:29:23.230]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.230]                     next
[09:29:23.230]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.230]                 }
[09:29:23.230]                 NAMES <- toupper(added)
[09:29:23.230]                 for (kk in seq_along(NAMES)) {
[09:29:23.230]                   name <- added[[kk]]
[09:29:23.230]                   NAME <- NAMES[[kk]]
[09:29:23.230]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.230]                     next
[09:29:23.230]                   args[[name]] <- ""
[09:29:23.230]                 }
[09:29:23.230]                 NAMES <- toupper(removed)
[09:29:23.230]                 for (kk in seq_along(NAMES)) {
[09:29:23.230]                   name <- removed[[kk]]
[09:29:23.230]                   NAME <- NAMES[[kk]]
[09:29:23.230]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.230]                     next
[09:29:23.230]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.230]                 }
[09:29:23.230]                 if (length(args) > 0) 
[09:29:23.230]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.230]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.230]             }
[09:29:23.230]             else {
[09:29:23.230]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.230]             }
[09:29:23.230]             {
[09:29:23.230]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.230]                   0L) {
[09:29:23.230]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.230]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.230]                   base::options(opts)
[09:29:23.230]                 }
[09:29:23.230]                 {
[09:29:23.230]                   {
[09:29:23.230]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.230]                     NULL
[09:29:23.230]                   }
[09:29:23.230]                   options(future.plan = NULL)
[09:29:23.230]                   if (is.na(NA_character_)) 
[09:29:23.230]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.230]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.230]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.230]                     .init = FALSE)
[09:29:23.230]                 }
[09:29:23.230]             }
[09:29:23.230]         }
[09:29:23.230]     })
[09:29:23.230]     if (TRUE) {
[09:29:23.230]         base::sink(type = "output", split = FALSE)
[09:29:23.230]         if (TRUE) {
[09:29:23.230]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.230]         }
[09:29:23.230]         else {
[09:29:23.230]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.230]         }
[09:29:23.230]         base::close(...future.stdout)
[09:29:23.230]         ...future.stdout <- NULL
[09:29:23.230]     }
[09:29:23.230]     ...future.result$conditions <- ...future.conditions
[09:29:23.230]     ...future.result$finished <- base::Sys.time()
[09:29:23.230]     ...future.result
[09:29:23.230] }
[09:29:23.233] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[09:29:23.234] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[09:29:23.234] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[09:29:23.234] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[09:29:23.235] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.235] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[09:29:23.235] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[09:29:23.236] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[09:29:23.236] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[09:29:23.236] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[09:29:23.237] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.237] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[09:29:23.237] MultisessionFuture started
[09:29:23.237] - Launch lazy future ... done
[09:29:23.238] run() for ‘MultisessionFuture’ ... done
[09:29:23.238] Created future:
[09:29:23.238] MultisessionFuture:
[09:29:23.238] Label: ‘future_replicate-1’
[09:29:23.238] Expression:
[09:29:23.238] {
[09:29:23.238]     do.call(function(...) {
[09:29:23.238]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.238]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.238]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.238]             on.exit(options(oopts), add = TRUE)
[09:29:23.238]         }
[09:29:23.238]         {
[09:29:23.238]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.238]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.238]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.238]                   envir = globalenv(), inherits = FALSE)
[09:29:23.238]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.238]             })
[09:29:23.238]         }
[09:29:23.238]     }, args = future.call.arguments)
[09:29:23.238] }
[09:29:23.238] Lazy evaluation: FALSE
[09:29:23.238] Asynchronous evaluation: TRUE
[09:29:23.238] Local evaluation: TRUE
[09:29:23.238] Environment: R_GlobalEnv
[09:29:23.238] Capture standard output: TRUE
[09:29:23.238] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.238] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.238] Packages: <none>
[09:29:23.238] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.238] Resolved: FALSE
[09:29:23.238] Value: <not collected>
[09:29:23.238] Conditions captured: <none>
[09:29:23.238] Early signaling: FALSE
[09:29:23.238] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.238] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.250] Chunk #1 of 2 ... DONE
[09:29:23.250] Chunk #2 of 2 ...
[09:29:23.250]  - Finding globals in 'X' for chunk #2 ...
[09:29:23.250] getGlobalsAndPackages() ...
[09:29:23.251] Searching for globals...
[09:29:23.251] 
[09:29:23.251] Searching for globals ... DONE
[09:29:23.251] - globals: [0] <none>
[09:29:23.251] getGlobalsAndPackages() ... DONE
[09:29:23.251]    + additional globals found: [n=0] 
[09:29:23.251]    + additional namespaces needed: [n=0] 
[09:29:23.252]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:23.252]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.252]  - seeds: [3] <seeds>
[09:29:23.252]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.252] getGlobalsAndPackages() ...
[09:29:23.252] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.252] Resolving globals: FALSE
[09:29:23.252] Tweak future expression to call with '...' arguments ...
[09:29:23.253] {
[09:29:23.253]     do.call(function(...) {
[09:29:23.253]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.253]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.253]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.253]             on.exit(options(oopts), add = TRUE)
[09:29:23.253]         }
[09:29:23.253]         {
[09:29:23.253]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.253]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.253]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.253]                   envir = globalenv(), inherits = FALSE)
[09:29:23.253]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.253]             })
[09:29:23.253]         }
[09:29:23.253]     }, args = future.call.arguments)
[09:29:23.253] }
[09:29:23.253] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.253] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.253] 
[09:29:23.254] getGlobalsAndPackages() ... DONE
[09:29:23.254] run() for ‘Future’ ...
[09:29:23.254] - state: ‘created’
[09:29:23.254] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.269] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.269] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.269]   - Field: ‘node’
[09:29:23.269]   - Field: ‘label’
[09:29:23.269]   - Field: ‘local’
[09:29:23.269]   - Field: ‘owner’
[09:29:23.269]   - Field: ‘envir’
[09:29:23.269]   - Field: ‘workers’
[09:29:23.269]   - Field: ‘packages’
[09:29:23.270]   - Field: ‘gc’
[09:29:23.270]   - Field: ‘conditions’
[09:29:23.270]   - Field: ‘persistent’
[09:29:23.270]   - Field: ‘expr’
[09:29:23.270]   - Field: ‘uuid’
[09:29:23.270]   - Field: ‘seed’
[09:29:23.270]   - Field: ‘version’
[09:29:23.270]   - Field: ‘result’
[09:29:23.270]   - Field: ‘asynchronous’
[09:29:23.271]   - Field: ‘calls’
[09:29:23.271]   - Field: ‘globals’
[09:29:23.271]   - Field: ‘stdout’
[09:29:23.271]   - Field: ‘earlySignal’
[09:29:23.271]   - Field: ‘lazy’
[09:29:23.271]   - Field: ‘state’
[09:29:23.271] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.271] - Launch lazy future ...
[09:29:23.272] Packages needed by the future expression (n = 0): <none>
[09:29:23.272] Packages needed by future strategies (n = 0): <none>
[09:29:23.272] {
[09:29:23.272]     {
[09:29:23.272]         {
[09:29:23.272]             ...future.startTime <- base::Sys.time()
[09:29:23.272]             {
[09:29:23.272]                 {
[09:29:23.272]                   {
[09:29:23.272]                     {
[09:29:23.272]                       base::local({
[09:29:23.272]                         has_future <- base::requireNamespace("future", 
[09:29:23.272]                           quietly = TRUE)
[09:29:23.272]                         if (has_future) {
[09:29:23.272]                           ns <- base::getNamespace("future")
[09:29:23.272]                           version <- ns[[".package"]][["version"]]
[09:29:23.272]                           if (is.null(version)) 
[09:29:23.272]                             version <- utils::packageVersion("future")
[09:29:23.272]                         }
[09:29:23.272]                         else {
[09:29:23.272]                           version <- NULL
[09:29:23.272]                         }
[09:29:23.272]                         if (!has_future || version < "1.8.0") {
[09:29:23.272]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.272]                             "", base::R.version$version.string), 
[09:29:23.272]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.272]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.272]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.272]                               "release", "version")], collapse = " "), 
[09:29:23.272]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.272]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.272]                             info)
[09:29:23.272]                           info <- base::paste(info, collapse = "; ")
[09:29:23.272]                           if (!has_future) {
[09:29:23.272]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.272]                               info)
[09:29:23.272]                           }
[09:29:23.272]                           else {
[09:29:23.272]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.272]                               info, version)
[09:29:23.272]                           }
[09:29:23.272]                           base::stop(msg)
[09:29:23.272]                         }
[09:29:23.272]                       })
[09:29:23.272]                     }
[09:29:23.272]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.272]                     base::options(mc.cores = 1L)
[09:29:23.272]                   }
[09:29:23.272]                   ...future.strategy.old <- future::plan("list")
[09:29:23.272]                   options(future.plan = NULL)
[09:29:23.272]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.272]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.272]                 }
[09:29:23.272]                 ...future.workdir <- getwd()
[09:29:23.272]             }
[09:29:23.272]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.272]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.272]         }
[09:29:23.272]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.272]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.272]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.272]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.272]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.272]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.272]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.272]             base::names(...future.oldOptions))
[09:29:23.272]     }
[09:29:23.272]     if (FALSE) {
[09:29:23.272]     }
[09:29:23.272]     else {
[09:29:23.272]         if (TRUE) {
[09:29:23.272]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.272]                 open = "w")
[09:29:23.272]         }
[09:29:23.272]         else {
[09:29:23.272]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.272]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.272]         }
[09:29:23.272]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.272]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.272]             base::sink(type = "output", split = FALSE)
[09:29:23.272]             base::close(...future.stdout)
[09:29:23.272]         }, add = TRUE)
[09:29:23.272]     }
[09:29:23.272]     ...future.frame <- base::sys.nframe()
[09:29:23.272]     ...future.conditions <- base::list()
[09:29:23.272]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.272]     if (FALSE) {
[09:29:23.272]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.272]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.272]     }
[09:29:23.272]     ...future.result <- base::tryCatch({
[09:29:23.272]         base::withCallingHandlers({
[09:29:23.272]             ...future.value <- base::withVisible(base::local({
[09:29:23.272]                 ...future.makeSendCondition <- base::local({
[09:29:23.272]                   sendCondition <- NULL
[09:29:23.272]                   function(frame = 1L) {
[09:29:23.272]                     if (is.function(sendCondition)) 
[09:29:23.272]                       return(sendCondition)
[09:29:23.272]                     ns <- getNamespace("parallel")
[09:29:23.272]                     if (exists("sendData", mode = "function", 
[09:29:23.272]                       envir = ns)) {
[09:29:23.272]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.272]                         envir = ns)
[09:29:23.272]                       envir <- sys.frame(frame)
[09:29:23.272]                       master <- NULL
[09:29:23.272]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.272]                         !identical(envir, emptyenv())) {
[09:29:23.272]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.272]                           inherits = FALSE)) {
[09:29:23.272]                           master <- get("master", mode = "list", 
[09:29:23.272]                             envir = envir, inherits = FALSE)
[09:29:23.272]                           if (inherits(master, c("SOCKnode", 
[09:29:23.272]                             "SOCK0node"))) {
[09:29:23.272]                             sendCondition <<- function(cond) {
[09:29:23.272]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.272]                                 success = TRUE)
[09:29:23.272]                               parallel_sendData(master, data)
[09:29:23.272]                             }
[09:29:23.272]                             return(sendCondition)
[09:29:23.272]                           }
[09:29:23.272]                         }
[09:29:23.272]                         frame <- frame + 1L
[09:29:23.272]                         envir <- sys.frame(frame)
[09:29:23.272]                       }
[09:29:23.272]                     }
[09:29:23.272]                     sendCondition <<- function(cond) NULL
[09:29:23.272]                   }
[09:29:23.272]                 })
[09:29:23.272]                 withCallingHandlers({
[09:29:23.272]                   {
[09:29:23.272]                     do.call(function(...) {
[09:29:23.272]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.272]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.272]                         ...future.globals.maxSize)) {
[09:29:23.272]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.272]                         on.exit(options(oopts), add = TRUE)
[09:29:23.272]                       }
[09:29:23.272]                       {
[09:29:23.272]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.272]                           FUN = function(jj) {
[09:29:23.272]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.272]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.272]                               envir = globalenv(), inherits = FALSE)
[09:29:23.272]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.272]                           })
[09:29:23.272]                       }
[09:29:23.272]                     }, args = future.call.arguments)
[09:29:23.272]                   }
[09:29:23.272]                 }, immediateCondition = function(cond) {
[09:29:23.272]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.272]                   sendCondition(cond)
[09:29:23.272]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.272]                   {
[09:29:23.272]                     inherits <- base::inherits
[09:29:23.272]                     invokeRestart <- base::invokeRestart
[09:29:23.272]                     is.null <- base::is.null
[09:29:23.272]                     muffled <- FALSE
[09:29:23.272]                     if (inherits(cond, "message")) {
[09:29:23.272]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.272]                       if (muffled) 
[09:29:23.272]                         invokeRestart("muffleMessage")
[09:29:23.272]                     }
[09:29:23.272]                     else if (inherits(cond, "warning")) {
[09:29:23.272]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.272]                       if (muffled) 
[09:29:23.272]                         invokeRestart("muffleWarning")
[09:29:23.272]                     }
[09:29:23.272]                     else if (inherits(cond, "condition")) {
[09:29:23.272]                       if (!is.null(pattern)) {
[09:29:23.272]                         computeRestarts <- base::computeRestarts
[09:29:23.272]                         grepl <- base::grepl
[09:29:23.272]                         restarts <- computeRestarts(cond)
[09:29:23.272]                         for (restart in restarts) {
[09:29:23.272]                           name <- restart$name
[09:29:23.272]                           if (is.null(name)) 
[09:29:23.272]                             next
[09:29:23.272]                           if (!grepl(pattern, name)) 
[09:29:23.272]                             next
[09:29:23.272]                           invokeRestart(restart)
[09:29:23.272]                           muffled <- TRUE
[09:29:23.272]                           break
[09:29:23.272]                         }
[09:29:23.272]                       }
[09:29:23.272]                     }
[09:29:23.272]                     invisible(muffled)
[09:29:23.272]                   }
[09:29:23.272]                   muffleCondition(cond)
[09:29:23.272]                 })
[09:29:23.272]             }))
[09:29:23.272]             future::FutureResult(value = ...future.value$value, 
[09:29:23.272]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.272]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.272]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.272]                     ...future.globalenv.names))
[09:29:23.272]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.272]         }, condition = base::local({
[09:29:23.272]             c <- base::c
[09:29:23.272]             inherits <- base::inherits
[09:29:23.272]             invokeRestart <- base::invokeRestart
[09:29:23.272]             length <- base::length
[09:29:23.272]             list <- base::list
[09:29:23.272]             seq.int <- base::seq.int
[09:29:23.272]             signalCondition <- base::signalCondition
[09:29:23.272]             sys.calls <- base::sys.calls
[09:29:23.272]             `[[` <- base::`[[`
[09:29:23.272]             `+` <- base::`+`
[09:29:23.272]             `<<-` <- base::`<<-`
[09:29:23.272]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.272]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.272]                   3L)]
[09:29:23.272]             }
[09:29:23.272]             function(cond) {
[09:29:23.272]                 is_error <- inherits(cond, "error")
[09:29:23.272]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.272]                   NULL)
[09:29:23.272]                 if (is_error) {
[09:29:23.272]                   sessionInformation <- function() {
[09:29:23.272]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.272]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.272]                       search = base::search(), system = base::Sys.info())
[09:29:23.272]                   }
[09:29:23.272]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.272]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.272]                     cond$call), session = sessionInformation(), 
[09:29:23.272]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.272]                   signalCondition(cond)
[09:29:23.272]                 }
[09:29:23.272]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.272]                 "immediateCondition"))) {
[09:29:23.272]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.272]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.272]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.272]                   if (TRUE && !signal) {
[09:29:23.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.272]                     {
[09:29:23.272]                       inherits <- base::inherits
[09:29:23.272]                       invokeRestart <- base::invokeRestart
[09:29:23.272]                       is.null <- base::is.null
[09:29:23.272]                       muffled <- FALSE
[09:29:23.272]                       if (inherits(cond, "message")) {
[09:29:23.272]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.272]                         if (muffled) 
[09:29:23.272]                           invokeRestart("muffleMessage")
[09:29:23.272]                       }
[09:29:23.272]                       else if (inherits(cond, "warning")) {
[09:29:23.272]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.272]                         if (muffled) 
[09:29:23.272]                           invokeRestart("muffleWarning")
[09:29:23.272]                       }
[09:29:23.272]                       else if (inherits(cond, "condition")) {
[09:29:23.272]                         if (!is.null(pattern)) {
[09:29:23.272]                           computeRestarts <- base::computeRestarts
[09:29:23.272]                           grepl <- base::grepl
[09:29:23.272]                           restarts <- computeRestarts(cond)
[09:29:23.272]                           for (restart in restarts) {
[09:29:23.272]                             name <- restart$name
[09:29:23.272]                             if (is.null(name)) 
[09:29:23.272]                               next
[09:29:23.272]                             if (!grepl(pattern, name)) 
[09:29:23.272]                               next
[09:29:23.272]                             invokeRestart(restart)
[09:29:23.272]                             muffled <- TRUE
[09:29:23.272]                             break
[09:29:23.272]                           }
[09:29:23.272]                         }
[09:29:23.272]                       }
[09:29:23.272]                       invisible(muffled)
[09:29:23.272]                     }
[09:29:23.272]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.272]                   }
[09:29:23.272]                 }
[09:29:23.272]                 else {
[09:29:23.272]                   if (TRUE) {
[09:29:23.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.272]                     {
[09:29:23.272]                       inherits <- base::inherits
[09:29:23.272]                       invokeRestart <- base::invokeRestart
[09:29:23.272]                       is.null <- base::is.null
[09:29:23.272]                       muffled <- FALSE
[09:29:23.272]                       if (inherits(cond, "message")) {
[09:29:23.272]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.272]                         if (muffled) 
[09:29:23.272]                           invokeRestart("muffleMessage")
[09:29:23.272]                       }
[09:29:23.272]                       else if (inherits(cond, "warning")) {
[09:29:23.272]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.272]                         if (muffled) 
[09:29:23.272]                           invokeRestart("muffleWarning")
[09:29:23.272]                       }
[09:29:23.272]                       else if (inherits(cond, "condition")) {
[09:29:23.272]                         if (!is.null(pattern)) {
[09:29:23.272]                           computeRestarts <- base::computeRestarts
[09:29:23.272]                           grepl <- base::grepl
[09:29:23.272]                           restarts <- computeRestarts(cond)
[09:29:23.272]                           for (restart in restarts) {
[09:29:23.272]                             name <- restart$name
[09:29:23.272]                             if (is.null(name)) 
[09:29:23.272]                               next
[09:29:23.272]                             if (!grepl(pattern, name)) 
[09:29:23.272]                               next
[09:29:23.272]                             invokeRestart(restart)
[09:29:23.272]                             muffled <- TRUE
[09:29:23.272]                             break
[09:29:23.272]                           }
[09:29:23.272]                         }
[09:29:23.272]                       }
[09:29:23.272]                       invisible(muffled)
[09:29:23.272]                     }
[09:29:23.272]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.272]                   }
[09:29:23.272]                 }
[09:29:23.272]             }
[09:29:23.272]         }))
[09:29:23.272]     }, error = function(ex) {
[09:29:23.272]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.272]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.272]                 ...future.rng), started = ...future.startTime, 
[09:29:23.272]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.272]             version = "1.8"), class = "FutureResult")
[09:29:23.272]     }, finally = {
[09:29:23.272]         if (!identical(...future.workdir, getwd())) 
[09:29:23.272]             setwd(...future.workdir)
[09:29:23.272]         {
[09:29:23.272]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.272]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.272]             }
[09:29:23.272]             base::options(...future.oldOptions)
[09:29:23.272]             if (.Platform$OS.type == "windows") {
[09:29:23.272]                 old_names <- names(...future.oldEnvVars)
[09:29:23.272]                 envs <- base::Sys.getenv()
[09:29:23.272]                 names <- names(envs)
[09:29:23.272]                 common <- intersect(names, old_names)
[09:29:23.272]                 added <- setdiff(names, old_names)
[09:29:23.272]                 removed <- setdiff(old_names, names)
[09:29:23.272]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.272]                   envs[common]]
[09:29:23.272]                 NAMES <- toupper(changed)
[09:29:23.272]                 args <- list()
[09:29:23.272]                 for (kk in seq_along(NAMES)) {
[09:29:23.272]                   name <- changed[[kk]]
[09:29:23.272]                   NAME <- NAMES[[kk]]
[09:29:23.272]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.272]                     next
[09:29:23.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.272]                 }
[09:29:23.272]                 NAMES <- toupper(added)
[09:29:23.272]                 for (kk in seq_along(NAMES)) {
[09:29:23.272]                   name <- added[[kk]]
[09:29:23.272]                   NAME <- NAMES[[kk]]
[09:29:23.272]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.272]                     next
[09:29:23.272]                   args[[name]] <- ""
[09:29:23.272]                 }
[09:29:23.272]                 NAMES <- toupper(removed)
[09:29:23.272]                 for (kk in seq_along(NAMES)) {
[09:29:23.272]                   name <- removed[[kk]]
[09:29:23.272]                   NAME <- NAMES[[kk]]
[09:29:23.272]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.272]                     next
[09:29:23.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.272]                 }
[09:29:23.272]                 if (length(args) > 0) 
[09:29:23.272]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.272]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.272]             }
[09:29:23.272]             else {
[09:29:23.272]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.272]             }
[09:29:23.272]             {
[09:29:23.272]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.272]                   0L) {
[09:29:23.272]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.272]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.272]                   base::options(opts)
[09:29:23.272]                 }
[09:29:23.272]                 {
[09:29:23.272]                   {
[09:29:23.272]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.272]                     NULL
[09:29:23.272]                   }
[09:29:23.272]                   options(future.plan = NULL)
[09:29:23.272]                   if (is.na(NA_character_)) 
[09:29:23.272]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.272]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.272]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.272]                     .init = FALSE)
[09:29:23.272]                 }
[09:29:23.272]             }
[09:29:23.272]         }
[09:29:23.272]     })
[09:29:23.272]     if (TRUE) {
[09:29:23.272]         base::sink(type = "output", split = FALSE)
[09:29:23.272]         if (TRUE) {
[09:29:23.272]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.272]         }
[09:29:23.272]         else {
[09:29:23.272]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.272]         }
[09:29:23.272]         base::close(...future.stdout)
[09:29:23.272]         ...future.stdout <- NULL
[09:29:23.272]     }
[09:29:23.272]     ...future.result$conditions <- ...future.conditions
[09:29:23.272]     ...future.result$finished <- base::Sys.time()
[09:29:23.272]     ...future.result
[09:29:23.272] }
[09:29:23.325] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[09:29:23.325] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[09:29:23.325] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[09:29:23.326] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[09:29:23.326] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.326] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[09:29:23.327] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[09:29:23.327] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[09:29:23.327] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[09:29:23.327] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[09:29:23.328] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.328] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[09:29:23.328] MultisessionFuture started
[09:29:23.328] - Launch lazy future ... done
[09:29:23.329] run() for ‘MultisessionFuture’ ... done
[09:29:23.329] Created future:
[09:29:23.329] MultisessionFuture:
[09:29:23.329] Label: ‘future_replicate-2’
[09:29:23.329] Expression:
[09:29:23.329] {
[09:29:23.329]     do.call(function(...) {
[09:29:23.329]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.329]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.329]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.329]             on.exit(options(oopts), add = TRUE)
[09:29:23.329]         }
[09:29:23.329]         {
[09:29:23.329]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.329]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.329]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.329]                   envir = globalenv(), inherits = FALSE)
[09:29:23.329]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.329]             })
[09:29:23.329]         }
[09:29:23.329]     }, args = future.call.arguments)
[09:29:23.329] }
[09:29:23.329] Lazy evaluation: FALSE
[09:29:23.329] Asynchronous evaluation: TRUE
[09:29:23.329] Local evaluation: TRUE
[09:29:23.329] Environment: R_GlobalEnv
[09:29:23.329] Capture standard output: TRUE
[09:29:23.329] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.329] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.329] Packages: <none>
[09:29:23.329] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.329] Resolved: FALSE
[09:29:23.329] Value: <not collected>
[09:29:23.329] Conditions captured: <none>
[09:29:23.329] Early signaling: FALSE
[09:29:23.329] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.329] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.341] Chunk #2 of 2 ... DONE
[09:29:23.341] Launching 2 futures (chunks) ... DONE
[09:29:23.341] Resolving 2 futures (chunks) ...
[09:29:23.341] resolve() on list ...
[09:29:23.341]  recursive: 0
[09:29:23.341]  length: 2
[09:29:23.342] 
[09:29:23.342] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.342] - Validating connection of MultisessionFuture
[09:29:23.342] - received message: FutureResult
[09:29:23.343] - Received FutureResult
[09:29:23.343] - Erased future from FutureRegistry
[09:29:23.343] result() for ClusterFuture ...
[09:29:23.343] - result already collected: FutureResult
[09:29:23.343] result() for ClusterFuture ... done
[09:29:23.345] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.345] Future #1
[09:29:23.345] result() for ClusterFuture ...
[09:29:23.346] - result already collected: FutureResult
[09:29:23.346] result() for ClusterFuture ... done
[09:29:23.346] result() for ClusterFuture ...
[09:29:23.346] - result already collected: FutureResult
[09:29:23.346] result() for ClusterFuture ... done
[09:29:23.346] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:29:23.346] - nx: 2
[09:29:23.346] - relay: TRUE
[09:29:23.346] - stdout: TRUE
[09:29:23.346] - signal: TRUE
[09:29:23.346] - resignal: FALSE
[09:29:23.346] - force: TRUE
[09:29:23.347] - relayed: [n=2] FALSE, FALSE
[09:29:23.347] - queued futures: [n=2] FALSE, FALSE
[09:29:23.347]  - until=1
[09:29:23.347]  - relaying element #1
[09:29:23.347] result() for ClusterFuture ...
[09:29:23.347] - result already collected: FutureResult
[09:29:23.347] result() for ClusterFuture ... done
[09:29:23.347] result() for ClusterFuture ...
[09:29:23.347] - result already collected: FutureResult
[09:29:23.347] result() for ClusterFuture ... done
[09:29:23.347] result() for ClusterFuture ...
[09:29:23.347] - result already collected: FutureResult
[09:29:23.348] result() for ClusterFuture ... done
[09:29:23.348] result() for ClusterFuture ...
[09:29:23.348] - result already collected: FutureResult
[09:29:23.348] result() for ClusterFuture ... done
[09:29:23.348] - relayed: [n=2] TRUE, FALSE
[09:29:23.348] - queued futures: [n=2] TRUE, FALSE
[09:29:23.348] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:29:23.348]  length: 1 (resolved future 1)
[09:29:23.410] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.411] - Validating connection of MultisessionFuture
[09:29:23.411] - received message: FutureResult
[09:29:23.411] - Received FutureResult
[09:29:23.411] - Erased future from FutureRegistry
[09:29:23.411] result() for ClusterFuture ...
[09:29:23.411] - result already collected: FutureResult
[09:29:23.411] result() for ClusterFuture ... done
[09:29:23.411] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.411] Future #2
[09:29:23.411] result() for ClusterFuture ...
[09:29:23.412] - result already collected: FutureResult
[09:29:23.412] result() for ClusterFuture ... done
[09:29:23.412] result() for ClusterFuture ...
[09:29:23.412] - result already collected: FutureResult
[09:29:23.412] result() for ClusterFuture ... done
[09:29:23.412] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:29:23.412] - nx: 2
[09:29:23.412] - relay: TRUE
[09:29:23.412] - stdout: TRUE
[09:29:23.412] - signal: TRUE
[09:29:23.412] - resignal: FALSE
[09:29:23.413] - force: TRUE
[09:29:23.413] - relayed: [n=2] TRUE, FALSE
[09:29:23.413] - queued futures: [n=2] TRUE, FALSE
[09:29:23.413]  - until=2
[09:29:23.413]  - relaying element #2
[09:29:23.413] result() for ClusterFuture ...
[09:29:23.413] - result already collected: FutureResult
[09:29:23.413] result() for ClusterFuture ... done
[09:29:23.413] result() for ClusterFuture ...
[09:29:23.413] - result already collected: FutureResult
[09:29:23.413] result() for ClusterFuture ... done
[09:29:23.414] result() for ClusterFuture ...
[09:29:23.414] - result already collected: FutureResult
[09:29:23.414] result() for ClusterFuture ... done
[09:29:23.414] result() for ClusterFuture ...
[09:29:23.414] - result already collected: FutureResult
[09:29:23.414] result() for ClusterFuture ... done
[09:29:23.414] - relayed: [n=2] TRUE, TRUE
[09:29:23.414] - queued futures: [n=2] TRUE, TRUE
[09:29:23.414] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:29:23.414]  length: 0 (resolved future 2)
[09:29:23.414] Relaying remaining futures
[09:29:23.414] signalConditionsASAP(NULL, pos=0) ...
[09:29:23.415] - nx: 2
[09:29:23.415] - relay: TRUE
[09:29:23.415] - stdout: TRUE
[09:29:23.415] - signal: TRUE
[09:29:23.415] - resignal: FALSE
[09:29:23.415] - force: TRUE
[09:29:23.415] - relayed: [n=2] TRUE, TRUE
[09:29:23.415] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:23.415] - relayed: [n=2] TRUE, TRUE
[09:29:23.415] - queued futures: [n=2] TRUE, TRUE
[09:29:23.415] signalConditionsASAP(NULL, pos=0) ... done
[09:29:23.415] resolve() on list ... DONE
[09:29:23.416] result() for ClusterFuture ...
[09:29:23.416] - result already collected: FutureResult
[09:29:23.416] result() for ClusterFuture ... done
[09:29:23.416] result() for ClusterFuture ...
[09:29:23.416] - result already collected: FutureResult
[09:29:23.416] result() for ClusterFuture ... done
[09:29:23.416] result() for ClusterFuture ...
[09:29:23.416] - result already collected: FutureResult
[09:29:23.416] result() for ClusterFuture ... done
[09:29:23.416] result() for ClusterFuture ...
[09:29:23.416] - result already collected: FutureResult
[09:29:23.416] result() for ClusterFuture ... done
[09:29:23.417]  - Number of value chunks collected: 2
[09:29:23.417] Resolving 2 futures (chunks) ... DONE
[09:29:23.417] Reducing values from 2 chunks ...
[09:29:23.417]  - Number of values collected after concatenation: 5
[09:29:23.417]  - Number of values expected: 5
[09:29:23.417] Reducing values from 2 chunks ... DONE
[09:29:23.417] future_lapply() ... DONE
[09:29:23.417] future_lapply() ...
[09:29:23.418] Generating random seeds ...
[09:29:23.418] Generating random seed streams for 5 elements ...
[09:29:23.418] Generating random seed streams for 5 elements ... DONE
[09:29:23.418] Generating random seeds ... DONE
[09:29:23.418] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:23.422] Number of chunks: 2
[09:29:23.422] getGlobalsAndPackagesXApply() ...
[09:29:23.422]  - future.globals: TRUE
[09:29:23.422] getGlobalsAndPackages() ...
[09:29:23.422] Searching for globals...
[09:29:23.423] - globals found: [2] ‘FUN’, ‘sample’
[09:29:23.423] Searching for globals ... DONE
[09:29:23.424] Resolving globals: FALSE
[09:29:23.424] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:23.424] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:23.424] - globals: [1] ‘FUN’
[09:29:23.424] 
[09:29:23.425] getGlobalsAndPackages() ... DONE
[09:29:23.425]  - globals found/used: [n=1] ‘FUN’
[09:29:23.425]  - needed namespaces: [n=0] 
[09:29:23.425] Finding globals ... DONE
[09:29:23.425]  - use_args: TRUE
[09:29:23.425]  - Getting '...' globals ...
[09:29:23.425] resolve() on list ...
[09:29:23.425]  recursive: 0
[09:29:23.426]  length: 1
[09:29:23.426]  elements: ‘...’
[09:29:23.426]  length: 0 (resolved future 1)
[09:29:23.426] resolve() on list ... DONE
[09:29:23.426]    - '...' content: [n=0] 
[09:29:23.426] List of 1
[09:29:23.426]  $ ...: list()
[09:29:23.426]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.426]  - attr(*, "where")=List of 1
[09:29:23.426]   ..$ ...:<environment: 0x55d1cb67b0d8> 
[09:29:23.426]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.426]  - attr(*, "resolved")= logi TRUE
[09:29:23.426]  - attr(*, "total_size")= num NA
[09:29:23.429]  - Getting '...' globals ... DONE
[09:29:23.429] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:23.429] List of 2
[09:29:23.429]  $ ...future.FUN:function (...)  
[09:29:23.429]  $ ...          : list()
[09:29:23.429]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.429]  - attr(*, "where")=List of 2
[09:29:23.429]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:23.429]   ..$ ...          :<environment: 0x55d1cb67b0d8> 
[09:29:23.429]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.429]  - attr(*, "resolved")= logi FALSE
[09:29:23.429]  - attr(*, "total_size")= num 616
[09:29:23.431] Packages to be attached in all futures: [n=0] 
[09:29:23.432] getGlobalsAndPackagesXApply() ... DONE
[09:29:23.432] Number of futures (= number of chunks): 2
[09:29:23.432] Launching 2 futures (chunks) ...
[09:29:23.432] Chunk #1 of 2 ...
[09:29:23.432]  - Finding globals in 'X' for chunk #1 ...
[09:29:23.432] getGlobalsAndPackages() ...
[09:29:23.432] Searching for globals...
[09:29:23.432] 
[09:29:23.433] Searching for globals ... DONE
[09:29:23.433] - globals: [0] <none>
[09:29:23.433] getGlobalsAndPackages() ... DONE
[09:29:23.433]    + additional globals found: [n=0] 
[09:29:23.433]    + additional namespaces needed: [n=0] 
[09:29:23.433]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:23.433]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.433]  - seeds: [2] <seeds>
[09:29:23.433]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.433] getGlobalsAndPackages() ...
[09:29:23.433] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.434] Resolving globals: FALSE
[09:29:23.434] Tweak future expression to call with '...' arguments ...
[09:29:23.434] {
[09:29:23.434]     do.call(function(...) {
[09:29:23.434]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.434]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.434]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.434]             on.exit(options(oopts), add = TRUE)
[09:29:23.434]         }
[09:29:23.434]         {
[09:29:23.434]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.434]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.434]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.434]                   envir = globalenv(), inherits = FALSE)
[09:29:23.434]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.434]             })
[09:29:23.434]         }
[09:29:23.434]     }, args = future.call.arguments)
[09:29:23.434] }
[09:29:23.434] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.434] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.434] 
[09:29:23.435] getGlobalsAndPackages() ... DONE
[09:29:23.435] run() for ‘Future’ ...
[09:29:23.435] - state: ‘created’
[09:29:23.435] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.448] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.449] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.449]   - Field: ‘node’
[09:29:23.449]   - Field: ‘label’
[09:29:23.449]   - Field: ‘local’
[09:29:23.449]   - Field: ‘owner’
[09:29:23.449]   - Field: ‘envir’
[09:29:23.449]   - Field: ‘workers’
[09:29:23.449]   - Field: ‘packages’
[09:29:23.449]   - Field: ‘gc’
[09:29:23.449]   - Field: ‘conditions’
[09:29:23.449]   - Field: ‘persistent’
[09:29:23.450]   - Field: ‘expr’
[09:29:23.450]   - Field: ‘uuid’
[09:29:23.450]   - Field: ‘seed’
[09:29:23.450]   - Field: ‘version’
[09:29:23.450]   - Field: ‘result’
[09:29:23.450]   - Field: ‘asynchronous’
[09:29:23.450]   - Field: ‘calls’
[09:29:23.450]   - Field: ‘globals’
[09:29:23.450]   - Field: ‘stdout’
[09:29:23.450]   - Field: ‘earlySignal’
[09:29:23.450]   - Field: ‘lazy’
[09:29:23.450]   - Field: ‘state’
[09:29:23.451] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.451] - Launch lazy future ...
[09:29:23.451] Packages needed by the future expression (n = 0): <none>
[09:29:23.451] Packages needed by future strategies (n = 0): <none>
[09:29:23.451] {
[09:29:23.451]     {
[09:29:23.451]         {
[09:29:23.451]             ...future.startTime <- base::Sys.time()
[09:29:23.451]             {
[09:29:23.451]                 {
[09:29:23.451]                   {
[09:29:23.451]                     {
[09:29:23.451]                       base::local({
[09:29:23.451]                         has_future <- base::requireNamespace("future", 
[09:29:23.451]                           quietly = TRUE)
[09:29:23.451]                         if (has_future) {
[09:29:23.451]                           ns <- base::getNamespace("future")
[09:29:23.451]                           version <- ns[[".package"]][["version"]]
[09:29:23.451]                           if (is.null(version)) 
[09:29:23.451]                             version <- utils::packageVersion("future")
[09:29:23.451]                         }
[09:29:23.451]                         else {
[09:29:23.451]                           version <- NULL
[09:29:23.451]                         }
[09:29:23.451]                         if (!has_future || version < "1.8.0") {
[09:29:23.451]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.451]                             "", base::R.version$version.string), 
[09:29:23.451]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.451]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.451]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.451]                               "release", "version")], collapse = " "), 
[09:29:23.451]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.451]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.451]                             info)
[09:29:23.451]                           info <- base::paste(info, collapse = "; ")
[09:29:23.451]                           if (!has_future) {
[09:29:23.451]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.451]                               info)
[09:29:23.451]                           }
[09:29:23.451]                           else {
[09:29:23.451]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.451]                               info, version)
[09:29:23.451]                           }
[09:29:23.451]                           base::stop(msg)
[09:29:23.451]                         }
[09:29:23.451]                       })
[09:29:23.451]                     }
[09:29:23.451]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.451]                     base::options(mc.cores = 1L)
[09:29:23.451]                   }
[09:29:23.451]                   ...future.strategy.old <- future::plan("list")
[09:29:23.451]                   options(future.plan = NULL)
[09:29:23.451]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.451]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.451]                 }
[09:29:23.451]                 ...future.workdir <- getwd()
[09:29:23.451]             }
[09:29:23.451]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.451]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.451]         }
[09:29:23.451]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.451]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.451]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.451]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.451]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.451]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.451]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.451]             base::names(...future.oldOptions))
[09:29:23.451]     }
[09:29:23.451]     if (FALSE) {
[09:29:23.451]     }
[09:29:23.451]     else {
[09:29:23.451]         if (TRUE) {
[09:29:23.451]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.451]                 open = "w")
[09:29:23.451]         }
[09:29:23.451]         else {
[09:29:23.451]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.451]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.451]         }
[09:29:23.451]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.451]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.451]             base::sink(type = "output", split = FALSE)
[09:29:23.451]             base::close(...future.stdout)
[09:29:23.451]         }, add = TRUE)
[09:29:23.451]     }
[09:29:23.451]     ...future.frame <- base::sys.nframe()
[09:29:23.451]     ...future.conditions <- base::list()
[09:29:23.451]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.451]     if (FALSE) {
[09:29:23.451]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.451]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.451]     }
[09:29:23.451]     ...future.result <- base::tryCatch({
[09:29:23.451]         base::withCallingHandlers({
[09:29:23.451]             ...future.value <- base::withVisible(base::local({
[09:29:23.451]                 ...future.makeSendCondition <- base::local({
[09:29:23.451]                   sendCondition <- NULL
[09:29:23.451]                   function(frame = 1L) {
[09:29:23.451]                     if (is.function(sendCondition)) 
[09:29:23.451]                       return(sendCondition)
[09:29:23.451]                     ns <- getNamespace("parallel")
[09:29:23.451]                     if (exists("sendData", mode = "function", 
[09:29:23.451]                       envir = ns)) {
[09:29:23.451]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.451]                         envir = ns)
[09:29:23.451]                       envir <- sys.frame(frame)
[09:29:23.451]                       master <- NULL
[09:29:23.451]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.451]                         !identical(envir, emptyenv())) {
[09:29:23.451]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.451]                           inherits = FALSE)) {
[09:29:23.451]                           master <- get("master", mode = "list", 
[09:29:23.451]                             envir = envir, inherits = FALSE)
[09:29:23.451]                           if (inherits(master, c("SOCKnode", 
[09:29:23.451]                             "SOCK0node"))) {
[09:29:23.451]                             sendCondition <<- function(cond) {
[09:29:23.451]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.451]                                 success = TRUE)
[09:29:23.451]                               parallel_sendData(master, data)
[09:29:23.451]                             }
[09:29:23.451]                             return(sendCondition)
[09:29:23.451]                           }
[09:29:23.451]                         }
[09:29:23.451]                         frame <- frame + 1L
[09:29:23.451]                         envir <- sys.frame(frame)
[09:29:23.451]                       }
[09:29:23.451]                     }
[09:29:23.451]                     sendCondition <<- function(cond) NULL
[09:29:23.451]                   }
[09:29:23.451]                 })
[09:29:23.451]                 withCallingHandlers({
[09:29:23.451]                   {
[09:29:23.451]                     do.call(function(...) {
[09:29:23.451]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.451]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.451]                         ...future.globals.maxSize)) {
[09:29:23.451]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.451]                         on.exit(options(oopts), add = TRUE)
[09:29:23.451]                       }
[09:29:23.451]                       {
[09:29:23.451]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.451]                           FUN = function(jj) {
[09:29:23.451]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.451]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.451]                               envir = globalenv(), inherits = FALSE)
[09:29:23.451]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.451]                           })
[09:29:23.451]                       }
[09:29:23.451]                     }, args = future.call.arguments)
[09:29:23.451]                   }
[09:29:23.451]                 }, immediateCondition = function(cond) {
[09:29:23.451]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.451]                   sendCondition(cond)
[09:29:23.451]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.451]                   {
[09:29:23.451]                     inherits <- base::inherits
[09:29:23.451]                     invokeRestart <- base::invokeRestart
[09:29:23.451]                     is.null <- base::is.null
[09:29:23.451]                     muffled <- FALSE
[09:29:23.451]                     if (inherits(cond, "message")) {
[09:29:23.451]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.451]                       if (muffled) 
[09:29:23.451]                         invokeRestart("muffleMessage")
[09:29:23.451]                     }
[09:29:23.451]                     else if (inherits(cond, "warning")) {
[09:29:23.451]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.451]                       if (muffled) 
[09:29:23.451]                         invokeRestart("muffleWarning")
[09:29:23.451]                     }
[09:29:23.451]                     else if (inherits(cond, "condition")) {
[09:29:23.451]                       if (!is.null(pattern)) {
[09:29:23.451]                         computeRestarts <- base::computeRestarts
[09:29:23.451]                         grepl <- base::grepl
[09:29:23.451]                         restarts <- computeRestarts(cond)
[09:29:23.451]                         for (restart in restarts) {
[09:29:23.451]                           name <- restart$name
[09:29:23.451]                           if (is.null(name)) 
[09:29:23.451]                             next
[09:29:23.451]                           if (!grepl(pattern, name)) 
[09:29:23.451]                             next
[09:29:23.451]                           invokeRestart(restart)
[09:29:23.451]                           muffled <- TRUE
[09:29:23.451]                           break
[09:29:23.451]                         }
[09:29:23.451]                       }
[09:29:23.451]                     }
[09:29:23.451]                     invisible(muffled)
[09:29:23.451]                   }
[09:29:23.451]                   muffleCondition(cond)
[09:29:23.451]                 })
[09:29:23.451]             }))
[09:29:23.451]             future::FutureResult(value = ...future.value$value, 
[09:29:23.451]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.451]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.451]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.451]                     ...future.globalenv.names))
[09:29:23.451]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.451]         }, condition = base::local({
[09:29:23.451]             c <- base::c
[09:29:23.451]             inherits <- base::inherits
[09:29:23.451]             invokeRestart <- base::invokeRestart
[09:29:23.451]             length <- base::length
[09:29:23.451]             list <- base::list
[09:29:23.451]             seq.int <- base::seq.int
[09:29:23.451]             signalCondition <- base::signalCondition
[09:29:23.451]             sys.calls <- base::sys.calls
[09:29:23.451]             `[[` <- base::`[[`
[09:29:23.451]             `+` <- base::`+`
[09:29:23.451]             `<<-` <- base::`<<-`
[09:29:23.451]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.451]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.451]                   3L)]
[09:29:23.451]             }
[09:29:23.451]             function(cond) {
[09:29:23.451]                 is_error <- inherits(cond, "error")
[09:29:23.451]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.451]                   NULL)
[09:29:23.451]                 if (is_error) {
[09:29:23.451]                   sessionInformation <- function() {
[09:29:23.451]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.451]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.451]                       search = base::search(), system = base::Sys.info())
[09:29:23.451]                   }
[09:29:23.451]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.451]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.451]                     cond$call), session = sessionInformation(), 
[09:29:23.451]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.451]                   signalCondition(cond)
[09:29:23.451]                 }
[09:29:23.451]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.451]                 "immediateCondition"))) {
[09:29:23.451]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.451]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.451]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.451]                   if (TRUE && !signal) {
[09:29:23.451]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.451]                     {
[09:29:23.451]                       inherits <- base::inherits
[09:29:23.451]                       invokeRestart <- base::invokeRestart
[09:29:23.451]                       is.null <- base::is.null
[09:29:23.451]                       muffled <- FALSE
[09:29:23.451]                       if (inherits(cond, "message")) {
[09:29:23.451]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.451]                         if (muffled) 
[09:29:23.451]                           invokeRestart("muffleMessage")
[09:29:23.451]                       }
[09:29:23.451]                       else if (inherits(cond, "warning")) {
[09:29:23.451]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.451]                         if (muffled) 
[09:29:23.451]                           invokeRestart("muffleWarning")
[09:29:23.451]                       }
[09:29:23.451]                       else if (inherits(cond, "condition")) {
[09:29:23.451]                         if (!is.null(pattern)) {
[09:29:23.451]                           computeRestarts <- base::computeRestarts
[09:29:23.451]                           grepl <- base::grepl
[09:29:23.451]                           restarts <- computeRestarts(cond)
[09:29:23.451]                           for (restart in restarts) {
[09:29:23.451]                             name <- restart$name
[09:29:23.451]                             if (is.null(name)) 
[09:29:23.451]                               next
[09:29:23.451]                             if (!grepl(pattern, name)) 
[09:29:23.451]                               next
[09:29:23.451]                             invokeRestart(restart)
[09:29:23.451]                             muffled <- TRUE
[09:29:23.451]                             break
[09:29:23.451]                           }
[09:29:23.451]                         }
[09:29:23.451]                       }
[09:29:23.451]                       invisible(muffled)
[09:29:23.451]                     }
[09:29:23.451]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.451]                   }
[09:29:23.451]                 }
[09:29:23.451]                 else {
[09:29:23.451]                   if (TRUE) {
[09:29:23.451]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.451]                     {
[09:29:23.451]                       inherits <- base::inherits
[09:29:23.451]                       invokeRestart <- base::invokeRestart
[09:29:23.451]                       is.null <- base::is.null
[09:29:23.451]                       muffled <- FALSE
[09:29:23.451]                       if (inherits(cond, "message")) {
[09:29:23.451]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.451]                         if (muffled) 
[09:29:23.451]                           invokeRestart("muffleMessage")
[09:29:23.451]                       }
[09:29:23.451]                       else if (inherits(cond, "warning")) {
[09:29:23.451]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.451]                         if (muffled) 
[09:29:23.451]                           invokeRestart("muffleWarning")
[09:29:23.451]                       }
[09:29:23.451]                       else if (inherits(cond, "condition")) {
[09:29:23.451]                         if (!is.null(pattern)) {
[09:29:23.451]                           computeRestarts <- base::computeRestarts
[09:29:23.451]                           grepl <- base::grepl
[09:29:23.451]                           restarts <- computeRestarts(cond)
[09:29:23.451]                           for (restart in restarts) {
[09:29:23.451]                             name <- restart$name
[09:29:23.451]                             if (is.null(name)) 
[09:29:23.451]                               next
[09:29:23.451]                             if (!grepl(pattern, name)) 
[09:29:23.451]                               next
[09:29:23.451]                             invokeRestart(restart)
[09:29:23.451]                             muffled <- TRUE
[09:29:23.451]                             break
[09:29:23.451]                           }
[09:29:23.451]                         }
[09:29:23.451]                       }
[09:29:23.451]                       invisible(muffled)
[09:29:23.451]                     }
[09:29:23.451]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.451]                   }
[09:29:23.451]                 }
[09:29:23.451]             }
[09:29:23.451]         }))
[09:29:23.451]     }, error = function(ex) {
[09:29:23.451]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.451]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.451]                 ...future.rng), started = ...future.startTime, 
[09:29:23.451]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.451]             version = "1.8"), class = "FutureResult")
[09:29:23.451]     }, finally = {
[09:29:23.451]         if (!identical(...future.workdir, getwd())) 
[09:29:23.451]             setwd(...future.workdir)
[09:29:23.451]         {
[09:29:23.451]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.451]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.451]             }
[09:29:23.451]             base::options(...future.oldOptions)
[09:29:23.451]             if (.Platform$OS.type == "windows") {
[09:29:23.451]                 old_names <- names(...future.oldEnvVars)
[09:29:23.451]                 envs <- base::Sys.getenv()
[09:29:23.451]                 names <- names(envs)
[09:29:23.451]                 common <- intersect(names, old_names)
[09:29:23.451]                 added <- setdiff(names, old_names)
[09:29:23.451]                 removed <- setdiff(old_names, names)
[09:29:23.451]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.451]                   envs[common]]
[09:29:23.451]                 NAMES <- toupper(changed)
[09:29:23.451]                 args <- list()
[09:29:23.451]                 for (kk in seq_along(NAMES)) {
[09:29:23.451]                   name <- changed[[kk]]
[09:29:23.451]                   NAME <- NAMES[[kk]]
[09:29:23.451]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.451]                     next
[09:29:23.451]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.451]                 }
[09:29:23.451]                 NAMES <- toupper(added)
[09:29:23.451]                 for (kk in seq_along(NAMES)) {
[09:29:23.451]                   name <- added[[kk]]
[09:29:23.451]                   NAME <- NAMES[[kk]]
[09:29:23.451]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.451]                     next
[09:29:23.451]                   args[[name]] <- ""
[09:29:23.451]                 }
[09:29:23.451]                 NAMES <- toupper(removed)
[09:29:23.451]                 for (kk in seq_along(NAMES)) {
[09:29:23.451]                   name <- removed[[kk]]
[09:29:23.451]                   NAME <- NAMES[[kk]]
[09:29:23.451]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.451]                     next
[09:29:23.451]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.451]                 }
[09:29:23.451]                 if (length(args) > 0) 
[09:29:23.451]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.451]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.451]             }
[09:29:23.451]             else {
[09:29:23.451]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.451]             }
[09:29:23.451]             {
[09:29:23.451]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.451]                   0L) {
[09:29:23.451]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.451]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.451]                   base::options(opts)
[09:29:23.451]                 }
[09:29:23.451]                 {
[09:29:23.451]                   {
[09:29:23.451]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.451]                     NULL
[09:29:23.451]                   }
[09:29:23.451]                   options(future.plan = NULL)
[09:29:23.451]                   if (is.na(NA_character_)) 
[09:29:23.451]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.451]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.451]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.451]                     .init = FALSE)
[09:29:23.451]                 }
[09:29:23.451]             }
[09:29:23.451]         }
[09:29:23.451]     })
[09:29:23.451]     if (TRUE) {
[09:29:23.451]         base::sink(type = "output", split = FALSE)
[09:29:23.451]         if (TRUE) {
[09:29:23.451]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.451]         }
[09:29:23.451]         else {
[09:29:23.451]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.451]         }
[09:29:23.451]         base::close(...future.stdout)
[09:29:23.451]         ...future.stdout <- NULL
[09:29:23.451]     }
[09:29:23.451]     ...future.result$conditions <- ...future.conditions
[09:29:23.451]     ...future.result$finished <- base::Sys.time()
[09:29:23.451]     ...future.result
[09:29:23.451] }
[09:29:23.454] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[09:29:23.454] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[09:29:23.455] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[09:29:23.455] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[09:29:23.455] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.456] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[09:29:23.456] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[09:29:23.456] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[09:29:23.456] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[09:29:23.457] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[09:29:23.457] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.457] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[09:29:23.458] MultisessionFuture started
[09:29:23.458] - Launch lazy future ... done
[09:29:23.458] run() for ‘MultisessionFuture’ ... done
[09:29:23.458] Created future:
[09:29:23.458] MultisessionFuture:
[09:29:23.458] Label: ‘future_replicate-1’
[09:29:23.458] Expression:
[09:29:23.458] {
[09:29:23.458]     do.call(function(...) {
[09:29:23.458]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.458]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.458]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.458]             on.exit(options(oopts), add = TRUE)
[09:29:23.458]         }
[09:29:23.458]         {
[09:29:23.458]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.458]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.458]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.458]                   envir = globalenv(), inherits = FALSE)
[09:29:23.458]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.458]             })
[09:29:23.458]         }
[09:29:23.458]     }, args = future.call.arguments)
[09:29:23.458] }
[09:29:23.458] Lazy evaluation: FALSE
[09:29:23.458] Asynchronous evaluation: TRUE
[09:29:23.458] Local evaluation: TRUE
[09:29:23.458] Environment: R_GlobalEnv
[09:29:23.458] Capture standard output: TRUE
[09:29:23.458] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.458] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.458] Packages: <none>
[09:29:23.458] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.458] Resolved: FALSE
[09:29:23.458] Value: <not collected>
[09:29:23.458] Conditions captured: <none>
[09:29:23.458] Early signaling: FALSE
[09:29:23.458] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.458] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.469] Chunk #1 of 2 ... DONE
[09:29:23.470] Chunk #2 of 2 ...
[09:29:23.470]  - Finding globals in 'X' for chunk #2 ...
[09:29:23.470] getGlobalsAndPackages() ...
[09:29:23.470] Searching for globals...
[09:29:23.470] 
[09:29:23.470] Searching for globals ... DONE
[09:29:23.470] - globals: [0] <none>
[09:29:23.470] getGlobalsAndPackages() ... DONE
[09:29:23.470]    + additional globals found: [n=0] 
[09:29:23.471]    + additional namespaces needed: [n=0] 
[09:29:23.471]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:23.471]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.471]  - seeds: [3] <seeds>
[09:29:23.471]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.471] getGlobalsAndPackages() ...
[09:29:23.471] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.471] Resolving globals: FALSE
[09:29:23.471] Tweak future expression to call with '...' arguments ...
[09:29:23.471] {
[09:29:23.471]     do.call(function(...) {
[09:29:23.471]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.471]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.471]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.471]             on.exit(options(oopts), add = TRUE)
[09:29:23.471]         }
[09:29:23.471]         {
[09:29:23.471]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.471]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.471]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.471]                   envir = globalenv(), inherits = FALSE)
[09:29:23.471]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.471]             })
[09:29:23.471]         }
[09:29:23.471]     }, args = future.call.arguments)
[09:29:23.471] }
[09:29:23.472] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.472] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.472] 
[09:29:23.472] getGlobalsAndPackages() ... DONE
[09:29:23.472] run() for ‘Future’ ...
[09:29:23.473] - state: ‘created’
[09:29:23.473] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.486] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.486] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.486]   - Field: ‘node’
[09:29:23.486]   - Field: ‘label’
[09:29:23.486]   - Field: ‘local’
[09:29:23.486]   - Field: ‘owner’
[09:29:23.486]   - Field: ‘envir’
[09:29:23.486]   - Field: ‘workers’
[09:29:23.487]   - Field: ‘packages’
[09:29:23.487]   - Field: ‘gc’
[09:29:23.487]   - Field: ‘conditions’
[09:29:23.487]   - Field: ‘persistent’
[09:29:23.487]   - Field: ‘expr’
[09:29:23.487]   - Field: ‘uuid’
[09:29:23.487]   - Field: ‘seed’
[09:29:23.487]   - Field: ‘version’
[09:29:23.487]   - Field: ‘result’
[09:29:23.487]   - Field: ‘asynchronous’
[09:29:23.487]   - Field: ‘calls’
[09:29:23.488]   - Field: ‘globals’
[09:29:23.488]   - Field: ‘stdout’
[09:29:23.488]   - Field: ‘earlySignal’
[09:29:23.488]   - Field: ‘lazy’
[09:29:23.488]   - Field: ‘state’
[09:29:23.488] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.488] - Launch lazy future ...
[09:29:23.488] Packages needed by the future expression (n = 0): <none>
[09:29:23.488] Packages needed by future strategies (n = 0): <none>
[09:29:23.489] {
[09:29:23.489]     {
[09:29:23.489]         {
[09:29:23.489]             ...future.startTime <- base::Sys.time()
[09:29:23.489]             {
[09:29:23.489]                 {
[09:29:23.489]                   {
[09:29:23.489]                     {
[09:29:23.489]                       base::local({
[09:29:23.489]                         has_future <- base::requireNamespace("future", 
[09:29:23.489]                           quietly = TRUE)
[09:29:23.489]                         if (has_future) {
[09:29:23.489]                           ns <- base::getNamespace("future")
[09:29:23.489]                           version <- ns[[".package"]][["version"]]
[09:29:23.489]                           if (is.null(version)) 
[09:29:23.489]                             version <- utils::packageVersion("future")
[09:29:23.489]                         }
[09:29:23.489]                         else {
[09:29:23.489]                           version <- NULL
[09:29:23.489]                         }
[09:29:23.489]                         if (!has_future || version < "1.8.0") {
[09:29:23.489]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.489]                             "", base::R.version$version.string), 
[09:29:23.489]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.489]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.489]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.489]                               "release", "version")], collapse = " "), 
[09:29:23.489]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.489]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.489]                             info)
[09:29:23.489]                           info <- base::paste(info, collapse = "; ")
[09:29:23.489]                           if (!has_future) {
[09:29:23.489]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.489]                               info)
[09:29:23.489]                           }
[09:29:23.489]                           else {
[09:29:23.489]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.489]                               info, version)
[09:29:23.489]                           }
[09:29:23.489]                           base::stop(msg)
[09:29:23.489]                         }
[09:29:23.489]                       })
[09:29:23.489]                     }
[09:29:23.489]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.489]                     base::options(mc.cores = 1L)
[09:29:23.489]                   }
[09:29:23.489]                   ...future.strategy.old <- future::plan("list")
[09:29:23.489]                   options(future.plan = NULL)
[09:29:23.489]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.489]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.489]                 }
[09:29:23.489]                 ...future.workdir <- getwd()
[09:29:23.489]             }
[09:29:23.489]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.489]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.489]         }
[09:29:23.489]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.489]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.489]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.489]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.489]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.489]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.489]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.489]             base::names(...future.oldOptions))
[09:29:23.489]     }
[09:29:23.489]     if (FALSE) {
[09:29:23.489]     }
[09:29:23.489]     else {
[09:29:23.489]         if (TRUE) {
[09:29:23.489]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.489]                 open = "w")
[09:29:23.489]         }
[09:29:23.489]         else {
[09:29:23.489]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.489]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.489]         }
[09:29:23.489]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.489]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.489]             base::sink(type = "output", split = FALSE)
[09:29:23.489]             base::close(...future.stdout)
[09:29:23.489]         }, add = TRUE)
[09:29:23.489]     }
[09:29:23.489]     ...future.frame <- base::sys.nframe()
[09:29:23.489]     ...future.conditions <- base::list()
[09:29:23.489]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.489]     if (FALSE) {
[09:29:23.489]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.489]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.489]     }
[09:29:23.489]     ...future.result <- base::tryCatch({
[09:29:23.489]         base::withCallingHandlers({
[09:29:23.489]             ...future.value <- base::withVisible(base::local({
[09:29:23.489]                 ...future.makeSendCondition <- base::local({
[09:29:23.489]                   sendCondition <- NULL
[09:29:23.489]                   function(frame = 1L) {
[09:29:23.489]                     if (is.function(sendCondition)) 
[09:29:23.489]                       return(sendCondition)
[09:29:23.489]                     ns <- getNamespace("parallel")
[09:29:23.489]                     if (exists("sendData", mode = "function", 
[09:29:23.489]                       envir = ns)) {
[09:29:23.489]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.489]                         envir = ns)
[09:29:23.489]                       envir <- sys.frame(frame)
[09:29:23.489]                       master <- NULL
[09:29:23.489]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.489]                         !identical(envir, emptyenv())) {
[09:29:23.489]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.489]                           inherits = FALSE)) {
[09:29:23.489]                           master <- get("master", mode = "list", 
[09:29:23.489]                             envir = envir, inherits = FALSE)
[09:29:23.489]                           if (inherits(master, c("SOCKnode", 
[09:29:23.489]                             "SOCK0node"))) {
[09:29:23.489]                             sendCondition <<- function(cond) {
[09:29:23.489]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.489]                                 success = TRUE)
[09:29:23.489]                               parallel_sendData(master, data)
[09:29:23.489]                             }
[09:29:23.489]                             return(sendCondition)
[09:29:23.489]                           }
[09:29:23.489]                         }
[09:29:23.489]                         frame <- frame + 1L
[09:29:23.489]                         envir <- sys.frame(frame)
[09:29:23.489]                       }
[09:29:23.489]                     }
[09:29:23.489]                     sendCondition <<- function(cond) NULL
[09:29:23.489]                   }
[09:29:23.489]                 })
[09:29:23.489]                 withCallingHandlers({
[09:29:23.489]                   {
[09:29:23.489]                     do.call(function(...) {
[09:29:23.489]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.489]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.489]                         ...future.globals.maxSize)) {
[09:29:23.489]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.489]                         on.exit(options(oopts), add = TRUE)
[09:29:23.489]                       }
[09:29:23.489]                       {
[09:29:23.489]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.489]                           FUN = function(jj) {
[09:29:23.489]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.489]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.489]                               envir = globalenv(), inherits = FALSE)
[09:29:23.489]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.489]                           })
[09:29:23.489]                       }
[09:29:23.489]                     }, args = future.call.arguments)
[09:29:23.489]                   }
[09:29:23.489]                 }, immediateCondition = function(cond) {
[09:29:23.489]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.489]                   sendCondition(cond)
[09:29:23.489]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.489]                   {
[09:29:23.489]                     inherits <- base::inherits
[09:29:23.489]                     invokeRestart <- base::invokeRestart
[09:29:23.489]                     is.null <- base::is.null
[09:29:23.489]                     muffled <- FALSE
[09:29:23.489]                     if (inherits(cond, "message")) {
[09:29:23.489]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.489]                       if (muffled) 
[09:29:23.489]                         invokeRestart("muffleMessage")
[09:29:23.489]                     }
[09:29:23.489]                     else if (inherits(cond, "warning")) {
[09:29:23.489]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.489]                       if (muffled) 
[09:29:23.489]                         invokeRestart("muffleWarning")
[09:29:23.489]                     }
[09:29:23.489]                     else if (inherits(cond, "condition")) {
[09:29:23.489]                       if (!is.null(pattern)) {
[09:29:23.489]                         computeRestarts <- base::computeRestarts
[09:29:23.489]                         grepl <- base::grepl
[09:29:23.489]                         restarts <- computeRestarts(cond)
[09:29:23.489]                         for (restart in restarts) {
[09:29:23.489]                           name <- restart$name
[09:29:23.489]                           if (is.null(name)) 
[09:29:23.489]                             next
[09:29:23.489]                           if (!grepl(pattern, name)) 
[09:29:23.489]                             next
[09:29:23.489]                           invokeRestart(restart)
[09:29:23.489]                           muffled <- TRUE
[09:29:23.489]                           break
[09:29:23.489]                         }
[09:29:23.489]                       }
[09:29:23.489]                     }
[09:29:23.489]                     invisible(muffled)
[09:29:23.489]                   }
[09:29:23.489]                   muffleCondition(cond)
[09:29:23.489]                 })
[09:29:23.489]             }))
[09:29:23.489]             future::FutureResult(value = ...future.value$value, 
[09:29:23.489]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.489]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.489]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.489]                     ...future.globalenv.names))
[09:29:23.489]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.489]         }, condition = base::local({
[09:29:23.489]             c <- base::c
[09:29:23.489]             inherits <- base::inherits
[09:29:23.489]             invokeRestart <- base::invokeRestart
[09:29:23.489]             length <- base::length
[09:29:23.489]             list <- base::list
[09:29:23.489]             seq.int <- base::seq.int
[09:29:23.489]             signalCondition <- base::signalCondition
[09:29:23.489]             sys.calls <- base::sys.calls
[09:29:23.489]             `[[` <- base::`[[`
[09:29:23.489]             `+` <- base::`+`
[09:29:23.489]             `<<-` <- base::`<<-`
[09:29:23.489]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.489]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.489]                   3L)]
[09:29:23.489]             }
[09:29:23.489]             function(cond) {
[09:29:23.489]                 is_error <- inherits(cond, "error")
[09:29:23.489]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.489]                   NULL)
[09:29:23.489]                 if (is_error) {
[09:29:23.489]                   sessionInformation <- function() {
[09:29:23.489]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.489]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.489]                       search = base::search(), system = base::Sys.info())
[09:29:23.489]                   }
[09:29:23.489]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.489]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.489]                     cond$call), session = sessionInformation(), 
[09:29:23.489]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.489]                   signalCondition(cond)
[09:29:23.489]                 }
[09:29:23.489]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.489]                 "immediateCondition"))) {
[09:29:23.489]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.489]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.489]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.489]                   if (TRUE && !signal) {
[09:29:23.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.489]                     {
[09:29:23.489]                       inherits <- base::inherits
[09:29:23.489]                       invokeRestart <- base::invokeRestart
[09:29:23.489]                       is.null <- base::is.null
[09:29:23.489]                       muffled <- FALSE
[09:29:23.489]                       if (inherits(cond, "message")) {
[09:29:23.489]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.489]                         if (muffled) 
[09:29:23.489]                           invokeRestart("muffleMessage")
[09:29:23.489]                       }
[09:29:23.489]                       else if (inherits(cond, "warning")) {
[09:29:23.489]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.489]                         if (muffled) 
[09:29:23.489]                           invokeRestart("muffleWarning")
[09:29:23.489]                       }
[09:29:23.489]                       else if (inherits(cond, "condition")) {
[09:29:23.489]                         if (!is.null(pattern)) {
[09:29:23.489]                           computeRestarts <- base::computeRestarts
[09:29:23.489]                           grepl <- base::grepl
[09:29:23.489]                           restarts <- computeRestarts(cond)
[09:29:23.489]                           for (restart in restarts) {
[09:29:23.489]                             name <- restart$name
[09:29:23.489]                             if (is.null(name)) 
[09:29:23.489]                               next
[09:29:23.489]                             if (!grepl(pattern, name)) 
[09:29:23.489]                               next
[09:29:23.489]                             invokeRestart(restart)
[09:29:23.489]                             muffled <- TRUE
[09:29:23.489]                             break
[09:29:23.489]                           }
[09:29:23.489]                         }
[09:29:23.489]                       }
[09:29:23.489]                       invisible(muffled)
[09:29:23.489]                     }
[09:29:23.489]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.489]                   }
[09:29:23.489]                 }
[09:29:23.489]                 else {
[09:29:23.489]                   if (TRUE) {
[09:29:23.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.489]                     {
[09:29:23.489]                       inherits <- base::inherits
[09:29:23.489]                       invokeRestart <- base::invokeRestart
[09:29:23.489]                       is.null <- base::is.null
[09:29:23.489]                       muffled <- FALSE
[09:29:23.489]                       if (inherits(cond, "message")) {
[09:29:23.489]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.489]                         if (muffled) 
[09:29:23.489]                           invokeRestart("muffleMessage")
[09:29:23.489]                       }
[09:29:23.489]                       else if (inherits(cond, "warning")) {
[09:29:23.489]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.489]                         if (muffled) 
[09:29:23.489]                           invokeRestart("muffleWarning")
[09:29:23.489]                       }
[09:29:23.489]                       else if (inherits(cond, "condition")) {
[09:29:23.489]                         if (!is.null(pattern)) {
[09:29:23.489]                           computeRestarts <- base::computeRestarts
[09:29:23.489]                           grepl <- base::grepl
[09:29:23.489]                           restarts <- computeRestarts(cond)
[09:29:23.489]                           for (restart in restarts) {
[09:29:23.489]                             name <- restart$name
[09:29:23.489]                             if (is.null(name)) 
[09:29:23.489]                               next
[09:29:23.489]                             if (!grepl(pattern, name)) 
[09:29:23.489]                               next
[09:29:23.489]                             invokeRestart(restart)
[09:29:23.489]                             muffled <- TRUE
[09:29:23.489]                             break
[09:29:23.489]                           }
[09:29:23.489]                         }
[09:29:23.489]                       }
[09:29:23.489]                       invisible(muffled)
[09:29:23.489]                     }
[09:29:23.489]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.489]                   }
[09:29:23.489]                 }
[09:29:23.489]             }
[09:29:23.489]         }))
[09:29:23.489]     }, error = function(ex) {
[09:29:23.489]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.489]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.489]                 ...future.rng), started = ...future.startTime, 
[09:29:23.489]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.489]             version = "1.8"), class = "FutureResult")
[09:29:23.489]     }, finally = {
[09:29:23.489]         if (!identical(...future.workdir, getwd())) 
[09:29:23.489]             setwd(...future.workdir)
[09:29:23.489]         {
[09:29:23.489]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.489]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.489]             }
[09:29:23.489]             base::options(...future.oldOptions)
[09:29:23.489]             if (.Platform$OS.type == "windows") {
[09:29:23.489]                 old_names <- names(...future.oldEnvVars)
[09:29:23.489]                 envs <- base::Sys.getenv()
[09:29:23.489]                 names <- names(envs)
[09:29:23.489]                 common <- intersect(names, old_names)
[09:29:23.489]                 added <- setdiff(names, old_names)
[09:29:23.489]                 removed <- setdiff(old_names, names)
[09:29:23.489]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.489]                   envs[common]]
[09:29:23.489]                 NAMES <- toupper(changed)
[09:29:23.489]                 args <- list()
[09:29:23.489]                 for (kk in seq_along(NAMES)) {
[09:29:23.489]                   name <- changed[[kk]]
[09:29:23.489]                   NAME <- NAMES[[kk]]
[09:29:23.489]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.489]                     next
[09:29:23.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.489]                 }
[09:29:23.489]                 NAMES <- toupper(added)
[09:29:23.489]                 for (kk in seq_along(NAMES)) {
[09:29:23.489]                   name <- added[[kk]]
[09:29:23.489]                   NAME <- NAMES[[kk]]
[09:29:23.489]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.489]                     next
[09:29:23.489]                   args[[name]] <- ""
[09:29:23.489]                 }
[09:29:23.489]                 NAMES <- toupper(removed)
[09:29:23.489]                 for (kk in seq_along(NAMES)) {
[09:29:23.489]                   name <- removed[[kk]]
[09:29:23.489]                   NAME <- NAMES[[kk]]
[09:29:23.489]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.489]                     next
[09:29:23.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.489]                 }
[09:29:23.489]                 if (length(args) > 0) 
[09:29:23.489]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.489]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.489]             }
[09:29:23.489]             else {
[09:29:23.489]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.489]             }
[09:29:23.489]             {
[09:29:23.489]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.489]                   0L) {
[09:29:23.489]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.489]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.489]                   base::options(opts)
[09:29:23.489]                 }
[09:29:23.489]                 {
[09:29:23.489]                   {
[09:29:23.489]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.489]                     NULL
[09:29:23.489]                   }
[09:29:23.489]                   options(future.plan = NULL)
[09:29:23.489]                   if (is.na(NA_character_)) 
[09:29:23.489]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.489]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.489]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.489]                     .init = FALSE)
[09:29:23.489]                 }
[09:29:23.489]             }
[09:29:23.489]         }
[09:29:23.489]     })
[09:29:23.489]     if (TRUE) {
[09:29:23.489]         base::sink(type = "output", split = FALSE)
[09:29:23.489]         if (TRUE) {
[09:29:23.489]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.489]         }
[09:29:23.489]         else {
[09:29:23.489]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.489]         }
[09:29:23.489]         base::close(...future.stdout)
[09:29:23.489]         ...future.stdout <- NULL
[09:29:23.489]     }
[09:29:23.489]     ...future.result$conditions <- ...future.conditions
[09:29:23.489]     ...future.result$finished <- base::Sys.time()
[09:29:23.489]     ...future.result
[09:29:23.489] }
[09:29:23.491] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[09:29:23.492] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[09:29:23.492] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[09:29:23.492] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[09:29:23.493] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.493] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[09:29:23.493] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[09:29:23.493] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[09:29:23.494] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[09:29:23.494] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[09:29:23.494] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.494] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[09:29:23.495] MultisessionFuture started
[09:29:23.495] - Launch lazy future ... done
[09:29:23.495] run() for ‘MultisessionFuture’ ... done
[09:29:23.495] Created future:
[09:29:23.495] MultisessionFuture:
[09:29:23.495] Label: ‘future_replicate-2’
[09:29:23.495] Expression:
[09:29:23.495] {
[09:29:23.495]     do.call(function(...) {
[09:29:23.495]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.495]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.495]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.495]             on.exit(options(oopts), add = TRUE)
[09:29:23.495]         }
[09:29:23.495]         {
[09:29:23.495]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.495]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.495]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.495]                   envir = globalenv(), inherits = FALSE)
[09:29:23.495]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.495]             })
[09:29:23.495]         }
[09:29:23.495]     }, args = future.call.arguments)
[09:29:23.495] }
[09:29:23.495] Lazy evaluation: FALSE
[09:29:23.495] Asynchronous evaluation: TRUE
[09:29:23.495] Local evaluation: TRUE
[09:29:23.495] Environment: R_GlobalEnv
[09:29:23.495] Capture standard output: TRUE
[09:29:23.495] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.495] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.495] Packages: <none>
[09:29:23.495] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.495] Resolved: FALSE
[09:29:23.495] Value: <not collected>
[09:29:23.495] Conditions captured: <none>
[09:29:23.495] Early signaling: FALSE
[09:29:23.495] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.495] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.507] Chunk #2 of 2 ... DONE
[09:29:23.507] Launching 2 futures (chunks) ... DONE
[09:29:23.507] Resolving 2 futures (chunks) ...
[09:29:23.508] resolve() on list ...
[09:29:23.508]  recursive: 0
[09:29:23.508]  length: 2
[09:29:23.508] 
[09:29:23.508] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.508] - Validating connection of MultisessionFuture
[09:29:23.509] - received message: FutureResult
[09:29:23.509] - Received FutureResult
[09:29:23.509] - Erased future from FutureRegistry
[09:29:23.509] result() for ClusterFuture ...
[09:29:23.509] - result already collected: FutureResult
[09:29:23.509] result() for ClusterFuture ... done
[09:29:23.509] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.509] Future #1
[09:29:23.509] result() for ClusterFuture ...
[09:29:23.509] - result already collected: FutureResult
[09:29:23.510] result() for ClusterFuture ... done
[09:29:23.510] result() for ClusterFuture ...
[09:29:23.510] - result already collected: FutureResult
[09:29:23.510] result() for ClusterFuture ... done
[09:29:23.510] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:29:23.510] - nx: 2
[09:29:23.510] - relay: TRUE
[09:29:23.510] - stdout: TRUE
[09:29:23.510] - signal: TRUE
[09:29:23.510] - resignal: FALSE
[09:29:23.510] - force: TRUE
[09:29:23.510] - relayed: [n=2] FALSE, FALSE
[09:29:23.511] - queued futures: [n=2] FALSE, FALSE
[09:29:23.511]  - until=1
[09:29:23.511]  - relaying element #1
[09:29:23.511] result() for ClusterFuture ...
[09:29:23.511] - result already collected: FutureResult
[09:29:23.511] result() for ClusterFuture ... done
[09:29:23.511] result() for ClusterFuture ...
[09:29:23.511] - result already collected: FutureResult
[09:29:23.511] result() for ClusterFuture ... done
[09:29:23.511] result() for ClusterFuture ...
[09:29:23.511] - result already collected: FutureResult
[09:29:23.512] result() for ClusterFuture ... done
[09:29:23.512] result() for ClusterFuture ...
[09:29:23.512] - result already collected: FutureResult
[09:29:23.512] result() for ClusterFuture ... done
[09:29:23.512] - relayed: [n=2] TRUE, FALSE
[09:29:23.512] - queued futures: [n=2] TRUE, FALSE
[09:29:23.512] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:29:23.512]  length: 1 (resolved future 1)
[09:29:23.537] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.538] - Validating connection of MultisessionFuture
[09:29:23.538] - received message: FutureResult
[09:29:23.538] - Received FutureResult
[09:29:23.538] - Erased future from FutureRegistry
[09:29:23.538] result() for ClusterFuture ...
[09:29:23.538] - result already collected: FutureResult
[09:29:23.538] result() for ClusterFuture ... done
[09:29:23.538] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.538] Future #2
[09:29:23.539] result() for ClusterFuture ...
[09:29:23.539] - result already collected: FutureResult
[09:29:23.539] result() for ClusterFuture ... done
[09:29:23.539] result() for ClusterFuture ...
[09:29:23.539] - result already collected: FutureResult
[09:29:23.539] result() for ClusterFuture ... done
[09:29:23.539] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:29:23.539] - nx: 2
[09:29:23.539] - relay: TRUE
[09:29:23.539] - stdout: TRUE
[09:29:23.539] - signal: TRUE
[09:29:23.539] - resignal: FALSE
[09:29:23.540] - force: TRUE
[09:29:23.540] - relayed: [n=2] TRUE, FALSE
[09:29:23.540] - queued futures: [n=2] TRUE, FALSE
[09:29:23.540]  - until=2
[09:29:23.540]  - relaying element #2
[09:29:23.540] result() for ClusterFuture ...
[09:29:23.540] - result already collected: FutureResult
[09:29:23.540] result() for ClusterFuture ... done
[09:29:23.540] result() for ClusterFuture ...
[09:29:23.540] - result already collected: FutureResult
[09:29:23.540] result() for ClusterFuture ... done
[09:29:23.541] result() for ClusterFuture ...
[09:29:23.541] - result already collected: FutureResult
[09:29:23.541] result() for ClusterFuture ... done
[09:29:23.541] result() for ClusterFuture ...
[09:29:23.541] - result already collected: FutureResult
[09:29:23.541] result() for ClusterFuture ... done
[09:29:23.541] - relayed: [n=2] TRUE, TRUE
[09:29:23.541] - queued futures: [n=2] TRUE, TRUE
[09:29:23.541] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:29:23.541]  length: 0 (resolved future 2)
[09:29:23.541] Relaying remaining futures
[09:29:23.542] signalConditionsASAP(NULL, pos=0) ...
[09:29:23.542] - nx: 2
[09:29:23.542] - relay: TRUE
[09:29:23.542] - stdout: TRUE
[09:29:23.542] - signal: TRUE
[09:29:23.542] - resignal: FALSE
[09:29:23.542] - force: TRUE
[09:29:23.542] - relayed: [n=2] TRUE, TRUE
[09:29:23.542] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:23.542] - relayed: [n=2] TRUE, TRUE
[09:29:23.542] - queued futures: [n=2] TRUE, TRUE
[09:29:23.542] signalConditionsASAP(NULL, pos=0) ... done
[09:29:23.543] resolve() on list ... DONE
[09:29:23.543] result() for ClusterFuture ...
[09:29:23.543] - result already collected: FutureResult
[09:29:23.543] result() for ClusterFuture ... done
[09:29:23.543] result() for ClusterFuture ...
[09:29:23.543] - result already collected: FutureResult
[09:29:23.543] result() for ClusterFuture ... done
[09:29:23.543] result() for ClusterFuture ...
[09:29:23.543] - result already collected: FutureResult
[09:29:23.543] result() for ClusterFuture ... done
[09:29:23.543] result() for ClusterFuture ...
[09:29:23.543] - result already collected: FutureResult
[09:29:23.544] result() for ClusterFuture ... done
[09:29:23.544]  - Number of value chunks collected: 2
[09:29:23.544] Resolving 2 futures (chunks) ... DONE
[09:29:23.544] Reducing values from 2 chunks ...
[09:29:23.544]  - Number of values collected after concatenation: 5
[09:29:23.544]  - Number of values expected: 5
[09:29:23.544] Reducing values from 2 chunks ... DONE
[09:29:23.544] future_lapply() ... DONE
[09:29:23.544] future_lapply() ...
[09:29:23.545] Generating random seeds ...
[09:29:23.545] Generating random seed streams for 5 elements ...
[09:29:23.545] Generating random seed streams for 5 elements ... DONE
[09:29:23.545] Generating random seeds ... DONE
[09:29:23.545] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:23.549] Number of chunks: 2
[09:29:23.550] getGlobalsAndPackagesXApply() ...
[09:29:23.550]  - future.globals: TRUE
[09:29:23.550] getGlobalsAndPackages() ...
[09:29:23.550] Searching for globals...
[09:29:23.552] - globals found: [2] ‘FUN’, ‘sample’
[09:29:23.552] Searching for globals ... DONE
[09:29:23.552] Resolving globals: FALSE
[09:29:23.553] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:23.553] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:23.554] - globals: [1] ‘FUN’
[09:29:23.554] 
[09:29:23.554] getGlobalsAndPackages() ... DONE
[09:29:23.554]  - globals found/used: [n=1] ‘FUN’
[09:29:23.554]  - needed namespaces: [n=0] 
[09:29:23.554] Finding globals ... DONE
[09:29:23.555]  - use_args: TRUE
[09:29:23.555]  - Getting '...' globals ...
[09:29:23.555] resolve() on list ...
[09:29:23.555]  recursive: 0
[09:29:23.556]  length: 1
[09:29:23.556]  elements: ‘...’
[09:29:23.556]  length: 0 (resolved future 1)
[09:29:23.556] resolve() on list ... DONE
[09:29:23.556]    - '...' content: [n=0] 
[09:29:23.557] List of 1
[09:29:23.557]  $ ...: list()
[09:29:23.557]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.557]  - attr(*, "where")=List of 1
[09:29:23.557]   ..$ ...:<environment: 0x55d1cd706038> 
[09:29:23.557]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.557]  - attr(*, "resolved")= logi TRUE
[09:29:23.557]  - attr(*, "total_size")= num NA
[09:29:23.561]  - Getting '...' globals ... DONE
[09:29:23.561] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:23.562] List of 2
[09:29:23.562]  $ ...future.FUN:function (...)  
[09:29:23.562]  $ ...          : list()
[09:29:23.562]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.562]  - attr(*, "where")=List of 2
[09:29:23.562]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:23.562]   ..$ ...          :<environment: 0x55d1cd706038> 
[09:29:23.562]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.562]  - attr(*, "resolved")= logi FALSE
[09:29:23.562]  - attr(*, "total_size")= num 616
[09:29:23.569] Packages to be attached in all futures: [n=0] 
[09:29:23.569] getGlobalsAndPackagesXApply() ... DONE
[09:29:23.569] Number of futures (= number of chunks): 2
[09:29:23.570] Launching 2 futures (chunks) ...
[09:29:23.570] Chunk #1 of 2 ...
[09:29:23.570]  - Finding globals in 'X' for chunk #1 ...
[09:29:23.570] getGlobalsAndPackages() ...
[09:29:23.570] Searching for globals...
[09:29:23.571] 
[09:29:23.571] Searching for globals ... DONE
[09:29:23.571] - globals: [0] <none>
[09:29:23.571] getGlobalsAndPackages() ... DONE
[09:29:23.571]    + additional globals found: [n=0] 
[09:29:23.572]    + additional namespaces needed: [n=0] 
[09:29:23.572]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:23.572]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.572]  - seeds: [2] <seeds>
[09:29:23.572]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.573] getGlobalsAndPackages() ...
[09:29:23.573] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.573] Resolving globals: FALSE
[09:29:23.573] Tweak future expression to call with '...' arguments ...
[09:29:23.573] {
[09:29:23.573]     do.call(function(...) {
[09:29:23.573]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.573]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.573]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.573]             on.exit(options(oopts), add = TRUE)
[09:29:23.573]         }
[09:29:23.573]         {
[09:29:23.573]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.573]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.573]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.573]                   envir = globalenv(), inherits = FALSE)
[09:29:23.573]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.573]             })
[09:29:23.573]         }
[09:29:23.573]     }, args = future.call.arguments)
[09:29:23.573] }
[09:29:23.574] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.574] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.575] 
[09:29:23.575] getGlobalsAndPackages() ... DONE
[09:29:23.575] run() for ‘Future’ ...
[09:29:23.575] - state: ‘created’
[09:29:23.576] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.593] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.593] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.594]   - Field: ‘node’
[09:29:23.594]   - Field: ‘label’
[09:29:23.594]   - Field: ‘local’
[09:29:23.594]   - Field: ‘owner’
[09:29:23.594]   - Field: ‘envir’
[09:29:23.594]   - Field: ‘workers’
[09:29:23.594]   - Field: ‘packages’
[09:29:23.595]   - Field: ‘gc’
[09:29:23.595]   - Field: ‘conditions’
[09:29:23.595]   - Field: ‘persistent’
[09:29:23.595]   - Field: ‘expr’
[09:29:23.595]   - Field: ‘uuid’
[09:29:23.595]   - Field: ‘seed’
[09:29:23.595]   - Field: ‘version’
[09:29:23.595]   - Field: ‘result’
[09:29:23.596]   - Field: ‘asynchronous’
[09:29:23.596]   - Field: ‘calls’
[09:29:23.596]   - Field: ‘globals’
[09:29:23.596]   - Field: ‘stdout’
[09:29:23.596]   - Field: ‘earlySignal’
[09:29:23.596]   - Field: ‘lazy’
[09:29:23.596]   - Field: ‘state’
[09:29:23.596] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.597] - Launch lazy future ...
[09:29:23.597] Packages needed by the future expression (n = 0): <none>
[09:29:23.597] Packages needed by future strategies (n = 0): <none>
[09:29:23.598] {
[09:29:23.598]     {
[09:29:23.598]         {
[09:29:23.598]             ...future.startTime <- base::Sys.time()
[09:29:23.598]             {
[09:29:23.598]                 {
[09:29:23.598]                   {
[09:29:23.598]                     {
[09:29:23.598]                       base::local({
[09:29:23.598]                         has_future <- base::requireNamespace("future", 
[09:29:23.598]                           quietly = TRUE)
[09:29:23.598]                         if (has_future) {
[09:29:23.598]                           ns <- base::getNamespace("future")
[09:29:23.598]                           version <- ns[[".package"]][["version"]]
[09:29:23.598]                           if (is.null(version)) 
[09:29:23.598]                             version <- utils::packageVersion("future")
[09:29:23.598]                         }
[09:29:23.598]                         else {
[09:29:23.598]                           version <- NULL
[09:29:23.598]                         }
[09:29:23.598]                         if (!has_future || version < "1.8.0") {
[09:29:23.598]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.598]                             "", base::R.version$version.string), 
[09:29:23.598]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.598]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.598]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.598]                               "release", "version")], collapse = " "), 
[09:29:23.598]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.598]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.598]                             info)
[09:29:23.598]                           info <- base::paste(info, collapse = "; ")
[09:29:23.598]                           if (!has_future) {
[09:29:23.598]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.598]                               info)
[09:29:23.598]                           }
[09:29:23.598]                           else {
[09:29:23.598]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.598]                               info, version)
[09:29:23.598]                           }
[09:29:23.598]                           base::stop(msg)
[09:29:23.598]                         }
[09:29:23.598]                       })
[09:29:23.598]                     }
[09:29:23.598]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.598]                     base::options(mc.cores = 1L)
[09:29:23.598]                   }
[09:29:23.598]                   ...future.strategy.old <- future::plan("list")
[09:29:23.598]                   options(future.plan = NULL)
[09:29:23.598]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.598]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.598]                 }
[09:29:23.598]                 ...future.workdir <- getwd()
[09:29:23.598]             }
[09:29:23.598]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.598]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.598]         }
[09:29:23.598]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.598]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.598]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.598]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.598]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.598]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.598]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.598]             base::names(...future.oldOptions))
[09:29:23.598]     }
[09:29:23.598]     if (FALSE) {
[09:29:23.598]     }
[09:29:23.598]     else {
[09:29:23.598]         if (TRUE) {
[09:29:23.598]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.598]                 open = "w")
[09:29:23.598]         }
[09:29:23.598]         else {
[09:29:23.598]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.598]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.598]         }
[09:29:23.598]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.598]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.598]             base::sink(type = "output", split = FALSE)
[09:29:23.598]             base::close(...future.stdout)
[09:29:23.598]         }, add = TRUE)
[09:29:23.598]     }
[09:29:23.598]     ...future.frame <- base::sys.nframe()
[09:29:23.598]     ...future.conditions <- base::list()
[09:29:23.598]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.598]     if (FALSE) {
[09:29:23.598]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.598]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.598]     }
[09:29:23.598]     ...future.result <- base::tryCatch({
[09:29:23.598]         base::withCallingHandlers({
[09:29:23.598]             ...future.value <- base::withVisible(base::local({
[09:29:23.598]                 ...future.makeSendCondition <- base::local({
[09:29:23.598]                   sendCondition <- NULL
[09:29:23.598]                   function(frame = 1L) {
[09:29:23.598]                     if (is.function(sendCondition)) 
[09:29:23.598]                       return(sendCondition)
[09:29:23.598]                     ns <- getNamespace("parallel")
[09:29:23.598]                     if (exists("sendData", mode = "function", 
[09:29:23.598]                       envir = ns)) {
[09:29:23.598]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.598]                         envir = ns)
[09:29:23.598]                       envir <- sys.frame(frame)
[09:29:23.598]                       master <- NULL
[09:29:23.598]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.598]                         !identical(envir, emptyenv())) {
[09:29:23.598]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.598]                           inherits = FALSE)) {
[09:29:23.598]                           master <- get("master", mode = "list", 
[09:29:23.598]                             envir = envir, inherits = FALSE)
[09:29:23.598]                           if (inherits(master, c("SOCKnode", 
[09:29:23.598]                             "SOCK0node"))) {
[09:29:23.598]                             sendCondition <<- function(cond) {
[09:29:23.598]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.598]                                 success = TRUE)
[09:29:23.598]                               parallel_sendData(master, data)
[09:29:23.598]                             }
[09:29:23.598]                             return(sendCondition)
[09:29:23.598]                           }
[09:29:23.598]                         }
[09:29:23.598]                         frame <- frame + 1L
[09:29:23.598]                         envir <- sys.frame(frame)
[09:29:23.598]                       }
[09:29:23.598]                     }
[09:29:23.598]                     sendCondition <<- function(cond) NULL
[09:29:23.598]                   }
[09:29:23.598]                 })
[09:29:23.598]                 withCallingHandlers({
[09:29:23.598]                   {
[09:29:23.598]                     do.call(function(...) {
[09:29:23.598]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.598]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.598]                         ...future.globals.maxSize)) {
[09:29:23.598]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.598]                         on.exit(options(oopts), add = TRUE)
[09:29:23.598]                       }
[09:29:23.598]                       {
[09:29:23.598]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.598]                           FUN = function(jj) {
[09:29:23.598]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.598]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.598]                               envir = globalenv(), inherits = FALSE)
[09:29:23.598]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.598]                           })
[09:29:23.598]                       }
[09:29:23.598]                     }, args = future.call.arguments)
[09:29:23.598]                   }
[09:29:23.598]                 }, immediateCondition = function(cond) {
[09:29:23.598]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.598]                   sendCondition(cond)
[09:29:23.598]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.598]                   {
[09:29:23.598]                     inherits <- base::inherits
[09:29:23.598]                     invokeRestart <- base::invokeRestart
[09:29:23.598]                     is.null <- base::is.null
[09:29:23.598]                     muffled <- FALSE
[09:29:23.598]                     if (inherits(cond, "message")) {
[09:29:23.598]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.598]                       if (muffled) 
[09:29:23.598]                         invokeRestart("muffleMessage")
[09:29:23.598]                     }
[09:29:23.598]                     else if (inherits(cond, "warning")) {
[09:29:23.598]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.598]                       if (muffled) 
[09:29:23.598]                         invokeRestart("muffleWarning")
[09:29:23.598]                     }
[09:29:23.598]                     else if (inherits(cond, "condition")) {
[09:29:23.598]                       if (!is.null(pattern)) {
[09:29:23.598]                         computeRestarts <- base::computeRestarts
[09:29:23.598]                         grepl <- base::grepl
[09:29:23.598]                         restarts <- computeRestarts(cond)
[09:29:23.598]                         for (restart in restarts) {
[09:29:23.598]                           name <- restart$name
[09:29:23.598]                           if (is.null(name)) 
[09:29:23.598]                             next
[09:29:23.598]                           if (!grepl(pattern, name)) 
[09:29:23.598]                             next
[09:29:23.598]                           invokeRestart(restart)
[09:29:23.598]                           muffled <- TRUE
[09:29:23.598]                           break
[09:29:23.598]                         }
[09:29:23.598]                       }
[09:29:23.598]                     }
[09:29:23.598]                     invisible(muffled)
[09:29:23.598]                   }
[09:29:23.598]                   muffleCondition(cond)
[09:29:23.598]                 })
[09:29:23.598]             }))
[09:29:23.598]             future::FutureResult(value = ...future.value$value, 
[09:29:23.598]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.598]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.598]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.598]                     ...future.globalenv.names))
[09:29:23.598]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.598]         }, condition = base::local({
[09:29:23.598]             c <- base::c
[09:29:23.598]             inherits <- base::inherits
[09:29:23.598]             invokeRestart <- base::invokeRestart
[09:29:23.598]             length <- base::length
[09:29:23.598]             list <- base::list
[09:29:23.598]             seq.int <- base::seq.int
[09:29:23.598]             signalCondition <- base::signalCondition
[09:29:23.598]             sys.calls <- base::sys.calls
[09:29:23.598]             `[[` <- base::`[[`
[09:29:23.598]             `+` <- base::`+`
[09:29:23.598]             `<<-` <- base::`<<-`
[09:29:23.598]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.598]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.598]                   3L)]
[09:29:23.598]             }
[09:29:23.598]             function(cond) {
[09:29:23.598]                 is_error <- inherits(cond, "error")
[09:29:23.598]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.598]                   NULL)
[09:29:23.598]                 if (is_error) {
[09:29:23.598]                   sessionInformation <- function() {
[09:29:23.598]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.598]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.598]                       search = base::search(), system = base::Sys.info())
[09:29:23.598]                   }
[09:29:23.598]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.598]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.598]                     cond$call), session = sessionInformation(), 
[09:29:23.598]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.598]                   signalCondition(cond)
[09:29:23.598]                 }
[09:29:23.598]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.598]                 "immediateCondition"))) {
[09:29:23.598]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.598]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.598]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.598]                   if (TRUE && !signal) {
[09:29:23.598]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.598]                     {
[09:29:23.598]                       inherits <- base::inherits
[09:29:23.598]                       invokeRestart <- base::invokeRestart
[09:29:23.598]                       is.null <- base::is.null
[09:29:23.598]                       muffled <- FALSE
[09:29:23.598]                       if (inherits(cond, "message")) {
[09:29:23.598]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.598]                         if (muffled) 
[09:29:23.598]                           invokeRestart("muffleMessage")
[09:29:23.598]                       }
[09:29:23.598]                       else if (inherits(cond, "warning")) {
[09:29:23.598]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.598]                         if (muffled) 
[09:29:23.598]                           invokeRestart("muffleWarning")
[09:29:23.598]                       }
[09:29:23.598]                       else if (inherits(cond, "condition")) {
[09:29:23.598]                         if (!is.null(pattern)) {
[09:29:23.598]                           computeRestarts <- base::computeRestarts
[09:29:23.598]                           grepl <- base::grepl
[09:29:23.598]                           restarts <- computeRestarts(cond)
[09:29:23.598]                           for (restart in restarts) {
[09:29:23.598]                             name <- restart$name
[09:29:23.598]                             if (is.null(name)) 
[09:29:23.598]                               next
[09:29:23.598]                             if (!grepl(pattern, name)) 
[09:29:23.598]                               next
[09:29:23.598]                             invokeRestart(restart)
[09:29:23.598]                             muffled <- TRUE
[09:29:23.598]                             break
[09:29:23.598]                           }
[09:29:23.598]                         }
[09:29:23.598]                       }
[09:29:23.598]                       invisible(muffled)
[09:29:23.598]                     }
[09:29:23.598]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.598]                   }
[09:29:23.598]                 }
[09:29:23.598]                 else {
[09:29:23.598]                   if (TRUE) {
[09:29:23.598]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.598]                     {
[09:29:23.598]                       inherits <- base::inherits
[09:29:23.598]                       invokeRestart <- base::invokeRestart
[09:29:23.598]                       is.null <- base::is.null
[09:29:23.598]                       muffled <- FALSE
[09:29:23.598]                       if (inherits(cond, "message")) {
[09:29:23.598]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.598]                         if (muffled) 
[09:29:23.598]                           invokeRestart("muffleMessage")
[09:29:23.598]                       }
[09:29:23.598]                       else if (inherits(cond, "warning")) {
[09:29:23.598]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.598]                         if (muffled) 
[09:29:23.598]                           invokeRestart("muffleWarning")
[09:29:23.598]                       }
[09:29:23.598]                       else if (inherits(cond, "condition")) {
[09:29:23.598]                         if (!is.null(pattern)) {
[09:29:23.598]                           computeRestarts <- base::computeRestarts
[09:29:23.598]                           grepl <- base::grepl
[09:29:23.598]                           restarts <- computeRestarts(cond)
[09:29:23.598]                           for (restart in restarts) {
[09:29:23.598]                             name <- restart$name
[09:29:23.598]                             if (is.null(name)) 
[09:29:23.598]                               next
[09:29:23.598]                             if (!grepl(pattern, name)) 
[09:29:23.598]                               next
[09:29:23.598]                             invokeRestart(restart)
[09:29:23.598]                             muffled <- TRUE
[09:29:23.598]                             break
[09:29:23.598]                           }
[09:29:23.598]                         }
[09:29:23.598]                       }
[09:29:23.598]                       invisible(muffled)
[09:29:23.598]                     }
[09:29:23.598]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.598]                   }
[09:29:23.598]                 }
[09:29:23.598]             }
[09:29:23.598]         }))
[09:29:23.598]     }, error = function(ex) {
[09:29:23.598]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.598]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.598]                 ...future.rng), started = ...future.startTime, 
[09:29:23.598]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.598]             version = "1.8"), class = "FutureResult")
[09:29:23.598]     }, finally = {
[09:29:23.598]         if (!identical(...future.workdir, getwd())) 
[09:29:23.598]             setwd(...future.workdir)
[09:29:23.598]         {
[09:29:23.598]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.598]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.598]             }
[09:29:23.598]             base::options(...future.oldOptions)
[09:29:23.598]             if (.Platform$OS.type == "windows") {
[09:29:23.598]                 old_names <- names(...future.oldEnvVars)
[09:29:23.598]                 envs <- base::Sys.getenv()
[09:29:23.598]                 names <- names(envs)
[09:29:23.598]                 common <- intersect(names, old_names)
[09:29:23.598]                 added <- setdiff(names, old_names)
[09:29:23.598]                 removed <- setdiff(old_names, names)
[09:29:23.598]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.598]                   envs[common]]
[09:29:23.598]                 NAMES <- toupper(changed)
[09:29:23.598]                 args <- list()
[09:29:23.598]                 for (kk in seq_along(NAMES)) {
[09:29:23.598]                   name <- changed[[kk]]
[09:29:23.598]                   NAME <- NAMES[[kk]]
[09:29:23.598]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.598]                     next
[09:29:23.598]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.598]                 }
[09:29:23.598]                 NAMES <- toupper(added)
[09:29:23.598]                 for (kk in seq_along(NAMES)) {
[09:29:23.598]                   name <- added[[kk]]
[09:29:23.598]                   NAME <- NAMES[[kk]]
[09:29:23.598]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.598]                     next
[09:29:23.598]                   args[[name]] <- ""
[09:29:23.598]                 }
[09:29:23.598]                 NAMES <- toupper(removed)
[09:29:23.598]                 for (kk in seq_along(NAMES)) {
[09:29:23.598]                   name <- removed[[kk]]
[09:29:23.598]                   NAME <- NAMES[[kk]]
[09:29:23.598]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.598]                     next
[09:29:23.598]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.598]                 }
[09:29:23.598]                 if (length(args) > 0) 
[09:29:23.598]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.598]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.598]             }
[09:29:23.598]             else {
[09:29:23.598]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.598]             }
[09:29:23.598]             {
[09:29:23.598]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.598]                   0L) {
[09:29:23.598]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.598]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.598]                   base::options(opts)
[09:29:23.598]                 }
[09:29:23.598]                 {
[09:29:23.598]                   {
[09:29:23.598]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.598]                     NULL
[09:29:23.598]                   }
[09:29:23.598]                   options(future.plan = NULL)
[09:29:23.598]                   if (is.na(NA_character_)) 
[09:29:23.598]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.598]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.598]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.598]                     .init = FALSE)
[09:29:23.598]                 }
[09:29:23.598]             }
[09:29:23.598]         }
[09:29:23.598]     })
[09:29:23.598]     if (TRUE) {
[09:29:23.598]         base::sink(type = "output", split = FALSE)
[09:29:23.598]         if (TRUE) {
[09:29:23.598]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.598]         }
[09:29:23.598]         else {
[09:29:23.598]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.598]         }
[09:29:23.598]         base::close(...future.stdout)
[09:29:23.598]         ...future.stdout <- NULL
[09:29:23.598]     }
[09:29:23.598]     ...future.result$conditions <- ...future.conditions
[09:29:23.598]     ...future.result$finished <- base::Sys.time()
[09:29:23.598]     ...future.result
[09:29:23.598] }
[09:29:23.602] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[09:29:23.602] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[09:29:23.603] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[09:29:23.603] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[09:29:23.604] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.604] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[09:29:23.604] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[09:29:23.604] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[09:29:23.605] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[09:29:23.605] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[09:29:23.605] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.605] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[09:29:23.606] MultisessionFuture started
[09:29:23.606] - Launch lazy future ... done
[09:29:23.606] run() for ‘MultisessionFuture’ ... done
[09:29:23.606] Created future:
[09:29:23.607] MultisessionFuture:
[09:29:23.607] Label: ‘future_replicate-1’
[09:29:23.607] Expression:
[09:29:23.607] {
[09:29:23.607]     do.call(function(...) {
[09:29:23.607]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.607]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.607]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.607]             on.exit(options(oopts), add = TRUE)
[09:29:23.607]         }
[09:29:23.607]         {
[09:29:23.607]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.607]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.607]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.607]                   envir = globalenv(), inherits = FALSE)
[09:29:23.607]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.607]             })
[09:29:23.607]         }
[09:29:23.607]     }, args = future.call.arguments)
[09:29:23.607] }
[09:29:23.607] Lazy evaluation: FALSE
[09:29:23.607] Asynchronous evaluation: TRUE
[09:29:23.607] Local evaluation: TRUE
[09:29:23.607] Environment: R_GlobalEnv
[09:29:23.607] Capture standard output: TRUE
[09:29:23.607] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.607] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.607] Packages: <none>
[09:29:23.607] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.607] Resolved: FALSE
[09:29:23.607] Value: <not collected>
[09:29:23.607] Conditions captured: <none>
[09:29:23.607] Early signaling: FALSE
[09:29:23.607] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.607] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.618] Chunk #1 of 2 ... DONE
[09:29:23.618] Chunk #2 of 2 ...
[09:29:23.618]  - Finding globals in 'X' for chunk #2 ...
[09:29:23.618] getGlobalsAndPackages() ...
[09:29:23.619] Searching for globals...
[09:29:23.619] 
[09:29:23.619] Searching for globals ... DONE
[09:29:23.619] - globals: [0] <none>
[09:29:23.619] getGlobalsAndPackages() ... DONE
[09:29:23.619]    + additional globals found: [n=0] 
[09:29:23.619]    + additional namespaces needed: [n=0] 
[09:29:23.619]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:23.619]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.620]  - seeds: [3] <seeds>
[09:29:23.620]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.620] getGlobalsAndPackages() ...
[09:29:23.620] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.620] Resolving globals: FALSE
[09:29:23.620] Tweak future expression to call with '...' arguments ...
[09:29:23.620] {
[09:29:23.620]     do.call(function(...) {
[09:29:23.620]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.620]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.620]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.620]             on.exit(options(oopts), add = TRUE)
[09:29:23.620]         }
[09:29:23.620]         {
[09:29:23.620]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.620]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.620]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.620]                   envir = globalenv(), inherits = FALSE)
[09:29:23.620]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.620]             })
[09:29:23.620]         }
[09:29:23.620]     }, args = future.call.arguments)
[09:29:23.620] }
[09:29:23.620] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.621] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.621] 
[09:29:23.621] getGlobalsAndPackages() ... DONE
[09:29:23.621] run() for ‘Future’ ...
[09:29:23.621] - state: ‘created’
[09:29:23.622] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.636] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.637] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.637]   - Field: ‘node’
[09:29:23.637]   - Field: ‘label’
[09:29:23.637]   - Field: ‘local’
[09:29:23.637]   - Field: ‘owner’
[09:29:23.637]   - Field: ‘envir’
[09:29:23.637]   - Field: ‘workers’
[09:29:23.637]   - Field: ‘packages’
[09:29:23.637]   - Field: ‘gc’
[09:29:23.638]   - Field: ‘conditions’
[09:29:23.638]   - Field: ‘persistent’
[09:29:23.638]   - Field: ‘expr’
[09:29:23.638]   - Field: ‘uuid’
[09:29:23.638]   - Field: ‘seed’
[09:29:23.638]   - Field: ‘version’
[09:29:23.638]   - Field: ‘result’
[09:29:23.638]   - Field: ‘asynchronous’
[09:29:23.638]   - Field: ‘calls’
[09:29:23.638]   - Field: ‘globals’
[09:29:23.638]   - Field: ‘stdout’
[09:29:23.638]   - Field: ‘earlySignal’
[09:29:23.639]   - Field: ‘lazy’
[09:29:23.639]   - Field: ‘state’
[09:29:23.639] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.639] - Launch lazy future ...
[09:29:23.639] Packages needed by the future expression (n = 0): <none>
[09:29:23.639] Packages needed by future strategies (n = 0): <none>
[09:29:23.640] {
[09:29:23.640]     {
[09:29:23.640]         {
[09:29:23.640]             ...future.startTime <- base::Sys.time()
[09:29:23.640]             {
[09:29:23.640]                 {
[09:29:23.640]                   {
[09:29:23.640]                     {
[09:29:23.640]                       base::local({
[09:29:23.640]                         has_future <- base::requireNamespace("future", 
[09:29:23.640]                           quietly = TRUE)
[09:29:23.640]                         if (has_future) {
[09:29:23.640]                           ns <- base::getNamespace("future")
[09:29:23.640]                           version <- ns[[".package"]][["version"]]
[09:29:23.640]                           if (is.null(version)) 
[09:29:23.640]                             version <- utils::packageVersion("future")
[09:29:23.640]                         }
[09:29:23.640]                         else {
[09:29:23.640]                           version <- NULL
[09:29:23.640]                         }
[09:29:23.640]                         if (!has_future || version < "1.8.0") {
[09:29:23.640]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.640]                             "", base::R.version$version.string), 
[09:29:23.640]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.640]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.640]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.640]                               "release", "version")], collapse = " "), 
[09:29:23.640]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.640]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.640]                             info)
[09:29:23.640]                           info <- base::paste(info, collapse = "; ")
[09:29:23.640]                           if (!has_future) {
[09:29:23.640]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.640]                               info)
[09:29:23.640]                           }
[09:29:23.640]                           else {
[09:29:23.640]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.640]                               info, version)
[09:29:23.640]                           }
[09:29:23.640]                           base::stop(msg)
[09:29:23.640]                         }
[09:29:23.640]                       })
[09:29:23.640]                     }
[09:29:23.640]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.640]                     base::options(mc.cores = 1L)
[09:29:23.640]                   }
[09:29:23.640]                   ...future.strategy.old <- future::plan("list")
[09:29:23.640]                   options(future.plan = NULL)
[09:29:23.640]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.640]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.640]                 }
[09:29:23.640]                 ...future.workdir <- getwd()
[09:29:23.640]             }
[09:29:23.640]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.640]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.640]         }
[09:29:23.640]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.640]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.640]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.640]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.640]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.640]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.640]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.640]             base::names(...future.oldOptions))
[09:29:23.640]     }
[09:29:23.640]     if (FALSE) {
[09:29:23.640]     }
[09:29:23.640]     else {
[09:29:23.640]         if (TRUE) {
[09:29:23.640]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.640]                 open = "w")
[09:29:23.640]         }
[09:29:23.640]         else {
[09:29:23.640]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.640]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.640]         }
[09:29:23.640]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.640]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.640]             base::sink(type = "output", split = FALSE)
[09:29:23.640]             base::close(...future.stdout)
[09:29:23.640]         }, add = TRUE)
[09:29:23.640]     }
[09:29:23.640]     ...future.frame <- base::sys.nframe()
[09:29:23.640]     ...future.conditions <- base::list()
[09:29:23.640]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.640]     if (FALSE) {
[09:29:23.640]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.640]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.640]     }
[09:29:23.640]     ...future.result <- base::tryCatch({
[09:29:23.640]         base::withCallingHandlers({
[09:29:23.640]             ...future.value <- base::withVisible(base::local({
[09:29:23.640]                 ...future.makeSendCondition <- base::local({
[09:29:23.640]                   sendCondition <- NULL
[09:29:23.640]                   function(frame = 1L) {
[09:29:23.640]                     if (is.function(sendCondition)) 
[09:29:23.640]                       return(sendCondition)
[09:29:23.640]                     ns <- getNamespace("parallel")
[09:29:23.640]                     if (exists("sendData", mode = "function", 
[09:29:23.640]                       envir = ns)) {
[09:29:23.640]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.640]                         envir = ns)
[09:29:23.640]                       envir <- sys.frame(frame)
[09:29:23.640]                       master <- NULL
[09:29:23.640]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.640]                         !identical(envir, emptyenv())) {
[09:29:23.640]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.640]                           inherits = FALSE)) {
[09:29:23.640]                           master <- get("master", mode = "list", 
[09:29:23.640]                             envir = envir, inherits = FALSE)
[09:29:23.640]                           if (inherits(master, c("SOCKnode", 
[09:29:23.640]                             "SOCK0node"))) {
[09:29:23.640]                             sendCondition <<- function(cond) {
[09:29:23.640]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.640]                                 success = TRUE)
[09:29:23.640]                               parallel_sendData(master, data)
[09:29:23.640]                             }
[09:29:23.640]                             return(sendCondition)
[09:29:23.640]                           }
[09:29:23.640]                         }
[09:29:23.640]                         frame <- frame + 1L
[09:29:23.640]                         envir <- sys.frame(frame)
[09:29:23.640]                       }
[09:29:23.640]                     }
[09:29:23.640]                     sendCondition <<- function(cond) NULL
[09:29:23.640]                   }
[09:29:23.640]                 })
[09:29:23.640]                 withCallingHandlers({
[09:29:23.640]                   {
[09:29:23.640]                     do.call(function(...) {
[09:29:23.640]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.640]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.640]                         ...future.globals.maxSize)) {
[09:29:23.640]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.640]                         on.exit(options(oopts), add = TRUE)
[09:29:23.640]                       }
[09:29:23.640]                       {
[09:29:23.640]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.640]                           FUN = function(jj) {
[09:29:23.640]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.640]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.640]                               envir = globalenv(), inherits = FALSE)
[09:29:23.640]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.640]                           })
[09:29:23.640]                       }
[09:29:23.640]                     }, args = future.call.arguments)
[09:29:23.640]                   }
[09:29:23.640]                 }, immediateCondition = function(cond) {
[09:29:23.640]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.640]                   sendCondition(cond)
[09:29:23.640]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.640]                   {
[09:29:23.640]                     inherits <- base::inherits
[09:29:23.640]                     invokeRestart <- base::invokeRestart
[09:29:23.640]                     is.null <- base::is.null
[09:29:23.640]                     muffled <- FALSE
[09:29:23.640]                     if (inherits(cond, "message")) {
[09:29:23.640]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.640]                       if (muffled) 
[09:29:23.640]                         invokeRestart("muffleMessage")
[09:29:23.640]                     }
[09:29:23.640]                     else if (inherits(cond, "warning")) {
[09:29:23.640]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.640]                       if (muffled) 
[09:29:23.640]                         invokeRestart("muffleWarning")
[09:29:23.640]                     }
[09:29:23.640]                     else if (inherits(cond, "condition")) {
[09:29:23.640]                       if (!is.null(pattern)) {
[09:29:23.640]                         computeRestarts <- base::computeRestarts
[09:29:23.640]                         grepl <- base::grepl
[09:29:23.640]                         restarts <- computeRestarts(cond)
[09:29:23.640]                         for (restart in restarts) {
[09:29:23.640]                           name <- restart$name
[09:29:23.640]                           if (is.null(name)) 
[09:29:23.640]                             next
[09:29:23.640]                           if (!grepl(pattern, name)) 
[09:29:23.640]                             next
[09:29:23.640]                           invokeRestart(restart)
[09:29:23.640]                           muffled <- TRUE
[09:29:23.640]                           break
[09:29:23.640]                         }
[09:29:23.640]                       }
[09:29:23.640]                     }
[09:29:23.640]                     invisible(muffled)
[09:29:23.640]                   }
[09:29:23.640]                   muffleCondition(cond)
[09:29:23.640]                 })
[09:29:23.640]             }))
[09:29:23.640]             future::FutureResult(value = ...future.value$value, 
[09:29:23.640]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.640]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.640]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.640]                     ...future.globalenv.names))
[09:29:23.640]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.640]         }, condition = base::local({
[09:29:23.640]             c <- base::c
[09:29:23.640]             inherits <- base::inherits
[09:29:23.640]             invokeRestart <- base::invokeRestart
[09:29:23.640]             length <- base::length
[09:29:23.640]             list <- base::list
[09:29:23.640]             seq.int <- base::seq.int
[09:29:23.640]             signalCondition <- base::signalCondition
[09:29:23.640]             sys.calls <- base::sys.calls
[09:29:23.640]             `[[` <- base::`[[`
[09:29:23.640]             `+` <- base::`+`
[09:29:23.640]             `<<-` <- base::`<<-`
[09:29:23.640]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.640]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.640]                   3L)]
[09:29:23.640]             }
[09:29:23.640]             function(cond) {
[09:29:23.640]                 is_error <- inherits(cond, "error")
[09:29:23.640]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.640]                   NULL)
[09:29:23.640]                 if (is_error) {
[09:29:23.640]                   sessionInformation <- function() {
[09:29:23.640]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.640]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.640]                       search = base::search(), system = base::Sys.info())
[09:29:23.640]                   }
[09:29:23.640]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.640]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.640]                     cond$call), session = sessionInformation(), 
[09:29:23.640]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.640]                   signalCondition(cond)
[09:29:23.640]                 }
[09:29:23.640]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.640]                 "immediateCondition"))) {
[09:29:23.640]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.640]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.640]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.640]                   if (TRUE && !signal) {
[09:29:23.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.640]                     {
[09:29:23.640]                       inherits <- base::inherits
[09:29:23.640]                       invokeRestart <- base::invokeRestart
[09:29:23.640]                       is.null <- base::is.null
[09:29:23.640]                       muffled <- FALSE
[09:29:23.640]                       if (inherits(cond, "message")) {
[09:29:23.640]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.640]                         if (muffled) 
[09:29:23.640]                           invokeRestart("muffleMessage")
[09:29:23.640]                       }
[09:29:23.640]                       else if (inherits(cond, "warning")) {
[09:29:23.640]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.640]                         if (muffled) 
[09:29:23.640]                           invokeRestart("muffleWarning")
[09:29:23.640]                       }
[09:29:23.640]                       else if (inherits(cond, "condition")) {
[09:29:23.640]                         if (!is.null(pattern)) {
[09:29:23.640]                           computeRestarts <- base::computeRestarts
[09:29:23.640]                           grepl <- base::grepl
[09:29:23.640]                           restarts <- computeRestarts(cond)
[09:29:23.640]                           for (restart in restarts) {
[09:29:23.640]                             name <- restart$name
[09:29:23.640]                             if (is.null(name)) 
[09:29:23.640]                               next
[09:29:23.640]                             if (!grepl(pattern, name)) 
[09:29:23.640]                               next
[09:29:23.640]                             invokeRestart(restart)
[09:29:23.640]                             muffled <- TRUE
[09:29:23.640]                             break
[09:29:23.640]                           }
[09:29:23.640]                         }
[09:29:23.640]                       }
[09:29:23.640]                       invisible(muffled)
[09:29:23.640]                     }
[09:29:23.640]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.640]                   }
[09:29:23.640]                 }
[09:29:23.640]                 else {
[09:29:23.640]                   if (TRUE) {
[09:29:23.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.640]                     {
[09:29:23.640]                       inherits <- base::inherits
[09:29:23.640]                       invokeRestart <- base::invokeRestart
[09:29:23.640]                       is.null <- base::is.null
[09:29:23.640]                       muffled <- FALSE
[09:29:23.640]                       if (inherits(cond, "message")) {
[09:29:23.640]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.640]                         if (muffled) 
[09:29:23.640]                           invokeRestart("muffleMessage")
[09:29:23.640]                       }
[09:29:23.640]                       else if (inherits(cond, "warning")) {
[09:29:23.640]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.640]                         if (muffled) 
[09:29:23.640]                           invokeRestart("muffleWarning")
[09:29:23.640]                       }
[09:29:23.640]                       else if (inherits(cond, "condition")) {
[09:29:23.640]                         if (!is.null(pattern)) {
[09:29:23.640]                           computeRestarts <- base::computeRestarts
[09:29:23.640]                           grepl <- base::grepl
[09:29:23.640]                           restarts <- computeRestarts(cond)
[09:29:23.640]                           for (restart in restarts) {
[09:29:23.640]                             name <- restart$name
[09:29:23.640]                             if (is.null(name)) 
[09:29:23.640]                               next
[09:29:23.640]                             if (!grepl(pattern, name)) 
[09:29:23.640]                               next
[09:29:23.640]                             invokeRestart(restart)
[09:29:23.640]                             muffled <- TRUE
[09:29:23.640]                             break
[09:29:23.640]                           }
[09:29:23.640]                         }
[09:29:23.640]                       }
[09:29:23.640]                       invisible(muffled)
[09:29:23.640]                     }
[09:29:23.640]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.640]                   }
[09:29:23.640]                 }
[09:29:23.640]             }
[09:29:23.640]         }))
[09:29:23.640]     }, error = function(ex) {
[09:29:23.640]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.640]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.640]                 ...future.rng), started = ...future.startTime, 
[09:29:23.640]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.640]             version = "1.8"), class = "FutureResult")
[09:29:23.640]     }, finally = {
[09:29:23.640]         if (!identical(...future.workdir, getwd())) 
[09:29:23.640]             setwd(...future.workdir)
[09:29:23.640]         {
[09:29:23.640]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.640]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.640]             }
[09:29:23.640]             base::options(...future.oldOptions)
[09:29:23.640]             if (.Platform$OS.type == "windows") {
[09:29:23.640]                 old_names <- names(...future.oldEnvVars)
[09:29:23.640]                 envs <- base::Sys.getenv()
[09:29:23.640]                 names <- names(envs)
[09:29:23.640]                 common <- intersect(names, old_names)
[09:29:23.640]                 added <- setdiff(names, old_names)
[09:29:23.640]                 removed <- setdiff(old_names, names)
[09:29:23.640]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.640]                   envs[common]]
[09:29:23.640]                 NAMES <- toupper(changed)
[09:29:23.640]                 args <- list()
[09:29:23.640]                 for (kk in seq_along(NAMES)) {
[09:29:23.640]                   name <- changed[[kk]]
[09:29:23.640]                   NAME <- NAMES[[kk]]
[09:29:23.640]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.640]                     next
[09:29:23.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.640]                 }
[09:29:23.640]                 NAMES <- toupper(added)
[09:29:23.640]                 for (kk in seq_along(NAMES)) {
[09:29:23.640]                   name <- added[[kk]]
[09:29:23.640]                   NAME <- NAMES[[kk]]
[09:29:23.640]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.640]                     next
[09:29:23.640]                   args[[name]] <- ""
[09:29:23.640]                 }
[09:29:23.640]                 NAMES <- toupper(removed)
[09:29:23.640]                 for (kk in seq_along(NAMES)) {
[09:29:23.640]                   name <- removed[[kk]]
[09:29:23.640]                   NAME <- NAMES[[kk]]
[09:29:23.640]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.640]                     next
[09:29:23.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.640]                 }
[09:29:23.640]                 if (length(args) > 0) 
[09:29:23.640]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.640]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.640]             }
[09:29:23.640]             else {
[09:29:23.640]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.640]             }
[09:29:23.640]             {
[09:29:23.640]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.640]                   0L) {
[09:29:23.640]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.640]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.640]                   base::options(opts)
[09:29:23.640]                 }
[09:29:23.640]                 {
[09:29:23.640]                   {
[09:29:23.640]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.640]                     NULL
[09:29:23.640]                   }
[09:29:23.640]                   options(future.plan = NULL)
[09:29:23.640]                   if (is.na(NA_character_)) 
[09:29:23.640]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.640]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.640]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.640]                     .init = FALSE)
[09:29:23.640]                 }
[09:29:23.640]             }
[09:29:23.640]         }
[09:29:23.640]     })
[09:29:23.640]     if (TRUE) {
[09:29:23.640]         base::sink(type = "output", split = FALSE)
[09:29:23.640]         if (TRUE) {
[09:29:23.640]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.640]         }
[09:29:23.640]         else {
[09:29:23.640]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.640]         }
[09:29:23.640]         base::close(...future.stdout)
[09:29:23.640]         ...future.stdout <- NULL
[09:29:23.640]     }
[09:29:23.640]     ...future.result$conditions <- ...future.conditions
[09:29:23.640]     ...future.result$finished <- base::Sys.time()
[09:29:23.640]     ...future.result
[09:29:23.640] }
[09:29:23.642] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[09:29:23.642] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[09:29:23.643] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[09:29:23.643] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[09:29:23.643] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.643] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[09:29:23.644] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[09:29:23.644] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[09:29:23.644] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[09:29:23.644] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[09:29:23.645] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.645] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[09:29:23.645] MultisessionFuture started
[09:29:23.645] - Launch lazy future ... done
[09:29:23.645] run() for ‘MultisessionFuture’ ... done
[09:29:23.645] Created future:
[09:29:23.646] MultisessionFuture:
[09:29:23.646] Label: ‘future_replicate-2’
[09:29:23.646] Expression:
[09:29:23.646] {
[09:29:23.646]     do.call(function(...) {
[09:29:23.646]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.646]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.646]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.646]             on.exit(options(oopts), add = TRUE)
[09:29:23.646]         }
[09:29:23.646]         {
[09:29:23.646]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.646]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.646]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.646]                   envir = globalenv(), inherits = FALSE)
[09:29:23.646]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.646]             })
[09:29:23.646]         }
[09:29:23.646]     }, args = future.call.arguments)
[09:29:23.646] }
[09:29:23.646] Lazy evaluation: FALSE
[09:29:23.646] Asynchronous evaluation: TRUE
[09:29:23.646] Local evaluation: TRUE
[09:29:23.646] Environment: R_GlobalEnv
[09:29:23.646] Capture standard output: TRUE
[09:29:23.646] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.646] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.646] Packages: <none>
[09:29:23.646] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.646] Resolved: FALSE
[09:29:23.646] Value: <not collected>
[09:29:23.646] Conditions captured: <none>
[09:29:23.646] Early signaling: FALSE
[09:29:23.646] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.646] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.657] Chunk #2 of 2 ... DONE
[09:29:23.657] Launching 2 futures (chunks) ... DONE
[09:29:23.657] Resolving 2 futures (chunks) ...
[09:29:23.657] resolve() on list ...
[09:29:23.657]  recursive: 0
[09:29:23.657]  length: 2
[09:29:23.658] 
[09:29:23.658] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.658] - Validating connection of MultisessionFuture
[09:29:23.658] - received message: FutureResult
[09:29:23.658] - Received FutureResult
[09:29:23.658] - Erased future from FutureRegistry
[09:29:23.659] result() for ClusterFuture ...
[09:29:23.659] - result already collected: FutureResult
[09:29:23.659] result() for ClusterFuture ... done
[09:29:23.659] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.659] Future #1
[09:29:23.659] result() for ClusterFuture ...
[09:29:23.659] - result already collected: FutureResult
[09:29:23.659] result() for ClusterFuture ... done
[09:29:23.659] result() for ClusterFuture ...
[09:29:23.659] - result already collected: FutureResult
[09:29:23.659] result() for ClusterFuture ... done
[09:29:23.660] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:29:23.660] - nx: 2
[09:29:23.660] - relay: TRUE
[09:29:23.660] - stdout: TRUE
[09:29:23.660] - signal: TRUE
[09:29:23.660] - resignal: FALSE
[09:29:23.660] - force: TRUE
[09:29:23.660] - relayed: [n=2] FALSE, FALSE
[09:29:23.660] - queued futures: [n=2] FALSE, FALSE
[09:29:23.660]  - until=1
[09:29:23.660]  - relaying element #1
[09:29:23.661] result() for ClusterFuture ...
[09:29:23.661] - result already collected: FutureResult
[09:29:23.661] result() for ClusterFuture ... done
[09:29:23.661] result() for ClusterFuture ...
[09:29:23.661] - result already collected: FutureResult
[09:29:23.661] result() for ClusterFuture ... done
[09:29:23.661] result() for ClusterFuture ...
[09:29:23.661] - result already collected: FutureResult
[09:29:23.661] result() for ClusterFuture ... done
[09:29:23.661] result() for ClusterFuture ...
[09:29:23.661] - result already collected: FutureResult
[09:29:23.661] result() for ClusterFuture ... done
[09:29:23.662] - relayed: [n=2] TRUE, FALSE
[09:29:23.662] - queued futures: [n=2] TRUE, FALSE
[09:29:23.662] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:29:23.662]  length: 1 (resolved future 1)
[09:29:23.689] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.689] - Validating connection of MultisessionFuture
[09:29:23.690] - received message: FutureResult
[09:29:23.690] - Received FutureResult
[09:29:23.690] - Erased future from FutureRegistry
[09:29:23.690] result() for ClusterFuture ...
[09:29:23.690] - result already collected: FutureResult
[09:29:23.690] result() for ClusterFuture ... done
[09:29:23.690] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.690] Future #2
[09:29:23.690] result() for ClusterFuture ...
[09:29:23.691] - result already collected: FutureResult
[09:29:23.691] result() for ClusterFuture ... done
[09:29:23.691] result() for ClusterFuture ...
[09:29:23.691] - result already collected: FutureResult
[09:29:23.691] result() for ClusterFuture ... done
[09:29:23.691] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:29:23.691] - nx: 2
[09:29:23.691] - relay: TRUE
[09:29:23.691] - stdout: TRUE
[09:29:23.691] - signal: TRUE
[09:29:23.691] - resignal: FALSE
[09:29:23.691] - force: TRUE
[09:29:23.692] - relayed: [n=2] TRUE, FALSE
[09:29:23.692] - queued futures: [n=2] TRUE, FALSE
[09:29:23.692]  - until=2
[09:29:23.692]  - relaying element #2
[09:29:23.692] result() for ClusterFuture ...
[09:29:23.692] - result already collected: FutureResult
[09:29:23.692] result() for ClusterFuture ... done
[09:29:23.692] result() for ClusterFuture ...
[09:29:23.692] - result already collected: FutureResult
[09:29:23.692] result() for ClusterFuture ... done
[09:29:23.692] result() for ClusterFuture ...
[09:29:23.693] - result already collected: FutureResult
[09:29:23.693] result() for ClusterFuture ... done
[09:29:23.693] result() for ClusterFuture ...
[09:29:23.693] - result already collected: FutureResult
[09:29:23.693] result() for ClusterFuture ... done
[09:29:23.693] - relayed: [n=2] TRUE, TRUE
[09:29:23.693] - queued futures: [n=2] TRUE, TRUE
[09:29:23.693] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:29:23.693]  length: 0 (resolved future 2)
[09:29:23.693] Relaying remaining futures
[09:29:23.693] signalConditionsASAP(NULL, pos=0) ...
[09:29:23.693] - nx: 2
[09:29:23.694] - relay: TRUE
[09:29:23.694] - stdout: TRUE
[09:29:23.694] - signal: TRUE
[09:29:23.694] - resignal: FALSE
[09:29:23.694] - force: TRUE
[09:29:23.694] - relayed: [n=2] TRUE, TRUE
[09:29:23.694] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:23.694] - relayed: [n=2] TRUE, TRUE
[09:29:23.694] - queued futures: [n=2] TRUE, TRUE
[09:29:23.694] signalConditionsASAP(NULL, pos=0) ... done
[09:29:23.694] resolve() on list ... DONE
[09:29:23.695] result() for ClusterFuture ...
[09:29:23.695] - result already collected: FutureResult
[09:29:23.695] result() for ClusterFuture ... done
[09:29:23.695] result() for ClusterFuture ...
[09:29:23.695] - result already collected: FutureResult
[09:29:23.695] result() for ClusterFuture ... done
[09:29:23.695] result() for ClusterFuture ...
[09:29:23.695] - result already collected: FutureResult
[09:29:23.695] result() for ClusterFuture ... done
[09:29:23.695] result() for ClusterFuture ...
[09:29:23.695] - result already collected: FutureResult
[09:29:23.695] result() for ClusterFuture ... done
[09:29:23.696]  - Number of value chunks collected: 2
[09:29:23.696] Resolving 2 futures (chunks) ... DONE
[09:29:23.696] Reducing values from 2 chunks ...
[09:29:23.696]  - Number of values collected after concatenation: 5
[09:29:23.696]  - Number of values expected: 5
[09:29:23.696] Reducing values from 2 chunks ... DONE
[09:29:23.696] future_lapply() ... DONE
[09:29:23.696] future_lapply() ...
[09:29:23.697] Generating random seeds ...
[09:29:23.697] Generating random seed streams for 5 elements ...
[09:29:23.697] Generating random seed streams for 5 elements ... DONE
[09:29:23.697] Generating random seeds ... DONE
[09:29:23.697] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:23.701] Number of chunks: 2
[09:29:23.701] getGlobalsAndPackagesXApply() ...
[09:29:23.702]  - future.globals: TRUE
[09:29:23.702] getGlobalsAndPackages() ...
[09:29:23.702] Searching for globals...
[09:29:23.703] - globals found: [2] ‘FUN’, ‘sample’
[09:29:23.703] Searching for globals ... DONE
[09:29:23.703] Resolving globals: FALSE
[09:29:23.704] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:23.704] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:23.704] - globals: [1] ‘FUN’
[09:29:23.704] 
[09:29:23.704] getGlobalsAndPackages() ... DONE
[09:29:23.704]  - globals found/used: [n=1] ‘FUN’
[09:29:23.705]  - needed namespaces: [n=0] 
[09:29:23.705] Finding globals ... DONE
[09:29:23.705]  - use_args: TRUE
[09:29:23.705]  - Getting '...' globals ...
[09:29:23.705] resolve() on list ...
[09:29:23.705]  recursive: 0
[09:29:23.705]  length: 1
[09:29:23.705]  elements: ‘...’
[09:29:23.705]  length: 0 (resolved future 1)
[09:29:23.706] resolve() on list ... DONE
[09:29:23.706]    - '...' content: [n=0] 
[09:29:23.706] List of 1
[09:29:23.706]  $ ...: list()
[09:29:23.706]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.706]  - attr(*, "where")=List of 1
[09:29:23.706]   ..$ ...:<environment: 0x55d1ccc2d858> 
[09:29:23.706]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.706]  - attr(*, "resolved")= logi TRUE
[09:29:23.706]  - attr(*, "total_size")= num NA
[09:29:23.708]  - Getting '...' globals ... DONE
[09:29:23.708] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:23.709] List of 2
[09:29:23.709]  $ ...future.FUN:function (...)  
[09:29:23.709]  $ ...          : list()
[09:29:23.709]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.709]  - attr(*, "where")=List of 2
[09:29:23.709]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:23.709]   ..$ ...          :<environment: 0x55d1ccc2d858> 
[09:29:23.709]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.709]  - attr(*, "resolved")= logi FALSE
[09:29:23.709]  - attr(*, "total_size")= num 616
[09:29:23.711] Packages to be attached in all futures: [n=0] 
[09:29:23.711] getGlobalsAndPackagesXApply() ... DONE
[09:29:23.711] Number of futures (= number of chunks): 2
[09:29:23.711] Launching 2 futures (chunks) ...
[09:29:23.712] Chunk #1 of 2 ...
[09:29:23.712]  - Finding globals in 'X' for chunk #1 ...
[09:29:23.712] getGlobalsAndPackages() ...
[09:29:23.712] Searching for globals...
[09:29:23.713] 
[09:29:23.713] Searching for globals ... DONE
[09:29:23.713] - globals: [0] <none>
[09:29:23.713] getGlobalsAndPackages() ... DONE
[09:29:23.713]    + additional globals found: [n=0] 
[09:29:23.713]    + additional namespaces needed: [n=0] 
[09:29:23.713]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:23.713]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.713]  - seeds: [2] <seeds>
[09:29:23.713]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.713] getGlobalsAndPackages() ...
[09:29:23.714] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.714] Resolving globals: FALSE
[09:29:23.714] Tweak future expression to call with '...' arguments ...
[09:29:23.714] {
[09:29:23.714]     do.call(function(...) {
[09:29:23.714]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.714]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.714]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.714]             on.exit(options(oopts), add = TRUE)
[09:29:23.714]         }
[09:29:23.714]         {
[09:29:23.714]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.714]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.714]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.714]                   envir = globalenv(), inherits = FALSE)
[09:29:23.714]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.714]             })
[09:29:23.714]         }
[09:29:23.714]     }, args = future.call.arguments)
[09:29:23.714] }
[09:29:23.714] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.714] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.715] 
[09:29:23.715] getGlobalsAndPackages() ... DONE
[09:29:23.715] run() for ‘Future’ ...
[09:29:23.715] - state: ‘created’
[09:29:23.715] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.728] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.729] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.729]   - Field: ‘node’
[09:29:23.729]   - Field: ‘label’
[09:29:23.729]   - Field: ‘local’
[09:29:23.729]   - Field: ‘owner’
[09:29:23.729]   - Field: ‘envir’
[09:29:23.729]   - Field: ‘workers’
[09:29:23.729]   - Field: ‘packages’
[09:29:23.729]   - Field: ‘gc’
[09:29:23.729]   - Field: ‘conditions’
[09:29:23.729]   - Field: ‘persistent’
[09:29:23.730]   - Field: ‘expr’
[09:29:23.730]   - Field: ‘uuid’
[09:29:23.730]   - Field: ‘seed’
[09:29:23.730]   - Field: ‘version’
[09:29:23.730]   - Field: ‘result’
[09:29:23.730]   - Field: ‘asynchronous’
[09:29:23.730]   - Field: ‘calls’
[09:29:23.730]   - Field: ‘globals’
[09:29:23.730]   - Field: ‘stdout’
[09:29:23.730]   - Field: ‘earlySignal’
[09:29:23.730]   - Field: ‘lazy’
[09:29:23.730]   - Field: ‘state’
[09:29:23.731] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.731] - Launch lazy future ...
[09:29:23.731] Packages needed by the future expression (n = 0): <none>
[09:29:23.731] Packages needed by future strategies (n = 0): <none>
[09:29:23.731] {
[09:29:23.731]     {
[09:29:23.731]         {
[09:29:23.731]             ...future.startTime <- base::Sys.time()
[09:29:23.731]             {
[09:29:23.731]                 {
[09:29:23.731]                   {
[09:29:23.731]                     {
[09:29:23.731]                       base::local({
[09:29:23.731]                         has_future <- base::requireNamespace("future", 
[09:29:23.731]                           quietly = TRUE)
[09:29:23.731]                         if (has_future) {
[09:29:23.731]                           ns <- base::getNamespace("future")
[09:29:23.731]                           version <- ns[[".package"]][["version"]]
[09:29:23.731]                           if (is.null(version)) 
[09:29:23.731]                             version <- utils::packageVersion("future")
[09:29:23.731]                         }
[09:29:23.731]                         else {
[09:29:23.731]                           version <- NULL
[09:29:23.731]                         }
[09:29:23.731]                         if (!has_future || version < "1.8.0") {
[09:29:23.731]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.731]                             "", base::R.version$version.string), 
[09:29:23.731]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.731]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.731]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.731]                               "release", "version")], collapse = " "), 
[09:29:23.731]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.731]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.731]                             info)
[09:29:23.731]                           info <- base::paste(info, collapse = "; ")
[09:29:23.731]                           if (!has_future) {
[09:29:23.731]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.731]                               info)
[09:29:23.731]                           }
[09:29:23.731]                           else {
[09:29:23.731]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.731]                               info, version)
[09:29:23.731]                           }
[09:29:23.731]                           base::stop(msg)
[09:29:23.731]                         }
[09:29:23.731]                       })
[09:29:23.731]                     }
[09:29:23.731]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.731]                     base::options(mc.cores = 1L)
[09:29:23.731]                   }
[09:29:23.731]                   ...future.strategy.old <- future::plan("list")
[09:29:23.731]                   options(future.plan = NULL)
[09:29:23.731]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.731]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.731]                 }
[09:29:23.731]                 ...future.workdir <- getwd()
[09:29:23.731]             }
[09:29:23.731]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.731]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.731]         }
[09:29:23.731]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.731]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.731]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.731]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.731]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.731]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.731]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.731]             base::names(...future.oldOptions))
[09:29:23.731]     }
[09:29:23.731]     if (FALSE) {
[09:29:23.731]     }
[09:29:23.731]     else {
[09:29:23.731]         if (TRUE) {
[09:29:23.731]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.731]                 open = "w")
[09:29:23.731]         }
[09:29:23.731]         else {
[09:29:23.731]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.731]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.731]         }
[09:29:23.731]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.731]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.731]             base::sink(type = "output", split = FALSE)
[09:29:23.731]             base::close(...future.stdout)
[09:29:23.731]         }, add = TRUE)
[09:29:23.731]     }
[09:29:23.731]     ...future.frame <- base::sys.nframe()
[09:29:23.731]     ...future.conditions <- base::list()
[09:29:23.731]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.731]     if (FALSE) {
[09:29:23.731]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.731]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.731]     }
[09:29:23.731]     ...future.result <- base::tryCatch({
[09:29:23.731]         base::withCallingHandlers({
[09:29:23.731]             ...future.value <- base::withVisible(base::local({
[09:29:23.731]                 ...future.makeSendCondition <- base::local({
[09:29:23.731]                   sendCondition <- NULL
[09:29:23.731]                   function(frame = 1L) {
[09:29:23.731]                     if (is.function(sendCondition)) 
[09:29:23.731]                       return(sendCondition)
[09:29:23.731]                     ns <- getNamespace("parallel")
[09:29:23.731]                     if (exists("sendData", mode = "function", 
[09:29:23.731]                       envir = ns)) {
[09:29:23.731]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.731]                         envir = ns)
[09:29:23.731]                       envir <- sys.frame(frame)
[09:29:23.731]                       master <- NULL
[09:29:23.731]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.731]                         !identical(envir, emptyenv())) {
[09:29:23.731]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.731]                           inherits = FALSE)) {
[09:29:23.731]                           master <- get("master", mode = "list", 
[09:29:23.731]                             envir = envir, inherits = FALSE)
[09:29:23.731]                           if (inherits(master, c("SOCKnode", 
[09:29:23.731]                             "SOCK0node"))) {
[09:29:23.731]                             sendCondition <<- function(cond) {
[09:29:23.731]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.731]                                 success = TRUE)
[09:29:23.731]                               parallel_sendData(master, data)
[09:29:23.731]                             }
[09:29:23.731]                             return(sendCondition)
[09:29:23.731]                           }
[09:29:23.731]                         }
[09:29:23.731]                         frame <- frame + 1L
[09:29:23.731]                         envir <- sys.frame(frame)
[09:29:23.731]                       }
[09:29:23.731]                     }
[09:29:23.731]                     sendCondition <<- function(cond) NULL
[09:29:23.731]                   }
[09:29:23.731]                 })
[09:29:23.731]                 withCallingHandlers({
[09:29:23.731]                   {
[09:29:23.731]                     do.call(function(...) {
[09:29:23.731]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.731]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.731]                         ...future.globals.maxSize)) {
[09:29:23.731]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.731]                         on.exit(options(oopts), add = TRUE)
[09:29:23.731]                       }
[09:29:23.731]                       {
[09:29:23.731]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.731]                           FUN = function(jj) {
[09:29:23.731]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.731]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.731]                               envir = globalenv(), inherits = FALSE)
[09:29:23.731]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.731]                           })
[09:29:23.731]                       }
[09:29:23.731]                     }, args = future.call.arguments)
[09:29:23.731]                   }
[09:29:23.731]                 }, immediateCondition = function(cond) {
[09:29:23.731]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.731]                   sendCondition(cond)
[09:29:23.731]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.731]                   {
[09:29:23.731]                     inherits <- base::inherits
[09:29:23.731]                     invokeRestart <- base::invokeRestart
[09:29:23.731]                     is.null <- base::is.null
[09:29:23.731]                     muffled <- FALSE
[09:29:23.731]                     if (inherits(cond, "message")) {
[09:29:23.731]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.731]                       if (muffled) 
[09:29:23.731]                         invokeRestart("muffleMessage")
[09:29:23.731]                     }
[09:29:23.731]                     else if (inherits(cond, "warning")) {
[09:29:23.731]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.731]                       if (muffled) 
[09:29:23.731]                         invokeRestart("muffleWarning")
[09:29:23.731]                     }
[09:29:23.731]                     else if (inherits(cond, "condition")) {
[09:29:23.731]                       if (!is.null(pattern)) {
[09:29:23.731]                         computeRestarts <- base::computeRestarts
[09:29:23.731]                         grepl <- base::grepl
[09:29:23.731]                         restarts <- computeRestarts(cond)
[09:29:23.731]                         for (restart in restarts) {
[09:29:23.731]                           name <- restart$name
[09:29:23.731]                           if (is.null(name)) 
[09:29:23.731]                             next
[09:29:23.731]                           if (!grepl(pattern, name)) 
[09:29:23.731]                             next
[09:29:23.731]                           invokeRestart(restart)
[09:29:23.731]                           muffled <- TRUE
[09:29:23.731]                           break
[09:29:23.731]                         }
[09:29:23.731]                       }
[09:29:23.731]                     }
[09:29:23.731]                     invisible(muffled)
[09:29:23.731]                   }
[09:29:23.731]                   muffleCondition(cond)
[09:29:23.731]                 })
[09:29:23.731]             }))
[09:29:23.731]             future::FutureResult(value = ...future.value$value, 
[09:29:23.731]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.731]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.731]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.731]                     ...future.globalenv.names))
[09:29:23.731]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.731]         }, condition = base::local({
[09:29:23.731]             c <- base::c
[09:29:23.731]             inherits <- base::inherits
[09:29:23.731]             invokeRestart <- base::invokeRestart
[09:29:23.731]             length <- base::length
[09:29:23.731]             list <- base::list
[09:29:23.731]             seq.int <- base::seq.int
[09:29:23.731]             signalCondition <- base::signalCondition
[09:29:23.731]             sys.calls <- base::sys.calls
[09:29:23.731]             `[[` <- base::`[[`
[09:29:23.731]             `+` <- base::`+`
[09:29:23.731]             `<<-` <- base::`<<-`
[09:29:23.731]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.731]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.731]                   3L)]
[09:29:23.731]             }
[09:29:23.731]             function(cond) {
[09:29:23.731]                 is_error <- inherits(cond, "error")
[09:29:23.731]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.731]                   NULL)
[09:29:23.731]                 if (is_error) {
[09:29:23.731]                   sessionInformation <- function() {
[09:29:23.731]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.731]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.731]                       search = base::search(), system = base::Sys.info())
[09:29:23.731]                   }
[09:29:23.731]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.731]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.731]                     cond$call), session = sessionInformation(), 
[09:29:23.731]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.731]                   signalCondition(cond)
[09:29:23.731]                 }
[09:29:23.731]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.731]                 "immediateCondition"))) {
[09:29:23.731]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.731]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.731]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.731]                   if (TRUE && !signal) {
[09:29:23.731]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.731]                     {
[09:29:23.731]                       inherits <- base::inherits
[09:29:23.731]                       invokeRestart <- base::invokeRestart
[09:29:23.731]                       is.null <- base::is.null
[09:29:23.731]                       muffled <- FALSE
[09:29:23.731]                       if (inherits(cond, "message")) {
[09:29:23.731]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.731]                         if (muffled) 
[09:29:23.731]                           invokeRestart("muffleMessage")
[09:29:23.731]                       }
[09:29:23.731]                       else if (inherits(cond, "warning")) {
[09:29:23.731]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.731]                         if (muffled) 
[09:29:23.731]                           invokeRestart("muffleWarning")
[09:29:23.731]                       }
[09:29:23.731]                       else if (inherits(cond, "condition")) {
[09:29:23.731]                         if (!is.null(pattern)) {
[09:29:23.731]                           computeRestarts <- base::computeRestarts
[09:29:23.731]                           grepl <- base::grepl
[09:29:23.731]                           restarts <- computeRestarts(cond)
[09:29:23.731]                           for (restart in restarts) {
[09:29:23.731]                             name <- restart$name
[09:29:23.731]                             if (is.null(name)) 
[09:29:23.731]                               next
[09:29:23.731]                             if (!grepl(pattern, name)) 
[09:29:23.731]                               next
[09:29:23.731]                             invokeRestart(restart)
[09:29:23.731]                             muffled <- TRUE
[09:29:23.731]                             break
[09:29:23.731]                           }
[09:29:23.731]                         }
[09:29:23.731]                       }
[09:29:23.731]                       invisible(muffled)
[09:29:23.731]                     }
[09:29:23.731]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.731]                   }
[09:29:23.731]                 }
[09:29:23.731]                 else {
[09:29:23.731]                   if (TRUE) {
[09:29:23.731]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.731]                     {
[09:29:23.731]                       inherits <- base::inherits
[09:29:23.731]                       invokeRestart <- base::invokeRestart
[09:29:23.731]                       is.null <- base::is.null
[09:29:23.731]                       muffled <- FALSE
[09:29:23.731]                       if (inherits(cond, "message")) {
[09:29:23.731]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.731]                         if (muffled) 
[09:29:23.731]                           invokeRestart("muffleMessage")
[09:29:23.731]                       }
[09:29:23.731]                       else if (inherits(cond, "warning")) {
[09:29:23.731]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.731]                         if (muffled) 
[09:29:23.731]                           invokeRestart("muffleWarning")
[09:29:23.731]                       }
[09:29:23.731]                       else if (inherits(cond, "condition")) {
[09:29:23.731]                         if (!is.null(pattern)) {
[09:29:23.731]                           computeRestarts <- base::computeRestarts
[09:29:23.731]                           grepl <- base::grepl
[09:29:23.731]                           restarts <- computeRestarts(cond)
[09:29:23.731]                           for (restart in restarts) {
[09:29:23.731]                             name <- restart$name
[09:29:23.731]                             if (is.null(name)) 
[09:29:23.731]                               next
[09:29:23.731]                             if (!grepl(pattern, name)) 
[09:29:23.731]                               next
[09:29:23.731]                             invokeRestart(restart)
[09:29:23.731]                             muffled <- TRUE
[09:29:23.731]                             break
[09:29:23.731]                           }
[09:29:23.731]                         }
[09:29:23.731]                       }
[09:29:23.731]                       invisible(muffled)
[09:29:23.731]                     }
[09:29:23.731]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.731]                   }
[09:29:23.731]                 }
[09:29:23.731]             }
[09:29:23.731]         }))
[09:29:23.731]     }, error = function(ex) {
[09:29:23.731]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.731]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.731]                 ...future.rng), started = ...future.startTime, 
[09:29:23.731]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.731]             version = "1.8"), class = "FutureResult")
[09:29:23.731]     }, finally = {
[09:29:23.731]         if (!identical(...future.workdir, getwd())) 
[09:29:23.731]             setwd(...future.workdir)
[09:29:23.731]         {
[09:29:23.731]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.731]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.731]             }
[09:29:23.731]             base::options(...future.oldOptions)
[09:29:23.731]             if (.Platform$OS.type == "windows") {
[09:29:23.731]                 old_names <- names(...future.oldEnvVars)
[09:29:23.731]                 envs <- base::Sys.getenv()
[09:29:23.731]                 names <- names(envs)
[09:29:23.731]                 common <- intersect(names, old_names)
[09:29:23.731]                 added <- setdiff(names, old_names)
[09:29:23.731]                 removed <- setdiff(old_names, names)
[09:29:23.731]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.731]                   envs[common]]
[09:29:23.731]                 NAMES <- toupper(changed)
[09:29:23.731]                 args <- list()
[09:29:23.731]                 for (kk in seq_along(NAMES)) {
[09:29:23.731]                   name <- changed[[kk]]
[09:29:23.731]                   NAME <- NAMES[[kk]]
[09:29:23.731]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.731]                     next
[09:29:23.731]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.731]                 }
[09:29:23.731]                 NAMES <- toupper(added)
[09:29:23.731]                 for (kk in seq_along(NAMES)) {
[09:29:23.731]                   name <- added[[kk]]
[09:29:23.731]                   NAME <- NAMES[[kk]]
[09:29:23.731]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.731]                     next
[09:29:23.731]                   args[[name]] <- ""
[09:29:23.731]                 }
[09:29:23.731]                 NAMES <- toupper(removed)
[09:29:23.731]                 for (kk in seq_along(NAMES)) {
[09:29:23.731]                   name <- removed[[kk]]
[09:29:23.731]                   NAME <- NAMES[[kk]]
[09:29:23.731]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.731]                     next
[09:29:23.731]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.731]                 }
[09:29:23.731]                 if (length(args) > 0) 
[09:29:23.731]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.731]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.731]             }
[09:29:23.731]             else {
[09:29:23.731]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.731]             }
[09:29:23.731]             {
[09:29:23.731]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.731]                   0L) {
[09:29:23.731]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.731]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.731]                   base::options(opts)
[09:29:23.731]                 }
[09:29:23.731]                 {
[09:29:23.731]                   {
[09:29:23.731]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.731]                     NULL
[09:29:23.731]                   }
[09:29:23.731]                   options(future.plan = NULL)
[09:29:23.731]                   if (is.na(NA_character_)) 
[09:29:23.731]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.731]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.731]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.731]                     .init = FALSE)
[09:29:23.731]                 }
[09:29:23.731]             }
[09:29:23.731]         }
[09:29:23.731]     })
[09:29:23.731]     if (TRUE) {
[09:29:23.731]         base::sink(type = "output", split = FALSE)
[09:29:23.731]         if (TRUE) {
[09:29:23.731]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.731]         }
[09:29:23.731]         else {
[09:29:23.731]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.731]         }
[09:29:23.731]         base::close(...future.stdout)
[09:29:23.731]         ...future.stdout <- NULL
[09:29:23.731]     }
[09:29:23.731]     ...future.result$conditions <- ...future.conditions
[09:29:23.731]     ...future.result$finished <- base::Sys.time()
[09:29:23.731]     ...future.result
[09:29:23.731] }
[09:29:23.734] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[09:29:23.734] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[09:29:23.735] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[09:29:23.735] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[09:29:23.735] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.735] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[09:29:23.736] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[09:29:23.736] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[09:29:23.736] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[09:29:23.736] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[09:29:23.736] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.737] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[09:29:23.737] MultisessionFuture started
[09:29:23.737] - Launch lazy future ... done
[09:29:23.737] run() for ‘MultisessionFuture’ ... done
[09:29:23.737] Created future:
[09:29:23.737] MultisessionFuture:
[09:29:23.737] Label: ‘future_replicate-1’
[09:29:23.737] Expression:
[09:29:23.737] {
[09:29:23.737]     do.call(function(...) {
[09:29:23.737]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.737]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.737]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.737]             on.exit(options(oopts), add = TRUE)
[09:29:23.737]         }
[09:29:23.737]         {
[09:29:23.737]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.737]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.737]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.737]                   envir = globalenv(), inherits = FALSE)
[09:29:23.737]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.737]             })
[09:29:23.737]         }
[09:29:23.737]     }, args = future.call.arguments)
[09:29:23.737] }
[09:29:23.737] Lazy evaluation: FALSE
[09:29:23.737] Asynchronous evaluation: TRUE
[09:29:23.737] Local evaluation: TRUE
[09:29:23.737] Environment: R_GlobalEnv
[09:29:23.737] Capture standard output: TRUE
[09:29:23.737] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.737] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.737] Packages: <none>
[09:29:23.737] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.737] Resolved: FALSE
[09:29:23.737] Value: <not collected>
[09:29:23.737] Conditions captured: <none>
[09:29:23.737] Early signaling: FALSE
[09:29:23.737] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.737] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.749] Chunk #1 of 2 ... DONE
[09:29:23.749] Chunk #2 of 2 ...
[09:29:23.749]  - Finding globals in 'X' for chunk #2 ...
[09:29:23.749] getGlobalsAndPackages() ...
[09:29:23.749] Searching for globals...
[09:29:23.749] 
[09:29:23.750] Searching for globals ... DONE
[09:29:23.750] - globals: [0] <none>
[09:29:23.750] getGlobalsAndPackages() ... DONE
[09:29:23.750]    + additional globals found: [n=0] 
[09:29:23.750]    + additional namespaces needed: [n=0] 
[09:29:23.750]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:23.750]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.750]  - seeds: [3] <seeds>
[09:29:23.750]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.750] getGlobalsAndPackages() ...
[09:29:23.751] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.751] Resolving globals: FALSE
[09:29:23.751] Tweak future expression to call with '...' arguments ...
[09:29:23.751] {
[09:29:23.751]     do.call(function(...) {
[09:29:23.751]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.751]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.751]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.751]             on.exit(options(oopts), add = TRUE)
[09:29:23.751]         }
[09:29:23.751]         {
[09:29:23.751]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.751]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.751]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.751]                   envir = globalenv(), inherits = FALSE)
[09:29:23.751]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.751]             })
[09:29:23.751]         }
[09:29:23.751]     }, args = future.call.arguments)
[09:29:23.751] }
[09:29:23.751] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.751] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.752] 
[09:29:23.752] getGlobalsAndPackages() ... DONE
[09:29:23.752] run() for ‘Future’ ...
[09:29:23.752] - state: ‘created’
[09:29:23.752] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.768] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.768] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.768]   - Field: ‘node’
[09:29:23.768]   - Field: ‘label’
[09:29:23.768]   - Field: ‘local’
[09:29:23.768]   - Field: ‘owner’
[09:29:23.768]   - Field: ‘envir’
[09:29:23.768]   - Field: ‘workers’
[09:29:23.768]   - Field: ‘packages’
[09:29:23.768]   - Field: ‘gc’
[09:29:23.769]   - Field: ‘conditions’
[09:29:23.769]   - Field: ‘persistent’
[09:29:23.769]   - Field: ‘expr’
[09:29:23.769]   - Field: ‘uuid’
[09:29:23.769]   - Field: ‘seed’
[09:29:23.769]   - Field: ‘version’
[09:29:23.769]   - Field: ‘result’
[09:29:23.769]   - Field: ‘asynchronous’
[09:29:23.769]   - Field: ‘calls’
[09:29:23.769]   - Field: ‘globals’
[09:29:23.769]   - Field: ‘stdout’
[09:29:23.769]   - Field: ‘earlySignal’
[09:29:23.770]   - Field: ‘lazy’
[09:29:23.770]   - Field: ‘state’
[09:29:23.770] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.770] - Launch lazy future ...
[09:29:23.770] Packages needed by the future expression (n = 0): <none>
[09:29:23.770] Packages needed by future strategies (n = 0): <none>
[09:29:23.771] {
[09:29:23.771]     {
[09:29:23.771]         {
[09:29:23.771]             ...future.startTime <- base::Sys.time()
[09:29:23.771]             {
[09:29:23.771]                 {
[09:29:23.771]                   {
[09:29:23.771]                     {
[09:29:23.771]                       base::local({
[09:29:23.771]                         has_future <- base::requireNamespace("future", 
[09:29:23.771]                           quietly = TRUE)
[09:29:23.771]                         if (has_future) {
[09:29:23.771]                           ns <- base::getNamespace("future")
[09:29:23.771]                           version <- ns[[".package"]][["version"]]
[09:29:23.771]                           if (is.null(version)) 
[09:29:23.771]                             version <- utils::packageVersion("future")
[09:29:23.771]                         }
[09:29:23.771]                         else {
[09:29:23.771]                           version <- NULL
[09:29:23.771]                         }
[09:29:23.771]                         if (!has_future || version < "1.8.0") {
[09:29:23.771]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.771]                             "", base::R.version$version.string), 
[09:29:23.771]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.771]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.771]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.771]                               "release", "version")], collapse = " "), 
[09:29:23.771]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.771]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.771]                             info)
[09:29:23.771]                           info <- base::paste(info, collapse = "; ")
[09:29:23.771]                           if (!has_future) {
[09:29:23.771]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.771]                               info)
[09:29:23.771]                           }
[09:29:23.771]                           else {
[09:29:23.771]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.771]                               info, version)
[09:29:23.771]                           }
[09:29:23.771]                           base::stop(msg)
[09:29:23.771]                         }
[09:29:23.771]                       })
[09:29:23.771]                     }
[09:29:23.771]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.771]                     base::options(mc.cores = 1L)
[09:29:23.771]                   }
[09:29:23.771]                   ...future.strategy.old <- future::plan("list")
[09:29:23.771]                   options(future.plan = NULL)
[09:29:23.771]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.771]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.771]                 }
[09:29:23.771]                 ...future.workdir <- getwd()
[09:29:23.771]             }
[09:29:23.771]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.771]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.771]         }
[09:29:23.771]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.771]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.771]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.771]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.771]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.771]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.771]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.771]             base::names(...future.oldOptions))
[09:29:23.771]     }
[09:29:23.771]     if (FALSE) {
[09:29:23.771]     }
[09:29:23.771]     else {
[09:29:23.771]         if (TRUE) {
[09:29:23.771]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.771]                 open = "w")
[09:29:23.771]         }
[09:29:23.771]         else {
[09:29:23.771]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.771]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.771]         }
[09:29:23.771]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.771]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.771]             base::sink(type = "output", split = FALSE)
[09:29:23.771]             base::close(...future.stdout)
[09:29:23.771]         }, add = TRUE)
[09:29:23.771]     }
[09:29:23.771]     ...future.frame <- base::sys.nframe()
[09:29:23.771]     ...future.conditions <- base::list()
[09:29:23.771]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.771]     if (FALSE) {
[09:29:23.771]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.771]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.771]     }
[09:29:23.771]     ...future.result <- base::tryCatch({
[09:29:23.771]         base::withCallingHandlers({
[09:29:23.771]             ...future.value <- base::withVisible(base::local({
[09:29:23.771]                 ...future.makeSendCondition <- base::local({
[09:29:23.771]                   sendCondition <- NULL
[09:29:23.771]                   function(frame = 1L) {
[09:29:23.771]                     if (is.function(sendCondition)) 
[09:29:23.771]                       return(sendCondition)
[09:29:23.771]                     ns <- getNamespace("parallel")
[09:29:23.771]                     if (exists("sendData", mode = "function", 
[09:29:23.771]                       envir = ns)) {
[09:29:23.771]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.771]                         envir = ns)
[09:29:23.771]                       envir <- sys.frame(frame)
[09:29:23.771]                       master <- NULL
[09:29:23.771]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.771]                         !identical(envir, emptyenv())) {
[09:29:23.771]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.771]                           inherits = FALSE)) {
[09:29:23.771]                           master <- get("master", mode = "list", 
[09:29:23.771]                             envir = envir, inherits = FALSE)
[09:29:23.771]                           if (inherits(master, c("SOCKnode", 
[09:29:23.771]                             "SOCK0node"))) {
[09:29:23.771]                             sendCondition <<- function(cond) {
[09:29:23.771]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.771]                                 success = TRUE)
[09:29:23.771]                               parallel_sendData(master, data)
[09:29:23.771]                             }
[09:29:23.771]                             return(sendCondition)
[09:29:23.771]                           }
[09:29:23.771]                         }
[09:29:23.771]                         frame <- frame + 1L
[09:29:23.771]                         envir <- sys.frame(frame)
[09:29:23.771]                       }
[09:29:23.771]                     }
[09:29:23.771]                     sendCondition <<- function(cond) NULL
[09:29:23.771]                   }
[09:29:23.771]                 })
[09:29:23.771]                 withCallingHandlers({
[09:29:23.771]                   {
[09:29:23.771]                     do.call(function(...) {
[09:29:23.771]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.771]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.771]                         ...future.globals.maxSize)) {
[09:29:23.771]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.771]                         on.exit(options(oopts), add = TRUE)
[09:29:23.771]                       }
[09:29:23.771]                       {
[09:29:23.771]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.771]                           FUN = function(jj) {
[09:29:23.771]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.771]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.771]                               envir = globalenv(), inherits = FALSE)
[09:29:23.771]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.771]                           })
[09:29:23.771]                       }
[09:29:23.771]                     }, args = future.call.arguments)
[09:29:23.771]                   }
[09:29:23.771]                 }, immediateCondition = function(cond) {
[09:29:23.771]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.771]                   sendCondition(cond)
[09:29:23.771]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.771]                   {
[09:29:23.771]                     inherits <- base::inherits
[09:29:23.771]                     invokeRestart <- base::invokeRestart
[09:29:23.771]                     is.null <- base::is.null
[09:29:23.771]                     muffled <- FALSE
[09:29:23.771]                     if (inherits(cond, "message")) {
[09:29:23.771]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.771]                       if (muffled) 
[09:29:23.771]                         invokeRestart("muffleMessage")
[09:29:23.771]                     }
[09:29:23.771]                     else if (inherits(cond, "warning")) {
[09:29:23.771]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.771]                       if (muffled) 
[09:29:23.771]                         invokeRestart("muffleWarning")
[09:29:23.771]                     }
[09:29:23.771]                     else if (inherits(cond, "condition")) {
[09:29:23.771]                       if (!is.null(pattern)) {
[09:29:23.771]                         computeRestarts <- base::computeRestarts
[09:29:23.771]                         grepl <- base::grepl
[09:29:23.771]                         restarts <- computeRestarts(cond)
[09:29:23.771]                         for (restart in restarts) {
[09:29:23.771]                           name <- restart$name
[09:29:23.771]                           if (is.null(name)) 
[09:29:23.771]                             next
[09:29:23.771]                           if (!grepl(pattern, name)) 
[09:29:23.771]                             next
[09:29:23.771]                           invokeRestart(restart)
[09:29:23.771]                           muffled <- TRUE
[09:29:23.771]                           break
[09:29:23.771]                         }
[09:29:23.771]                       }
[09:29:23.771]                     }
[09:29:23.771]                     invisible(muffled)
[09:29:23.771]                   }
[09:29:23.771]                   muffleCondition(cond)
[09:29:23.771]                 })
[09:29:23.771]             }))
[09:29:23.771]             future::FutureResult(value = ...future.value$value, 
[09:29:23.771]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.771]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.771]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.771]                     ...future.globalenv.names))
[09:29:23.771]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.771]         }, condition = base::local({
[09:29:23.771]             c <- base::c
[09:29:23.771]             inherits <- base::inherits
[09:29:23.771]             invokeRestart <- base::invokeRestart
[09:29:23.771]             length <- base::length
[09:29:23.771]             list <- base::list
[09:29:23.771]             seq.int <- base::seq.int
[09:29:23.771]             signalCondition <- base::signalCondition
[09:29:23.771]             sys.calls <- base::sys.calls
[09:29:23.771]             `[[` <- base::`[[`
[09:29:23.771]             `+` <- base::`+`
[09:29:23.771]             `<<-` <- base::`<<-`
[09:29:23.771]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.771]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.771]                   3L)]
[09:29:23.771]             }
[09:29:23.771]             function(cond) {
[09:29:23.771]                 is_error <- inherits(cond, "error")
[09:29:23.771]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.771]                   NULL)
[09:29:23.771]                 if (is_error) {
[09:29:23.771]                   sessionInformation <- function() {
[09:29:23.771]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.771]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.771]                       search = base::search(), system = base::Sys.info())
[09:29:23.771]                   }
[09:29:23.771]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.771]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.771]                     cond$call), session = sessionInformation(), 
[09:29:23.771]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.771]                   signalCondition(cond)
[09:29:23.771]                 }
[09:29:23.771]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.771]                 "immediateCondition"))) {
[09:29:23.771]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.771]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.771]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.771]                   if (TRUE && !signal) {
[09:29:23.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.771]                     {
[09:29:23.771]                       inherits <- base::inherits
[09:29:23.771]                       invokeRestart <- base::invokeRestart
[09:29:23.771]                       is.null <- base::is.null
[09:29:23.771]                       muffled <- FALSE
[09:29:23.771]                       if (inherits(cond, "message")) {
[09:29:23.771]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.771]                         if (muffled) 
[09:29:23.771]                           invokeRestart("muffleMessage")
[09:29:23.771]                       }
[09:29:23.771]                       else if (inherits(cond, "warning")) {
[09:29:23.771]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.771]                         if (muffled) 
[09:29:23.771]                           invokeRestart("muffleWarning")
[09:29:23.771]                       }
[09:29:23.771]                       else if (inherits(cond, "condition")) {
[09:29:23.771]                         if (!is.null(pattern)) {
[09:29:23.771]                           computeRestarts <- base::computeRestarts
[09:29:23.771]                           grepl <- base::grepl
[09:29:23.771]                           restarts <- computeRestarts(cond)
[09:29:23.771]                           for (restart in restarts) {
[09:29:23.771]                             name <- restart$name
[09:29:23.771]                             if (is.null(name)) 
[09:29:23.771]                               next
[09:29:23.771]                             if (!grepl(pattern, name)) 
[09:29:23.771]                               next
[09:29:23.771]                             invokeRestart(restart)
[09:29:23.771]                             muffled <- TRUE
[09:29:23.771]                             break
[09:29:23.771]                           }
[09:29:23.771]                         }
[09:29:23.771]                       }
[09:29:23.771]                       invisible(muffled)
[09:29:23.771]                     }
[09:29:23.771]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.771]                   }
[09:29:23.771]                 }
[09:29:23.771]                 else {
[09:29:23.771]                   if (TRUE) {
[09:29:23.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.771]                     {
[09:29:23.771]                       inherits <- base::inherits
[09:29:23.771]                       invokeRestart <- base::invokeRestart
[09:29:23.771]                       is.null <- base::is.null
[09:29:23.771]                       muffled <- FALSE
[09:29:23.771]                       if (inherits(cond, "message")) {
[09:29:23.771]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.771]                         if (muffled) 
[09:29:23.771]                           invokeRestart("muffleMessage")
[09:29:23.771]                       }
[09:29:23.771]                       else if (inherits(cond, "warning")) {
[09:29:23.771]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.771]                         if (muffled) 
[09:29:23.771]                           invokeRestart("muffleWarning")
[09:29:23.771]                       }
[09:29:23.771]                       else if (inherits(cond, "condition")) {
[09:29:23.771]                         if (!is.null(pattern)) {
[09:29:23.771]                           computeRestarts <- base::computeRestarts
[09:29:23.771]                           grepl <- base::grepl
[09:29:23.771]                           restarts <- computeRestarts(cond)
[09:29:23.771]                           for (restart in restarts) {
[09:29:23.771]                             name <- restart$name
[09:29:23.771]                             if (is.null(name)) 
[09:29:23.771]                               next
[09:29:23.771]                             if (!grepl(pattern, name)) 
[09:29:23.771]                               next
[09:29:23.771]                             invokeRestart(restart)
[09:29:23.771]                             muffled <- TRUE
[09:29:23.771]                             break
[09:29:23.771]                           }
[09:29:23.771]                         }
[09:29:23.771]                       }
[09:29:23.771]                       invisible(muffled)
[09:29:23.771]                     }
[09:29:23.771]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.771]                   }
[09:29:23.771]                 }
[09:29:23.771]             }
[09:29:23.771]         }))
[09:29:23.771]     }, error = function(ex) {
[09:29:23.771]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.771]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.771]                 ...future.rng), started = ...future.startTime, 
[09:29:23.771]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.771]             version = "1.8"), class = "FutureResult")
[09:29:23.771]     }, finally = {
[09:29:23.771]         if (!identical(...future.workdir, getwd())) 
[09:29:23.771]             setwd(...future.workdir)
[09:29:23.771]         {
[09:29:23.771]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.771]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.771]             }
[09:29:23.771]             base::options(...future.oldOptions)
[09:29:23.771]             if (.Platform$OS.type == "windows") {
[09:29:23.771]                 old_names <- names(...future.oldEnvVars)
[09:29:23.771]                 envs <- base::Sys.getenv()
[09:29:23.771]                 names <- names(envs)
[09:29:23.771]                 common <- intersect(names, old_names)
[09:29:23.771]                 added <- setdiff(names, old_names)
[09:29:23.771]                 removed <- setdiff(old_names, names)
[09:29:23.771]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.771]                   envs[common]]
[09:29:23.771]                 NAMES <- toupper(changed)
[09:29:23.771]                 args <- list()
[09:29:23.771]                 for (kk in seq_along(NAMES)) {
[09:29:23.771]                   name <- changed[[kk]]
[09:29:23.771]                   NAME <- NAMES[[kk]]
[09:29:23.771]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.771]                     next
[09:29:23.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.771]                 }
[09:29:23.771]                 NAMES <- toupper(added)
[09:29:23.771]                 for (kk in seq_along(NAMES)) {
[09:29:23.771]                   name <- added[[kk]]
[09:29:23.771]                   NAME <- NAMES[[kk]]
[09:29:23.771]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.771]                     next
[09:29:23.771]                   args[[name]] <- ""
[09:29:23.771]                 }
[09:29:23.771]                 NAMES <- toupper(removed)
[09:29:23.771]                 for (kk in seq_along(NAMES)) {
[09:29:23.771]                   name <- removed[[kk]]
[09:29:23.771]                   NAME <- NAMES[[kk]]
[09:29:23.771]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.771]                     next
[09:29:23.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.771]                 }
[09:29:23.771]                 if (length(args) > 0) 
[09:29:23.771]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.771]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.771]             }
[09:29:23.771]             else {
[09:29:23.771]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.771]             }
[09:29:23.771]             {
[09:29:23.771]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.771]                   0L) {
[09:29:23.771]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.771]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.771]                   base::options(opts)
[09:29:23.771]                 }
[09:29:23.771]                 {
[09:29:23.771]                   {
[09:29:23.771]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.771]                     NULL
[09:29:23.771]                   }
[09:29:23.771]                   options(future.plan = NULL)
[09:29:23.771]                   if (is.na(NA_character_)) 
[09:29:23.771]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.771]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.771]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.771]                     .init = FALSE)
[09:29:23.771]                 }
[09:29:23.771]             }
[09:29:23.771]         }
[09:29:23.771]     })
[09:29:23.771]     if (TRUE) {
[09:29:23.771]         base::sink(type = "output", split = FALSE)
[09:29:23.771]         if (TRUE) {
[09:29:23.771]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.771]         }
[09:29:23.771]         else {
[09:29:23.771]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.771]         }
[09:29:23.771]         base::close(...future.stdout)
[09:29:23.771]         ...future.stdout <- NULL
[09:29:23.771]     }
[09:29:23.771]     ...future.result$conditions <- ...future.conditions
[09:29:23.771]     ...future.result$finished <- base::Sys.time()
[09:29:23.771]     ...future.result
[09:29:23.771] }
[09:29:23.773] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[09:29:23.773] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[09:29:23.773] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[09:29:23.774] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[09:29:23.774] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.774] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[09:29:23.774] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[09:29:23.775] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[09:29:23.775] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[09:29:23.775] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[09:29:23.775] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.775] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[09:29:23.776] MultisessionFuture started
[09:29:23.776] - Launch lazy future ... done
[09:29:23.776] run() for ‘MultisessionFuture’ ... done
[09:29:23.776] Created future:
[09:29:23.776] MultisessionFuture:
[09:29:23.776] Label: ‘future_replicate-2’
[09:29:23.776] Expression:
[09:29:23.776] {
[09:29:23.776]     do.call(function(...) {
[09:29:23.776]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.776]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.776]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.776]             on.exit(options(oopts), add = TRUE)
[09:29:23.776]         }
[09:29:23.776]         {
[09:29:23.776]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.776]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.776]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.776]                   envir = globalenv(), inherits = FALSE)
[09:29:23.776]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.776]             })
[09:29:23.776]         }
[09:29:23.776]     }, args = future.call.arguments)
[09:29:23.776] }
[09:29:23.776] Lazy evaluation: FALSE
[09:29:23.776] Asynchronous evaluation: TRUE
[09:29:23.776] Local evaluation: TRUE
[09:29:23.776] Environment: R_GlobalEnv
[09:29:23.776] Capture standard output: TRUE
[09:29:23.776] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.776] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.776] Packages: <none>
[09:29:23.776] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.776] Resolved: FALSE
[09:29:23.776] Value: <not collected>
[09:29:23.776] Conditions captured: <none>
[09:29:23.776] Early signaling: FALSE
[09:29:23.776] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.776] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.788] Chunk #2 of 2 ... DONE
[09:29:23.788] Launching 2 futures (chunks) ... DONE
[09:29:23.788] Resolving 2 futures (chunks) ...
[09:29:23.788] resolve() on list ...
[09:29:23.788]  recursive: 0
[09:29:23.788]  length: 2
[09:29:23.788] 
[09:29:23.789] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.789] - Validating connection of MultisessionFuture
[09:29:23.789] - received message: FutureResult
[09:29:23.789] - Received FutureResult
[09:29:23.789] - Erased future from FutureRegistry
[09:29:23.789] result() for ClusterFuture ...
[09:29:23.789] - result already collected: FutureResult
[09:29:23.790] result() for ClusterFuture ... done
[09:29:23.790] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.790] Future #1
[09:29:23.790] result() for ClusterFuture ...
[09:29:23.790] - result already collected: FutureResult
[09:29:23.790] result() for ClusterFuture ... done
[09:29:23.790] result() for ClusterFuture ...
[09:29:23.790] - result already collected: FutureResult
[09:29:23.790] result() for ClusterFuture ... done
[09:29:23.790] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:29:23.790] - nx: 2
[09:29:23.790] - relay: TRUE
[09:29:23.791] - stdout: TRUE
[09:29:23.791] - signal: TRUE
[09:29:23.791] - resignal: FALSE
[09:29:23.791] - force: TRUE
[09:29:23.791] - relayed: [n=2] FALSE, FALSE
[09:29:23.791] - queued futures: [n=2] FALSE, FALSE
[09:29:23.791]  - until=1
[09:29:23.791]  - relaying element #1
[09:29:23.791] result() for ClusterFuture ...
[09:29:23.791] - result already collected: FutureResult
[09:29:23.791] result() for ClusterFuture ... done
[09:29:23.791] result() for ClusterFuture ...
[09:29:23.792] - result already collected: FutureResult
[09:29:23.792] result() for ClusterFuture ... done
[09:29:23.792] result() for ClusterFuture ...
[09:29:23.792] - result already collected: FutureResult
[09:29:23.792] result() for ClusterFuture ... done
[09:29:23.792] result() for ClusterFuture ...
[09:29:23.792] - result already collected: FutureResult
[09:29:23.792] result() for ClusterFuture ... done
[09:29:23.792] - relayed: [n=2] TRUE, FALSE
[09:29:23.792] - queued futures: [n=2] TRUE, FALSE
[09:29:23.792] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:29:23.793]  length: 1 (resolved future 1)
[09:29:23.821] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.821] - Validating connection of MultisessionFuture
[09:29:23.822] - received message: FutureResult
[09:29:23.822] - Received FutureResult
[09:29:23.822] - Erased future from FutureRegistry
[09:29:23.822] result() for ClusterFuture ...
[09:29:23.822] - result already collected: FutureResult
[09:29:23.822] result() for ClusterFuture ... done
[09:29:23.822] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.822] Future #2
[09:29:23.822] result() for ClusterFuture ...
[09:29:23.823] - result already collected: FutureResult
[09:29:23.823] result() for ClusterFuture ... done
[09:29:23.823] result() for ClusterFuture ...
[09:29:23.823] - result already collected: FutureResult
[09:29:23.823] result() for ClusterFuture ... done
[09:29:23.823] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:29:23.823] - nx: 2
[09:29:23.823] - relay: TRUE
[09:29:23.823] - stdout: TRUE
[09:29:23.823] - signal: TRUE
[09:29:23.823] - resignal: FALSE
[09:29:23.823] - force: TRUE
[09:29:23.824] - relayed: [n=2] TRUE, FALSE
[09:29:23.824] - queued futures: [n=2] TRUE, FALSE
[09:29:23.824]  - until=2
[09:29:23.824]  - relaying element #2
[09:29:23.824] result() for ClusterFuture ...
[09:29:23.824] - result already collected: FutureResult
[09:29:23.824] result() for ClusterFuture ... done
[09:29:23.824] result() for ClusterFuture ...
[09:29:23.824] - result already collected: FutureResult
[09:29:23.824] result() for ClusterFuture ... done
[09:29:23.824] result() for ClusterFuture ...
[09:29:23.825] - result already collected: FutureResult
[09:29:23.825] result() for ClusterFuture ... done
[09:29:23.825] result() for ClusterFuture ...
[09:29:23.825] - result already collected: FutureResult
[09:29:23.825] result() for ClusterFuture ... done
[09:29:23.825] - relayed: [n=2] TRUE, TRUE
[09:29:23.825] - queued futures: [n=2] TRUE, TRUE
[09:29:23.825] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:29:23.825]  length: 0 (resolved future 2)
[09:29:23.825] Relaying remaining futures
[09:29:23.825] signalConditionsASAP(NULL, pos=0) ...
[09:29:23.825] - nx: 2
[09:29:23.826] - relay: TRUE
[09:29:23.826] - stdout: TRUE
[09:29:23.826] - signal: TRUE
[09:29:23.826] - resignal: FALSE
[09:29:23.826] - force: TRUE
[09:29:23.826] - relayed: [n=2] TRUE, TRUE
[09:29:23.826] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:23.826] - relayed: [n=2] TRUE, TRUE
[09:29:23.826] - queued futures: [n=2] TRUE, TRUE
[09:29:23.826] signalConditionsASAP(NULL, pos=0) ... done
[09:29:23.826] resolve() on list ... DONE
[09:29:23.827] result() for ClusterFuture ...
[09:29:23.827] - result already collected: FutureResult
[09:29:23.827] result() for ClusterFuture ... done
[09:29:23.827] result() for ClusterFuture ...
[09:29:23.827] - result already collected: FutureResult
[09:29:23.827] result() for ClusterFuture ... done
[09:29:23.827] result() for ClusterFuture ...
[09:29:23.827] - result already collected: FutureResult
[09:29:23.827] result() for ClusterFuture ... done
[09:29:23.827] result() for ClusterFuture ...
[09:29:23.827] - result already collected: FutureResult
[09:29:23.827] result() for ClusterFuture ... done
[09:29:23.828]  - Number of value chunks collected: 2
[09:29:23.828] Resolving 2 futures (chunks) ... DONE
[09:29:23.828] Reducing values from 2 chunks ...
[09:29:23.828]  - Number of values collected after concatenation: 5
[09:29:23.828]  - Number of values expected: 5
[09:29:23.828] Reducing values from 2 chunks ... DONE
[09:29:23.828] future_lapply() ... DONE
[09:29:23.828] future_lapply() ...
[09:29:23.829] Generating random seeds ...
[09:29:23.829] Generating random seed streams for 5 elements ...
[09:29:23.829] Generating random seed streams for 5 elements ... DONE
[09:29:23.829] Generating random seeds ... DONE
[09:29:23.829] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:23.833] Number of chunks: 2
[09:29:23.833] getGlobalsAndPackagesXApply() ...
[09:29:23.833]  - future.globals: TRUE
[09:29:23.833] getGlobalsAndPackages() ...
[09:29:23.833] Searching for globals...
[09:29:23.834] - globals found: [2] ‘FUN’, ‘sample’
[09:29:23.834] Searching for globals ... DONE
[09:29:23.834] Resolving globals: FALSE
[09:29:23.835] The total size of the 1 globals is 616 bytes (616 bytes)
[09:29:23.835] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[09:29:23.835] - globals: [1] ‘FUN’
[09:29:23.835] 
[09:29:23.835] getGlobalsAndPackages() ... DONE
[09:29:23.835]  - globals found/used: [n=1] ‘FUN’
[09:29:23.836]  - needed namespaces: [n=0] 
[09:29:23.836] Finding globals ... DONE
[09:29:23.836]  - use_args: TRUE
[09:29:23.836]  - Getting '...' globals ...
[09:29:23.836] resolve() on list ...
[09:29:23.836]  recursive: 0
[09:29:23.836]  length: 1
[09:29:23.836]  elements: ‘...’
[09:29:23.837]  length: 0 (resolved future 1)
[09:29:23.837] resolve() on list ... DONE
[09:29:23.837]    - '...' content: [n=0] 
[09:29:23.837] List of 1
[09:29:23.837]  $ ...: list()
[09:29:23.837]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.837]  - attr(*, "where")=List of 1
[09:29:23.837]   ..$ ...:<environment: 0x55d1ca0b4bc8> 
[09:29:23.837]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.837]  - attr(*, "resolved")= logi TRUE
[09:29:23.837]  - attr(*, "total_size")= num NA
[09:29:23.839]  - Getting '...' globals ... DONE
[09:29:23.839] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[09:29:23.840] List of 2
[09:29:23.840]  $ ...future.FUN:function (...)  
[09:29:23.840]  $ ...          : list()
[09:29:23.840]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.840]  - attr(*, "where")=List of 2
[09:29:23.840]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:23.840]   ..$ ...          :<environment: 0x55d1ca0b4bc8> 
[09:29:23.840]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.840]  - attr(*, "resolved")= logi FALSE
[09:29:23.840]  - attr(*, "total_size")= num 616
[09:29:23.842] Packages to be attached in all futures: [n=0] 
[09:29:23.842] getGlobalsAndPackagesXApply() ... DONE
[09:29:23.842] Number of futures (= number of chunks): 2
[09:29:23.842] Launching 2 futures (chunks) ...
[09:29:23.843] Chunk #1 of 2 ...
[09:29:23.843]  - Finding globals in 'X' for chunk #1 ...
[09:29:23.843] getGlobalsAndPackages() ...
[09:29:23.843] Searching for globals...
[09:29:23.843] 
[09:29:23.843] Searching for globals ... DONE
[09:29:23.843] - globals: [0] <none>
[09:29:23.843] getGlobalsAndPackages() ... DONE
[09:29:23.843]    + additional globals found: [n=0] 
[09:29:23.844]    + additional namespaces needed: [n=0] 
[09:29:23.844]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:23.844]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.844]  - seeds: [2] <seeds>
[09:29:23.844]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.844] getGlobalsAndPackages() ...
[09:29:23.844] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.844] Resolving globals: FALSE
[09:29:23.844] Tweak future expression to call with '...' arguments ...
[09:29:23.844] {
[09:29:23.844]     do.call(function(...) {
[09:29:23.844]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.844]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.844]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.844]             on.exit(options(oopts), add = TRUE)
[09:29:23.844]         }
[09:29:23.844]         {
[09:29:23.844]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.844]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.844]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.844]                   envir = globalenv(), inherits = FALSE)
[09:29:23.844]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.844]             })
[09:29:23.844]         }
[09:29:23.844]     }, args = future.call.arguments)
[09:29:23.844] }
[09:29:23.845] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.845] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.845] 
[09:29:23.845] getGlobalsAndPackages() ... DONE
[09:29:23.846] run() for ‘Future’ ...
[09:29:23.846] - state: ‘created’
[09:29:23.846] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.859] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.859] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.859]   - Field: ‘node’
[09:29:23.859]   - Field: ‘label’
[09:29:23.859]   - Field: ‘local’
[09:29:23.859]   - Field: ‘owner’
[09:29:23.860]   - Field: ‘envir’
[09:29:23.860]   - Field: ‘workers’
[09:29:23.860]   - Field: ‘packages’
[09:29:23.860]   - Field: ‘gc’
[09:29:23.860]   - Field: ‘conditions’
[09:29:23.860]   - Field: ‘persistent’
[09:29:23.860]   - Field: ‘expr’
[09:29:23.860]   - Field: ‘uuid’
[09:29:23.860]   - Field: ‘seed’
[09:29:23.860]   - Field: ‘version’
[09:29:23.860]   - Field: ‘result’
[09:29:23.861]   - Field: ‘asynchronous’
[09:29:23.861]   - Field: ‘calls’
[09:29:23.861]   - Field: ‘globals’
[09:29:23.861]   - Field: ‘stdout’
[09:29:23.861]   - Field: ‘earlySignal’
[09:29:23.861]   - Field: ‘lazy’
[09:29:23.861]   - Field: ‘state’
[09:29:23.861] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.861] - Launch lazy future ...
[09:29:23.862] Packages needed by the future expression (n = 0): <none>
[09:29:23.862] Packages needed by future strategies (n = 0): <none>
[09:29:23.862] {
[09:29:23.862]     {
[09:29:23.862]         {
[09:29:23.862]             ...future.startTime <- base::Sys.time()
[09:29:23.862]             {
[09:29:23.862]                 {
[09:29:23.862]                   {
[09:29:23.862]                     {
[09:29:23.862]                       base::local({
[09:29:23.862]                         has_future <- base::requireNamespace("future", 
[09:29:23.862]                           quietly = TRUE)
[09:29:23.862]                         if (has_future) {
[09:29:23.862]                           ns <- base::getNamespace("future")
[09:29:23.862]                           version <- ns[[".package"]][["version"]]
[09:29:23.862]                           if (is.null(version)) 
[09:29:23.862]                             version <- utils::packageVersion("future")
[09:29:23.862]                         }
[09:29:23.862]                         else {
[09:29:23.862]                           version <- NULL
[09:29:23.862]                         }
[09:29:23.862]                         if (!has_future || version < "1.8.0") {
[09:29:23.862]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.862]                             "", base::R.version$version.string), 
[09:29:23.862]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.862]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.862]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.862]                               "release", "version")], collapse = " "), 
[09:29:23.862]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.862]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.862]                             info)
[09:29:23.862]                           info <- base::paste(info, collapse = "; ")
[09:29:23.862]                           if (!has_future) {
[09:29:23.862]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.862]                               info)
[09:29:23.862]                           }
[09:29:23.862]                           else {
[09:29:23.862]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.862]                               info, version)
[09:29:23.862]                           }
[09:29:23.862]                           base::stop(msg)
[09:29:23.862]                         }
[09:29:23.862]                       })
[09:29:23.862]                     }
[09:29:23.862]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.862]                     base::options(mc.cores = 1L)
[09:29:23.862]                   }
[09:29:23.862]                   ...future.strategy.old <- future::plan("list")
[09:29:23.862]                   options(future.plan = NULL)
[09:29:23.862]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.862]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.862]                 }
[09:29:23.862]                 ...future.workdir <- getwd()
[09:29:23.862]             }
[09:29:23.862]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.862]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.862]         }
[09:29:23.862]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.862]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.862]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.862]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.862]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.862]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.862]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.862]             base::names(...future.oldOptions))
[09:29:23.862]     }
[09:29:23.862]     if (FALSE) {
[09:29:23.862]     }
[09:29:23.862]     else {
[09:29:23.862]         if (TRUE) {
[09:29:23.862]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.862]                 open = "w")
[09:29:23.862]         }
[09:29:23.862]         else {
[09:29:23.862]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.862]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.862]         }
[09:29:23.862]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.862]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.862]             base::sink(type = "output", split = FALSE)
[09:29:23.862]             base::close(...future.stdout)
[09:29:23.862]         }, add = TRUE)
[09:29:23.862]     }
[09:29:23.862]     ...future.frame <- base::sys.nframe()
[09:29:23.862]     ...future.conditions <- base::list()
[09:29:23.862]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.862]     if (FALSE) {
[09:29:23.862]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.862]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.862]     }
[09:29:23.862]     ...future.result <- base::tryCatch({
[09:29:23.862]         base::withCallingHandlers({
[09:29:23.862]             ...future.value <- base::withVisible(base::local({
[09:29:23.862]                 ...future.makeSendCondition <- base::local({
[09:29:23.862]                   sendCondition <- NULL
[09:29:23.862]                   function(frame = 1L) {
[09:29:23.862]                     if (is.function(sendCondition)) 
[09:29:23.862]                       return(sendCondition)
[09:29:23.862]                     ns <- getNamespace("parallel")
[09:29:23.862]                     if (exists("sendData", mode = "function", 
[09:29:23.862]                       envir = ns)) {
[09:29:23.862]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.862]                         envir = ns)
[09:29:23.862]                       envir <- sys.frame(frame)
[09:29:23.862]                       master <- NULL
[09:29:23.862]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.862]                         !identical(envir, emptyenv())) {
[09:29:23.862]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.862]                           inherits = FALSE)) {
[09:29:23.862]                           master <- get("master", mode = "list", 
[09:29:23.862]                             envir = envir, inherits = FALSE)
[09:29:23.862]                           if (inherits(master, c("SOCKnode", 
[09:29:23.862]                             "SOCK0node"))) {
[09:29:23.862]                             sendCondition <<- function(cond) {
[09:29:23.862]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.862]                                 success = TRUE)
[09:29:23.862]                               parallel_sendData(master, data)
[09:29:23.862]                             }
[09:29:23.862]                             return(sendCondition)
[09:29:23.862]                           }
[09:29:23.862]                         }
[09:29:23.862]                         frame <- frame + 1L
[09:29:23.862]                         envir <- sys.frame(frame)
[09:29:23.862]                       }
[09:29:23.862]                     }
[09:29:23.862]                     sendCondition <<- function(cond) NULL
[09:29:23.862]                   }
[09:29:23.862]                 })
[09:29:23.862]                 withCallingHandlers({
[09:29:23.862]                   {
[09:29:23.862]                     do.call(function(...) {
[09:29:23.862]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.862]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.862]                         ...future.globals.maxSize)) {
[09:29:23.862]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.862]                         on.exit(options(oopts), add = TRUE)
[09:29:23.862]                       }
[09:29:23.862]                       {
[09:29:23.862]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.862]                           FUN = function(jj) {
[09:29:23.862]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.862]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.862]                               envir = globalenv(), inherits = FALSE)
[09:29:23.862]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.862]                           })
[09:29:23.862]                       }
[09:29:23.862]                     }, args = future.call.arguments)
[09:29:23.862]                   }
[09:29:23.862]                 }, immediateCondition = function(cond) {
[09:29:23.862]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.862]                   sendCondition(cond)
[09:29:23.862]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.862]                   {
[09:29:23.862]                     inherits <- base::inherits
[09:29:23.862]                     invokeRestart <- base::invokeRestart
[09:29:23.862]                     is.null <- base::is.null
[09:29:23.862]                     muffled <- FALSE
[09:29:23.862]                     if (inherits(cond, "message")) {
[09:29:23.862]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.862]                       if (muffled) 
[09:29:23.862]                         invokeRestart("muffleMessage")
[09:29:23.862]                     }
[09:29:23.862]                     else if (inherits(cond, "warning")) {
[09:29:23.862]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.862]                       if (muffled) 
[09:29:23.862]                         invokeRestart("muffleWarning")
[09:29:23.862]                     }
[09:29:23.862]                     else if (inherits(cond, "condition")) {
[09:29:23.862]                       if (!is.null(pattern)) {
[09:29:23.862]                         computeRestarts <- base::computeRestarts
[09:29:23.862]                         grepl <- base::grepl
[09:29:23.862]                         restarts <- computeRestarts(cond)
[09:29:23.862]                         for (restart in restarts) {
[09:29:23.862]                           name <- restart$name
[09:29:23.862]                           if (is.null(name)) 
[09:29:23.862]                             next
[09:29:23.862]                           if (!grepl(pattern, name)) 
[09:29:23.862]                             next
[09:29:23.862]                           invokeRestart(restart)
[09:29:23.862]                           muffled <- TRUE
[09:29:23.862]                           break
[09:29:23.862]                         }
[09:29:23.862]                       }
[09:29:23.862]                     }
[09:29:23.862]                     invisible(muffled)
[09:29:23.862]                   }
[09:29:23.862]                   muffleCondition(cond)
[09:29:23.862]                 })
[09:29:23.862]             }))
[09:29:23.862]             future::FutureResult(value = ...future.value$value, 
[09:29:23.862]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.862]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.862]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.862]                     ...future.globalenv.names))
[09:29:23.862]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.862]         }, condition = base::local({
[09:29:23.862]             c <- base::c
[09:29:23.862]             inherits <- base::inherits
[09:29:23.862]             invokeRestart <- base::invokeRestart
[09:29:23.862]             length <- base::length
[09:29:23.862]             list <- base::list
[09:29:23.862]             seq.int <- base::seq.int
[09:29:23.862]             signalCondition <- base::signalCondition
[09:29:23.862]             sys.calls <- base::sys.calls
[09:29:23.862]             `[[` <- base::`[[`
[09:29:23.862]             `+` <- base::`+`
[09:29:23.862]             `<<-` <- base::`<<-`
[09:29:23.862]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.862]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.862]                   3L)]
[09:29:23.862]             }
[09:29:23.862]             function(cond) {
[09:29:23.862]                 is_error <- inherits(cond, "error")
[09:29:23.862]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.862]                   NULL)
[09:29:23.862]                 if (is_error) {
[09:29:23.862]                   sessionInformation <- function() {
[09:29:23.862]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.862]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.862]                       search = base::search(), system = base::Sys.info())
[09:29:23.862]                   }
[09:29:23.862]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.862]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.862]                     cond$call), session = sessionInformation(), 
[09:29:23.862]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.862]                   signalCondition(cond)
[09:29:23.862]                 }
[09:29:23.862]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.862]                 "immediateCondition"))) {
[09:29:23.862]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.862]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.862]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.862]                   if (TRUE && !signal) {
[09:29:23.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.862]                     {
[09:29:23.862]                       inherits <- base::inherits
[09:29:23.862]                       invokeRestart <- base::invokeRestart
[09:29:23.862]                       is.null <- base::is.null
[09:29:23.862]                       muffled <- FALSE
[09:29:23.862]                       if (inherits(cond, "message")) {
[09:29:23.862]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.862]                         if (muffled) 
[09:29:23.862]                           invokeRestart("muffleMessage")
[09:29:23.862]                       }
[09:29:23.862]                       else if (inherits(cond, "warning")) {
[09:29:23.862]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.862]                         if (muffled) 
[09:29:23.862]                           invokeRestart("muffleWarning")
[09:29:23.862]                       }
[09:29:23.862]                       else if (inherits(cond, "condition")) {
[09:29:23.862]                         if (!is.null(pattern)) {
[09:29:23.862]                           computeRestarts <- base::computeRestarts
[09:29:23.862]                           grepl <- base::grepl
[09:29:23.862]                           restarts <- computeRestarts(cond)
[09:29:23.862]                           for (restart in restarts) {
[09:29:23.862]                             name <- restart$name
[09:29:23.862]                             if (is.null(name)) 
[09:29:23.862]                               next
[09:29:23.862]                             if (!grepl(pattern, name)) 
[09:29:23.862]                               next
[09:29:23.862]                             invokeRestart(restart)
[09:29:23.862]                             muffled <- TRUE
[09:29:23.862]                             break
[09:29:23.862]                           }
[09:29:23.862]                         }
[09:29:23.862]                       }
[09:29:23.862]                       invisible(muffled)
[09:29:23.862]                     }
[09:29:23.862]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.862]                   }
[09:29:23.862]                 }
[09:29:23.862]                 else {
[09:29:23.862]                   if (TRUE) {
[09:29:23.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.862]                     {
[09:29:23.862]                       inherits <- base::inherits
[09:29:23.862]                       invokeRestart <- base::invokeRestart
[09:29:23.862]                       is.null <- base::is.null
[09:29:23.862]                       muffled <- FALSE
[09:29:23.862]                       if (inherits(cond, "message")) {
[09:29:23.862]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.862]                         if (muffled) 
[09:29:23.862]                           invokeRestart("muffleMessage")
[09:29:23.862]                       }
[09:29:23.862]                       else if (inherits(cond, "warning")) {
[09:29:23.862]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.862]                         if (muffled) 
[09:29:23.862]                           invokeRestart("muffleWarning")
[09:29:23.862]                       }
[09:29:23.862]                       else if (inherits(cond, "condition")) {
[09:29:23.862]                         if (!is.null(pattern)) {
[09:29:23.862]                           computeRestarts <- base::computeRestarts
[09:29:23.862]                           grepl <- base::grepl
[09:29:23.862]                           restarts <- computeRestarts(cond)
[09:29:23.862]                           for (restart in restarts) {
[09:29:23.862]                             name <- restart$name
[09:29:23.862]                             if (is.null(name)) 
[09:29:23.862]                               next
[09:29:23.862]                             if (!grepl(pattern, name)) 
[09:29:23.862]                               next
[09:29:23.862]                             invokeRestart(restart)
[09:29:23.862]                             muffled <- TRUE
[09:29:23.862]                             break
[09:29:23.862]                           }
[09:29:23.862]                         }
[09:29:23.862]                       }
[09:29:23.862]                       invisible(muffled)
[09:29:23.862]                     }
[09:29:23.862]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.862]                   }
[09:29:23.862]                 }
[09:29:23.862]             }
[09:29:23.862]         }))
[09:29:23.862]     }, error = function(ex) {
[09:29:23.862]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.862]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.862]                 ...future.rng), started = ...future.startTime, 
[09:29:23.862]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.862]             version = "1.8"), class = "FutureResult")
[09:29:23.862]     }, finally = {
[09:29:23.862]         if (!identical(...future.workdir, getwd())) 
[09:29:23.862]             setwd(...future.workdir)
[09:29:23.862]         {
[09:29:23.862]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.862]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.862]             }
[09:29:23.862]             base::options(...future.oldOptions)
[09:29:23.862]             if (.Platform$OS.type == "windows") {
[09:29:23.862]                 old_names <- names(...future.oldEnvVars)
[09:29:23.862]                 envs <- base::Sys.getenv()
[09:29:23.862]                 names <- names(envs)
[09:29:23.862]                 common <- intersect(names, old_names)
[09:29:23.862]                 added <- setdiff(names, old_names)
[09:29:23.862]                 removed <- setdiff(old_names, names)
[09:29:23.862]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.862]                   envs[common]]
[09:29:23.862]                 NAMES <- toupper(changed)
[09:29:23.862]                 args <- list()
[09:29:23.862]                 for (kk in seq_along(NAMES)) {
[09:29:23.862]                   name <- changed[[kk]]
[09:29:23.862]                   NAME <- NAMES[[kk]]
[09:29:23.862]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.862]                     next
[09:29:23.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.862]                 }
[09:29:23.862]                 NAMES <- toupper(added)
[09:29:23.862]                 for (kk in seq_along(NAMES)) {
[09:29:23.862]                   name <- added[[kk]]
[09:29:23.862]                   NAME <- NAMES[[kk]]
[09:29:23.862]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.862]                     next
[09:29:23.862]                   args[[name]] <- ""
[09:29:23.862]                 }
[09:29:23.862]                 NAMES <- toupper(removed)
[09:29:23.862]                 for (kk in seq_along(NAMES)) {
[09:29:23.862]                   name <- removed[[kk]]
[09:29:23.862]                   NAME <- NAMES[[kk]]
[09:29:23.862]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.862]                     next
[09:29:23.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.862]                 }
[09:29:23.862]                 if (length(args) > 0) 
[09:29:23.862]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.862]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.862]             }
[09:29:23.862]             else {
[09:29:23.862]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.862]             }
[09:29:23.862]             {
[09:29:23.862]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.862]                   0L) {
[09:29:23.862]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.862]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.862]                   base::options(opts)
[09:29:23.862]                 }
[09:29:23.862]                 {
[09:29:23.862]                   {
[09:29:23.862]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.862]                     NULL
[09:29:23.862]                   }
[09:29:23.862]                   options(future.plan = NULL)
[09:29:23.862]                   if (is.na(NA_character_)) 
[09:29:23.862]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.862]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.862]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.862]                     .init = FALSE)
[09:29:23.862]                 }
[09:29:23.862]             }
[09:29:23.862]         }
[09:29:23.862]     })
[09:29:23.862]     if (TRUE) {
[09:29:23.862]         base::sink(type = "output", split = FALSE)
[09:29:23.862]         if (TRUE) {
[09:29:23.862]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.862]         }
[09:29:23.862]         else {
[09:29:23.862]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.862]         }
[09:29:23.862]         base::close(...future.stdout)
[09:29:23.862]         ...future.stdout <- NULL
[09:29:23.862]     }
[09:29:23.862]     ...future.result$conditions <- ...future.conditions
[09:29:23.862]     ...future.result$finished <- base::Sys.time()
[09:29:23.862]     ...future.result
[09:29:23.862] }
[09:29:23.865] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[09:29:23.865] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[09:29:23.865] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[09:29:23.865] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[09:29:23.866] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.866] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[09:29:23.866] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[09:29:23.866] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[09:29:23.866] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[09:29:23.866] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[09:29:23.867] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[09:29:23.867] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[09:29:23.867] MultisessionFuture started
[09:29:23.867] - Launch lazy future ... done
[09:29:23.867] run() for ‘MultisessionFuture’ ... done
[09:29:23.868] Created future:
[09:29:23.868] MultisessionFuture:
[09:29:23.868] Label: ‘future_replicate-1’
[09:29:23.868] Expression:
[09:29:23.868] {
[09:29:23.868]     do.call(function(...) {
[09:29:23.868]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.868]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.868]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.868]             on.exit(options(oopts), add = TRUE)
[09:29:23.868]         }
[09:29:23.868]         {
[09:29:23.868]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.868]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.868]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.868]                   envir = globalenv(), inherits = FALSE)
[09:29:23.868]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.868]             })
[09:29:23.868]         }
[09:29:23.868]     }, args = future.call.arguments)
[09:29:23.868] }
[09:29:23.868] Lazy evaluation: FALSE
[09:29:23.868] Asynchronous evaluation: TRUE
[09:29:23.868] Local evaluation: TRUE
[09:29:23.868] Environment: R_GlobalEnv
[09:29:23.868] Capture standard output: TRUE
[09:29:23.868] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.868] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.868] Packages: <none>
[09:29:23.868] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.868] Resolved: FALSE
[09:29:23.868] Value: <not collected>
[09:29:23.868] Conditions captured: <none>
[09:29:23.868] Early signaling: FALSE
[09:29:23.868] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.868] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.879] Chunk #1 of 2 ... DONE
[09:29:23.879] Chunk #2 of 2 ...
[09:29:23.879]  - Finding globals in 'X' for chunk #2 ...
[09:29:23.880] getGlobalsAndPackages() ...
[09:29:23.880] Searching for globals...
[09:29:23.880] 
[09:29:23.880] Searching for globals ... DONE
[09:29:23.880] - globals: [0] <none>
[09:29:23.880] getGlobalsAndPackages() ... DONE
[09:29:23.880]    + additional globals found: [n=0] 
[09:29:23.880]    + additional namespaces needed: [n=0] 
[09:29:23.880]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:23.881]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.881]  - seeds: [3] <seeds>
[09:29:23.881]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.881] getGlobalsAndPackages() ...
[09:29:23.881] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.881] Resolving globals: FALSE
[09:29:23.881] Tweak future expression to call with '...' arguments ...
[09:29:23.881] {
[09:29:23.881]     do.call(function(...) {
[09:29:23.881]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.881]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.881]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.881]             on.exit(options(oopts), add = TRUE)
[09:29:23.881]         }
[09:29:23.881]         {
[09:29:23.881]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.881]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.881]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.881]                   envir = globalenv(), inherits = FALSE)
[09:29:23.881]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.881]             })
[09:29:23.881]         }
[09:29:23.881]     }, args = future.call.arguments)
[09:29:23.881] }
[09:29:23.881] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.882] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.882] 
[09:29:23.882] getGlobalsAndPackages() ... DONE
[09:29:23.882] run() for ‘Future’ ...
[09:29:23.882] - state: ‘created’
[09:29:23.882] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.896] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.896] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.896]   - Field: ‘node’
[09:29:23.896]   - Field: ‘label’
[09:29:23.896]   - Field: ‘local’
[09:29:23.896]   - Field: ‘owner’
[09:29:23.896]   - Field: ‘envir’
[09:29:23.896]   - Field: ‘workers’
[09:29:23.896]   - Field: ‘packages’
[09:29:23.897]   - Field: ‘gc’
[09:29:23.897]   - Field: ‘conditions’
[09:29:23.897]   - Field: ‘persistent’
[09:29:23.897]   - Field: ‘expr’
[09:29:23.897]   - Field: ‘uuid’
[09:29:23.897]   - Field: ‘seed’
[09:29:23.897]   - Field: ‘version’
[09:29:23.897]   - Field: ‘result’
[09:29:23.897]   - Field: ‘asynchronous’
[09:29:23.897]   - Field: ‘calls’
[09:29:23.897]   - Field: ‘globals’
[09:29:23.897]   - Field: ‘stdout’
[09:29:23.898]   - Field: ‘earlySignal’
[09:29:23.898]   - Field: ‘lazy’
[09:29:23.898]   - Field: ‘state’
[09:29:23.898] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.898] - Launch lazy future ...
[09:29:23.898] Packages needed by the future expression (n = 0): <none>
[09:29:23.898] Packages needed by future strategies (n = 0): <none>
[09:29:23.899] {
[09:29:23.899]     {
[09:29:23.899]         {
[09:29:23.899]             ...future.startTime <- base::Sys.time()
[09:29:23.899]             {
[09:29:23.899]                 {
[09:29:23.899]                   {
[09:29:23.899]                     {
[09:29:23.899]                       base::local({
[09:29:23.899]                         has_future <- base::requireNamespace("future", 
[09:29:23.899]                           quietly = TRUE)
[09:29:23.899]                         if (has_future) {
[09:29:23.899]                           ns <- base::getNamespace("future")
[09:29:23.899]                           version <- ns[[".package"]][["version"]]
[09:29:23.899]                           if (is.null(version)) 
[09:29:23.899]                             version <- utils::packageVersion("future")
[09:29:23.899]                         }
[09:29:23.899]                         else {
[09:29:23.899]                           version <- NULL
[09:29:23.899]                         }
[09:29:23.899]                         if (!has_future || version < "1.8.0") {
[09:29:23.899]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.899]                             "", base::R.version$version.string), 
[09:29:23.899]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.899]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.899]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.899]                               "release", "version")], collapse = " "), 
[09:29:23.899]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.899]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.899]                             info)
[09:29:23.899]                           info <- base::paste(info, collapse = "; ")
[09:29:23.899]                           if (!has_future) {
[09:29:23.899]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.899]                               info)
[09:29:23.899]                           }
[09:29:23.899]                           else {
[09:29:23.899]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.899]                               info, version)
[09:29:23.899]                           }
[09:29:23.899]                           base::stop(msg)
[09:29:23.899]                         }
[09:29:23.899]                       })
[09:29:23.899]                     }
[09:29:23.899]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.899]                     base::options(mc.cores = 1L)
[09:29:23.899]                   }
[09:29:23.899]                   ...future.strategy.old <- future::plan("list")
[09:29:23.899]                   options(future.plan = NULL)
[09:29:23.899]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.899]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.899]                 }
[09:29:23.899]                 ...future.workdir <- getwd()
[09:29:23.899]             }
[09:29:23.899]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.899]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.899]         }
[09:29:23.899]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.899]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.899]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.899]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.899]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.899]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.899]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.899]             base::names(...future.oldOptions))
[09:29:23.899]     }
[09:29:23.899]     if (FALSE) {
[09:29:23.899]     }
[09:29:23.899]     else {
[09:29:23.899]         if (TRUE) {
[09:29:23.899]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.899]                 open = "w")
[09:29:23.899]         }
[09:29:23.899]         else {
[09:29:23.899]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.899]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.899]         }
[09:29:23.899]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.899]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.899]             base::sink(type = "output", split = FALSE)
[09:29:23.899]             base::close(...future.stdout)
[09:29:23.899]         }, add = TRUE)
[09:29:23.899]     }
[09:29:23.899]     ...future.frame <- base::sys.nframe()
[09:29:23.899]     ...future.conditions <- base::list()
[09:29:23.899]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.899]     if (FALSE) {
[09:29:23.899]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.899]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.899]     }
[09:29:23.899]     ...future.result <- base::tryCatch({
[09:29:23.899]         base::withCallingHandlers({
[09:29:23.899]             ...future.value <- base::withVisible(base::local({
[09:29:23.899]                 ...future.makeSendCondition <- base::local({
[09:29:23.899]                   sendCondition <- NULL
[09:29:23.899]                   function(frame = 1L) {
[09:29:23.899]                     if (is.function(sendCondition)) 
[09:29:23.899]                       return(sendCondition)
[09:29:23.899]                     ns <- getNamespace("parallel")
[09:29:23.899]                     if (exists("sendData", mode = "function", 
[09:29:23.899]                       envir = ns)) {
[09:29:23.899]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.899]                         envir = ns)
[09:29:23.899]                       envir <- sys.frame(frame)
[09:29:23.899]                       master <- NULL
[09:29:23.899]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.899]                         !identical(envir, emptyenv())) {
[09:29:23.899]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.899]                           inherits = FALSE)) {
[09:29:23.899]                           master <- get("master", mode = "list", 
[09:29:23.899]                             envir = envir, inherits = FALSE)
[09:29:23.899]                           if (inherits(master, c("SOCKnode", 
[09:29:23.899]                             "SOCK0node"))) {
[09:29:23.899]                             sendCondition <<- function(cond) {
[09:29:23.899]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.899]                                 success = TRUE)
[09:29:23.899]                               parallel_sendData(master, data)
[09:29:23.899]                             }
[09:29:23.899]                             return(sendCondition)
[09:29:23.899]                           }
[09:29:23.899]                         }
[09:29:23.899]                         frame <- frame + 1L
[09:29:23.899]                         envir <- sys.frame(frame)
[09:29:23.899]                       }
[09:29:23.899]                     }
[09:29:23.899]                     sendCondition <<- function(cond) NULL
[09:29:23.899]                   }
[09:29:23.899]                 })
[09:29:23.899]                 withCallingHandlers({
[09:29:23.899]                   {
[09:29:23.899]                     do.call(function(...) {
[09:29:23.899]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.899]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.899]                         ...future.globals.maxSize)) {
[09:29:23.899]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.899]                         on.exit(options(oopts), add = TRUE)
[09:29:23.899]                       }
[09:29:23.899]                       {
[09:29:23.899]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.899]                           FUN = function(jj) {
[09:29:23.899]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.899]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.899]                               envir = globalenv(), inherits = FALSE)
[09:29:23.899]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.899]                           })
[09:29:23.899]                       }
[09:29:23.899]                     }, args = future.call.arguments)
[09:29:23.899]                   }
[09:29:23.899]                 }, immediateCondition = function(cond) {
[09:29:23.899]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.899]                   sendCondition(cond)
[09:29:23.899]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.899]                   {
[09:29:23.899]                     inherits <- base::inherits
[09:29:23.899]                     invokeRestart <- base::invokeRestart
[09:29:23.899]                     is.null <- base::is.null
[09:29:23.899]                     muffled <- FALSE
[09:29:23.899]                     if (inherits(cond, "message")) {
[09:29:23.899]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.899]                       if (muffled) 
[09:29:23.899]                         invokeRestart("muffleMessage")
[09:29:23.899]                     }
[09:29:23.899]                     else if (inherits(cond, "warning")) {
[09:29:23.899]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.899]                       if (muffled) 
[09:29:23.899]                         invokeRestart("muffleWarning")
[09:29:23.899]                     }
[09:29:23.899]                     else if (inherits(cond, "condition")) {
[09:29:23.899]                       if (!is.null(pattern)) {
[09:29:23.899]                         computeRestarts <- base::computeRestarts
[09:29:23.899]                         grepl <- base::grepl
[09:29:23.899]                         restarts <- computeRestarts(cond)
[09:29:23.899]                         for (restart in restarts) {
[09:29:23.899]                           name <- restart$name
[09:29:23.899]                           if (is.null(name)) 
[09:29:23.899]                             next
[09:29:23.899]                           if (!grepl(pattern, name)) 
[09:29:23.899]                             next
[09:29:23.899]                           invokeRestart(restart)
[09:29:23.899]                           muffled <- TRUE
[09:29:23.899]                           break
[09:29:23.899]                         }
[09:29:23.899]                       }
[09:29:23.899]                     }
[09:29:23.899]                     invisible(muffled)
[09:29:23.899]                   }
[09:29:23.899]                   muffleCondition(cond)
[09:29:23.899]                 })
[09:29:23.899]             }))
[09:29:23.899]             future::FutureResult(value = ...future.value$value, 
[09:29:23.899]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.899]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.899]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.899]                     ...future.globalenv.names))
[09:29:23.899]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.899]         }, condition = base::local({
[09:29:23.899]             c <- base::c
[09:29:23.899]             inherits <- base::inherits
[09:29:23.899]             invokeRestart <- base::invokeRestart
[09:29:23.899]             length <- base::length
[09:29:23.899]             list <- base::list
[09:29:23.899]             seq.int <- base::seq.int
[09:29:23.899]             signalCondition <- base::signalCondition
[09:29:23.899]             sys.calls <- base::sys.calls
[09:29:23.899]             `[[` <- base::`[[`
[09:29:23.899]             `+` <- base::`+`
[09:29:23.899]             `<<-` <- base::`<<-`
[09:29:23.899]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.899]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.899]                   3L)]
[09:29:23.899]             }
[09:29:23.899]             function(cond) {
[09:29:23.899]                 is_error <- inherits(cond, "error")
[09:29:23.899]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.899]                   NULL)
[09:29:23.899]                 if (is_error) {
[09:29:23.899]                   sessionInformation <- function() {
[09:29:23.899]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.899]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.899]                       search = base::search(), system = base::Sys.info())
[09:29:23.899]                   }
[09:29:23.899]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.899]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.899]                     cond$call), session = sessionInformation(), 
[09:29:23.899]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.899]                   signalCondition(cond)
[09:29:23.899]                 }
[09:29:23.899]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.899]                 "immediateCondition"))) {
[09:29:23.899]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.899]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.899]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.899]                   if (TRUE && !signal) {
[09:29:23.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.899]                     {
[09:29:23.899]                       inherits <- base::inherits
[09:29:23.899]                       invokeRestart <- base::invokeRestart
[09:29:23.899]                       is.null <- base::is.null
[09:29:23.899]                       muffled <- FALSE
[09:29:23.899]                       if (inherits(cond, "message")) {
[09:29:23.899]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.899]                         if (muffled) 
[09:29:23.899]                           invokeRestart("muffleMessage")
[09:29:23.899]                       }
[09:29:23.899]                       else if (inherits(cond, "warning")) {
[09:29:23.899]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.899]                         if (muffled) 
[09:29:23.899]                           invokeRestart("muffleWarning")
[09:29:23.899]                       }
[09:29:23.899]                       else if (inherits(cond, "condition")) {
[09:29:23.899]                         if (!is.null(pattern)) {
[09:29:23.899]                           computeRestarts <- base::computeRestarts
[09:29:23.899]                           grepl <- base::grepl
[09:29:23.899]                           restarts <- computeRestarts(cond)
[09:29:23.899]                           for (restart in restarts) {
[09:29:23.899]                             name <- restart$name
[09:29:23.899]                             if (is.null(name)) 
[09:29:23.899]                               next
[09:29:23.899]                             if (!grepl(pattern, name)) 
[09:29:23.899]                               next
[09:29:23.899]                             invokeRestart(restart)
[09:29:23.899]                             muffled <- TRUE
[09:29:23.899]                             break
[09:29:23.899]                           }
[09:29:23.899]                         }
[09:29:23.899]                       }
[09:29:23.899]                       invisible(muffled)
[09:29:23.899]                     }
[09:29:23.899]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.899]                   }
[09:29:23.899]                 }
[09:29:23.899]                 else {
[09:29:23.899]                   if (TRUE) {
[09:29:23.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.899]                     {
[09:29:23.899]                       inherits <- base::inherits
[09:29:23.899]                       invokeRestart <- base::invokeRestart
[09:29:23.899]                       is.null <- base::is.null
[09:29:23.899]                       muffled <- FALSE
[09:29:23.899]                       if (inherits(cond, "message")) {
[09:29:23.899]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.899]                         if (muffled) 
[09:29:23.899]                           invokeRestart("muffleMessage")
[09:29:23.899]                       }
[09:29:23.899]                       else if (inherits(cond, "warning")) {
[09:29:23.899]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.899]                         if (muffled) 
[09:29:23.899]                           invokeRestart("muffleWarning")
[09:29:23.899]                       }
[09:29:23.899]                       else if (inherits(cond, "condition")) {
[09:29:23.899]                         if (!is.null(pattern)) {
[09:29:23.899]                           computeRestarts <- base::computeRestarts
[09:29:23.899]                           grepl <- base::grepl
[09:29:23.899]                           restarts <- computeRestarts(cond)
[09:29:23.899]                           for (restart in restarts) {
[09:29:23.899]                             name <- restart$name
[09:29:23.899]                             if (is.null(name)) 
[09:29:23.899]                               next
[09:29:23.899]                             if (!grepl(pattern, name)) 
[09:29:23.899]                               next
[09:29:23.899]                             invokeRestart(restart)
[09:29:23.899]                             muffled <- TRUE
[09:29:23.899]                             break
[09:29:23.899]                           }
[09:29:23.899]                         }
[09:29:23.899]                       }
[09:29:23.899]                       invisible(muffled)
[09:29:23.899]                     }
[09:29:23.899]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.899]                   }
[09:29:23.899]                 }
[09:29:23.899]             }
[09:29:23.899]         }))
[09:29:23.899]     }, error = function(ex) {
[09:29:23.899]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.899]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.899]                 ...future.rng), started = ...future.startTime, 
[09:29:23.899]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.899]             version = "1.8"), class = "FutureResult")
[09:29:23.899]     }, finally = {
[09:29:23.899]         if (!identical(...future.workdir, getwd())) 
[09:29:23.899]             setwd(...future.workdir)
[09:29:23.899]         {
[09:29:23.899]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.899]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.899]             }
[09:29:23.899]             base::options(...future.oldOptions)
[09:29:23.899]             if (.Platform$OS.type == "windows") {
[09:29:23.899]                 old_names <- names(...future.oldEnvVars)
[09:29:23.899]                 envs <- base::Sys.getenv()
[09:29:23.899]                 names <- names(envs)
[09:29:23.899]                 common <- intersect(names, old_names)
[09:29:23.899]                 added <- setdiff(names, old_names)
[09:29:23.899]                 removed <- setdiff(old_names, names)
[09:29:23.899]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.899]                   envs[common]]
[09:29:23.899]                 NAMES <- toupper(changed)
[09:29:23.899]                 args <- list()
[09:29:23.899]                 for (kk in seq_along(NAMES)) {
[09:29:23.899]                   name <- changed[[kk]]
[09:29:23.899]                   NAME <- NAMES[[kk]]
[09:29:23.899]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.899]                     next
[09:29:23.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.899]                 }
[09:29:23.899]                 NAMES <- toupper(added)
[09:29:23.899]                 for (kk in seq_along(NAMES)) {
[09:29:23.899]                   name <- added[[kk]]
[09:29:23.899]                   NAME <- NAMES[[kk]]
[09:29:23.899]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.899]                     next
[09:29:23.899]                   args[[name]] <- ""
[09:29:23.899]                 }
[09:29:23.899]                 NAMES <- toupper(removed)
[09:29:23.899]                 for (kk in seq_along(NAMES)) {
[09:29:23.899]                   name <- removed[[kk]]
[09:29:23.899]                   NAME <- NAMES[[kk]]
[09:29:23.899]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.899]                     next
[09:29:23.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.899]                 }
[09:29:23.899]                 if (length(args) > 0) 
[09:29:23.899]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.899]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.899]             }
[09:29:23.899]             else {
[09:29:23.899]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.899]             }
[09:29:23.899]             {
[09:29:23.899]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.899]                   0L) {
[09:29:23.899]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.899]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.899]                   base::options(opts)
[09:29:23.899]                 }
[09:29:23.899]                 {
[09:29:23.899]                   {
[09:29:23.899]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.899]                     NULL
[09:29:23.899]                   }
[09:29:23.899]                   options(future.plan = NULL)
[09:29:23.899]                   if (is.na(NA_character_)) 
[09:29:23.899]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.899]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.899]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.899]                     .init = FALSE)
[09:29:23.899]                 }
[09:29:23.899]             }
[09:29:23.899]         }
[09:29:23.899]     })
[09:29:23.899]     if (TRUE) {
[09:29:23.899]         base::sink(type = "output", split = FALSE)
[09:29:23.899]         if (TRUE) {
[09:29:23.899]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.899]         }
[09:29:23.899]         else {
[09:29:23.899]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.899]         }
[09:29:23.899]         base::close(...future.stdout)
[09:29:23.899]         ...future.stdout <- NULL
[09:29:23.899]     }
[09:29:23.899]     ...future.result$conditions <- ...future.conditions
[09:29:23.899]     ...future.result$finished <- base::Sys.time()
[09:29:23.899]     ...future.result
[09:29:23.899] }
[09:29:23.901] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[09:29:23.901] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[09:29:23.902] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[09:29:23.902] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[09:29:23.902] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.902] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[09:29:23.903] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[09:29:23.903] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[09:29:23.903] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[09:29:23.903] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[09:29:23.903] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[09:29:23.904] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[09:29:23.904] MultisessionFuture started
[09:29:23.904] - Launch lazy future ... done
[09:29:23.904] run() for ‘MultisessionFuture’ ... done
[09:29:23.904] Created future:
[09:29:23.904] MultisessionFuture:
[09:29:23.904] Label: ‘future_replicate-2’
[09:29:23.904] Expression:
[09:29:23.904] {
[09:29:23.904]     do.call(function(...) {
[09:29:23.904]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.904]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.904]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.904]             on.exit(options(oopts), add = TRUE)
[09:29:23.904]         }
[09:29:23.904]         {
[09:29:23.904]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.904]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.904]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.904]                   envir = globalenv(), inherits = FALSE)
[09:29:23.904]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.904]             })
[09:29:23.904]         }
[09:29:23.904]     }, args = future.call.arguments)
[09:29:23.904] }
[09:29:23.904] Lazy evaluation: FALSE
[09:29:23.904] Asynchronous evaluation: TRUE
[09:29:23.904] Local evaluation: TRUE
[09:29:23.904] Environment: R_GlobalEnv
[09:29:23.904] Capture standard output: TRUE
[09:29:23.904] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:23.904] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[09:29:23.904] Packages: <none>
[09:29:23.904] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:23.904] Resolved: FALSE
[09:29:23.904] Value: <not collected>
[09:29:23.904] Conditions captured: <none>
[09:29:23.904] Early signaling: FALSE
[09:29:23.904] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:23.904] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.916] Chunk #2 of 2 ... DONE
[09:29:23.916] Launching 2 futures (chunks) ... DONE
[09:29:23.916] Resolving 2 futures (chunks) ...
[09:29:23.916] resolve() on list ...
[09:29:23.916]  recursive: 0
[09:29:23.916]  length: 2
[09:29:23.917] 
[09:29:23.917] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.917] - Validating connection of MultisessionFuture
[09:29:23.917] - received message: FutureResult
[09:29:23.917] - Received FutureResult
[09:29:23.917] - Erased future from FutureRegistry
[09:29:23.918] result() for ClusterFuture ...
[09:29:23.918] - result already collected: FutureResult
[09:29:23.918] result() for ClusterFuture ... done
[09:29:23.918] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.918] Future #1
[09:29:23.918] result() for ClusterFuture ...
[09:29:23.918] - result already collected: FutureResult
[09:29:23.918] result() for ClusterFuture ... done
[09:29:23.918] result() for ClusterFuture ...
[09:29:23.918] - result already collected: FutureResult
[09:29:23.918] result() for ClusterFuture ... done
[09:29:23.918] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:29:23.919] - nx: 2
[09:29:23.919] - relay: TRUE
[09:29:23.919] - stdout: TRUE
[09:29:23.919] - signal: TRUE
[09:29:23.919] - resignal: FALSE
[09:29:23.919] - force: TRUE
[09:29:23.919] - relayed: [n=2] FALSE, FALSE
[09:29:23.919] - queued futures: [n=2] FALSE, FALSE
[09:29:23.919]  - until=1
[09:29:23.919]  - relaying element #1
[09:29:23.919] result() for ClusterFuture ...
[09:29:23.919] - result already collected: FutureResult
[09:29:23.920] result() for ClusterFuture ... done
[09:29:23.920] result() for ClusterFuture ...
[09:29:23.920] - result already collected: FutureResult
[09:29:23.920] result() for ClusterFuture ... done
[09:29:23.920] result() for ClusterFuture ...
[09:29:23.920] - result already collected: FutureResult
[09:29:23.920] result() for ClusterFuture ... done
[09:29:23.920] result() for ClusterFuture ...
[09:29:23.920] - result already collected: FutureResult
[09:29:23.920] result() for ClusterFuture ... done
[09:29:23.920] - relayed: [n=2] TRUE, FALSE
[09:29:23.921] - queued futures: [n=2] TRUE, FALSE
[09:29:23.921] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:29:23.921]  length: 1 (resolved future 1)
[09:29:23.949] receiveMessageFromWorker() for ClusterFuture ...
[09:29:23.949] - Validating connection of MultisessionFuture
[09:29:23.950] - received message: FutureResult
[09:29:23.950] - Received FutureResult
[09:29:23.950] - Erased future from FutureRegistry
[09:29:23.950] result() for ClusterFuture ...
[09:29:23.950] - result already collected: FutureResult
[09:29:23.950] result() for ClusterFuture ... done
[09:29:23.950] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:23.950] Future #2
[09:29:23.950] result() for ClusterFuture ...
[09:29:23.950] - result already collected: FutureResult
[09:29:23.950] result() for ClusterFuture ... done
[09:29:23.951] result() for ClusterFuture ...
[09:29:23.951] - result already collected: FutureResult
[09:29:23.951] result() for ClusterFuture ... done
[09:29:23.951] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:29:23.951] - nx: 2
[09:29:23.951] - relay: TRUE
[09:29:23.951] - stdout: TRUE
[09:29:23.951] - signal: TRUE
[09:29:23.951] - resignal: FALSE
[09:29:23.951] - force: TRUE
[09:29:23.951] - relayed: [n=2] TRUE, FALSE
[09:29:23.951] - queued futures: [n=2] TRUE, FALSE
[09:29:23.952]  - until=2
[09:29:23.952]  - relaying element #2
[09:29:23.952] result() for ClusterFuture ...
[09:29:23.952] - result already collected: FutureResult
[09:29:23.952] result() for ClusterFuture ... done
[09:29:23.952] result() for ClusterFuture ...
[09:29:23.952] - result already collected: FutureResult
[09:29:23.952] result() for ClusterFuture ... done
[09:29:23.952] result() for ClusterFuture ...
[09:29:23.952] - result already collected: FutureResult
[09:29:23.953] result() for ClusterFuture ... done
[09:29:23.953] result() for ClusterFuture ...
[09:29:23.953] - result already collected: FutureResult
[09:29:23.953] result() for ClusterFuture ... done
[09:29:23.953] - relayed: [n=2] TRUE, TRUE
[09:29:23.953] - queued futures: [n=2] TRUE, TRUE
[09:29:23.953] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:29:23.953]  length: 0 (resolved future 2)
[09:29:23.953] Relaying remaining futures
[09:29:23.953] signalConditionsASAP(NULL, pos=0) ...
[09:29:23.953] - nx: 2
[09:29:23.953] - relay: TRUE
[09:29:23.954] - stdout: TRUE
[09:29:23.954] - signal: TRUE
[09:29:23.954] - resignal: FALSE
[09:29:23.954] - force: TRUE
[09:29:23.954] - relayed: [n=2] TRUE, TRUE
[09:29:23.954] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:23.954] - relayed: [n=2] TRUE, TRUE
[09:29:23.954] - queued futures: [n=2] TRUE, TRUE
[09:29:23.954] signalConditionsASAP(NULL, pos=0) ... done
[09:29:23.954] resolve() on list ... DONE
[09:29:23.954] result() for ClusterFuture ...
[09:29:23.954] - result already collected: FutureResult
[09:29:23.955] result() for ClusterFuture ... done
[09:29:23.955] result() for ClusterFuture ...
[09:29:23.955] - result already collected: FutureResult
[09:29:23.957] result() for ClusterFuture ... done
[09:29:23.957] result() for ClusterFuture ...
[09:29:23.957] - result already collected: FutureResult
[09:29:23.957] result() for ClusterFuture ... done
[09:29:23.957] result() for ClusterFuture ...
[09:29:23.957] - result already collected: FutureResult
[09:29:23.957] result() for ClusterFuture ... done
[09:29:23.957]  - Number of value chunks collected: 2
[09:29:23.957] Resolving 2 futures (chunks) ... DONE
[09:29:23.958] Reducing values from 2 chunks ...
[09:29:23.958]  - Number of values collected after concatenation: 5
[09:29:23.958]  - Number of values expected: 5
[09:29:23.958] Reducing values from 2 chunks ... DONE
[09:29:23.958] future_lapply() ... DONE
- example(replicate) ...
[09:29:23.958] future_lapply() ...
[09:29:23.959] Generating random seeds ...
[09:29:23.959] Generating random seed streams for 5 elements ...
[09:29:23.959] Generating random seed streams for 5 elements ... DONE
[09:29:23.959] Generating random seeds ... DONE
[09:29:23.959] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[09:29:23.963] Number of chunks: 2
[09:29:23.963] getGlobalsAndPackagesXApply() ...
[09:29:23.963]  - future.globals: TRUE
[09:29:23.963] getGlobalsAndPackages() ...
[09:29:23.963] Searching for globals...
[09:29:23.965] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[09:29:23.965] Searching for globals ... DONE
[09:29:23.965] Resolving globals: FALSE
[09:29:23.966] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[09:29:23.966] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[09:29:23.966] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[09:29:23.966] 
[09:29:23.966] getGlobalsAndPackages() ... DONE
[09:29:23.966]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[09:29:23.966]  - needed namespaces: [n=0] 
[09:29:23.966] Finding globals ... DONE
[09:29:23.967]  - use_args: TRUE
[09:29:23.967]  - Getting '...' globals ...
[09:29:23.967] resolve() on list ...
[09:29:23.967]  recursive: 0
[09:29:23.967]  length: 1
[09:29:23.967]  elements: ‘...’
[09:29:23.967]  length: 0 (resolved future 1)
[09:29:23.967] resolve() on list ... DONE
[09:29:23.967]    - '...' content: [n=0] 
[09:29:23.968] List of 1
[09:29:23.968]  $ ...: list()
[09:29:23.968]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.968]  - attr(*, "where")=List of 1
[09:29:23.968]   ..$ ...:<environment: 0x55d1cbf829d8> 
[09:29:23.968]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.968]  - attr(*, "resolved")= logi TRUE
[09:29:23.968]  - attr(*, "total_size")= num NA
[09:29:23.970]  - Getting '...' globals ... DONE
[09:29:23.970] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[09:29:23.970] List of 4
[09:29:23.970]  $ ...future.FUN:function (...)  
[09:29:23.970]  $ foo          :function (x = 1, y = 2)  
[09:29:23.970]  $ x            : num 3
[09:29:23.970]  $ ...          : list()
[09:29:23.970]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[09:29:23.970]  - attr(*, "where")=List of 4
[09:29:23.970]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[09:29:23.970]   ..$ foo          :<environment: R_EmptyEnv> 
[09:29:23.970]   ..$ x            :<environment: R_EmptyEnv> 
[09:29:23.970]   ..$ ...          :<environment: 0x55d1cbf829d8> 
[09:29:23.970]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[09:29:23.970]  - attr(*, "resolved")= logi FALSE
[09:29:23.970]  - attr(*, "total_size")= num 2200
[09:29:23.974] Packages to be attached in all futures: [n=0] 
[09:29:23.974] getGlobalsAndPackagesXApply() ... DONE
[09:29:23.974] Number of futures (= number of chunks): 2
[09:29:23.974] Launching 2 futures (chunks) ...
[09:29:23.974] Chunk #1 of 2 ...
[09:29:23.974]  - Finding globals in 'X' for chunk #1 ...
[09:29:23.974] getGlobalsAndPackages() ...
[09:29:23.974] Searching for globals...
[09:29:23.975] 
[09:29:23.975] Searching for globals ... DONE
[09:29:23.975] - globals: [0] <none>
[09:29:23.975] getGlobalsAndPackages() ... DONE
[09:29:23.975]    + additional globals found: [n=0] 
[09:29:23.975]    + additional namespaces needed: [n=0] 
[09:29:23.975]  - Finding globals in 'X' for chunk #1 ... DONE
[09:29:23.975]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:23.975]  - seeds: [2] <seeds>
[09:29:23.975]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.976] getGlobalsAndPackages() ...
[09:29:23.976] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.976] Resolving globals: FALSE
[09:29:23.976] Tweak future expression to call with '...' arguments ...
[09:29:23.976] {
[09:29:23.976]     do.call(function(...) {
[09:29:23.976]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.976]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:23.976]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.976]             on.exit(options(oopts), add = TRUE)
[09:29:23.976]         }
[09:29:23.976]         {
[09:29:23.976]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:23.976]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.976]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.976]                   envir = globalenv(), inherits = FALSE)
[09:29:23.976]                 ...future.FUN(...future.X_jj, ...)
[09:29:23.976]             })
[09:29:23.976]         }
[09:29:23.976]     }, args = future.call.arguments)
[09:29:23.976] }
[09:29:23.976] Tweak future expression to call with '...' arguments ... DONE
[09:29:23.977] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:23.977] 
[09:29:23.977] getGlobalsAndPackages() ... DONE
[09:29:23.977] run() for ‘Future’ ...
[09:29:23.977] - state: ‘created’
[09:29:23.977] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:23.992] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:23.992] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:23.992]   - Field: ‘node’
[09:29:23.992]   - Field: ‘label’
[09:29:23.993]   - Field: ‘local’
[09:29:23.993]   - Field: ‘owner’
[09:29:23.993]   - Field: ‘envir’
[09:29:23.993]   - Field: ‘workers’
[09:29:23.993]   - Field: ‘packages’
[09:29:23.993]   - Field: ‘gc’
[09:29:23.993]   - Field: ‘conditions’
[09:29:23.993]   - Field: ‘persistent’
[09:29:23.993]   - Field: ‘expr’
[09:29:23.993]   - Field: ‘uuid’
[09:29:23.993]   - Field: ‘seed’
[09:29:23.994]   - Field: ‘version’
[09:29:23.994]   - Field: ‘result’
[09:29:23.994]   - Field: ‘asynchronous’
[09:29:23.994]   - Field: ‘calls’
[09:29:23.994]   - Field: ‘globals’
[09:29:23.994]   - Field: ‘stdout’
[09:29:23.994]   - Field: ‘earlySignal’
[09:29:23.994]   - Field: ‘lazy’
[09:29:23.994]   - Field: ‘state’
[09:29:23.994] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:23.994] - Launch lazy future ...
[09:29:23.995] Packages needed by the future expression (n = 0): <none>
[09:29:23.995] Packages needed by future strategies (n = 0): <none>
[09:29:23.995] {
[09:29:23.995]     {
[09:29:23.995]         {
[09:29:23.995]             ...future.startTime <- base::Sys.time()
[09:29:23.995]             {
[09:29:23.995]                 {
[09:29:23.995]                   {
[09:29:23.995]                     {
[09:29:23.995]                       base::local({
[09:29:23.995]                         has_future <- base::requireNamespace("future", 
[09:29:23.995]                           quietly = TRUE)
[09:29:23.995]                         if (has_future) {
[09:29:23.995]                           ns <- base::getNamespace("future")
[09:29:23.995]                           version <- ns[[".package"]][["version"]]
[09:29:23.995]                           if (is.null(version)) 
[09:29:23.995]                             version <- utils::packageVersion("future")
[09:29:23.995]                         }
[09:29:23.995]                         else {
[09:29:23.995]                           version <- NULL
[09:29:23.995]                         }
[09:29:23.995]                         if (!has_future || version < "1.8.0") {
[09:29:23.995]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:23.995]                             "", base::R.version$version.string), 
[09:29:23.995]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:23.995]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:23.995]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:23.995]                               "release", "version")], collapse = " "), 
[09:29:23.995]                             hostname = base::Sys.info()[["nodename"]])
[09:29:23.995]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:23.995]                             info)
[09:29:23.995]                           info <- base::paste(info, collapse = "; ")
[09:29:23.995]                           if (!has_future) {
[09:29:23.995]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:23.995]                               info)
[09:29:23.995]                           }
[09:29:23.995]                           else {
[09:29:23.995]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:23.995]                               info, version)
[09:29:23.995]                           }
[09:29:23.995]                           base::stop(msg)
[09:29:23.995]                         }
[09:29:23.995]                       })
[09:29:23.995]                     }
[09:29:23.995]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:23.995]                     base::options(mc.cores = 1L)
[09:29:23.995]                   }
[09:29:23.995]                   ...future.strategy.old <- future::plan("list")
[09:29:23.995]                   options(future.plan = NULL)
[09:29:23.995]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.995]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:23.995]                 }
[09:29:23.995]                 ...future.workdir <- getwd()
[09:29:23.995]             }
[09:29:23.995]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:23.995]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:23.995]         }
[09:29:23.995]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:23.995]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:23.995]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:23.995]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:23.995]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:23.995]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:23.995]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:23.995]             base::names(...future.oldOptions))
[09:29:23.995]     }
[09:29:23.995]     if (FALSE) {
[09:29:23.995]     }
[09:29:23.995]     else {
[09:29:23.995]         if (TRUE) {
[09:29:23.995]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:23.995]                 open = "w")
[09:29:23.995]         }
[09:29:23.995]         else {
[09:29:23.995]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:23.995]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:23.995]         }
[09:29:23.995]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:23.995]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:23.995]             base::sink(type = "output", split = FALSE)
[09:29:23.995]             base::close(...future.stdout)
[09:29:23.995]         }, add = TRUE)
[09:29:23.995]     }
[09:29:23.995]     ...future.frame <- base::sys.nframe()
[09:29:23.995]     ...future.conditions <- base::list()
[09:29:23.995]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:23.995]     if (FALSE) {
[09:29:23.995]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:23.995]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:23.995]     }
[09:29:23.995]     ...future.result <- base::tryCatch({
[09:29:23.995]         base::withCallingHandlers({
[09:29:23.995]             ...future.value <- base::withVisible(base::local({
[09:29:23.995]                 ...future.makeSendCondition <- base::local({
[09:29:23.995]                   sendCondition <- NULL
[09:29:23.995]                   function(frame = 1L) {
[09:29:23.995]                     if (is.function(sendCondition)) 
[09:29:23.995]                       return(sendCondition)
[09:29:23.995]                     ns <- getNamespace("parallel")
[09:29:23.995]                     if (exists("sendData", mode = "function", 
[09:29:23.995]                       envir = ns)) {
[09:29:23.995]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:23.995]                         envir = ns)
[09:29:23.995]                       envir <- sys.frame(frame)
[09:29:23.995]                       master <- NULL
[09:29:23.995]                       while (!identical(envir, .GlobalEnv) && 
[09:29:23.995]                         !identical(envir, emptyenv())) {
[09:29:23.995]                         if (exists("master", mode = "list", envir = envir, 
[09:29:23.995]                           inherits = FALSE)) {
[09:29:23.995]                           master <- get("master", mode = "list", 
[09:29:23.995]                             envir = envir, inherits = FALSE)
[09:29:23.995]                           if (inherits(master, c("SOCKnode", 
[09:29:23.995]                             "SOCK0node"))) {
[09:29:23.995]                             sendCondition <<- function(cond) {
[09:29:23.995]                               data <- list(type = "VALUE", value = cond, 
[09:29:23.995]                                 success = TRUE)
[09:29:23.995]                               parallel_sendData(master, data)
[09:29:23.995]                             }
[09:29:23.995]                             return(sendCondition)
[09:29:23.995]                           }
[09:29:23.995]                         }
[09:29:23.995]                         frame <- frame + 1L
[09:29:23.995]                         envir <- sys.frame(frame)
[09:29:23.995]                       }
[09:29:23.995]                     }
[09:29:23.995]                     sendCondition <<- function(cond) NULL
[09:29:23.995]                   }
[09:29:23.995]                 })
[09:29:23.995]                 withCallingHandlers({
[09:29:23.995]                   {
[09:29:23.995]                     do.call(function(...) {
[09:29:23.995]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:23.995]                       if (!identical(...future.globals.maxSize.org, 
[09:29:23.995]                         ...future.globals.maxSize)) {
[09:29:23.995]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:23.995]                         on.exit(options(oopts), add = TRUE)
[09:29:23.995]                       }
[09:29:23.995]                       {
[09:29:23.995]                         lapply(seq_along(...future.elements_ii), 
[09:29:23.995]                           FUN = function(jj) {
[09:29:23.995]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:23.995]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:23.995]                               envir = globalenv(), inherits = FALSE)
[09:29:23.995]                             ...future.FUN(...future.X_jj, ...)
[09:29:23.995]                           })
[09:29:23.995]                       }
[09:29:23.995]                     }, args = future.call.arguments)
[09:29:23.995]                   }
[09:29:23.995]                 }, immediateCondition = function(cond) {
[09:29:23.995]                   sendCondition <- ...future.makeSendCondition()
[09:29:23.995]                   sendCondition(cond)
[09:29:23.995]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.995]                   {
[09:29:23.995]                     inherits <- base::inherits
[09:29:23.995]                     invokeRestart <- base::invokeRestart
[09:29:23.995]                     is.null <- base::is.null
[09:29:23.995]                     muffled <- FALSE
[09:29:23.995]                     if (inherits(cond, "message")) {
[09:29:23.995]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:23.995]                       if (muffled) 
[09:29:23.995]                         invokeRestart("muffleMessage")
[09:29:23.995]                     }
[09:29:23.995]                     else if (inherits(cond, "warning")) {
[09:29:23.995]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:23.995]                       if (muffled) 
[09:29:23.995]                         invokeRestart("muffleWarning")
[09:29:23.995]                     }
[09:29:23.995]                     else if (inherits(cond, "condition")) {
[09:29:23.995]                       if (!is.null(pattern)) {
[09:29:23.995]                         computeRestarts <- base::computeRestarts
[09:29:23.995]                         grepl <- base::grepl
[09:29:23.995]                         restarts <- computeRestarts(cond)
[09:29:23.995]                         for (restart in restarts) {
[09:29:23.995]                           name <- restart$name
[09:29:23.995]                           if (is.null(name)) 
[09:29:23.995]                             next
[09:29:23.995]                           if (!grepl(pattern, name)) 
[09:29:23.995]                             next
[09:29:23.995]                           invokeRestart(restart)
[09:29:23.995]                           muffled <- TRUE
[09:29:23.995]                           break
[09:29:23.995]                         }
[09:29:23.995]                       }
[09:29:23.995]                     }
[09:29:23.995]                     invisible(muffled)
[09:29:23.995]                   }
[09:29:23.995]                   muffleCondition(cond)
[09:29:23.995]                 })
[09:29:23.995]             }))
[09:29:23.995]             future::FutureResult(value = ...future.value$value, 
[09:29:23.995]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.995]                   ...future.rng), globalenv = if (FALSE) 
[09:29:23.995]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:23.995]                     ...future.globalenv.names))
[09:29:23.995]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:23.995]         }, condition = base::local({
[09:29:23.995]             c <- base::c
[09:29:23.995]             inherits <- base::inherits
[09:29:23.995]             invokeRestart <- base::invokeRestart
[09:29:23.995]             length <- base::length
[09:29:23.995]             list <- base::list
[09:29:23.995]             seq.int <- base::seq.int
[09:29:23.995]             signalCondition <- base::signalCondition
[09:29:23.995]             sys.calls <- base::sys.calls
[09:29:23.995]             `[[` <- base::`[[`
[09:29:23.995]             `+` <- base::`+`
[09:29:23.995]             `<<-` <- base::`<<-`
[09:29:23.995]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:23.995]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:23.995]                   3L)]
[09:29:23.995]             }
[09:29:23.995]             function(cond) {
[09:29:23.995]                 is_error <- inherits(cond, "error")
[09:29:23.995]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:23.995]                   NULL)
[09:29:23.995]                 if (is_error) {
[09:29:23.995]                   sessionInformation <- function() {
[09:29:23.995]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:23.995]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:23.995]                       search = base::search(), system = base::Sys.info())
[09:29:23.995]                   }
[09:29:23.995]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.995]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:23.995]                     cond$call), session = sessionInformation(), 
[09:29:23.995]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:23.995]                   signalCondition(cond)
[09:29:23.995]                 }
[09:29:23.995]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:23.995]                 "immediateCondition"))) {
[09:29:23.995]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:23.995]                   ...future.conditions[[length(...future.conditions) + 
[09:29:23.995]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:23.995]                   if (TRUE && !signal) {
[09:29:23.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.995]                     {
[09:29:23.995]                       inherits <- base::inherits
[09:29:23.995]                       invokeRestart <- base::invokeRestart
[09:29:23.995]                       is.null <- base::is.null
[09:29:23.995]                       muffled <- FALSE
[09:29:23.995]                       if (inherits(cond, "message")) {
[09:29:23.995]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.995]                         if (muffled) 
[09:29:23.995]                           invokeRestart("muffleMessage")
[09:29:23.995]                       }
[09:29:23.995]                       else if (inherits(cond, "warning")) {
[09:29:23.995]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.995]                         if (muffled) 
[09:29:23.995]                           invokeRestart("muffleWarning")
[09:29:23.995]                       }
[09:29:23.995]                       else if (inherits(cond, "condition")) {
[09:29:23.995]                         if (!is.null(pattern)) {
[09:29:23.995]                           computeRestarts <- base::computeRestarts
[09:29:23.995]                           grepl <- base::grepl
[09:29:23.995]                           restarts <- computeRestarts(cond)
[09:29:23.995]                           for (restart in restarts) {
[09:29:23.995]                             name <- restart$name
[09:29:23.995]                             if (is.null(name)) 
[09:29:23.995]                               next
[09:29:23.995]                             if (!grepl(pattern, name)) 
[09:29:23.995]                               next
[09:29:23.995]                             invokeRestart(restart)
[09:29:23.995]                             muffled <- TRUE
[09:29:23.995]                             break
[09:29:23.995]                           }
[09:29:23.995]                         }
[09:29:23.995]                       }
[09:29:23.995]                       invisible(muffled)
[09:29:23.995]                     }
[09:29:23.995]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.995]                   }
[09:29:23.995]                 }
[09:29:23.995]                 else {
[09:29:23.995]                   if (TRUE) {
[09:29:23.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:23.995]                     {
[09:29:23.995]                       inherits <- base::inherits
[09:29:23.995]                       invokeRestart <- base::invokeRestart
[09:29:23.995]                       is.null <- base::is.null
[09:29:23.995]                       muffled <- FALSE
[09:29:23.995]                       if (inherits(cond, "message")) {
[09:29:23.995]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:23.995]                         if (muffled) 
[09:29:23.995]                           invokeRestart("muffleMessage")
[09:29:23.995]                       }
[09:29:23.995]                       else if (inherits(cond, "warning")) {
[09:29:23.995]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:23.995]                         if (muffled) 
[09:29:23.995]                           invokeRestart("muffleWarning")
[09:29:23.995]                       }
[09:29:23.995]                       else if (inherits(cond, "condition")) {
[09:29:23.995]                         if (!is.null(pattern)) {
[09:29:23.995]                           computeRestarts <- base::computeRestarts
[09:29:23.995]                           grepl <- base::grepl
[09:29:23.995]                           restarts <- computeRestarts(cond)
[09:29:23.995]                           for (restart in restarts) {
[09:29:23.995]                             name <- restart$name
[09:29:23.995]                             if (is.null(name)) 
[09:29:23.995]                               next
[09:29:23.995]                             if (!grepl(pattern, name)) 
[09:29:23.995]                               next
[09:29:23.995]                             invokeRestart(restart)
[09:29:23.995]                             muffled <- TRUE
[09:29:23.995]                             break
[09:29:23.995]                           }
[09:29:23.995]                         }
[09:29:23.995]                       }
[09:29:23.995]                       invisible(muffled)
[09:29:23.995]                     }
[09:29:23.995]                     muffleCondition(cond, pattern = "^muffle")
[09:29:23.995]                   }
[09:29:23.995]                 }
[09:29:23.995]             }
[09:29:23.995]         }))
[09:29:23.995]     }, error = function(ex) {
[09:29:23.995]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:23.995]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:23.995]                 ...future.rng), started = ...future.startTime, 
[09:29:23.995]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:23.995]             version = "1.8"), class = "FutureResult")
[09:29:23.995]     }, finally = {
[09:29:23.995]         if (!identical(...future.workdir, getwd())) 
[09:29:23.995]             setwd(...future.workdir)
[09:29:23.995]         {
[09:29:23.995]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:23.995]                 ...future.oldOptions$nwarnings <- NULL
[09:29:23.995]             }
[09:29:23.995]             base::options(...future.oldOptions)
[09:29:23.995]             if (.Platform$OS.type == "windows") {
[09:29:23.995]                 old_names <- names(...future.oldEnvVars)
[09:29:23.995]                 envs <- base::Sys.getenv()
[09:29:23.995]                 names <- names(envs)
[09:29:23.995]                 common <- intersect(names, old_names)
[09:29:23.995]                 added <- setdiff(names, old_names)
[09:29:23.995]                 removed <- setdiff(old_names, names)
[09:29:23.995]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:23.995]                   envs[common]]
[09:29:23.995]                 NAMES <- toupper(changed)
[09:29:23.995]                 args <- list()
[09:29:23.995]                 for (kk in seq_along(NAMES)) {
[09:29:23.995]                   name <- changed[[kk]]
[09:29:23.995]                   NAME <- NAMES[[kk]]
[09:29:23.995]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.995]                     next
[09:29:23.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.995]                 }
[09:29:23.995]                 NAMES <- toupper(added)
[09:29:23.995]                 for (kk in seq_along(NAMES)) {
[09:29:23.995]                   name <- added[[kk]]
[09:29:23.995]                   NAME <- NAMES[[kk]]
[09:29:23.995]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.995]                     next
[09:29:23.995]                   args[[name]] <- ""
[09:29:23.995]                 }
[09:29:23.995]                 NAMES <- toupper(removed)
[09:29:23.995]                 for (kk in seq_along(NAMES)) {
[09:29:23.995]                   name <- removed[[kk]]
[09:29:23.995]                   NAME <- NAMES[[kk]]
[09:29:23.995]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:23.995]                     next
[09:29:23.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:23.995]                 }
[09:29:23.995]                 if (length(args) > 0) 
[09:29:23.995]                   base::do.call(base::Sys.setenv, args = args)
[09:29:23.995]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:23.995]             }
[09:29:23.995]             else {
[09:29:23.995]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:23.995]             }
[09:29:23.995]             {
[09:29:23.995]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:23.995]                   0L) {
[09:29:23.995]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:23.995]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:23.995]                   base::options(opts)
[09:29:23.995]                 }
[09:29:23.995]                 {
[09:29:23.995]                   {
[09:29:23.995]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:23.995]                     NULL
[09:29:23.995]                   }
[09:29:23.995]                   options(future.plan = NULL)
[09:29:23.995]                   if (is.na(NA_character_)) 
[09:29:23.995]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:23.995]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:23.995]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:23.995]                     .init = FALSE)
[09:29:23.995]                 }
[09:29:23.995]             }
[09:29:23.995]         }
[09:29:23.995]     })
[09:29:23.995]     if (TRUE) {
[09:29:23.995]         base::sink(type = "output", split = FALSE)
[09:29:23.995]         if (TRUE) {
[09:29:23.995]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:23.995]         }
[09:29:23.995]         else {
[09:29:23.995]             ...future.result["stdout"] <- base::list(NULL)
[09:29:23.995]         }
[09:29:23.995]         base::close(...future.stdout)
[09:29:23.995]         ...future.stdout <- NULL
[09:29:23.995]     }
[09:29:23.995]     ...future.result$conditions <- ...future.conditions
[09:29:23.995]     ...future.result$finished <- base::Sys.time()
[09:29:23.995]     ...future.result
[09:29:23.995] }
[09:29:23.998] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[09:29:23.998] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[09:29:23.998] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[09:29:23.998] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[09:29:23.999] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[09:29:23.999] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[09:29:23.999] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[09:29:23.999] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[09:29:24.000] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[09:29:24.000] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[09:29:24.000] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[09:29:24.000] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[09:29:24.001] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[09:29:24.001] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[09:29:24.001] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[09:29:24.001] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[09:29:24.001] MultisessionFuture started
[09:29:24.002] - Launch lazy future ... done
[09:29:24.002] run() for ‘MultisessionFuture’ ... done
[09:29:24.002] Created future:
[09:29:24.002] MultisessionFuture:
[09:29:24.002] Label: ‘future_replicate-1’
[09:29:24.002] Expression:
[09:29:24.002] {
[09:29:24.002]     do.call(function(...) {
[09:29:24.002]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:24.002]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:24.002]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:24.002]             on.exit(options(oopts), add = TRUE)
[09:29:24.002]         }
[09:29:24.002]         {
[09:29:24.002]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:24.002]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:24.002]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:24.002]                   envir = globalenv(), inherits = FALSE)
[09:29:24.002]                 ...future.FUN(...future.X_jj, ...)
[09:29:24.002]             })
[09:29:24.002]         }
[09:29:24.002]     }, args = future.call.arguments)
[09:29:24.002] }
[09:29:24.002] Lazy evaluation: FALSE
[09:29:24.002] Asynchronous evaluation: TRUE
[09:29:24.002] Local evaluation: TRUE
[09:29:24.002] Environment: 0x55d1cbf850a0
[09:29:24.002] Capture standard output: TRUE
[09:29:24.002] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:24.002] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[09:29:24.002] Packages: <none>
[09:29:24.002] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:24.002] Resolved: FALSE
[09:29:24.002] Value: <not collected>
[09:29:24.002] Conditions captured: <none>
[09:29:24.002] Early signaling: FALSE
[09:29:24.002] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:24.002] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:24.013] Chunk #1 of 2 ... DONE
[09:29:24.013] Chunk #2 of 2 ...
[09:29:24.014]  - Finding globals in 'X' for chunk #2 ...
[09:29:24.014] getGlobalsAndPackages() ...
[09:29:24.014] Searching for globals...
[09:29:24.014] 
[09:29:24.014] Searching for globals ... DONE
[09:29:24.014] - globals: [0] <none>
[09:29:24.014] getGlobalsAndPackages() ... DONE
[09:29:24.014]    + additional globals found: [n=0] 
[09:29:24.015]    + additional namespaces needed: [n=0] 
[09:29:24.015]  - Finding globals in 'X' for chunk #2 ... DONE
[09:29:24.015]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[09:29:24.015]  - seeds: [3] <seeds>
[09:29:24.015]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:24.015] getGlobalsAndPackages() ...
[09:29:24.015] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:24.015] Resolving globals: FALSE
[09:29:24.015] Tweak future expression to call with '...' arguments ...
[09:29:24.015] {
[09:29:24.015]     do.call(function(...) {
[09:29:24.015]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:24.015]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:24.015]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:24.015]             on.exit(options(oopts), add = TRUE)
[09:29:24.015]         }
[09:29:24.015]         {
[09:29:24.015]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:24.015]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:24.015]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:24.015]                   envir = globalenv(), inherits = FALSE)
[09:29:24.015]                 ...future.FUN(...future.X_jj, ...)
[09:29:24.015]             })
[09:29:24.015]         }
[09:29:24.015]     }, args = future.call.arguments)
[09:29:24.015] }
[09:29:24.016] Tweak future expression to call with '...' arguments ... DONE
[09:29:24.016] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[09:29:24.016] 
[09:29:24.016] getGlobalsAndPackages() ... DONE
[09:29:24.016] run() for ‘Future’ ...
[09:29:24.017] - state: ‘created’
[09:29:24.017] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[09:29:24.030] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:24.030] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[09:29:24.030]   - Field: ‘node’
[09:29:24.030]   - Field: ‘label’
[09:29:24.030]   - Field: ‘local’
[09:29:24.030]   - Field: ‘owner’
[09:29:24.030]   - Field: ‘envir’
[09:29:24.030]   - Field: ‘workers’
[09:29:24.031]   - Field: ‘packages’
[09:29:24.031]   - Field: ‘gc’
[09:29:24.031]   - Field: ‘conditions’
[09:29:24.031]   - Field: ‘persistent’
[09:29:24.031]   - Field: ‘expr’
[09:29:24.031]   - Field: ‘uuid’
[09:29:24.031]   - Field: ‘seed’
[09:29:24.031]   - Field: ‘version’
[09:29:24.031]   - Field: ‘result’
[09:29:24.031]   - Field: ‘asynchronous’
[09:29:24.031]   - Field: ‘calls’
[09:29:24.032]   - Field: ‘globals’
[09:29:24.032]   - Field: ‘stdout’
[09:29:24.032]   - Field: ‘earlySignal’
[09:29:24.032]   - Field: ‘lazy’
[09:29:24.032]   - Field: ‘state’
[09:29:24.032] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[09:29:24.032] - Launch lazy future ...
[09:29:24.032] Packages needed by the future expression (n = 0): <none>
[09:29:24.032] Packages needed by future strategies (n = 0): <none>
[09:29:24.033] {
[09:29:24.033]     {
[09:29:24.033]         {
[09:29:24.033]             ...future.startTime <- base::Sys.time()
[09:29:24.033]             {
[09:29:24.033]                 {
[09:29:24.033]                   {
[09:29:24.033]                     {
[09:29:24.033]                       base::local({
[09:29:24.033]                         has_future <- base::requireNamespace("future", 
[09:29:24.033]                           quietly = TRUE)
[09:29:24.033]                         if (has_future) {
[09:29:24.033]                           ns <- base::getNamespace("future")
[09:29:24.033]                           version <- ns[[".package"]][["version"]]
[09:29:24.033]                           if (is.null(version)) 
[09:29:24.033]                             version <- utils::packageVersion("future")
[09:29:24.033]                         }
[09:29:24.033]                         else {
[09:29:24.033]                           version <- NULL
[09:29:24.033]                         }
[09:29:24.033]                         if (!has_future || version < "1.8.0") {
[09:29:24.033]                           info <- base::c(r_version = base::gsub("R version ", 
[09:29:24.033]                             "", base::R.version$version.string), 
[09:29:24.033]                             platform = base::sprintf("%s (%s-bit)", 
[09:29:24.033]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[09:29:24.033]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[09:29:24.033]                               "release", "version")], collapse = " "), 
[09:29:24.033]                             hostname = base::Sys.info()[["nodename"]])
[09:29:24.033]                           info <- base::sprintf("%s: %s", base::names(info), 
[09:29:24.033]                             info)
[09:29:24.033]                           info <- base::paste(info, collapse = "; ")
[09:29:24.033]                           if (!has_future) {
[09:29:24.033]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[09:29:24.033]                               info)
[09:29:24.033]                           }
[09:29:24.033]                           else {
[09:29:24.033]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[09:29:24.033]                               info, version)
[09:29:24.033]                           }
[09:29:24.033]                           base::stop(msg)
[09:29:24.033]                         }
[09:29:24.033]                       })
[09:29:24.033]                     }
[09:29:24.033]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[09:29:24.033]                     base::options(mc.cores = 1L)
[09:29:24.033]                   }
[09:29:24.033]                   ...future.strategy.old <- future::plan("list")
[09:29:24.033]                   options(future.plan = NULL)
[09:29:24.033]                   Sys.unsetenv("R_FUTURE_PLAN")
[09:29:24.033]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[09:29:24.033]                 }
[09:29:24.033]                 ...future.workdir <- getwd()
[09:29:24.033]             }
[09:29:24.033]             ...future.oldOptions <- base::as.list(base::.Options)
[09:29:24.033]             ...future.oldEnvVars <- base::Sys.getenv()
[09:29:24.033]         }
[09:29:24.033]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[09:29:24.033]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[09:29:24.033]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[09:29:24.033]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[09:29:24.033]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[09:29:24.033]             future.stdout.windows.reencode = NULL, width = 80L)
[09:29:24.033]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[09:29:24.033]             base::names(...future.oldOptions))
[09:29:24.033]     }
[09:29:24.033]     if (FALSE) {
[09:29:24.033]     }
[09:29:24.033]     else {
[09:29:24.033]         if (TRUE) {
[09:29:24.033]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[09:29:24.033]                 open = "w")
[09:29:24.033]         }
[09:29:24.033]         else {
[09:29:24.033]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[09:29:24.033]                 windows = "NUL", "/dev/null"), open = "w")
[09:29:24.033]         }
[09:29:24.033]         base::sink(...future.stdout, type = "output", split = FALSE)
[09:29:24.033]         base::on.exit(if (!base::is.null(...future.stdout)) {
[09:29:24.033]             base::sink(type = "output", split = FALSE)
[09:29:24.033]             base::close(...future.stdout)
[09:29:24.033]         }, add = TRUE)
[09:29:24.033]     }
[09:29:24.033]     ...future.frame <- base::sys.nframe()
[09:29:24.033]     ...future.conditions <- base::list()
[09:29:24.033]     ...future.rng <- base::globalenv()$.Random.seed
[09:29:24.033]     if (FALSE) {
[09:29:24.033]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[09:29:24.033]             "...future.value", "...future.globalenv.names", ".Random.seed")
[09:29:24.033]     }
[09:29:24.033]     ...future.result <- base::tryCatch({
[09:29:24.033]         base::withCallingHandlers({
[09:29:24.033]             ...future.value <- base::withVisible(base::local({
[09:29:24.033]                 ...future.makeSendCondition <- base::local({
[09:29:24.033]                   sendCondition <- NULL
[09:29:24.033]                   function(frame = 1L) {
[09:29:24.033]                     if (is.function(sendCondition)) 
[09:29:24.033]                       return(sendCondition)
[09:29:24.033]                     ns <- getNamespace("parallel")
[09:29:24.033]                     if (exists("sendData", mode = "function", 
[09:29:24.033]                       envir = ns)) {
[09:29:24.033]                       parallel_sendData <- get("sendData", mode = "function", 
[09:29:24.033]                         envir = ns)
[09:29:24.033]                       envir <- sys.frame(frame)
[09:29:24.033]                       master <- NULL
[09:29:24.033]                       while (!identical(envir, .GlobalEnv) && 
[09:29:24.033]                         !identical(envir, emptyenv())) {
[09:29:24.033]                         if (exists("master", mode = "list", envir = envir, 
[09:29:24.033]                           inherits = FALSE)) {
[09:29:24.033]                           master <- get("master", mode = "list", 
[09:29:24.033]                             envir = envir, inherits = FALSE)
[09:29:24.033]                           if (inherits(master, c("SOCKnode", 
[09:29:24.033]                             "SOCK0node"))) {
[09:29:24.033]                             sendCondition <<- function(cond) {
[09:29:24.033]                               data <- list(type = "VALUE", value = cond, 
[09:29:24.033]                                 success = TRUE)
[09:29:24.033]                               parallel_sendData(master, data)
[09:29:24.033]                             }
[09:29:24.033]                             return(sendCondition)
[09:29:24.033]                           }
[09:29:24.033]                         }
[09:29:24.033]                         frame <- frame + 1L
[09:29:24.033]                         envir <- sys.frame(frame)
[09:29:24.033]                       }
[09:29:24.033]                     }
[09:29:24.033]                     sendCondition <<- function(cond) NULL
[09:29:24.033]                   }
[09:29:24.033]                 })
[09:29:24.033]                 withCallingHandlers({
[09:29:24.033]                   {
[09:29:24.033]                     do.call(function(...) {
[09:29:24.033]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:24.033]                       if (!identical(...future.globals.maxSize.org, 
[09:29:24.033]                         ...future.globals.maxSize)) {
[09:29:24.033]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:24.033]                         on.exit(options(oopts), add = TRUE)
[09:29:24.033]                       }
[09:29:24.033]                       {
[09:29:24.033]                         lapply(seq_along(...future.elements_ii), 
[09:29:24.033]                           FUN = function(jj) {
[09:29:24.033]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:24.033]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:24.033]                               envir = globalenv(), inherits = FALSE)
[09:29:24.033]                             ...future.FUN(...future.X_jj, ...)
[09:29:24.033]                           })
[09:29:24.033]                       }
[09:29:24.033]                     }, args = future.call.arguments)
[09:29:24.033]                   }
[09:29:24.033]                 }, immediateCondition = function(cond) {
[09:29:24.033]                   sendCondition <- ...future.makeSendCondition()
[09:29:24.033]                   sendCondition(cond)
[09:29:24.033]                   muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:24.033]                   {
[09:29:24.033]                     inherits <- base::inherits
[09:29:24.033]                     invokeRestart <- base::invokeRestart
[09:29:24.033]                     is.null <- base::is.null
[09:29:24.033]                     muffled <- FALSE
[09:29:24.033]                     if (inherits(cond, "message")) {
[09:29:24.033]                       muffled <- grepl(pattern, "muffleMessage")
[09:29:24.033]                       if (muffled) 
[09:29:24.033]                         invokeRestart("muffleMessage")
[09:29:24.033]                     }
[09:29:24.033]                     else if (inherits(cond, "warning")) {
[09:29:24.033]                       muffled <- grepl(pattern, "muffleWarning")
[09:29:24.033]                       if (muffled) 
[09:29:24.033]                         invokeRestart("muffleWarning")
[09:29:24.033]                     }
[09:29:24.033]                     else if (inherits(cond, "condition")) {
[09:29:24.033]                       if (!is.null(pattern)) {
[09:29:24.033]                         computeRestarts <- base::computeRestarts
[09:29:24.033]                         grepl <- base::grepl
[09:29:24.033]                         restarts <- computeRestarts(cond)
[09:29:24.033]                         for (restart in restarts) {
[09:29:24.033]                           name <- restart$name
[09:29:24.033]                           if (is.null(name)) 
[09:29:24.033]                             next
[09:29:24.033]                           if (!grepl(pattern, name)) 
[09:29:24.033]                             next
[09:29:24.033]                           invokeRestart(restart)
[09:29:24.033]                           muffled <- TRUE
[09:29:24.033]                           break
[09:29:24.033]                         }
[09:29:24.033]                       }
[09:29:24.033]                     }
[09:29:24.033]                     invisible(muffled)
[09:29:24.033]                   }
[09:29:24.033]                   muffleCondition(cond)
[09:29:24.033]                 })
[09:29:24.033]             }))
[09:29:24.033]             future::FutureResult(value = ...future.value$value, 
[09:29:24.033]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:24.033]                   ...future.rng), globalenv = if (FALSE) 
[09:29:24.033]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[09:29:24.033]                     ...future.globalenv.names))
[09:29:24.033]                 else NULL, started = ...future.startTime, version = "1.8")
[09:29:24.033]         }, condition = base::local({
[09:29:24.033]             c <- base::c
[09:29:24.033]             inherits <- base::inherits
[09:29:24.033]             invokeRestart <- base::invokeRestart
[09:29:24.033]             length <- base::length
[09:29:24.033]             list <- base::list
[09:29:24.033]             seq.int <- base::seq.int
[09:29:24.033]             signalCondition <- base::signalCondition
[09:29:24.033]             sys.calls <- base::sys.calls
[09:29:24.033]             `[[` <- base::`[[`
[09:29:24.033]             `+` <- base::`+`
[09:29:24.033]             `<<-` <- base::`<<-`
[09:29:24.033]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[09:29:24.033]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[09:29:24.033]                   3L)]
[09:29:24.033]             }
[09:29:24.033]             function(cond) {
[09:29:24.033]                 is_error <- inherits(cond, "error")
[09:29:24.033]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[09:29:24.033]                   NULL)
[09:29:24.033]                 if (is_error) {
[09:29:24.033]                   sessionInformation <- function() {
[09:29:24.033]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[09:29:24.033]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[09:29:24.033]                       search = base::search(), system = base::Sys.info())
[09:29:24.033]                   }
[09:29:24.033]                   ...future.conditions[[length(...future.conditions) + 
[09:29:24.033]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[09:29:24.033]                     cond$call), session = sessionInformation(), 
[09:29:24.033]                     timestamp = base::Sys.time(), signaled = 0L)
[09:29:24.033]                   signalCondition(cond)
[09:29:24.033]                 }
[09:29:24.033]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[09:29:24.033]                 "immediateCondition"))) {
[09:29:24.033]                   signal <- TRUE && inherits(cond, "immediateCondition")
[09:29:24.033]                   ...future.conditions[[length(...future.conditions) + 
[09:29:24.033]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[09:29:24.033]                   if (TRUE && !signal) {
[09:29:24.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:24.033]                     {
[09:29:24.033]                       inherits <- base::inherits
[09:29:24.033]                       invokeRestart <- base::invokeRestart
[09:29:24.033]                       is.null <- base::is.null
[09:29:24.033]                       muffled <- FALSE
[09:29:24.033]                       if (inherits(cond, "message")) {
[09:29:24.033]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:24.033]                         if (muffled) 
[09:29:24.033]                           invokeRestart("muffleMessage")
[09:29:24.033]                       }
[09:29:24.033]                       else if (inherits(cond, "warning")) {
[09:29:24.033]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:24.033]                         if (muffled) 
[09:29:24.033]                           invokeRestart("muffleWarning")
[09:29:24.033]                       }
[09:29:24.033]                       else if (inherits(cond, "condition")) {
[09:29:24.033]                         if (!is.null(pattern)) {
[09:29:24.033]                           computeRestarts <- base::computeRestarts
[09:29:24.033]                           grepl <- base::grepl
[09:29:24.033]                           restarts <- computeRestarts(cond)
[09:29:24.033]                           for (restart in restarts) {
[09:29:24.033]                             name <- restart$name
[09:29:24.033]                             if (is.null(name)) 
[09:29:24.033]                               next
[09:29:24.033]                             if (!grepl(pattern, name)) 
[09:29:24.033]                               next
[09:29:24.033]                             invokeRestart(restart)
[09:29:24.033]                             muffled <- TRUE
[09:29:24.033]                             break
[09:29:24.033]                           }
[09:29:24.033]                         }
[09:29:24.033]                       }
[09:29:24.033]                       invisible(muffled)
[09:29:24.033]                     }
[09:29:24.033]                     muffleCondition(cond, pattern = "^muffle")
[09:29:24.033]                   }
[09:29:24.033]                 }
[09:29:24.033]                 else {
[09:29:24.033]                   if (TRUE) {
[09:29:24.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[09:29:24.033]                     {
[09:29:24.033]                       inherits <- base::inherits
[09:29:24.033]                       invokeRestart <- base::invokeRestart
[09:29:24.033]                       is.null <- base::is.null
[09:29:24.033]                       muffled <- FALSE
[09:29:24.033]                       if (inherits(cond, "message")) {
[09:29:24.033]                         muffled <- grepl(pattern, "muffleMessage")
[09:29:24.033]                         if (muffled) 
[09:29:24.033]                           invokeRestart("muffleMessage")
[09:29:24.033]                       }
[09:29:24.033]                       else if (inherits(cond, "warning")) {
[09:29:24.033]                         muffled <- grepl(pattern, "muffleWarning")
[09:29:24.033]                         if (muffled) 
[09:29:24.033]                           invokeRestart("muffleWarning")
[09:29:24.033]                       }
[09:29:24.033]                       else if (inherits(cond, "condition")) {
[09:29:24.033]                         if (!is.null(pattern)) {
[09:29:24.033]                           computeRestarts <- base::computeRestarts
[09:29:24.033]                           grepl <- base::grepl
[09:29:24.033]                           restarts <- computeRestarts(cond)
[09:29:24.033]                           for (restart in restarts) {
[09:29:24.033]                             name <- restart$name
[09:29:24.033]                             if (is.null(name)) 
[09:29:24.033]                               next
[09:29:24.033]                             if (!grepl(pattern, name)) 
[09:29:24.033]                               next
[09:29:24.033]                             invokeRestart(restart)
[09:29:24.033]                             muffled <- TRUE
[09:29:24.033]                             break
[09:29:24.033]                           }
[09:29:24.033]                         }
[09:29:24.033]                       }
[09:29:24.033]                       invisible(muffled)
[09:29:24.033]                     }
[09:29:24.033]                     muffleCondition(cond, pattern = "^muffle")
[09:29:24.033]                   }
[09:29:24.033]                 }
[09:29:24.033]             }
[09:29:24.033]         }))
[09:29:24.033]     }, error = function(ex) {
[09:29:24.033]         base::structure(base::list(value = NULL, visible = NULL, 
[09:29:24.033]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[09:29:24.033]                 ...future.rng), started = ...future.startTime, 
[09:29:24.033]             finished = Sys.time(), session_uuid = NA_character_, 
[09:29:24.033]             version = "1.8"), class = "FutureResult")
[09:29:24.033]     }, finally = {
[09:29:24.033]         if (!identical(...future.workdir, getwd())) 
[09:29:24.033]             setwd(...future.workdir)
[09:29:24.033]         {
[09:29:24.033]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[09:29:24.033]                 ...future.oldOptions$nwarnings <- NULL
[09:29:24.033]             }
[09:29:24.033]             base::options(...future.oldOptions)
[09:29:24.033]             if (.Platform$OS.type == "windows") {
[09:29:24.033]                 old_names <- names(...future.oldEnvVars)
[09:29:24.033]                 envs <- base::Sys.getenv()
[09:29:24.033]                 names <- names(envs)
[09:29:24.033]                 common <- intersect(names, old_names)
[09:29:24.033]                 added <- setdiff(names, old_names)
[09:29:24.033]                 removed <- setdiff(old_names, names)
[09:29:24.033]                 changed <- common[...future.oldEnvVars[common] != 
[09:29:24.033]                   envs[common]]
[09:29:24.033]                 NAMES <- toupper(changed)
[09:29:24.033]                 args <- list()
[09:29:24.033]                 for (kk in seq_along(NAMES)) {
[09:29:24.033]                   name <- changed[[kk]]
[09:29:24.033]                   NAME <- NAMES[[kk]]
[09:29:24.033]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:24.033]                     next
[09:29:24.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:24.033]                 }
[09:29:24.033]                 NAMES <- toupper(added)
[09:29:24.033]                 for (kk in seq_along(NAMES)) {
[09:29:24.033]                   name <- added[[kk]]
[09:29:24.033]                   NAME <- NAMES[[kk]]
[09:29:24.033]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:24.033]                     next
[09:29:24.033]                   args[[name]] <- ""
[09:29:24.033]                 }
[09:29:24.033]                 NAMES <- toupper(removed)
[09:29:24.033]                 for (kk in seq_along(NAMES)) {
[09:29:24.033]                   name <- removed[[kk]]
[09:29:24.033]                   NAME <- NAMES[[kk]]
[09:29:24.033]                   if (name != NAME && is.element(NAME, old_names)) 
[09:29:24.033]                     next
[09:29:24.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[09:29:24.033]                 }
[09:29:24.033]                 if (length(args) > 0) 
[09:29:24.033]                   base::do.call(base::Sys.setenv, args = args)
[09:29:24.033]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[09:29:24.033]             }
[09:29:24.033]             else {
[09:29:24.033]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[09:29:24.033]             }
[09:29:24.033]             {
[09:29:24.033]                 if (base::length(...future.futureOptionsAdded) > 
[09:29:24.033]                   0L) {
[09:29:24.033]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[09:29:24.033]                   base::names(opts) <- ...future.futureOptionsAdded
[09:29:24.033]                   base::options(opts)
[09:29:24.033]                 }
[09:29:24.033]                 {
[09:29:24.033]                   {
[09:29:24.033]                     base::options(mc.cores = ...future.mc.cores.old)
[09:29:24.033]                     NULL
[09:29:24.033]                   }
[09:29:24.033]                   options(future.plan = NULL)
[09:29:24.033]                   if (is.na(NA_character_)) 
[09:29:24.033]                     Sys.unsetenv("R_FUTURE_PLAN")
[09:29:24.033]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[09:29:24.033]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[09:29:24.033]                     .init = FALSE)
[09:29:24.033]                 }
[09:29:24.033]             }
[09:29:24.033]         }
[09:29:24.033]     })
[09:29:24.033]     if (TRUE) {
[09:29:24.033]         base::sink(type = "output", split = FALSE)
[09:29:24.033]         if (TRUE) {
[09:29:24.033]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[09:29:24.033]         }
[09:29:24.033]         else {
[09:29:24.033]             ...future.result["stdout"] <- base::list(NULL)
[09:29:24.033]         }
[09:29:24.033]         base::close(...future.stdout)
[09:29:24.033]         ...future.stdout <- NULL
[09:29:24.033]     }
[09:29:24.033]     ...future.result$conditions <- ...future.conditions
[09:29:24.033]     ...future.result$finished <- base::Sys.time()
[09:29:24.033]     ...future.result
[09:29:24.033] }
[09:29:24.035] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[09:29:24.036] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[09:29:24.036] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[09:29:24.036] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[09:29:24.036] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[09:29:24.036] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[09:29:24.037] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[09:29:24.037] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[09:29:24.037] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[09:29:24.037] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[09:29:24.038] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[09:29:24.038] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[09:29:24.038] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[09:29:24.038] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[09:29:24.039] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[09:29:24.039] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[09:29:24.039] MultisessionFuture started
[09:29:24.039] - Launch lazy future ... done
[09:29:24.039] run() for ‘MultisessionFuture’ ... done
[09:29:24.039] Created future:
[09:29:24.039] MultisessionFuture:
[09:29:24.039] Label: ‘future_replicate-2’
[09:29:24.039] Expression:
[09:29:24.039] {
[09:29:24.039]     do.call(function(...) {
[09:29:24.039]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[09:29:24.039]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[09:29:24.039]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[09:29:24.039]             on.exit(options(oopts), add = TRUE)
[09:29:24.039]         }
[09:29:24.039]         {
[09:29:24.039]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[09:29:24.039]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[09:29:24.039]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[09:29:24.039]                   envir = globalenv(), inherits = FALSE)
[09:29:24.039]                 ...future.FUN(...future.X_jj, ...)
[09:29:24.039]             })
[09:29:24.039]         }
[09:29:24.039]     }, args = future.call.arguments)
[09:29:24.039] }
[09:29:24.039] Lazy evaluation: FALSE
[09:29:24.039] Asynchronous evaluation: TRUE
[09:29:24.039] Local evaluation: TRUE
[09:29:24.039] Environment: 0x55d1cbf850a0
[09:29:24.039] Capture standard output: TRUE
[09:29:24.039] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[09:29:24.039] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[09:29:24.039] Packages: <none>
[09:29:24.039] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[09:29:24.039] Resolved: FALSE
[09:29:24.039] Value: <not collected>
[09:29:24.039] Conditions captured: <none>
[09:29:24.039] Early signaling: FALSE
[09:29:24.039] Owner process: 71e42acf-0501-c291-abe7-bfc49bfbfdcd
[09:29:24.039] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[09:29:24.051] Chunk #2 of 2 ... DONE
[09:29:24.051] Launching 2 futures (chunks) ... DONE
[09:29:24.051] Resolving 2 futures (chunks) ...
[09:29:24.051] resolve() on list ...
[09:29:24.052]  recursive: 0
[09:29:24.052]  length: 2
[09:29:24.052] 
[09:29:24.052] receiveMessageFromWorker() for ClusterFuture ...
[09:29:24.052] - Validating connection of MultisessionFuture
[09:29:24.053] - received message: FutureResult
[09:29:24.053] - Received FutureResult
[09:29:24.053] - Erased future from FutureRegistry
[09:29:24.053] result() for ClusterFuture ...
[09:29:24.053] - result already collected: FutureResult
[09:29:24.053] result() for ClusterFuture ... done
[09:29:24.053] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:24.053] Future #1
[09:29:24.053] result() for ClusterFuture ...
[09:29:24.053] - result already collected: FutureResult
[09:29:24.053] result() for ClusterFuture ... done
[09:29:24.054] result() for ClusterFuture ...
[09:29:24.054] - result already collected: FutureResult
[09:29:24.054] result() for ClusterFuture ... done
[09:29:24.054] signalConditionsASAP(MultisessionFuture, pos=1) ...
[09:29:24.054] - nx: 2
[09:29:24.054] - relay: TRUE
[09:29:24.054] - stdout: TRUE
[09:29:24.054] - signal: TRUE
[09:29:24.054] - resignal: FALSE
[09:29:24.054] - force: TRUE
[09:29:24.054] - relayed: [n=2] FALSE, FALSE
[09:29:24.054] - queued futures: [n=2] FALSE, FALSE
[09:29:24.055]  - until=1
[09:29:24.055]  - relaying element #1
[09:29:24.055] result() for ClusterFuture ...
[09:29:24.055] - result already collected: FutureResult
[09:29:24.055] result() for ClusterFuture ... done
[09:29:24.055] result() for ClusterFuture ...
[09:29:24.055] - result already collected: FutureResult
[09:29:24.055] result() for ClusterFuture ... done
[09:29:24.055] result() for ClusterFuture ...
[09:29:24.055] - result already collected: FutureResult
[09:29:24.055] result() for ClusterFuture ... done
[09:29:24.056] result() for ClusterFuture ...
[09:29:24.056] - result already collected: FutureResult
[09:29:24.056] result() for ClusterFuture ... done
[09:29:24.056] - relayed: [n=2] TRUE, FALSE
[09:29:24.056] - queued futures: [n=2] TRUE, FALSE
[09:29:24.056] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[09:29:24.056]  length: 1 (resolved future 1)
[09:29:24.081] receiveMessageFromWorker() for ClusterFuture ...
[09:29:24.081] - Validating connection of MultisessionFuture
[09:29:24.082] - received message: FutureResult
[09:29:24.082] - Received FutureResult
[09:29:24.082] - Erased future from FutureRegistry
[09:29:24.082] result() for ClusterFuture ...
[09:29:24.082] - result already collected: FutureResult
[09:29:24.082] result() for ClusterFuture ... done
[09:29:24.082] receiveMessageFromWorker() for ClusterFuture ... done
[09:29:24.082] Future #2
[09:29:24.082] result() for ClusterFuture ...
[09:29:24.082] - result already collected: FutureResult
[09:29:24.083] result() for ClusterFuture ... done
[09:29:24.083] result() for ClusterFuture ...
[09:29:24.083] - result already collected: FutureResult
[09:29:24.083] result() for ClusterFuture ... done
[09:29:24.083] signalConditionsASAP(MultisessionFuture, pos=2) ...
[09:29:24.083] - nx: 2
[09:29:24.083] - relay: TRUE
[09:29:24.083] - stdout: TRUE
[09:29:24.083] - signal: TRUE
[09:29:24.083] - resignal: FALSE
[09:29:24.083] - force: TRUE
[09:29:24.083] - relayed: [n=2] TRUE, FALSE
[09:29:24.083] - queued futures: [n=2] TRUE, FALSE
[09:29:24.084]  - until=2
[09:29:24.084]  - relaying element #2
[09:29:24.084] result() for ClusterFuture ...
[09:29:24.084] - result already collected: FutureResult
[09:29:24.084] result() for ClusterFuture ... done
[09:29:24.084] result() for ClusterFuture ...
[09:29:24.084] - result already collected: FutureResult
[09:29:24.084] result() for ClusterFuture ... done
[09:29:24.084] result() for ClusterFuture ...
[09:29:24.084] - result already collected: FutureResult
[09:29:24.085] result() for ClusterFuture ... done
[09:29:24.085] result() for ClusterFuture ...
[09:29:24.085] - result already collected: FutureResult
[09:29:24.085] result() for ClusterFuture ... done
[09:29:24.085] - relayed: [n=2] TRUE, TRUE
[09:29:24.085] - queued futures: [n=2] TRUE, TRUE
[09:29:24.085] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[09:29:24.085]  length: 0 (resolved future 2)
[09:29:24.085] Relaying remaining futures
[09:29:24.085] signalConditionsASAP(NULL, pos=0) ...
[09:29:24.085] - nx: 2
[09:29:24.085] - relay: TRUE
[09:29:24.085] - stdout: TRUE
[09:29:24.086] - signal: TRUE
[09:29:24.086] - resignal: FALSE
[09:29:24.086] - force: TRUE
[09:29:24.086] - relayed: [n=2] TRUE, TRUE
[09:29:24.086] - queued futures: [n=2] TRUE, TRUE
 - flush all
[09:29:24.086] - relayed: [n=2] TRUE, TRUE
[09:29:24.086] - queued futures: [n=2] TRUE, TRUE
[09:29:24.086] signalConditionsASAP(NULL, pos=0) ... done
[09:29:24.086] resolve() on list ... DONE
[09:29:24.086] result() for ClusterFuture ...
[09:29:24.086] - result already collected: FutureResult
[09:29:24.087] result() for ClusterFuture ... done
[09:29:24.087] result() for ClusterFuture ...
[09:29:24.087] - result already collected: FutureResult
[09:29:24.087] result() for ClusterFuture ... done
[09:29:24.087] result() for ClusterFuture ...
[09:29:24.087] - result already collected: FutureResult
[09:29:24.087] result() for ClusterFuture ... done
[09:29:24.087] result() for ClusterFuture ...
[09:29:24.087] - result already collected: FutureResult
[09:29:24.087] result() for ClusterFuture ... done
[09:29:24.087]  - Number of value chunks collected: 2
[09:29:24.087] Resolving 2 futures (chunks) ... DONE
[09:29:24.088] Reducing values from 2 chunks ...
[09:29:24.088]  - Number of values collected after concatenation: 5
[09:29:24.088]  - Number of values expected: 5
[09:29:24.088] Reducing values from 2 chunks ... DONE
[09:29:24.088] future_lapply() ... DONE
[09:29:24.088] plan(): Setting new future strategy stack:
[09:29:24.088] List of future strategies:
[09:29:24.088] 1. sequential:
[09:29:24.088]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:24.088]    - tweaked: FALSE
[09:29:24.088]    - call: plan(sequential)
[09:29:24.089] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[09:29:24.090] plan(): Setting new future strategy stack:
[09:29:24.090] List of future strategies:
[09:29:24.090] 1. FutureStrategy:
[09:29:24.090]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[09:29:24.090]    - tweaked: FALSE
[09:29:24.090]    - call: future::plan(oplan)
[09:29:24.091] plan(): nbrOfWorkers() = 1
> 
