
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[17:37:41.474] plan(): Setting new future strategy stack:
[17:37:41.474] List of future strategies:
[17:37:41.474] 1. sequential:
[17:37:41.474]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.474]    - tweaked: FALSE
[17:37:41.474]    - call: future::plan("sequential")
[17:37:41.488] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[17:37:41.513] plan(): Setting new future strategy stack:
[17:37:41.513] List of future strategies:
[17:37:41.513] 1. sequential:
[17:37:41.513]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.513]    - tweaked: FALSE
[17:37:41.513]    - call: plan(strategy)
[17:37:41.526] plan(): nbrOfWorkers() = 1
[17:37:41.527] future_lapply() ...
[17:37:41.530] Generating random seeds ...
[17:37:41.531] Generating random seed streams for 5 elements ...
[17:37:41.531] Generating random seed streams for 5 elements ... DONE
[17:37:41.531] Generating random seeds ... DONE
[17:37:41.531] Will set RNG state on exit: 10403, 16, 676633677, 586501383, -915836690, -542514744, -51878197, 1872033577, -829177992, -2124421978, 1646552769, 145121107, 1943067650, -2201292, 2090721975, -1086390611, 989622212, 556128234, -1526106027, 886793711, -422752778, -369444064, 2102514915, 1998082433, 1147316208, -101923186, 790899193, 1632838539, -53350470, -1708704068, 1920128511, -458255531, 752116844, 894468290, -1769053411, 201619863, -1361149698, -1637846344, -887051109, -861734151, -539759544, -1198387338, 85482161, 424245987, 430193074, 1327524356, 2135621959, -228479971, 1739072148, 624953914, 1071678597, -721995425, -948913690, 1318291568, 369367955, -558461903, 1443791584, -571911298, 1044482569, -178224581, -1361282038, 1057252332, 1143834735, -1467324507, -904794276, -301812942, -1523058131, -1151600409, 2019121678, -2014541848, 1868683755, -795637111, -1615125992, -662632122, 1288021921, -1864521165, 20973474, -94338412, 2139805975, 414992141, -523534812, -931699190, -1931452555, 1200237263, -2052837930, -608149120, 951663043, 1067020129, -84257328, -577387218, -1248086823, 1042075371, -59970726, 368643356, 1509542943, -1717112715, 1220013324, -870203166, 194955709, 280268343, 1939547358, -1176362984, 1743265659, 1079066393, -2108111960, -635817130, 763849681, 802946947, -177239534, 1013595556, 2112719207, 1801033405, 323894836, 847816090, -1530297883, 1573301631, 749421830, 2103795344, 84596531, -1277254447, -893788544, 1434199902, -1184922455, -2098071717, 1276005738, 1248149516, -1650182065, -1914162939, -2091087428, -113386350, 28682125, -273571897, 257295534, -1337711352, 625054475, -1543143959, -1633596744, 931843430, -1474836991, 13676691, -1220392126, 601687284, -1524961033, 1724328173, 985238404, -2115861078, -2119984363, 253938095, 320719286, -478728224, -563265757, 1026650177, -768267472, 1032479054, 460592057, 191612363, 262403706, -1239565444, 1674253247, 1028668565, -1721220436, -719724414, 633008221, 868501335, -1623360962, 76091000, -968282789, -817455943, 1499985160, 279934902, -882434831, 1773878051, -1129202318, -482404412, -2019888249, 1525064029, 1481138004, 660350330, -1165598523, 154346015, -784751194, -2091579600, 1934101971, 1361476593, 1008450848, -1440703554, -1806167095, 22668155, -503938742, -1919677012, -2051458897, 716046949, -1931593188, -399264654, 923495149, 400783143, 1871491918, 1317813160, -1889189973, 2144521417, 505535704, -1474125434, -1868924831, -1698629133, 20588642, -1500324140, 1091405783, -170699315, 847360356, 1047065930, -799181643, -2092887025, -132027114, 2109511616, -944454781, -1400327775, -1172267632, 894053998, 996055065, -95468373, 574412954, 1308821596, 1163904351, -726495435, 1387610828, 1220476962, 129092221, 1286430583, 1619759262, -470935820, 585315730, 1054007392, -2117114612, 880448224, 493540706, 135350952, -1927974324, -1016959620, 424988978, -1810916240, -2062785724, -1430300200, -1379062662, -1036050896, 184660668, 27347796, 1891696706, 977258912, -1687537988, -2032716336, 1326796130, -189743128, -23195700, -498525444, 562302450, 771490944, -1654816524, -1673108856, -340679878, -506609840, 352449132, 2034202772, 666657106, 1134880480, -1241563444, 1137574048, -1392261246, 493037288, -1277157652, -1698299844, 387657330, -93938576, 1663205924, -1434570696, -602417126, -1838754096, 1436310588, -1069742956, -1980356478, 131633088, 2113128764, -2017620336, -2079160286, -1567029240, -2059092852, -1356639204, -423296366, 342708352, 468476948, -1022836440, -761497030, 1405916368, -1076347796, 144039604, -784521198, -591974432, -924030004, -1917352480, -523404766, 945419560, -1469387508, -1643477444, -223373070, -862992656, -1939398844, -1569814952, 835381818, 298340080, -289998660, 691649044, 758185154, 1445301344, -1395741316, -2054194992, 367193122, 1848075944, -1295733876, 434558396, 1654989874, 969101120, 392570036, -657940664, -472427846, -1532117232, -1807301396, -1688826796, 1100623634, -1422295136, -1768602676, -2006967456, 1666319554, 1949072936, -92389972, -413963460, 1661327218, 1384857392, 421926436, -2091815880, 1645865178, -416154224, 1602788092, 907133844, 412426050, -1007933952, 585985596, -2026778032, -310296926, 342420296, 1333092876, 1997838556, -11429294, -1190184832, 1114202964, 913788392, -1516990726, 468749136, -652276692, -913974924, -727050606, -771359136, -1716873588, -628205728, -2023791902, 106991784, 604789964, 952971772, 317884338, 1461266928, 534877636, 1562243928, 1608044410, -413719120, -1155088964, 649800788, 99971010, -2105166048, -1479588932, 384761424, 1848457698, 205170024, 1074468172, -973906692, 378454770, -833164544, -460894604, -2092155896, 2144553402, 1695009744, -1105193492, -1191420012, 989712082, 514206304, 1440470348, 820949280, -831977854, -1203649048, 156244972, 604764732, 359753330, 933485424, -1870931676, 1172916792, 1350977946, -1519161904, 2053483964, 2017739924, 375492738, 1926829504, -136411332, -1023240048, 1515973410, -2119589368, -1102749428, 860252572, 1783257618, 6356864, -131886316, 1767962920, 109035578, 417395664, -1175730580, -1807797708, 897046162, -395006624, 537125196, 1683903456, 1302159778, -2077351512, -1319616884, 165418428, -945659278, -43021328, -566085052, -1485348776, -1046686662, -994927504, 165987388, 40459540, -1349401918, 1977136864, 257031292, 1559208656, -590888542, 191362088, 438892300, -1295899204, -1560819918, -1791144256, 1959602228, -1286975800, -1526650694, -665615728, 1251297004, -1225239980, 2023067282, -7432928, -478174112, -155582007, 1817491707, 409470668, 970898266, -399524273, 40352537, 1227572526, -231817412, -1288831827, -2143801513, 736010912, -1470665730, 1684507339, -513733427, -1103097862, 946562104, -747256351, 711077523, 88095924, -202168894, -1528941097, -722478559, 231606758, -2096930588, -765313003, 747184191, 104738776, -602074634, 321909251, -788552379, -963661470, 91953872, -525273607, 540769579, 292789916, 1273367754, 689317311, 1039169801, 455842334, -303917108, -1780005475, -687611865, -943600048, -469255442, 187196315, -1419726339, -400685846, -1187983480, 2122746161, 1739356579, -1066127964, -437776302, 729531303, -485664783, 1894085430, -239337516, 1393493349, 1712286063, -1922280536, -442550010, 485414963, 21032597, 1344857842, 67516224, 2003969193, -1848616677, 570744556, -1123695878, 716999471, 974787385, 410862926, -2066828388, 1893677325, -441771145, 975433600, -1660764706, -319479125, 2015206829, 418165274, 2141029592, -1011160767, 759501299, 1681373204, -869466718, -2017396041, 1875121281, 1775985798, 1203921092, -843448843, 956672095, -296996168, -1111274602, 603543971, -201437851, 783314050, -918895120, -762653799, -1232038517, 58867836, -863059286, -1807278881, 1815673449, 1947252862, -2050703252, -1468376899, 72018311, -403071632, -1816319986, -338819781, -1863734755, -1967296822, 1483229672, -330981679, -503252285, -180325948, -729278862, 1246775111, 2024830737, -1815909738, 911085556, 540621189, -1210051377, -596333112, 2006205542, 793043603, 526649845, 941900754, -1388554208, 416510473, -633926853, 1547517580, -2113432806, 2006013327, 384936665, -1548720786, 1942472956, -1802218899, 1016155671, -142488608, 154687422, -155531893, -867248627, 1791740474, 885162616, -1148622303, -1201666861, 918586356, 699049090, -904991465, 1606777825, -1179087578, -631960540, -727202091, -1418599809, 951251736, -1710904778, -1273525053, 6152453, 253671586, -1466184048, -1784337863, 2020127467, -446082084, 633452042, 1984850175, -670577335, -1082212642, 1652679820, -1739351925
[17:37:41.532] Number of chunks: 1
[17:37:41.532] getGlobalsAndPackagesXApply() ...
[17:37:41.532]  - future.globals: TRUE
[17:37:41.533] getGlobalsAndPackages() ...
[17:37:41.533] Searching for globals...
[17:37:41.535] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.535] Searching for globals ... DONE
[17:37:41.535] Resolving globals: FALSE
[17:37:41.536] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.537] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.537] - globals: [1] ‘FUN’
[17:37:41.537] 
[17:37:41.537] getGlobalsAndPackages() ... DONE
[17:37:41.537]  - globals found/used: [n=1] ‘FUN’
[17:37:41.537]  - needed namespaces: [n=0] 
[17:37:41.537] Finding globals ... DONE
[17:37:41.537]  - use_args: TRUE
[17:37:41.537]  - Getting '...' globals ...
[17:37:41.538] resolve() on list ...
[17:37:41.538]  recursive: 0
[17:37:41.538]  length: 1
[17:37:41.539]  elements: ‘...’
[17:37:41.539]  length: 0 (resolved future 1)
[17:37:41.539] resolve() on list ... DONE
[17:37:41.539]    - '...' content: [n=0] 
[17:37:41.539] List of 1
[17:37:41.539]  $ ...: list()
[17:37:41.539]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.539]  - attr(*, "where")=List of 1
[17:37:41.539]   ..$ ...:<environment: 0x5640be4e17e8> 
[17:37:41.539]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.539]  - attr(*, "resolved")= logi TRUE
[17:37:41.539]  - attr(*, "total_size")= num NA
[17:37:41.543]  - Getting '...' globals ... DONE
[17:37:41.544] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.544] List of 2
[17:37:41.544]  $ ...future.FUN:function (...)  
[17:37:41.544]  $ ...          : list()
[17:37:41.544]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.544]  - attr(*, "where")=List of 2
[17:37:41.544]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.544]   ..$ ...          :<environment: 0x5640be4e17e8> 
[17:37:41.544]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.544]  - attr(*, "resolved")= logi FALSE
[17:37:41.544]  - attr(*, "total_size")= num 616
[17:37:41.546] Packages to be attached in all futures: [n=0] 
[17:37:41.546] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.547] Number of futures (= number of chunks): 1
[17:37:41.547] Launching 1 futures (chunks) ...
[17:37:41.547] Chunk #1 of 1 ...
[17:37:41.547]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.547] getGlobalsAndPackages() ...
[17:37:41.547] Searching for globals...
[17:37:41.548] 
[17:37:41.548] Searching for globals ... DONE
[17:37:41.548] - globals: [0] <none>
[17:37:41.548] getGlobalsAndPackages() ... DONE
[17:37:41.548]    + additional globals found: [n=0] 
[17:37:41.548]    + additional namespaces needed: [n=0] 
[17:37:41.548]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.548]  - seeds: [5] <seeds>
[17:37:41.548]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.549] getGlobalsAndPackages() ...
[17:37:41.549] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.549] Resolving globals: FALSE
[17:37:41.549] Tweak future expression to call with '...' arguments ...
[17:37:41.549] {
[17:37:41.549]     do.call(function(...) {
[17:37:41.549]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.549]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.549]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.549]             on.exit(options(oopts), add = TRUE)
[17:37:41.549]         }
[17:37:41.549]         {
[17:37:41.549]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.549]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.549]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.549]                   envir = globalenv(), inherits = FALSE)
[17:37:41.549]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.549]             })
[17:37:41.549]         }
[17:37:41.549]     }, args = future.call.arguments)
[17:37:41.549] }
[17:37:41.549] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.550] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.550] 
[17:37:41.550] getGlobalsAndPackages() ... DONE
[17:37:41.551] run() for ‘Future’ ...
[17:37:41.551] - state: ‘created’
[17:37:41.551] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:37:41.551] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.551] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:37:41.551]   - Field: ‘label’
[17:37:41.551]   - Field: ‘local’
[17:37:41.552]   - Field: ‘owner’
[17:37:41.552]   - Field: ‘envir’
[17:37:41.552]   - Field: ‘packages’
[17:37:41.552]   - Field: ‘gc’
[17:37:41.552]   - Field: ‘conditions’
[17:37:41.552]   - Field: ‘expr’
[17:37:41.552]   - Field: ‘uuid’
[17:37:41.552]   - Field: ‘seed’
[17:37:41.552]   - Field: ‘version’
[17:37:41.552]   - Field: ‘result’
[17:37:41.552]   - Field: ‘asynchronous’
[17:37:41.553]   - Field: ‘calls’
[17:37:41.553]   - Field: ‘globals’
[17:37:41.553]   - Field: ‘stdout’
[17:37:41.553]   - Field: ‘earlySignal’
[17:37:41.553]   - Field: ‘lazy’
[17:37:41.553]   - Field: ‘state’
[17:37:41.553] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:37:41.553] - Launch lazy future ...
[17:37:41.554] Packages needed by the future expression (n = 0): <none>
[17:37:41.556] Packages needed by future strategies (n = 0): <none>
[17:37:41.557] {
[17:37:41.557]     {
[17:37:41.557]         {
[17:37:41.557]             ...future.startTime <- base::Sys.time()
[17:37:41.557]             {
[17:37:41.557]                 {
[17:37:41.557]                   {
[17:37:41.557]                     base::local({
[17:37:41.557]                       has_future <- base::requireNamespace("future", 
[17:37:41.557]                         quietly = TRUE)
[17:37:41.557]                       if (has_future) {
[17:37:41.557]                         ns <- base::getNamespace("future")
[17:37:41.557]                         version <- ns[[".package"]][["version"]]
[17:37:41.557]                         if (is.null(version)) 
[17:37:41.557]                           version <- utils::packageVersion("future")
[17:37:41.557]                       }
[17:37:41.557]                       else {
[17:37:41.557]                         version <- NULL
[17:37:41.557]                       }
[17:37:41.557]                       if (!has_future || version < "1.8.0") {
[17:37:41.557]                         info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.557]                           "", base::R.version$version.string), 
[17:37:41.557]                           platform = base::sprintf("%s (%s-bit)", 
[17:37:41.557]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.557]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.557]                             "release", "version")], collapse = " "), 
[17:37:41.557]                           hostname = base::Sys.info()[["nodename"]])
[17:37:41.557]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.557]                           info)
[17:37:41.557]                         info <- base::paste(info, collapse = "; ")
[17:37:41.557]                         if (!has_future) {
[17:37:41.557]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.557]                             info)
[17:37:41.557]                         }
[17:37:41.557]                         else {
[17:37:41.557]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.557]                             info, version)
[17:37:41.557]                         }
[17:37:41.557]                         base::stop(msg)
[17:37:41.557]                       }
[17:37:41.557]                     })
[17:37:41.557]                   }
[17:37:41.557]                   ...future.strategy.old <- future::plan("list")
[17:37:41.557]                   options(future.plan = NULL)
[17:37:41.557]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.557]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.557]                 }
[17:37:41.557]                 ...future.workdir <- getwd()
[17:37:41.557]             }
[17:37:41.557]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.557]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.557]         }
[17:37:41.557]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.557]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:41.557]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.557]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.557]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.557]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.557]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.557]             base::names(...future.oldOptions))
[17:37:41.557]     }
[17:37:41.557]     if (FALSE) {
[17:37:41.557]     }
[17:37:41.557]     else {
[17:37:41.557]         if (TRUE) {
[17:37:41.557]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.557]                 open = "w")
[17:37:41.557]         }
[17:37:41.557]         else {
[17:37:41.557]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.557]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.557]         }
[17:37:41.557]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.557]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.557]             base::sink(type = "output", split = FALSE)
[17:37:41.557]             base::close(...future.stdout)
[17:37:41.557]         }, add = TRUE)
[17:37:41.557]     }
[17:37:41.557]     ...future.frame <- base::sys.nframe()
[17:37:41.557]     ...future.conditions <- base::list()
[17:37:41.557]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.557]     if (FALSE) {
[17:37:41.557]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.557]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.557]     }
[17:37:41.557]     ...future.result <- base::tryCatch({
[17:37:41.557]         base::withCallingHandlers({
[17:37:41.557]             ...future.value <- base::withVisible(base::local({
[17:37:41.557]                 do.call(function(...) {
[17:37:41.557]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.557]                   if (!identical(...future.globals.maxSize.org, 
[17:37:41.557]                     ...future.globals.maxSize)) {
[17:37:41.557]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.557]                     on.exit(options(oopts), add = TRUE)
[17:37:41.557]                   }
[17:37:41.557]                   {
[17:37:41.557]                     lapply(seq_along(...future.elements_ii), 
[17:37:41.557]                       FUN = function(jj) {
[17:37:41.557]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.557]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.557]                           envir = globalenv(), inherits = FALSE)
[17:37:41.557]                         ...future.FUN(...future.X_jj, ...)
[17:37:41.557]                       })
[17:37:41.557]                   }
[17:37:41.557]                 }, args = future.call.arguments)
[17:37:41.557]             }))
[17:37:41.557]             future::FutureResult(value = ...future.value$value, 
[17:37:41.557]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.557]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.557]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.557]                     ...future.globalenv.names))
[17:37:41.557]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.557]         }, condition = base::local({
[17:37:41.557]             c <- base::c
[17:37:41.557]             inherits <- base::inherits
[17:37:41.557]             invokeRestart <- base::invokeRestart
[17:37:41.557]             length <- base::length
[17:37:41.557]             list <- base::list
[17:37:41.557]             seq.int <- base::seq.int
[17:37:41.557]             signalCondition <- base::signalCondition
[17:37:41.557]             sys.calls <- base::sys.calls
[17:37:41.557]             `[[` <- base::`[[`
[17:37:41.557]             `+` <- base::`+`
[17:37:41.557]             `<<-` <- base::`<<-`
[17:37:41.557]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.557]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.557]                   3L)]
[17:37:41.557]             }
[17:37:41.557]             function(cond) {
[17:37:41.557]                 is_error <- inherits(cond, "error")
[17:37:41.557]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.557]                   NULL)
[17:37:41.557]                 if (is_error) {
[17:37:41.557]                   sessionInformation <- function() {
[17:37:41.557]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.557]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.557]                       search = base::search(), system = base::Sys.info())
[17:37:41.557]                   }
[17:37:41.557]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.557]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.557]                     cond$call), session = sessionInformation(), 
[17:37:41.557]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.557]                   signalCondition(cond)
[17:37:41.557]                 }
[17:37:41.557]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.557]                 "immediateCondition"))) {
[17:37:41.557]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.557]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.557]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.557]                   if (TRUE && !signal) {
[17:37:41.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.557]                     {
[17:37:41.557]                       inherits <- base::inherits
[17:37:41.557]                       invokeRestart <- base::invokeRestart
[17:37:41.557]                       is.null <- base::is.null
[17:37:41.557]                       muffled <- FALSE
[17:37:41.557]                       if (inherits(cond, "message")) {
[17:37:41.557]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.557]                         if (muffled) 
[17:37:41.557]                           invokeRestart("muffleMessage")
[17:37:41.557]                       }
[17:37:41.557]                       else if (inherits(cond, "warning")) {
[17:37:41.557]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.557]                         if (muffled) 
[17:37:41.557]                           invokeRestart("muffleWarning")
[17:37:41.557]                       }
[17:37:41.557]                       else if (inherits(cond, "condition")) {
[17:37:41.557]                         if (!is.null(pattern)) {
[17:37:41.557]                           computeRestarts <- base::computeRestarts
[17:37:41.557]                           grepl <- base::grepl
[17:37:41.557]                           restarts <- computeRestarts(cond)
[17:37:41.557]                           for (restart in restarts) {
[17:37:41.557]                             name <- restart$name
[17:37:41.557]                             if (is.null(name)) 
[17:37:41.557]                               next
[17:37:41.557]                             if (!grepl(pattern, name)) 
[17:37:41.557]                               next
[17:37:41.557]                             invokeRestart(restart)
[17:37:41.557]                             muffled <- TRUE
[17:37:41.557]                             break
[17:37:41.557]                           }
[17:37:41.557]                         }
[17:37:41.557]                       }
[17:37:41.557]                       invisible(muffled)
[17:37:41.557]                     }
[17:37:41.557]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.557]                   }
[17:37:41.557]                 }
[17:37:41.557]                 else {
[17:37:41.557]                   if (TRUE) {
[17:37:41.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.557]                     {
[17:37:41.557]                       inherits <- base::inherits
[17:37:41.557]                       invokeRestart <- base::invokeRestart
[17:37:41.557]                       is.null <- base::is.null
[17:37:41.557]                       muffled <- FALSE
[17:37:41.557]                       if (inherits(cond, "message")) {
[17:37:41.557]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.557]                         if (muffled) 
[17:37:41.557]                           invokeRestart("muffleMessage")
[17:37:41.557]                       }
[17:37:41.557]                       else if (inherits(cond, "warning")) {
[17:37:41.557]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.557]                         if (muffled) 
[17:37:41.557]                           invokeRestart("muffleWarning")
[17:37:41.557]                       }
[17:37:41.557]                       else if (inherits(cond, "condition")) {
[17:37:41.557]                         if (!is.null(pattern)) {
[17:37:41.557]                           computeRestarts <- base::computeRestarts
[17:37:41.557]                           grepl <- base::grepl
[17:37:41.557]                           restarts <- computeRestarts(cond)
[17:37:41.557]                           for (restart in restarts) {
[17:37:41.557]                             name <- restart$name
[17:37:41.557]                             if (is.null(name)) 
[17:37:41.557]                               next
[17:37:41.557]                             if (!grepl(pattern, name)) 
[17:37:41.557]                               next
[17:37:41.557]                             invokeRestart(restart)
[17:37:41.557]                             muffled <- TRUE
[17:37:41.557]                             break
[17:37:41.557]                           }
[17:37:41.557]                         }
[17:37:41.557]                       }
[17:37:41.557]                       invisible(muffled)
[17:37:41.557]                     }
[17:37:41.557]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.557]                   }
[17:37:41.557]                 }
[17:37:41.557]             }
[17:37:41.557]         }))
[17:37:41.557]     }, error = function(ex) {
[17:37:41.557]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.557]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.557]                 ...future.rng), started = ...future.startTime, 
[17:37:41.557]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.557]             version = "1.8"), class = "FutureResult")
[17:37:41.557]     }, finally = {
[17:37:41.557]         if (!identical(...future.workdir, getwd())) 
[17:37:41.557]             setwd(...future.workdir)
[17:37:41.557]         {
[17:37:41.557]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.557]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.557]             }
[17:37:41.557]             base::options(...future.oldOptions)
[17:37:41.557]             if (.Platform$OS.type == "windows") {
[17:37:41.557]                 old_names <- names(...future.oldEnvVars)
[17:37:41.557]                 envs <- base::Sys.getenv()
[17:37:41.557]                 names <- names(envs)
[17:37:41.557]                 common <- intersect(names, old_names)
[17:37:41.557]                 added <- setdiff(names, old_names)
[17:37:41.557]                 removed <- setdiff(old_names, names)
[17:37:41.557]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.557]                   envs[common]]
[17:37:41.557]                 NAMES <- toupper(changed)
[17:37:41.557]                 args <- list()
[17:37:41.557]                 for (kk in seq_along(NAMES)) {
[17:37:41.557]                   name <- changed[[kk]]
[17:37:41.557]                   NAME <- NAMES[[kk]]
[17:37:41.557]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.557]                     next
[17:37:41.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.557]                 }
[17:37:41.557]                 NAMES <- toupper(added)
[17:37:41.557]                 for (kk in seq_along(NAMES)) {
[17:37:41.557]                   name <- added[[kk]]
[17:37:41.557]                   NAME <- NAMES[[kk]]
[17:37:41.557]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.557]                     next
[17:37:41.557]                   args[[name]] <- ""
[17:37:41.557]                 }
[17:37:41.557]                 NAMES <- toupper(removed)
[17:37:41.557]                 for (kk in seq_along(NAMES)) {
[17:37:41.557]                   name <- removed[[kk]]
[17:37:41.557]                   NAME <- NAMES[[kk]]
[17:37:41.557]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.557]                     next
[17:37:41.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.557]                 }
[17:37:41.557]                 if (length(args) > 0) 
[17:37:41.557]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.557]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.557]             }
[17:37:41.557]             else {
[17:37:41.557]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.557]             }
[17:37:41.557]             {
[17:37:41.557]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.557]                   0L) {
[17:37:41.557]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.557]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.557]                   base::options(opts)
[17:37:41.557]                 }
[17:37:41.557]                 {
[17:37:41.557]                   {
[17:37:41.557]                     base::assign(".Random.seed", c(10403L, 16L, 
[17:37:41.557]                     676633677L, 586501383L, -915836690L, -542514744L, 
[17:37:41.557]                     -51878197L, 1872033577L, -829177992L, -2124421978L, 
[17:37:41.557]                     1646552769L, 145121107L, 1943067650L, -2201292L, 
[17:37:41.557]                     2090721975L, -1086390611L, 989622212L, 556128234L, 
[17:37:41.557]                     -1526106027L, 886793711L, -422752778L, -369444064L, 
[17:37:41.557]                     2102514915L, 1998082433L, 1147316208L, -101923186L, 
[17:37:41.557]                     790899193L, 1632838539L, -53350470L, -1708704068L, 
[17:37:41.557]                     1920128511L, -458255531L, 752116844L, 894468290L, 
[17:37:41.557]                     -1769053411L, 201619863L, -1361149698L, -1637846344L, 
[17:37:41.557]                     -887051109L, -861734151L, -539759544L, -1198387338L, 
[17:37:41.557]                     85482161L, 424245987L, 430193074L, 1327524356L, 
[17:37:41.557]                     2135621959L, -228479971L, 1739072148L, 624953914L, 
[17:37:41.557]                     1071678597L, -721995425L, -948913690L, 1318291568L, 
[17:37:41.557]                     369367955L, -558461903L, 1443791584L, -571911298L, 
[17:37:41.557]                     1044482569L, -178224581L, -1361282038L, 1057252332L, 
[17:37:41.557]                     1143834735L, -1467324507L, -904794276L, -301812942L, 
[17:37:41.557]                     -1523058131L, -1151600409L, 2019121678L, 
[17:37:41.557]                     -2014541848L, 1868683755L, -795637111L, -1615125992L, 
[17:37:41.557]                     -662632122L, 1288021921L, -1864521165L, 20973474L, 
[17:37:41.557]                     -94338412L, 2139805975L, 414992141L, -523534812L, 
[17:37:41.557]                     -931699190L, -1931452555L, 1200237263L, -2052837930L, 
[17:37:41.557]                     -608149120L, 951663043L, 1067020129L, -84257328L, 
[17:37:41.557]                     -577387218L, -1248086823L, 1042075371L, -59970726L, 
[17:37:41.557]                     368643356L, 1509542943L, -1717112715L, 1220013324L, 
[17:37:41.557]                     -870203166L, 194955709L, 280268343L, 1939547358L, 
[17:37:41.557]                     -1176362984L, 1743265659L, 1079066393L, -2108111960L, 
[17:37:41.557]                     -635817130L, 763849681L, 802946947L, -177239534L, 
[17:37:41.557]                     1013595556L, 2112719207L, 1801033405L, 323894836L, 
[17:37:41.557]                     847816090L, -1530297883L, 1573301631L, 749421830L, 
[17:37:41.557]                     2103795344L, 84596531L, -1277254447L, -893788544L, 
[17:37:41.557]                     1434199902L, -1184922455L, -2098071717L, 
[17:37:41.557]                     1276005738L, 1248149516L, -1650182065L, -1914162939L, 
[17:37:41.557]                     -2091087428L, -113386350L, 28682125L, -273571897L, 
[17:37:41.557]                     257295534L, -1337711352L, 625054475L, -1543143959L, 
[17:37:41.557]                     -1633596744L, 931843430L, -1474836991L, 13676691L, 
[17:37:41.557]                     -1220392126L, 601687284L, -1524961033L, 1724328173L, 
[17:37:41.557]                     985238404L, -2115861078L, -2119984363L, 253938095L, 
[17:37:41.557]                     320719286L, -478728224L, -563265757L, 1026650177L, 
[17:37:41.557]                     -768267472L, 1032479054L, 460592057L, 191612363L, 
[17:37:41.557]                     262403706L, -1239565444L, 1674253247L, 1028668565L, 
[17:37:41.557]                     -1721220436L, -719724414L, 633008221L, 868501335L, 
[17:37:41.557]                     -1623360962L, 76091000L, -968282789L, -817455943L, 
[17:37:41.557]                     1499985160L, 279934902L, -882434831L, 1773878051L, 
[17:37:41.557]                     -1129202318L, -482404412L, -2019888249L, 
[17:37:41.557]                     1525064029L, 1481138004L, 660350330L, -1165598523L, 
[17:37:41.557]                     154346015L, -784751194L, -2091579600L, 1934101971L, 
[17:37:41.557]                     1361476593L, 1008450848L, -1440703554L, -1806167095L, 
[17:37:41.557]                     22668155L, -503938742L, -1919677012L, -2051458897L, 
[17:37:41.557]                     716046949L, -1931593188L, -399264654L, 923495149L, 
[17:37:41.557]                     400783143L, 1871491918L, 1317813160L, -1889189973L, 
[17:37:41.557]                     2144521417L, 505535704L, -1474125434L, -1868924831L, 
[17:37:41.557]                     -1698629133L, 20588642L, -1500324140L, 1091405783L, 
[17:37:41.557]                     -170699315L, 847360356L, 1047065930L, -799181643L, 
[17:37:41.557]                     -2092887025L, -132027114L, 2109511616L, -944454781L, 
[17:37:41.557]                     -1400327775L, -1172267632L, 894053998L, 996055065L, 
[17:37:41.557]                     -95468373L, 574412954L, 1308821596L, 1163904351L, 
[17:37:41.557]                     -726495435L, 1387610828L, 1220476962L, 129092221L, 
[17:37:41.557]                     1286430583L, 1619759262L, -470935820L, 585315730L, 
[17:37:41.557]                     1054007392L, -2117114612L, 880448224L, 493540706L, 
[17:37:41.557]                     135350952L, -1927974324L, -1016959620L, 424988978L, 
[17:37:41.557]                     -1810916240L, -2062785724L, -1430300200L, 
[17:37:41.557]                     -1379062662L, -1036050896L, 184660668L, 27347796L, 
[17:37:41.557]                     1891696706L, 977258912L, -1687537988L, -2032716336L, 
[17:37:41.557]                     1326796130L, -189743128L, -23195700L, -498525444L, 
[17:37:41.557]                     562302450L, 771490944L, -1654816524L, -1673108856L, 
[17:37:41.557]                     -340679878L, -506609840L, 352449132L, 2034202772L, 
[17:37:41.557]                     666657106L, 1134880480L, -1241563444L, 1137574048L, 
[17:37:41.557]                     -1392261246L, 493037288L, -1277157652L, -1698299844L, 
[17:37:41.557]                     387657330L, -93938576L, 1663205924L, -1434570696L, 
[17:37:41.557]                     -602417126L, -1838754096L, 1436310588L, -1069742956L, 
[17:37:41.557]                     -1980356478L, 131633088L, 2113128764L, -2017620336L, 
[17:37:41.557]                     -2079160286L, -1567029240L, -2059092852L, 
[17:37:41.557]                     -1356639204L, -423296366L, 342708352L, 468476948L, 
[17:37:41.557]                     -1022836440L, -761497030L, 1405916368L, -1076347796L, 
[17:37:41.557]                     144039604L, -784521198L, -591974432L, -924030004L, 
[17:37:41.557]                     -1917352480L, -523404766L, 945419560L, -1469387508L, 
[17:37:41.557]                     -1643477444L, -223373070L, -862992656L, -1939398844L, 
[17:37:41.557]                     -1569814952L, 835381818L, 298340080L, -289998660L, 
[17:37:41.557]                     691649044L, 758185154L, 1445301344L, -1395741316L, 
[17:37:41.557]                     -2054194992L, 367193122L, 1848075944L, -1295733876L, 
[17:37:41.557]                     434558396L, 1654989874L, 969101120L, 392570036L, 
[17:37:41.557]                     -657940664L, -472427846L, -1532117232L, -1807301396L, 
[17:37:41.557]                     -1688826796L, 1100623634L, -1422295136L, 
[17:37:41.557]                     -1768602676L, -2006967456L, 1666319554L, 
[17:37:41.557]                     1949072936L, -92389972L, -413963460L, 1661327218L, 
[17:37:41.557]                     1384857392L, 421926436L, -2091815880L, 1645865178L, 
[17:37:41.557]                     -416154224L, 1602788092L, 907133844L, 412426050L, 
[17:37:41.557]                     -1007933952L, 585985596L, -2026778032L, -310296926L, 
[17:37:41.557]                     342420296L, 1333092876L, 1997838556L, -11429294L, 
[17:37:41.557]                     -1190184832L, 1114202964L, 913788392L, -1516990726L, 
[17:37:41.557]                     468749136L, -652276692L, -913974924L, -727050606L, 
[17:37:41.557]                     -771359136L, -1716873588L, -628205728L, -2023791902L, 
[17:37:41.557]                     106991784L, 604789964L, 952971772L, 317884338L, 
[17:37:41.557]                     1461266928L, 534877636L, 1562243928L, 1608044410L, 
[17:37:41.557]                     -413719120L, -1155088964L, 649800788L, 99971010L, 
[17:37:41.557]                     -2105166048L, -1479588932L, 384761424L, 1848457698L, 
[17:37:41.557]                     205170024L, 1074468172L, -973906692L, 378454770L, 
[17:37:41.557]                     -833164544L, -460894604L, -2092155896L, 2144553402L, 
[17:37:41.557]                     1695009744L, -1105193492L, -1191420012L, 
[17:37:41.557]                     989712082L, 514206304L, 1440470348L, 820949280L, 
[17:37:41.557]                     -831977854L, -1203649048L, 156244972L, 604764732L, 
[17:37:41.557]                     359753330L, 933485424L, -1870931676L, 1172916792L, 
[17:37:41.557]                     1350977946L, -1519161904L, 2053483964L, 2017739924L, 
[17:37:41.557]                     375492738L, 1926829504L, -136411332L, -1023240048L, 
[17:37:41.557]                     1515973410L, -2119589368L, -1102749428L, 
[17:37:41.557]                     860252572L, 1783257618L, 6356864L, -131886316L, 
[17:37:41.557]                     1767962920L, 109035578L, 417395664L, -1175730580L, 
[17:37:41.557]                     -1807797708L, 897046162L, -395006624L, 537125196L, 
[17:37:41.557]                     1683903456L, 1302159778L, -2077351512L, -1319616884L, 
[17:37:41.557]                     165418428L, -945659278L, -43021328L, -566085052L, 
[17:37:41.557]                     -1485348776L, -1046686662L, -994927504L, 
[17:37:41.557]                     165987388L, 40459540L, -1349401918L, 1977136864L, 
[17:37:41.557]                     257031292L, 1559208656L, -590888542L, 191362088L, 
[17:37:41.557]                     438892300L, -1295899204L, -1560819918L, -1791144256L, 
[17:37:41.557]                     1959602228L, -1286975800L, -1526650694L, 
[17:37:41.557]                     -665615728L, 1251297004L, -1225239980L, 2023067282L, 
[17:37:41.557]                     -7432928L, -478174112L, -155582007L, 1817491707L, 
[17:37:41.557]                     409470668L, 970898266L, -399524273L, 40352537L, 
[17:37:41.557]                     1227572526L, -231817412L, -1288831827L, -2143801513L, 
[17:37:41.557]                     736010912L, -1470665730L, 1684507339L, -513733427L, 
[17:37:41.557]                     -1103097862L, 946562104L, -747256351L, 711077523L, 
[17:37:41.557]                     88095924L, -202168894L, -1528941097L, -722478559L, 
[17:37:41.557]                     231606758L, -2096930588L, -765313003L, 747184191L, 
[17:37:41.557]                     104738776L, -602074634L, 321909251L, -788552379L, 
[17:37:41.557]                     -963661470L, 91953872L, -525273607L, 540769579L, 
[17:37:41.557]                     292789916L, 1273367754L, 689317311L, 1039169801L, 
[17:37:41.557]                     455842334L, -303917108L, -1780005475L, -687611865L, 
[17:37:41.557]                     -943600048L, -469255442L, 187196315L, -1419726339L, 
[17:37:41.557]                     -400685846L, -1187983480L, 2122746161L, 1739356579L, 
[17:37:41.557]                     -1066127964L, -437776302L, 729531303L, -485664783L, 
[17:37:41.557]                     1894085430L, -239337516L, 1393493349L, 1712286063L, 
[17:37:41.557]                     -1922280536L, -442550010L, 485414963L, 21032597L, 
[17:37:41.557]                     1344857842L, 67516224L, 2003969193L, -1848616677L, 
[17:37:41.557]                     570744556L, -1123695878L, 716999471L, 974787385L, 
[17:37:41.557]                     410862926L, -2066828388L, 1893677325L, -441771145L, 
[17:37:41.557]                     975433600L, -1660764706L, -319479125L, 2015206829L, 
[17:37:41.557]                     418165274L, 2141029592L, -1011160767L, 759501299L, 
[17:37:41.557]                     1681373204L, -869466718L, -2017396041L, 1875121281L, 
[17:37:41.557]                     1775985798L, 1203921092L, -843448843L, 956672095L, 
[17:37:41.557]                     -296996168L, -1111274602L, 603543971L, -201437851L, 
[17:37:41.557]                     783314050L, -918895120L, -762653799L, -1232038517L, 
[17:37:41.557]                     58867836L, -863059286L, -1807278881L, 1815673449L, 
[17:37:41.557]                     1947252862L, -2050703252L, -1468376899L, 
[17:37:41.557]                     72018311L, -403071632L, -1816319986L, -338819781L, 
[17:37:41.557]                     -1863734755L, -1967296822L, 1483229672L, 
[17:37:41.557]                     -330981679L, -503252285L, -180325948L, -729278862L, 
[17:37:41.557]                     1246775111L, 2024830737L, -1815909738L, 911085556L, 
[17:37:41.557]                     540621189L, -1210051377L, -596333112L, 2006205542L, 
[17:37:41.557]                     793043603L, 526649845L, 941900754L, -1388554208L, 
[17:37:41.557]                     416510473L, -633926853L, 1547517580L, -2113432806L, 
[17:37:41.557]                     2006013327L, 384936665L, -1548720786L, 1942472956L, 
[17:37:41.557]                     -1802218899L, 1016155671L, -142488608L, 154687422L, 
[17:37:41.557]                     -155531893L, -867248627L, 1791740474L, 885162616L, 
[17:37:41.557]                     -1148622303L, -1201666861L, 918586356L, 699049090L, 
[17:37:41.557]                     -904991465L, 1606777825L, -1179087578L, -631960540L, 
[17:37:41.557]                     -727202091L, -1418599809L, 951251736L, -1710904778L, 
[17:37:41.557]                     -1273525053L, 6152453L, 253671586L, -1466184048L, 
[17:37:41.557]                     -1784337863L, 2020127467L, -446082084L, 633452042L, 
[17:37:41.557]                     1984850175L, -670577335L, -1082212642L, 1652679820L, 
[17:37:41.557]                     -1739351925L), envir = base::globalenv(), 
[17:37:41.557]                       inherits = FALSE)
[17:37:41.557]                     NULL
[17:37:41.557]                   }
[17:37:41.557]                   options(future.plan = NULL)
[17:37:41.557]                   if (is.na(NA_character_)) 
[17:37:41.557]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.557]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.557]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.557]                     .init = FALSE)
[17:37:41.557]                 }
[17:37:41.557]             }
[17:37:41.557]         }
[17:37:41.557]     })
[17:37:41.557]     if (TRUE) {
[17:37:41.557]         base::sink(type = "output", split = FALSE)
[17:37:41.557]         if (TRUE) {
[17:37:41.557]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.557]         }
[17:37:41.557]         else {
[17:37:41.557]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.557]         }
[17:37:41.557]         base::close(...future.stdout)
[17:37:41.557]         ...future.stdout <- NULL
[17:37:41.557]     }
[17:37:41.557]     ...future.result$conditions <- ...future.conditions
[17:37:41.557]     ...future.result$finished <- base::Sys.time()
[17:37:41.557]     ...future.result
[17:37:41.557] }
[17:37:41.560] assign_globals() ...
[17:37:41.560] List of 5
[17:37:41.560]  $ ...future.FUN            :function (...)  
[17:37:41.560]  $ future.call.arguments    : list()
[17:37:41.560]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.560]  $ ...future.elements_ii    :List of 5
[17:37:41.560]   ..$ : int 0
[17:37:41.560]   ..$ : int 0
[17:37:41.560]   ..$ : int 0
[17:37:41.560]   ..$ : int 0
[17:37:41.560]   ..$ : int 0
[17:37:41.560]  $ ...future.seeds_ii       :List of 5
[17:37:41.560]   ..$ : int [1:7] 10407 1279057665 44980795 321001754 -1350639505 -830481809 -63188328
[17:37:41.560]   ..$ : int [1:7] 10407 690570648 -7995640 -1018798725 -225627900 -1464024407 -938158722
[17:37:41.560]   ..$ : int [1:7] 10407 650029905 551723922 -490615652 -1205477439 -1696677641 499211084
[17:37:41.560]   ..$ : int [1:7] 10407 933978260 -1793946386 982315552 -667964552 1972082782 -1430293120
[17:37:41.560]   ..$ : int [1:7] 10407 -513571546 612683905 1449318818 1961209676 53570704 1383948833
[17:37:41.560]  $ ...future.globals.maxSize: NULL
[17:37:41.560]  - attr(*, "where")=List of 5
[17:37:41.560]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.560]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.560]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.560]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.560]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.560]  - attr(*, "resolved")= logi FALSE
[17:37:41.560]  - attr(*, "total_size")= num 616
[17:37:41.560]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.560]  - attr(*, "already-done")= logi TRUE
[17:37:41.567] - reassign environment for ‘...future.FUN’
[17:37:41.567] - copied ‘...future.FUN’ to environment
[17:37:41.567] - copied ‘future.call.arguments’ to environment
[17:37:41.567] - copied ‘...future.elements_ii’ to environment
[17:37:41.567] - copied ‘...future.seeds_ii’ to environment
[17:37:41.567] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.568] assign_globals() ... done
[17:37:41.568] plan(): Setting new future strategy stack:
[17:37:41.568] List of future strategies:
[17:37:41.568] 1. sequential:
[17:37:41.568]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.568]    - tweaked: FALSE
[17:37:41.568]    - call: NULL
[17:37:41.568] plan(): nbrOfWorkers() = 1
[17:37:41.570] plan(): Setting new future strategy stack:
[17:37:41.570] List of future strategies:
[17:37:41.570] 1. sequential:
[17:37:41.570]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.570]    - tweaked: FALSE
[17:37:41.570]    - call: plan(strategy)
[17:37:41.570] plan(): nbrOfWorkers() = 1
[17:37:41.570] SequentialFuture started (and completed)
[17:37:41.571] - Launch lazy future ... done
[17:37:41.571] run() for ‘SequentialFuture’ ... done
[17:37:41.571] Created future:
[17:37:41.571] SequentialFuture:
[17:37:41.571] Label: ‘future_replicate-1’
[17:37:41.571] Expression:
[17:37:41.571] {
[17:37:41.571]     do.call(function(...) {
[17:37:41.571]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.571]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.571]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.571]             on.exit(options(oopts), add = TRUE)
[17:37:41.571]         }
[17:37:41.571]         {
[17:37:41.571]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.571]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.571]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.571]                   envir = globalenv(), inherits = FALSE)
[17:37:41.571]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.571]             })
[17:37:41.571]         }
[17:37:41.571]     }, args = future.call.arguments)
[17:37:41.571] }
[17:37:41.571] Lazy evaluation: FALSE
[17:37:41.571] Asynchronous evaluation: FALSE
[17:37:41.571] Local evaluation: TRUE
[17:37:41.571] Environment: R_GlobalEnv
[17:37:41.571] Capture standard output: TRUE
[17:37:41.571] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.571] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.571] Packages: <none>
[17:37:41.571] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.571] Resolved: TRUE
[17:37:41.571] Value: 280 bytes of class ‘list’
[17:37:41.571] Early signaling: FALSE
[17:37:41.571] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.571] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.572] Chunk #1 of 1 ... DONE
[17:37:41.573] Launching 1 futures (chunks) ... DONE
[17:37:41.573] Resolving 1 futures (chunks) ...
[17:37:41.573] resolve() on list ...
[17:37:41.573]  recursive: 0
[17:37:41.573]  length: 1
[17:37:41.573] 
[17:37:41.573] resolved() for ‘SequentialFuture’ ...
[17:37:41.573] - state: ‘finished’
[17:37:41.573] - run: TRUE
[17:37:41.574] - result: ‘FutureResult’
[17:37:41.574] resolved() for ‘SequentialFuture’ ... done
[17:37:41.574] Future #1
[17:37:41.574] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:37:41.574] - nx: 1
[17:37:41.574] - relay: TRUE
[17:37:41.574] - stdout: TRUE
[17:37:41.574] - signal: TRUE
[17:37:41.574] - resignal: FALSE
[17:37:41.575] - force: TRUE
[17:37:41.575] - relayed: [n=1] FALSE
[17:37:41.575] - queued futures: [n=1] FALSE
[17:37:41.575]  - until=1
[17:37:41.575]  - relaying element #1
[17:37:41.575] - relayed: [n=1] TRUE
[17:37:41.575] - queued futures: [n=1] TRUE
[17:37:41.575] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:37:41.575]  length: 0 (resolved future 1)
[17:37:41.576] Relaying remaining futures
[17:37:41.576] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.576] - nx: 1
[17:37:41.576] - relay: TRUE
[17:37:41.576] - stdout: TRUE
[17:37:41.576] - signal: TRUE
[17:37:41.576] - resignal: FALSE
[17:37:41.576] - force: TRUE
[17:37:41.576] - relayed: [n=1] TRUE
[17:37:41.576] - queued futures: [n=1] TRUE
 - flush all
[17:37:41.576] - relayed: [n=1] TRUE
[17:37:41.577] - queued futures: [n=1] TRUE
[17:37:41.577] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.577] resolve() on list ... DONE
[17:37:41.577]  - Number of value chunks collected: 1
[17:37:41.577] Resolving 1 futures (chunks) ... DONE
[17:37:41.577] Reducing values from 1 chunks ...
[17:37:41.577]  - Number of values collected after concatenation: 5
[17:37:41.577]  - Number of values expected: 5
[17:37:41.577] Reducing values from 1 chunks ... DONE
[17:37:41.577] future_lapply() ... DONE
[17:37:41.578] future_lapply() ...
[17:37:41.578] Generating random seeds ...
[17:37:41.578] Generating random seed streams for 5 elements ...
[17:37:41.578] Generating random seed streams for 5 elements ... DONE
[17:37:41.578] Generating random seeds ... DONE
[17:37:41.578] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.579] Number of chunks: 1
[17:37:41.579] getGlobalsAndPackagesXApply() ...
[17:37:41.579]  - future.globals: TRUE
[17:37:41.579] getGlobalsAndPackages() ...
[17:37:41.579] Searching for globals...
[17:37:41.580] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.580] Searching for globals ... DONE
[17:37:41.581] Resolving globals: FALSE
[17:37:41.581] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.581] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.581] - globals: [1] ‘FUN’
[17:37:41.581] 
[17:37:41.581] getGlobalsAndPackages() ... DONE
[17:37:41.582]  - globals found/used: [n=1] ‘FUN’
[17:37:41.582]  - needed namespaces: [n=0] 
[17:37:41.582] Finding globals ... DONE
[17:37:41.582]  - use_args: TRUE
[17:37:41.582]  - Getting '...' globals ...
[17:37:41.582] resolve() on list ...
[17:37:41.582]  recursive: 0
[17:37:41.582]  length: 1
[17:37:41.582]  elements: ‘...’
[17:37:41.583]  length: 0 (resolved future 1)
[17:37:41.583] resolve() on list ... DONE
[17:37:41.583]    - '...' content: [n=0] 
[17:37:41.583] List of 1
[17:37:41.583]  $ ...: list()
[17:37:41.583]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.583]  - attr(*, "where")=List of 1
[17:37:41.583]   ..$ ...:<environment: 0x5640c09d5a80> 
[17:37:41.583]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.583]  - attr(*, "resolved")= logi TRUE
[17:37:41.583]  - attr(*, "total_size")= num NA
[17:37:41.587]  - Getting '...' globals ... DONE
[17:37:41.587] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.587] List of 2
[17:37:41.587]  $ ...future.FUN:function (...)  
[17:37:41.587]  $ ...          : list()
[17:37:41.587]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.587]  - attr(*, "where")=List of 2
[17:37:41.587]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.587]   ..$ ...          :<environment: 0x5640c09d5a80> 
[17:37:41.587]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.587]  - attr(*, "resolved")= logi FALSE
[17:37:41.587]  - attr(*, "total_size")= num 616
[17:37:41.590] Packages to be attached in all futures: [n=0] 
[17:37:41.590] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.590] Number of futures (= number of chunks): 1
[17:37:41.590] Launching 1 futures (chunks) ...
[17:37:41.591] Chunk #1 of 1 ...
[17:37:41.591]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.591] getGlobalsAndPackages() ...
[17:37:41.591] Searching for globals...
[17:37:41.591] 
[17:37:41.591] Searching for globals ... DONE
[17:37:41.591] - globals: [0] <none>
[17:37:41.591] getGlobalsAndPackages() ... DONE
[17:37:41.591]    + additional globals found: [n=0] 
[17:37:41.591]    + additional namespaces needed: [n=0] 
[17:37:41.592]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.592]  - seeds: [5] <seeds>
[17:37:41.592]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.592] getGlobalsAndPackages() ...
[17:37:41.592] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.592] Resolving globals: FALSE
[17:37:41.592] Tweak future expression to call with '...' arguments ...
[17:37:41.592] {
[17:37:41.592]     do.call(function(...) {
[17:37:41.592]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.592]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.592]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.592]             on.exit(options(oopts), add = TRUE)
[17:37:41.592]         }
[17:37:41.592]         {
[17:37:41.592]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.592]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.592]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.592]                   envir = globalenv(), inherits = FALSE)
[17:37:41.592]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.592]             })
[17:37:41.592]         }
[17:37:41.592]     }, args = future.call.arguments)
[17:37:41.592] }
[17:37:41.593] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.593] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.593] 
[17:37:41.593] getGlobalsAndPackages() ... DONE
[17:37:41.593] run() for ‘Future’ ...
[17:37:41.593] - state: ‘created’
[17:37:41.594] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:37:41.594] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.594] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:37:41.594]   - Field: ‘label’
[17:37:41.594]   - Field: ‘local’
[17:37:41.594]   - Field: ‘owner’
[17:37:41.594]   - Field: ‘envir’
[17:37:41.594]   - Field: ‘packages’
[17:37:41.594]   - Field: ‘gc’
[17:37:41.595]   - Field: ‘conditions’
[17:37:41.595]   - Field: ‘expr’
[17:37:41.595]   - Field: ‘uuid’
[17:37:41.595]   - Field: ‘seed’
[17:37:41.595]   - Field: ‘version’
[17:37:41.595]   - Field: ‘result’
[17:37:41.595]   - Field: ‘asynchronous’
[17:37:41.595]   - Field: ‘calls’
[17:37:41.595]   - Field: ‘globals’
[17:37:41.595]   - Field: ‘stdout’
[17:37:41.595]   - Field: ‘earlySignal’
[17:37:41.596]   - Field: ‘lazy’
[17:37:41.596]   - Field: ‘state’
[17:37:41.596] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:37:41.596] - Launch lazy future ...
[17:37:41.596] Packages needed by the future expression (n = 0): <none>
[17:37:41.596] Packages needed by future strategies (n = 0): <none>
[17:37:41.596] {
[17:37:41.596]     {
[17:37:41.596]         {
[17:37:41.596]             ...future.startTime <- base::Sys.time()
[17:37:41.596]             {
[17:37:41.596]                 {
[17:37:41.596]                   {
[17:37:41.596]                     base::local({
[17:37:41.596]                       has_future <- base::requireNamespace("future", 
[17:37:41.596]                         quietly = TRUE)
[17:37:41.596]                       if (has_future) {
[17:37:41.596]                         ns <- base::getNamespace("future")
[17:37:41.596]                         version <- ns[[".package"]][["version"]]
[17:37:41.596]                         if (is.null(version)) 
[17:37:41.596]                           version <- utils::packageVersion("future")
[17:37:41.596]                       }
[17:37:41.596]                       else {
[17:37:41.596]                         version <- NULL
[17:37:41.596]                       }
[17:37:41.596]                       if (!has_future || version < "1.8.0") {
[17:37:41.596]                         info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.596]                           "", base::R.version$version.string), 
[17:37:41.596]                           platform = base::sprintf("%s (%s-bit)", 
[17:37:41.596]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.596]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.596]                             "release", "version")], collapse = " "), 
[17:37:41.596]                           hostname = base::Sys.info()[["nodename"]])
[17:37:41.596]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.596]                           info)
[17:37:41.596]                         info <- base::paste(info, collapse = "; ")
[17:37:41.596]                         if (!has_future) {
[17:37:41.596]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.596]                             info)
[17:37:41.596]                         }
[17:37:41.596]                         else {
[17:37:41.596]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.596]                             info, version)
[17:37:41.596]                         }
[17:37:41.596]                         base::stop(msg)
[17:37:41.596]                       }
[17:37:41.596]                     })
[17:37:41.596]                   }
[17:37:41.596]                   ...future.strategy.old <- future::plan("list")
[17:37:41.596]                   options(future.plan = NULL)
[17:37:41.596]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.596]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.596]                 }
[17:37:41.596]                 ...future.workdir <- getwd()
[17:37:41.596]             }
[17:37:41.596]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.596]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.596]         }
[17:37:41.596]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.596]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:41.596]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.596]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.596]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.596]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.596]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.596]             base::names(...future.oldOptions))
[17:37:41.596]     }
[17:37:41.596]     if (FALSE) {
[17:37:41.596]     }
[17:37:41.596]     else {
[17:37:41.596]         if (TRUE) {
[17:37:41.596]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.596]                 open = "w")
[17:37:41.596]         }
[17:37:41.596]         else {
[17:37:41.596]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.596]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.596]         }
[17:37:41.596]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.596]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.596]             base::sink(type = "output", split = FALSE)
[17:37:41.596]             base::close(...future.stdout)
[17:37:41.596]         }, add = TRUE)
[17:37:41.596]     }
[17:37:41.596]     ...future.frame <- base::sys.nframe()
[17:37:41.596]     ...future.conditions <- base::list()
[17:37:41.596]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.596]     if (FALSE) {
[17:37:41.596]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.596]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.596]     }
[17:37:41.596]     ...future.result <- base::tryCatch({
[17:37:41.596]         base::withCallingHandlers({
[17:37:41.596]             ...future.value <- base::withVisible(base::local({
[17:37:41.596]                 do.call(function(...) {
[17:37:41.596]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.596]                   if (!identical(...future.globals.maxSize.org, 
[17:37:41.596]                     ...future.globals.maxSize)) {
[17:37:41.596]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.596]                     on.exit(options(oopts), add = TRUE)
[17:37:41.596]                   }
[17:37:41.596]                   {
[17:37:41.596]                     lapply(seq_along(...future.elements_ii), 
[17:37:41.596]                       FUN = function(jj) {
[17:37:41.596]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.596]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.596]                           envir = globalenv(), inherits = FALSE)
[17:37:41.596]                         ...future.FUN(...future.X_jj, ...)
[17:37:41.596]                       })
[17:37:41.596]                   }
[17:37:41.596]                 }, args = future.call.arguments)
[17:37:41.596]             }))
[17:37:41.596]             future::FutureResult(value = ...future.value$value, 
[17:37:41.596]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.596]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.596]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.596]                     ...future.globalenv.names))
[17:37:41.596]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.596]         }, condition = base::local({
[17:37:41.596]             c <- base::c
[17:37:41.596]             inherits <- base::inherits
[17:37:41.596]             invokeRestart <- base::invokeRestart
[17:37:41.596]             length <- base::length
[17:37:41.596]             list <- base::list
[17:37:41.596]             seq.int <- base::seq.int
[17:37:41.596]             signalCondition <- base::signalCondition
[17:37:41.596]             sys.calls <- base::sys.calls
[17:37:41.596]             `[[` <- base::`[[`
[17:37:41.596]             `+` <- base::`+`
[17:37:41.596]             `<<-` <- base::`<<-`
[17:37:41.596]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.596]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.596]                   3L)]
[17:37:41.596]             }
[17:37:41.596]             function(cond) {
[17:37:41.596]                 is_error <- inherits(cond, "error")
[17:37:41.596]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.596]                   NULL)
[17:37:41.596]                 if (is_error) {
[17:37:41.596]                   sessionInformation <- function() {
[17:37:41.596]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.596]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.596]                       search = base::search(), system = base::Sys.info())
[17:37:41.596]                   }
[17:37:41.596]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.596]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.596]                     cond$call), session = sessionInformation(), 
[17:37:41.596]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.596]                   signalCondition(cond)
[17:37:41.596]                 }
[17:37:41.596]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.596]                 "immediateCondition"))) {
[17:37:41.596]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.596]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.596]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.596]                   if (TRUE && !signal) {
[17:37:41.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.596]                     {
[17:37:41.596]                       inherits <- base::inherits
[17:37:41.596]                       invokeRestart <- base::invokeRestart
[17:37:41.596]                       is.null <- base::is.null
[17:37:41.596]                       muffled <- FALSE
[17:37:41.596]                       if (inherits(cond, "message")) {
[17:37:41.596]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.596]                         if (muffled) 
[17:37:41.596]                           invokeRestart("muffleMessage")
[17:37:41.596]                       }
[17:37:41.596]                       else if (inherits(cond, "warning")) {
[17:37:41.596]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.596]                         if (muffled) 
[17:37:41.596]                           invokeRestart("muffleWarning")
[17:37:41.596]                       }
[17:37:41.596]                       else if (inherits(cond, "condition")) {
[17:37:41.596]                         if (!is.null(pattern)) {
[17:37:41.596]                           computeRestarts <- base::computeRestarts
[17:37:41.596]                           grepl <- base::grepl
[17:37:41.596]                           restarts <- computeRestarts(cond)
[17:37:41.596]                           for (restart in restarts) {
[17:37:41.596]                             name <- restart$name
[17:37:41.596]                             if (is.null(name)) 
[17:37:41.596]                               next
[17:37:41.596]                             if (!grepl(pattern, name)) 
[17:37:41.596]                               next
[17:37:41.596]                             invokeRestart(restart)
[17:37:41.596]                             muffled <- TRUE
[17:37:41.596]                             break
[17:37:41.596]                           }
[17:37:41.596]                         }
[17:37:41.596]                       }
[17:37:41.596]                       invisible(muffled)
[17:37:41.596]                     }
[17:37:41.596]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.596]                   }
[17:37:41.596]                 }
[17:37:41.596]                 else {
[17:37:41.596]                   if (TRUE) {
[17:37:41.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.596]                     {
[17:37:41.596]                       inherits <- base::inherits
[17:37:41.596]                       invokeRestart <- base::invokeRestart
[17:37:41.596]                       is.null <- base::is.null
[17:37:41.596]                       muffled <- FALSE
[17:37:41.596]                       if (inherits(cond, "message")) {
[17:37:41.596]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.596]                         if (muffled) 
[17:37:41.596]                           invokeRestart("muffleMessage")
[17:37:41.596]                       }
[17:37:41.596]                       else if (inherits(cond, "warning")) {
[17:37:41.596]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.596]                         if (muffled) 
[17:37:41.596]                           invokeRestart("muffleWarning")
[17:37:41.596]                       }
[17:37:41.596]                       else if (inherits(cond, "condition")) {
[17:37:41.596]                         if (!is.null(pattern)) {
[17:37:41.596]                           computeRestarts <- base::computeRestarts
[17:37:41.596]                           grepl <- base::grepl
[17:37:41.596]                           restarts <- computeRestarts(cond)
[17:37:41.596]                           for (restart in restarts) {
[17:37:41.596]                             name <- restart$name
[17:37:41.596]                             if (is.null(name)) 
[17:37:41.596]                               next
[17:37:41.596]                             if (!grepl(pattern, name)) 
[17:37:41.596]                               next
[17:37:41.596]                             invokeRestart(restart)
[17:37:41.596]                             muffled <- TRUE
[17:37:41.596]                             break
[17:37:41.596]                           }
[17:37:41.596]                         }
[17:37:41.596]                       }
[17:37:41.596]                       invisible(muffled)
[17:37:41.596]                     }
[17:37:41.596]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.596]                   }
[17:37:41.596]                 }
[17:37:41.596]             }
[17:37:41.596]         }))
[17:37:41.596]     }, error = function(ex) {
[17:37:41.596]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.596]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.596]                 ...future.rng), started = ...future.startTime, 
[17:37:41.596]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.596]             version = "1.8"), class = "FutureResult")
[17:37:41.596]     }, finally = {
[17:37:41.596]         if (!identical(...future.workdir, getwd())) 
[17:37:41.596]             setwd(...future.workdir)
[17:37:41.596]         {
[17:37:41.596]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.596]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.596]             }
[17:37:41.596]             base::options(...future.oldOptions)
[17:37:41.596]             if (.Platform$OS.type == "windows") {
[17:37:41.596]                 old_names <- names(...future.oldEnvVars)
[17:37:41.596]                 envs <- base::Sys.getenv()
[17:37:41.596]                 names <- names(envs)
[17:37:41.596]                 common <- intersect(names, old_names)
[17:37:41.596]                 added <- setdiff(names, old_names)
[17:37:41.596]                 removed <- setdiff(old_names, names)
[17:37:41.596]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.596]                   envs[common]]
[17:37:41.596]                 NAMES <- toupper(changed)
[17:37:41.596]                 args <- list()
[17:37:41.596]                 for (kk in seq_along(NAMES)) {
[17:37:41.596]                   name <- changed[[kk]]
[17:37:41.596]                   NAME <- NAMES[[kk]]
[17:37:41.596]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.596]                     next
[17:37:41.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.596]                 }
[17:37:41.596]                 NAMES <- toupper(added)
[17:37:41.596]                 for (kk in seq_along(NAMES)) {
[17:37:41.596]                   name <- added[[kk]]
[17:37:41.596]                   NAME <- NAMES[[kk]]
[17:37:41.596]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.596]                     next
[17:37:41.596]                   args[[name]] <- ""
[17:37:41.596]                 }
[17:37:41.596]                 NAMES <- toupper(removed)
[17:37:41.596]                 for (kk in seq_along(NAMES)) {
[17:37:41.596]                   name <- removed[[kk]]
[17:37:41.596]                   NAME <- NAMES[[kk]]
[17:37:41.596]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.596]                     next
[17:37:41.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.596]                 }
[17:37:41.596]                 if (length(args) > 0) 
[17:37:41.596]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.596]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.596]             }
[17:37:41.596]             else {
[17:37:41.596]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.596]             }
[17:37:41.596]             {
[17:37:41.596]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.596]                   0L) {
[17:37:41.596]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.596]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.596]                   base::options(opts)
[17:37:41.596]                 }
[17:37:41.596]                 {
[17:37:41.596]                   {
[17:37:41.596]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:37:41.596]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:37:41.596]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:37:41.596]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:37:41.596]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:37:41.596]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:37:41.596]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:37:41.596]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:37:41.596]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:37:41.596]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:37:41.596]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:37:41.596]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:37:41.596]                     -1512233174L, -1985955764L, -425390065L, 
[17:37:41.596]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:37:41.596]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:37:41.596]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:37:41.596]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:37:41.596]                     1818328109L, -1284085436L, -1981489558L, 
[17:37:41.596]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:37:41.596]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:37:41.596]                     -1718567047L, -793788661L, -1133789126L, 
[17:37:41.596]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:37:41.596]                     -1823521982L, -1345991523L, -1672661737L, 
[17:37:41.596]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:37:41.596]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:37:41.596]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:37:41.596]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:37:41.596]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:37:41.596]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:37:41.596]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:37:41.596]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:37:41.596]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:37:41.596]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:37:41.596]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:37:41.596]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:37:41.596]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:37:41.596]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:37:41.596]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:37:41.596]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:37:41.596]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:37:41.596]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:37:41.596]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:37:41.596]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:37:41.596]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:37:41.596]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:37:41.596]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:37:41.596]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:37:41.596]                     -1119334354L, -1521015416L, -2041922421L, 
[17:37:41.596]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:37:41.596]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:37:41.596]                     1232111981L, -1801753084L, -1608606422L, 
[17:37:41.596]                     -1172096363L, 1420874031L, -1210473418L, 
[17:37:41.596]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:37:41.596]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:37:41.596]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:37:41.596]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:37:41.596]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:37:41.596]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:37:41.596]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:37:41.596]                     -332493318L, -1978392251L, -1691039632L, 
[17:37:41.596]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:37:41.596]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:37:41.596]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:37:41.596]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:37:41.596]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:37:41.596]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:37:41.596]                     -1178330196L, -687617348L, -1701912078L, 
[17:37:41.596]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:37:41.596]                     -1345416048L, 1816730492L, -1570431212L, 
[17:37:41.596]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:37:41.596]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:37:41.596]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:37:41.596]                     -1493184262L, -1943836976L, -590788308L, 
[17:37:41.596]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:37:41.596]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:37:41.596]                     1274857340L, -1205842638L, -1938479504L, 
[17:37:41.596]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:37:41.596]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:37:41.596]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:37:41.596]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:37:41.596]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:37:41.596]                     -1460751252L, 1201879444L, -1459788718L, 
[17:37:41.596]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:37:41.596]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:37:41.596]                     -420945808L, -1997735900L, -1838404552L, 
[17:37:41.596]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:37:41.596]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:37:41.596]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:37:41.596]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:37:41.596]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:37:41.596]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:37:41.596]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:37:41.596]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:37:41.596]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:37:41.596]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:37:41.596]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:37:41.596]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:37:41.596]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:37:41.596]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:37:41.596]                     -1357570110L, 1896595240L, -2066952276L, 
[17:37:41.596]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:37:41.596]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:37:41.596]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:37:41.596]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:37:41.596]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:37:41.596]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:37:41.596]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:37:41.596]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:37:41.596]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:37:41.596]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:37:41.596]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:37:41.596]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:37:41.596]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:37:41.596]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:37:41.596]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:37:41.596]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:37:41.596]                     -1365842884L, -438961294L, -1851472272L, 
[17:37:41.596]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:37:41.596]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:37:41.596]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:37:41.596]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:37:41.596]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:37:41.596]                     -594809770L, -2146766621L, -2013964635L, 
[17:37:41.596]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:37:41.596]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:37:41.596]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:37:41.596]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:37:41.596]                     -1426021878L, -1285634264L, 1507547537L, 
[17:37:41.596]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:37:41.596]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:37:41.596]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:37:41.596]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:37:41.596]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:37:41.596]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:37:41.596]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:37:41.596]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:37:41.596]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:37:41.596]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:37:41.596]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:37:41.596]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:37:41.596]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:37:41.596]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:37:41.596]                     -1604604761L, 1421229008L, -1268333714L, 
[17:37:41.596]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:37:41.596]                     -2070476623L, -2099222749L, 1141171236L, 
[17:37:41.596]                     -146426158L, -1797385433L, -1129376399L, 
[17:37:41.596]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:37:41.596]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:37:41.596]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:37:41.596]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:37:41.596]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:37:41.596]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:37:41.596]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:37:41.596]                     -1092079724L, -1765622238L, -1882554057L, 
[17:37:41.596]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:37:41.596]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:37:41.596]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:37:41.596]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:37:41.596]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:37:41.596]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:37:41.596]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:37:41.596]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:37:41.596]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:37:41.596]                       inherits = FALSE)
[17:37:41.596]                     NULL
[17:37:41.596]                   }
[17:37:41.596]                   options(future.plan = NULL)
[17:37:41.596]                   if (is.na(NA_character_)) 
[17:37:41.596]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.596]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.596]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.596]                     .init = FALSE)
[17:37:41.596]                 }
[17:37:41.596]             }
[17:37:41.596]         }
[17:37:41.596]     })
[17:37:41.596]     if (TRUE) {
[17:37:41.596]         base::sink(type = "output", split = FALSE)
[17:37:41.596]         if (TRUE) {
[17:37:41.596]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.596]         }
[17:37:41.596]         else {
[17:37:41.596]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.596]         }
[17:37:41.596]         base::close(...future.stdout)
[17:37:41.596]         ...future.stdout <- NULL
[17:37:41.596]     }
[17:37:41.596]     ...future.result$conditions <- ...future.conditions
[17:37:41.596]     ...future.result$finished <- base::Sys.time()
[17:37:41.596]     ...future.result
[17:37:41.596] }
[17:37:41.599] assign_globals() ...
[17:37:41.599] List of 5
[17:37:41.599]  $ ...future.FUN            :function (...)  
[17:37:41.599]  $ future.call.arguments    : list()
[17:37:41.599]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.599]  $ ...future.elements_ii    :List of 5
[17:37:41.599]   ..$ : int 0
[17:37:41.599]   ..$ : int 0
[17:37:41.599]   ..$ : int 0
[17:37:41.599]   ..$ : int 0
[17:37:41.599]   ..$ : int 0
[17:37:41.599]  $ ...future.seeds_ii       :List of 5
[17:37:41.599]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:37:41.599]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:37:41.599]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:37:41.599]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:37:41.599]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:37:41.599]  $ ...future.globals.maxSize: NULL
[17:37:41.599]  - attr(*, "where")=List of 5
[17:37:41.599]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.599]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.599]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.599]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.599]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.599]  - attr(*, "resolved")= logi FALSE
[17:37:41.599]  - attr(*, "total_size")= num 616
[17:37:41.599]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.599]  - attr(*, "already-done")= logi TRUE
[17:37:41.606] - reassign environment for ‘...future.FUN’
[17:37:41.606] - copied ‘...future.FUN’ to environment
[17:37:41.606] - copied ‘future.call.arguments’ to environment
[17:37:41.606] - copied ‘...future.elements_ii’ to environment
[17:37:41.606] - copied ‘...future.seeds_ii’ to environment
[17:37:41.606] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.607] assign_globals() ... done
[17:37:41.607] plan(): Setting new future strategy stack:
[17:37:41.607] List of future strategies:
[17:37:41.607] 1. sequential:
[17:37:41.607]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.607]    - tweaked: FALSE
[17:37:41.607]    - call: NULL
[17:37:41.607] plan(): nbrOfWorkers() = 1
[17:37:41.608] plan(): Setting new future strategy stack:
[17:37:41.608] List of future strategies:
[17:37:41.608] 1. sequential:
[17:37:41.608]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.608]    - tweaked: FALSE
[17:37:41.608]    - call: plan(strategy)
[17:37:41.609] plan(): nbrOfWorkers() = 1
[17:37:41.609] SequentialFuture started (and completed)
[17:37:41.609] - Launch lazy future ... done
[17:37:41.609] run() for ‘SequentialFuture’ ... done
[17:37:41.609] Created future:
[17:37:41.609] SequentialFuture:
[17:37:41.609] Label: ‘future_replicate-1’
[17:37:41.609] Expression:
[17:37:41.609] {
[17:37:41.609]     do.call(function(...) {
[17:37:41.609]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.609]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.609]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.609]             on.exit(options(oopts), add = TRUE)
[17:37:41.609]         }
[17:37:41.609]         {
[17:37:41.609]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.609]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.609]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.609]                   envir = globalenv(), inherits = FALSE)
[17:37:41.609]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.609]             })
[17:37:41.609]         }
[17:37:41.609]     }, args = future.call.arguments)
[17:37:41.609] }
[17:37:41.609] Lazy evaluation: FALSE
[17:37:41.609] Asynchronous evaluation: FALSE
[17:37:41.609] Local evaluation: TRUE
[17:37:41.609] Environment: R_GlobalEnv
[17:37:41.609] Capture standard output: TRUE
[17:37:41.609] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.609] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.609] Packages: <none>
[17:37:41.609] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.609] Resolved: TRUE
[17:37:41.609] Value: 280 bytes of class ‘list’
[17:37:41.609] Early signaling: FALSE
[17:37:41.609] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.609] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.610] Chunk #1 of 1 ... DONE
[17:37:41.610] Launching 1 futures (chunks) ... DONE
[17:37:41.610] Resolving 1 futures (chunks) ...
[17:37:41.610] resolve() on list ...
[17:37:41.610]  recursive: 0
[17:37:41.611]  length: 1
[17:37:41.611] 
[17:37:41.611] resolved() for ‘SequentialFuture’ ...
[17:37:41.611] - state: ‘finished’
[17:37:41.611] - run: TRUE
[17:37:41.611] - result: ‘FutureResult’
[17:37:41.611] resolved() for ‘SequentialFuture’ ... done
[17:37:41.611] Future #1
[17:37:41.611] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:37:41.611] - nx: 1
[17:37:41.611] - relay: TRUE
[17:37:41.612] - stdout: TRUE
[17:37:41.612] - signal: TRUE
[17:37:41.612] - resignal: FALSE
[17:37:41.612] - force: TRUE
[17:37:41.612] - relayed: [n=1] FALSE
[17:37:41.612] - queued futures: [n=1] FALSE
[17:37:41.612]  - until=1
[17:37:41.614]  - relaying element #1
[17:37:41.614] - relayed: [n=1] TRUE
[17:37:41.614] - queued futures: [n=1] TRUE
[17:37:41.614] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:37:41.614]  length: 0 (resolved future 1)
[17:37:41.614] Relaying remaining futures
[17:37:41.614] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.614] - nx: 1
[17:37:41.614] - relay: TRUE
[17:37:41.614] - stdout: TRUE
[17:37:41.615] - signal: TRUE
[17:37:41.615] - resignal: FALSE
[17:37:41.615] - force: TRUE
[17:37:41.615] - relayed: [n=1] TRUE
[17:37:41.615] - queued futures: [n=1] TRUE
 - flush all
[17:37:41.615] - relayed: [n=1] TRUE
[17:37:41.615] - queued futures: [n=1] TRUE
[17:37:41.615] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.615] resolve() on list ... DONE
[17:37:41.615]  - Number of value chunks collected: 1
[17:37:41.616] Resolving 1 futures (chunks) ... DONE
[17:37:41.616] Reducing values from 1 chunks ...
[17:37:41.616]  - Number of values collected after concatenation: 5
[17:37:41.616]  - Number of values expected: 5
[17:37:41.616] Reducing values from 1 chunks ... DONE
[17:37:41.616] future_lapply() ... DONE
[17:37:41.616] future_lapply() ...
[17:37:41.617] Generating random seeds ...
[17:37:41.617] Generating random seed streams for 5 elements ...
[17:37:41.617] Generating random seed streams for 5 elements ... DONE
[17:37:41.617] Generating random seeds ... DONE
[17:37:41.617] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.617] Number of chunks: 1
[17:37:41.618] getGlobalsAndPackagesXApply() ...
[17:37:41.618]  - future.globals: TRUE
[17:37:41.618] getGlobalsAndPackages() ...
[17:37:41.618] Searching for globals...
[17:37:41.619] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.619] Searching for globals ... DONE
[17:37:41.619] Resolving globals: FALSE
[17:37:41.619] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.620] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.620] - globals: [1] ‘FUN’
[17:37:41.620] 
[17:37:41.620] getGlobalsAndPackages() ... DONE
[17:37:41.620]  - globals found/used: [n=1] ‘FUN’
[17:37:41.620]  - needed namespaces: [n=0] 
[17:37:41.620] Finding globals ... DONE
[17:37:41.620]  - use_args: TRUE
[17:37:41.620]  - Getting '...' globals ...
[17:37:41.621] resolve() on list ...
[17:37:41.621]  recursive: 0
[17:37:41.621]  length: 1
[17:37:41.621]  elements: ‘...’
[17:37:41.621]  length: 0 (resolved future 1)
[17:37:41.621] resolve() on list ... DONE
[17:37:41.621]    - '...' content: [n=0] 
[17:37:41.621] List of 1
[17:37:41.621]  $ ...: list()
[17:37:41.621]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.621]  - attr(*, "where")=List of 1
[17:37:41.621]   ..$ ...:<environment: 0x5640bf06f040> 
[17:37:41.621]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.621]  - attr(*, "resolved")= logi TRUE
[17:37:41.621]  - attr(*, "total_size")= num NA
[17:37:41.624]  - Getting '...' globals ... DONE
[17:37:41.624] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.624] List of 2
[17:37:41.624]  $ ...future.FUN:function (...)  
[17:37:41.624]  $ ...          : list()
[17:37:41.624]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.624]  - attr(*, "where")=List of 2
[17:37:41.624]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.624]   ..$ ...          :<environment: 0x5640bf06f040> 
[17:37:41.624]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.624]  - attr(*, "resolved")= logi FALSE
[17:37:41.624]  - attr(*, "total_size")= num 616
[17:37:41.627] Packages to be attached in all futures: [n=0] 
[17:37:41.627] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.627] Number of futures (= number of chunks): 1
[17:37:41.627] Launching 1 futures (chunks) ...
[17:37:41.627] Chunk #1 of 1 ...
[17:37:41.627]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.627] getGlobalsAndPackages() ...
[17:37:41.627] Searching for globals...
[17:37:41.628] 
[17:37:41.628] Searching for globals ... DONE
[17:37:41.628] - globals: [0] <none>
[17:37:41.628] getGlobalsAndPackages() ... DONE
[17:37:41.628]    + additional globals found: [n=0] 
[17:37:41.628]    + additional namespaces needed: [n=0] 
[17:37:41.628]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.628]  - seeds: [5] <seeds>
[17:37:41.628]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.628] getGlobalsAndPackages() ...
[17:37:41.629] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.629] Resolving globals: FALSE
[17:37:41.629] Tweak future expression to call with '...' arguments ...
[17:37:41.629] {
[17:37:41.629]     do.call(function(...) {
[17:37:41.629]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.629]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.629]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.629]             on.exit(options(oopts), add = TRUE)
[17:37:41.629]         }
[17:37:41.629]         {
[17:37:41.629]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.629]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.629]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.629]                   envir = globalenv(), inherits = FALSE)
[17:37:41.629]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.629]             })
[17:37:41.629]         }
[17:37:41.629]     }, args = future.call.arguments)
[17:37:41.629] }
[17:37:41.629] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.629] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.630] 
[17:37:41.630] getGlobalsAndPackages() ... DONE
[17:37:41.630] run() for ‘Future’ ...
[17:37:41.630] - state: ‘created’
[17:37:41.630] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:37:41.630] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.631] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:37:41.631]   - Field: ‘label’
[17:37:41.631]   - Field: ‘local’
[17:37:41.631]   - Field: ‘owner’
[17:37:41.631]   - Field: ‘envir’
[17:37:41.631]   - Field: ‘packages’
[17:37:41.631]   - Field: ‘gc’
[17:37:41.631]   - Field: ‘conditions’
[17:37:41.631]   - Field: ‘expr’
[17:37:41.631]   - Field: ‘uuid’
[17:37:41.632]   - Field: ‘seed’
[17:37:41.632]   - Field: ‘version’
[17:37:41.632]   - Field: ‘result’
[17:37:41.632]   - Field: ‘asynchronous’
[17:37:41.632]   - Field: ‘calls’
[17:37:41.632]   - Field: ‘globals’
[17:37:41.632]   - Field: ‘stdout’
[17:37:41.632]   - Field: ‘earlySignal’
[17:37:41.632]   - Field: ‘lazy’
[17:37:41.632]   - Field: ‘state’
[17:37:41.632] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:37:41.633] - Launch lazy future ...
[17:37:41.633] Packages needed by the future expression (n = 0): <none>
[17:37:41.633] Packages needed by future strategies (n = 0): <none>
[17:37:41.633] {
[17:37:41.633]     {
[17:37:41.633]         {
[17:37:41.633]             ...future.startTime <- base::Sys.time()
[17:37:41.633]             {
[17:37:41.633]                 {
[17:37:41.633]                   {
[17:37:41.633]                     base::local({
[17:37:41.633]                       has_future <- base::requireNamespace("future", 
[17:37:41.633]                         quietly = TRUE)
[17:37:41.633]                       if (has_future) {
[17:37:41.633]                         ns <- base::getNamespace("future")
[17:37:41.633]                         version <- ns[[".package"]][["version"]]
[17:37:41.633]                         if (is.null(version)) 
[17:37:41.633]                           version <- utils::packageVersion("future")
[17:37:41.633]                       }
[17:37:41.633]                       else {
[17:37:41.633]                         version <- NULL
[17:37:41.633]                       }
[17:37:41.633]                       if (!has_future || version < "1.8.0") {
[17:37:41.633]                         info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.633]                           "", base::R.version$version.string), 
[17:37:41.633]                           platform = base::sprintf("%s (%s-bit)", 
[17:37:41.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.633]                             "release", "version")], collapse = " "), 
[17:37:41.633]                           hostname = base::Sys.info()[["nodename"]])
[17:37:41.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.633]                           info)
[17:37:41.633]                         info <- base::paste(info, collapse = "; ")
[17:37:41.633]                         if (!has_future) {
[17:37:41.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.633]                             info)
[17:37:41.633]                         }
[17:37:41.633]                         else {
[17:37:41.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.633]                             info, version)
[17:37:41.633]                         }
[17:37:41.633]                         base::stop(msg)
[17:37:41.633]                       }
[17:37:41.633]                     })
[17:37:41.633]                   }
[17:37:41.633]                   ...future.strategy.old <- future::plan("list")
[17:37:41.633]                   options(future.plan = NULL)
[17:37:41.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.633]                 }
[17:37:41.633]                 ...future.workdir <- getwd()
[17:37:41.633]             }
[17:37:41.633]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.633]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.633]         }
[17:37:41.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:41.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.633]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.633]             base::names(...future.oldOptions))
[17:37:41.633]     }
[17:37:41.633]     if (FALSE) {
[17:37:41.633]     }
[17:37:41.633]     else {
[17:37:41.633]         if (TRUE) {
[17:37:41.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.633]                 open = "w")
[17:37:41.633]         }
[17:37:41.633]         else {
[17:37:41.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.633]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.633]         }
[17:37:41.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.633]             base::sink(type = "output", split = FALSE)
[17:37:41.633]             base::close(...future.stdout)
[17:37:41.633]         }, add = TRUE)
[17:37:41.633]     }
[17:37:41.633]     ...future.frame <- base::sys.nframe()
[17:37:41.633]     ...future.conditions <- base::list()
[17:37:41.633]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.633]     if (FALSE) {
[17:37:41.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.633]     }
[17:37:41.633]     ...future.result <- base::tryCatch({
[17:37:41.633]         base::withCallingHandlers({
[17:37:41.633]             ...future.value <- base::withVisible(base::local({
[17:37:41.633]                 do.call(function(...) {
[17:37:41.633]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.633]                   if (!identical(...future.globals.maxSize.org, 
[17:37:41.633]                     ...future.globals.maxSize)) {
[17:37:41.633]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.633]                     on.exit(options(oopts), add = TRUE)
[17:37:41.633]                   }
[17:37:41.633]                   {
[17:37:41.633]                     lapply(seq_along(...future.elements_ii), 
[17:37:41.633]                       FUN = function(jj) {
[17:37:41.633]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.633]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.633]                           envir = globalenv(), inherits = FALSE)
[17:37:41.633]                         ...future.FUN(...future.X_jj, ...)
[17:37:41.633]                       })
[17:37:41.633]                   }
[17:37:41.633]                 }, args = future.call.arguments)
[17:37:41.633]             }))
[17:37:41.633]             future::FutureResult(value = ...future.value$value, 
[17:37:41.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.633]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.633]                     ...future.globalenv.names))
[17:37:41.633]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.633]         }, condition = base::local({
[17:37:41.633]             c <- base::c
[17:37:41.633]             inherits <- base::inherits
[17:37:41.633]             invokeRestart <- base::invokeRestart
[17:37:41.633]             length <- base::length
[17:37:41.633]             list <- base::list
[17:37:41.633]             seq.int <- base::seq.int
[17:37:41.633]             signalCondition <- base::signalCondition
[17:37:41.633]             sys.calls <- base::sys.calls
[17:37:41.633]             `[[` <- base::`[[`
[17:37:41.633]             `+` <- base::`+`
[17:37:41.633]             `<<-` <- base::`<<-`
[17:37:41.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.633]                   3L)]
[17:37:41.633]             }
[17:37:41.633]             function(cond) {
[17:37:41.633]                 is_error <- inherits(cond, "error")
[17:37:41.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.633]                   NULL)
[17:37:41.633]                 if (is_error) {
[17:37:41.633]                   sessionInformation <- function() {
[17:37:41.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.633]                       search = base::search(), system = base::Sys.info())
[17:37:41.633]                   }
[17:37:41.633]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.633]                     cond$call), session = sessionInformation(), 
[17:37:41.633]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.633]                   signalCondition(cond)
[17:37:41.633]                 }
[17:37:41.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.633]                 "immediateCondition"))) {
[17:37:41.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.633]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.633]                   if (TRUE && !signal) {
[17:37:41.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.633]                     {
[17:37:41.633]                       inherits <- base::inherits
[17:37:41.633]                       invokeRestart <- base::invokeRestart
[17:37:41.633]                       is.null <- base::is.null
[17:37:41.633]                       muffled <- FALSE
[17:37:41.633]                       if (inherits(cond, "message")) {
[17:37:41.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.633]                         if (muffled) 
[17:37:41.633]                           invokeRestart("muffleMessage")
[17:37:41.633]                       }
[17:37:41.633]                       else if (inherits(cond, "warning")) {
[17:37:41.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.633]                         if (muffled) 
[17:37:41.633]                           invokeRestart("muffleWarning")
[17:37:41.633]                       }
[17:37:41.633]                       else if (inherits(cond, "condition")) {
[17:37:41.633]                         if (!is.null(pattern)) {
[17:37:41.633]                           computeRestarts <- base::computeRestarts
[17:37:41.633]                           grepl <- base::grepl
[17:37:41.633]                           restarts <- computeRestarts(cond)
[17:37:41.633]                           for (restart in restarts) {
[17:37:41.633]                             name <- restart$name
[17:37:41.633]                             if (is.null(name)) 
[17:37:41.633]                               next
[17:37:41.633]                             if (!grepl(pattern, name)) 
[17:37:41.633]                               next
[17:37:41.633]                             invokeRestart(restart)
[17:37:41.633]                             muffled <- TRUE
[17:37:41.633]                             break
[17:37:41.633]                           }
[17:37:41.633]                         }
[17:37:41.633]                       }
[17:37:41.633]                       invisible(muffled)
[17:37:41.633]                     }
[17:37:41.633]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.633]                   }
[17:37:41.633]                 }
[17:37:41.633]                 else {
[17:37:41.633]                   if (TRUE) {
[17:37:41.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.633]                     {
[17:37:41.633]                       inherits <- base::inherits
[17:37:41.633]                       invokeRestart <- base::invokeRestart
[17:37:41.633]                       is.null <- base::is.null
[17:37:41.633]                       muffled <- FALSE
[17:37:41.633]                       if (inherits(cond, "message")) {
[17:37:41.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.633]                         if (muffled) 
[17:37:41.633]                           invokeRestart("muffleMessage")
[17:37:41.633]                       }
[17:37:41.633]                       else if (inherits(cond, "warning")) {
[17:37:41.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.633]                         if (muffled) 
[17:37:41.633]                           invokeRestart("muffleWarning")
[17:37:41.633]                       }
[17:37:41.633]                       else if (inherits(cond, "condition")) {
[17:37:41.633]                         if (!is.null(pattern)) {
[17:37:41.633]                           computeRestarts <- base::computeRestarts
[17:37:41.633]                           grepl <- base::grepl
[17:37:41.633]                           restarts <- computeRestarts(cond)
[17:37:41.633]                           for (restart in restarts) {
[17:37:41.633]                             name <- restart$name
[17:37:41.633]                             if (is.null(name)) 
[17:37:41.633]                               next
[17:37:41.633]                             if (!grepl(pattern, name)) 
[17:37:41.633]                               next
[17:37:41.633]                             invokeRestart(restart)
[17:37:41.633]                             muffled <- TRUE
[17:37:41.633]                             break
[17:37:41.633]                           }
[17:37:41.633]                         }
[17:37:41.633]                       }
[17:37:41.633]                       invisible(muffled)
[17:37:41.633]                     }
[17:37:41.633]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.633]                   }
[17:37:41.633]                 }
[17:37:41.633]             }
[17:37:41.633]         }))
[17:37:41.633]     }, error = function(ex) {
[17:37:41.633]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.633]                 ...future.rng), started = ...future.startTime, 
[17:37:41.633]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.633]             version = "1.8"), class = "FutureResult")
[17:37:41.633]     }, finally = {
[17:37:41.633]         if (!identical(...future.workdir, getwd())) 
[17:37:41.633]             setwd(...future.workdir)
[17:37:41.633]         {
[17:37:41.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.633]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.633]             }
[17:37:41.633]             base::options(...future.oldOptions)
[17:37:41.633]             if (.Platform$OS.type == "windows") {
[17:37:41.633]                 old_names <- names(...future.oldEnvVars)
[17:37:41.633]                 envs <- base::Sys.getenv()
[17:37:41.633]                 names <- names(envs)
[17:37:41.633]                 common <- intersect(names, old_names)
[17:37:41.633]                 added <- setdiff(names, old_names)
[17:37:41.633]                 removed <- setdiff(old_names, names)
[17:37:41.633]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.633]                   envs[common]]
[17:37:41.633]                 NAMES <- toupper(changed)
[17:37:41.633]                 args <- list()
[17:37:41.633]                 for (kk in seq_along(NAMES)) {
[17:37:41.633]                   name <- changed[[kk]]
[17:37:41.633]                   NAME <- NAMES[[kk]]
[17:37:41.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.633]                     next
[17:37:41.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.633]                 }
[17:37:41.633]                 NAMES <- toupper(added)
[17:37:41.633]                 for (kk in seq_along(NAMES)) {
[17:37:41.633]                   name <- added[[kk]]
[17:37:41.633]                   NAME <- NAMES[[kk]]
[17:37:41.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.633]                     next
[17:37:41.633]                   args[[name]] <- ""
[17:37:41.633]                 }
[17:37:41.633]                 NAMES <- toupper(removed)
[17:37:41.633]                 for (kk in seq_along(NAMES)) {
[17:37:41.633]                   name <- removed[[kk]]
[17:37:41.633]                   NAME <- NAMES[[kk]]
[17:37:41.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.633]                     next
[17:37:41.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.633]                 }
[17:37:41.633]                 if (length(args) > 0) 
[17:37:41.633]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.633]             }
[17:37:41.633]             else {
[17:37:41.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.633]             }
[17:37:41.633]             {
[17:37:41.633]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.633]                   0L) {
[17:37:41.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.633]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.633]                   base::options(opts)
[17:37:41.633]                 }
[17:37:41.633]                 {
[17:37:41.633]                   {
[17:37:41.633]                     base::assign(".Random.seed", c(10403L, 2L, 
[17:37:41.633]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:37:41.633]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:37:41.633]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:37:41.633]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:37:41.633]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:37:41.633]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:37:41.633]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:37:41.633]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:37:41.633]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:37:41.633]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:37:41.633]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:37:41.633]                     -1512233174L, -1985955764L, -425390065L, 
[17:37:41.633]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:37:41.633]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:37:41.633]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:37:41.633]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:37:41.633]                     1818328109L, -1284085436L, -1981489558L, 
[17:37:41.633]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:37:41.633]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:37:41.633]                     -1718567047L, -793788661L, -1133789126L, 
[17:37:41.633]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:37:41.633]                     -1823521982L, -1345991523L, -1672661737L, 
[17:37:41.633]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:37:41.633]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:37:41.633]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:37:41.633]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:37:41.633]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:37:41.633]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:37:41.633]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:37:41.633]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:37:41.633]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:37:41.633]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:37:41.633]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:37:41.633]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:37:41.633]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:37:41.633]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:37:41.633]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:37:41.633]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:37:41.633]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:37:41.633]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:37:41.633]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:37:41.633]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:37:41.633]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:37:41.633]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:37:41.633]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:37:41.633]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:37:41.633]                     -1119334354L, -1521015416L, -2041922421L, 
[17:37:41.633]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:37:41.633]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:37:41.633]                     1232111981L, -1801753084L, -1608606422L, 
[17:37:41.633]                     -1172096363L, 1420874031L, -1210473418L, 
[17:37:41.633]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:37:41.633]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:37:41.633]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:37:41.633]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:37:41.633]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:37:41.633]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:37:41.633]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:37:41.633]                     -332493318L, -1978392251L, -1691039632L, 
[17:37:41.633]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:37:41.633]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:37:41.633]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:37:41.633]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:37:41.633]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:37:41.633]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:37:41.633]                     -1178330196L, -687617348L, -1701912078L, 
[17:37:41.633]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:37:41.633]                     -1345416048L, 1816730492L, -1570431212L, 
[17:37:41.633]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:37:41.633]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:37:41.633]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:37:41.633]                     -1493184262L, -1943836976L, -590788308L, 
[17:37:41.633]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:37:41.633]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:37:41.633]                     1274857340L, -1205842638L, -1938479504L, 
[17:37:41.633]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:37:41.633]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:37:41.633]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:37:41.633]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:37:41.633]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:37:41.633]                     -1460751252L, 1201879444L, -1459788718L, 
[17:37:41.633]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:37:41.633]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:37:41.633]                     -420945808L, -1997735900L, -1838404552L, 
[17:37:41.633]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:37:41.633]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:37:41.633]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:37:41.633]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:37:41.633]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:37:41.633]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:37:41.633]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:37:41.633]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:37:41.633]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:37:41.633]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:37:41.633]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:37:41.633]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:37:41.633]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:37:41.633]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:37:41.633]                     -1357570110L, 1896595240L, -2066952276L, 
[17:37:41.633]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:37:41.633]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:37:41.633]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:37:41.633]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:37:41.633]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:37:41.633]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:37:41.633]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:37:41.633]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:37:41.633]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:37:41.633]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:37:41.633]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:37:41.633]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:37:41.633]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:37:41.633]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:37:41.633]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:37:41.633]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:37:41.633]                     -1365842884L, -438961294L, -1851472272L, 
[17:37:41.633]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:37:41.633]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:37:41.633]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:37:41.633]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:37:41.633]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:37:41.633]                     -594809770L, -2146766621L, -2013964635L, 
[17:37:41.633]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:37:41.633]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:37:41.633]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:37:41.633]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:37:41.633]                     -1426021878L, -1285634264L, 1507547537L, 
[17:37:41.633]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:37:41.633]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:37:41.633]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:37:41.633]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:37:41.633]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:37:41.633]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:37:41.633]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:37:41.633]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:37:41.633]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:37:41.633]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:37:41.633]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:37:41.633]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:37:41.633]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:37:41.633]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:37:41.633]                     -1604604761L, 1421229008L, -1268333714L, 
[17:37:41.633]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:37:41.633]                     -2070476623L, -2099222749L, 1141171236L, 
[17:37:41.633]                     -146426158L, -1797385433L, -1129376399L, 
[17:37:41.633]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:37:41.633]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:37:41.633]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:37:41.633]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:37:41.633]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:37:41.633]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:37:41.633]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:37:41.633]                     -1092079724L, -1765622238L, -1882554057L, 
[17:37:41.633]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:37:41.633]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:37:41.633]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:37:41.633]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:37:41.633]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:37:41.633]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:37:41.633]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:37:41.633]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:37:41.633]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:37:41.633]                       inherits = FALSE)
[17:37:41.633]                     NULL
[17:37:41.633]                   }
[17:37:41.633]                   options(future.plan = NULL)
[17:37:41.633]                   if (is.na(NA_character_)) 
[17:37:41.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.633]                     .init = FALSE)
[17:37:41.633]                 }
[17:37:41.633]             }
[17:37:41.633]         }
[17:37:41.633]     })
[17:37:41.633]     if (TRUE) {
[17:37:41.633]         base::sink(type = "output", split = FALSE)
[17:37:41.633]         if (TRUE) {
[17:37:41.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.633]         }
[17:37:41.633]         else {
[17:37:41.633]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.633]         }
[17:37:41.633]         base::close(...future.stdout)
[17:37:41.633]         ...future.stdout <- NULL
[17:37:41.633]     }
[17:37:41.633]     ...future.result$conditions <- ...future.conditions
[17:37:41.633]     ...future.result$finished <- base::Sys.time()
[17:37:41.633]     ...future.result
[17:37:41.633] }
[17:37:41.636] assign_globals() ...
[17:37:41.636] List of 5
[17:37:41.636]  $ ...future.FUN            :function (...)  
[17:37:41.636]  $ future.call.arguments    : list()
[17:37:41.636]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.636]  $ ...future.elements_ii    :List of 5
[17:37:41.636]   ..$ : int 0
[17:37:41.636]   ..$ : int 0
[17:37:41.636]   ..$ : int 0
[17:37:41.636]   ..$ : int 0
[17:37:41.636]   ..$ : int 0
[17:37:41.636]  $ ...future.seeds_ii       :List of 5
[17:37:41.636]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:37:41.636]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:37:41.636]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:37:41.636]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:37:41.636]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:37:41.636]  $ ...future.globals.maxSize: NULL
[17:37:41.636]  - attr(*, "where")=List of 5
[17:37:41.636]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.636]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.636]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.636]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.636]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.636]  - attr(*, "resolved")= logi FALSE
[17:37:41.636]  - attr(*, "total_size")= num 616
[17:37:41.636]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.636]  - attr(*, "already-done")= logi TRUE
[17:37:41.645] - reassign environment for ‘...future.FUN’
[17:37:41.645] - copied ‘...future.FUN’ to environment
[17:37:41.645] - copied ‘future.call.arguments’ to environment
[17:37:41.645] - copied ‘...future.elements_ii’ to environment
[17:37:41.645] - copied ‘...future.seeds_ii’ to environment
[17:37:41.645] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.645] assign_globals() ... done
[17:37:41.646] plan(): Setting new future strategy stack:
[17:37:41.646] List of future strategies:
[17:37:41.646] 1. sequential:
[17:37:41.646]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.646]    - tweaked: FALSE
[17:37:41.646]    - call: NULL
[17:37:41.646] plan(): nbrOfWorkers() = 1
[17:37:41.647] plan(): Setting new future strategy stack:
[17:37:41.647] List of future strategies:
[17:37:41.647] 1. sequential:
[17:37:41.647]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.647]    - tweaked: FALSE
[17:37:41.647]    - call: plan(strategy)
[17:37:41.647] plan(): nbrOfWorkers() = 1
[17:37:41.648] SequentialFuture started (and completed)
[17:37:41.648] - Launch lazy future ... done
[17:37:41.648] run() for ‘SequentialFuture’ ... done
[17:37:41.648] Created future:
[17:37:41.648] SequentialFuture:
[17:37:41.648] Label: ‘future_replicate-1’
[17:37:41.648] Expression:
[17:37:41.648] {
[17:37:41.648]     do.call(function(...) {
[17:37:41.648]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.648]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.648]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.648]             on.exit(options(oopts), add = TRUE)
[17:37:41.648]         }
[17:37:41.648]         {
[17:37:41.648]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.648]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.648]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.648]                   envir = globalenv(), inherits = FALSE)
[17:37:41.648]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.648]             })
[17:37:41.648]         }
[17:37:41.648]     }, args = future.call.arguments)
[17:37:41.648] }
[17:37:41.648] Lazy evaluation: FALSE
[17:37:41.648] Asynchronous evaluation: FALSE
[17:37:41.648] Local evaluation: TRUE
[17:37:41.648] Environment: R_GlobalEnv
[17:37:41.648] Capture standard output: TRUE
[17:37:41.648] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.648] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.648] Packages: <none>
[17:37:41.648] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.648] Resolved: TRUE
[17:37:41.648] Value: 280 bytes of class ‘list’
[17:37:41.648] Early signaling: FALSE
[17:37:41.648] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.648] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.649] Chunk #1 of 1 ... DONE
[17:37:41.649] Launching 1 futures (chunks) ... DONE
[17:37:41.649] Resolving 1 futures (chunks) ...
[17:37:41.649] resolve() on list ...
[17:37:41.649]  recursive: 0
[17:37:41.650]  length: 1
[17:37:41.650] 
[17:37:41.650] resolved() for ‘SequentialFuture’ ...
[17:37:41.650] - state: ‘finished’
[17:37:41.650] - run: TRUE
[17:37:41.650] - result: ‘FutureResult’
[17:37:41.650] resolved() for ‘SequentialFuture’ ... done
[17:37:41.650] Future #1
[17:37:41.650] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:37:41.650] - nx: 1
[17:37:41.650] - relay: TRUE
[17:37:41.651] - stdout: TRUE
[17:37:41.651] - signal: TRUE
[17:37:41.651] - resignal: FALSE
[17:37:41.651] - force: TRUE
[17:37:41.651] - relayed: [n=1] FALSE
[17:37:41.651] - queued futures: [n=1] FALSE
[17:37:41.651]  - until=1
[17:37:41.651]  - relaying element #1
[17:37:41.651] - relayed: [n=1] TRUE
[17:37:41.651] - queued futures: [n=1] TRUE
[17:37:41.652] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:37:41.652]  length: 0 (resolved future 1)
[17:37:41.652] Relaying remaining futures
[17:37:41.652] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.652] - nx: 1
[17:37:41.652] - relay: TRUE
[17:37:41.652] - stdout: TRUE
[17:37:41.652] - signal: TRUE
[17:37:41.652] - resignal: FALSE
[17:37:41.652] - force: TRUE
[17:37:41.652] - relayed: [n=1] TRUE
[17:37:41.652] - queued futures: [n=1] TRUE
 - flush all
[17:37:41.653] - relayed: [n=1] TRUE
[17:37:41.653] - queued futures: [n=1] TRUE
[17:37:41.653] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.653] resolve() on list ... DONE
[17:37:41.653]  - Number of value chunks collected: 1
[17:37:41.653] Resolving 1 futures (chunks) ... DONE
[17:37:41.653] Reducing values from 1 chunks ...
[17:37:41.653]  - Number of values collected after concatenation: 5
[17:37:41.653]  - Number of values expected: 5
[17:37:41.653] Reducing values from 1 chunks ... DONE
[17:37:41.654] future_lapply() ... DONE
[17:37:41.654] future_lapply() ...
[17:37:41.654] Generating random seeds ...
[17:37:41.655] Generating random seed streams for 5 elements ...
[17:37:41.655] Generating random seed streams for 5 elements ... DONE
[17:37:41.655] Generating random seeds ... DONE
[17:37:41.655] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.655] Number of chunks: 1
[17:37:41.655] getGlobalsAndPackagesXApply() ...
[17:37:41.656]  - future.globals: TRUE
[17:37:41.656] getGlobalsAndPackages() ...
[17:37:41.656] Searching for globals...
[17:37:41.657] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.657] Searching for globals ... DONE
[17:37:41.657] Resolving globals: FALSE
[17:37:41.657] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.658] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.658] - globals: [1] ‘FUN’
[17:37:41.658] 
[17:37:41.658] getGlobalsAndPackages() ... DONE
[17:37:41.658]  - globals found/used: [n=1] ‘FUN’
[17:37:41.658]  - needed namespaces: [n=0] 
[17:37:41.658] Finding globals ... DONE
[17:37:41.658]  - use_args: TRUE
[17:37:41.658]  - Getting '...' globals ...
[17:37:41.659] resolve() on list ...
[17:37:41.659]  recursive: 0
[17:37:41.659]  length: 1
[17:37:41.659]  elements: ‘...’
[17:37:41.659]  length: 0 (resolved future 1)
[17:37:41.659] resolve() on list ... DONE
[17:37:41.659]    - '...' content: [n=0] 
[17:37:41.659] List of 1
[17:37:41.659]  $ ...: list()
[17:37:41.659]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.659]  - attr(*, "where")=List of 1
[17:37:41.659]   ..$ ...:<environment: 0x5640c065a608> 
[17:37:41.659]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.659]  - attr(*, "resolved")= logi TRUE
[17:37:41.659]  - attr(*, "total_size")= num NA
[17:37:41.662]  - Getting '...' globals ... DONE
[17:37:41.662] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.662] List of 2
[17:37:41.662]  $ ...future.FUN:function (...)  
[17:37:41.662]  $ ...          : list()
[17:37:41.662]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.662]  - attr(*, "where")=List of 2
[17:37:41.662]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.662]   ..$ ...          :<environment: 0x5640c065a608> 
[17:37:41.662]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.662]  - attr(*, "resolved")= logi FALSE
[17:37:41.662]  - attr(*, "total_size")= num 616
[17:37:41.665] Packages to be attached in all futures: [n=0] 
[17:37:41.665] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.665] Number of futures (= number of chunks): 1
[17:37:41.665] Launching 1 futures (chunks) ...
[17:37:41.665] Chunk #1 of 1 ...
[17:37:41.665]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.667] getGlobalsAndPackages() ...
[17:37:41.667] Searching for globals...
[17:37:41.667] 
[17:37:41.667] Searching for globals ... DONE
[17:37:41.667] - globals: [0] <none>
[17:37:41.668] getGlobalsAndPackages() ... DONE
[17:37:41.668]    + additional globals found: [n=0] 
[17:37:41.668]    + additional namespaces needed: [n=0] 
[17:37:41.668]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.668]  - seeds: [5] <seeds>
[17:37:41.668]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.668] getGlobalsAndPackages() ...
[17:37:41.668] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.668] Resolving globals: FALSE
[17:37:41.668] Tweak future expression to call with '...' arguments ...
[17:37:41.669] {
[17:37:41.669]     do.call(function(...) {
[17:37:41.669]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.669]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.669]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.669]             on.exit(options(oopts), add = TRUE)
[17:37:41.669]         }
[17:37:41.669]         {
[17:37:41.669]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.669]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.669]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.669]                   envir = globalenv(), inherits = FALSE)
[17:37:41.669]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.669]             })
[17:37:41.669]         }
[17:37:41.669]     }, args = future.call.arguments)
[17:37:41.669] }
[17:37:41.669] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.669] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.669] 
[17:37:41.669] getGlobalsAndPackages() ... DONE
[17:37:41.670] run() for ‘Future’ ...
[17:37:41.670] - state: ‘created’
[17:37:41.670] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:37:41.670] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.670] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:37:41.670]   - Field: ‘label’
[17:37:41.670]   - Field: ‘local’
[17:37:41.671]   - Field: ‘owner’
[17:37:41.671]   - Field: ‘envir’
[17:37:41.671]   - Field: ‘packages’
[17:37:41.671]   - Field: ‘gc’
[17:37:41.671]   - Field: ‘conditions’
[17:37:41.671]   - Field: ‘expr’
[17:37:41.671]   - Field: ‘uuid’
[17:37:41.671]   - Field: ‘seed’
[17:37:41.671]   - Field: ‘version’
[17:37:41.671]   - Field: ‘result’
[17:37:41.671]   - Field: ‘asynchronous’
[17:37:41.672]   - Field: ‘calls’
[17:37:41.672]   - Field: ‘globals’
[17:37:41.672]   - Field: ‘stdout’
[17:37:41.672]   - Field: ‘earlySignal’
[17:37:41.672]   - Field: ‘lazy’
[17:37:41.672]   - Field: ‘state’
[17:37:41.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:37:41.672] - Launch lazy future ...
[17:37:41.672] Packages needed by the future expression (n = 0): <none>
[17:37:41.672] Packages needed by future strategies (n = 0): <none>
[17:37:41.673] {
[17:37:41.673]     {
[17:37:41.673]         {
[17:37:41.673]             ...future.startTime <- base::Sys.time()
[17:37:41.673]             {
[17:37:41.673]                 {
[17:37:41.673]                   {
[17:37:41.673]                     base::local({
[17:37:41.673]                       has_future <- base::requireNamespace("future", 
[17:37:41.673]                         quietly = TRUE)
[17:37:41.673]                       if (has_future) {
[17:37:41.673]                         ns <- base::getNamespace("future")
[17:37:41.673]                         version <- ns[[".package"]][["version"]]
[17:37:41.673]                         if (is.null(version)) 
[17:37:41.673]                           version <- utils::packageVersion("future")
[17:37:41.673]                       }
[17:37:41.673]                       else {
[17:37:41.673]                         version <- NULL
[17:37:41.673]                       }
[17:37:41.673]                       if (!has_future || version < "1.8.0") {
[17:37:41.673]                         info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.673]                           "", base::R.version$version.string), 
[17:37:41.673]                           platform = base::sprintf("%s (%s-bit)", 
[17:37:41.673]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.673]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.673]                             "release", "version")], collapse = " "), 
[17:37:41.673]                           hostname = base::Sys.info()[["nodename"]])
[17:37:41.673]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.673]                           info)
[17:37:41.673]                         info <- base::paste(info, collapse = "; ")
[17:37:41.673]                         if (!has_future) {
[17:37:41.673]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.673]                             info)
[17:37:41.673]                         }
[17:37:41.673]                         else {
[17:37:41.673]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.673]                             info, version)
[17:37:41.673]                         }
[17:37:41.673]                         base::stop(msg)
[17:37:41.673]                       }
[17:37:41.673]                     })
[17:37:41.673]                   }
[17:37:41.673]                   ...future.strategy.old <- future::plan("list")
[17:37:41.673]                   options(future.plan = NULL)
[17:37:41.673]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.673]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.673]                 }
[17:37:41.673]                 ...future.workdir <- getwd()
[17:37:41.673]             }
[17:37:41.673]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.673]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.673]         }
[17:37:41.673]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.673]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:41.673]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.673]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.673]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.673]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.673]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.673]             base::names(...future.oldOptions))
[17:37:41.673]     }
[17:37:41.673]     if (FALSE) {
[17:37:41.673]     }
[17:37:41.673]     else {
[17:37:41.673]         if (TRUE) {
[17:37:41.673]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.673]                 open = "w")
[17:37:41.673]         }
[17:37:41.673]         else {
[17:37:41.673]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.673]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.673]         }
[17:37:41.673]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.673]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.673]             base::sink(type = "output", split = FALSE)
[17:37:41.673]             base::close(...future.stdout)
[17:37:41.673]         }, add = TRUE)
[17:37:41.673]     }
[17:37:41.673]     ...future.frame <- base::sys.nframe()
[17:37:41.673]     ...future.conditions <- base::list()
[17:37:41.673]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.673]     if (FALSE) {
[17:37:41.673]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.673]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.673]     }
[17:37:41.673]     ...future.result <- base::tryCatch({
[17:37:41.673]         base::withCallingHandlers({
[17:37:41.673]             ...future.value <- base::withVisible(base::local({
[17:37:41.673]                 do.call(function(...) {
[17:37:41.673]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.673]                   if (!identical(...future.globals.maxSize.org, 
[17:37:41.673]                     ...future.globals.maxSize)) {
[17:37:41.673]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.673]                     on.exit(options(oopts), add = TRUE)
[17:37:41.673]                   }
[17:37:41.673]                   {
[17:37:41.673]                     lapply(seq_along(...future.elements_ii), 
[17:37:41.673]                       FUN = function(jj) {
[17:37:41.673]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.673]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.673]                           envir = globalenv(), inherits = FALSE)
[17:37:41.673]                         ...future.FUN(...future.X_jj, ...)
[17:37:41.673]                       })
[17:37:41.673]                   }
[17:37:41.673]                 }, args = future.call.arguments)
[17:37:41.673]             }))
[17:37:41.673]             future::FutureResult(value = ...future.value$value, 
[17:37:41.673]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.673]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.673]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.673]                     ...future.globalenv.names))
[17:37:41.673]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.673]         }, condition = base::local({
[17:37:41.673]             c <- base::c
[17:37:41.673]             inherits <- base::inherits
[17:37:41.673]             invokeRestart <- base::invokeRestart
[17:37:41.673]             length <- base::length
[17:37:41.673]             list <- base::list
[17:37:41.673]             seq.int <- base::seq.int
[17:37:41.673]             signalCondition <- base::signalCondition
[17:37:41.673]             sys.calls <- base::sys.calls
[17:37:41.673]             `[[` <- base::`[[`
[17:37:41.673]             `+` <- base::`+`
[17:37:41.673]             `<<-` <- base::`<<-`
[17:37:41.673]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.673]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.673]                   3L)]
[17:37:41.673]             }
[17:37:41.673]             function(cond) {
[17:37:41.673]                 is_error <- inherits(cond, "error")
[17:37:41.673]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.673]                   NULL)
[17:37:41.673]                 if (is_error) {
[17:37:41.673]                   sessionInformation <- function() {
[17:37:41.673]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.673]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.673]                       search = base::search(), system = base::Sys.info())
[17:37:41.673]                   }
[17:37:41.673]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.673]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.673]                     cond$call), session = sessionInformation(), 
[17:37:41.673]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.673]                   signalCondition(cond)
[17:37:41.673]                 }
[17:37:41.673]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.673]                 "immediateCondition"))) {
[17:37:41.673]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.673]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.673]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.673]                   if (TRUE && !signal) {
[17:37:41.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.673]                     {
[17:37:41.673]                       inherits <- base::inherits
[17:37:41.673]                       invokeRestart <- base::invokeRestart
[17:37:41.673]                       is.null <- base::is.null
[17:37:41.673]                       muffled <- FALSE
[17:37:41.673]                       if (inherits(cond, "message")) {
[17:37:41.673]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.673]                         if (muffled) 
[17:37:41.673]                           invokeRestart("muffleMessage")
[17:37:41.673]                       }
[17:37:41.673]                       else if (inherits(cond, "warning")) {
[17:37:41.673]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.673]                         if (muffled) 
[17:37:41.673]                           invokeRestart("muffleWarning")
[17:37:41.673]                       }
[17:37:41.673]                       else if (inherits(cond, "condition")) {
[17:37:41.673]                         if (!is.null(pattern)) {
[17:37:41.673]                           computeRestarts <- base::computeRestarts
[17:37:41.673]                           grepl <- base::grepl
[17:37:41.673]                           restarts <- computeRestarts(cond)
[17:37:41.673]                           for (restart in restarts) {
[17:37:41.673]                             name <- restart$name
[17:37:41.673]                             if (is.null(name)) 
[17:37:41.673]                               next
[17:37:41.673]                             if (!grepl(pattern, name)) 
[17:37:41.673]                               next
[17:37:41.673]                             invokeRestart(restart)
[17:37:41.673]                             muffled <- TRUE
[17:37:41.673]                             break
[17:37:41.673]                           }
[17:37:41.673]                         }
[17:37:41.673]                       }
[17:37:41.673]                       invisible(muffled)
[17:37:41.673]                     }
[17:37:41.673]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.673]                   }
[17:37:41.673]                 }
[17:37:41.673]                 else {
[17:37:41.673]                   if (TRUE) {
[17:37:41.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.673]                     {
[17:37:41.673]                       inherits <- base::inherits
[17:37:41.673]                       invokeRestart <- base::invokeRestart
[17:37:41.673]                       is.null <- base::is.null
[17:37:41.673]                       muffled <- FALSE
[17:37:41.673]                       if (inherits(cond, "message")) {
[17:37:41.673]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.673]                         if (muffled) 
[17:37:41.673]                           invokeRestart("muffleMessage")
[17:37:41.673]                       }
[17:37:41.673]                       else if (inherits(cond, "warning")) {
[17:37:41.673]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.673]                         if (muffled) 
[17:37:41.673]                           invokeRestart("muffleWarning")
[17:37:41.673]                       }
[17:37:41.673]                       else if (inherits(cond, "condition")) {
[17:37:41.673]                         if (!is.null(pattern)) {
[17:37:41.673]                           computeRestarts <- base::computeRestarts
[17:37:41.673]                           grepl <- base::grepl
[17:37:41.673]                           restarts <- computeRestarts(cond)
[17:37:41.673]                           for (restart in restarts) {
[17:37:41.673]                             name <- restart$name
[17:37:41.673]                             if (is.null(name)) 
[17:37:41.673]                               next
[17:37:41.673]                             if (!grepl(pattern, name)) 
[17:37:41.673]                               next
[17:37:41.673]                             invokeRestart(restart)
[17:37:41.673]                             muffled <- TRUE
[17:37:41.673]                             break
[17:37:41.673]                           }
[17:37:41.673]                         }
[17:37:41.673]                       }
[17:37:41.673]                       invisible(muffled)
[17:37:41.673]                     }
[17:37:41.673]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.673]                   }
[17:37:41.673]                 }
[17:37:41.673]             }
[17:37:41.673]         }))
[17:37:41.673]     }, error = function(ex) {
[17:37:41.673]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.673]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.673]                 ...future.rng), started = ...future.startTime, 
[17:37:41.673]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.673]             version = "1.8"), class = "FutureResult")
[17:37:41.673]     }, finally = {
[17:37:41.673]         if (!identical(...future.workdir, getwd())) 
[17:37:41.673]             setwd(...future.workdir)
[17:37:41.673]         {
[17:37:41.673]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.673]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.673]             }
[17:37:41.673]             base::options(...future.oldOptions)
[17:37:41.673]             if (.Platform$OS.type == "windows") {
[17:37:41.673]                 old_names <- names(...future.oldEnvVars)
[17:37:41.673]                 envs <- base::Sys.getenv()
[17:37:41.673]                 names <- names(envs)
[17:37:41.673]                 common <- intersect(names, old_names)
[17:37:41.673]                 added <- setdiff(names, old_names)
[17:37:41.673]                 removed <- setdiff(old_names, names)
[17:37:41.673]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.673]                   envs[common]]
[17:37:41.673]                 NAMES <- toupper(changed)
[17:37:41.673]                 args <- list()
[17:37:41.673]                 for (kk in seq_along(NAMES)) {
[17:37:41.673]                   name <- changed[[kk]]
[17:37:41.673]                   NAME <- NAMES[[kk]]
[17:37:41.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.673]                     next
[17:37:41.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.673]                 }
[17:37:41.673]                 NAMES <- toupper(added)
[17:37:41.673]                 for (kk in seq_along(NAMES)) {
[17:37:41.673]                   name <- added[[kk]]
[17:37:41.673]                   NAME <- NAMES[[kk]]
[17:37:41.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.673]                     next
[17:37:41.673]                   args[[name]] <- ""
[17:37:41.673]                 }
[17:37:41.673]                 NAMES <- toupper(removed)
[17:37:41.673]                 for (kk in seq_along(NAMES)) {
[17:37:41.673]                   name <- removed[[kk]]
[17:37:41.673]                   NAME <- NAMES[[kk]]
[17:37:41.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.673]                     next
[17:37:41.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.673]                 }
[17:37:41.673]                 if (length(args) > 0) 
[17:37:41.673]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.673]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.673]             }
[17:37:41.673]             else {
[17:37:41.673]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.673]             }
[17:37:41.673]             {
[17:37:41.673]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.673]                   0L) {
[17:37:41.673]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.673]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.673]                   base::options(opts)
[17:37:41.673]                 }
[17:37:41.673]                 {
[17:37:41.673]                   {
[17:37:41.673]                     base::assign(".Random.seed", c(10403L, 4L, 
[17:37:41.673]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:37:41.673]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:37:41.673]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:37:41.673]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:37:41.673]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:37:41.673]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:37:41.673]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:37:41.673]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:37:41.673]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:37:41.673]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:37:41.673]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:37:41.673]                     -1512233174L, -1985955764L, -425390065L, 
[17:37:41.673]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:37:41.673]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:37:41.673]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:37:41.673]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:37:41.673]                     1818328109L, -1284085436L, -1981489558L, 
[17:37:41.673]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:37:41.673]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:37:41.673]                     -1718567047L, -793788661L, -1133789126L, 
[17:37:41.673]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:37:41.673]                     -1823521982L, -1345991523L, -1672661737L, 
[17:37:41.673]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:37:41.673]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:37:41.673]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:37:41.673]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:37:41.673]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:37:41.673]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:37:41.673]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:37:41.673]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:37:41.673]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:37:41.673]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:37:41.673]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:37:41.673]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:37:41.673]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:37:41.673]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:37:41.673]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:37:41.673]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:37:41.673]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:37:41.673]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:37:41.673]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:37:41.673]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:37:41.673]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:37:41.673]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:37:41.673]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:37:41.673]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:37:41.673]                     -1119334354L, -1521015416L, -2041922421L, 
[17:37:41.673]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:37:41.673]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:37:41.673]                     1232111981L, -1801753084L, -1608606422L, 
[17:37:41.673]                     -1172096363L, 1420874031L, -1210473418L, 
[17:37:41.673]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:37:41.673]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:37:41.673]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:37:41.673]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:37:41.673]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:37:41.673]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:37:41.673]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:37:41.673]                     -332493318L, -1978392251L, -1691039632L, 
[17:37:41.673]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:37:41.673]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:37:41.673]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:37:41.673]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:37:41.673]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:37:41.673]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:37:41.673]                     -1178330196L, -687617348L, -1701912078L, 
[17:37:41.673]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:37:41.673]                     -1345416048L, 1816730492L, -1570431212L, 
[17:37:41.673]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:37:41.673]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:37:41.673]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:37:41.673]                     -1493184262L, -1943836976L, -590788308L, 
[17:37:41.673]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:37:41.673]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:37:41.673]                     1274857340L, -1205842638L, -1938479504L, 
[17:37:41.673]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:37:41.673]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:37:41.673]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:37:41.673]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:37:41.673]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:37:41.673]                     -1460751252L, 1201879444L, -1459788718L, 
[17:37:41.673]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:37:41.673]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:37:41.673]                     -420945808L, -1997735900L, -1838404552L, 
[17:37:41.673]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:37:41.673]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:37:41.673]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:37:41.673]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:37:41.673]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:37:41.673]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:37:41.673]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:37:41.673]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:37:41.673]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:37:41.673]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:37:41.673]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:37:41.673]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:37:41.673]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:37:41.673]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:37:41.673]                     -1357570110L, 1896595240L, -2066952276L, 
[17:37:41.673]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:37:41.673]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:37:41.673]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:37:41.673]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:37:41.673]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:37:41.673]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:37:41.673]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:37:41.673]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:37:41.673]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:37:41.673]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:37:41.673]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:37:41.673]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:37:41.673]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:37:41.673]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:37:41.673]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:37:41.673]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:37:41.673]                     -1365842884L, -438961294L, -1851472272L, 
[17:37:41.673]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:37:41.673]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:37:41.673]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:37:41.673]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:37:41.673]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:37:41.673]                     -594809770L, -2146766621L, -2013964635L, 
[17:37:41.673]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:37:41.673]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:37:41.673]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:37:41.673]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:37:41.673]                     -1426021878L, -1285634264L, 1507547537L, 
[17:37:41.673]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:37:41.673]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:37:41.673]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:37:41.673]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:37:41.673]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:37:41.673]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:37:41.673]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:37:41.673]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:37:41.673]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:37:41.673]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:37:41.673]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:37:41.673]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:37:41.673]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:37:41.673]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:37:41.673]                     -1604604761L, 1421229008L, -1268333714L, 
[17:37:41.673]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:37:41.673]                     -2070476623L, -2099222749L, 1141171236L, 
[17:37:41.673]                     -146426158L, -1797385433L, -1129376399L, 
[17:37:41.673]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:37:41.673]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:37:41.673]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:37:41.673]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:37:41.673]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:37:41.673]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:37:41.673]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:37:41.673]                     -1092079724L, -1765622238L, -1882554057L, 
[17:37:41.673]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:37:41.673]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:37:41.673]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:37:41.673]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:37:41.673]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:37:41.673]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:37:41.673]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:37:41.673]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:37:41.673]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:37:41.673]                       inherits = FALSE)
[17:37:41.673]                     NULL
[17:37:41.673]                   }
[17:37:41.673]                   options(future.plan = NULL)
[17:37:41.673]                   if (is.na(NA_character_)) 
[17:37:41.673]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.673]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.673]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.673]                     .init = FALSE)
[17:37:41.673]                 }
[17:37:41.673]             }
[17:37:41.673]         }
[17:37:41.673]     })
[17:37:41.673]     if (TRUE) {
[17:37:41.673]         base::sink(type = "output", split = FALSE)
[17:37:41.673]         if (TRUE) {
[17:37:41.673]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.673]         }
[17:37:41.673]         else {
[17:37:41.673]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.673]         }
[17:37:41.673]         base::close(...future.stdout)
[17:37:41.673]         ...future.stdout <- NULL
[17:37:41.673]     }
[17:37:41.673]     ...future.result$conditions <- ...future.conditions
[17:37:41.673]     ...future.result$finished <- base::Sys.time()
[17:37:41.673]     ...future.result
[17:37:41.673] }
[17:37:41.675] assign_globals() ...
[17:37:41.676] List of 5
[17:37:41.676]  $ ...future.FUN            :function (...)  
[17:37:41.676]  $ future.call.arguments    : list()
[17:37:41.676]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.676]  $ ...future.elements_ii    :List of 5
[17:37:41.676]   ..$ : int 0
[17:37:41.676]   ..$ : int 0
[17:37:41.676]   ..$ : int 0
[17:37:41.676]   ..$ : int 0
[17:37:41.676]   ..$ : int 0
[17:37:41.676]  $ ...future.seeds_ii       :List of 5
[17:37:41.676]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:37:41.676]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:37:41.676]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:37:41.676]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:37:41.676]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:37:41.676]  $ ...future.globals.maxSize: NULL
[17:37:41.676]  - attr(*, "where")=List of 5
[17:37:41.676]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.676]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.676]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.676]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.676]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.676]  - attr(*, "resolved")= logi FALSE
[17:37:41.676]  - attr(*, "total_size")= num 616
[17:37:41.676]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.676]  - attr(*, "already-done")= logi TRUE
[17:37:41.683] - reassign environment for ‘...future.FUN’
[17:37:41.683] - copied ‘...future.FUN’ to environment
[17:37:41.683] - copied ‘future.call.arguments’ to environment
[17:37:41.683] - copied ‘...future.elements_ii’ to environment
[17:37:41.683] - copied ‘...future.seeds_ii’ to environment
[17:37:41.683] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.683] assign_globals() ... done
[17:37:41.684] plan(): Setting new future strategy stack:
[17:37:41.684] List of future strategies:
[17:37:41.684] 1. sequential:
[17:37:41.684]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.684]    - tweaked: FALSE
[17:37:41.684]    - call: NULL
[17:37:41.684] plan(): nbrOfWorkers() = 1
[17:37:41.685] plan(): Setting new future strategy stack:
[17:37:41.685] List of future strategies:
[17:37:41.685] 1. sequential:
[17:37:41.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.685]    - tweaked: FALSE
[17:37:41.685]    - call: plan(strategy)
[17:37:41.686] plan(): nbrOfWorkers() = 1
[17:37:41.686] SequentialFuture started (and completed)
[17:37:41.686] - Launch lazy future ... done
[17:37:41.686] run() for ‘SequentialFuture’ ... done
[17:37:41.686] Created future:
[17:37:41.686] SequentialFuture:
[17:37:41.686] Label: ‘future_replicate-1’
[17:37:41.686] Expression:
[17:37:41.686] {
[17:37:41.686]     do.call(function(...) {
[17:37:41.686]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.686]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.686]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.686]             on.exit(options(oopts), add = TRUE)
[17:37:41.686]         }
[17:37:41.686]         {
[17:37:41.686]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.686]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.686]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.686]                   envir = globalenv(), inherits = FALSE)
[17:37:41.686]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.686]             })
[17:37:41.686]         }
[17:37:41.686]     }, args = future.call.arguments)
[17:37:41.686] }
[17:37:41.686] Lazy evaluation: FALSE
[17:37:41.686] Asynchronous evaluation: FALSE
[17:37:41.686] Local evaluation: TRUE
[17:37:41.686] Environment: R_GlobalEnv
[17:37:41.686] Capture standard output: TRUE
[17:37:41.686] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.686] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.686] Packages: <none>
[17:37:41.686] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.686] Resolved: TRUE
[17:37:41.686] Value: 280 bytes of class ‘list’
[17:37:41.686] Early signaling: FALSE
[17:37:41.686] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.686] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.687] Chunk #1 of 1 ... DONE
[17:37:41.687] Launching 1 futures (chunks) ... DONE
[17:37:41.687] Resolving 1 futures (chunks) ...
[17:37:41.688] resolve() on list ...
[17:37:41.688]  recursive: 0
[17:37:41.688]  length: 1
[17:37:41.688] 
[17:37:41.688] resolved() for ‘SequentialFuture’ ...
[17:37:41.688] - state: ‘finished’
[17:37:41.688] - run: TRUE
[17:37:41.688] - result: ‘FutureResult’
[17:37:41.688] resolved() for ‘SequentialFuture’ ... done
[17:37:41.688] Future #1
[17:37:41.689] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:37:41.689] - nx: 1
[17:37:41.689] - relay: TRUE
[17:37:41.689] - stdout: TRUE
[17:37:41.689] - signal: TRUE
[17:37:41.689] - resignal: FALSE
[17:37:41.689] - force: TRUE
[17:37:41.689] - relayed: [n=1] FALSE
[17:37:41.689] - queued futures: [n=1] FALSE
[17:37:41.689]  - until=1
[17:37:41.689]  - relaying element #1
[17:37:41.690] - relayed: [n=1] TRUE
[17:37:41.690] - queued futures: [n=1] TRUE
[17:37:41.690] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:37:41.690]  length: 0 (resolved future 1)
[17:37:41.690] Relaying remaining futures
[17:37:41.690] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.690] - nx: 1
[17:37:41.690] - relay: TRUE
[17:37:41.690] - stdout: TRUE
[17:37:41.690] - signal: TRUE
[17:37:41.690] - resignal: FALSE
[17:37:41.691] - force: TRUE
[17:37:41.691] - relayed: [n=1] TRUE
[17:37:41.691] - queued futures: [n=1] TRUE
 - flush all
[17:37:41.691] - relayed: [n=1] TRUE
[17:37:41.691] - queued futures: [n=1] TRUE
[17:37:41.691] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.691] resolve() on list ... DONE
[17:37:41.691]  - Number of value chunks collected: 1
[17:37:41.691] Resolving 1 futures (chunks) ... DONE
[17:37:41.691] Reducing values from 1 chunks ...
[17:37:41.691]  - Number of values collected after concatenation: 5
[17:37:41.692]  - Number of values expected: 5
[17:37:41.692] Reducing values from 1 chunks ... DONE
[17:37:41.692] future_lapply() ... DONE
[17:37:41.692] future_lapply() ...
[17:37:41.692] Generating random seeds ...
[17:37:41.692] Generating random seed streams for 5 elements ...
[17:37:41.693] Generating random seed streams for 5 elements ... DONE
[17:37:41.693] Generating random seeds ... DONE
[17:37:41.695] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.695] Number of chunks: 1
[17:37:41.695] getGlobalsAndPackagesXApply() ...
[17:37:41.695]  - future.globals: TRUE
[17:37:41.695] getGlobalsAndPackages() ...
[17:37:41.696] Searching for globals...
[17:37:41.697] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.697] Searching for globals ... DONE
[17:37:41.697] Resolving globals: FALSE
[17:37:41.697] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.698] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.698] - globals: [1] ‘FUN’
[17:37:41.698] 
[17:37:41.698] getGlobalsAndPackages() ... DONE
[17:37:41.698]  - globals found/used: [n=1] ‘FUN’
[17:37:41.698]  - needed namespaces: [n=0] 
[17:37:41.698] Finding globals ... DONE
[17:37:41.698]  - use_args: TRUE
[17:37:41.698]  - Getting '...' globals ...
[17:37:41.699] resolve() on list ...
[17:37:41.699]  recursive: 0
[17:37:41.699]  length: 1
[17:37:41.699]  elements: ‘...’
[17:37:41.699]  length: 0 (resolved future 1)
[17:37:41.699] resolve() on list ... DONE
[17:37:41.699]    - '...' content: [n=0] 
[17:37:41.699] List of 1
[17:37:41.699]  $ ...: list()
[17:37:41.699]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.699]  - attr(*, "where")=List of 1
[17:37:41.699]   ..$ ...:<environment: 0x5640c0ffd030> 
[17:37:41.699]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.699]  - attr(*, "resolved")= logi TRUE
[17:37:41.699]  - attr(*, "total_size")= num NA
[17:37:41.702]  - Getting '...' globals ... DONE
[17:37:41.702] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.702] List of 2
[17:37:41.702]  $ ...future.FUN:function (...)  
[17:37:41.702]  $ ...          : list()
[17:37:41.702]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.702]  - attr(*, "where")=List of 2
[17:37:41.702]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.702]   ..$ ...          :<environment: 0x5640c0ffd030> 
[17:37:41.702]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.702]  - attr(*, "resolved")= logi FALSE
[17:37:41.702]  - attr(*, "total_size")= num 616
[17:37:41.705] Packages to be attached in all futures: [n=0] 
[17:37:41.705] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.705] Number of futures (= number of chunks): 1
[17:37:41.705] Launching 1 futures (chunks) ...
[17:37:41.705] Chunk #1 of 1 ...
[17:37:41.705]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.706] getGlobalsAndPackages() ...
[17:37:41.706] Searching for globals...
[17:37:41.706] 
[17:37:41.706] Searching for globals ... DONE
[17:37:41.706] - globals: [0] <none>
[17:37:41.706] getGlobalsAndPackages() ... DONE
[17:37:41.706]    + additional globals found: [n=0] 
[17:37:41.706]    + additional namespaces needed: [n=0] 
[17:37:41.707]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.707]  - seeds: [5] <seeds>
[17:37:41.707]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.707] getGlobalsAndPackages() ...
[17:37:41.707] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.707] Resolving globals: FALSE
[17:37:41.707] Tweak future expression to call with '...' arguments ...
[17:37:41.707] {
[17:37:41.707]     do.call(function(...) {
[17:37:41.707]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.707]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.707]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.707]             on.exit(options(oopts), add = TRUE)
[17:37:41.707]         }
[17:37:41.707]         {
[17:37:41.707]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.707]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.707]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.707]                   envir = globalenv(), inherits = FALSE)
[17:37:41.707]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.707]             })
[17:37:41.707]         }
[17:37:41.707]     }, args = future.call.arguments)
[17:37:41.707] }
[17:37:41.708] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.708] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.708] 
[17:37:41.708] getGlobalsAndPackages() ... DONE
[17:37:41.709] run() for ‘Future’ ...
[17:37:41.709] - state: ‘created’
[17:37:41.709] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:37:41.709] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.709] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:37:41.709]   - Field: ‘label’
[17:37:41.709]   - Field: ‘local’
[17:37:41.710]   - Field: ‘owner’
[17:37:41.710]   - Field: ‘envir’
[17:37:41.710]   - Field: ‘packages’
[17:37:41.710]   - Field: ‘gc’
[17:37:41.710]   - Field: ‘conditions’
[17:37:41.710]   - Field: ‘expr’
[17:37:41.710]   - Field: ‘uuid’
[17:37:41.710]   - Field: ‘seed’
[17:37:41.710]   - Field: ‘version’
[17:37:41.710]   - Field: ‘result’
[17:37:41.710]   - Field: ‘asynchronous’
[17:37:41.711]   - Field: ‘calls’
[17:37:41.711]   - Field: ‘globals’
[17:37:41.711]   - Field: ‘stdout’
[17:37:41.711]   - Field: ‘earlySignal’
[17:37:41.711]   - Field: ‘lazy’
[17:37:41.711]   - Field: ‘state’
[17:37:41.711] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:37:41.711] - Launch lazy future ...
[17:37:41.711] Packages needed by the future expression (n = 0): <none>
[17:37:41.712] Packages needed by future strategies (n = 0): <none>
[17:37:41.712] {
[17:37:41.712]     {
[17:37:41.712]         {
[17:37:41.712]             ...future.startTime <- base::Sys.time()
[17:37:41.712]             {
[17:37:41.712]                 {
[17:37:41.712]                   {
[17:37:41.712]                     base::local({
[17:37:41.712]                       has_future <- base::requireNamespace("future", 
[17:37:41.712]                         quietly = TRUE)
[17:37:41.712]                       if (has_future) {
[17:37:41.712]                         ns <- base::getNamespace("future")
[17:37:41.712]                         version <- ns[[".package"]][["version"]]
[17:37:41.712]                         if (is.null(version)) 
[17:37:41.712]                           version <- utils::packageVersion("future")
[17:37:41.712]                       }
[17:37:41.712]                       else {
[17:37:41.712]                         version <- NULL
[17:37:41.712]                       }
[17:37:41.712]                       if (!has_future || version < "1.8.0") {
[17:37:41.712]                         info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.712]                           "", base::R.version$version.string), 
[17:37:41.712]                           platform = base::sprintf("%s (%s-bit)", 
[17:37:41.712]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.712]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.712]                             "release", "version")], collapse = " "), 
[17:37:41.712]                           hostname = base::Sys.info()[["nodename"]])
[17:37:41.712]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.712]                           info)
[17:37:41.712]                         info <- base::paste(info, collapse = "; ")
[17:37:41.712]                         if (!has_future) {
[17:37:41.712]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.712]                             info)
[17:37:41.712]                         }
[17:37:41.712]                         else {
[17:37:41.712]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.712]                             info, version)
[17:37:41.712]                         }
[17:37:41.712]                         base::stop(msg)
[17:37:41.712]                       }
[17:37:41.712]                     })
[17:37:41.712]                   }
[17:37:41.712]                   ...future.strategy.old <- future::plan("list")
[17:37:41.712]                   options(future.plan = NULL)
[17:37:41.712]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.712]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.712]                 }
[17:37:41.712]                 ...future.workdir <- getwd()
[17:37:41.712]             }
[17:37:41.712]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.712]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.712]         }
[17:37:41.712]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.712]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:41.712]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.712]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.712]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.712]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.712]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.712]             base::names(...future.oldOptions))
[17:37:41.712]     }
[17:37:41.712]     if (FALSE) {
[17:37:41.712]     }
[17:37:41.712]     else {
[17:37:41.712]         if (TRUE) {
[17:37:41.712]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.712]                 open = "w")
[17:37:41.712]         }
[17:37:41.712]         else {
[17:37:41.712]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.712]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.712]         }
[17:37:41.712]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.712]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.712]             base::sink(type = "output", split = FALSE)
[17:37:41.712]             base::close(...future.stdout)
[17:37:41.712]         }, add = TRUE)
[17:37:41.712]     }
[17:37:41.712]     ...future.frame <- base::sys.nframe()
[17:37:41.712]     ...future.conditions <- base::list()
[17:37:41.712]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.712]     if (FALSE) {
[17:37:41.712]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.712]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.712]     }
[17:37:41.712]     ...future.result <- base::tryCatch({
[17:37:41.712]         base::withCallingHandlers({
[17:37:41.712]             ...future.value <- base::withVisible(base::local({
[17:37:41.712]                 do.call(function(...) {
[17:37:41.712]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.712]                   if (!identical(...future.globals.maxSize.org, 
[17:37:41.712]                     ...future.globals.maxSize)) {
[17:37:41.712]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.712]                     on.exit(options(oopts), add = TRUE)
[17:37:41.712]                   }
[17:37:41.712]                   {
[17:37:41.712]                     lapply(seq_along(...future.elements_ii), 
[17:37:41.712]                       FUN = function(jj) {
[17:37:41.712]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.712]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.712]                           envir = globalenv(), inherits = FALSE)
[17:37:41.712]                         ...future.FUN(...future.X_jj, ...)
[17:37:41.712]                       })
[17:37:41.712]                   }
[17:37:41.712]                 }, args = future.call.arguments)
[17:37:41.712]             }))
[17:37:41.712]             future::FutureResult(value = ...future.value$value, 
[17:37:41.712]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.712]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.712]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.712]                     ...future.globalenv.names))
[17:37:41.712]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.712]         }, condition = base::local({
[17:37:41.712]             c <- base::c
[17:37:41.712]             inherits <- base::inherits
[17:37:41.712]             invokeRestart <- base::invokeRestart
[17:37:41.712]             length <- base::length
[17:37:41.712]             list <- base::list
[17:37:41.712]             seq.int <- base::seq.int
[17:37:41.712]             signalCondition <- base::signalCondition
[17:37:41.712]             sys.calls <- base::sys.calls
[17:37:41.712]             `[[` <- base::`[[`
[17:37:41.712]             `+` <- base::`+`
[17:37:41.712]             `<<-` <- base::`<<-`
[17:37:41.712]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.712]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.712]                   3L)]
[17:37:41.712]             }
[17:37:41.712]             function(cond) {
[17:37:41.712]                 is_error <- inherits(cond, "error")
[17:37:41.712]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.712]                   NULL)
[17:37:41.712]                 if (is_error) {
[17:37:41.712]                   sessionInformation <- function() {
[17:37:41.712]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.712]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.712]                       search = base::search(), system = base::Sys.info())
[17:37:41.712]                   }
[17:37:41.712]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.712]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.712]                     cond$call), session = sessionInformation(), 
[17:37:41.712]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.712]                   signalCondition(cond)
[17:37:41.712]                 }
[17:37:41.712]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.712]                 "immediateCondition"))) {
[17:37:41.712]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.712]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.712]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.712]                   if (TRUE && !signal) {
[17:37:41.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.712]                     {
[17:37:41.712]                       inherits <- base::inherits
[17:37:41.712]                       invokeRestart <- base::invokeRestart
[17:37:41.712]                       is.null <- base::is.null
[17:37:41.712]                       muffled <- FALSE
[17:37:41.712]                       if (inherits(cond, "message")) {
[17:37:41.712]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.712]                         if (muffled) 
[17:37:41.712]                           invokeRestart("muffleMessage")
[17:37:41.712]                       }
[17:37:41.712]                       else if (inherits(cond, "warning")) {
[17:37:41.712]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.712]                         if (muffled) 
[17:37:41.712]                           invokeRestart("muffleWarning")
[17:37:41.712]                       }
[17:37:41.712]                       else if (inherits(cond, "condition")) {
[17:37:41.712]                         if (!is.null(pattern)) {
[17:37:41.712]                           computeRestarts <- base::computeRestarts
[17:37:41.712]                           grepl <- base::grepl
[17:37:41.712]                           restarts <- computeRestarts(cond)
[17:37:41.712]                           for (restart in restarts) {
[17:37:41.712]                             name <- restart$name
[17:37:41.712]                             if (is.null(name)) 
[17:37:41.712]                               next
[17:37:41.712]                             if (!grepl(pattern, name)) 
[17:37:41.712]                               next
[17:37:41.712]                             invokeRestart(restart)
[17:37:41.712]                             muffled <- TRUE
[17:37:41.712]                             break
[17:37:41.712]                           }
[17:37:41.712]                         }
[17:37:41.712]                       }
[17:37:41.712]                       invisible(muffled)
[17:37:41.712]                     }
[17:37:41.712]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.712]                   }
[17:37:41.712]                 }
[17:37:41.712]                 else {
[17:37:41.712]                   if (TRUE) {
[17:37:41.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.712]                     {
[17:37:41.712]                       inherits <- base::inherits
[17:37:41.712]                       invokeRestart <- base::invokeRestart
[17:37:41.712]                       is.null <- base::is.null
[17:37:41.712]                       muffled <- FALSE
[17:37:41.712]                       if (inherits(cond, "message")) {
[17:37:41.712]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.712]                         if (muffled) 
[17:37:41.712]                           invokeRestart("muffleMessage")
[17:37:41.712]                       }
[17:37:41.712]                       else if (inherits(cond, "warning")) {
[17:37:41.712]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.712]                         if (muffled) 
[17:37:41.712]                           invokeRestart("muffleWarning")
[17:37:41.712]                       }
[17:37:41.712]                       else if (inherits(cond, "condition")) {
[17:37:41.712]                         if (!is.null(pattern)) {
[17:37:41.712]                           computeRestarts <- base::computeRestarts
[17:37:41.712]                           grepl <- base::grepl
[17:37:41.712]                           restarts <- computeRestarts(cond)
[17:37:41.712]                           for (restart in restarts) {
[17:37:41.712]                             name <- restart$name
[17:37:41.712]                             if (is.null(name)) 
[17:37:41.712]                               next
[17:37:41.712]                             if (!grepl(pattern, name)) 
[17:37:41.712]                               next
[17:37:41.712]                             invokeRestart(restart)
[17:37:41.712]                             muffled <- TRUE
[17:37:41.712]                             break
[17:37:41.712]                           }
[17:37:41.712]                         }
[17:37:41.712]                       }
[17:37:41.712]                       invisible(muffled)
[17:37:41.712]                     }
[17:37:41.712]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.712]                   }
[17:37:41.712]                 }
[17:37:41.712]             }
[17:37:41.712]         }))
[17:37:41.712]     }, error = function(ex) {
[17:37:41.712]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.712]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.712]                 ...future.rng), started = ...future.startTime, 
[17:37:41.712]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.712]             version = "1.8"), class = "FutureResult")
[17:37:41.712]     }, finally = {
[17:37:41.712]         if (!identical(...future.workdir, getwd())) 
[17:37:41.712]             setwd(...future.workdir)
[17:37:41.712]         {
[17:37:41.712]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.712]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.712]             }
[17:37:41.712]             base::options(...future.oldOptions)
[17:37:41.712]             if (.Platform$OS.type == "windows") {
[17:37:41.712]                 old_names <- names(...future.oldEnvVars)
[17:37:41.712]                 envs <- base::Sys.getenv()
[17:37:41.712]                 names <- names(envs)
[17:37:41.712]                 common <- intersect(names, old_names)
[17:37:41.712]                 added <- setdiff(names, old_names)
[17:37:41.712]                 removed <- setdiff(old_names, names)
[17:37:41.712]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.712]                   envs[common]]
[17:37:41.712]                 NAMES <- toupper(changed)
[17:37:41.712]                 args <- list()
[17:37:41.712]                 for (kk in seq_along(NAMES)) {
[17:37:41.712]                   name <- changed[[kk]]
[17:37:41.712]                   NAME <- NAMES[[kk]]
[17:37:41.712]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.712]                     next
[17:37:41.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.712]                 }
[17:37:41.712]                 NAMES <- toupper(added)
[17:37:41.712]                 for (kk in seq_along(NAMES)) {
[17:37:41.712]                   name <- added[[kk]]
[17:37:41.712]                   NAME <- NAMES[[kk]]
[17:37:41.712]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.712]                     next
[17:37:41.712]                   args[[name]] <- ""
[17:37:41.712]                 }
[17:37:41.712]                 NAMES <- toupper(removed)
[17:37:41.712]                 for (kk in seq_along(NAMES)) {
[17:37:41.712]                   name <- removed[[kk]]
[17:37:41.712]                   NAME <- NAMES[[kk]]
[17:37:41.712]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.712]                     next
[17:37:41.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.712]                 }
[17:37:41.712]                 if (length(args) > 0) 
[17:37:41.712]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.712]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.712]             }
[17:37:41.712]             else {
[17:37:41.712]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.712]             }
[17:37:41.712]             {
[17:37:41.712]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.712]                   0L) {
[17:37:41.712]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.712]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.712]                   base::options(opts)
[17:37:41.712]                 }
[17:37:41.712]                 {
[17:37:41.712]                   {
[17:37:41.712]                     base::assign(".Random.seed", c(10403L, 6L, 
[17:37:41.712]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:37:41.712]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:37:41.712]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:37:41.712]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:37:41.712]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:37:41.712]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:37:41.712]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:37:41.712]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:37:41.712]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:37:41.712]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:37:41.712]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:37:41.712]                     -1512233174L, -1985955764L, -425390065L, 
[17:37:41.712]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:37:41.712]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:37:41.712]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:37:41.712]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:37:41.712]                     1818328109L, -1284085436L, -1981489558L, 
[17:37:41.712]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:37:41.712]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:37:41.712]                     -1718567047L, -793788661L, -1133789126L, 
[17:37:41.712]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:37:41.712]                     -1823521982L, -1345991523L, -1672661737L, 
[17:37:41.712]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:37:41.712]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:37:41.712]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:37:41.712]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:37:41.712]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:37:41.712]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:37:41.712]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:37:41.712]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:37:41.712]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:37:41.712]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:37:41.712]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:37:41.712]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:37:41.712]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:37:41.712]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:37:41.712]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:37:41.712]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:37:41.712]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:37:41.712]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:37:41.712]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:37:41.712]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:37:41.712]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:37:41.712]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:37:41.712]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:37:41.712]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:37:41.712]                     -1119334354L, -1521015416L, -2041922421L, 
[17:37:41.712]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:37:41.712]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:37:41.712]                     1232111981L, -1801753084L, -1608606422L, 
[17:37:41.712]                     -1172096363L, 1420874031L, -1210473418L, 
[17:37:41.712]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:37:41.712]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:37:41.712]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:37:41.712]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:37:41.712]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:37:41.712]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:37:41.712]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:37:41.712]                     -332493318L, -1978392251L, -1691039632L, 
[17:37:41.712]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:37:41.712]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:37:41.712]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:37:41.712]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:37:41.712]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:37:41.712]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:37:41.712]                     -1178330196L, -687617348L, -1701912078L, 
[17:37:41.712]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:37:41.712]                     -1345416048L, 1816730492L, -1570431212L, 
[17:37:41.712]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:37:41.712]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:37:41.712]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:37:41.712]                     -1493184262L, -1943836976L, -590788308L, 
[17:37:41.712]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:37:41.712]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:37:41.712]                     1274857340L, -1205842638L, -1938479504L, 
[17:37:41.712]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:37:41.712]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:37:41.712]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:37:41.712]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:37:41.712]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:37:41.712]                     -1460751252L, 1201879444L, -1459788718L, 
[17:37:41.712]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:37:41.712]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:37:41.712]                     -420945808L, -1997735900L, -1838404552L, 
[17:37:41.712]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:37:41.712]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:37:41.712]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:37:41.712]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:37:41.712]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:37:41.712]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:37:41.712]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:37:41.712]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:37:41.712]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:37:41.712]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:37:41.712]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:37:41.712]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:37:41.712]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:37:41.712]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:37:41.712]                     -1357570110L, 1896595240L, -2066952276L, 
[17:37:41.712]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:37:41.712]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:37:41.712]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:37:41.712]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:37:41.712]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:37:41.712]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:37:41.712]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:37:41.712]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:37:41.712]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:37:41.712]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:37:41.712]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:37:41.712]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:37:41.712]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:37:41.712]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:37:41.712]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:37:41.712]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:37:41.712]                     -1365842884L, -438961294L, -1851472272L, 
[17:37:41.712]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:37:41.712]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:37:41.712]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:37:41.712]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:37:41.712]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:37:41.712]                     -594809770L, -2146766621L, -2013964635L, 
[17:37:41.712]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:37:41.712]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:37:41.712]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:37:41.712]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:37:41.712]                     -1426021878L, -1285634264L, 1507547537L, 
[17:37:41.712]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:37:41.712]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:37:41.712]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:37:41.712]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:37:41.712]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:37:41.712]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:37:41.712]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:37:41.712]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:37:41.712]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:37:41.712]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:37:41.712]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:37:41.712]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:37:41.712]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:37:41.712]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:37:41.712]                     -1604604761L, 1421229008L, -1268333714L, 
[17:37:41.712]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:37:41.712]                     -2070476623L, -2099222749L, 1141171236L, 
[17:37:41.712]                     -146426158L, -1797385433L, -1129376399L, 
[17:37:41.712]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:37:41.712]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:37:41.712]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:37:41.712]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:37:41.712]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:37:41.712]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:37:41.712]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:37:41.712]                     -1092079724L, -1765622238L, -1882554057L, 
[17:37:41.712]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:37:41.712]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:37:41.712]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:37:41.712]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:37:41.712]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:37:41.712]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:37:41.712]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:37:41.712]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:37:41.712]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:37:41.712]                       inherits = FALSE)
[17:37:41.712]                     NULL
[17:37:41.712]                   }
[17:37:41.712]                   options(future.plan = NULL)
[17:37:41.712]                   if (is.na(NA_character_)) 
[17:37:41.712]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.712]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.712]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.712]                     .init = FALSE)
[17:37:41.712]                 }
[17:37:41.712]             }
[17:37:41.712]         }
[17:37:41.712]     })
[17:37:41.712]     if (TRUE) {
[17:37:41.712]         base::sink(type = "output", split = FALSE)
[17:37:41.712]         if (TRUE) {
[17:37:41.712]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.712]         }
[17:37:41.712]         else {
[17:37:41.712]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.712]         }
[17:37:41.712]         base::close(...future.stdout)
[17:37:41.712]         ...future.stdout <- NULL
[17:37:41.712]     }
[17:37:41.712]     ...future.result$conditions <- ...future.conditions
[17:37:41.712]     ...future.result$finished <- base::Sys.time()
[17:37:41.712]     ...future.result
[17:37:41.712] }
[17:37:41.715] assign_globals() ...
[17:37:41.715] List of 5
[17:37:41.715]  $ ...future.FUN            :function (...)  
[17:37:41.715]  $ future.call.arguments    : list()
[17:37:41.715]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.715]  $ ...future.elements_ii    :List of 5
[17:37:41.715]   ..$ : int 0
[17:37:41.715]   ..$ : int 0
[17:37:41.715]   ..$ : int 0
[17:37:41.715]   ..$ : int 0
[17:37:41.715]   ..$ : int 0
[17:37:41.715]  $ ...future.seeds_ii       :List of 5
[17:37:41.715]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:37:41.715]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:37:41.715]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:37:41.715]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:37:41.715]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:37:41.715]  $ ...future.globals.maxSize: NULL
[17:37:41.715]  - attr(*, "where")=List of 5
[17:37:41.715]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.715]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.715]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.715]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.715]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.715]  - attr(*, "resolved")= logi FALSE
[17:37:41.715]  - attr(*, "total_size")= num 616
[17:37:41.715]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.715]  - attr(*, "already-done")= logi TRUE
[17:37:41.724] - reassign environment for ‘...future.FUN’
[17:37:41.724] - copied ‘...future.FUN’ to environment
[17:37:41.724] - copied ‘future.call.arguments’ to environment
[17:37:41.724] - copied ‘...future.elements_ii’ to environment
[17:37:41.724] - copied ‘...future.seeds_ii’ to environment
[17:37:41.725] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.725] assign_globals() ... done
[17:37:41.725] plan(): Setting new future strategy stack:
[17:37:41.725] List of future strategies:
[17:37:41.725] 1. sequential:
[17:37:41.725]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.725]    - tweaked: FALSE
[17:37:41.725]    - call: NULL
[17:37:41.725] plan(): nbrOfWorkers() = 1
[17:37:41.726] plan(): Setting new future strategy stack:
[17:37:41.726] List of future strategies:
[17:37:41.726] 1. sequential:
[17:37:41.726]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.726]    - tweaked: FALSE
[17:37:41.726]    - call: plan(strategy)
[17:37:41.727] plan(): nbrOfWorkers() = 1
[17:37:41.727] SequentialFuture started (and completed)
[17:37:41.727] - Launch lazy future ... done
[17:37:41.727] run() for ‘SequentialFuture’ ... done
[17:37:41.727] Created future:
[17:37:41.727] SequentialFuture:
[17:37:41.727] Label: ‘future_replicate-1’
[17:37:41.727] Expression:
[17:37:41.727] {
[17:37:41.727]     do.call(function(...) {
[17:37:41.727]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.727]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.727]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.727]             on.exit(options(oopts), add = TRUE)
[17:37:41.727]         }
[17:37:41.727]         {
[17:37:41.727]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.727]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.727]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.727]                   envir = globalenv(), inherits = FALSE)
[17:37:41.727]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.727]             })
[17:37:41.727]         }
[17:37:41.727]     }, args = future.call.arguments)
[17:37:41.727] }
[17:37:41.727] Lazy evaluation: FALSE
[17:37:41.727] Asynchronous evaluation: FALSE
[17:37:41.727] Local evaluation: TRUE
[17:37:41.727] Environment: R_GlobalEnv
[17:37:41.727] Capture standard output: TRUE
[17:37:41.727] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.727] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.727] Packages: <none>
[17:37:41.727] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.727] Resolved: TRUE
[17:37:41.727] Value: 280 bytes of class ‘list’
[17:37:41.727] Early signaling: FALSE
[17:37:41.727] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.727] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.728] Chunk #1 of 1 ... DONE
[17:37:41.729] Launching 1 futures (chunks) ... DONE
[17:37:41.729] Resolving 1 futures (chunks) ...
[17:37:41.729] resolve() on list ...
[17:37:41.729]  recursive: 0
[17:37:41.729]  length: 1
[17:37:41.729] 
[17:37:41.729] resolved() for ‘SequentialFuture’ ...
[17:37:41.729] - state: ‘finished’
[17:37:41.729] - run: TRUE
[17:37:41.729] - result: ‘FutureResult’
[17:37:41.730] resolved() for ‘SequentialFuture’ ... done
[17:37:41.730] Future #1
[17:37:41.730] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:37:41.730] - nx: 1
[17:37:41.730] - relay: TRUE
[17:37:41.730] - stdout: TRUE
[17:37:41.730] - signal: TRUE
[17:37:41.730] - resignal: FALSE
[17:37:41.730] - force: TRUE
[17:37:41.730] - relayed: [n=1] FALSE
[17:37:41.730] - queued futures: [n=1] FALSE
[17:37:41.731]  - until=1
[17:37:41.731]  - relaying element #1
[17:37:41.731] - relayed: [n=1] TRUE
[17:37:41.731] - queued futures: [n=1] TRUE
[17:37:41.731] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:37:41.731]  length: 0 (resolved future 1)
[17:37:41.731] Relaying remaining futures
[17:37:41.731] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.731] - nx: 1
[17:37:41.732] - relay: TRUE
[17:37:41.732] - stdout: TRUE
[17:37:41.732] - signal: TRUE
[17:37:41.732] - resignal: FALSE
[17:37:41.732] - force: TRUE
[17:37:41.732] - relayed: [n=1] TRUE
[17:37:41.732] - queued futures: [n=1] TRUE
 - flush all
[17:37:41.732] - relayed: [n=1] TRUE
[17:37:41.732] - queued futures: [n=1] TRUE
[17:37:41.733] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.733] resolve() on list ... DONE
[17:37:41.733]  - Number of value chunks collected: 1
[17:37:41.733] Resolving 1 futures (chunks) ... DONE
[17:37:41.733] Reducing values from 1 chunks ...
[17:37:41.733]  - Number of values collected after concatenation: 5
[17:37:41.733]  - Number of values expected: 5
[17:37:41.733] Reducing values from 1 chunks ... DONE
[17:37:41.733] future_lapply() ... DONE
- example(replicate) ...
[17:37:41.734] future_lapply() ...
[17:37:41.734] Generating random seeds ...
[17:37:41.734] Generating random seed streams for 5 elements ...
[17:37:41.734] Generating random seed streams for 5 elements ... DONE
[17:37:41.735] Generating random seeds ... DONE
[17:37:41.735] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.735] Number of chunks: 1
[17:37:41.735] getGlobalsAndPackagesXApply() ...
[17:37:41.735]  - future.globals: TRUE
[17:37:41.735] getGlobalsAndPackages() ...
[17:37:41.736] Searching for globals...
[17:37:41.737] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:37:41.738] Searching for globals ... DONE
[17:37:41.738] Resolving globals: FALSE
[17:37:41.738] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:37:41.738] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:37:41.739] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:37:41.739] 
[17:37:41.739] getGlobalsAndPackages() ... DONE
[17:37:41.739]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:37:41.739]  - needed namespaces: [n=0] 
[17:37:41.739] Finding globals ... DONE
[17:37:41.739]  - use_args: TRUE
[17:37:41.739]  - Getting '...' globals ...
[17:37:41.740] resolve() on list ...
[17:37:41.740]  recursive: 0
[17:37:41.740]  length: 1
[17:37:41.740]  elements: ‘...’
[17:37:41.740]  length: 0 (resolved future 1)
[17:37:41.740] resolve() on list ... DONE
[17:37:41.740]    - '...' content: [n=0] 
[17:37:41.740] List of 1
[17:37:41.740]  $ ...: list()
[17:37:41.740]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.740]  - attr(*, "where")=List of 1
[17:37:41.740]   ..$ ...:<environment: 0x5640bfff5138> 
[17:37:41.740]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.740]  - attr(*, "resolved")= logi TRUE
[17:37:41.740]  - attr(*, "total_size")= num NA
[17:37:41.743]  - Getting '...' globals ... DONE
[17:37:41.743] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:37:41.743] List of 4
[17:37:41.743]  $ ...future.FUN:function (...)  
[17:37:41.743]  $ foo          :function (x = 1, y = 2)  
[17:37:41.743]  $ x            : num 3
[17:37:41.743]  $ ...          : list()
[17:37:41.743]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.743]  - attr(*, "where")=List of 4
[17:37:41.743]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.743]   ..$ foo          :<environment: R_EmptyEnv> 
[17:37:41.743]   ..$ x            :<environment: R_EmptyEnv> 
[17:37:41.743]   ..$ ...          :<environment: 0x5640bfff5138> 
[17:37:41.743]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.743]  - attr(*, "resolved")= logi FALSE
[17:37:41.743]  - attr(*, "total_size")= num 2200
[17:37:41.747] Packages to be attached in all futures: [n=0] 
[17:37:41.747] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.747] Number of futures (= number of chunks): 1
[17:37:41.747] Launching 1 futures (chunks) ...
[17:37:41.747] Chunk #1 of 1 ...
[17:37:41.747]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.748] getGlobalsAndPackages() ...
[17:37:41.750] Searching for globals...
[17:37:41.750] 
[17:37:41.750] Searching for globals ... DONE
[17:37:41.750] - globals: [0] <none>
[17:37:41.750] getGlobalsAndPackages() ... DONE
[17:37:41.750]    + additional globals found: [n=0] 
[17:37:41.751]    + additional namespaces needed: [n=0] 
[17:37:41.751]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.751]  - seeds: [5] <seeds>
[17:37:41.751]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.751] getGlobalsAndPackages() ...
[17:37:41.751] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.751] Resolving globals: FALSE
[17:37:41.751] Tweak future expression to call with '...' arguments ...
[17:37:41.752] {
[17:37:41.752]     do.call(function(...) {
[17:37:41.752]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.752]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.752]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.752]             on.exit(options(oopts), add = TRUE)
[17:37:41.752]         }
[17:37:41.752]         {
[17:37:41.752]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.752]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.752]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.752]                   envir = globalenv(), inherits = FALSE)
[17:37:41.752]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.752]             })
[17:37:41.752]         }
[17:37:41.752]     }, args = future.call.arguments)
[17:37:41.752] }
[17:37:41.752] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.752] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.753] 
[17:37:41.753] getGlobalsAndPackages() ... DONE
[17:37:41.753] run() for ‘Future’ ...
[17:37:41.753] - state: ‘created’
[17:37:41.753] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:37:41.753] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.754] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:37:41.754]   - Field: ‘label’
[17:37:41.754]   - Field: ‘local’
[17:37:41.754]   - Field: ‘owner’
[17:37:41.754]   - Field: ‘envir’
[17:37:41.754]   - Field: ‘packages’
[17:37:41.754]   - Field: ‘gc’
[17:37:41.754]   - Field: ‘conditions’
[17:37:41.754]   - Field: ‘expr’
[17:37:41.754]   - Field: ‘uuid’
[17:37:41.755]   - Field: ‘seed’
[17:37:41.755]   - Field: ‘version’
[17:37:41.755]   - Field: ‘result’
[17:37:41.755]   - Field: ‘asynchronous’
[17:37:41.755]   - Field: ‘calls’
[17:37:41.755]   - Field: ‘globals’
[17:37:41.755]   - Field: ‘stdout’
[17:37:41.755]   - Field: ‘earlySignal’
[17:37:41.755]   - Field: ‘lazy’
[17:37:41.755]   - Field: ‘state’
[17:37:41.756] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:37:41.756] - Launch lazy future ...
[17:37:41.756] Packages needed by the future expression (n = 0): <none>
[17:37:41.756] Packages needed by future strategies (n = 0): <none>
[17:37:41.756] {
[17:37:41.756]     {
[17:37:41.756]         {
[17:37:41.756]             ...future.startTime <- base::Sys.time()
[17:37:41.756]             {
[17:37:41.756]                 {
[17:37:41.756]                   {
[17:37:41.756]                     base::local({
[17:37:41.756]                       has_future <- base::requireNamespace("future", 
[17:37:41.756]                         quietly = TRUE)
[17:37:41.756]                       if (has_future) {
[17:37:41.756]                         ns <- base::getNamespace("future")
[17:37:41.756]                         version <- ns[[".package"]][["version"]]
[17:37:41.756]                         if (is.null(version)) 
[17:37:41.756]                           version <- utils::packageVersion("future")
[17:37:41.756]                       }
[17:37:41.756]                       else {
[17:37:41.756]                         version <- NULL
[17:37:41.756]                       }
[17:37:41.756]                       if (!has_future || version < "1.8.0") {
[17:37:41.756]                         info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.756]                           "", base::R.version$version.string), 
[17:37:41.756]                           platform = base::sprintf("%s (%s-bit)", 
[17:37:41.756]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.756]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.756]                             "release", "version")], collapse = " "), 
[17:37:41.756]                           hostname = base::Sys.info()[["nodename"]])
[17:37:41.756]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.756]                           info)
[17:37:41.756]                         info <- base::paste(info, collapse = "; ")
[17:37:41.756]                         if (!has_future) {
[17:37:41.756]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.756]                             info)
[17:37:41.756]                         }
[17:37:41.756]                         else {
[17:37:41.756]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.756]                             info, version)
[17:37:41.756]                         }
[17:37:41.756]                         base::stop(msg)
[17:37:41.756]                       }
[17:37:41.756]                     })
[17:37:41.756]                   }
[17:37:41.756]                   ...future.strategy.old <- future::plan("list")
[17:37:41.756]                   options(future.plan = NULL)
[17:37:41.756]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.756]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.756]                 }
[17:37:41.756]                 ...future.workdir <- getwd()
[17:37:41.756]             }
[17:37:41.756]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.756]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.756]         }
[17:37:41.756]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.756]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:41.756]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.756]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.756]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.756]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.756]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.756]             base::names(...future.oldOptions))
[17:37:41.756]     }
[17:37:41.756]     if (FALSE) {
[17:37:41.756]     }
[17:37:41.756]     else {
[17:37:41.756]         if (TRUE) {
[17:37:41.756]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.756]                 open = "w")
[17:37:41.756]         }
[17:37:41.756]         else {
[17:37:41.756]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.756]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.756]         }
[17:37:41.756]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.756]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.756]             base::sink(type = "output", split = FALSE)
[17:37:41.756]             base::close(...future.stdout)
[17:37:41.756]         }, add = TRUE)
[17:37:41.756]     }
[17:37:41.756]     ...future.frame <- base::sys.nframe()
[17:37:41.756]     ...future.conditions <- base::list()
[17:37:41.756]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.756]     if (FALSE) {
[17:37:41.756]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.756]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.756]     }
[17:37:41.756]     ...future.result <- base::tryCatch({
[17:37:41.756]         base::withCallingHandlers({
[17:37:41.756]             ...future.value <- base::withVisible(base::local({
[17:37:41.756]                 do.call(function(...) {
[17:37:41.756]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.756]                   if (!identical(...future.globals.maxSize.org, 
[17:37:41.756]                     ...future.globals.maxSize)) {
[17:37:41.756]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.756]                     on.exit(options(oopts), add = TRUE)
[17:37:41.756]                   }
[17:37:41.756]                   {
[17:37:41.756]                     lapply(seq_along(...future.elements_ii), 
[17:37:41.756]                       FUN = function(jj) {
[17:37:41.756]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.756]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.756]                           envir = globalenv(), inherits = FALSE)
[17:37:41.756]                         ...future.FUN(...future.X_jj, ...)
[17:37:41.756]                       })
[17:37:41.756]                   }
[17:37:41.756]                 }, args = future.call.arguments)
[17:37:41.756]             }))
[17:37:41.756]             future::FutureResult(value = ...future.value$value, 
[17:37:41.756]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.756]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.756]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.756]                     ...future.globalenv.names))
[17:37:41.756]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.756]         }, condition = base::local({
[17:37:41.756]             c <- base::c
[17:37:41.756]             inherits <- base::inherits
[17:37:41.756]             invokeRestart <- base::invokeRestart
[17:37:41.756]             length <- base::length
[17:37:41.756]             list <- base::list
[17:37:41.756]             seq.int <- base::seq.int
[17:37:41.756]             signalCondition <- base::signalCondition
[17:37:41.756]             sys.calls <- base::sys.calls
[17:37:41.756]             `[[` <- base::`[[`
[17:37:41.756]             `+` <- base::`+`
[17:37:41.756]             `<<-` <- base::`<<-`
[17:37:41.756]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.756]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.756]                   3L)]
[17:37:41.756]             }
[17:37:41.756]             function(cond) {
[17:37:41.756]                 is_error <- inherits(cond, "error")
[17:37:41.756]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.756]                   NULL)
[17:37:41.756]                 if (is_error) {
[17:37:41.756]                   sessionInformation <- function() {
[17:37:41.756]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.756]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.756]                       search = base::search(), system = base::Sys.info())
[17:37:41.756]                   }
[17:37:41.756]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.756]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.756]                     cond$call), session = sessionInformation(), 
[17:37:41.756]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.756]                   signalCondition(cond)
[17:37:41.756]                 }
[17:37:41.756]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.756]                 "immediateCondition"))) {
[17:37:41.756]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.756]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.756]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.756]                   if (TRUE && !signal) {
[17:37:41.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.756]                     {
[17:37:41.756]                       inherits <- base::inherits
[17:37:41.756]                       invokeRestart <- base::invokeRestart
[17:37:41.756]                       is.null <- base::is.null
[17:37:41.756]                       muffled <- FALSE
[17:37:41.756]                       if (inherits(cond, "message")) {
[17:37:41.756]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.756]                         if (muffled) 
[17:37:41.756]                           invokeRestart("muffleMessage")
[17:37:41.756]                       }
[17:37:41.756]                       else if (inherits(cond, "warning")) {
[17:37:41.756]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.756]                         if (muffled) 
[17:37:41.756]                           invokeRestart("muffleWarning")
[17:37:41.756]                       }
[17:37:41.756]                       else if (inherits(cond, "condition")) {
[17:37:41.756]                         if (!is.null(pattern)) {
[17:37:41.756]                           computeRestarts <- base::computeRestarts
[17:37:41.756]                           grepl <- base::grepl
[17:37:41.756]                           restarts <- computeRestarts(cond)
[17:37:41.756]                           for (restart in restarts) {
[17:37:41.756]                             name <- restart$name
[17:37:41.756]                             if (is.null(name)) 
[17:37:41.756]                               next
[17:37:41.756]                             if (!grepl(pattern, name)) 
[17:37:41.756]                               next
[17:37:41.756]                             invokeRestart(restart)
[17:37:41.756]                             muffled <- TRUE
[17:37:41.756]                             break
[17:37:41.756]                           }
[17:37:41.756]                         }
[17:37:41.756]                       }
[17:37:41.756]                       invisible(muffled)
[17:37:41.756]                     }
[17:37:41.756]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.756]                   }
[17:37:41.756]                 }
[17:37:41.756]                 else {
[17:37:41.756]                   if (TRUE) {
[17:37:41.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.756]                     {
[17:37:41.756]                       inherits <- base::inherits
[17:37:41.756]                       invokeRestart <- base::invokeRestart
[17:37:41.756]                       is.null <- base::is.null
[17:37:41.756]                       muffled <- FALSE
[17:37:41.756]                       if (inherits(cond, "message")) {
[17:37:41.756]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.756]                         if (muffled) 
[17:37:41.756]                           invokeRestart("muffleMessage")
[17:37:41.756]                       }
[17:37:41.756]                       else if (inherits(cond, "warning")) {
[17:37:41.756]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.756]                         if (muffled) 
[17:37:41.756]                           invokeRestart("muffleWarning")
[17:37:41.756]                       }
[17:37:41.756]                       else if (inherits(cond, "condition")) {
[17:37:41.756]                         if (!is.null(pattern)) {
[17:37:41.756]                           computeRestarts <- base::computeRestarts
[17:37:41.756]                           grepl <- base::grepl
[17:37:41.756]                           restarts <- computeRestarts(cond)
[17:37:41.756]                           for (restart in restarts) {
[17:37:41.756]                             name <- restart$name
[17:37:41.756]                             if (is.null(name)) 
[17:37:41.756]                               next
[17:37:41.756]                             if (!grepl(pattern, name)) 
[17:37:41.756]                               next
[17:37:41.756]                             invokeRestart(restart)
[17:37:41.756]                             muffled <- TRUE
[17:37:41.756]                             break
[17:37:41.756]                           }
[17:37:41.756]                         }
[17:37:41.756]                       }
[17:37:41.756]                       invisible(muffled)
[17:37:41.756]                     }
[17:37:41.756]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.756]                   }
[17:37:41.756]                 }
[17:37:41.756]             }
[17:37:41.756]         }))
[17:37:41.756]     }, error = function(ex) {
[17:37:41.756]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.756]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.756]                 ...future.rng), started = ...future.startTime, 
[17:37:41.756]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.756]             version = "1.8"), class = "FutureResult")
[17:37:41.756]     }, finally = {
[17:37:41.756]         if (!identical(...future.workdir, getwd())) 
[17:37:41.756]             setwd(...future.workdir)
[17:37:41.756]         {
[17:37:41.756]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.756]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.756]             }
[17:37:41.756]             base::options(...future.oldOptions)
[17:37:41.756]             if (.Platform$OS.type == "windows") {
[17:37:41.756]                 old_names <- names(...future.oldEnvVars)
[17:37:41.756]                 envs <- base::Sys.getenv()
[17:37:41.756]                 names <- names(envs)
[17:37:41.756]                 common <- intersect(names, old_names)
[17:37:41.756]                 added <- setdiff(names, old_names)
[17:37:41.756]                 removed <- setdiff(old_names, names)
[17:37:41.756]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.756]                   envs[common]]
[17:37:41.756]                 NAMES <- toupper(changed)
[17:37:41.756]                 args <- list()
[17:37:41.756]                 for (kk in seq_along(NAMES)) {
[17:37:41.756]                   name <- changed[[kk]]
[17:37:41.756]                   NAME <- NAMES[[kk]]
[17:37:41.756]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.756]                     next
[17:37:41.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.756]                 }
[17:37:41.756]                 NAMES <- toupper(added)
[17:37:41.756]                 for (kk in seq_along(NAMES)) {
[17:37:41.756]                   name <- added[[kk]]
[17:37:41.756]                   NAME <- NAMES[[kk]]
[17:37:41.756]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.756]                     next
[17:37:41.756]                   args[[name]] <- ""
[17:37:41.756]                 }
[17:37:41.756]                 NAMES <- toupper(removed)
[17:37:41.756]                 for (kk in seq_along(NAMES)) {
[17:37:41.756]                   name <- removed[[kk]]
[17:37:41.756]                   NAME <- NAMES[[kk]]
[17:37:41.756]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.756]                     next
[17:37:41.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.756]                 }
[17:37:41.756]                 if (length(args) > 0) 
[17:37:41.756]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.756]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.756]             }
[17:37:41.756]             else {
[17:37:41.756]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.756]             }
[17:37:41.756]             {
[17:37:41.756]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.756]                   0L) {
[17:37:41.756]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.756]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.756]                   base::options(opts)
[17:37:41.756]                 }
[17:37:41.756]                 {
[17:37:41.756]                   {
[17:37:41.756]                     base::assign(".Random.seed", c(10403L, 8L, 
[17:37:41.756]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[17:37:41.756]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[17:37:41.756]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[17:37:41.756]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[17:37:41.756]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[17:37:41.756]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[17:37:41.756]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[17:37:41.756]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[17:37:41.756]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[17:37:41.756]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[17:37:41.756]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[17:37:41.756]                     -1512233174L, -1985955764L, -425390065L, 
[17:37:41.756]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[17:37:41.756]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[17:37:41.756]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[17:37:41.756]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[17:37:41.756]                     1818328109L, -1284085436L, -1981489558L, 
[17:37:41.756]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[17:37:41.756]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[17:37:41.756]                     -1718567047L, -793788661L, -1133789126L, 
[17:37:41.756]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[17:37:41.756]                     -1823521982L, -1345991523L, -1672661737L, 
[17:37:41.756]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[17:37:41.756]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[17:37:41.756]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[17:37:41.756]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[17:37:41.756]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[17:37:41.756]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[17:37:41.756]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[17:37:41.756]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[17:37:41.756]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[17:37:41.756]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[17:37:41.756]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[17:37:41.756]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[17:37:41.756]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[17:37:41.756]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[17:37:41.756]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[17:37:41.756]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[17:37:41.756]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[17:37:41.756]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[17:37:41.756]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[17:37:41.756]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[17:37:41.756]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[17:37:41.756]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[17:37:41.756]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[17:37:41.756]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[17:37:41.756]                     -1119334354L, -1521015416L, -2041922421L, 
[17:37:41.756]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[17:37:41.756]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[17:37:41.756]                     1232111981L, -1801753084L, -1608606422L, 
[17:37:41.756]                     -1172096363L, 1420874031L, -1210473418L, 
[17:37:41.756]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[17:37:41.756]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[17:37:41.756]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[17:37:41.756]                     679371266L, -591318819L, -104578089L, -172818754L, 
[17:37:41.756]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[17:37:41.756]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[17:37:41.756]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[17:37:41.756]                     -332493318L, -1978392251L, -1691039632L, 
[17:37:41.756]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[17:37:41.756]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[17:37:41.756]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[17:37:41.756]                     87560756L, -87565624L, 426345146L, -699970416L, 
[17:37:41.756]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[17:37:41.756]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[17:37:41.756]                     -1178330196L, -687617348L, -1701912078L, 
[17:37:41.756]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[17:37:41.756]                     -1345416048L, 1816730492L, -1570431212L, 
[17:37:41.756]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[17:37:41.756]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[17:37:41.756]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[17:37:41.756]                     -1493184262L, -1943836976L, -590788308L, 
[17:37:41.756]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[17:37:41.756]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[17:37:41.756]                     1274857340L, -1205842638L, -1938479504L, 
[17:37:41.756]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[17:37:41.756]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[17:37:41.756]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[17:37:41.756]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[17:37:41.756]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[17:37:41.756]                     -1460751252L, 1201879444L, -1459788718L, 
[17:37:41.756]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[17:37:41.756]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[17:37:41.756]                     -420945808L, -1997735900L, -1838404552L, 
[17:37:41.756]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[17:37:41.756]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[17:37:41.756]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[17:37:41.756]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[17:37:41.756]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[17:37:41.756]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[17:37:41.756]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[17:37:41.756]                     942193650L, 751741680L, 689743428L, -18455976L, 
[17:37:41.756]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[17:37:41.756]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[17:37:41.756]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[17:37:41.756]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[17:37:41.756]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[17:37:41.756]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[17:37:41.756]                     -1357570110L, 1896595240L, -2066952276L, 
[17:37:41.756]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[17:37:41.756]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[17:37:41.756]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[17:37:41.756]                     769655120L, 236357794L, 181393736L, -13334772L, 
[17:37:41.756]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[17:37:41.756]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[17:37:41.756]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[17:37:41.756]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[17:37:41.756]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[17:37:41.756]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[17:37:41.756]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[17:37:41.756]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[17:37:41.756]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[17:37:41.756]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[17:37:41.756]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[17:37:41.756]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[17:37:41.756]                     -1365842884L, -438961294L, -1851472272L, 
[17:37:41.756]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[17:37:41.756]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[17:37:41.756]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[17:37:41.756]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[17:37:41.756]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[17:37:41.756]                     -594809770L, -2146766621L, -2013964635L, 
[17:37:41.756]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[17:37:41.756]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[17:37:41.756]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[17:37:41.756]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[17:37:41.756]                     -1426021878L, -1285634264L, 1507547537L, 
[17:37:41.756]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[17:37:41.756]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[17:37:41.756]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[17:37:41.756]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[17:37:41.756]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[17:37:41.756]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[17:37:41.756]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[17:37:41.756]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[17:37:41.756]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[17:37:41.756]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[17:37:41.756]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[17:37:41.756]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[17:37:41.756]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[17:37:41.756]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[17:37:41.756]                     -1604604761L, 1421229008L, -1268333714L, 
[17:37:41.756]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[17:37:41.756]                     -2070476623L, -2099222749L, 1141171236L, 
[17:37:41.756]                     -146426158L, -1797385433L, -1129376399L, 
[17:37:41.756]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[17:37:41.756]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[17:37:41.756]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[17:37:41.756]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[17:37:41.756]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[17:37:41.756]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[17:37:41.756]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[17:37:41.756]                     -1092079724L, -1765622238L, -1882554057L, 
[17:37:41.756]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[17:37:41.756]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[17:37:41.756]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[17:37:41.756]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[17:37:41.756]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[17:37:41.756]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[17:37:41.756]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[17:37:41.756]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[17:37:41.756]                     865377681L, -1127426242L), envir = base::globalenv(), 
[17:37:41.756]                       inherits = FALSE)
[17:37:41.756]                     NULL
[17:37:41.756]                   }
[17:37:41.756]                   options(future.plan = NULL)
[17:37:41.756]                   if (is.na(NA_character_)) 
[17:37:41.756]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.756]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.756]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.756]                     .init = FALSE)
[17:37:41.756]                 }
[17:37:41.756]             }
[17:37:41.756]         }
[17:37:41.756]     })
[17:37:41.756]     if (TRUE) {
[17:37:41.756]         base::sink(type = "output", split = FALSE)
[17:37:41.756]         if (TRUE) {
[17:37:41.756]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.756]         }
[17:37:41.756]         else {
[17:37:41.756]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.756]         }
[17:37:41.756]         base::close(...future.stdout)
[17:37:41.756]         ...future.stdout <- NULL
[17:37:41.756]     }
[17:37:41.756]     ...future.result$conditions <- ...future.conditions
[17:37:41.756]     ...future.result$finished <- base::Sys.time()
[17:37:41.756]     ...future.result
[17:37:41.756] }
[17:37:41.759] assign_globals() ...
[17:37:41.759] List of 7
[17:37:41.759]  $ ...future.FUN            :function (...)  
[17:37:41.759]  $ foo                      :function (x = 1, y = 2)  
[17:37:41.759]  $ x                        : num 3
[17:37:41.759]  $ future.call.arguments    : list()
[17:37:41.759]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.759]  $ ...future.elements_ii    :List of 5
[17:37:41.759]   ..$ : int 0
[17:37:41.759]   ..$ : int 0
[17:37:41.759]   ..$ : int 0
[17:37:41.759]   ..$ : int 0
[17:37:41.759]   ..$ : int 0
[17:37:41.759]  $ ...future.seeds_ii       :List of 5
[17:37:41.759]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:37:41.759]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:37:41.759]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:37:41.759]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:37:41.759]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:37:41.759]  $ ...future.globals.maxSize: NULL
[17:37:41.759]  - attr(*, "where")=List of 7
[17:37:41.759]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.759]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:37:41.759]   ..$ x                        :<environment: R_EmptyEnv> 
[17:37:41.759]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.759]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.759]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.759]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.759]  - attr(*, "resolved")= logi FALSE
[17:37:41.759]  - attr(*, "total_size")= num 2200
[17:37:41.759]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.759]  - attr(*, "already-done")= logi TRUE
[17:37:41.768] - reassign environment for ‘...future.FUN’
[17:37:41.768] - copied ‘...future.FUN’ to environment
[17:37:41.768] - reassign environment for ‘foo’
[17:37:41.768] - copied ‘foo’ to environment
[17:37:41.768] - copied ‘x’ to environment
[17:37:41.768] - copied ‘future.call.arguments’ to environment
[17:37:41.768] - copied ‘...future.elements_ii’ to environment
[17:37:41.768] - copied ‘...future.seeds_ii’ to environment
[17:37:41.768] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.768] assign_globals() ... done
[17:37:41.769] plan(): Setting new future strategy stack:
[17:37:41.769] List of future strategies:
[17:37:41.769] 1. sequential:
[17:37:41.769]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.769]    - tweaked: FALSE
[17:37:41.769]    - call: NULL
[17:37:41.769] plan(): nbrOfWorkers() = 1
[17:37:41.770] plan(): Setting new future strategy stack:
[17:37:41.770] List of future strategies:
[17:37:41.770] 1. sequential:
[17:37:41.770]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.770]    - tweaked: FALSE
[17:37:41.770]    - call: plan(strategy)
[17:37:41.771] plan(): nbrOfWorkers() = 1
[17:37:41.771] SequentialFuture started (and completed)
[17:37:41.771] - Launch lazy future ... done
[17:37:41.771] run() for ‘SequentialFuture’ ... done
[17:37:41.771] Created future:
[17:37:41.771] SequentialFuture:
[17:37:41.771] Label: ‘future_replicate-1’
[17:37:41.771] Expression:
[17:37:41.771] {
[17:37:41.771]     do.call(function(...) {
[17:37:41.771]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.771]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.771]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.771]             on.exit(options(oopts), add = TRUE)
[17:37:41.771]         }
[17:37:41.771]         {
[17:37:41.771]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.771]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.771]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.771]                   envir = globalenv(), inherits = FALSE)
[17:37:41.771]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.771]             })
[17:37:41.771]         }
[17:37:41.771]     }, args = future.call.arguments)
[17:37:41.771] }
[17:37:41.771] Lazy evaluation: FALSE
[17:37:41.771] Asynchronous evaluation: FALSE
[17:37:41.771] Local evaluation: TRUE
[17:37:41.771] Environment: 0x5640bfff2aa8
[17:37:41.771] Capture standard output: TRUE
[17:37:41.771] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.771] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[17:37:41.771] Packages: <none>
[17:37:41.771] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.771] Resolved: TRUE
[17:37:41.771] Value: 320 bytes of class ‘list’
[17:37:41.771] Early signaling: FALSE
[17:37:41.771] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.771] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:37:41.773] Chunk #1 of 1 ... DONE
[17:37:41.773] Launching 1 futures (chunks) ... DONE
[17:37:41.773] Resolving 1 futures (chunks) ...
[17:37:41.773] resolve() on list ...
[17:37:41.773]  recursive: 0
[17:37:41.773]  length: 1
[17:37:41.773] 
[17:37:41.773] resolved() for ‘SequentialFuture’ ...
[17:37:41.774] - state: ‘finished’
[17:37:41.774] - run: TRUE
[17:37:41.774] - result: ‘FutureResult’
[17:37:41.774] resolved() for ‘SequentialFuture’ ... done
[17:37:41.774] Future #1
[17:37:41.774] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:37:41.774] - nx: 1
[17:37:41.774] - relay: TRUE
[17:37:41.774] - stdout: TRUE
[17:37:41.774] - signal: TRUE
[17:37:41.775] - resignal: FALSE
[17:37:41.775] - force: TRUE
[17:37:41.775] - relayed: [n=1] FALSE
[17:37:41.775] - queued futures: [n=1] FALSE
[17:37:41.775]  - until=1
[17:37:41.775]  - relaying element #1
[17:37:41.775] - relayed: [n=1] TRUE
[17:37:41.775] - queued futures: [n=1] TRUE
[17:37:41.775] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:37:41.775]  length: 0 (resolved future 1)
[17:37:41.776] Relaying remaining futures
[17:37:41.776] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.776] - nx: 1
[17:37:41.776] - relay: TRUE
[17:37:41.776] - stdout: TRUE
[17:37:41.776] - signal: TRUE
[17:37:41.776] - resignal: FALSE
[17:37:41.776] - force: TRUE
[17:37:41.776] - relayed: [n=1] TRUE
[17:37:41.776] - queued futures: [n=1] TRUE
 - flush all
[17:37:41.776] - relayed: [n=1] TRUE
[17:37:41.779] - queued futures: [n=1] TRUE
[17:37:41.779] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.779] resolve() on list ... DONE
[17:37:41.779]  - Number of value chunks collected: 1
[17:37:41.779] Resolving 1 futures (chunks) ... DONE
[17:37:41.779] Reducing values from 1 chunks ...
[17:37:41.779]  - Number of values collected after concatenation: 5
[17:37:41.779]  - Number of values expected: 5
[17:37:41.779] Reducing values from 1 chunks ... DONE
[17:37:41.780] future_lapply() ... DONE
[17:37:41.780] plan(): Setting new future strategy stack:
[17:37:41.780] List of future strategies:
[17:37:41.780] 1. sequential:
[17:37:41.780]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.780]    - tweaked: FALSE
[17:37:41.780]    - call: plan(sequential)
[17:37:41.781] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[17:37:41.781] plan(): Setting new future strategy stack:
[17:37:41.781] List of future strategies:
[17:37:41.781] 1. multicore:
[17:37:41.781]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:41.781]    - tweaked: FALSE
[17:37:41.781]    - call: plan(strategy)
[17:37:41.785] plan(): nbrOfWorkers() = 2
[17:37:41.785] future_lapply() ...
[17:37:41.786] Generating random seeds ...
[17:37:41.786] Generating random seed streams for 5 elements ...
[17:37:41.786] Generating random seed streams for 5 elements ... DONE
[17:37:41.786] Generating random seeds ... DONE
[17:37:41.786] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.791] Number of chunks: 2
[17:37:41.792] getGlobalsAndPackagesXApply() ...
[17:37:41.792]  - future.globals: TRUE
[17:37:41.792] getGlobalsAndPackages() ...
[17:37:41.792] Searching for globals...
[17:37:41.793] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.793] Searching for globals ... DONE
[17:37:41.793] Resolving globals: FALSE
[17:37:41.793] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.794] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.794] - globals: [1] ‘FUN’
[17:37:41.794] 
[17:37:41.794] getGlobalsAndPackages() ... DONE
[17:37:41.794]  - globals found/used: [n=1] ‘FUN’
[17:37:41.794]  - needed namespaces: [n=0] 
[17:37:41.794] Finding globals ... DONE
[17:37:41.795]  - use_args: TRUE
[17:37:41.795]  - Getting '...' globals ...
[17:37:41.795] resolve() on list ...
[17:37:41.795]  recursive: 0
[17:37:41.795]  length: 1
[17:37:41.795]  elements: ‘...’
[17:37:41.795]  length: 0 (resolved future 1)
[17:37:41.795] resolve() on list ... DONE
[17:37:41.796]    - '...' content: [n=0] 
[17:37:41.796] List of 1
[17:37:41.796]  $ ...: list()
[17:37:41.796]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.796]  - attr(*, "where")=List of 1
[17:37:41.796]   ..$ ...:<environment: 0x5640bed3b8b0> 
[17:37:41.796]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.796]  - attr(*, "resolved")= logi TRUE
[17:37:41.796]  - attr(*, "total_size")= num NA
[17:37:41.798]  - Getting '...' globals ... DONE
[17:37:41.798] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.798] List of 2
[17:37:41.798]  $ ...future.FUN:function (...)  
[17:37:41.798]  $ ...          : list()
[17:37:41.798]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.798]  - attr(*, "where")=List of 2
[17:37:41.798]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.798]   ..$ ...          :<environment: 0x5640bed3b8b0> 
[17:37:41.798]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.798]  - attr(*, "resolved")= logi FALSE
[17:37:41.798]  - attr(*, "total_size")= num 616
[17:37:41.801] Packages to be attached in all futures: [n=0] 
[17:37:41.801] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.801] Number of futures (= number of chunks): 2
[17:37:41.801] Launching 2 futures (chunks) ...
[17:37:41.801] Chunk #1 of 2 ...
[17:37:41.802]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.802] getGlobalsAndPackages() ...
[17:37:41.802] Searching for globals...
[17:37:41.802] 
[17:37:41.802] Searching for globals ... DONE
[17:37:41.802] - globals: [0] <none>
[17:37:41.802] getGlobalsAndPackages() ... DONE
[17:37:41.802]    + additional globals found: [n=0] 
[17:37:41.802]    + additional namespaces needed: [n=0] 
[17:37:41.803]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.803]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:41.803]  - seeds: [2] <seeds>
[17:37:41.803]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.803] getGlobalsAndPackages() ...
[17:37:41.803] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.803] Resolving globals: FALSE
[17:37:41.803] Tweak future expression to call with '...' arguments ...
[17:37:41.803] {
[17:37:41.803]     do.call(function(...) {
[17:37:41.803]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.803]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.803]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.803]             on.exit(options(oopts), add = TRUE)
[17:37:41.803]         }
[17:37:41.803]         {
[17:37:41.803]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.803]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.803]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.803]                   envir = globalenv(), inherits = FALSE)
[17:37:41.803]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.803]             })
[17:37:41.803]         }
[17:37:41.803]     }, args = future.call.arguments)
[17:37:41.803] }
[17:37:41.804] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.804] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.804] 
[17:37:41.804] getGlobalsAndPackages() ... DONE
[17:37:41.804] run() for ‘Future’ ...
[17:37:41.805] - state: ‘created’
[17:37:41.805] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:41.808] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.808] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:41.808]   - Field: ‘label’
[17:37:41.809]   - Field: ‘local’
[17:37:41.809]   - Field: ‘owner’
[17:37:41.809]   - Field: ‘envir’
[17:37:41.809]   - Field: ‘workers’
[17:37:41.809]   - Field: ‘packages’
[17:37:41.809]   - Field: ‘gc’
[17:37:41.809]   - Field: ‘job’
[17:37:41.809]   - Field: ‘conditions’
[17:37:41.809]   - Field: ‘expr’
[17:37:41.809]   - Field: ‘uuid’
[17:37:41.809]   - Field: ‘seed’
[17:37:41.810]   - Field: ‘version’
[17:37:41.810]   - Field: ‘result’
[17:37:41.810]   - Field: ‘asynchronous’
[17:37:41.810]   - Field: ‘calls’
[17:37:41.810]   - Field: ‘globals’
[17:37:41.810]   - Field: ‘stdout’
[17:37:41.812]   - Field: ‘earlySignal’
[17:37:41.812]   - Field: ‘lazy’
[17:37:41.812]   - Field: ‘state’
[17:37:41.812] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:41.812] - Launch lazy future ...
[17:37:41.813] Packages needed by the future expression (n = 0): <none>
[17:37:41.813] Packages needed by future strategies (n = 0): <none>
[17:37:41.814] {
[17:37:41.814]     {
[17:37:41.814]         {
[17:37:41.814]             ...future.startTime <- base::Sys.time()
[17:37:41.814]             {
[17:37:41.814]                 {
[17:37:41.814]                   {
[17:37:41.814]                     {
[17:37:41.814]                       base::local({
[17:37:41.814]                         has_future <- base::requireNamespace("future", 
[17:37:41.814]                           quietly = TRUE)
[17:37:41.814]                         if (has_future) {
[17:37:41.814]                           ns <- base::getNamespace("future")
[17:37:41.814]                           version <- ns[[".package"]][["version"]]
[17:37:41.814]                           if (is.null(version)) 
[17:37:41.814]                             version <- utils::packageVersion("future")
[17:37:41.814]                         }
[17:37:41.814]                         else {
[17:37:41.814]                           version <- NULL
[17:37:41.814]                         }
[17:37:41.814]                         if (!has_future || version < "1.8.0") {
[17:37:41.814]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.814]                             "", base::R.version$version.string), 
[17:37:41.814]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:41.814]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.814]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.814]                               "release", "version")], collapse = " "), 
[17:37:41.814]                             hostname = base::Sys.info()[["nodename"]])
[17:37:41.814]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.814]                             info)
[17:37:41.814]                           info <- base::paste(info, collapse = "; ")
[17:37:41.814]                           if (!has_future) {
[17:37:41.814]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.814]                               info)
[17:37:41.814]                           }
[17:37:41.814]                           else {
[17:37:41.814]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.814]                               info, version)
[17:37:41.814]                           }
[17:37:41.814]                           base::stop(msg)
[17:37:41.814]                         }
[17:37:41.814]                       })
[17:37:41.814]                     }
[17:37:41.814]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:41.814]                     base::options(mc.cores = 1L)
[17:37:41.814]                   }
[17:37:41.814]                   ...future.strategy.old <- future::plan("list")
[17:37:41.814]                   options(future.plan = NULL)
[17:37:41.814]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.814]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.814]                 }
[17:37:41.814]                 ...future.workdir <- getwd()
[17:37:41.814]             }
[17:37:41.814]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.814]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.814]         }
[17:37:41.814]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.814]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:41.814]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.814]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.814]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.814]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.814]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.814]             base::names(...future.oldOptions))
[17:37:41.814]     }
[17:37:41.814]     if (FALSE) {
[17:37:41.814]     }
[17:37:41.814]     else {
[17:37:41.814]         if (TRUE) {
[17:37:41.814]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.814]                 open = "w")
[17:37:41.814]         }
[17:37:41.814]         else {
[17:37:41.814]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.814]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.814]         }
[17:37:41.814]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.814]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.814]             base::sink(type = "output", split = FALSE)
[17:37:41.814]             base::close(...future.stdout)
[17:37:41.814]         }, add = TRUE)
[17:37:41.814]     }
[17:37:41.814]     ...future.frame <- base::sys.nframe()
[17:37:41.814]     ...future.conditions <- base::list()
[17:37:41.814]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.814]     if (FALSE) {
[17:37:41.814]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.814]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.814]     }
[17:37:41.814]     ...future.result <- base::tryCatch({
[17:37:41.814]         base::withCallingHandlers({
[17:37:41.814]             ...future.value <- base::withVisible(base::local({
[17:37:41.814]                 withCallingHandlers({
[17:37:41.814]                   {
[17:37:41.814]                     do.call(function(...) {
[17:37:41.814]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.814]                       if (!identical(...future.globals.maxSize.org, 
[17:37:41.814]                         ...future.globals.maxSize)) {
[17:37:41.814]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.814]                         on.exit(options(oopts), add = TRUE)
[17:37:41.814]                       }
[17:37:41.814]                       {
[17:37:41.814]                         lapply(seq_along(...future.elements_ii), 
[17:37:41.814]                           FUN = function(jj) {
[17:37:41.814]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.814]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.814]                               envir = globalenv(), inherits = FALSE)
[17:37:41.814]                             ...future.FUN(...future.X_jj, ...)
[17:37:41.814]                           })
[17:37:41.814]                       }
[17:37:41.814]                     }, args = future.call.arguments)
[17:37:41.814]                   }
[17:37:41.814]                 }, immediateCondition = function(cond) {
[17:37:41.814]                   save_rds <- function (object, pathname, ...) 
[17:37:41.814]                   {
[17:37:41.814]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:41.814]                     if (file_test("-f", pathname_tmp)) {
[17:37:41.814]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.814]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:41.814]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.814]                         fi_tmp[["mtime"]])
[17:37:41.814]                     }
[17:37:41.814]                     tryCatch({
[17:37:41.814]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:41.814]                     }, error = function(ex) {
[17:37:41.814]                       msg <- conditionMessage(ex)
[17:37:41.814]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.814]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:41.814]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.814]                         fi_tmp[["mtime"]], msg)
[17:37:41.814]                       ex$message <- msg
[17:37:41.814]                       stop(ex)
[17:37:41.814]                     })
[17:37:41.814]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:41.814]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:41.814]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:41.814]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.814]                       fi <- file.info(pathname)
[17:37:41.814]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:41.814]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.814]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:41.814]                         fi[["size"]], fi[["mtime"]])
[17:37:41.814]                       stop(msg)
[17:37:41.814]                     }
[17:37:41.814]                     invisible(pathname)
[17:37:41.814]                   }
[17:37:41.814]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:41.814]                     rootPath = tempdir()) 
[17:37:41.814]                   {
[17:37:41.814]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:41.814]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:41.814]                       tmpdir = path, fileext = ".rds")
[17:37:41.814]                     save_rds(obj, file)
[17:37:41.814]                   }
[17:37:41.814]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:41.814]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.814]                   {
[17:37:41.814]                     inherits <- base::inherits
[17:37:41.814]                     invokeRestart <- base::invokeRestart
[17:37:41.814]                     is.null <- base::is.null
[17:37:41.814]                     muffled <- FALSE
[17:37:41.814]                     if (inherits(cond, "message")) {
[17:37:41.814]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:41.814]                       if (muffled) 
[17:37:41.814]                         invokeRestart("muffleMessage")
[17:37:41.814]                     }
[17:37:41.814]                     else if (inherits(cond, "warning")) {
[17:37:41.814]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:41.814]                       if (muffled) 
[17:37:41.814]                         invokeRestart("muffleWarning")
[17:37:41.814]                     }
[17:37:41.814]                     else if (inherits(cond, "condition")) {
[17:37:41.814]                       if (!is.null(pattern)) {
[17:37:41.814]                         computeRestarts <- base::computeRestarts
[17:37:41.814]                         grepl <- base::grepl
[17:37:41.814]                         restarts <- computeRestarts(cond)
[17:37:41.814]                         for (restart in restarts) {
[17:37:41.814]                           name <- restart$name
[17:37:41.814]                           if (is.null(name)) 
[17:37:41.814]                             next
[17:37:41.814]                           if (!grepl(pattern, name)) 
[17:37:41.814]                             next
[17:37:41.814]                           invokeRestart(restart)
[17:37:41.814]                           muffled <- TRUE
[17:37:41.814]                           break
[17:37:41.814]                         }
[17:37:41.814]                       }
[17:37:41.814]                     }
[17:37:41.814]                     invisible(muffled)
[17:37:41.814]                   }
[17:37:41.814]                   muffleCondition(cond)
[17:37:41.814]                 })
[17:37:41.814]             }))
[17:37:41.814]             future::FutureResult(value = ...future.value$value, 
[17:37:41.814]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.814]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.814]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.814]                     ...future.globalenv.names))
[17:37:41.814]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.814]         }, condition = base::local({
[17:37:41.814]             c <- base::c
[17:37:41.814]             inherits <- base::inherits
[17:37:41.814]             invokeRestart <- base::invokeRestart
[17:37:41.814]             length <- base::length
[17:37:41.814]             list <- base::list
[17:37:41.814]             seq.int <- base::seq.int
[17:37:41.814]             signalCondition <- base::signalCondition
[17:37:41.814]             sys.calls <- base::sys.calls
[17:37:41.814]             `[[` <- base::`[[`
[17:37:41.814]             `+` <- base::`+`
[17:37:41.814]             `<<-` <- base::`<<-`
[17:37:41.814]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.814]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.814]                   3L)]
[17:37:41.814]             }
[17:37:41.814]             function(cond) {
[17:37:41.814]                 is_error <- inherits(cond, "error")
[17:37:41.814]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.814]                   NULL)
[17:37:41.814]                 if (is_error) {
[17:37:41.814]                   sessionInformation <- function() {
[17:37:41.814]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.814]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.814]                       search = base::search(), system = base::Sys.info())
[17:37:41.814]                   }
[17:37:41.814]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.814]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.814]                     cond$call), session = sessionInformation(), 
[17:37:41.814]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.814]                   signalCondition(cond)
[17:37:41.814]                 }
[17:37:41.814]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.814]                 "immediateCondition"))) {
[17:37:41.814]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.814]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.814]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.814]                   if (TRUE && !signal) {
[17:37:41.814]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.814]                     {
[17:37:41.814]                       inherits <- base::inherits
[17:37:41.814]                       invokeRestart <- base::invokeRestart
[17:37:41.814]                       is.null <- base::is.null
[17:37:41.814]                       muffled <- FALSE
[17:37:41.814]                       if (inherits(cond, "message")) {
[17:37:41.814]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.814]                         if (muffled) 
[17:37:41.814]                           invokeRestart("muffleMessage")
[17:37:41.814]                       }
[17:37:41.814]                       else if (inherits(cond, "warning")) {
[17:37:41.814]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.814]                         if (muffled) 
[17:37:41.814]                           invokeRestart("muffleWarning")
[17:37:41.814]                       }
[17:37:41.814]                       else if (inherits(cond, "condition")) {
[17:37:41.814]                         if (!is.null(pattern)) {
[17:37:41.814]                           computeRestarts <- base::computeRestarts
[17:37:41.814]                           grepl <- base::grepl
[17:37:41.814]                           restarts <- computeRestarts(cond)
[17:37:41.814]                           for (restart in restarts) {
[17:37:41.814]                             name <- restart$name
[17:37:41.814]                             if (is.null(name)) 
[17:37:41.814]                               next
[17:37:41.814]                             if (!grepl(pattern, name)) 
[17:37:41.814]                               next
[17:37:41.814]                             invokeRestart(restart)
[17:37:41.814]                             muffled <- TRUE
[17:37:41.814]                             break
[17:37:41.814]                           }
[17:37:41.814]                         }
[17:37:41.814]                       }
[17:37:41.814]                       invisible(muffled)
[17:37:41.814]                     }
[17:37:41.814]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.814]                   }
[17:37:41.814]                 }
[17:37:41.814]                 else {
[17:37:41.814]                   if (TRUE) {
[17:37:41.814]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.814]                     {
[17:37:41.814]                       inherits <- base::inherits
[17:37:41.814]                       invokeRestart <- base::invokeRestart
[17:37:41.814]                       is.null <- base::is.null
[17:37:41.814]                       muffled <- FALSE
[17:37:41.814]                       if (inherits(cond, "message")) {
[17:37:41.814]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.814]                         if (muffled) 
[17:37:41.814]                           invokeRestart("muffleMessage")
[17:37:41.814]                       }
[17:37:41.814]                       else if (inherits(cond, "warning")) {
[17:37:41.814]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.814]                         if (muffled) 
[17:37:41.814]                           invokeRestart("muffleWarning")
[17:37:41.814]                       }
[17:37:41.814]                       else if (inherits(cond, "condition")) {
[17:37:41.814]                         if (!is.null(pattern)) {
[17:37:41.814]                           computeRestarts <- base::computeRestarts
[17:37:41.814]                           grepl <- base::grepl
[17:37:41.814]                           restarts <- computeRestarts(cond)
[17:37:41.814]                           for (restart in restarts) {
[17:37:41.814]                             name <- restart$name
[17:37:41.814]                             if (is.null(name)) 
[17:37:41.814]                               next
[17:37:41.814]                             if (!grepl(pattern, name)) 
[17:37:41.814]                               next
[17:37:41.814]                             invokeRestart(restart)
[17:37:41.814]                             muffled <- TRUE
[17:37:41.814]                             break
[17:37:41.814]                           }
[17:37:41.814]                         }
[17:37:41.814]                       }
[17:37:41.814]                       invisible(muffled)
[17:37:41.814]                     }
[17:37:41.814]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.814]                   }
[17:37:41.814]                 }
[17:37:41.814]             }
[17:37:41.814]         }))
[17:37:41.814]     }, error = function(ex) {
[17:37:41.814]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.814]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.814]                 ...future.rng), started = ...future.startTime, 
[17:37:41.814]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.814]             version = "1.8"), class = "FutureResult")
[17:37:41.814]     }, finally = {
[17:37:41.814]         if (!identical(...future.workdir, getwd())) 
[17:37:41.814]             setwd(...future.workdir)
[17:37:41.814]         {
[17:37:41.814]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.814]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.814]             }
[17:37:41.814]             base::options(...future.oldOptions)
[17:37:41.814]             if (.Platform$OS.type == "windows") {
[17:37:41.814]                 old_names <- names(...future.oldEnvVars)
[17:37:41.814]                 envs <- base::Sys.getenv()
[17:37:41.814]                 names <- names(envs)
[17:37:41.814]                 common <- intersect(names, old_names)
[17:37:41.814]                 added <- setdiff(names, old_names)
[17:37:41.814]                 removed <- setdiff(old_names, names)
[17:37:41.814]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.814]                   envs[common]]
[17:37:41.814]                 NAMES <- toupper(changed)
[17:37:41.814]                 args <- list()
[17:37:41.814]                 for (kk in seq_along(NAMES)) {
[17:37:41.814]                   name <- changed[[kk]]
[17:37:41.814]                   NAME <- NAMES[[kk]]
[17:37:41.814]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.814]                     next
[17:37:41.814]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.814]                 }
[17:37:41.814]                 NAMES <- toupper(added)
[17:37:41.814]                 for (kk in seq_along(NAMES)) {
[17:37:41.814]                   name <- added[[kk]]
[17:37:41.814]                   NAME <- NAMES[[kk]]
[17:37:41.814]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.814]                     next
[17:37:41.814]                   args[[name]] <- ""
[17:37:41.814]                 }
[17:37:41.814]                 NAMES <- toupper(removed)
[17:37:41.814]                 for (kk in seq_along(NAMES)) {
[17:37:41.814]                   name <- removed[[kk]]
[17:37:41.814]                   NAME <- NAMES[[kk]]
[17:37:41.814]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.814]                     next
[17:37:41.814]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.814]                 }
[17:37:41.814]                 if (length(args) > 0) 
[17:37:41.814]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.814]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.814]             }
[17:37:41.814]             else {
[17:37:41.814]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.814]             }
[17:37:41.814]             {
[17:37:41.814]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.814]                   0L) {
[17:37:41.814]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.814]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.814]                   base::options(opts)
[17:37:41.814]                 }
[17:37:41.814]                 {
[17:37:41.814]                   {
[17:37:41.814]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:41.814]                     NULL
[17:37:41.814]                   }
[17:37:41.814]                   options(future.plan = NULL)
[17:37:41.814]                   if (is.na(NA_character_)) 
[17:37:41.814]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.814]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.814]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.814]                     .init = FALSE)
[17:37:41.814]                 }
[17:37:41.814]             }
[17:37:41.814]         }
[17:37:41.814]     })
[17:37:41.814]     if (TRUE) {
[17:37:41.814]         base::sink(type = "output", split = FALSE)
[17:37:41.814]         if (TRUE) {
[17:37:41.814]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.814]         }
[17:37:41.814]         else {
[17:37:41.814]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.814]         }
[17:37:41.814]         base::close(...future.stdout)
[17:37:41.814]         ...future.stdout <- NULL
[17:37:41.814]     }
[17:37:41.814]     ...future.result$conditions <- ...future.conditions
[17:37:41.814]     ...future.result$finished <- base::Sys.time()
[17:37:41.814]     ...future.result
[17:37:41.814] }
[17:37:41.816] assign_globals() ...
[17:37:41.816] List of 5
[17:37:41.816]  $ ...future.FUN            :function (...)  
[17:37:41.816]  $ future.call.arguments    : list()
[17:37:41.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.816]  $ ...future.elements_ii    :List of 2
[17:37:41.816]   ..$ : int 0
[17:37:41.816]   ..$ : int 0
[17:37:41.816]  $ ...future.seeds_ii       :List of 2
[17:37:41.816]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[17:37:41.816]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[17:37:41.816]  $ ...future.globals.maxSize: NULL
[17:37:41.816]  - attr(*, "where")=List of 5
[17:37:41.816]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.816]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.816]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.816]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.816]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.816]  - attr(*, "resolved")= logi FALSE
[17:37:41.816]  - attr(*, "total_size")= num 616
[17:37:41.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.816]  - attr(*, "already-done")= logi TRUE
[17:37:41.822] - reassign environment for ‘...future.FUN’
[17:37:41.822] - copied ‘...future.FUN’ to environment
[17:37:41.822] - copied ‘future.call.arguments’ to environment
[17:37:41.822] - copied ‘...future.elements_ii’ to environment
[17:37:41.822] - copied ‘...future.seeds_ii’ to environment
[17:37:41.822] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.822] assign_globals() ... done
[17:37:41.822] requestCore(): workers = 2
[17:37:41.825] MulticoreFuture started
[17:37:41.826] - Launch lazy future ... done
[17:37:41.826] run() for ‘MulticoreFuture’ ... done
[17:37:41.826] plan(): Setting new future strategy stack:
[17:37:41.826] Created future:
[17:37:41.826] List of future strategies:
[17:37:41.826] 1. sequential:
[17:37:41.826]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.826]    - tweaked: FALSE
[17:37:41.826]    - call: NULL
[17:37:41.827] plan(): nbrOfWorkers() = 1
[17:37:41.830] plan(): Setting new future strategy stack:
[17:37:41.830] List of future strategies:
[17:37:41.830] 1. multicore:
[17:37:41.830]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:41.830]    - tweaked: FALSE
[17:37:41.830]    - call: plan(strategy)
[17:37:41.835] plan(): nbrOfWorkers() = 2
[17:37:41.827] MulticoreFuture:
[17:37:41.827] Label: ‘future_replicate-1’
[17:37:41.827] Expression:
[17:37:41.827] {
[17:37:41.827]     do.call(function(...) {
[17:37:41.827]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.827]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.827]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.827]             on.exit(options(oopts), add = TRUE)
[17:37:41.827]         }
[17:37:41.827]         {
[17:37:41.827]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.827]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.827]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.827]                   envir = globalenv(), inherits = FALSE)
[17:37:41.827]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.827]             })
[17:37:41.827]         }
[17:37:41.827]     }, args = future.call.arguments)
[17:37:41.827] }
[17:37:41.827] Lazy evaluation: FALSE
[17:37:41.827] Asynchronous evaluation: TRUE
[17:37:41.827] Local evaluation: TRUE
[17:37:41.827] Environment: R_GlobalEnv
[17:37:41.827] Capture standard output: TRUE
[17:37:41.827] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.827] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.827] Packages: <none>
[17:37:41.827] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.827] Resolved: TRUE
[17:37:41.827] Value: <not collected>
[17:37:41.827] Conditions captured: <none>
[17:37:41.827] Early signaling: FALSE
[17:37:41.827] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.827] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.836] Chunk #1 of 2 ... DONE
[17:37:41.837] Chunk #2 of 2 ...
[17:37:41.837]  - Finding globals in 'X' for chunk #2 ...
[17:37:41.837] getGlobalsAndPackages() ...
[17:37:41.837] Searching for globals...
[17:37:41.837] 
[17:37:41.838] Searching for globals ... DONE
[17:37:41.838] - globals: [0] <none>
[17:37:41.838] getGlobalsAndPackages() ... DONE
[17:37:41.838]    + additional globals found: [n=0] 
[17:37:41.838]    + additional namespaces needed: [n=0] 
[17:37:41.838]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:41.838]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:41.838]  - seeds: [3] <seeds>
[17:37:41.839]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.839] getGlobalsAndPackages() ...
[17:37:41.839] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.839] Resolving globals: FALSE
[17:37:41.839] Tweak future expression to call with '...' arguments ...
[17:37:41.839] {
[17:37:41.839]     do.call(function(...) {
[17:37:41.839]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.839]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.839]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.839]             on.exit(options(oopts), add = TRUE)
[17:37:41.839]         }
[17:37:41.839]         {
[17:37:41.839]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.839]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.839]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.839]                   envir = globalenv(), inherits = FALSE)
[17:37:41.839]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.839]             })
[17:37:41.839]         }
[17:37:41.839]     }, args = future.call.arguments)
[17:37:41.839] }
[17:37:41.840] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.840] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.841] 
[17:37:41.841] getGlobalsAndPackages() ... DONE
[17:37:41.841] run() for ‘Future’ ...
[17:37:41.841] - state: ‘created’
[17:37:41.842] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:41.846] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.846] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:41.846]   - Field: ‘label’
[17:37:41.847]   - Field: ‘local’
[17:37:41.847]   - Field: ‘owner’
[17:37:41.847]   - Field: ‘envir’
[17:37:41.847]   - Field: ‘workers’
[17:37:41.847]   - Field: ‘packages’
[17:37:41.847]   - Field: ‘gc’
[17:37:41.847]   - Field: ‘job’
[17:37:41.847]   - Field: ‘conditions’
[17:37:41.848]   - Field: ‘expr’
[17:37:41.848]   - Field: ‘uuid’
[17:37:41.848]   - Field: ‘seed’
[17:37:41.848]   - Field: ‘version’
[17:37:41.848]   - Field: ‘result’
[17:37:41.848]   - Field: ‘asynchronous’
[17:37:41.848]   - Field: ‘calls’
[17:37:41.849]   - Field: ‘globals’
[17:37:41.849]   - Field: ‘stdout’
[17:37:41.849]   - Field: ‘earlySignal’
[17:37:41.849]   - Field: ‘lazy’
[17:37:41.849]   - Field: ‘state’
[17:37:41.849] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:41.849] - Launch lazy future ...
[17:37:41.850] Packages needed by the future expression (n = 0): <none>
[17:37:41.850] Packages needed by future strategies (n = 0): <none>
[17:37:41.850] {
[17:37:41.850]     {
[17:37:41.850]         {
[17:37:41.850]             ...future.startTime <- base::Sys.time()
[17:37:41.850]             {
[17:37:41.850]                 {
[17:37:41.850]                   {
[17:37:41.850]                     {
[17:37:41.850]                       base::local({
[17:37:41.850]                         has_future <- base::requireNamespace("future", 
[17:37:41.850]                           quietly = TRUE)
[17:37:41.850]                         if (has_future) {
[17:37:41.850]                           ns <- base::getNamespace("future")
[17:37:41.850]                           version <- ns[[".package"]][["version"]]
[17:37:41.850]                           if (is.null(version)) 
[17:37:41.850]                             version <- utils::packageVersion("future")
[17:37:41.850]                         }
[17:37:41.850]                         else {
[17:37:41.850]                           version <- NULL
[17:37:41.850]                         }
[17:37:41.850]                         if (!has_future || version < "1.8.0") {
[17:37:41.850]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.850]                             "", base::R.version$version.string), 
[17:37:41.850]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:41.850]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.850]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.850]                               "release", "version")], collapse = " "), 
[17:37:41.850]                             hostname = base::Sys.info()[["nodename"]])
[17:37:41.850]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.850]                             info)
[17:37:41.850]                           info <- base::paste(info, collapse = "; ")
[17:37:41.850]                           if (!has_future) {
[17:37:41.850]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.850]                               info)
[17:37:41.850]                           }
[17:37:41.850]                           else {
[17:37:41.850]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.850]                               info, version)
[17:37:41.850]                           }
[17:37:41.850]                           base::stop(msg)
[17:37:41.850]                         }
[17:37:41.850]                       })
[17:37:41.850]                     }
[17:37:41.850]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:41.850]                     base::options(mc.cores = 1L)
[17:37:41.850]                   }
[17:37:41.850]                   ...future.strategy.old <- future::plan("list")
[17:37:41.850]                   options(future.plan = NULL)
[17:37:41.850]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.850]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.850]                 }
[17:37:41.850]                 ...future.workdir <- getwd()
[17:37:41.850]             }
[17:37:41.850]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.850]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.850]         }
[17:37:41.850]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.850]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:41.850]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.850]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.850]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.850]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.850]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.850]             base::names(...future.oldOptions))
[17:37:41.850]     }
[17:37:41.850]     if (FALSE) {
[17:37:41.850]     }
[17:37:41.850]     else {
[17:37:41.850]         if (TRUE) {
[17:37:41.850]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.850]                 open = "w")
[17:37:41.850]         }
[17:37:41.850]         else {
[17:37:41.850]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.850]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.850]         }
[17:37:41.850]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.850]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.850]             base::sink(type = "output", split = FALSE)
[17:37:41.850]             base::close(...future.stdout)
[17:37:41.850]         }, add = TRUE)
[17:37:41.850]     }
[17:37:41.850]     ...future.frame <- base::sys.nframe()
[17:37:41.850]     ...future.conditions <- base::list()
[17:37:41.850]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.850]     if (FALSE) {
[17:37:41.850]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.850]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.850]     }
[17:37:41.850]     ...future.result <- base::tryCatch({
[17:37:41.850]         base::withCallingHandlers({
[17:37:41.850]             ...future.value <- base::withVisible(base::local({
[17:37:41.850]                 withCallingHandlers({
[17:37:41.850]                   {
[17:37:41.850]                     do.call(function(...) {
[17:37:41.850]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.850]                       if (!identical(...future.globals.maxSize.org, 
[17:37:41.850]                         ...future.globals.maxSize)) {
[17:37:41.850]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.850]                         on.exit(options(oopts), add = TRUE)
[17:37:41.850]                       }
[17:37:41.850]                       {
[17:37:41.850]                         lapply(seq_along(...future.elements_ii), 
[17:37:41.850]                           FUN = function(jj) {
[17:37:41.850]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.850]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.850]                               envir = globalenv(), inherits = FALSE)
[17:37:41.850]                             ...future.FUN(...future.X_jj, ...)
[17:37:41.850]                           })
[17:37:41.850]                       }
[17:37:41.850]                     }, args = future.call.arguments)
[17:37:41.850]                   }
[17:37:41.850]                 }, immediateCondition = function(cond) {
[17:37:41.850]                   save_rds <- function (object, pathname, ...) 
[17:37:41.850]                   {
[17:37:41.850]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:41.850]                     if (file_test("-f", pathname_tmp)) {
[17:37:41.850]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.850]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:41.850]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.850]                         fi_tmp[["mtime"]])
[17:37:41.850]                     }
[17:37:41.850]                     tryCatch({
[17:37:41.850]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:41.850]                     }, error = function(ex) {
[17:37:41.850]                       msg <- conditionMessage(ex)
[17:37:41.850]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.850]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:41.850]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.850]                         fi_tmp[["mtime"]], msg)
[17:37:41.850]                       ex$message <- msg
[17:37:41.850]                       stop(ex)
[17:37:41.850]                     })
[17:37:41.850]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:41.850]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:41.850]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:41.850]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.850]                       fi <- file.info(pathname)
[17:37:41.850]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:41.850]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.850]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:41.850]                         fi[["size"]], fi[["mtime"]])
[17:37:41.850]                       stop(msg)
[17:37:41.850]                     }
[17:37:41.850]                     invisible(pathname)
[17:37:41.850]                   }
[17:37:41.850]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:41.850]                     rootPath = tempdir()) 
[17:37:41.850]                   {
[17:37:41.850]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:41.850]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:41.850]                       tmpdir = path, fileext = ".rds")
[17:37:41.850]                     save_rds(obj, file)
[17:37:41.850]                   }
[17:37:41.850]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:41.850]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.850]                   {
[17:37:41.850]                     inherits <- base::inherits
[17:37:41.850]                     invokeRestart <- base::invokeRestart
[17:37:41.850]                     is.null <- base::is.null
[17:37:41.850]                     muffled <- FALSE
[17:37:41.850]                     if (inherits(cond, "message")) {
[17:37:41.850]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:41.850]                       if (muffled) 
[17:37:41.850]                         invokeRestart("muffleMessage")
[17:37:41.850]                     }
[17:37:41.850]                     else if (inherits(cond, "warning")) {
[17:37:41.850]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:41.850]                       if (muffled) 
[17:37:41.850]                         invokeRestart("muffleWarning")
[17:37:41.850]                     }
[17:37:41.850]                     else if (inherits(cond, "condition")) {
[17:37:41.850]                       if (!is.null(pattern)) {
[17:37:41.850]                         computeRestarts <- base::computeRestarts
[17:37:41.850]                         grepl <- base::grepl
[17:37:41.850]                         restarts <- computeRestarts(cond)
[17:37:41.850]                         for (restart in restarts) {
[17:37:41.850]                           name <- restart$name
[17:37:41.850]                           if (is.null(name)) 
[17:37:41.850]                             next
[17:37:41.850]                           if (!grepl(pattern, name)) 
[17:37:41.850]                             next
[17:37:41.850]                           invokeRestart(restart)
[17:37:41.850]                           muffled <- TRUE
[17:37:41.850]                           break
[17:37:41.850]                         }
[17:37:41.850]                       }
[17:37:41.850]                     }
[17:37:41.850]                     invisible(muffled)
[17:37:41.850]                   }
[17:37:41.850]                   muffleCondition(cond)
[17:37:41.850]                 })
[17:37:41.850]             }))
[17:37:41.850]             future::FutureResult(value = ...future.value$value, 
[17:37:41.850]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.850]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.850]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.850]                     ...future.globalenv.names))
[17:37:41.850]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.850]         }, condition = base::local({
[17:37:41.850]             c <- base::c
[17:37:41.850]             inherits <- base::inherits
[17:37:41.850]             invokeRestart <- base::invokeRestart
[17:37:41.850]             length <- base::length
[17:37:41.850]             list <- base::list
[17:37:41.850]             seq.int <- base::seq.int
[17:37:41.850]             signalCondition <- base::signalCondition
[17:37:41.850]             sys.calls <- base::sys.calls
[17:37:41.850]             `[[` <- base::`[[`
[17:37:41.850]             `+` <- base::`+`
[17:37:41.850]             `<<-` <- base::`<<-`
[17:37:41.850]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.850]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.850]                   3L)]
[17:37:41.850]             }
[17:37:41.850]             function(cond) {
[17:37:41.850]                 is_error <- inherits(cond, "error")
[17:37:41.850]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.850]                   NULL)
[17:37:41.850]                 if (is_error) {
[17:37:41.850]                   sessionInformation <- function() {
[17:37:41.850]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.850]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.850]                       search = base::search(), system = base::Sys.info())
[17:37:41.850]                   }
[17:37:41.850]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.850]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.850]                     cond$call), session = sessionInformation(), 
[17:37:41.850]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.850]                   signalCondition(cond)
[17:37:41.850]                 }
[17:37:41.850]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.850]                 "immediateCondition"))) {
[17:37:41.850]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.850]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.850]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.850]                   if (TRUE && !signal) {
[17:37:41.850]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.850]                     {
[17:37:41.850]                       inherits <- base::inherits
[17:37:41.850]                       invokeRestart <- base::invokeRestart
[17:37:41.850]                       is.null <- base::is.null
[17:37:41.850]                       muffled <- FALSE
[17:37:41.850]                       if (inherits(cond, "message")) {
[17:37:41.850]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.850]                         if (muffled) 
[17:37:41.850]                           invokeRestart("muffleMessage")
[17:37:41.850]                       }
[17:37:41.850]                       else if (inherits(cond, "warning")) {
[17:37:41.850]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.850]                         if (muffled) 
[17:37:41.850]                           invokeRestart("muffleWarning")
[17:37:41.850]                       }
[17:37:41.850]                       else if (inherits(cond, "condition")) {
[17:37:41.850]                         if (!is.null(pattern)) {
[17:37:41.850]                           computeRestarts <- base::computeRestarts
[17:37:41.850]                           grepl <- base::grepl
[17:37:41.850]                           restarts <- computeRestarts(cond)
[17:37:41.850]                           for (restart in restarts) {
[17:37:41.850]                             name <- restart$name
[17:37:41.850]                             if (is.null(name)) 
[17:37:41.850]                               next
[17:37:41.850]                             if (!grepl(pattern, name)) 
[17:37:41.850]                               next
[17:37:41.850]                             invokeRestart(restart)
[17:37:41.850]                             muffled <- TRUE
[17:37:41.850]                             break
[17:37:41.850]                           }
[17:37:41.850]                         }
[17:37:41.850]                       }
[17:37:41.850]                       invisible(muffled)
[17:37:41.850]                     }
[17:37:41.850]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.850]                   }
[17:37:41.850]                 }
[17:37:41.850]                 else {
[17:37:41.850]                   if (TRUE) {
[17:37:41.850]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.850]                     {
[17:37:41.850]                       inherits <- base::inherits
[17:37:41.850]                       invokeRestart <- base::invokeRestart
[17:37:41.850]                       is.null <- base::is.null
[17:37:41.850]                       muffled <- FALSE
[17:37:41.850]                       if (inherits(cond, "message")) {
[17:37:41.850]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.850]                         if (muffled) 
[17:37:41.850]                           invokeRestart("muffleMessage")
[17:37:41.850]                       }
[17:37:41.850]                       else if (inherits(cond, "warning")) {
[17:37:41.850]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.850]                         if (muffled) 
[17:37:41.850]                           invokeRestart("muffleWarning")
[17:37:41.850]                       }
[17:37:41.850]                       else if (inherits(cond, "condition")) {
[17:37:41.850]                         if (!is.null(pattern)) {
[17:37:41.850]                           computeRestarts <- base::computeRestarts
[17:37:41.850]                           grepl <- base::grepl
[17:37:41.850]                           restarts <- computeRestarts(cond)
[17:37:41.850]                           for (restart in restarts) {
[17:37:41.850]                             name <- restart$name
[17:37:41.850]                             if (is.null(name)) 
[17:37:41.850]                               next
[17:37:41.850]                             if (!grepl(pattern, name)) 
[17:37:41.850]                               next
[17:37:41.850]                             invokeRestart(restart)
[17:37:41.850]                             muffled <- TRUE
[17:37:41.850]                             break
[17:37:41.850]                           }
[17:37:41.850]                         }
[17:37:41.850]                       }
[17:37:41.850]                       invisible(muffled)
[17:37:41.850]                     }
[17:37:41.850]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.850]                   }
[17:37:41.850]                 }
[17:37:41.850]             }
[17:37:41.850]         }))
[17:37:41.850]     }, error = function(ex) {
[17:37:41.850]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.850]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.850]                 ...future.rng), started = ...future.startTime, 
[17:37:41.850]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.850]             version = "1.8"), class = "FutureResult")
[17:37:41.850]     }, finally = {
[17:37:41.850]         if (!identical(...future.workdir, getwd())) 
[17:37:41.850]             setwd(...future.workdir)
[17:37:41.850]         {
[17:37:41.850]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.850]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.850]             }
[17:37:41.850]             base::options(...future.oldOptions)
[17:37:41.850]             if (.Platform$OS.type == "windows") {
[17:37:41.850]                 old_names <- names(...future.oldEnvVars)
[17:37:41.850]                 envs <- base::Sys.getenv()
[17:37:41.850]                 names <- names(envs)
[17:37:41.850]                 common <- intersect(names, old_names)
[17:37:41.850]                 added <- setdiff(names, old_names)
[17:37:41.850]                 removed <- setdiff(old_names, names)
[17:37:41.850]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.850]                   envs[common]]
[17:37:41.850]                 NAMES <- toupper(changed)
[17:37:41.850]                 args <- list()
[17:37:41.850]                 for (kk in seq_along(NAMES)) {
[17:37:41.850]                   name <- changed[[kk]]
[17:37:41.850]                   NAME <- NAMES[[kk]]
[17:37:41.850]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.850]                     next
[17:37:41.850]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.850]                 }
[17:37:41.850]                 NAMES <- toupper(added)
[17:37:41.850]                 for (kk in seq_along(NAMES)) {
[17:37:41.850]                   name <- added[[kk]]
[17:37:41.850]                   NAME <- NAMES[[kk]]
[17:37:41.850]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.850]                     next
[17:37:41.850]                   args[[name]] <- ""
[17:37:41.850]                 }
[17:37:41.850]                 NAMES <- toupper(removed)
[17:37:41.850]                 for (kk in seq_along(NAMES)) {
[17:37:41.850]                   name <- removed[[kk]]
[17:37:41.850]                   NAME <- NAMES[[kk]]
[17:37:41.850]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.850]                     next
[17:37:41.850]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.850]                 }
[17:37:41.850]                 if (length(args) > 0) 
[17:37:41.850]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.850]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.850]             }
[17:37:41.850]             else {
[17:37:41.850]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.850]             }
[17:37:41.850]             {
[17:37:41.850]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.850]                   0L) {
[17:37:41.850]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.850]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.850]                   base::options(opts)
[17:37:41.850]                 }
[17:37:41.850]                 {
[17:37:41.850]                   {
[17:37:41.850]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:41.850]                     NULL
[17:37:41.850]                   }
[17:37:41.850]                   options(future.plan = NULL)
[17:37:41.850]                   if (is.na(NA_character_)) 
[17:37:41.850]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.850]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.850]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.850]                     .init = FALSE)
[17:37:41.850]                 }
[17:37:41.850]             }
[17:37:41.850]         }
[17:37:41.850]     })
[17:37:41.850]     if (TRUE) {
[17:37:41.850]         base::sink(type = "output", split = FALSE)
[17:37:41.850]         if (TRUE) {
[17:37:41.850]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.850]         }
[17:37:41.850]         else {
[17:37:41.850]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.850]         }
[17:37:41.850]         base::close(...future.stdout)
[17:37:41.850]         ...future.stdout <- NULL
[17:37:41.850]     }
[17:37:41.850]     ...future.result$conditions <- ...future.conditions
[17:37:41.850]     ...future.result$finished <- base::Sys.time()
[17:37:41.850]     ...future.result
[17:37:41.850] }
[17:37:41.854] assign_globals() ...
[17:37:41.854] List of 5
[17:37:41.854]  $ ...future.FUN            :function (...)  
[17:37:41.854]  $ future.call.arguments    : list()
[17:37:41.854]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.854]  $ ...future.elements_ii    :List of 3
[17:37:41.854]   ..$ : int 0
[17:37:41.854]   ..$ : int 0
[17:37:41.854]   ..$ : int 0
[17:37:41.854]  $ ...future.seeds_ii       :List of 3
[17:37:41.854]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[17:37:41.854]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[17:37:41.854]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[17:37:41.854]  $ ...future.globals.maxSize: NULL
[17:37:41.854]  - attr(*, "where")=List of 5
[17:37:41.854]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.854]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.854]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.854]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.854]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.854]  - attr(*, "resolved")= logi FALSE
[17:37:41.854]  - attr(*, "total_size")= num 616
[17:37:41.854]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.854]  - attr(*, "already-done")= logi TRUE
[17:37:41.867] - reassign environment for ‘...future.FUN’
[17:37:41.867] - copied ‘...future.FUN’ to environment
[17:37:41.868] - copied ‘future.call.arguments’ to environment
[17:37:41.868] - copied ‘...future.elements_ii’ to environment
[17:37:41.868] - copied ‘...future.seeds_ii’ to environment
[17:37:41.868] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.868] assign_globals() ... done
[17:37:41.868] requestCore(): workers = 2
[17:37:41.874] MulticoreFuture started
[17:37:41.875] - Launch lazy future ... done
[17:37:41.875] run() for ‘MulticoreFuture’ ... done
[17:37:41.875] Created future:
[17:37:41.875] plan(): Setting new future strategy stack:
[17:37:41.876] List of future strategies:
[17:37:41.876] 1. sequential:
[17:37:41.876]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.876]    - tweaked: FALSE
[17:37:41.876]    - call: NULL
[17:37:41.877] plan(): nbrOfWorkers() = 1
[17:37:41.879] plan(): Setting new future strategy stack:
[17:37:41.879] List of future strategies:
[17:37:41.879] 1. multicore:
[17:37:41.879]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:41.879]    - tweaked: FALSE
[17:37:41.879]    - call: plan(strategy)
[17:37:41.885] plan(): nbrOfWorkers() = 2
[17:37:41.875] MulticoreFuture:
[17:37:41.875] Label: ‘future_replicate-2’
[17:37:41.875] Expression:
[17:37:41.875] {
[17:37:41.875]     do.call(function(...) {
[17:37:41.875]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.875]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.875]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.875]             on.exit(options(oopts), add = TRUE)
[17:37:41.875]         }
[17:37:41.875]         {
[17:37:41.875]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.875]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.875]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.875]                   envir = globalenv(), inherits = FALSE)
[17:37:41.875]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.875]             })
[17:37:41.875]         }
[17:37:41.875]     }, args = future.call.arguments)
[17:37:41.875] }
[17:37:41.875] Lazy evaluation: FALSE
[17:37:41.875] Asynchronous evaluation: TRUE
[17:37:41.875] Local evaluation: TRUE
[17:37:41.875] Environment: R_GlobalEnv
[17:37:41.875] Capture standard output: TRUE
[17:37:41.875] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.875] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.875] Packages: <none>
[17:37:41.875] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.875] Resolved: TRUE
[17:37:41.875] Value: <not collected>
[17:37:41.875] Conditions captured: <none>
[17:37:41.875] Early signaling: FALSE
[17:37:41.875] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.875] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.886] Chunk #2 of 2 ... DONE
[17:37:41.886] Launching 2 futures (chunks) ... DONE
[17:37:41.886] Resolving 2 futures (chunks) ...
[17:37:41.887] resolve() on list ...
[17:37:41.887]  recursive: 0
[17:37:41.887]  length: 2
[17:37:41.887] 
[17:37:41.887] Future #1
[17:37:41.888] result() for MulticoreFuture ...
[17:37:41.890] result() for MulticoreFuture ...
[17:37:41.890] result() for MulticoreFuture ... done
[17:37:41.890] result() for MulticoreFuture ... done
[17:37:41.890] result() for MulticoreFuture ...
[17:37:41.890] result() for MulticoreFuture ... done
[17:37:41.891] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:37:41.891] - nx: 2
[17:37:41.891] - relay: TRUE
[17:37:41.891] - stdout: TRUE
[17:37:41.891] - signal: TRUE
[17:37:41.891] - resignal: FALSE
[17:37:41.891] - force: TRUE
[17:37:41.891] - relayed: [n=2] FALSE, FALSE
[17:37:41.892] - queued futures: [n=2] FALSE, FALSE
[17:37:41.892]  - until=1
[17:37:41.892]  - relaying element #1
[17:37:41.892] result() for MulticoreFuture ...
[17:37:41.892] result() for MulticoreFuture ... done
[17:37:41.892] result() for MulticoreFuture ...
[17:37:41.893] result() for MulticoreFuture ... done
[17:37:41.893] result() for MulticoreFuture ...
[17:37:41.893] result() for MulticoreFuture ... done
[17:37:41.893] result() for MulticoreFuture ...
[17:37:41.893] result() for MulticoreFuture ... done
[17:37:41.893] - relayed: [n=2] TRUE, FALSE
[17:37:41.893] - queued futures: [n=2] TRUE, FALSE
[17:37:41.894] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:37:41.894]  length: 1 (resolved future 1)
[17:37:41.894] Future #2
[17:37:41.894] result() for MulticoreFuture ...
[17:37:41.895] result() for MulticoreFuture ...
[17:37:41.895] result() for MulticoreFuture ... done
[17:37:41.895] result() for MulticoreFuture ... done
[17:37:41.895] result() for MulticoreFuture ...
[17:37:41.895] result() for MulticoreFuture ... done
[17:37:41.896] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:37:41.896] - nx: 2
[17:37:41.896] - relay: TRUE
[17:37:41.896] - stdout: TRUE
[17:37:41.896] - signal: TRUE
[17:37:41.896] - resignal: FALSE
[17:37:41.896] - force: TRUE
[17:37:41.896] - relayed: [n=2] TRUE, FALSE
[17:37:41.897] - queued futures: [n=2] TRUE, FALSE
[17:37:41.897]  - until=2
[17:37:41.897]  - relaying element #2
[17:37:41.897] result() for MulticoreFuture ...
[17:37:41.897] result() for MulticoreFuture ... done
[17:37:41.897] result() for MulticoreFuture ...
[17:37:41.897] result() for MulticoreFuture ... done
[17:37:41.898] result() for MulticoreFuture ...
[17:37:41.898] result() for MulticoreFuture ... done
[17:37:41.898] result() for MulticoreFuture ...
[17:37:41.898] result() for MulticoreFuture ... done
[17:37:41.898] - relayed: [n=2] TRUE, TRUE
[17:37:41.898] - queued futures: [n=2] TRUE, TRUE
[17:37:41.898] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:37:41.898]  length: 0 (resolved future 2)
[17:37:41.898] Relaying remaining futures
[17:37:41.898] signalConditionsASAP(NULL, pos=0) ...
[17:37:41.899] - nx: 2
[17:37:41.899] - relay: TRUE
[17:37:41.899] - stdout: TRUE
[17:37:41.899] - signal: TRUE
[17:37:41.899] - resignal: FALSE
[17:37:41.899] - force: TRUE
[17:37:41.899] - relayed: [n=2] TRUE, TRUE
[17:37:41.899] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:41.899] - relayed: [n=2] TRUE, TRUE
[17:37:41.899] - queued futures: [n=2] TRUE, TRUE
[17:37:41.900] signalConditionsASAP(NULL, pos=0) ... done
[17:37:41.900] resolve() on list ... DONE
[17:37:41.900] result() for MulticoreFuture ...
[17:37:41.900] result() for MulticoreFuture ... done
[17:37:41.900] result() for MulticoreFuture ...
[17:37:41.900] result() for MulticoreFuture ... done
[17:37:41.900] result() for MulticoreFuture ...
[17:37:41.900] result() for MulticoreFuture ... done
[17:37:41.900] result() for MulticoreFuture ...
[17:37:41.901] result() for MulticoreFuture ... done
[17:37:41.901]  - Number of value chunks collected: 2
[17:37:41.901] Resolving 2 futures (chunks) ... DONE
[17:37:41.901] Reducing values from 2 chunks ...
[17:37:41.901]  - Number of values collected after concatenation: 5
[17:37:41.901]  - Number of values expected: 5
[17:37:41.901] Reducing values from 2 chunks ... DONE
[17:37:41.901] future_lapply() ... DONE
[17:37:41.902] future_lapply() ...
[17:37:41.902] Generating random seeds ...
[17:37:41.902] Generating random seed streams for 5 elements ...
[17:37:41.902] Generating random seed streams for 5 elements ... DONE
[17:37:41.903] Generating random seeds ... DONE
[17:37:41.903] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:41.907] Number of chunks: 2
[17:37:41.907] getGlobalsAndPackagesXApply() ...
[17:37:41.907]  - future.globals: TRUE
[17:37:41.908] getGlobalsAndPackages() ...
[17:37:41.908] Searching for globals...
[17:37:41.911] - globals found: [2] ‘FUN’, ‘sample’
[17:37:41.912] Searching for globals ... DONE
[17:37:41.912] Resolving globals: FALSE
[17:37:41.912] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:41.913] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:41.913] - globals: [1] ‘FUN’
[17:37:41.913] 
[17:37:41.913] getGlobalsAndPackages() ... DONE
[17:37:41.913]  - globals found/used: [n=1] ‘FUN’
[17:37:41.913]  - needed namespaces: [n=0] 
[17:37:41.914] Finding globals ... DONE
[17:37:41.914]  - use_args: TRUE
[17:37:41.914]  - Getting '...' globals ...
[17:37:41.914] resolve() on list ...
[17:37:41.914]  recursive: 0
[17:37:41.914]  length: 1
[17:37:41.915]  elements: ‘...’
[17:37:41.915]  length: 0 (resolved future 1)
[17:37:41.915] resolve() on list ... DONE
[17:37:41.915]    - '...' content: [n=0] 
[17:37:41.915] List of 1
[17:37:41.915]  $ ...: list()
[17:37:41.915]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.915]  - attr(*, "where")=List of 1
[17:37:41.915]   ..$ ...:<environment: 0x5640c0b46578> 
[17:37:41.915]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.915]  - attr(*, "resolved")= logi TRUE
[17:37:41.915]  - attr(*, "total_size")= num NA
[17:37:41.918]  - Getting '...' globals ... DONE
[17:37:41.918] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:41.918] List of 2
[17:37:41.918]  $ ...future.FUN:function (...)  
[17:37:41.918]  $ ...          : list()
[17:37:41.918]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.918]  - attr(*, "where")=List of 2
[17:37:41.918]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:41.918]   ..$ ...          :<environment: 0x5640c0b46578> 
[17:37:41.918]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.918]  - attr(*, "resolved")= logi FALSE
[17:37:41.918]  - attr(*, "total_size")= num 616
[17:37:41.921] Packages to be attached in all futures: [n=0] 
[17:37:41.921] getGlobalsAndPackagesXApply() ... DONE
[17:37:41.922] Number of futures (= number of chunks): 2
[17:37:41.922] Launching 2 futures (chunks) ...
[17:37:41.922] Chunk #1 of 2 ...
[17:37:41.922]  - Finding globals in 'X' for chunk #1 ...
[17:37:41.922] getGlobalsAndPackages() ...
[17:37:41.922] Searching for globals...
[17:37:41.922] 
[17:37:41.922] Searching for globals ... DONE
[17:37:41.923] - globals: [0] <none>
[17:37:41.923] getGlobalsAndPackages() ... DONE
[17:37:41.923]    + additional globals found: [n=0] 
[17:37:41.923]    + additional namespaces needed: [n=0] 
[17:37:41.923]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:41.923]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:41.923]  - seeds: [2] <seeds>
[17:37:41.923]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.923] getGlobalsAndPackages() ...
[17:37:41.923] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.923] Resolving globals: FALSE
[17:37:41.924] Tweak future expression to call with '...' arguments ...
[17:37:41.924] {
[17:37:41.924]     do.call(function(...) {
[17:37:41.924]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.924]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.924]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.924]             on.exit(options(oopts), add = TRUE)
[17:37:41.924]         }
[17:37:41.924]         {
[17:37:41.924]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.924]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.924]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.924]                   envir = globalenv(), inherits = FALSE)
[17:37:41.924]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.924]             })
[17:37:41.924]         }
[17:37:41.924]     }, args = future.call.arguments)
[17:37:41.924] }
[17:37:41.924] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.924] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.924] 
[17:37:41.925] getGlobalsAndPackages() ... DONE
[17:37:41.925] run() for ‘Future’ ...
[17:37:41.925] - state: ‘created’
[17:37:41.925] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:41.929] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.929] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:41.929]   - Field: ‘label’
[17:37:41.929]   - Field: ‘local’
[17:37:41.929]   - Field: ‘owner’
[17:37:41.929]   - Field: ‘envir’
[17:37:41.929]   - Field: ‘workers’
[17:37:41.929]   - Field: ‘packages’
[17:37:41.930]   - Field: ‘gc’
[17:37:41.930]   - Field: ‘job’
[17:37:41.930]   - Field: ‘conditions’
[17:37:41.930]   - Field: ‘expr’
[17:37:41.930]   - Field: ‘uuid’
[17:37:41.930]   - Field: ‘seed’
[17:37:41.930]   - Field: ‘version’
[17:37:41.930]   - Field: ‘result’
[17:37:41.930]   - Field: ‘asynchronous’
[17:37:41.930]   - Field: ‘calls’
[17:37:41.930]   - Field: ‘globals’
[17:37:41.931]   - Field: ‘stdout’
[17:37:41.931]   - Field: ‘earlySignal’
[17:37:41.931]   - Field: ‘lazy’
[17:37:41.931]   - Field: ‘state’
[17:37:41.931] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:41.931] - Launch lazy future ...
[17:37:41.931] Packages needed by the future expression (n = 0): <none>
[17:37:41.931] Packages needed by future strategies (n = 0): <none>
[17:37:41.932] {
[17:37:41.932]     {
[17:37:41.932]         {
[17:37:41.932]             ...future.startTime <- base::Sys.time()
[17:37:41.932]             {
[17:37:41.932]                 {
[17:37:41.932]                   {
[17:37:41.932]                     {
[17:37:41.932]                       base::local({
[17:37:41.932]                         has_future <- base::requireNamespace("future", 
[17:37:41.932]                           quietly = TRUE)
[17:37:41.932]                         if (has_future) {
[17:37:41.932]                           ns <- base::getNamespace("future")
[17:37:41.932]                           version <- ns[[".package"]][["version"]]
[17:37:41.932]                           if (is.null(version)) 
[17:37:41.932]                             version <- utils::packageVersion("future")
[17:37:41.932]                         }
[17:37:41.932]                         else {
[17:37:41.932]                           version <- NULL
[17:37:41.932]                         }
[17:37:41.932]                         if (!has_future || version < "1.8.0") {
[17:37:41.932]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.932]                             "", base::R.version$version.string), 
[17:37:41.932]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:41.932]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.932]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.932]                               "release", "version")], collapse = " "), 
[17:37:41.932]                             hostname = base::Sys.info()[["nodename"]])
[17:37:41.932]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.932]                             info)
[17:37:41.932]                           info <- base::paste(info, collapse = "; ")
[17:37:41.932]                           if (!has_future) {
[17:37:41.932]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.932]                               info)
[17:37:41.932]                           }
[17:37:41.932]                           else {
[17:37:41.932]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.932]                               info, version)
[17:37:41.932]                           }
[17:37:41.932]                           base::stop(msg)
[17:37:41.932]                         }
[17:37:41.932]                       })
[17:37:41.932]                     }
[17:37:41.932]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:41.932]                     base::options(mc.cores = 1L)
[17:37:41.932]                   }
[17:37:41.932]                   ...future.strategy.old <- future::plan("list")
[17:37:41.932]                   options(future.plan = NULL)
[17:37:41.932]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.932]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.932]                 }
[17:37:41.932]                 ...future.workdir <- getwd()
[17:37:41.932]             }
[17:37:41.932]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.932]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.932]         }
[17:37:41.932]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.932]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:41.932]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.932]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.932]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.932]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.932]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.932]             base::names(...future.oldOptions))
[17:37:41.932]     }
[17:37:41.932]     if (FALSE) {
[17:37:41.932]     }
[17:37:41.932]     else {
[17:37:41.932]         if (TRUE) {
[17:37:41.932]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.932]                 open = "w")
[17:37:41.932]         }
[17:37:41.932]         else {
[17:37:41.932]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.932]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.932]         }
[17:37:41.932]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.932]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.932]             base::sink(type = "output", split = FALSE)
[17:37:41.932]             base::close(...future.stdout)
[17:37:41.932]         }, add = TRUE)
[17:37:41.932]     }
[17:37:41.932]     ...future.frame <- base::sys.nframe()
[17:37:41.932]     ...future.conditions <- base::list()
[17:37:41.932]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.932]     if (FALSE) {
[17:37:41.932]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.932]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.932]     }
[17:37:41.932]     ...future.result <- base::tryCatch({
[17:37:41.932]         base::withCallingHandlers({
[17:37:41.932]             ...future.value <- base::withVisible(base::local({
[17:37:41.932]                 withCallingHandlers({
[17:37:41.932]                   {
[17:37:41.932]                     do.call(function(...) {
[17:37:41.932]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.932]                       if (!identical(...future.globals.maxSize.org, 
[17:37:41.932]                         ...future.globals.maxSize)) {
[17:37:41.932]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.932]                         on.exit(options(oopts), add = TRUE)
[17:37:41.932]                       }
[17:37:41.932]                       {
[17:37:41.932]                         lapply(seq_along(...future.elements_ii), 
[17:37:41.932]                           FUN = function(jj) {
[17:37:41.932]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.932]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.932]                               envir = globalenv(), inherits = FALSE)
[17:37:41.932]                             ...future.FUN(...future.X_jj, ...)
[17:37:41.932]                           })
[17:37:41.932]                       }
[17:37:41.932]                     }, args = future.call.arguments)
[17:37:41.932]                   }
[17:37:41.932]                 }, immediateCondition = function(cond) {
[17:37:41.932]                   save_rds <- function (object, pathname, ...) 
[17:37:41.932]                   {
[17:37:41.932]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:41.932]                     if (file_test("-f", pathname_tmp)) {
[17:37:41.932]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.932]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:41.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.932]                         fi_tmp[["mtime"]])
[17:37:41.932]                     }
[17:37:41.932]                     tryCatch({
[17:37:41.932]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:41.932]                     }, error = function(ex) {
[17:37:41.932]                       msg <- conditionMessage(ex)
[17:37:41.932]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.932]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:41.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.932]                         fi_tmp[["mtime"]], msg)
[17:37:41.932]                       ex$message <- msg
[17:37:41.932]                       stop(ex)
[17:37:41.932]                     })
[17:37:41.932]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:41.932]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:41.932]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:41.932]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.932]                       fi <- file.info(pathname)
[17:37:41.932]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:41.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.932]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:41.932]                         fi[["size"]], fi[["mtime"]])
[17:37:41.932]                       stop(msg)
[17:37:41.932]                     }
[17:37:41.932]                     invisible(pathname)
[17:37:41.932]                   }
[17:37:41.932]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:41.932]                     rootPath = tempdir()) 
[17:37:41.932]                   {
[17:37:41.932]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:41.932]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:41.932]                       tmpdir = path, fileext = ".rds")
[17:37:41.932]                     save_rds(obj, file)
[17:37:41.932]                   }
[17:37:41.932]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:41.932]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.932]                   {
[17:37:41.932]                     inherits <- base::inherits
[17:37:41.932]                     invokeRestart <- base::invokeRestart
[17:37:41.932]                     is.null <- base::is.null
[17:37:41.932]                     muffled <- FALSE
[17:37:41.932]                     if (inherits(cond, "message")) {
[17:37:41.932]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:41.932]                       if (muffled) 
[17:37:41.932]                         invokeRestart("muffleMessage")
[17:37:41.932]                     }
[17:37:41.932]                     else if (inherits(cond, "warning")) {
[17:37:41.932]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:41.932]                       if (muffled) 
[17:37:41.932]                         invokeRestart("muffleWarning")
[17:37:41.932]                     }
[17:37:41.932]                     else if (inherits(cond, "condition")) {
[17:37:41.932]                       if (!is.null(pattern)) {
[17:37:41.932]                         computeRestarts <- base::computeRestarts
[17:37:41.932]                         grepl <- base::grepl
[17:37:41.932]                         restarts <- computeRestarts(cond)
[17:37:41.932]                         for (restart in restarts) {
[17:37:41.932]                           name <- restart$name
[17:37:41.932]                           if (is.null(name)) 
[17:37:41.932]                             next
[17:37:41.932]                           if (!grepl(pattern, name)) 
[17:37:41.932]                             next
[17:37:41.932]                           invokeRestart(restart)
[17:37:41.932]                           muffled <- TRUE
[17:37:41.932]                           break
[17:37:41.932]                         }
[17:37:41.932]                       }
[17:37:41.932]                     }
[17:37:41.932]                     invisible(muffled)
[17:37:41.932]                   }
[17:37:41.932]                   muffleCondition(cond)
[17:37:41.932]                 })
[17:37:41.932]             }))
[17:37:41.932]             future::FutureResult(value = ...future.value$value, 
[17:37:41.932]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.932]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.932]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.932]                     ...future.globalenv.names))
[17:37:41.932]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.932]         }, condition = base::local({
[17:37:41.932]             c <- base::c
[17:37:41.932]             inherits <- base::inherits
[17:37:41.932]             invokeRestart <- base::invokeRestart
[17:37:41.932]             length <- base::length
[17:37:41.932]             list <- base::list
[17:37:41.932]             seq.int <- base::seq.int
[17:37:41.932]             signalCondition <- base::signalCondition
[17:37:41.932]             sys.calls <- base::sys.calls
[17:37:41.932]             `[[` <- base::`[[`
[17:37:41.932]             `+` <- base::`+`
[17:37:41.932]             `<<-` <- base::`<<-`
[17:37:41.932]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.932]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.932]                   3L)]
[17:37:41.932]             }
[17:37:41.932]             function(cond) {
[17:37:41.932]                 is_error <- inherits(cond, "error")
[17:37:41.932]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.932]                   NULL)
[17:37:41.932]                 if (is_error) {
[17:37:41.932]                   sessionInformation <- function() {
[17:37:41.932]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.932]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.932]                       search = base::search(), system = base::Sys.info())
[17:37:41.932]                   }
[17:37:41.932]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.932]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.932]                     cond$call), session = sessionInformation(), 
[17:37:41.932]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.932]                   signalCondition(cond)
[17:37:41.932]                 }
[17:37:41.932]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.932]                 "immediateCondition"))) {
[17:37:41.932]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.932]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.932]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.932]                   if (TRUE && !signal) {
[17:37:41.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.932]                     {
[17:37:41.932]                       inherits <- base::inherits
[17:37:41.932]                       invokeRestart <- base::invokeRestart
[17:37:41.932]                       is.null <- base::is.null
[17:37:41.932]                       muffled <- FALSE
[17:37:41.932]                       if (inherits(cond, "message")) {
[17:37:41.932]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.932]                         if (muffled) 
[17:37:41.932]                           invokeRestart("muffleMessage")
[17:37:41.932]                       }
[17:37:41.932]                       else if (inherits(cond, "warning")) {
[17:37:41.932]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.932]                         if (muffled) 
[17:37:41.932]                           invokeRestart("muffleWarning")
[17:37:41.932]                       }
[17:37:41.932]                       else if (inherits(cond, "condition")) {
[17:37:41.932]                         if (!is.null(pattern)) {
[17:37:41.932]                           computeRestarts <- base::computeRestarts
[17:37:41.932]                           grepl <- base::grepl
[17:37:41.932]                           restarts <- computeRestarts(cond)
[17:37:41.932]                           for (restart in restarts) {
[17:37:41.932]                             name <- restart$name
[17:37:41.932]                             if (is.null(name)) 
[17:37:41.932]                               next
[17:37:41.932]                             if (!grepl(pattern, name)) 
[17:37:41.932]                               next
[17:37:41.932]                             invokeRestart(restart)
[17:37:41.932]                             muffled <- TRUE
[17:37:41.932]                             break
[17:37:41.932]                           }
[17:37:41.932]                         }
[17:37:41.932]                       }
[17:37:41.932]                       invisible(muffled)
[17:37:41.932]                     }
[17:37:41.932]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.932]                   }
[17:37:41.932]                 }
[17:37:41.932]                 else {
[17:37:41.932]                   if (TRUE) {
[17:37:41.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.932]                     {
[17:37:41.932]                       inherits <- base::inherits
[17:37:41.932]                       invokeRestart <- base::invokeRestart
[17:37:41.932]                       is.null <- base::is.null
[17:37:41.932]                       muffled <- FALSE
[17:37:41.932]                       if (inherits(cond, "message")) {
[17:37:41.932]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.932]                         if (muffled) 
[17:37:41.932]                           invokeRestart("muffleMessage")
[17:37:41.932]                       }
[17:37:41.932]                       else if (inherits(cond, "warning")) {
[17:37:41.932]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.932]                         if (muffled) 
[17:37:41.932]                           invokeRestart("muffleWarning")
[17:37:41.932]                       }
[17:37:41.932]                       else if (inherits(cond, "condition")) {
[17:37:41.932]                         if (!is.null(pattern)) {
[17:37:41.932]                           computeRestarts <- base::computeRestarts
[17:37:41.932]                           grepl <- base::grepl
[17:37:41.932]                           restarts <- computeRestarts(cond)
[17:37:41.932]                           for (restart in restarts) {
[17:37:41.932]                             name <- restart$name
[17:37:41.932]                             if (is.null(name)) 
[17:37:41.932]                               next
[17:37:41.932]                             if (!grepl(pattern, name)) 
[17:37:41.932]                               next
[17:37:41.932]                             invokeRestart(restart)
[17:37:41.932]                             muffled <- TRUE
[17:37:41.932]                             break
[17:37:41.932]                           }
[17:37:41.932]                         }
[17:37:41.932]                       }
[17:37:41.932]                       invisible(muffled)
[17:37:41.932]                     }
[17:37:41.932]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.932]                   }
[17:37:41.932]                 }
[17:37:41.932]             }
[17:37:41.932]         }))
[17:37:41.932]     }, error = function(ex) {
[17:37:41.932]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.932]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.932]                 ...future.rng), started = ...future.startTime, 
[17:37:41.932]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.932]             version = "1.8"), class = "FutureResult")
[17:37:41.932]     }, finally = {
[17:37:41.932]         if (!identical(...future.workdir, getwd())) 
[17:37:41.932]             setwd(...future.workdir)
[17:37:41.932]         {
[17:37:41.932]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.932]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.932]             }
[17:37:41.932]             base::options(...future.oldOptions)
[17:37:41.932]             if (.Platform$OS.type == "windows") {
[17:37:41.932]                 old_names <- names(...future.oldEnvVars)
[17:37:41.932]                 envs <- base::Sys.getenv()
[17:37:41.932]                 names <- names(envs)
[17:37:41.932]                 common <- intersect(names, old_names)
[17:37:41.932]                 added <- setdiff(names, old_names)
[17:37:41.932]                 removed <- setdiff(old_names, names)
[17:37:41.932]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.932]                   envs[common]]
[17:37:41.932]                 NAMES <- toupper(changed)
[17:37:41.932]                 args <- list()
[17:37:41.932]                 for (kk in seq_along(NAMES)) {
[17:37:41.932]                   name <- changed[[kk]]
[17:37:41.932]                   NAME <- NAMES[[kk]]
[17:37:41.932]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.932]                     next
[17:37:41.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.932]                 }
[17:37:41.932]                 NAMES <- toupper(added)
[17:37:41.932]                 for (kk in seq_along(NAMES)) {
[17:37:41.932]                   name <- added[[kk]]
[17:37:41.932]                   NAME <- NAMES[[kk]]
[17:37:41.932]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.932]                     next
[17:37:41.932]                   args[[name]] <- ""
[17:37:41.932]                 }
[17:37:41.932]                 NAMES <- toupper(removed)
[17:37:41.932]                 for (kk in seq_along(NAMES)) {
[17:37:41.932]                   name <- removed[[kk]]
[17:37:41.932]                   NAME <- NAMES[[kk]]
[17:37:41.932]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.932]                     next
[17:37:41.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.932]                 }
[17:37:41.932]                 if (length(args) > 0) 
[17:37:41.932]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.932]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.932]             }
[17:37:41.932]             else {
[17:37:41.932]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.932]             }
[17:37:41.932]             {
[17:37:41.932]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.932]                   0L) {
[17:37:41.932]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.932]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.932]                   base::options(opts)
[17:37:41.932]                 }
[17:37:41.932]                 {
[17:37:41.932]                   {
[17:37:41.932]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:41.932]                     NULL
[17:37:41.932]                   }
[17:37:41.932]                   options(future.plan = NULL)
[17:37:41.932]                   if (is.na(NA_character_)) 
[17:37:41.932]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.932]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.932]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.932]                     .init = FALSE)
[17:37:41.932]                 }
[17:37:41.932]             }
[17:37:41.932]         }
[17:37:41.932]     })
[17:37:41.932]     if (TRUE) {
[17:37:41.932]         base::sink(type = "output", split = FALSE)
[17:37:41.932]         if (TRUE) {
[17:37:41.932]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.932]         }
[17:37:41.932]         else {
[17:37:41.932]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.932]         }
[17:37:41.932]         base::close(...future.stdout)
[17:37:41.932]         ...future.stdout <- NULL
[17:37:41.932]     }
[17:37:41.932]     ...future.result$conditions <- ...future.conditions
[17:37:41.932]     ...future.result$finished <- base::Sys.time()
[17:37:41.932]     ...future.result
[17:37:41.932] }
[17:37:41.934] assign_globals() ...
[17:37:41.934] List of 5
[17:37:41.934]  $ ...future.FUN            :function (...)  
[17:37:41.934]  $ future.call.arguments    : list()
[17:37:41.934]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.934]  $ ...future.elements_ii    :List of 2
[17:37:41.934]   ..$ : int 0
[17:37:41.934]   ..$ : int 0
[17:37:41.934]  $ ...future.seeds_ii       :List of 2
[17:37:41.934]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:37:41.934]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:37:41.934]  $ ...future.globals.maxSize: NULL
[17:37:41.934]  - attr(*, "where")=List of 5
[17:37:41.934]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.934]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.934]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.934]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.934]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.934]  - attr(*, "resolved")= logi FALSE
[17:37:41.934]  - attr(*, "total_size")= num 616
[17:37:41.934]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.934]  - attr(*, "already-done")= logi TRUE
[17:37:41.942] - reassign environment for ‘...future.FUN’
[17:37:41.942] - copied ‘...future.FUN’ to environment
[17:37:41.942] - copied ‘future.call.arguments’ to environment
[17:37:41.942] - copied ‘...future.elements_ii’ to environment
[17:37:41.942] - copied ‘...future.seeds_ii’ to environment
[17:37:41.942] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.942] assign_globals() ... done
[17:37:41.943] requestCore(): workers = 2
[17:37:41.945] MulticoreFuture started
[17:37:41.945] - Launch lazy future ... done
[17:37:41.945] run() for ‘MulticoreFuture’ ... done
[17:37:41.946] Created future:
[17:37:41.946] plan(): Setting new future strategy stack:
[17:37:41.946] List of future strategies:
[17:37:41.946] 1. sequential:
[17:37:41.946]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.946]    - tweaked: FALSE
[17:37:41.946]    - call: NULL
[17:37:41.947] plan(): nbrOfWorkers() = 1
[17:37:41.949] plan(): Setting new future strategy stack:
[17:37:41.949] List of future strategies:
[17:37:41.949] 1. multicore:
[17:37:41.949]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:41.949]    - tweaked: FALSE
[17:37:41.949]    - call: plan(strategy)
[17:37:41.955] plan(): nbrOfWorkers() = 2
[17:37:41.946] MulticoreFuture:
[17:37:41.946] Label: ‘future_replicate-1’
[17:37:41.946] Expression:
[17:37:41.946] {
[17:37:41.946]     do.call(function(...) {
[17:37:41.946]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.946]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.946]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.946]             on.exit(options(oopts), add = TRUE)
[17:37:41.946]         }
[17:37:41.946]         {
[17:37:41.946]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.946]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.946]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.946]                   envir = globalenv(), inherits = FALSE)
[17:37:41.946]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.946]             })
[17:37:41.946]         }
[17:37:41.946]     }, args = future.call.arguments)
[17:37:41.946] }
[17:37:41.946] Lazy evaluation: FALSE
[17:37:41.946] Asynchronous evaluation: TRUE
[17:37:41.946] Local evaluation: TRUE
[17:37:41.946] Environment: R_GlobalEnv
[17:37:41.946] Capture standard output: TRUE
[17:37:41.946] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.946] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.946] Packages: <none>
[17:37:41.946] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.946] Resolved: TRUE
[17:37:41.946] Value: <not collected>
[17:37:41.946] Conditions captured: <none>
[17:37:41.946] Early signaling: FALSE
[17:37:41.946] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.946] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.956] Chunk #1 of 2 ... DONE
[17:37:41.956] Chunk #2 of 2 ...
[17:37:41.956]  - Finding globals in 'X' for chunk #2 ...
[17:37:41.956] getGlobalsAndPackages() ...
[17:37:41.957] Searching for globals...
[17:37:41.957] 
[17:37:41.957] Searching for globals ... DONE
[17:37:41.957] - globals: [0] <none>
[17:37:41.957] getGlobalsAndPackages() ... DONE
[17:37:41.958]    + additional globals found: [n=0] 
[17:37:41.958]    + additional namespaces needed: [n=0] 
[17:37:41.958]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:41.958]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:41.958]  - seeds: [3] <seeds>
[17:37:41.958]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.958] getGlobalsAndPackages() ...
[17:37:41.959] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.959] Resolving globals: FALSE
[17:37:41.959] Tweak future expression to call with '...' arguments ...
[17:37:41.959] {
[17:37:41.959]     do.call(function(...) {
[17:37:41.959]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.959]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.959]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.959]             on.exit(options(oopts), add = TRUE)
[17:37:41.959]         }
[17:37:41.959]         {
[17:37:41.959]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.959]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.959]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.959]                   envir = globalenv(), inherits = FALSE)
[17:37:41.959]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.959]             })
[17:37:41.959]         }
[17:37:41.959]     }, args = future.call.arguments)
[17:37:41.959] }
[17:37:41.960] Tweak future expression to call with '...' arguments ... DONE
[17:37:41.960] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:41.960] 
[17:37:41.961] getGlobalsAndPackages() ... DONE
[17:37:41.961] run() for ‘Future’ ...
[17:37:41.961] - state: ‘created’
[17:37:41.961] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:41.966] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:41.966] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:41.966]   - Field: ‘label’
[17:37:41.967]   - Field: ‘local’
[17:37:41.967]   - Field: ‘owner’
[17:37:41.967]   - Field: ‘envir’
[17:37:41.967]   - Field: ‘workers’
[17:37:41.967]   - Field: ‘packages’
[17:37:41.967]   - Field: ‘gc’
[17:37:41.967]   - Field: ‘job’
[17:37:41.968]   - Field: ‘conditions’
[17:37:41.968]   - Field: ‘expr’
[17:37:41.968]   - Field: ‘uuid’
[17:37:41.968]   - Field: ‘seed’
[17:37:41.968]   - Field: ‘version’
[17:37:41.968]   - Field: ‘result’
[17:37:41.968]   - Field: ‘asynchronous’
[17:37:41.969]   - Field: ‘calls’
[17:37:41.969]   - Field: ‘globals’
[17:37:41.969]   - Field: ‘stdout’
[17:37:41.969]   - Field: ‘earlySignal’
[17:37:41.969]   - Field: ‘lazy’
[17:37:41.969]   - Field: ‘state’
[17:37:41.969] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:41.970] - Launch lazy future ...
[17:37:41.970] Packages needed by the future expression (n = 0): <none>
[17:37:41.970] Packages needed by future strategies (n = 0): <none>
[17:37:41.971] {
[17:37:41.971]     {
[17:37:41.971]         {
[17:37:41.971]             ...future.startTime <- base::Sys.time()
[17:37:41.971]             {
[17:37:41.971]                 {
[17:37:41.971]                   {
[17:37:41.971]                     {
[17:37:41.971]                       base::local({
[17:37:41.971]                         has_future <- base::requireNamespace("future", 
[17:37:41.971]                           quietly = TRUE)
[17:37:41.971]                         if (has_future) {
[17:37:41.971]                           ns <- base::getNamespace("future")
[17:37:41.971]                           version <- ns[[".package"]][["version"]]
[17:37:41.971]                           if (is.null(version)) 
[17:37:41.971]                             version <- utils::packageVersion("future")
[17:37:41.971]                         }
[17:37:41.971]                         else {
[17:37:41.971]                           version <- NULL
[17:37:41.971]                         }
[17:37:41.971]                         if (!has_future || version < "1.8.0") {
[17:37:41.971]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:41.971]                             "", base::R.version$version.string), 
[17:37:41.971]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:41.971]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:41.971]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:41.971]                               "release", "version")], collapse = " "), 
[17:37:41.971]                             hostname = base::Sys.info()[["nodename"]])
[17:37:41.971]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:41.971]                             info)
[17:37:41.971]                           info <- base::paste(info, collapse = "; ")
[17:37:41.971]                           if (!has_future) {
[17:37:41.971]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:41.971]                               info)
[17:37:41.971]                           }
[17:37:41.971]                           else {
[17:37:41.971]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:41.971]                               info, version)
[17:37:41.971]                           }
[17:37:41.971]                           base::stop(msg)
[17:37:41.971]                         }
[17:37:41.971]                       })
[17:37:41.971]                     }
[17:37:41.971]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:41.971]                     base::options(mc.cores = 1L)
[17:37:41.971]                   }
[17:37:41.971]                   ...future.strategy.old <- future::plan("list")
[17:37:41.971]                   options(future.plan = NULL)
[17:37:41.971]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.971]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:41.971]                 }
[17:37:41.971]                 ...future.workdir <- getwd()
[17:37:41.971]             }
[17:37:41.971]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:41.971]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:41.971]         }
[17:37:41.971]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:41.971]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:41.971]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:41.971]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:41.971]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:41.971]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:41.971]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:41.971]             base::names(...future.oldOptions))
[17:37:41.971]     }
[17:37:41.971]     if (FALSE) {
[17:37:41.971]     }
[17:37:41.971]     else {
[17:37:41.971]         if (TRUE) {
[17:37:41.971]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:41.971]                 open = "w")
[17:37:41.971]         }
[17:37:41.971]         else {
[17:37:41.971]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:41.971]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:41.971]         }
[17:37:41.971]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:41.971]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:41.971]             base::sink(type = "output", split = FALSE)
[17:37:41.971]             base::close(...future.stdout)
[17:37:41.971]         }, add = TRUE)
[17:37:41.971]     }
[17:37:41.971]     ...future.frame <- base::sys.nframe()
[17:37:41.971]     ...future.conditions <- base::list()
[17:37:41.971]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:41.971]     if (FALSE) {
[17:37:41.971]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:41.971]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:41.971]     }
[17:37:41.971]     ...future.result <- base::tryCatch({
[17:37:41.971]         base::withCallingHandlers({
[17:37:41.971]             ...future.value <- base::withVisible(base::local({
[17:37:41.971]                 withCallingHandlers({
[17:37:41.971]                   {
[17:37:41.971]                     do.call(function(...) {
[17:37:41.971]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.971]                       if (!identical(...future.globals.maxSize.org, 
[17:37:41.971]                         ...future.globals.maxSize)) {
[17:37:41.971]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.971]                         on.exit(options(oopts), add = TRUE)
[17:37:41.971]                       }
[17:37:41.971]                       {
[17:37:41.971]                         lapply(seq_along(...future.elements_ii), 
[17:37:41.971]                           FUN = function(jj) {
[17:37:41.971]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.971]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.971]                               envir = globalenv(), inherits = FALSE)
[17:37:41.971]                             ...future.FUN(...future.X_jj, ...)
[17:37:41.971]                           })
[17:37:41.971]                       }
[17:37:41.971]                     }, args = future.call.arguments)
[17:37:41.971]                   }
[17:37:41.971]                 }, immediateCondition = function(cond) {
[17:37:41.971]                   save_rds <- function (object, pathname, ...) 
[17:37:41.971]                   {
[17:37:41.971]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:41.971]                     if (file_test("-f", pathname_tmp)) {
[17:37:41.971]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.971]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:41.971]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.971]                         fi_tmp[["mtime"]])
[17:37:41.971]                     }
[17:37:41.971]                     tryCatch({
[17:37:41.971]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:41.971]                     }, error = function(ex) {
[17:37:41.971]                       msg <- conditionMessage(ex)
[17:37:41.971]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.971]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:41.971]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.971]                         fi_tmp[["mtime"]], msg)
[17:37:41.971]                       ex$message <- msg
[17:37:41.971]                       stop(ex)
[17:37:41.971]                     })
[17:37:41.971]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:41.971]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:41.971]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:41.971]                       fi_tmp <- file.info(pathname_tmp)
[17:37:41.971]                       fi <- file.info(pathname)
[17:37:41.971]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:41.971]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:41.971]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:41.971]                         fi[["size"]], fi[["mtime"]])
[17:37:41.971]                       stop(msg)
[17:37:41.971]                     }
[17:37:41.971]                     invisible(pathname)
[17:37:41.971]                   }
[17:37:41.971]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:41.971]                     rootPath = tempdir()) 
[17:37:41.971]                   {
[17:37:41.971]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:41.971]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:41.971]                       tmpdir = path, fileext = ".rds")
[17:37:41.971]                     save_rds(obj, file)
[17:37:41.971]                   }
[17:37:41.971]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:41.971]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.971]                   {
[17:37:41.971]                     inherits <- base::inherits
[17:37:41.971]                     invokeRestart <- base::invokeRestart
[17:37:41.971]                     is.null <- base::is.null
[17:37:41.971]                     muffled <- FALSE
[17:37:41.971]                     if (inherits(cond, "message")) {
[17:37:41.971]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:41.971]                       if (muffled) 
[17:37:41.971]                         invokeRestart("muffleMessage")
[17:37:41.971]                     }
[17:37:41.971]                     else if (inherits(cond, "warning")) {
[17:37:41.971]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:41.971]                       if (muffled) 
[17:37:41.971]                         invokeRestart("muffleWarning")
[17:37:41.971]                     }
[17:37:41.971]                     else if (inherits(cond, "condition")) {
[17:37:41.971]                       if (!is.null(pattern)) {
[17:37:41.971]                         computeRestarts <- base::computeRestarts
[17:37:41.971]                         grepl <- base::grepl
[17:37:41.971]                         restarts <- computeRestarts(cond)
[17:37:41.971]                         for (restart in restarts) {
[17:37:41.971]                           name <- restart$name
[17:37:41.971]                           if (is.null(name)) 
[17:37:41.971]                             next
[17:37:41.971]                           if (!grepl(pattern, name)) 
[17:37:41.971]                             next
[17:37:41.971]                           invokeRestart(restart)
[17:37:41.971]                           muffled <- TRUE
[17:37:41.971]                           break
[17:37:41.971]                         }
[17:37:41.971]                       }
[17:37:41.971]                     }
[17:37:41.971]                     invisible(muffled)
[17:37:41.971]                   }
[17:37:41.971]                   muffleCondition(cond)
[17:37:41.971]                 })
[17:37:41.971]             }))
[17:37:41.971]             future::FutureResult(value = ...future.value$value, 
[17:37:41.971]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.971]                   ...future.rng), globalenv = if (FALSE) 
[17:37:41.971]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:41.971]                     ...future.globalenv.names))
[17:37:41.971]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:41.971]         }, condition = base::local({
[17:37:41.971]             c <- base::c
[17:37:41.971]             inherits <- base::inherits
[17:37:41.971]             invokeRestart <- base::invokeRestart
[17:37:41.971]             length <- base::length
[17:37:41.971]             list <- base::list
[17:37:41.971]             seq.int <- base::seq.int
[17:37:41.971]             signalCondition <- base::signalCondition
[17:37:41.971]             sys.calls <- base::sys.calls
[17:37:41.971]             `[[` <- base::`[[`
[17:37:41.971]             `+` <- base::`+`
[17:37:41.971]             `<<-` <- base::`<<-`
[17:37:41.971]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:41.971]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:41.971]                   3L)]
[17:37:41.971]             }
[17:37:41.971]             function(cond) {
[17:37:41.971]                 is_error <- inherits(cond, "error")
[17:37:41.971]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:41.971]                   NULL)
[17:37:41.971]                 if (is_error) {
[17:37:41.971]                   sessionInformation <- function() {
[17:37:41.971]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:41.971]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:41.971]                       search = base::search(), system = base::Sys.info())
[17:37:41.971]                   }
[17:37:41.971]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.971]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:41.971]                     cond$call), session = sessionInformation(), 
[17:37:41.971]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:41.971]                   signalCondition(cond)
[17:37:41.971]                 }
[17:37:41.971]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:41.971]                 "immediateCondition"))) {
[17:37:41.971]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:41.971]                   ...future.conditions[[length(...future.conditions) + 
[17:37:41.971]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:41.971]                   if (TRUE && !signal) {
[17:37:41.971]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.971]                     {
[17:37:41.971]                       inherits <- base::inherits
[17:37:41.971]                       invokeRestart <- base::invokeRestart
[17:37:41.971]                       is.null <- base::is.null
[17:37:41.971]                       muffled <- FALSE
[17:37:41.971]                       if (inherits(cond, "message")) {
[17:37:41.971]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.971]                         if (muffled) 
[17:37:41.971]                           invokeRestart("muffleMessage")
[17:37:41.971]                       }
[17:37:41.971]                       else if (inherits(cond, "warning")) {
[17:37:41.971]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.971]                         if (muffled) 
[17:37:41.971]                           invokeRestart("muffleWarning")
[17:37:41.971]                       }
[17:37:41.971]                       else if (inherits(cond, "condition")) {
[17:37:41.971]                         if (!is.null(pattern)) {
[17:37:41.971]                           computeRestarts <- base::computeRestarts
[17:37:41.971]                           grepl <- base::grepl
[17:37:41.971]                           restarts <- computeRestarts(cond)
[17:37:41.971]                           for (restart in restarts) {
[17:37:41.971]                             name <- restart$name
[17:37:41.971]                             if (is.null(name)) 
[17:37:41.971]                               next
[17:37:41.971]                             if (!grepl(pattern, name)) 
[17:37:41.971]                               next
[17:37:41.971]                             invokeRestart(restart)
[17:37:41.971]                             muffled <- TRUE
[17:37:41.971]                             break
[17:37:41.971]                           }
[17:37:41.971]                         }
[17:37:41.971]                       }
[17:37:41.971]                       invisible(muffled)
[17:37:41.971]                     }
[17:37:41.971]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.971]                   }
[17:37:41.971]                 }
[17:37:41.971]                 else {
[17:37:41.971]                   if (TRUE) {
[17:37:41.971]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:41.971]                     {
[17:37:41.971]                       inherits <- base::inherits
[17:37:41.971]                       invokeRestart <- base::invokeRestart
[17:37:41.971]                       is.null <- base::is.null
[17:37:41.971]                       muffled <- FALSE
[17:37:41.971]                       if (inherits(cond, "message")) {
[17:37:41.971]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:41.971]                         if (muffled) 
[17:37:41.971]                           invokeRestart("muffleMessage")
[17:37:41.971]                       }
[17:37:41.971]                       else if (inherits(cond, "warning")) {
[17:37:41.971]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:41.971]                         if (muffled) 
[17:37:41.971]                           invokeRestart("muffleWarning")
[17:37:41.971]                       }
[17:37:41.971]                       else if (inherits(cond, "condition")) {
[17:37:41.971]                         if (!is.null(pattern)) {
[17:37:41.971]                           computeRestarts <- base::computeRestarts
[17:37:41.971]                           grepl <- base::grepl
[17:37:41.971]                           restarts <- computeRestarts(cond)
[17:37:41.971]                           for (restart in restarts) {
[17:37:41.971]                             name <- restart$name
[17:37:41.971]                             if (is.null(name)) 
[17:37:41.971]                               next
[17:37:41.971]                             if (!grepl(pattern, name)) 
[17:37:41.971]                               next
[17:37:41.971]                             invokeRestart(restart)
[17:37:41.971]                             muffled <- TRUE
[17:37:41.971]                             break
[17:37:41.971]                           }
[17:37:41.971]                         }
[17:37:41.971]                       }
[17:37:41.971]                       invisible(muffled)
[17:37:41.971]                     }
[17:37:41.971]                     muffleCondition(cond, pattern = "^muffle")
[17:37:41.971]                   }
[17:37:41.971]                 }
[17:37:41.971]             }
[17:37:41.971]         }))
[17:37:41.971]     }, error = function(ex) {
[17:37:41.971]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:41.971]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:41.971]                 ...future.rng), started = ...future.startTime, 
[17:37:41.971]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:41.971]             version = "1.8"), class = "FutureResult")
[17:37:41.971]     }, finally = {
[17:37:41.971]         if (!identical(...future.workdir, getwd())) 
[17:37:41.971]             setwd(...future.workdir)
[17:37:41.971]         {
[17:37:41.971]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:41.971]                 ...future.oldOptions$nwarnings <- NULL
[17:37:41.971]             }
[17:37:41.971]             base::options(...future.oldOptions)
[17:37:41.971]             if (.Platform$OS.type == "windows") {
[17:37:41.971]                 old_names <- names(...future.oldEnvVars)
[17:37:41.971]                 envs <- base::Sys.getenv()
[17:37:41.971]                 names <- names(envs)
[17:37:41.971]                 common <- intersect(names, old_names)
[17:37:41.971]                 added <- setdiff(names, old_names)
[17:37:41.971]                 removed <- setdiff(old_names, names)
[17:37:41.971]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:41.971]                   envs[common]]
[17:37:41.971]                 NAMES <- toupper(changed)
[17:37:41.971]                 args <- list()
[17:37:41.971]                 for (kk in seq_along(NAMES)) {
[17:37:41.971]                   name <- changed[[kk]]
[17:37:41.971]                   NAME <- NAMES[[kk]]
[17:37:41.971]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.971]                     next
[17:37:41.971]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.971]                 }
[17:37:41.971]                 NAMES <- toupper(added)
[17:37:41.971]                 for (kk in seq_along(NAMES)) {
[17:37:41.971]                   name <- added[[kk]]
[17:37:41.971]                   NAME <- NAMES[[kk]]
[17:37:41.971]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.971]                     next
[17:37:41.971]                   args[[name]] <- ""
[17:37:41.971]                 }
[17:37:41.971]                 NAMES <- toupper(removed)
[17:37:41.971]                 for (kk in seq_along(NAMES)) {
[17:37:41.971]                   name <- removed[[kk]]
[17:37:41.971]                   NAME <- NAMES[[kk]]
[17:37:41.971]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:41.971]                     next
[17:37:41.971]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:41.971]                 }
[17:37:41.971]                 if (length(args) > 0) 
[17:37:41.971]                   base::do.call(base::Sys.setenv, args = args)
[17:37:41.971]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:41.971]             }
[17:37:41.971]             else {
[17:37:41.971]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:41.971]             }
[17:37:41.971]             {
[17:37:41.971]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:41.971]                   0L) {
[17:37:41.971]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:41.971]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:41.971]                   base::options(opts)
[17:37:41.971]                 }
[17:37:41.971]                 {
[17:37:41.971]                   {
[17:37:41.971]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:41.971]                     NULL
[17:37:41.971]                   }
[17:37:41.971]                   options(future.plan = NULL)
[17:37:41.971]                   if (is.na(NA_character_)) 
[17:37:41.971]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:41.971]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:41.971]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:41.971]                     .init = FALSE)
[17:37:41.971]                 }
[17:37:41.971]             }
[17:37:41.971]         }
[17:37:41.971]     })
[17:37:41.971]     if (TRUE) {
[17:37:41.971]         base::sink(type = "output", split = FALSE)
[17:37:41.971]         if (TRUE) {
[17:37:41.971]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:41.971]         }
[17:37:41.971]         else {
[17:37:41.971]             ...future.result["stdout"] <- base::list(NULL)
[17:37:41.971]         }
[17:37:41.971]         base::close(...future.stdout)
[17:37:41.971]         ...future.stdout <- NULL
[17:37:41.971]     }
[17:37:41.971]     ...future.result$conditions <- ...future.conditions
[17:37:41.971]     ...future.result$finished <- base::Sys.time()
[17:37:41.971]     ...future.result
[17:37:41.971] }
[17:37:41.974] assign_globals() ...
[17:37:41.975] List of 5
[17:37:41.975]  $ ...future.FUN            :function (...)  
[17:37:41.975]  $ future.call.arguments    : list()
[17:37:41.975]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:41.975]  $ ...future.elements_ii    :List of 3
[17:37:41.975]   ..$ : int 0
[17:37:41.975]   ..$ : int 0
[17:37:41.975]   ..$ : int 0
[17:37:41.975]  $ ...future.seeds_ii       :List of 3
[17:37:41.975]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:37:41.975]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:37:41.975]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:37:41.975]  $ ...future.globals.maxSize: NULL
[17:37:41.975]  - attr(*, "where")=List of 5
[17:37:41.975]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:41.975]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:41.975]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:41.975]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:41.975]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:41.975]  - attr(*, "resolved")= logi FALSE
[17:37:41.975]  - attr(*, "total_size")= num 616
[17:37:41.975]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:41.975]  - attr(*, "already-done")= logi TRUE
[17:37:41.983] - reassign environment for ‘...future.FUN’
[17:37:41.983] - copied ‘...future.FUN’ to environment
[17:37:41.984] - copied ‘future.call.arguments’ to environment
[17:37:41.984] - copied ‘...future.elements_ii’ to environment
[17:37:41.984] - copied ‘...future.seeds_ii’ to environment
[17:37:41.984] - copied ‘...future.globals.maxSize’ to environment
[17:37:41.984] assign_globals() ... done
[17:37:41.984] requestCore(): workers = 2
[17:37:41.987] MulticoreFuture started
[17:37:41.987] - Launch lazy future ... done
[17:37:41.987] run() for ‘MulticoreFuture’ ... done
[17:37:41.987] Created future:
[17:37:41.988] plan(): Setting new future strategy stack:
[17:37:41.988] List of future strategies:
[17:37:41.988] 1. sequential:
[17:37:41.988]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:41.988]    - tweaked: FALSE
[17:37:41.988]    - call: NULL
[17:37:41.989] plan(): nbrOfWorkers() = 1
[17:37:41.994] plan(): Setting new future strategy stack:
[17:37:41.994] List of future strategies:
[17:37:41.994] 1. multicore:
[17:37:41.994]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:41.994]    - tweaked: FALSE
[17:37:41.994]    - call: plan(strategy)
[17:37:41.999] plan(): nbrOfWorkers() = 2
[17:37:41.987] MulticoreFuture:
[17:37:41.987] Label: ‘future_replicate-2’
[17:37:41.987] Expression:
[17:37:41.987] {
[17:37:41.987]     do.call(function(...) {
[17:37:41.987]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:41.987]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:41.987]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:41.987]             on.exit(options(oopts), add = TRUE)
[17:37:41.987]         }
[17:37:41.987]         {
[17:37:41.987]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:41.987]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:41.987]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:41.987]                   envir = globalenv(), inherits = FALSE)
[17:37:41.987]                 ...future.FUN(...future.X_jj, ...)
[17:37:41.987]             })
[17:37:41.987]         }
[17:37:41.987]     }, args = future.call.arguments)
[17:37:41.987] }
[17:37:41.987] Lazy evaluation: FALSE
[17:37:41.987] Asynchronous evaluation: TRUE
[17:37:41.987] Local evaluation: TRUE
[17:37:41.987] Environment: R_GlobalEnv
[17:37:41.987] Capture standard output: TRUE
[17:37:41.987] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:41.987] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:41.987] Packages: <none>
[17:37:41.987] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:41.987] Resolved: TRUE
[17:37:41.987] Value: <not collected>
[17:37:41.987] Conditions captured: <none>
[17:37:41.987] Early signaling: FALSE
[17:37:41.987] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:41.987] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.000] Chunk #2 of 2 ... DONE
[17:37:42.001] Launching 2 futures (chunks) ... DONE
[17:37:42.001] Resolving 2 futures (chunks) ...
[17:37:42.001] resolve() on list ...
[17:37:42.001]  recursive: 0
[17:37:42.001]  length: 2
[17:37:42.002] 
[17:37:42.002] Future #1
[17:37:42.002] result() for MulticoreFuture ...
[17:37:42.003] result() for MulticoreFuture ...
[17:37:42.004] result() for MulticoreFuture ... done
[17:37:42.004] result() for MulticoreFuture ... done
[17:37:42.004] result() for MulticoreFuture ...
[17:37:42.004] result() for MulticoreFuture ... done
[17:37:42.004] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:37:42.005] - nx: 2
[17:37:42.005] - relay: TRUE
[17:37:42.005] - stdout: TRUE
[17:37:42.005] - signal: TRUE
[17:37:42.005] - resignal: FALSE
[17:37:42.005] - force: TRUE
[17:37:42.005] - relayed: [n=2] FALSE, FALSE
[17:37:42.006] - queued futures: [n=2] FALSE, FALSE
[17:37:42.006]  - until=1
[17:37:42.006]  - relaying element #1
[17:37:42.006] result() for MulticoreFuture ...
[17:37:42.006] result() for MulticoreFuture ... done
[17:37:42.006] result() for MulticoreFuture ...
[17:37:42.007] result() for MulticoreFuture ... done
[17:37:42.007] result() for MulticoreFuture ...
[17:37:42.007] result() for MulticoreFuture ... done
[17:37:42.007] result() for MulticoreFuture ...
[17:37:42.007] result() for MulticoreFuture ... done
[17:37:42.007] - relayed: [n=2] TRUE, FALSE
[17:37:42.008] - queued futures: [n=2] TRUE, FALSE
[17:37:42.008] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:37:42.008]  length: 1 (resolved future 1)
[17:37:42.008] Future #2
[17:37:42.009] result() for MulticoreFuture ...
[17:37:42.009] result() for MulticoreFuture ...
[17:37:42.009] result() for MulticoreFuture ... done
[17:37:42.010] result() for MulticoreFuture ... done
[17:37:42.010] result() for MulticoreFuture ...
[17:37:42.010] result() for MulticoreFuture ... done
[17:37:42.010] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:37:42.010] - nx: 2
[17:37:42.010] - relay: TRUE
[17:37:42.010] - stdout: TRUE
[17:37:42.010] - signal: TRUE
[17:37:42.011] - resignal: FALSE
[17:37:42.011] - force: TRUE
[17:37:42.011] - relayed: [n=2] TRUE, FALSE
[17:37:42.011] - queued futures: [n=2] TRUE, FALSE
[17:37:42.011]  - until=2
[17:37:42.011]  - relaying element #2
[17:37:42.011] result() for MulticoreFuture ...
[17:37:42.011] result() for MulticoreFuture ... done
[17:37:42.012] result() for MulticoreFuture ...
[17:37:42.012] result() for MulticoreFuture ... done
[17:37:42.012] result() for MulticoreFuture ...
[17:37:42.012] result() for MulticoreFuture ... done
[17:37:42.012] result() for MulticoreFuture ...
[17:37:42.012] result() for MulticoreFuture ... done
[17:37:42.012] - relayed: [n=2] TRUE, TRUE
[17:37:42.012] - queued futures: [n=2] TRUE, TRUE
[17:37:42.013] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:37:42.013]  length: 0 (resolved future 2)
[17:37:42.013] Relaying remaining futures
[17:37:42.013] signalConditionsASAP(NULL, pos=0) ...
[17:37:42.013] - nx: 2
[17:37:42.013] - relay: TRUE
[17:37:42.013] - stdout: TRUE
[17:37:42.013] - signal: TRUE
[17:37:42.013] - resignal: FALSE
[17:37:42.014] - force: TRUE
[17:37:42.014] - relayed: [n=2] TRUE, TRUE
[17:37:42.014] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:42.014] - relayed: [n=2] TRUE, TRUE
[17:37:42.014] - queued futures: [n=2] TRUE, TRUE
[17:37:42.014] signalConditionsASAP(NULL, pos=0) ... done
[17:37:42.014] resolve() on list ... DONE
[17:37:42.014] result() for MulticoreFuture ...
[17:37:42.014] result() for MulticoreFuture ... done
[17:37:42.015] result() for MulticoreFuture ...
[17:37:42.015] result() for MulticoreFuture ... done
[17:37:42.015] result() for MulticoreFuture ...
[17:37:42.015] result() for MulticoreFuture ... done
[17:37:42.015] result() for MulticoreFuture ...
[17:37:42.015] result() for MulticoreFuture ... done
[17:37:42.015]  - Number of value chunks collected: 2
[17:37:42.015] Resolving 2 futures (chunks) ... DONE
[17:37:42.016] Reducing values from 2 chunks ...
[17:37:42.016]  - Number of values collected after concatenation: 5
[17:37:42.016]  - Number of values expected: 5
[17:37:42.016] Reducing values from 2 chunks ... DONE
[17:37:42.016] future_lapply() ... DONE
[17:37:42.016] future_lapply() ...
[17:37:42.017] Generating random seeds ...
[17:37:42.017] Generating random seed streams for 5 elements ...
[17:37:42.017] Generating random seed streams for 5 elements ... DONE
[17:37:42.017] Generating random seeds ... DONE
[17:37:42.017] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:42.022] Number of chunks: 2
[17:37:42.022] getGlobalsAndPackagesXApply() ...
[17:37:42.023]  - future.globals: TRUE
[17:37:42.023] getGlobalsAndPackages() ...
[17:37:42.023] Searching for globals...
[17:37:42.024] - globals found: [2] ‘FUN’, ‘sample’
[17:37:42.024] Searching for globals ... DONE
[17:37:42.024] Resolving globals: FALSE
[17:37:42.025] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:42.025] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:42.025] - globals: [1] ‘FUN’
[17:37:42.025] 
[17:37:42.026] getGlobalsAndPackages() ... DONE
[17:37:42.026]  - globals found/used: [n=1] ‘FUN’
[17:37:42.026]  - needed namespaces: [n=0] 
[17:37:42.026] Finding globals ... DONE
[17:37:42.026]  - use_args: TRUE
[17:37:42.026]  - Getting '...' globals ...
[17:37:42.026] resolve() on list ...
[17:37:42.027]  recursive: 0
[17:37:42.027]  length: 1
[17:37:42.027]  elements: ‘...’
[17:37:42.027]  length: 0 (resolved future 1)
[17:37:42.027] resolve() on list ... DONE
[17:37:42.027]    - '...' content: [n=0] 
[17:37:42.027] List of 1
[17:37:42.027]  $ ...: list()
[17:37:42.027]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.027]  - attr(*, "where")=List of 1
[17:37:42.027]   ..$ ...:<environment: 0x5640c057a810> 
[17:37:42.027]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.027]  - attr(*, "resolved")= logi TRUE
[17:37:42.027]  - attr(*, "total_size")= num NA
[17:37:42.030]  - Getting '...' globals ... DONE
[17:37:42.030] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:42.031] List of 2
[17:37:42.031]  $ ...future.FUN:function (...)  
[17:37:42.031]  $ ...          : list()
[17:37:42.031]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.031]  - attr(*, "where")=List of 2
[17:37:42.031]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:42.031]   ..$ ...          :<environment: 0x5640c057a810> 
[17:37:42.031]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.031]  - attr(*, "resolved")= logi FALSE
[17:37:42.031]  - attr(*, "total_size")= num 616
[17:37:42.035] Packages to be attached in all futures: [n=0] 
[17:37:42.035] getGlobalsAndPackagesXApply() ... DONE
[17:37:42.036] Number of futures (= number of chunks): 2
[17:37:42.036] Launching 2 futures (chunks) ...
[17:37:42.036] Chunk #1 of 2 ...
[17:37:42.036]  - Finding globals in 'X' for chunk #1 ...
[17:37:42.036] getGlobalsAndPackages() ...
[17:37:42.036] Searching for globals...
[17:37:42.036] 
[17:37:42.036] Searching for globals ... DONE
[17:37:42.037] - globals: [0] <none>
[17:37:42.037] getGlobalsAndPackages() ... DONE
[17:37:42.037]    + additional globals found: [n=0] 
[17:37:42.037]    + additional namespaces needed: [n=0] 
[17:37:42.037]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:42.037]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.037]  - seeds: [2] <seeds>
[17:37:42.037]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.037] getGlobalsAndPackages() ...
[17:37:42.037] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.038] Resolving globals: FALSE
[17:37:42.038] Tweak future expression to call with '...' arguments ...
[17:37:42.038] {
[17:37:42.038]     do.call(function(...) {
[17:37:42.038]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.038]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.038]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.038]             on.exit(options(oopts), add = TRUE)
[17:37:42.038]         }
[17:37:42.038]         {
[17:37:42.038]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.038]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.038]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.038]                   envir = globalenv(), inherits = FALSE)
[17:37:42.038]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.038]             })
[17:37:42.038]         }
[17:37:42.038]     }, args = future.call.arguments)
[17:37:42.038] }
[17:37:42.038] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.038] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.038] 
[17:37:42.039] getGlobalsAndPackages() ... DONE
[17:37:42.039] run() for ‘Future’ ...
[17:37:42.039] - state: ‘created’
[17:37:42.039] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.043] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.043] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.043]   - Field: ‘label’
[17:37:42.043]   - Field: ‘local’
[17:37:42.043]   - Field: ‘owner’
[17:37:42.043]   - Field: ‘envir’
[17:37:42.043]   - Field: ‘workers’
[17:37:42.043]   - Field: ‘packages’
[17:37:42.044]   - Field: ‘gc’
[17:37:42.044]   - Field: ‘job’
[17:37:42.044]   - Field: ‘conditions’
[17:37:42.044]   - Field: ‘expr’
[17:37:42.044]   - Field: ‘uuid’
[17:37:42.044]   - Field: ‘seed’
[17:37:42.044]   - Field: ‘version’
[17:37:42.044]   - Field: ‘result’
[17:37:42.044]   - Field: ‘asynchronous’
[17:37:42.044]   - Field: ‘calls’
[17:37:42.045]   - Field: ‘globals’
[17:37:42.045]   - Field: ‘stdout’
[17:37:42.045]   - Field: ‘earlySignal’
[17:37:42.045]   - Field: ‘lazy’
[17:37:42.045]   - Field: ‘state’
[17:37:42.045] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.045] - Launch lazy future ...
[17:37:42.045] Packages needed by the future expression (n = 0): <none>
[17:37:42.045] Packages needed by future strategies (n = 0): <none>
[17:37:42.046] {
[17:37:42.046]     {
[17:37:42.046]         {
[17:37:42.046]             ...future.startTime <- base::Sys.time()
[17:37:42.046]             {
[17:37:42.046]                 {
[17:37:42.046]                   {
[17:37:42.046]                     {
[17:37:42.046]                       base::local({
[17:37:42.046]                         has_future <- base::requireNamespace("future", 
[17:37:42.046]                           quietly = TRUE)
[17:37:42.046]                         if (has_future) {
[17:37:42.046]                           ns <- base::getNamespace("future")
[17:37:42.046]                           version <- ns[[".package"]][["version"]]
[17:37:42.046]                           if (is.null(version)) 
[17:37:42.046]                             version <- utils::packageVersion("future")
[17:37:42.046]                         }
[17:37:42.046]                         else {
[17:37:42.046]                           version <- NULL
[17:37:42.046]                         }
[17:37:42.046]                         if (!has_future || version < "1.8.0") {
[17:37:42.046]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.046]                             "", base::R.version$version.string), 
[17:37:42.046]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.046]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.046]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.046]                               "release", "version")], collapse = " "), 
[17:37:42.046]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.046]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.046]                             info)
[17:37:42.046]                           info <- base::paste(info, collapse = "; ")
[17:37:42.046]                           if (!has_future) {
[17:37:42.046]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.046]                               info)
[17:37:42.046]                           }
[17:37:42.046]                           else {
[17:37:42.046]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.046]                               info, version)
[17:37:42.046]                           }
[17:37:42.046]                           base::stop(msg)
[17:37:42.046]                         }
[17:37:42.046]                       })
[17:37:42.046]                     }
[17:37:42.046]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.046]                     base::options(mc.cores = 1L)
[17:37:42.046]                   }
[17:37:42.046]                   ...future.strategy.old <- future::plan("list")
[17:37:42.046]                   options(future.plan = NULL)
[17:37:42.046]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.046]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.046]                 }
[17:37:42.046]                 ...future.workdir <- getwd()
[17:37:42.046]             }
[17:37:42.046]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.046]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.046]         }
[17:37:42.046]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.046]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.046]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.046]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.046]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.046]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.046]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.046]             base::names(...future.oldOptions))
[17:37:42.046]     }
[17:37:42.046]     if (FALSE) {
[17:37:42.046]     }
[17:37:42.046]     else {
[17:37:42.046]         if (TRUE) {
[17:37:42.046]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.046]                 open = "w")
[17:37:42.046]         }
[17:37:42.046]         else {
[17:37:42.046]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.046]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.046]         }
[17:37:42.046]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.046]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.046]             base::sink(type = "output", split = FALSE)
[17:37:42.046]             base::close(...future.stdout)
[17:37:42.046]         }, add = TRUE)
[17:37:42.046]     }
[17:37:42.046]     ...future.frame <- base::sys.nframe()
[17:37:42.046]     ...future.conditions <- base::list()
[17:37:42.046]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.046]     if (FALSE) {
[17:37:42.046]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.046]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.046]     }
[17:37:42.046]     ...future.result <- base::tryCatch({
[17:37:42.046]         base::withCallingHandlers({
[17:37:42.046]             ...future.value <- base::withVisible(base::local({
[17:37:42.046]                 withCallingHandlers({
[17:37:42.046]                   {
[17:37:42.046]                     do.call(function(...) {
[17:37:42.046]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.046]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.046]                         ...future.globals.maxSize)) {
[17:37:42.046]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.046]                         on.exit(options(oopts), add = TRUE)
[17:37:42.046]                       }
[17:37:42.046]                       {
[17:37:42.046]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.046]                           FUN = function(jj) {
[17:37:42.046]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.046]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.046]                               envir = globalenv(), inherits = FALSE)
[17:37:42.046]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.046]                           })
[17:37:42.046]                       }
[17:37:42.046]                     }, args = future.call.arguments)
[17:37:42.046]                   }
[17:37:42.046]                 }, immediateCondition = function(cond) {
[17:37:42.046]                   save_rds <- function (object, pathname, ...) 
[17:37:42.046]                   {
[17:37:42.046]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.046]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.046]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.046]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.046]                         fi_tmp[["mtime"]])
[17:37:42.046]                     }
[17:37:42.046]                     tryCatch({
[17:37:42.046]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.046]                     }, error = function(ex) {
[17:37:42.046]                       msg <- conditionMessage(ex)
[17:37:42.046]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.046]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.046]                         fi_tmp[["mtime"]], msg)
[17:37:42.046]                       ex$message <- msg
[17:37:42.046]                       stop(ex)
[17:37:42.046]                     })
[17:37:42.046]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.046]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.046]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.046]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.046]                       fi <- file.info(pathname)
[17:37:42.046]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.046]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.046]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.046]                         fi[["size"]], fi[["mtime"]])
[17:37:42.046]                       stop(msg)
[17:37:42.046]                     }
[17:37:42.046]                     invisible(pathname)
[17:37:42.046]                   }
[17:37:42.046]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.046]                     rootPath = tempdir()) 
[17:37:42.046]                   {
[17:37:42.046]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.046]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.046]                       tmpdir = path, fileext = ".rds")
[17:37:42.046]                     save_rds(obj, file)
[17:37:42.046]                   }
[17:37:42.046]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.046]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.046]                   {
[17:37:42.046]                     inherits <- base::inherits
[17:37:42.046]                     invokeRestart <- base::invokeRestart
[17:37:42.046]                     is.null <- base::is.null
[17:37:42.046]                     muffled <- FALSE
[17:37:42.046]                     if (inherits(cond, "message")) {
[17:37:42.046]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.046]                       if (muffled) 
[17:37:42.046]                         invokeRestart("muffleMessage")
[17:37:42.046]                     }
[17:37:42.046]                     else if (inherits(cond, "warning")) {
[17:37:42.046]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.046]                       if (muffled) 
[17:37:42.046]                         invokeRestart("muffleWarning")
[17:37:42.046]                     }
[17:37:42.046]                     else if (inherits(cond, "condition")) {
[17:37:42.046]                       if (!is.null(pattern)) {
[17:37:42.046]                         computeRestarts <- base::computeRestarts
[17:37:42.046]                         grepl <- base::grepl
[17:37:42.046]                         restarts <- computeRestarts(cond)
[17:37:42.046]                         for (restart in restarts) {
[17:37:42.046]                           name <- restart$name
[17:37:42.046]                           if (is.null(name)) 
[17:37:42.046]                             next
[17:37:42.046]                           if (!grepl(pattern, name)) 
[17:37:42.046]                             next
[17:37:42.046]                           invokeRestart(restart)
[17:37:42.046]                           muffled <- TRUE
[17:37:42.046]                           break
[17:37:42.046]                         }
[17:37:42.046]                       }
[17:37:42.046]                     }
[17:37:42.046]                     invisible(muffled)
[17:37:42.046]                   }
[17:37:42.046]                   muffleCondition(cond)
[17:37:42.046]                 })
[17:37:42.046]             }))
[17:37:42.046]             future::FutureResult(value = ...future.value$value, 
[17:37:42.046]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.046]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.046]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.046]                     ...future.globalenv.names))
[17:37:42.046]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.046]         }, condition = base::local({
[17:37:42.046]             c <- base::c
[17:37:42.046]             inherits <- base::inherits
[17:37:42.046]             invokeRestart <- base::invokeRestart
[17:37:42.046]             length <- base::length
[17:37:42.046]             list <- base::list
[17:37:42.046]             seq.int <- base::seq.int
[17:37:42.046]             signalCondition <- base::signalCondition
[17:37:42.046]             sys.calls <- base::sys.calls
[17:37:42.046]             `[[` <- base::`[[`
[17:37:42.046]             `+` <- base::`+`
[17:37:42.046]             `<<-` <- base::`<<-`
[17:37:42.046]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.046]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.046]                   3L)]
[17:37:42.046]             }
[17:37:42.046]             function(cond) {
[17:37:42.046]                 is_error <- inherits(cond, "error")
[17:37:42.046]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.046]                   NULL)
[17:37:42.046]                 if (is_error) {
[17:37:42.046]                   sessionInformation <- function() {
[17:37:42.046]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.046]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.046]                       search = base::search(), system = base::Sys.info())
[17:37:42.046]                   }
[17:37:42.046]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.046]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.046]                     cond$call), session = sessionInformation(), 
[17:37:42.046]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.046]                   signalCondition(cond)
[17:37:42.046]                 }
[17:37:42.046]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.046]                 "immediateCondition"))) {
[17:37:42.046]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.046]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.046]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.046]                   if (TRUE && !signal) {
[17:37:42.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.046]                     {
[17:37:42.046]                       inherits <- base::inherits
[17:37:42.046]                       invokeRestart <- base::invokeRestart
[17:37:42.046]                       is.null <- base::is.null
[17:37:42.046]                       muffled <- FALSE
[17:37:42.046]                       if (inherits(cond, "message")) {
[17:37:42.046]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.046]                         if (muffled) 
[17:37:42.046]                           invokeRestart("muffleMessage")
[17:37:42.046]                       }
[17:37:42.046]                       else if (inherits(cond, "warning")) {
[17:37:42.046]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.046]                         if (muffled) 
[17:37:42.046]                           invokeRestart("muffleWarning")
[17:37:42.046]                       }
[17:37:42.046]                       else if (inherits(cond, "condition")) {
[17:37:42.046]                         if (!is.null(pattern)) {
[17:37:42.046]                           computeRestarts <- base::computeRestarts
[17:37:42.046]                           grepl <- base::grepl
[17:37:42.046]                           restarts <- computeRestarts(cond)
[17:37:42.046]                           for (restart in restarts) {
[17:37:42.046]                             name <- restart$name
[17:37:42.046]                             if (is.null(name)) 
[17:37:42.046]                               next
[17:37:42.046]                             if (!grepl(pattern, name)) 
[17:37:42.046]                               next
[17:37:42.046]                             invokeRestart(restart)
[17:37:42.046]                             muffled <- TRUE
[17:37:42.046]                             break
[17:37:42.046]                           }
[17:37:42.046]                         }
[17:37:42.046]                       }
[17:37:42.046]                       invisible(muffled)
[17:37:42.046]                     }
[17:37:42.046]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.046]                   }
[17:37:42.046]                 }
[17:37:42.046]                 else {
[17:37:42.046]                   if (TRUE) {
[17:37:42.046]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.046]                     {
[17:37:42.046]                       inherits <- base::inherits
[17:37:42.046]                       invokeRestart <- base::invokeRestart
[17:37:42.046]                       is.null <- base::is.null
[17:37:42.046]                       muffled <- FALSE
[17:37:42.046]                       if (inherits(cond, "message")) {
[17:37:42.046]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.046]                         if (muffled) 
[17:37:42.046]                           invokeRestart("muffleMessage")
[17:37:42.046]                       }
[17:37:42.046]                       else if (inherits(cond, "warning")) {
[17:37:42.046]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.046]                         if (muffled) 
[17:37:42.046]                           invokeRestart("muffleWarning")
[17:37:42.046]                       }
[17:37:42.046]                       else if (inherits(cond, "condition")) {
[17:37:42.046]                         if (!is.null(pattern)) {
[17:37:42.046]                           computeRestarts <- base::computeRestarts
[17:37:42.046]                           grepl <- base::grepl
[17:37:42.046]                           restarts <- computeRestarts(cond)
[17:37:42.046]                           for (restart in restarts) {
[17:37:42.046]                             name <- restart$name
[17:37:42.046]                             if (is.null(name)) 
[17:37:42.046]                               next
[17:37:42.046]                             if (!grepl(pattern, name)) 
[17:37:42.046]                               next
[17:37:42.046]                             invokeRestart(restart)
[17:37:42.046]                             muffled <- TRUE
[17:37:42.046]                             break
[17:37:42.046]                           }
[17:37:42.046]                         }
[17:37:42.046]                       }
[17:37:42.046]                       invisible(muffled)
[17:37:42.046]                     }
[17:37:42.046]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.046]                   }
[17:37:42.046]                 }
[17:37:42.046]             }
[17:37:42.046]         }))
[17:37:42.046]     }, error = function(ex) {
[17:37:42.046]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.046]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.046]                 ...future.rng), started = ...future.startTime, 
[17:37:42.046]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.046]             version = "1.8"), class = "FutureResult")
[17:37:42.046]     }, finally = {
[17:37:42.046]         if (!identical(...future.workdir, getwd())) 
[17:37:42.046]             setwd(...future.workdir)
[17:37:42.046]         {
[17:37:42.046]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.046]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.046]             }
[17:37:42.046]             base::options(...future.oldOptions)
[17:37:42.046]             if (.Platform$OS.type == "windows") {
[17:37:42.046]                 old_names <- names(...future.oldEnvVars)
[17:37:42.046]                 envs <- base::Sys.getenv()
[17:37:42.046]                 names <- names(envs)
[17:37:42.046]                 common <- intersect(names, old_names)
[17:37:42.046]                 added <- setdiff(names, old_names)
[17:37:42.046]                 removed <- setdiff(old_names, names)
[17:37:42.046]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.046]                   envs[common]]
[17:37:42.046]                 NAMES <- toupper(changed)
[17:37:42.046]                 args <- list()
[17:37:42.046]                 for (kk in seq_along(NAMES)) {
[17:37:42.046]                   name <- changed[[kk]]
[17:37:42.046]                   NAME <- NAMES[[kk]]
[17:37:42.046]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.046]                     next
[17:37:42.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.046]                 }
[17:37:42.046]                 NAMES <- toupper(added)
[17:37:42.046]                 for (kk in seq_along(NAMES)) {
[17:37:42.046]                   name <- added[[kk]]
[17:37:42.046]                   NAME <- NAMES[[kk]]
[17:37:42.046]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.046]                     next
[17:37:42.046]                   args[[name]] <- ""
[17:37:42.046]                 }
[17:37:42.046]                 NAMES <- toupper(removed)
[17:37:42.046]                 for (kk in seq_along(NAMES)) {
[17:37:42.046]                   name <- removed[[kk]]
[17:37:42.046]                   NAME <- NAMES[[kk]]
[17:37:42.046]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.046]                     next
[17:37:42.046]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.046]                 }
[17:37:42.046]                 if (length(args) > 0) 
[17:37:42.046]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.046]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.046]             }
[17:37:42.046]             else {
[17:37:42.046]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.046]             }
[17:37:42.046]             {
[17:37:42.046]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.046]                   0L) {
[17:37:42.046]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.046]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.046]                   base::options(opts)
[17:37:42.046]                 }
[17:37:42.046]                 {
[17:37:42.046]                   {
[17:37:42.046]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.046]                     NULL
[17:37:42.046]                   }
[17:37:42.046]                   options(future.plan = NULL)
[17:37:42.046]                   if (is.na(NA_character_)) 
[17:37:42.046]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.046]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.046]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.046]                     .init = FALSE)
[17:37:42.046]                 }
[17:37:42.046]             }
[17:37:42.046]         }
[17:37:42.046]     })
[17:37:42.046]     if (TRUE) {
[17:37:42.046]         base::sink(type = "output", split = FALSE)
[17:37:42.046]         if (TRUE) {
[17:37:42.046]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.046]         }
[17:37:42.046]         else {
[17:37:42.046]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.046]         }
[17:37:42.046]         base::close(...future.stdout)
[17:37:42.046]         ...future.stdout <- NULL
[17:37:42.046]     }
[17:37:42.046]     ...future.result$conditions <- ...future.conditions
[17:37:42.046]     ...future.result$finished <- base::Sys.time()
[17:37:42.046]     ...future.result
[17:37:42.046] }
[17:37:42.048] assign_globals() ...
[17:37:42.048] List of 5
[17:37:42.048]  $ ...future.FUN            :function (...)  
[17:37:42.048]  $ future.call.arguments    : list()
[17:37:42.048]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.048]  $ ...future.elements_ii    :List of 2
[17:37:42.048]   ..$ : int 0
[17:37:42.048]   ..$ : int 0
[17:37:42.048]  $ ...future.seeds_ii       :List of 2
[17:37:42.048]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[17:37:42.048]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[17:37:42.048]  $ ...future.globals.maxSize: NULL
[17:37:42.048]  - attr(*, "where")=List of 5
[17:37:42.048]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.048]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.048]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.048]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.048]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.048]  - attr(*, "resolved")= logi FALSE
[17:37:42.048]  - attr(*, "total_size")= num 616
[17:37:42.048]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.048]  - attr(*, "already-done")= logi TRUE
[17:37:42.054] - reassign environment for ‘...future.FUN’
[17:37:42.054] - copied ‘...future.FUN’ to environment
[17:37:42.054] - copied ‘future.call.arguments’ to environment
[17:37:42.054] - copied ‘...future.elements_ii’ to environment
[17:37:42.054] - copied ‘...future.seeds_ii’ to environment
[17:37:42.054] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.054] assign_globals() ... done
[17:37:42.054] requestCore(): workers = 2
[17:37:42.056] MulticoreFuture started
[17:37:42.057] - Launch lazy future ... done
[17:37:42.057] run() for ‘MulticoreFuture’ ... done
[17:37:42.057] Created future:
[17:37:42.058] plan(): Setting new future strategy stack:
[17:37:42.058] List of future strategies:
[17:37:42.058] 1. sequential:
[17:37:42.058]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.058]    - tweaked: FALSE
[17:37:42.058]    - call: NULL
[17:37:42.059] plan(): nbrOfWorkers() = 1
[17:37:42.061] plan(): Setting new future strategy stack:
[17:37:42.061] List of future strategies:
[17:37:42.061] 1. multicore:
[17:37:42.061]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.061]    - tweaked: FALSE
[17:37:42.061]    - call: plan(strategy)
[17:37:42.066] plan(): nbrOfWorkers() = 2
[17:37:42.057] MulticoreFuture:
[17:37:42.057] Label: ‘future_replicate-1’
[17:37:42.057] Expression:
[17:37:42.057] {
[17:37:42.057]     do.call(function(...) {
[17:37:42.057]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.057]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.057]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.057]             on.exit(options(oopts), add = TRUE)
[17:37:42.057]         }
[17:37:42.057]         {
[17:37:42.057]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.057]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.057]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.057]                   envir = globalenv(), inherits = FALSE)
[17:37:42.057]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.057]             })
[17:37:42.057]         }
[17:37:42.057]     }, args = future.call.arguments)
[17:37:42.057] }
[17:37:42.057] Lazy evaluation: FALSE
[17:37:42.057] Asynchronous evaluation: TRUE
[17:37:42.057] Local evaluation: TRUE
[17:37:42.057] Environment: R_GlobalEnv
[17:37:42.057] Capture standard output: TRUE
[17:37:42.057] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.057] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:42.057] Packages: <none>
[17:37:42.057] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.057] Resolved: TRUE
[17:37:42.057] Value: <not collected>
[17:37:42.057] Conditions captured: <none>
[17:37:42.057] Early signaling: FALSE
[17:37:42.057] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.057] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.067] Chunk #1 of 2 ... DONE
[17:37:42.067] Chunk #2 of 2 ...
[17:37:42.067]  - Finding globals in 'X' for chunk #2 ...
[17:37:42.067] getGlobalsAndPackages() ...
[17:37:42.067] Searching for globals...
[17:37:42.068] 
[17:37:42.068] Searching for globals ... DONE
[17:37:42.068] - globals: [0] <none>
[17:37:42.068] getGlobalsAndPackages() ... DONE
[17:37:42.068]    + additional globals found: [n=0] 
[17:37:42.069]    + additional namespaces needed: [n=0] 
[17:37:42.069]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:42.069]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.069]  - seeds: [3] <seeds>
[17:37:42.069]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.069] getGlobalsAndPackages() ...
[17:37:42.069] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.070] Resolving globals: FALSE
[17:37:42.070] Tweak future expression to call with '...' arguments ...
[17:37:42.070] {
[17:37:42.070]     do.call(function(...) {
[17:37:42.070]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.070]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.070]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.070]             on.exit(options(oopts), add = TRUE)
[17:37:42.070]         }
[17:37:42.070]         {
[17:37:42.070]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.070]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.070]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.070]                   envir = globalenv(), inherits = FALSE)
[17:37:42.070]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.070]             })
[17:37:42.070]         }
[17:37:42.070]     }, args = future.call.arguments)
[17:37:42.070] }
[17:37:42.070] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.071] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.074] 
[17:37:42.075] getGlobalsAndPackages() ... DONE
[17:37:42.075] run() for ‘Future’ ...
[17:37:42.075] - state: ‘created’
[17:37:42.076] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.081] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.081] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.081]   - Field: ‘label’
[17:37:42.081]   - Field: ‘local’
[17:37:42.081]   - Field: ‘owner’
[17:37:42.082]   - Field: ‘envir’
[17:37:42.082]   - Field: ‘workers’
[17:37:42.082]   - Field: ‘packages’
[17:37:42.082]   - Field: ‘gc’
[17:37:42.082]   - Field: ‘job’
[17:37:42.082]   - Field: ‘conditions’
[17:37:42.083]   - Field: ‘expr’
[17:37:42.083]   - Field: ‘uuid’
[17:37:42.083]   - Field: ‘seed’
[17:37:42.083]   - Field: ‘version’
[17:37:42.083]   - Field: ‘result’
[17:37:42.083]   - Field: ‘asynchronous’
[17:37:42.083]   - Field: ‘calls’
[17:37:42.084]   - Field: ‘globals’
[17:37:42.084]   - Field: ‘stdout’
[17:37:42.084]   - Field: ‘earlySignal’
[17:37:42.084]   - Field: ‘lazy’
[17:37:42.084]   - Field: ‘state’
[17:37:42.084] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.085] - Launch lazy future ...
[17:37:42.085] Packages needed by the future expression (n = 0): <none>
[17:37:42.085] Packages needed by future strategies (n = 0): <none>
[17:37:42.086] {
[17:37:42.086]     {
[17:37:42.086]         {
[17:37:42.086]             ...future.startTime <- base::Sys.time()
[17:37:42.086]             {
[17:37:42.086]                 {
[17:37:42.086]                   {
[17:37:42.086]                     {
[17:37:42.086]                       base::local({
[17:37:42.086]                         has_future <- base::requireNamespace("future", 
[17:37:42.086]                           quietly = TRUE)
[17:37:42.086]                         if (has_future) {
[17:37:42.086]                           ns <- base::getNamespace("future")
[17:37:42.086]                           version <- ns[[".package"]][["version"]]
[17:37:42.086]                           if (is.null(version)) 
[17:37:42.086]                             version <- utils::packageVersion("future")
[17:37:42.086]                         }
[17:37:42.086]                         else {
[17:37:42.086]                           version <- NULL
[17:37:42.086]                         }
[17:37:42.086]                         if (!has_future || version < "1.8.0") {
[17:37:42.086]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.086]                             "", base::R.version$version.string), 
[17:37:42.086]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.086]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.086]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.086]                               "release", "version")], collapse = " "), 
[17:37:42.086]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.086]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.086]                             info)
[17:37:42.086]                           info <- base::paste(info, collapse = "; ")
[17:37:42.086]                           if (!has_future) {
[17:37:42.086]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.086]                               info)
[17:37:42.086]                           }
[17:37:42.086]                           else {
[17:37:42.086]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.086]                               info, version)
[17:37:42.086]                           }
[17:37:42.086]                           base::stop(msg)
[17:37:42.086]                         }
[17:37:42.086]                       })
[17:37:42.086]                     }
[17:37:42.086]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.086]                     base::options(mc.cores = 1L)
[17:37:42.086]                   }
[17:37:42.086]                   ...future.strategy.old <- future::plan("list")
[17:37:42.086]                   options(future.plan = NULL)
[17:37:42.086]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.086]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.086]                 }
[17:37:42.086]                 ...future.workdir <- getwd()
[17:37:42.086]             }
[17:37:42.086]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.086]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.086]         }
[17:37:42.086]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.086]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.086]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.086]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.086]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.086]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.086]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.086]             base::names(...future.oldOptions))
[17:37:42.086]     }
[17:37:42.086]     if (FALSE) {
[17:37:42.086]     }
[17:37:42.086]     else {
[17:37:42.086]         if (TRUE) {
[17:37:42.086]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.086]                 open = "w")
[17:37:42.086]         }
[17:37:42.086]         else {
[17:37:42.086]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.086]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.086]         }
[17:37:42.086]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.086]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.086]             base::sink(type = "output", split = FALSE)
[17:37:42.086]             base::close(...future.stdout)
[17:37:42.086]         }, add = TRUE)
[17:37:42.086]     }
[17:37:42.086]     ...future.frame <- base::sys.nframe()
[17:37:42.086]     ...future.conditions <- base::list()
[17:37:42.086]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.086]     if (FALSE) {
[17:37:42.086]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.086]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.086]     }
[17:37:42.086]     ...future.result <- base::tryCatch({
[17:37:42.086]         base::withCallingHandlers({
[17:37:42.086]             ...future.value <- base::withVisible(base::local({
[17:37:42.086]                 withCallingHandlers({
[17:37:42.086]                   {
[17:37:42.086]                     do.call(function(...) {
[17:37:42.086]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.086]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.086]                         ...future.globals.maxSize)) {
[17:37:42.086]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.086]                         on.exit(options(oopts), add = TRUE)
[17:37:42.086]                       }
[17:37:42.086]                       {
[17:37:42.086]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.086]                           FUN = function(jj) {
[17:37:42.086]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.086]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.086]                               envir = globalenv(), inherits = FALSE)
[17:37:42.086]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.086]                           })
[17:37:42.086]                       }
[17:37:42.086]                     }, args = future.call.arguments)
[17:37:42.086]                   }
[17:37:42.086]                 }, immediateCondition = function(cond) {
[17:37:42.086]                   save_rds <- function (object, pathname, ...) 
[17:37:42.086]                   {
[17:37:42.086]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.086]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.086]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.086]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.086]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.086]                         fi_tmp[["mtime"]])
[17:37:42.086]                     }
[17:37:42.086]                     tryCatch({
[17:37:42.086]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.086]                     }, error = function(ex) {
[17:37:42.086]                       msg <- conditionMessage(ex)
[17:37:42.086]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.086]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.086]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.086]                         fi_tmp[["mtime"]], msg)
[17:37:42.086]                       ex$message <- msg
[17:37:42.086]                       stop(ex)
[17:37:42.086]                     })
[17:37:42.086]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.086]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.086]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.086]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.086]                       fi <- file.info(pathname)
[17:37:42.086]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.086]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.086]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.086]                         fi[["size"]], fi[["mtime"]])
[17:37:42.086]                       stop(msg)
[17:37:42.086]                     }
[17:37:42.086]                     invisible(pathname)
[17:37:42.086]                   }
[17:37:42.086]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.086]                     rootPath = tempdir()) 
[17:37:42.086]                   {
[17:37:42.086]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.086]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.086]                       tmpdir = path, fileext = ".rds")
[17:37:42.086]                     save_rds(obj, file)
[17:37:42.086]                   }
[17:37:42.086]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.086]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.086]                   {
[17:37:42.086]                     inherits <- base::inherits
[17:37:42.086]                     invokeRestart <- base::invokeRestart
[17:37:42.086]                     is.null <- base::is.null
[17:37:42.086]                     muffled <- FALSE
[17:37:42.086]                     if (inherits(cond, "message")) {
[17:37:42.086]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.086]                       if (muffled) 
[17:37:42.086]                         invokeRestart("muffleMessage")
[17:37:42.086]                     }
[17:37:42.086]                     else if (inherits(cond, "warning")) {
[17:37:42.086]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.086]                       if (muffled) 
[17:37:42.086]                         invokeRestart("muffleWarning")
[17:37:42.086]                     }
[17:37:42.086]                     else if (inherits(cond, "condition")) {
[17:37:42.086]                       if (!is.null(pattern)) {
[17:37:42.086]                         computeRestarts <- base::computeRestarts
[17:37:42.086]                         grepl <- base::grepl
[17:37:42.086]                         restarts <- computeRestarts(cond)
[17:37:42.086]                         for (restart in restarts) {
[17:37:42.086]                           name <- restart$name
[17:37:42.086]                           if (is.null(name)) 
[17:37:42.086]                             next
[17:37:42.086]                           if (!grepl(pattern, name)) 
[17:37:42.086]                             next
[17:37:42.086]                           invokeRestart(restart)
[17:37:42.086]                           muffled <- TRUE
[17:37:42.086]                           break
[17:37:42.086]                         }
[17:37:42.086]                       }
[17:37:42.086]                     }
[17:37:42.086]                     invisible(muffled)
[17:37:42.086]                   }
[17:37:42.086]                   muffleCondition(cond)
[17:37:42.086]                 })
[17:37:42.086]             }))
[17:37:42.086]             future::FutureResult(value = ...future.value$value, 
[17:37:42.086]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.086]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.086]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.086]                     ...future.globalenv.names))
[17:37:42.086]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.086]         }, condition = base::local({
[17:37:42.086]             c <- base::c
[17:37:42.086]             inherits <- base::inherits
[17:37:42.086]             invokeRestart <- base::invokeRestart
[17:37:42.086]             length <- base::length
[17:37:42.086]             list <- base::list
[17:37:42.086]             seq.int <- base::seq.int
[17:37:42.086]             signalCondition <- base::signalCondition
[17:37:42.086]             sys.calls <- base::sys.calls
[17:37:42.086]             `[[` <- base::`[[`
[17:37:42.086]             `+` <- base::`+`
[17:37:42.086]             `<<-` <- base::`<<-`
[17:37:42.086]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.086]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.086]                   3L)]
[17:37:42.086]             }
[17:37:42.086]             function(cond) {
[17:37:42.086]                 is_error <- inherits(cond, "error")
[17:37:42.086]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.086]                   NULL)
[17:37:42.086]                 if (is_error) {
[17:37:42.086]                   sessionInformation <- function() {
[17:37:42.086]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.086]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.086]                       search = base::search(), system = base::Sys.info())
[17:37:42.086]                   }
[17:37:42.086]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.086]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.086]                     cond$call), session = sessionInformation(), 
[17:37:42.086]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.086]                   signalCondition(cond)
[17:37:42.086]                 }
[17:37:42.086]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.086]                 "immediateCondition"))) {
[17:37:42.086]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.086]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.086]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.086]                   if (TRUE && !signal) {
[17:37:42.086]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.086]                     {
[17:37:42.086]                       inherits <- base::inherits
[17:37:42.086]                       invokeRestart <- base::invokeRestart
[17:37:42.086]                       is.null <- base::is.null
[17:37:42.086]                       muffled <- FALSE
[17:37:42.086]                       if (inherits(cond, "message")) {
[17:37:42.086]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.086]                         if (muffled) 
[17:37:42.086]                           invokeRestart("muffleMessage")
[17:37:42.086]                       }
[17:37:42.086]                       else if (inherits(cond, "warning")) {
[17:37:42.086]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.086]                         if (muffled) 
[17:37:42.086]                           invokeRestart("muffleWarning")
[17:37:42.086]                       }
[17:37:42.086]                       else if (inherits(cond, "condition")) {
[17:37:42.086]                         if (!is.null(pattern)) {
[17:37:42.086]                           computeRestarts <- base::computeRestarts
[17:37:42.086]                           grepl <- base::grepl
[17:37:42.086]                           restarts <- computeRestarts(cond)
[17:37:42.086]                           for (restart in restarts) {
[17:37:42.086]                             name <- restart$name
[17:37:42.086]                             if (is.null(name)) 
[17:37:42.086]                               next
[17:37:42.086]                             if (!grepl(pattern, name)) 
[17:37:42.086]                               next
[17:37:42.086]                             invokeRestart(restart)
[17:37:42.086]                             muffled <- TRUE
[17:37:42.086]                             break
[17:37:42.086]                           }
[17:37:42.086]                         }
[17:37:42.086]                       }
[17:37:42.086]                       invisible(muffled)
[17:37:42.086]                     }
[17:37:42.086]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.086]                   }
[17:37:42.086]                 }
[17:37:42.086]                 else {
[17:37:42.086]                   if (TRUE) {
[17:37:42.086]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.086]                     {
[17:37:42.086]                       inherits <- base::inherits
[17:37:42.086]                       invokeRestart <- base::invokeRestart
[17:37:42.086]                       is.null <- base::is.null
[17:37:42.086]                       muffled <- FALSE
[17:37:42.086]                       if (inherits(cond, "message")) {
[17:37:42.086]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.086]                         if (muffled) 
[17:37:42.086]                           invokeRestart("muffleMessage")
[17:37:42.086]                       }
[17:37:42.086]                       else if (inherits(cond, "warning")) {
[17:37:42.086]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.086]                         if (muffled) 
[17:37:42.086]                           invokeRestart("muffleWarning")
[17:37:42.086]                       }
[17:37:42.086]                       else if (inherits(cond, "condition")) {
[17:37:42.086]                         if (!is.null(pattern)) {
[17:37:42.086]                           computeRestarts <- base::computeRestarts
[17:37:42.086]                           grepl <- base::grepl
[17:37:42.086]                           restarts <- computeRestarts(cond)
[17:37:42.086]                           for (restart in restarts) {
[17:37:42.086]                             name <- restart$name
[17:37:42.086]                             if (is.null(name)) 
[17:37:42.086]                               next
[17:37:42.086]                             if (!grepl(pattern, name)) 
[17:37:42.086]                               next
[17:37:42.086]                             invokeRestart(restart)
[17:37:42.086]                             muffled <- TRUE
[17:37:42.086]                             break
[17:37:42.086]                           }
[17:37:42.086]                         }
[17:37:42.086]                       }
[17:37:42.086]                       invisible(muffled)
[17:37:42.086]                     }
[17:37:42.086]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.086]                   }
[17:37:42.086]                 }
[17:37:42.086]             }
[17:37:42.086]         }))
[17:37:42.086]     }, error = function(ex) {
[17:37:42.086]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.086]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.086]                 ...future.rng), started = ...future.startTime, 
[17:37:42.086]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.086]             version = "1.8"), class = "FutureResult")
[17:37:42.086]     }, finally = {
[17:37:42.086]         if (!identical(...future.workdir, getwd())) 
[17:37:42.086]             setwd(...future.workdir)
[17:37:42.086]         {
[17:37:42.086]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.086]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.086]             }
[17:37:42.086]             base::options(...future.oldOptions)
[17:37:42.086]             if (.Platform$OS.type == "windows") {
[17:37:42.086]                 old_names <- names(...future.oldEnvVars)
[17:37:42.086]                 envs <- base::Sys.getenv()
[17:37:42.086]                 names <- names(envs)
[17:37:42.086]                 common <- intersect(names, old_names)
[17:37:42.086]                 added <- setdiff(names, old_names)
[17:37:42.086]                 removed <- setdiff(old_names, names)
[17:37:42.086]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.086]                   envs[common]]
[17:37:42.086]                 NAMES <- toupper(changed)
[17:37:42.086]                 args <- list()
[17:37:42.086]                 for (kk in seq_along(NAMES)) {
[17:37:42.086]                   name <- changed[[kk]]
[17:37:42.086]                   NAME <- NAMES[[kk]]
[17:37:42.086]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.086]                     next
[17:37:42.086]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.086]                 }
[17:37:42.086]                 NAMES <- toupper(added)
[17:37:42.086]                 for (kk in seq_along(NAMES)) {
[17:37:42.086]                   name <- added[[kk]]
[17:37:42.086]                   NAME <- NAMES[[kk]]
[17:37:42.086]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.086]                     next
[17:37:42.086]                   args[[name]] <- ""
[17:37:42.086]                 }
[17:37:42.086]                 NAMES <- toupper(removed)
[17:37:42.086]                 for (kk in seq_along(NAMES)) {
[17:37:42.086]                   name <- removed[[kk]]
[17:37:42.086]                   NAME <- NAMES[[kk]]
[17:37:42.086]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.086]                     next
[17:37:42.086]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.086]                 }
[17:37:42.086]                 if (length(args) > 0) 
[17:37:42.086]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.086]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.086]             }
[17:37:42.086]             else {
[17:37:42.086]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.086]             }
[17:37:42.086]             {
[17:37:42.086]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.086]                   0L) {
[17:37:42.086]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.086]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.086]                   base::options(opts)
[17:37:42.086]                 }
[17:37:42.086]                 {
[17:37:42.086]                   {
[17:37:42.086]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.086]                     NULL
[17:37:42.086]                   }
[17:37:42.086]                   options(future.plan = NULL)
[17:37:42.086]                   if (is.na(NA_character_)) 
[17:37:42.086]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.086]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.086]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.086]                     .init = FALSE)
[17:37:42.086]                 }
[17:37:42.086]             }
[17:37:42.086]         }
[17:37:42.086]     })
[17:37:42.086]     if (TRUE) {
[17:37:42.086]         base::sink(type = "output", split = FALSE)
[17:37:42.086]         if (TRUE) {
[17:37:42.086]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.086]         }
[17:37:42.086]         else {
[17:37:42.086]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.086]         }
[17:37:42.086]         base::close(...future.stdout)
[17:37:42.086]         ...future.stdout <- NULL
[17:37:42.086]     }
[17:37:42.086]     ...future.result$conditions <- ...future.conditions
[17:37:42.086]     ...future.result$finished <- base::Sys.time()
[17:37:42.086]     ...future.result
[17:37:42.086] }
[17:37:42.089] assign_globals() ...
[17:37:42.089] List of 5
[17:37:42.089]  $ ...future.FUN            :function (...)  
[17:37:42.089]  $ future.call.arguments    : list()
[17:37:42.089]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.089]  $ ...future.elements_ii    :List of 3
[17:37:42.089]   ..$ : int 0
[17:37:42.089]   ..$ : int 0
[17:37:42.089]   ..$ : int 0
[17:37:42.089]  $ ...future.seeds_ii       :List of 3
[17:37:42.089]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[17:37:42.089]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[17:37:42.089]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[17:37:42.089]  $ ...future.globals.maxSize: NULL
[17:37:42.089]  - attr(*, "where")=List of 5
[17:37:42.089]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.089]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.089]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.089]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.089]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.089]  - attr(*, "resolved")= logi FALSE
[17:37:42.089]  - attr(*, "total_size")= num 616
[17:37:42.089]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.089]  - attr(*, "already-done")= logi TRUE
[17:37:42.098] - reassign environment for ‘...future.FUN’
[17:37:42.098] - copied ‘...future.FUN’ to environment
[17:37:42.098] - copied ‘future.call.arguments’ to environment
[17:37:42.098] - copied ‘...future.elements_ii’ to environment
[17:37:42.099] - copied ‘...future.seeds_ii’ to environment
[17:37:42.099] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.099] assign_globals() ... done
[17:37:42.099] requestCore(): workers = 2
[17:37:42.101] MulticoreFuture started
[17:37:42.102] - Launch lazy future ... done
[17:37:42.102] run() for ‘MulticoreFuture’ ... done
[17:37:42.102] Created future:
[17:37:42.102] plan(): Setting new future strategy stack:
[17:37:42.103] List of future strategies:
[17:37:42.103] 1. sequential:
[17:37:42.103]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.103]    - tweaked: FALSE
[17:37:42.103]    - call: NULL
[17:37:42.104] plan(): nbrOfWorkers() = 1
[17:37:42.106] plan(): Setting new future strategy stack:
[17:37:42.106] List of future strategies:
[17:37:42.106] 1. multicore:
[17:37:42.106]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.106]    - tweaked: FALSE
[17:37:42.106]    - call: plan(strategy)
[17:37:42.111] plan(): nbrOfWorkers() = 2
[17:37:42.102] MulticoreFuture:
[17:37:42.102] Label: ‘future_replicate-2’
[17:37:42.102] Expression:
[17:37:42.102] {
[17:37:42.102]     do.call(function(...) {
[17:37:42.102]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.102]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.102]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.102]             on.exit(options(oopts), add = TRUE)
[17:37:42.102]         }
[17:37:42.102]         {
[17:37:42.102]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.102]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.102]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.102]                   envir = globalenv(), inherits = FALSE)
[17:37:42.102]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.102]             })
[17:37:42.102]         }
[17:37:42.102]     }, args = future.call.arguments)
[17:37:42.102] }
[17:37:42.102] Lazy evaluation: FALSE
[17:37:42.102] Asynchronous evaluation: TRUE
[17:37:42.102] Local evaluation: TRUE
[17:37:42.102] Environment: R_GlobalEnv
[17:37:42.102] Capture standard output: TRUE
[17:37:42.102] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.102] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:42.102] Packages: <none>
[17:37:42.102] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.102] Resolved: TRUE
[17:37:42.102] Value: <not collected>
[17:37:42.102] Conditions captured: <none>
[17:37:42.102] Early signaling: FALSE
[17:37:42.102] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.102] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.112] Chunk #2 of 2 ... DONE
[17:37:42.112] Launching 2 futures (chunks) ... DONE
[17:37:42.112] Resolving 2 futures (chunks) ...
[17:37:42.112] resolve() on list ...
[17:37:42.113]  recursive: 0
[17:37:42.113]  length: 2
[17:37:42.113] 
[17:37:42.113] Future #1
[17:37:42.113] result() for MulticoreFuture ...
[17:37:42.114] result() for MulticoreFuture ...
[17:37:42.115] result() for MulticoreFuture ... done
[17:37:42.115] result() for MulticoreFuture ... done
[17:37:42.115] result() for MulticoreFuture ...
[17:37:42.115] result() for MulticoreFuture ... done
[17:37:42.115] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:37:42.115] - nx: 2
[17:37:42.115] - relay: TRUE
[17:37:42.116] - stdout: TRUE
[17:37:42.116] - signal: TRUE
[17:37:42.116] - resignal: FALSE
[17:37:42.116] - force: TRUE
[17:37:42.116] - relayed: [n=2] FALSE, FALSE
[17:37:42.116] - queued futures: [n=2] FALSE, FALSE
[17:37:42.116]  - until=1
[17:37:42.116]  - relaying element #1
[17:37:42.117] result() for MulticoreFuture ...
[17:37:42.117] result() for MulticoreFuture ... done
[17:37:42.117] result() for MulticoreFuture ...
[17:37:42.117] result() for MulticoreFuture ... done
[17:37:42.117] result() for MulticoreFuture ...
[17:37:42.117] result() for MulticoreFuture ... done
[17:37:42.118] result() for MulticoreFuture ...
[17:37:42.118] result() for MulticoreFuture ... done
[17:37:42.118] - relayed: [n=2] TRUE, FALSE
[17:37:42.118] - queued futures: [n=2] TRUE, FALSE
[17:37:42.118] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:37:42.118]  length: 1 (resolved future 1)
[17:37:42.119] Future #2
[17:37:42.119] result() for MulticoreFuture ...
[17:37:42.119] result() for MulticoreFuture ...
[17:37:42.120] result() for MulticoreFuture ... done
[17:37:42.120] result() for MulticoreFuture ... done
[17:37:42.120] result() for MulticoreFuture ...
[17:37:42.120] result() for MulticoreFuture ... done
[17:37:42.120] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:37:42.120] - nx: 2
[17:37:42.120] - relay: TRUE
[17:37:42.121] - stdout: TRUE
[17:37:42.121] - signal: TRUE
[17:37:42.121] - resignal: FALSE
[17:37:42.121] - force: TRUE
[17:37:42.121] - relayed: [n=2] TRUE, FALSE
[17:37:42.121] - queued futures: [n=2] TRUE, FALSE
[17:37:42.121]  - until=2
[17:37:42.121]  - relaying element #2
[17:37:42.122] result() for MulticoreFuture ...
[17:37:42.122] result() for MulticoreFuture ... done
[17:37:42.122] result() for MulticoreFuture ...
[17:37:42.125] result() for MulticoreFuture ... done
[17:37:42.125] result() for MulticoreFuture ...
[17:37:42.125] result() for MulticoreFuture ... done
[17:37:42.125] result() for MulticoreFuture ...
[17:37:42.125] result() for MulticoreFuture ... done
[17:37:42.125] - relayed: [n=2] TRUE, TRUE
[17:37:42.126] - queued futures: [n=2] TRUE, TRUE
[17:37:42.126] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:37:42.126]  length: 0 (resolved future 2)
[17:37:42.126] Relaying remaining futures
[17:37:42.126] signalConditionsASAP(NULL, pos=0) ...
[17:37:42.126] - nx: 2
[17:37:42.126] - relay: TRUE
[17:37:42.126] - stdout: TRUE
[17:37:42.127] - signal: TRUE
[17:37:42.127] - resignal: FALSE
[17:37:42.127] - force: TRUE
[17:37:42.127] - relayed: [n=2] TRUE, TRUE
[17:37:42.127] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:42.127] - relayed: [n=2] TRUE, TRUE
[17:37:42.127] - queued futures: [n=2] TRUE, TRUE
[17:37:42.127] signalConditionsASAP(NULL, pos=0) ... done
[17:37:42.128] resolve() on list ... DONE
[17:37:42.128] result() for MulticoreFuture ...
[17:37:42.128] result() for MulticoreFuture ... done
[17:37:42.128] result() for MulticoreFuture ...
[17:37:42.128] result() for MulticoreFuture ... done
[17:37:42.128] result() for MulticoreFuture ...
[17:37:42.128] result() for MulticoreFuture ... done
[17:37:42.128] result() for MulticoreFuture ...
[17:37:42.129] result() for MulticoreFuture ... done
[17:37:42.129]  - Number of value chunks collected: 2
[17:37:42.129] Resolving 2 futures (chunks) ... DONE
[17:37:42.129] Reducing values from 2 chunks ...
[17:37:42.129]  - Number of values collected after concatenation: 5
[17:37:42.129]  - Number of values expected: 5
[17:37:42.129] Reducing values from 2 chunks ... DONE
[17:37:42.129] future_lapply() ... DONE
[17:37:42.130] future_lapply() ...
[17:37:42.130] Generating random seeds ...
[17:37:42.131] Generating random seed streams for 5 elements ...
[17:37:42.131] Generating random seed streams for 5 elements ... DONE
[17:37:42.131] Generating random seeds ... DONE
[17:37:42.131] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:42.136] Number of chunks: 2
[17:37:42.136] getGlobalsAndPackagesXApply() ...
[17:37:42.136]  - future.globals: TRUE
[17:37:42.136] getGlobalsAndPackages() ...
[17:37:42.136] Searching for globals...
[17:37:42.138] - globals found: [2] ‘FUN’, ‘sample’
[17:37:42.138] Searching for globals ... DONE
[17:37:42.138] Resolving globals: FALSE
[17:37:42.138] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:42.139] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:42.139] - globals: [1] ‘FUN’
[17:37:42.139] 
[17:37:42.139] getGlobalsAndPackages() ... DONE
[17:37:42.139]  - globals found/used: [n=1] ‘FUN’
[17:37:42.139]  - needed namespaces: [n=0] 
[17:37:42.140] Finding globals ... DONE
[17:37:42.140]  - use_args: TRUE
[17:37:42.140]  - Getting '...' globals ...
[17:37:42.140] resolve() on list ...
[17:37:42.140]  recursive: 0
[17:37:42.140]  length: 1
[17:37:42.141]  elements: ‘...’
[17:37:42.141]  length: 0 (resolved future 1)
[17:37:42.141] resolve() on list ... DONE
[17:37:42.141]    - '...' content: [n=0] 
[17:37:42.141] List of 1
[17:37:42.141]  $ ...: list()
[17:37:42.141]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.141]  - attr(*, "where")=List of 1
[17:37:42.141]   ..$ ...:<environment: 0x5640be9a2b10> 
[17:37:42.141]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.141]  - attr(*, "resolved")= logi TRUE
[17:37:42.141]  - attr(*, "total_size")= num NA
[17:37:42.144]  - Getting '...' globals ... DONE
[17:37:42.144] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:42.144] List of 2
[17:37:42.144]  $ ...future.FUN:function (...)  
[17:37:42.144]  $ ...          : list()
[17:37:42.144]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.144]  - attr(*, "where")=List of 2
[17:37:42.144]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:42.144]   ..$ ...          :<environment: 0x5640be9a2b10> 
[17:37:42.144]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.144]  - attr(*, "resolved")= logi FALSE
[17:37:42.144]  - attr(*, "total_size")= num 616
[17:37:42.147] Packages to be attached in all futures: [n=0] 
[17:37:42.147] getGlobalsAndPackagesXApply() ... DONE
[17:37:42.147] Number of futures (= number of chunks): 2
[17:37:42.147] Launching 2 futures (chunks) ...
[17:37:42.148] Chunk #1 of 2 ...
[17:37:42.148]  - Finding globals in 'X' for chunk #1 ...
[17:37:42.148] getGlobalsAndPackages() ...
[17:37:42.148] Searching for globals...
[17:37:42.148] 
[17:37:42.148] Searching for globals ... DONE
[17:37:42.148] - globals: [0] <none>
[17:37:42.148] getGlobalsAndPackages() ... DONE
[17:37:42.149]    + additional globals found: [n=0] 
[17:37:42.149]    + additional namespaces needed: [n=0] 
[17:37:42.149]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:42.149]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.149]  - seeds: [2] <seeds>
[17:37:42.149]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.149] getGlobalsAndPackages() ...
[17:37:42.149] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.149] Resolving globals: FALSE
[17:37:42.149] Tweak future expression to call with '...' arguments ...
[17:37:42.150] {
[17:37:42.150]     do.call(function(...) {
[17:37:42.150]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.150]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.150]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.150]             on.exit(options(oopts), add = TRUE)
[17:37:42.150]         }
[17:37:42.150]         {
[17:37:42.150]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.150]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.150]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.150]                   envir = globalenv(), inherits = FALSE)
[17:37:42.150]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.150]             })
[17:37:42.150]         }
[17:37:42.150]     }, args = future.call.arguments)
[17:37:42.150] }
[17:37:42.150] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.150] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.150] 
[17:37:42.150] getGlobalsAndPackages() ... DONE
[17:37:42.151] run() for ‘Future’ ...
[17:37:42.151] - state: ‘created’
[17:37:42.151] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.190] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.190] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.191]   - Field: ‘label’
[17:37:42.191]   - Field: ‘local’
[17:37:42.191]   - Field: ‘owner’
[17:37:42.191]   - Field: ‘envir’
[17:37:42.191]   - Field: ‘workers’
[17:37:42.191]   - Field: ‘packages’
[17:37:42.191]   - Field: ‘gc’
[17:37:42.191]   - Field: ‘job’
[17:37:42.192]   - Field: ‘conditions’
[17:37:42.192]   - Field: ‘expr’
[17:37:42.192]   - Field: ‘uuid’
[17:37:42.192]   - Field: ‘seed’
[17:37:42.192]   - Field: ‘version’
[17:37:42.192]   - Field: ‘result’
[17:37:42.192]   - Field: ‘asynchronous’
[17:37:42.192]   - Field: ‘calls’
[17:37:42.193]   - Field: ‘globals’
[17:37:42.193]   - Field: ‘stdout’
[17:37:42.193]   - Field: ‘earlySignal’
[17:37:42.193]   - Field: ‘lazy’
[17:37:42.193]   - Field: ‘state’
[17:37:42.193] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.193] - Launch lazy future ...
[17:37:42.193] Packages needed by the future expression (n = 0): <none>
[17:37:42.194] Packages needed by future strategies (n = 0): <none>
[17:37:42.194] {
[17:37:42.194]     {
[17:37:42.194]         {
[17:37:42.194]             ...future.startTime <- base::Sys.time()
[17:37:42.194]             {
[17:37:42.194]                 {
[17:37:42.194]                   {
[17:37:42.194]                     {
[17:37:42.194]                       base::local({
[17:37:42.194]                         has_future <- base::requireNamespace("future", 
[17:37:42.194]                           quietly = TRUE)
[17:37:42.194]                         if (has_future) {
[17:37:42.194]                           ns <- base::getNamespace("future")
[17:37:42.194]                           version <- ns[[".package"]][["version"]]
[17:37:42.194]                           if (is.null(version)) 
[17:37:42.194]                             version <- utils::packageVersion("future")
[17:37:42.194]                         }
[17:37:42.194]                         else {
[17:37:42.194]                           version <- NULL
[17:37:42.194]                         }
[17:37:42.194]                         if (!has_future || version < "1.8.0") {
[17:37:42.194]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.194]                             "", base::R.version$version.string), 
[17:37:42.194]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.194]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.194]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.194]                               "release", "version")], collapse = " "), 
[17:37:42.194]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.194]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.194]                             info)
[17:37:42.194]                           info <- base::paste(info, collapse = "; ")
[17:37:42.194]                           if (!has_future) {
[17:37:42.194]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.194]                               info)
[17:37:42.194]                           }
[17:37:42.194]                           else {
[17:37:42.194]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.194]                               info, version)
[17:37:42.194]                           }
[17:37:42.194]                           base::stop(msg)
[17:37:42.194]                         }
[17:37:42.194]                       })
[17:37:42.194]                     }
[17:37:42.194]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.194]                     base::options(mc.cores = 1L)
[17:37:42.194]                   }
[17:37:42.194]                   ...future.strategy.old <- future::plan("list")
[17:37:42.194]                   options(future.plan = NULL)
[17:37:42.194]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.194]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.194]                 }
[17:37:42.194]                 ...future.workdir <- getwd()
[17:37:42.194]             }
[17:37:42.194]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.194]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.194]         }
[17:37:42.194]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.194]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.194]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.194]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.194]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.194]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.194]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.194]             base::names(...future.oldOptions))
[17:37:42.194]     }
[17:37:42.194]     if (FALSE) {
[17:37:42.194]     }
[17:37:42.194]     else {
[17:37:42.194]         if (TRUE) {
[17:37:42.194]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.194]                 open = "w")
[17:37:42.194]         }
[17:37:42.194]         else {
[17:37:42.194]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.194]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.194]         }
[17:37:42.194]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.194]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.194]             base::sink(type = "output", split = FALSE)
[17:37:42.194]             base::close(...future.stdout)
[17:37:42.194]         }, add = TRUE)
[17:37:42.194]     }
[17:37:42.194]     ...future.frame <- base::sys.nframe()
[17:37:42.194]     ...future.conditions <- base::list()
[17:37:42.194]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.194]     if (FALSE) {
[17:37:42.194]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.194]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.194]     }
[17:37:42.194]     ...future.result <- base::tryCatch({
[17:37:42.194]         base::withCallingHandlers({
[17:37:42.194]             ...future.value <- base::withVisible(base::local({
[17:37:42.194]                 withCallingHandlers({
[17:37:42.194]                   {
[17:37:42.194]                     do.call(function(...) {
[17:37:42.194]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.194]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.194]                         ...future.globals.maxSize)) {
[17:37:42.194]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.194]                         on.exit(options(oopts), add = TRUE)
[17:37:42.194]                       }
[17:37:42.194]                       {
[17:37:42.194]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.194]                           FUN = function(jj) {
[17:37:42.194]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.194]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.194]                               envir = globalenv(), inherits = FALSE)
[17:37:42.194]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.194]                           })
[17:37:42.194]                       }
[17:37:42.194]                     }, args = future.call.arguments)
[17:37:42.194]                   }
[17:37:42.194]                 }, immediateCondition = function(cond) {
[17:37:42.194]                   save_rds <- function (object, pathname, ...) 
[17:37:42.194]                   {
[17:37:42.194]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.194]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.194]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.194]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.194]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.194]                         fi_tmp[["mtime"]])
[17:37:42.194]                     }
[17:37:42.194]                     tryCatch({
[17:37:42.194]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.194]                     }, error = function(ex) {
[17:37:42.194]                       msg <- conditionMessage(ex)
[17:37:42.194]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.194]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.194]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.194]                         fi_tmp[["mtime"]], msg)
[17:37:42.194]                       ex$message <- msg
[17:37:42.194]                       stop(ex)
[17:37:42.194]                     })
[17:37:42.194]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.194]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.194]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.194]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.194]                       fi <- file.info(pathname)
[17:37:42.194]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.194]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.194]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.194]                         fi[["size"]], fi[["mtime"]])
[17:37:42.194]                       stop(msg)
[17:37:42.194]                     }
[17:37:42.194]                     invisible(pathname)
[17:37:42.194]                   }
[17:37:42.194]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.194]                     rootPath = tempdir()) 
[17:37:42.194]                   {
[17:37:42.194]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.194]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.194]                       tmpdir = path, fileext = ".rds")
[17:37:42.194]                     save_rds(obj, file)
[17:37:42.194]                   }
[17:37:42.194]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.194]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.194]                   {
[17:37:42.194]                     inherits <- base::inherits
[17:37:42.194]                     invokeRestart <- base::invokeRestart
[17:37:42.194]                     is.null <- base::is.null
[17:37:42.194]                     muffled <- FALSE
[17:37:42.194]                     if (inherits(cond, "message")) {
[17:37:42.194]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.194]                       if (muffled) 
[17:37:42.194]                         invokeRestart("muffleMessage")
[17:37:42.194]                     }
[17:37:42.194]                     else if (inherits(cond, "warning")) {
[17:37:42.194]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.194]                       if (muffled) 
[17:37:42.194]                         invokeRestart("muffleWarning")
[17:37:42.194]                     }
[17:37:42.194]                     else if (inherits(cond, "condition")) {
[17:37:42.194]                       if (!is.null(pattern)) {
[17:37:42.194]                         computeRestarts <- base::computeRestarts
[17:37:42.194]                         grepl <- base::grepl
[17:37:42.194]                         restarts <- computeRestarts(cond)
[17:37:42.194]                         for (restart in restarts) {
[17:37:42.194]                           name <- restart$name
[17:37:42.194]                           if (is.null(name)) 
[17:37:42.194]                             next
[17:37:42.194]                           if (!grepl(pattern, name)) 
[17:37:42.194]                             next
[17:37:42.194]                           invokeRestart(restart)
[17:37:42.194]                           muffled <- TRUE
[17:37:42.194]                           break
[17:37:42.194]                         }
[17:37:42.194]                       }
[17:37:42.194]                     }
[17:37:42.194]                     invisible(muffled)
[17:37:42.194]                   }
[17:37:42.194]                   muffleCondition(cond)
[17:37:42.194]                 })
[17:37:42.194]             }))
[17:37:42.194]             future::FutureResult(value = ...future.value$value, 
[17:37:42.194]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.194]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.194]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.194]                     ...future.globalenv.names))
[17:37:42.194]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.194]         }, condition = base::local({
[17:37:42.194]             c <- base::c
[17:37:42.194]             inherits <- base::inherits
[17:37:42.194]             invokeRestart <- base::invokeRestart
[17:37:42.194]             length <- base::length
[17:37:42.194]             list <- base::list
[17:37:42.194]             seq.int <- base::seq.int
[17:37:42.194]             signalCondition <- base::signalCondition
[17:37:42.194]             sys.calls <- base::sys.calls
[17:37:42.194]             `[[` <- base::`[[`
[17:37:42.194]             `+` <- base::`+`
[17:37:42.194]             `<<-` <- base::`<<-`
[17:37:42.194]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.194]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.194]                   3L)]
[17:37:42.194]             }
[17:37:42.194]             function(cond) {
[17:37:42.194]                 is_error <- inherits(cond, "error")
[17:37:42.194]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.194]                   NULL)
[17:37:42.194]                 if (is_error) {
[17:37:42.194]                   sessionInformation <- function() {
[17:37:42.194]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.194]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.194]                       search = base::search(), system = base::Sys.info())
[17:37:42.194]                   }
[17:37:42.194]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.194]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.194]                     cond$call), session = sessionInformation(), 
[17:37:42.194]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.194]                   signalCondition(cond)
[17:37:42.194]                 }
[17:37:42.194]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.194]                 "immediateCondition"))) {
[17:37:42.194]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.194]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.194]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.194]                   if (TRUE && !signal) {
[17:37:42.194]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.194]                     {
[17:37:42.194]                       inherits <- base::inherits
[17:37:42.194]                       invokeRestart <- base::invokeRestart
[17:37:42.194]                       is.null <- base::is.null
[17:37:42.194]                       muffled <- FALSE
[17:37:42.194]                       if (inherits(cond, "message")) {
[17:37:42.194]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.194]                         if (muffled) 
[17:37:42.194]                           invokeRestart("muffleMessage")
[17:37:42.194]                       }
[17:37:42.194]                       else if (inherits(cond, "warning")) {
[17:37:42.194]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.194]                         if (muffled) 
[17:37:42.194]                           invokeRestart("muffleWarning")
[17:37:42.194]                       }
[17:37:42.194]                       else if (inherits(cond, "condition")) {
[17:37:42.194]                         if (!is.null(pattern)) {
[17:37:42.194]                           computeRestarts <- base::computeRestarts
[17:37:42.194]                           grepl <- base::grepl
[17:37:42.194]                           restarts <- computeRestarts(cond)
[17:37:42.194]                           for (restart in restarts) {
[17:37:42.194]                             name <- restart$name
[17:37:42.194]                             if (is.null(name)) 
[17:37:42.194]                               next
[17:37:42.194]                             if (!grepl(pattern, name)) 
[17:37:42.194]                               next
[17:37:42.194]                             invokeRestart(restart)
[17:37:42.194]                             muffled <- TRUE
[17:37:42.194]                             break
[17:37:42.194]                           }
[17:37:42.194]                         }
[17:37:42.194]                       }
[17:37:42.194]                       invisible(muffled)
[17:37:42.194]                     }
[17:37:42.194]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.194]                   }
[17:37:42.194]                 }
[17:37:42.194]                 else {
[17:37:42.194]                   if (TRUE) {
[17:37:42.194]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.194]                     {
[17:37:42.194]                       inherits <- base::inherits
[17:37:42.194]                       invokeRestart <- base::invokeRestart
[17:37:42.194]                       is.null <- base::is.null
[17:37:42.194]                       muffled <- FALSE
[17:37:42.194]                       if (inherits(cond, "message")) {
[17:37:42.194]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.194]                         if (muffled) 
[17:37:42.194]                           invokeRestart("muffleMessage")
[17:37:42.194]                       }
[17:37:42.194]                       else if (inherits(cond, "warning")) {
[17:37:42.194]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.194]                         if (muffled) 
[17:37:42.194]                           invokeRestart("muffleWarning")
[17:37:42.194]                       }
[17:37:42.194]                       else if (inherits(cond, "condition")) {
[17:37:42.194]                         if (!is.null(pattern)) {
[17:37:42.194]                           computeRestarts <- base::computeRestarts
[17:37:42.194]                           grepl <- base::grepl
[17:37:42.194]                           restarts <- computeRestarts(cond)
[17:37:42.194]                           for (restart in restarts) {
[17:37:42.194]                             name <- restart$name
[17:37:42.194]                             if (is.null(name)) 
[17:37:42.194]                               next
[17:37:42.194]                             if (!grepl(pattern, name)) 
[17:37:42.194]                               next
[17:37:42.194]                             invokeRestart(restart)
[17:37:42.194]                             muffled <- TRUE
[17:37:42.194]                             break
[17:37:42.194]                           }
[17:37:42.194]                         }
[17:37:42.194]                       }
[17:37:42.194]                       invisible(muffled)
[17:37:42.194]                     }
[17:37:42.194]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.194]                   }
[17:37:42.194]                 }
[17:37:42.194]             }
[17:37:42.194]         }))
[17:37:42.194]     }, error = function(ex) {
[17:37:42.194]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.194]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.194]                 ...future.rng), started = ...future.startTime, 
[17:37:42.194]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.194]             version = "1.8"), class = "FutureResult")
[17:37:42.194]     }, finally = {
[17:37:42.194]         if (!identical(...future.workdir, getwd())) 
[17:37:42.194]             setwd(...future.workdir)
[17:37:42.194]         {
[17:37:42.194]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.194]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.194]             }
[17:37:42.194]             base::options(...future.oldOptions)
[17:37:42.194]             if (.Platform$OS.type == "windows") {
[17:37:42.194]                 old_names <- names(...future.oldEnvVars)
[17:37:42.194]                 envs <- base::Sys.getenv()
[17:37:42.194]                 names <- names(envs)
[17:37:42.194]                 common <- intersect(names, old_names)
[17:37:42.194]                 added <- setdiff(names, old_names)
[17:37:42.194]                 removed <- setdiff(old_names, names)
[17:37:42.194]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.194]                   envs[common]]
[17:37:42.194]                 NAMES <- toupper(changed)
[17:37:42.194]                 args <- list()
[17:37:42.194]                 for (kk in seq_along(NAMES)) {
[17:37:42.194]                   name <- changed[[kk]]
[17:37:42.194]                   NAME <- NAMES[[kk]]
[17:37:42.194]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.194]                     next
[17:37:42.194]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.194]                 }
[17:37:42.194]                 NAMES <- toupper(added)
[17:37:42.194]                 for (kk in seq_along(NAMES)) {
[17:37:42.194]                   name <- added[[kk]]
[17:37:42.194]                   NAME <- NAMES[[kk]]
[17:37:42.194]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.194]                     next
[17:37:42.194]                   args[[name]] <- ""
[17:37:42.194]                 }
[17:37:42.194]                 NAMES <- toupper(removed)
[17:37:42.194]                 for (kk in seq_along(NAMES)) {
[17:37:42.194]                   name <- removed[[kk]]
[17:37:42.194]                   NAME <- NAMES[[kk]]
[17:37:42.194]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.194]                     next
[17:37:42.194]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.194]                 }
[17:37:42.194]                 if (length(args) > 0) 
[17:37:42.194]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.194]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.194]             }
[17:37:42.194]             else {
[17:37:42.194]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.194]             }
[17:37:42.194]             {
[17:37:42.194]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.194]                   0L) {
[17:37:42.194]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.194]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.194]                   base::options(opts)
[17:37:42.194]                 }
[17:37:42.194]                 {
[17:37:42.194]                   {
[17:37:42.194]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.194]                     NULL
[17:37:42.194]                   }
[17:37:42.194]                   options(future.plan = NULL)
[17:37:42.194]                   if (is.na(NA_character_)) 
[17:37:42.194]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.194]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.194]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.194]                     .init = FALSE)
[17:37:42.194]                 }
[17:37:42.194]             }
[17:37:42.194]         }
[17:37:42.194]     })
[17:37:42.194]     if (TRUE) {
[17:37:42.194]         base::sink(type = "output", split = FALSE)
[17:37:42.194]         if (TRUE) {
[17:37:42.194]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.194]         }
[17:37:42.194]         else {
[17:37:42.194]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.194]         }
[17:37:42.194]         base::close(...future.stdout)
[17:37:42.194]         ...future.stdout <- NULL
[17:37:42.194]     }
[17:37:42.194]     ...future.result$conditions <- ...future.conditions
[17:37:42.194]     ...future.result$finished <- base::Sys.time()
[17:37:42.194]     ...future.result
[17:37:42.194] }
[17:37:42.196] assign_globals() ...
[17:37:42.196] List of 5
[17:37:42.196]  $ ...future.FUN            :function (...)  
[17:37:42.196]  $ future.call.arguments    : list()
[17:37:42.196]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.196]  $ ...future.elements_ii    :List of 2
[17:37:42.196]   ..$ : int 0
[17:37:42.196]   ..$ : int 0
[17:37:42.196]  $ ...future.seeds_ii       :List of 2
[17:37:42.196]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:37:42.196]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:37:42.196]  $ ...future.globals.maxSize: NULL
[17:37:42.196]  - attr(*, "where")=List of 5
[17:37:42.196]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.196]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.196]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.196]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.196]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.196]  - attr(*, "resolved")= logi FALSE
[17:37:42.196]  - attr(*, "total_size")= num 616
[17:37:42.196]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.196]  - attr(*, "already-done")= logi TRUE
[17:37:42.202] - reassign environment for ‘...future.FUN’
[17:37:42.202] - copied ‘...future.FUN’ to environment
[17:37:42.202] - copied ‘future.call.arguments’ to environment
[17:37:42.203] - copied ‘...future.elements_ii’ to environment
[17:37:42.203] - copied ‘...future.seeds_ii’ to environment
[17:37:42.203] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.203] assign_globals() ... done
[17:37:42.203] requestCore(): workers = 2
[17:37:42.205] MulticoreFuture started
[17:37:42.206] - Launch lazy future ... done
[17:37:42.206] run() for ‘MulticoreFuture’ ... done
[17:37:42.206] Created future:
[17:37:42.206] plan(): Setting new future strategy stack:
[17:37:42.207] List of future strategies:
[17:37:42.207] 1. sequential:
[17:37:42.207]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.207]    - tweaked: FALSE
[17:37:42.207]    - call: NULL
[17:37:42.208] plan(): nbrOfWorkers() = 1
[17:37:42.210] plan(): Setting new future strategy stack:
[17:37:42.210] List of future strategies:
[17:37:42.210] 1. multicore:
[17:37:42.210]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.210]    - tweaked: FALSE
[17:37:42.210]    - call: plan(strategy)
[17:37:42.216] plan(): nbrOfWorkers() = 2
[17:37:42.206] MulticoreFuture:
[17:37:42.206] Label: ‘future_replicate-1’
[17:37:42.206] Expression:
[17:37:42.206] {
[17:37:42.206]     do.call(function(...) {
[17:37:42.206]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.206]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.206]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.206]             on.exit(options(oopts), add = TRUE)
[17:37:42.206]         }
[17:37:42.206]         {
[17:37:42.206]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.206]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.206]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.206]                   envir = globalenv(), inherits = FALSE)
[17:37:42.206]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.206]             })
[17:37:42.206]         }
[17:37:42.206]     }, args = future.call.arguments)
[17:37:42.206] }
[17:37:42.206] Lazy evaluation: FALSE
[17:37:42.206] Asynchronous evaluation: TRUE
[17:37:42.206] Local evaluation: TRUE
[17:37:42.206] Environment: R_GlobalEnv
[17:37:42.206] Capture standard output: TRUE
[17:37:42.206] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.206] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:42.206] Packages: <none>
[17:37:42.206] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.206] Resolved: TRUE
[17:37:42.206] Value: <not collected>
[17:37:42.206] Conditions captured: <none>
[17:37:42.206] Early signaling: FALSE
[17:37:42.206] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.206] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.218] Chunk #1 of 2 ... DONE
[17:37:42.218] Chunk #2 of 2 ...
[17:37:42.218]  - Finding globals in 'X' for chunk #2 ...
[17:37:42.218] getGlobalsAndPackages() ...
[17:37:42.218] Searching for globals...
[17:37:42.219] 
[17:37:42.219] Searching for globals ... DONE
[17:37:42.219] - globals: [0] <none>
[17:37:42.219] getGlobalsAndPackages() ... DONE
[17:37:42.219]    + additional globals found: [n=0] 
[17:37:42.220]    + additional namespaces needed: [n=0] 
[17:37:42.220]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:42.220]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.220]  - seeds: [3] <seeds>
[17:37:42.220]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.220] getGlobalsAndPackages() ...
[17:37:42.221] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.221] Resolving globals: FALSE
[17:37:42.221] Tweak future expression to call with '...' arguments ...
[17:37:42.221] {
[17:37:42.221]     do.call(function(...) {
[17:37:42.221]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.221]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.221]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.221]             on.exit(options(oopts), add = TRUE)
[17:37:42.221]         }
[17:37:42.221]         {
[17:37:42.221]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.221]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.221]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.221]                   envir = globalenv(), inherits = FALSE)
[17:37:42.221]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.221]             })
[17:37:42.221]         }
[17:37:42.221]     }, args = future.call.arguments)
[17:37:42.221] }
[17:37:42.222] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.222] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.222] 
[17:37:42.223] getGlobalsAndPackages() ... DONE
[17:37:42.223] run() for ‘Future’ ...
[17:37:42.223] - state: ‘created’
[17:37:42.224] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.228] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.229] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.229]   - Field: ‘label’
[17:37:42.229]   - Field: ‘local’
[17:37:42.229]   - Field: ‘owner’
[17:37:42.229]   - Field: ‘envir’
[17:37:42.229]   - Field: ‘workers’
[17:37:42.230]   - Field: ‘packages’
[17:37:42.230]   - Field: ‘gc’
[17:37:42.230]   - Field: ‘job’
[17:37:42.230]   - Field: ‘conditions’
[17:37:42.230]   - Field: ‘expr’
[17:37:42.230]   - Field: ‘uuid’
[17:37:42.230]   - Field: ‘seed’
[17:37:42.231]   - Field: ‘version’
[17:37:42.231]   - Field: ‘result’
[17:37:42.231]   - Field: ‘asynchronous’
[17:37:42.231]   - Field: ‘calls’
[17:37:42.231]   - Field: ‘globals’
[17:37:42.231]   - Field: ‘stdout’
[17:37:42.231]   - Field: ‘earlySignal’
[17:37:42.231]   - Field: ‘lazy’
[17:37:42.232]   - Field: ‘state’
[17:37:42.232] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.232] - Launch lazy future ...
[17:37:42.232] Packages needed by the future expression (n = 0): <none>
[17:37:42.233] Packages needed by future strategies (n = 0): <none>
[17:37:42.233] {
[17:37:42.233]     {
[17:37:42.233]         {
[17:37:42.233]             ...future.startTime <- base::Sys.time()
[17:37:42.233]             {
[17:37:42.233]                 {
[17:37:42.233]                   {
[17:37:42.233]                     {
[17:37:42.233]                       base::local({
[17:37:42.233]                         has_future <- base::requireNamespace("future", 
[17:37:42.233]                           quietly = TRUE)
[17:37:42.233]                         if (has_future) {
[17:37:42.233]                           ns <- base::getNamespace("future")
[17:37:42.233]                           version <- ns[[".package"]][["version"]]
[17:37:42.233]                           if (is.null(version)) 
[17:37:42.233]                             version <- utils::packageVersion("future")
[17:37:42.233]                         }
[17:37:42.233]                         else {
[17:37:42.233]                           version <- NULL
[17:37:42.233]                         }
[17:37:42.233]                         if (!has_future || version < "1.8.0") {
[17:37:42.233]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.233]                             "", base::R.version$version.string), 
[17:37:42.233]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.233]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.233]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.233]                               "release", "version")], collapse = " "), 
[17:37:42.233]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.233]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.233]                             info)
[17:37:42.233]                           info <- base::paste(info, collapse = "; ")
[17:37:42.233]                           if (!has_future) {
[17:37:42.233]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.233]                               info)
[17:37:42.233]                           }
[17:37:42.233]                           else {
[17:37:42.233]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.233]                               info, version)
[17:37:42.233]                           }
[17:37:42.233]                           base::stop(msg)
[17:37:42.233]                         }
[17:37:42.233]                       })
[17:37:42.233]                     }
[17:37:42.233]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.233]                     base::options(mc.cores = 1L)
[17:37:42.233]                   }
[17:37:42.233]                   ...future.strategy.old <- future::plan("list")
[17:37:42.233]                   options(future.plan = NULL)
[17:37:42.233]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.233]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.233]                 }
[17:37:42.233]                 ...future.workdir <- getwd()
[17:37:42.233]             }
[17:37:42.233]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.233]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.233]         }
[17:37:42.233]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.233]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.233]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.233]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.233]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.233]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.233]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.233]             base::names(...future.oldOptions))
[17:37:42.233]     }
[17:37:42.233]     if (FALSE) {
[17:37:42.233]     }
[17:37:42.233]     else {
[17:37:42.233]         if (TRUE) {
[17:37:42.233]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.233]                 open = "w")
[17:37:42.233]         }
[17:37:42.233]         else {
[17:37:42.233]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.233]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.233]         }
[17:37:42.233]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.233]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.233]             base::sink(type = "output", split = FALSE)
[17:37:42.233]             base::close(...future.stdout)
[17:37:42.233]         }, add = TRUE)
[17:37:42.233]     }
[17:37:42.233]     ...future.frame <- base::sys.nframe()
[17:37:42.233]     ...future.conditions <- base::list()
[17:37:42.233]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.233]     if (FALSE) {
[17:37:42.233]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.233]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.233]     }
[17:37:42.233]     ...future.result <- base::tryCatch({
[17:37:42.233]         base::withCallingHandlers({
[17:37:42.233]             ...future.value <- base::withVisible(base::local({
[17:37:42.233]                 withCallingHandlers({
[17:37:42.233]                   {
[17:37:42.233]                     do.call(function(...) {
[17:37:42.233]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.233]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.233]                         ...future.globals.maxSize)) {
[17:37:42.233]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.233]                         on.exit(options(oopts), add = TRUE)
[17:37:42.233]                       }
[17:37:42.233]                       {
[17:37:42.233]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.233]                           FUN = function(jj) {
[17:37:42.233]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.233]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.233]                               envir = globalenv(), inherits = FALSE)
[17:37:42.233]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.233]                           })
[17:37:42.233]                       }
[17:37:42.233]                     }, args = future.call.arguments)
[17:37:42.233]                   }
[17:37:42.233]                 }, immediateCondition = function(cond) {
[17:37:42.233]                   save_rds <- function (object, pathname, ...) 
[17:37:42.233]                   {
[17:37:42.233]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.233]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.233]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.233]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.233]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.233]                         fi_tmp[["mtime"]])
[17:37:42.233]                     }
[17:37:42.233]                     tryCatch({
[17:37:42.233]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.233]                     }, error = function(ex) {
[17:37:42.233]                       msg <- conditionMessage(ex)
[17:37:42.233]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.233]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.233]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.233]                         fi_tmp[["mtime"]], msg)
[17:37:42.233]                       ex$message <- msg
[17:37:42.233]                       stop(ex)
[17:37:42.233]                     })
[17:37:42.233]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.233]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.233]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.233]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.233]                       fi <- file.info(pathname)
[17:37:42.233]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.233]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.233]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.233]                         fi[["size"]], fi[["mtime"]])
[17:37:42.233]                       stop(msg)
[17:37:42.233]                     }
[17:37:42.233]                     invisible(pathname)
[17:37:42.233]                   }
[17:37:42.233]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.233]                     rootPath = tempdir()) 
[17:37:42.233]                   {
[17:37:42.233]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.233]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.233]                       tmpdir = path, fileext = ".rds")
[17:37:42.233]                     save_rds(obj, file)
[17:37:42.233]                   }
[17:37:42.233]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.233]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.233]                   {
[17:37:42.233]                     inherits <- base::inherits
[17:37:42.233]                     invokeRestart <- base::invokeRestart
[17:37:42.233]                     is.null <- base::is.null
[17:37:42.233]                     muffled <- FALSE
[17:37:42.233]                     if (inherits(cond, "message")) {
[17:37:42.233]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.233]                       if (muffled) 
[17:37:42.233]                         invokeRestart("muffleMessage")
[17:37:42.233]                     }
[17:37:42.233]                     else if (inherits(cond, "warning")) {
[17:37:42.233]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.233]                       if (muffled) 
[17:37:42.233]                         invokeRestart("muffleWarning")
[17:37:42.233]                     }
[17:37:42.233]                     else if (inherits(cond, "condition")) {
[17:37:42.233]                       if (!is.null(pattern)) {
[17:37:42.233]                         computeRestarts <- base::computeRestarts
[17:37:42.233]                         grepl <- base::grepl
[17:37:42.233]                         restarts <- computeRestarts(cond)
[17:37:42.233]                         for (restart in restarts) {
[17:37:42.233]                           name <- restart$name
[17:37:42.233]                           if (is.null(name)) 
[17:37:42.233]                             next
[17:37:42.233]                           if (!grepl(pattern, name)) 
[17:37:42.233]                             next
[17:37:42.233]                           invokeRestart(restart)
[17:37:42.233]                           muffled <- TRUE
[17:37:42.233]                           break
[17:37:42.233]                         }
[17:37:42.233]                       }
[17:37:42.233]                     }
[17:37:42.233]                     invisible(muffled)
[17:37:42.233]                   }
[17:37:42.233]                   muffleCondition(cond)
[17:37:42.233]                 })
[17:37:42.233]             }))
[17:37:42.233]             future::FutureResult(value = ...future.value$value, 
[17:37:42.233]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.233]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.233]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.233]                     ...future.globalenv.names))
[17:37:42.233]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.233]         }, condition = base::local({
[17:37:42.233]             c <- base::c
[17:37:42.233]             inherits <- base::inherits
[17:37:42.233]             invokeRestart <- base::invokeRestart
[17:37:42.233]             length <- base::length
[17:37:42.233]             list <- base::list
[17:37:42.233]             seq.int <- base::seq.int
[17:37:42.233]             signalCondition <- base::signalCondition
[17:37:42.233]             sys.calls <- base::sys.calls
[17:37:42.233]             `[[` <- base::`[[`
[17:37:42.233]             `+` <- base::`+`
[17:37:42.233]             `<<-` <- base::`<<-`
[17:37:42.233]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.233]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.233]                   3L)]
[17:37:42.233]             }
[17:37:42.233]             function(cond) {
[17:37:42.233]                 is_error <- inherits(cond, "error")
[17:37:42.233]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.233]                   NULL)
[17:37:42.233]                 if (is_error) {
[17:37:42.233]                   sessionInformation <- function() {
[17:37:42.233]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.233]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.233]                       search = base::search(), system = base::Sys.info())
[17:37:42.233]                   }
[17:37:42.233]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.233]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.233]                     cond$call), session = sessionInformation(), 
[17:37:42.233]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.233]                   signalCondition(cond)
[17:37:42.233]                 }
[17:37:42.233]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.233]                 "immediateCondition"))) {
[17:37:42.233]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.233]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.233]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.233]                   if (TRUE && !signal) {
[17:37:42.233]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.233]                     {
[17:37:42.233]                       inherits <- base::inherits
[17:37:42.233]                       invokeRestart <- base::invokeRestart
[17:37:42.233]                       is.null <- base::is.null
[17:37:42.233]                       muffled <- FALSE
[17:37:42.233]                       if (inherits(cond, "message")) {
[17:37:42.233]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.233]                         if (muffled) 
[17:37:42.233]                           invokeRestart("muffleMessage")
[17:37:42.233]                       }
[17:37:42.233]                       else if (inherits(cond, "warning")) {
[17:37:42.233]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.233]                         if (muffled) 
[17:37:42.233]                           invokeRestart("muffleWarning")
[17:37:42.233]                       }
[17:37:42.233]                       else if (inherits(cond, "condition")) {
[17:37:42.233]                         if (!is.null(pattern)) {
[17:37:42.233]                           computeRestarts <- base::computeRestarts
[17:37:42.233]                           grepl <- base::grepl
[17:37:42.233]                           restarts <- computeRestarts(cond)
[17:37:42.233]                           for (restart in restarts) {
[17:37:42.233]                             name <- restart$name
[17:37:42.233]                             if (is.null(name)) 
[17:37:42.233]                               next
[17:37:42.233]                             if (!grepl(pattern, name)) 
[17:37:42.233]                               next
[17:37:42.233]                             invokeRestart(restart)
[17:37:42.233]                             muffled <- TRUE
[17:37:42.233]                             break
[17:37:42.233]                           }
[17:37:42.233]                         }
[17:37:42.233]                       }
[17:37:42.233]                       invisible(muffled)
[17:37:42.233]                     }
[17:37:42.233]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.233]                   }
[17:37:42.233]                 }
[17:37:42.233]                 else {
[17:37:42.233]                   if (TRUE) {
[17:37:42.233]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.233]                     {
[17:37:42.233]                       inherits <- base::inherits
[17:37:42.233]                       invokeRestart <- base::invokeRestart
[17:37:42.233]                       is.null <- base::is.null
[17:37:42.233]                       muffled <- FALSE
[17:37:42.233]                       if (inherits(cond, "message")) {
[17:37:42.233]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.233]                         if (muffled) 
[17:37:42.233]                           invokeRestart("muffleMessage")
[17:37:42.233]                       }
[17:37:42.233]                       else if (inherits(cond, "warning")) {
[17:37:42.233]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.233]                         if (muffled) 
[17:37:42.233]                           invokeRestart("muffleWarning")
[17:37:42.233]                       }
[17:37:42.233]                       else if (inherits(cond, "condition")) {
[17:37:42.233]                         if (!is.null(pattern)) {
[17:37:42.233]                           computeRestarts <- base::computeRestarts
[17:37:42.233]                           grepl <- base::grepl
[17:37:42.233]                           restarts <- computeRestarts(cond)
[17:37:42.233]                           for (restart in restarts) {
[17:37:42.233]                             name <- restart$name
[17:37:42.233]                             if (is.null(name)) 
[17:37:42.233]                               next
[17:37:42.233]                             if (!grepl(pattern, name)) 
[17:37:42.233]                               next
[17:37:42.233]                             invokeRestart(restart)
[17:37:42.233]                             muffled <- TRUE
[17:37:42.233]                             break
[17:37:42.233]                           }
[17:37:42.233]                         }
[17:37:42.233]                       }
[17:37:42.233]                       invisible(muffled)
[17:37:42.233]                     }
[17:37:42.233]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.233]                   }
[17:37:42.233]                 }
[17:37:42.233]             }
[17:37:42.233]         }))
[17:37:42.233]     }, error = function(ex) {
[17:37:42.233]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.233]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.233]                 ...future.rng), started = ...future.startTime, 
[17:37:42.233]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.233]             version = "1.8"), class = "FutureResult")
[17:37:42.233]     }, finally = {
[17:37:42.233]         if (!identical(...future.workdir, getwd())) 
[17:37:42.233]             setwd(...future.workdir)
[17:37:42.233]         {
[17:37:42.233]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.233]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.233]             }
[17:37:42.233]             base::options(...future.oldOptions)
[17:37:42.233]             if (.Platform$OS.type == "windows") {
[17:37:42.233]                 old_names <- names(...future.oldEnvVars)
[17:37:42.233]                 envs <- base::Sys.getenv()
[17:37:42.233]                 names <- names(envs)
[17:37:42.233]                 common <- intersect(names, old_names)
[17:37:42.233]                 added <- setdiff(names, old_names)
[17:37:42.233]                 removed <- setdiff(old_names, names)
[17:37:42.233]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.233]                   envs[common]]
[17:37:42.233]                 NAMES <- toupper(changed)
[17:37:42.233]                 args <- list()
[17:37:42.233]                 for (kk in seq_along(NAMES)) {
[17:37:42.233]                   name <- changed[[kk]]
[17:37:42.233]                   NAME <- NAMES[[kk]]
[17:37:42.233]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.233]                     next
[17:37:42.233]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.233]                 }
[17:37:42.233]                 NAMES <- toupper(added)
[17:37:42.233]                 for (kk in seq_along(NAMES)) {
[17:37:42.233]                   name <- added[[kk]]
[17:37:42.233]                   NAME <- NAMES[[kk]]
[17:37:42.233]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.233]                     next
[17:37:42.233]                   args[[name]] <- ""
[17:37:42.233]                 }
[17:37:42.233]                 NAMES <- toupper(removed)
[17:37:42.233]                 for (kk in seq_along(NAMES)) {
[17:37:42.233]                   name <- removed[[kk]]
[17:37:42.233]                   NAME <- NAMES[[kk]]
[17:37:42.233]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.233]                     next
[17:37:42.233]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.233]                 }
[17:37:42.233]                 if (length(args) > 0) 
[17:37:42.233]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.233]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.233]             }
[17:37:42.233]             else {
[17:37:42.233]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.233]             }
[17:37:42.233]             {
[17:37:42.233]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.233]                   0L) {
[17:37:42.233]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.233]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.233]                   base::options(opts)
[17:37:42.233]                 }
[17:37:42.233]                 {
[17:37:42.233]                   {
[17:37:42.233]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.233]                     NULL
[17:37:42.233]                   }
[17:37:42.233]                   options(future.plan = NULL)
[17:37:42.233]                   if (is.na(NA_character_)) 
[17:37:42.233]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.233]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.233]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.233]                     .init = FALSE)
[17:37:42.233]                 }
[17:37:42.233]             }
[17:37:42.233]         }
[17:37:42.233]     })
[17:37:42.233]     if (TRUE) {
[17:37:42.233]         base::sink(type = "output", split = FALSE)
[17:37:42.233]         if (TRUE) {
[17:37:42.233]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.233]         }
[17:37:42.233]         else {
[17:37:42.233]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.233]         }
[17:37:42.233]         base::close(...future.stdout)
[17:37:42.233]         ...future.stdout <- NULL
[17:37:42.233]     }
[17:37:42.233]     ...future.result$conditions <- ...future.conditions
[17:37:42.233]     ...future.result$finished <- base::Sys.time()
[17:37:42.233]     ...future.result
[17:37:42.233] }
[17:37:42.237] assign_globals() ...
[17:37:42.237] List of 5
[17:37:42.237]  $ ...future.FUN            :function (...)  
[17:37:42.237]  $ future.call.arguments    : list()
[17:37:42.237]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.237]  $ ...future.elements_ii    :List of 3
[17:37:42.237]   ..$ : int 0
[17:37:42.237]   ..$ : int 0
[17:37:42.237]   ..$ : int 0
[17:37:42.237]  $ ...future.seeds_ii       :List of 3
[17:37:42.237]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:37:42.237]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:37:42.237]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:37:42.237]  $ ...future.globals.maxSize: NULL
[17:37:42.237]  - attr(*, "where")=List of 5
[17:37:42.237]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.237]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.237]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.237]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.237]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.237]  - attr(*, "resolved")= logi FALSE
[17:37:42.237]  - attr(*, "total_size")= num 616
[17:37:42.237]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.237]  - attr(*, "already-done")= logi TRUE
[17:37:42.250] - reassign environment for ‘...future.FUN’
[17:37:42.250] - copied ‘...future.FUN’ to environment
[17:37:42.250] - copied ‘future.call.arguments’ to environment
[17:37:42.251] - copied ‘...future.elements_ii’ to environment
[17:37:42.251] - copied ‘...future.seeds_ii’ to environment
[17:37:42.251] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.251] assign_globals() ... done
[17:37:42.251] requestCore(): workers = 2
[17:37:42.253] MulticoreFuture started
[17:37:42.254] - Launch lazy future ... done
[17:37:42.254] run() for ‘MulticoreFuture’ ... done
[17:37:42.255] Created future:
[17:37:42.255] plan(): Setting new future strategy stack:
[17:37:42.255] List of future strategies:
[17:37:42.255] 1. sequential:
[17:37:42.255]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.255]    - tweaked: FALSE
[17:37:42.255]    - call: NULL
[17:37:42.256] plan(): nbrOfWorkers() = 1
[17:37:42.259] plan(): Setting new future strategy stack:
[17:37:42.259] List of future strategies:
[17:37:42.259] 1. multicore:
[17:37:42.259]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.259]    - tweaked: FALSE
[17:37:42.259]    - call: plan(strategy)
[17:37:42.264] plan(): nbrOfWorkers() = 2
[17:37:42.255] MulticoreFuture:
[17:37:42.255] Label: ‘future_replicate-2’
[17:37:42.255] Expression:
[17:37:42.255] {
[17:37:42.255]     do.call(function(...) {
[17:37:42.255]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.255]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.255]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.255]             on.exit(options(oopts), add = TRUE)
[17:37:42.255]         }
[17:37:42.255]         {
[17:37:42.255]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.255]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.255]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.255]                   envir = globalenv(), inherits = FALSE)
[17:37:42.255]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.255]             })
[17:37:42.255]         }
[17:37:42.255]     }, args = future.call.arguments)
[17:37:42.255] }
[17:37:42.255] Lazy evaluation: FALSE
[17:37:42.255] Asynchronous evaluation: TRUE
[17:37:42.255] Local evaluation: TRUE
[17:37:42.255] Environment: R_GlobalEnv
[17:37:42.255] Capture standard output: TRUE
[17:37:42.255] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.255] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:42.255] Packages: <none>
[17:37:42.255] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.255] Resolved: TRUE
[17:37:42.255] Value: <not collected>
[17:37:42.255] Conditions captured: <none>
[17:37:42.255] Early signaling: FALSE
[17:37:42.255] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.255] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.265] Chunk #2 of 2 ... DONE
[17:37:42.266] Launching 2 futures (chunks) ... DONE
[17:37:42.266] Resolving 2 futures (chunks) ...
[17:37:42.266] resolve() on list ...
[17:37:42.266]  recursive: 0
[17:37:42.266]  length: 2
[17:37:42.266] 
[17:37:42.267] Future #1
[17:37:42.267] result() for MulticoreFuture ...
[17:37:42.268] result() for MulticoreFuture ...
[17:37:42.268] result() for MulticoreFuture ... done
[17:37:42.268] result() for MulticoreFuture ... done
[17:37:42.268] result() for MulticoreFuture ...
[17:37:42.268] result() for MulticoreFuture ... done
[17:37:42.269] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:37:42.269] - nx: 2
[17:37:42.269] - relay: TRUE
[17:37:42.269] - stdout: TRUE
[17:37:42.269] - signal: TRUE
[17:37:42.269] - resignal: FALSE
[17:37:42.269] - force: TRUE
[17:37:42.270] - relayed: [n=2] FALSE, FALSE
[17:37:42.270] - queued futures: [n=2] FALSE, FALSE
[17:37:42.270]  - until=1
[17:37:42.270]  - relaying element #1
[17:37:42.270] result() for MulticoreFuture ...
[17:37:42.270] result() for MulticoreFuture ... done
[17:37:42.270] result() for MulticoreFuture ...
[17:37:42.271] result() for MulticoreFuture ... done
[17:37:42.271] result() for MulticoreFuture ...
[17:37:42.271] result() for MulticoreFuture ... done
[17:37:42.271] result() for MulticoreFuture ...
[17:37:42.271] result() for MulticoreFuture ... done
[17:37:42.271] - relayed: [n=2] TRUE, FALSE
[17:37:42.271] - queued futures: [n=2] TRUE, FALSE
[17:37:42.272] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:37:42.272]  length: 1 (resolved future 1)
[17:37:42.272] Future #2
[17:37:42.272] result() for MulticoreFuture ...
[17:37:42.273] result() for MulticoreFuture ...
[17:37:42.273] result() for MulticoreFuture ... done
[17:37:42.273] result() for MulticoreFuture ... done
[17:37:42.273] result() for MulticoreFuture ...
[17:37:42.274] result() for MulticoreFuture ... done
[17:37:42.274] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:37:42.274] - nx: 2
[17:37:42.274] - relay: TRUE
[17:37:42.274] - stdout: TRUE
[17:37:42.274] - signal: TRUE
[17:37:42.274] - resignal: FALSE
[17:37:42.275] - force: TRUE
[17:37:42.275] - relayed: [n=2] TRUE, FALSE
[17:37:42.275] - queued futures: [n=2] TRUE, FALSE
[17:37:42.275]  - until=2
[17:37:42.275]  - relaying element #2
[17:37:42.275] result() for MulticoreFuture ...
[17:37:42.275] result() for MulticoreFuture ... done
[17:37:42.275] result() for MulticoreFuture ...
[17:37:42.276] result() for MulticoreFuture ... done
[17:37:42.276] result() for MulticoreFuture ...
[17:37:42.276] result() for MulticoreFuture ... done
[17:37:42.276] result() for MulticoreFuture ...
[17:37:42.276] result() for MulticoreFuture ... done
[17:37:42.276] - relayed: [n=2] TRUE, TRUE
[17:37:42.276] - queued futures: [n=2] TRUE, TRUE
[17:37:42.276] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:37:42.277]  length: 0 (resolved future 2)
[17:37:42.277] Relaying remaining futures
[17:37:42.277] signalConditionsASAP(NULL, pos=0) ...
[17:37:42.277] - nx: 2
[17:37:42.277] - relay: TRUE
[17:37:42.277] - stdout: TRUE
[17:37:42.277] - signal: TRUE
[17:37:42.277] - resignal: FALSE
[17:37:42.277] - force: TRUE
[17:37:42.278] - relayed: [n=2] TRUE, TRUE
[17:37:42.278] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:42.278] - relayed: [n=2] TRUE, TRUE
[17:37:42.278] - queued futures: [n=2] TRUE, TRUE
[17:37:42.278] signalConditionsASAP(NULL, pos=0) ... done
[17:37:42.278] resolve() on list ... DONE
[17:37:42.278] result() for MulticoreFuture ...
[17:37:42.278] result() for MulticoreFuture ... done
[17:37:42.278] result() for MulticoreFuture ...
[17:37:42.279] result() for MulticoreFuture ... done
[17:37:42.279] result() for MulticoreFuture ...
[17:37:42.279] result() for MulticoreFuture ... done
[17:37:42.279] result() for MulticoreFuture ...
[17:37:42.279] result() for MulticoreFuture ... done
[17:37:42.279]  - Number of value chunks collected: 2
[17:37:42.279] Resolving 2 futures (chunks) ... DONE
[17:37:42.279] Reducing values from 2 chunks ...
[17:37:42.279]  - Number of values collected after concatenation: 5
[17:37:42.280]  - Number of values expected: 5
[17:37:42.280] Reducing values from 2 chunks ... DONE
[17:37:42.280] future_lapply() ... DONE
[17:37:42.280] future_lapply() ...
[17:37:42.281] Generating random seeds ...
[17:37:42.281] Generating random seed streams for 5 elements ...
[17:37:42.281] Generating random seed streams for 5 elements ... DONE
[17:37:42.281] Generating random seeds ... DONE
[17:37:42.281] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:42.286] Number of chunks: 2
[17:37:42.286] getGlobalsAndPackagesXApply() ...
[17:37:42.286]  - future.globals: TRUE
[17:37:42.286] getGlobalsAndPackages() ...
[17:37:42.286] Searching for globals...
[17:37:42.288] - globals found: [2] ‘FUN’, ‘sample’
[17:37:42.288] Searching for globals ... DONE
[17:37:42.288] Resolving globals: FALSE
[17:37:42.288] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:42.289] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:42.289] - globals: [1] ‘FUN’
[17:37:42.289] 
[17:37:42.289] getGlobalsAndPackages() ... DONE
[17:37:42.289]  - globals found/used: [n=1] ‘FUN’
[17:37:42.289]  - needed namespaces: [n=0] 
[17:37:42.289] Finding globals ... DONE
[17:37:42.290]  - use_args: TRUE
[17:37:42.290]  - Getting '...' globals ...
[17:37:42.290] resolve() on list ...
[17:37:42.290]  recursive: 0
[17:37:42.290]  length: 1
[17:37:42.290]  elements: ‘...’
[17:37:42.291]  length: 0 (resolved future 1)
[17:37:42.291] resolve() on list ... DONE
[17:37:42.291]    - '...' content: [n=0] 
[17:37:42.291] List of 1
[17:37:42.291]  $ ...: list()
[17:37:42.291]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.291]  - attr(*, "where")=List of 1
[17:37:42.291]   ..$ ...:<environment: 0x5640c088d608> 
[17:37:42.291]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.291]  - attr(*, "resolved")= logi TRUE
[17:37:42.291]  - attr(*, "total_size")= num NA
[17:37:42.296]  - Getting '...' globals ... DONE
[17:37:42.296] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:42.296] List of 2
[17:37:42.296]  $ ...future.FUN:function (...)  
[17:37:42.296]  $ ...          : list()
[17:37:42.296]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.296]  - attr(*, "where")=List of 2
[17:37:42.296]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:42.296]   ..$ ...          :<environment: 0x5640c088d608> 
[17:37:42.296]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.296]  - attr(*, "resolved")= logi FALSE
[17:37:42.296]  - attr(*, "total_size")= num 616
[17:37:42.299] Packages to be attached in all futures: [n=0] 
[17:37:42.300] getGlobalsAndPackagesXApply() ... DONE
[17:37:42.300] Number of futures (= number of chunks): 2
[17:37:42.300] Launching 2 futures (chunks) ...
[17:37:42.300] Chunk #1 of 2 ...
[17:37:42.300]  - Finding globals in 'X' for chunk #1 ...
[17:37:42.300] getGlobalsAndPackages() ...
[17:37:42.300] Searching for globals...
[17:37:42.301] 
[17:37:42.301] Searching for globals ... DONE
[17:37:42.301] - globals: [0] <none>
[17:37:42.301] getGlobalsAndPackages() ... DONE
[17:37:42.301]    + additional globals found: [n=0] 
[17:37:42.301]    + additional namespaces needed: [n=0] 
[17:37:42.301]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:42.301]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.301]  - seeds: [2] <seeds>
[17:37:42.302]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.302] getGlobalsAndPackages() ...
[17:37:42.302] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.302] Resolving globals: FALSE
[17:37:42.302] Tweak future expression to call with '...' arguments ...
[17:37:42.302] {
[17:37:42.302]     do.call(function(...) {
[17:37:42.302]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.302]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.302]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.302]             on.exit(options(oopts), add = TRUE)
[17:37:42.302]         }
[17:37:42.302]         {
[17:37:42.302]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.302]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.302]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.302]                   envir = globalenv(), inherits = FALSE)
[17:37:42.302]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.302]             })
[17:37:42.302]         }
[17:37:42.302]     }, args = future.call.arguments)
[17:37:42.302] }
[17:37:42.302] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.303] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.303] 
[17:37:42.303] getGlobalsAndPackages() ... DONE
[17:37:42.303] run() for ‘Future’ ...
[17:37:42.303] - state: ‘created’
[17:37:42.303] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.307] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.307] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.307]   - Field: ‘label’
[17:37:42.307]   - Field: ‘local’
[17:37:42.308]   - Field: ‘owner’
[17:37:42.308]   - Field: ‘envir’
[17:37:42.308]   - Field: ‘workers’
[17:37:42.308]   - Field: ‘packages’
[17:37:42.308]   - Field: ‘gc’
[17:37:42.308]   - Field: ‘job’
[17:37:42.308]   - Field: ‘conditions’
[17:37:42.308]   - Field: ‘expr’
[17:37:42.308]   - Field: ‘uuid’
[17:37:42.308]   - Field: ‘seed’
[17:37:42.309]   - Field: ‘version’
[17:37:42.309]   - Field: ‘result’
[17:37:42.309]   - Field: ‘asynchronous’
[17:37:42.309]   - Field: ‘calls’
[17:37:42.309]   - Field: ‘globals’
[17:37:42.309]   - Field: ‘stdout’
[17:37:42.309]   - Field: ‘earlySignal’
[17:37:42.309]   - Field: ‘lazy’
[17:37:42.309]   - Field: ‘state’
[17:37:42.309] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.309] - Launch lazy future ...
[17:37:42.310] Packages needed by the future expression (n = 0): <none>
[17:37:42.310] Packages needed by future strategies (n = 0): <none>
[17:37:42.310] {
[17:37:42.310]     {
[17:37:42.310]         {
[17:37:42.310]             ...future.startTime <- base::Sys.time()
[17:37:42.310]             {
[17:37:42.310]                 {
[17:37:42.310]                   {
[17:37:42.310]                     {
[17:37:42.310]                       base::local({
[17:37:42.310]                         has_future <- base::requireNamespace("future", 
[17:37:42.310]                           quietly = TRUE)
[17:37:42.310]                         if (has_future) {
[17:37:42.310]                           ns <- base::getNamespace("future")
[17:37:42.310]                           version <- ns[[".package"]][["version"]]
[17:37:42.310]                           if (is.null(version)) 
[17:37:42.310]                             version <- utils::packageVersion("future")
[17:37:42.310]                         }
[17:37:42.310]                         else {
[17:37:42.310]                           version <- NULL
[17:37:42.310]                         }
[17:37:42.310]                         if (!has_future || version < "1.8.0") {
[17:37:42.310]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.310]                             "", base::R.version$version.string), 
[17:37:42.310]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.310]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.310]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.310]                               "release", "version")], collapse = " "), 
[17:37:42.310]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.310]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.310]                             info)
[17:37:42.310]                           info <- base::paste(info, collapse = "; ")
[17:37:42.310]                           if (!has_future) {
[17:37:42.310]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.310]                               info)
[17:37:42.310]                           }
[17:37:42.310]                           else {
[17:37:42.310]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.310]                               info, version)
[17:37:42.310]                           }
[17:37:42.310]                           base::stop(msg)
[17:37:42.310]                         }
[17:37:42.310]                       })
[17:37:42.310]                     }
[17:37:42.310]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.310]                     base::options(mc.cores = 1L)
[17:37:42.310]                   }
[17:37:42.310]                   ...future.strategy.old <- future::plan("list")
[17:37:42.310]                   options(future.plan = NULL)
[17:37:42.310]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.310]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.310]                 }
[17:37:42.310]                 ...future.workdir <- getwd()
[17:37:42.310]             }
[17:37:42.310]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.310]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.310]         }
[17:37:42.310]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.310]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.310]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.310]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.310]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.310]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.310]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.310]             base::names(...future.oldOptions))
[17:37:42.310]     }
[17:37:42.310]     if (FALSE) {
[17:37:42.310]     }
[17:37:42.310]     else {
[17:37:42.310]         if (TRUE) {
[17:37:42.310]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.310]                 open = "w")
[17:37:42.310]         }
[17:37:42.310]         else {
[17:37:42.310]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.310]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.310]         }
[17:37:42.310]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.310]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.310]             base::sink(type = "output", split = FALSE)
[17:37:42.310]             base::close(...future.stdout)
[17:37:42.310]         }, add = TRUE)
[17:37:42.310]     }
[17:37:42.310]     ...future.frame <- base::sys.nframe()
[17:37:42.310]     ...future.conditions <- base::list()
[17:37:42.310]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.310]     if (FALSE) {
[17:37:42.310]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.310]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.310]     }
[17:37:42.310]     ...future.result <- base::tryCatch({
[17:37:42.310]         base::withCallingHandlers({
[17:37:42.310]             ...future.value <- base::withVisible(base::local({
[17:37:42.310]                 withCallingHandlers({
[17:37:42.310]                   {
[17:37:42.310]                     do.call(function(...) {
[17:37:42.310]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.310]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.310]                         ...future.globals.maxSize)) {
[17:37:42.310]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.310]                         on.exit(options(oopts), add = TRUE)
[17:37:42.310]                       }
[17:37:42.310]                       {
[17:37:42.310]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.310]                           FUN = function(jj) {
[17:37:42.310]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.310]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.310]                               envir = globalenv(), inherits = FALSE)
[17:37:42.310]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.310]                           })
[17:37:42.310]                       }
[17:37:42.310]                     }, args = future.call.arguments)
[17:37:42.310]                   }
[17:37:42.310]                 }, immediateCondition = function(cond) {
[17:37:42.310]                   save_rds <- function (object, pathname, ...) 
[17:37:42.310]                   {
[17:37:42.310]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.310]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.310]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.310]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.310]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.310]                         fi_tmp[["mtime"]])
[17:37:42.310]                     }
[17:37:42.310]                     tryCatch({
[17:37:42.310]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.310]                     }, error = function(ex) {
[17:37:42.310]                       msg <- conditionMessage(ex)
[17:37:42.310]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.310]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.310]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.310]                         fi_tmp[["mtime"]], msg)
[17:37:42.310]                       ex$message <- msg
[17:37:42.310]                       stop(ex)
[17:37:42.310]                     })
[17:37:42.310]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.310]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.310]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.310]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.310]                       fi <- file.info(pathname)
[17:37:42.310]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.310]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.310]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.310]                         fi[["size"]], fi[["mtime"]])
[17:37:42.310]                       stop(msg)
[17:37:42.310]                     }
[17:37:42.310]                     invisible(pathname)
[17:37:42.310]                   }
[17:37:42.310]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.310]                     rootPath = tempdir()) 
[17:37:42.310]                   {
[17:37:42.310]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.310]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.310]                       tmpdir = path, fileext = ".rds")
[17:37:42.310]                     save_rds(obj, file)
[17:37:42.310]                   }
[17:37:42.310]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.310]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.310]                   {
[17:37:42.310]                     inherits <- base::inherits
[17:37:42.310]                     invokeRestart <- base::invokeRestart
[17:37:42.310]                     is.null <- base::is.null
[17:37:42.310]                     muffled <- FALSE
[17:37:42.310]                     if (inherits(cond, "message")) {
[17:37:42.310]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.310]                       if (muffled) 
[17:37:42.310]                         invokeRestart("muffleMessage")
[17:37:42.310]                     }
[17:37:42.310]                     else if (inherits(cond, "warning")) {
[17:37:42.310]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.310]                       if (muffled) 
[17:37:42.310]                         invokeRestart("muffleWarning")
[17:37:42.310]                     }
[17:37:42.310]                     else if (inherits(cond, "condition")) {
[17:37:42.310]                       if (!is.null(pattern)) {
[17:37:42.310]                         computeRestarts <- base::computeRestarts
[17:37:42.310]                         grepl <- base::grepl
[17:37:42.310]                         restarts <- computeRestarts(cond)
[17:37:42.310]                         for (restart in restarts) {
[17:37:42.310]                           name <- restart$name
[17:37:42.310]                           if (is.null(name)) 
[17:37:42.310]                             next
[17:37:42.310]                           if (!grepl(pattern, name)) 
[17:37:42.310]                             next
[17:37:42.310]                           invokeRestart(restart)
[17:37:42.310]                           muffled <- TRUE
[17:37:42.310]                           break
[17:37:42.310]                         }
[17:37:42.310]                       }
[17:37:42.310]                     }
[17:37:42.310]                     invisible(muffled)
[17:37:42.310]                   }
[17:37:42.310]                   muffleCondition(cond)
[17:37:42.310]                 })
[17:37:42.310]             }))
[17:37:42.310]             future::FutureResult(value = ...future.value$value, 
[17:37:42.310]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.310]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.310]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.310]                     ...future.globalenv.names))
[17:37:42.310]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.310]         }, condition = base::local({
[17:37:42.310]             c <- base::c
[17:37:42.310]             inherits <- base::inherits
[17:37:42.310]             invokeRestart <- base::invokeRestart
[17:37:42.310]             length <- base::length
[17:37:42.310]             list <- base::list
[17:37:42.310]             seq.int <- base::seq.int
[17:37:42.310]             signalCondition <- base::signalCondition
[17:37:42.310]             sys.calls <- base::sys.calls
[17:37:42.310]             `[[` <- base::`[[`
[17:37:42.310]             `+` <- base::`+`
[17:37:42.310]             `<<-` <- base::`<<-`
[17:37:42.310]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.310]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.310]                   3L)]
[17:37:42.310]             }
[17:37:42.310]             function(cond) {
[17:37:42.310]                 is_error <- inherits(cond, "error")
[17:37:42.310]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.310]                   NULL)
[17:37:42.310]                 if (is_error) {
[17:37:42.310]                   sessionInformation <- function() {
[17:37:42.310]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.310]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.310]                       search = base::search(), system = base::Sys.info())
[17:37:42.310]                   }
[17:37:42.310]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.310]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.310]                     cond$call), session = sessionInformation(), 
[17:37:42.310]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.310]                   signalCondition(cond)
[17:37:42.310]                 }
[17:37:42.310]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.310]                 "immediateCondition"))) {
[17:37:42.310]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.310]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.310]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.310]                   if (TRUE && !signal) {
[17:37:42.310]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.310]                     {
[17:37:42.310]                       inherits <- base::inherits
[17:37:42.310]                       invokeRestart <- base::invokeRestart
[17:37:42.310]                       is.null <- base::is.null
[17:37:42.310]                       muffled <- FALSE
[17:37:42.310]                       if (inherits(cond, "message")) {
[17:37:42.310]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.310]                         if (muffled) 
[17:37:42.310]                           invokeRestart("muffleMessage")
[17:37:42.310]                       }
[17:37:42.310]                       else if (inherits(cond, "warning")) {
[17:37:42.310]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.310]                         if (muffled) 
[17:37:42.310]                           invokeRestart("muffleWarning")
[17:37:42.310]                       }
[17:37:42.310]                       else if (inherits(cond, "condition")) {
[17:37:42.310]                         if (!is.null(pattern)) {
[17:37:42.310]                           computeRestarts <- base::computeRestarts
[17:37:42.310]                           grepl <- base::grepl
[17:37:42.310]                           restarts <- computeRestarts(cond)
[17:37:42.310]                           for (restart in restarts) {
[17:37:42.310]                             name <- restart$name
[17:37:42.310]                             if (is.null(name)) 
[17:37:42.310]                               next
[17:37:42.310]                             if (!grepl(pattern, name)) 
[17:37:42.310]                               next
[17:37:42.310]                             invokeRestart(restart)
[17:37:42.310]                             muffled <- TRUE
[17:37:42.310]                             break
[17:37:42.310]                           }
[17:37:42.310]                         }
[17:37:42.310]                       }
[17:37:42.310]                       invisible(muffled)
[17:37:42.310]                     }
[17:37:42.310]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.310]                   }
[17:37:42.310]                 }
[17:37:42.310]                 else {
[17:37:42.310]                   if (TRUE) {
[17:37:42.310]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.310]                     {
[17:37:42.310]                       inherits <- base::inherits
[17:37:42.310]                       invokeRestart <- base::invokeRestart
[17:37:42.310]                       is.null <- base::is.null
[17:37:42.310]                       muffled <- FALSE
[17:37:42.310]                       if (inherits(cond, "message")) {
[17:37:42.310]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.310]                         if (muffled) 
[17:37:42.310]                           invokeRestart("muffleMessage")
[17:37:42.310]                       }
[17:37:42.310]                       else if (inherits(cond, "warning")) {
[17:37:42.310]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.310]                         if (muffled) 
[17:37:42.310]                           invokeRestart("muffleWarning")
[17:37:42.310]                       }
[17:37:42.310]                       else if (inherits(cond, "condition")) {
[17:37:42.310]                         if (!is.null(pattern)) {
[17:37:42.310]                           computeRestarts <- base::computeRestarts
[17:37:42.310]                           grepl <- base::grepl
[17:37:42.310]                           restarts <- computeRestarts(cond)
[17:37:42.310]                           for (restart in restarts) {
[17:37:42.310]                             name <- restart$name
[17:37:42.310]                             if (is.null(name)) 
[17:37:42.310]                               next
[17:37:42.310]                             if (!grepl(pattern, name)) 
[17:37:42.310]                               next
[17:37:42.310]                             invokeRestart(restart)
[17:37:42.310]                             muffled <- TRUE
[17:37:42.310]                             break
[17:37:42.310]                           }
[17:37:42.310]                         }
[17:37:42.310]                       }
[17:37:42.310]                       invisible(muffled)
[17:37:42.310]                     }
[17:37:42.310]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.310]                   }
[17:37:42.310]                 }
[17:37:42.310]             }
[17:37:42.310]         }))
[17:37:42.310]     }, error = function(ex) {
[17:37:42.310]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.310]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.310]                 ...future.rng), started = ...future.startTime, 
[17:37:42.310]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.310]             version = "1.8"), class = "FutureResult")
[17:37:42.310]     }, finally = {
[17:37:42.310]         if (!identical(...future.workdir, getwd())) 
[17:37:42.310]             setwd(...future.workdir)
[17:37:42.310]         {
[17:37:42.310]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.310]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.310]             }
[17:37:42.310]             base::options(...future.oldOptions)
[17:37:42.310]             if (.Platform$OS.type == "windows") {
[17:37:42.310]                 old_names <- names(...future.oldEnvVars)
[17:37:42.310]                 envs <- base::Sys.getenv()
[17:37:42.310]                 names <- names(envs)
[17:37:42.310]                 common <- intersect(names, old_names)
[17:37:42.310]                 added <- setdiff(names, old_names)
[17:37:42.310]                 removed <- setdiff(old_names, names)
[17:37:42.310]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.310]                   envs[common]]
[17:37:42.310]                 NAMES <- toupper(changed)
[17:37:42.310]                 args <- list()
[17:37:42.310]                 for (kk in seq_along(NAMES)) {
[17:37:42.310]                   name <- changed[[kk]]
[17:37:42.310]                   NAME <- NAMES[[kk]]
[17:37:42.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.310]                     next
[17:37:42.310]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.310]                 }
[17:37:42.310]                 NAMES <- toupper(added)
[17:37:42.310]                 for (kk in seq_along(NAMES)) {
[17:37:42.310]                   name <- added[[kk]]
[17:37:42.310]                   NAME <- NAMES[[kk]]
[17:37:42.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.310]                     next
[17:37:42.310]                   args[[name]] <- ""
[17:37:42.310]                 }
[17:37:42.310]                 NAMES <- toupper(removed)
[17:37:42.310]                 for (kk in seq_along(NAMES)) {
[17:37:42.310]                   name <- removed[[kk]]
[17:37:42.310]                   NAME <- NAMES[[kk]]
[17:37:42.310]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.310]                     next
[17:37:42.310]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.310]                 }
[17:37:42.310]                 if (length(args) > 0) 
[17:37:42.310]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.310]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.310]             }
[17:37:42.310]             else {
[17:37:42.310]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.310]             }
[17:37:42.310]             {
[17:37:42.310]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.310]                   0L) {
[17:37:42.310]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.310]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.310]                   base::options(opts)
[17:37:42.310]                 }
[17:37:42.310]                 {
[17:37:42.310]                   {
[17:37:42.310]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.310]                     NULL
[17:37:42.310]                   }
[17:37:42.310]                   options(future.plan = NULL)
[17:37:42.310]                   if (is.na(NA_character_)) 
[17:37:42.310]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.310]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.310]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.310]                     .init = FALSE)
[17:37:42.310]                 }
[17:37:42.310]             }
[17:37:42.310]         }
[17:37:42.310]     })
[17:37:42.310]     if (TRUE) {
[17:37:42.310]         base::sink(type = "output", split = FALSE)
[17:37:42.310]         if (TRUE) {
[17:37:42.310]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.310]         }
[17:37:42.310]         else {
[17:37:42.310]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.310]         }
[17:37:42.310]         base::close(...future.stdout)
[17:37:42.310]         ...future.stdout <- NULL
[17:37:42.310]     }
[17:37:42.310]     ...future.result$conditions <- ...future.conditions
[17:37:42.310]     ...future.result$finished <- base::Sys.time()
[17:37:42.310]     ...future.result
[17:37:42.310] }
[17:37:42.313] assign_globals() ...
[17:37:42.313] List of 5
[17:37:42.313]  $ ...future.FUN            :function (...)  
[17:37:42.313]  $ future.call.arguments    : list()
[17:37:42.313]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.313]  $ ...future.elements_ii    :List of 2
[17:37:42.313]   ..$ : int 0
[17:37:42.313]   ..$ : int 0
[17:37:42.313]  $ ...future.seeds_ii       :List of 2
[17:37:42.313]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[17:37:42.313]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[17:37:42.313]  $ ...future.globals.maxSize: NULL
[17:37:42.313]  - attr(*, "where")=List of 5
[17:37:42.313]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.313]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.313]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.313]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.313]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.313]  - attr(*, "resolved")= logi FALSE
[17:37:42.313]  - attr(*, "total_size")= num 616
[17:37:42.313]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.313]  - attr(*, "already-done")= logi TRUE
[17:37:42.319] - reassign environment for ‘...future.FUN’
[17:37:42.319] - copied ‘...future.FUN’ to environment
[17:37:42.319] - copied ‘future.call.arguments’ to environment
[17:37:42.319] - copied ‘...future.elements_ii’ to environment
[17:37:42.320] - copied ‘...future.seeds_ii’ to environment
[17:37:42.320] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.320] assign_globals() ... done
[17:37:42.320] requestCore(): workers = 2
[17:37:42.322] MulticoreFuture started
[17:37:42.323] - Launch lazy future ... done
[17:37:42.323] run() for ‘MulticoreFuture’ ... done
[17:37:42.324] Created future:
[17:37:42.324] plan(): Setting new future strategy stack:
[17:37:42.324] List of future strategies:
[17:37:42.324] 1. sequential:
[17:37:42.324]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.324]    - tweaked: FALSE
[17:37:42.324]    - call: NULL
[17:37:42.326] plan(): nbrOfWorkers() = 1
[17:37:42.328] plan(): Setting new future strategy stack:
[17:37:42.328] List of future strategies:
[17:37:42.328] 1. multicore:
[17:37:42.328]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.328]    - tweaked: FALSE
[17:37:42.328]    - call: plan(strategy)
[17:37:42.334] plan(): nbrOfWorkers() = 2
[17:37:42.324] MulticoreFuture:
[17:37:42.324] Label: ‘future_replicate-1’
[17:37:42.324] Expression:
[17:37:42.324] {
[17:37:42.324]     do.call(function(...) {
[17:37:42.324]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.324]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.324]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.324]             on.exit(options(oopts), add = TRUE)
[17:37:42.324]         }
[17:37:42.324]         {
[17:37:42.324]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.324]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.324]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.324]                   envir = globalenv(), inherits = FALSE)
[17:37:42.324]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.324]             })
[17:37:42.324]         }
[17:37:42.324]     }, args = future.call.arguments)
[17:37:42.324] }
[17:37:42.324] Lazy evaluation: FALSE
[17:37:42.324] Asynchronous evaluation: TRUE
[17:37:42.324] Local evaluation: TRUE
[17:37:42.324] Environment: R_GlobalEnv
[17:37:42.324] Capture standard output: TRUE
[17:37:42.324] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.324] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:42.324] Packages: <none>
[17:37:42.324] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.324] Resolved: TRUE
[17:37:42.324] Value: <not collected>
[17:37:42.324] Conditions captured: <none>
[17:37:42.324] Early signaling: FALSE
[17:37:42.324] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.324] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.335] Chunk #1 of 2 ... DONE
[17:37:42.335] Chunk #2 of 2 ...
[17:37:42.335]  - Finding globals in 'X' for chunk #2 ...
[17:37:42.335] getGlobalsAndPackages() ...
[17:37:42.335] Searching for globals...
[17:37:42.336] 
[17:37:42.336] Searching for globals ... DONE
[17:37:42.336] - globals: [0] <none>
[17:37:42.336] getGlobalsAndPackages() ... DONE
[17:37:42.336]    + additional globals found: [n=0] 
[17:37:42.336]    + additional namespaces needed: [n=0] 
[17:37:42.337]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:42.337]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.337]  - seeds: [3] <seeds>
[17:37:42.337]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.337] getGlobalsAndPackages() ...
[17:37:42.337] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.337] Resolving globals: FALSE
[17:37:42.338] Tweak future expression to call with '...' arguments ...
[17:37:42.338] {
[17:37:42.338]     do.call(function(...) {
[17:37:42.338]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.338]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.338]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.338]             on.exit(options(oopts), add = TRUE)
[17:37:42.338]         }
[17:37:42.338]         {
[17:37:42.338]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.338]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.338]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.338]                   envir = globalenv(), inherits = FALSE)
[17:37:42.338]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.338]             })
[17:37:42.338]         }
[17:37:42.338]     }, args = future.call.arguments)
[17:37:42.338] }
[17:37:42.338] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.339] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.339] 
[17:37:42.339] getGlobalsAndPackages() ... DONE
[17:37:42.340] run() for ‘Future’ ...
[17:37:42.340] - state: ‘created’
[17:37:42.340] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.349] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.350] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.350]   - Field: ‘label’
[17:37:42.350]   - Field: ‘local’
[17:37:42.351]   - Field: ‘owner’
[17:37:42.351]   - Field: ‘envir’
[17:37:42.351]   - Field: ‘workers’
[17:37:42.351]   - Field: ‘packages’
[17:37:42.352]   - Field: ‘gc’
[17:37:42.352]   - Field: ‘job’
[17:37:42.352]   - Field: ‘conditions’
[17:37:42.352]   - Field: ‘expr’
[17:37:42.352]   - Field: ‘uuid’
[17:37:42.352]   - Field: ‘seed’
[17:37:42.353]   - Field: ‘version’
[17:37:42.353]   - Field: ‘result’
[17:37:42.353]   - Field: ‘asynchronous’
[17:37:42.353]   - Field: ‘calls’
[17:37:42.353]   - Field: ‘globals’
[17:37:42.353]   - Field: ‘stdout’
[17:37:42.353]   - Field: ‘earlySignal’
[17:37:42.354]   - Field: ‘lazy’
[17:37:42.354]   - Field: ‘state’
[17:37:42.354] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.354] - Launch lazy future ...
[17:37:42.355] Packages needed by the future expression (n = 0): <none>
[17:37:42.355] Packages needed by future strategies (n = 0): <none>
[17:37:42.356] {
[17:37:42.356]     {
[17:37:42.356]         {
[17:37:42.356]             ...future.startTime <- base::Sys.time()
[17:37:42.356]             {
[17:37:42.356]                 {
[17:37:42.356]                   {
[17:37:42.356]                     {
[17:37:42.356]                       base::local({
[17:37:42.356]                         has_future <- base::requireNamespace("future", 
[17:37:42.356]                           quietly = TRUE)
[17:37:42.356]                         if (has_future) {
[17:37:42.356]                           ns <- base::getNamespace("future")
[17:37:42.356]                           version <- ns[[".package"]][["version"]]
[17:37:42.356]                           if (is.null(version)) 
[17:37:42.356]                             version <- utils::packageVersion("future")
[17:37:42.356]                         }
[17:37:42.356]                         else {
[17:37:42.356]                           version <- NULL
[17:37:42.356]                         }
[17:37:42.356]                         if (!has_future || version < "1.8.0") {
[17:37:42.356]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.356]                             "", base::R.version$version.string), 
[17:37:42.356]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.356]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.356]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.356]                               "release", "version")], collapse = " "), 
[17:37:42.356]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.356]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.356]                             info)
[17:37:42.356]                           info <- base::paste(info, collapse = "; ")
[17:37:42.356]                           if (!has_future) {
[17:37:42.356]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.356]                               info)
[17:37:42.356]                           }
[17:37:42.356]                           else {
[17:37:42.356]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.356]                               info, version)
[17:37:42.356]                           }
[17:37:42.356]                           base::stop(msg)
[17:37:42.356]                         }
[17:37:42.356]                       })
[17:37:42.356]                     }
[17:37:42.356]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.356]                     base::options(mc.cores = 1L)
[17:37:42.356]                   }
[17:37:42.356]                   ...future.strategy.old <- future::plan("list")
[17:37:42.356]                   options(future.plan = NULL)
[17:37:42.356]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.356]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.356]                 }
[17:37:42.356]                 ...future.workdir <- getwd()
[17:37:42.356]             }
[17:37:42.356]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.356]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.356]         }
[17:37:42.356]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.356]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.356]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.356]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.356]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.356]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.356]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.356]             base::names(...future.oldOptions))
[17:37:42.356]     }
[17:37:42.356]     if (FALSE) {
[17:37:42.356]     }
[17:37:42.356]     else {
[17:37:42.356]         if (TRUE) {
[17:37:42.356]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.356]                 open = "w")
[17:37:42.356]         }
[17:37:42.356]         else {
[17:37:42.356]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.356]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.356]         }
[17:37:42.356]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.356]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.356]             base::sink(type = "output", split = FALSE)
[17:37:42.356]             base::close(...future.stdout)
[17:37:42.356]         }, add = TRUE)
[17:37:42.356]     }
[17:37:42.356]     ...future.frame <- base::sys.nframe()
[17:37:42.356]     ...future.conditions <- base::list()
[17:37:42.356]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.356]     if (FALSE) {
[17:37:42.356]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.356]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.356]     }
[17:37:42.356]     ...future.result <- base::tryCatch({
[17:37:42.356]         base::withCallingHandlers({
[17:37:42.356]             ...future.value <- base::withVisible(base::local({
[17:37:42.356]                 withCallingHandlers({
[17:37:42.356]                   {
[17:37:42.356]                     do.call(function(...) {
[17:37:42.356]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.356]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.356]                         ...future.globals.maxSize)) {
[17:37:42.356]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.356]                         on.exit(options(oopts), add = TRUE)
[17:37:42.356]                       }
[17:37:42.356]                       {
[17:37:42.356]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.356]                           FUN = function(jj) {
[17:37:42.356]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.356]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.356]                               envir = globalenv(), inherits = FALSE)
[17:37:42.356]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.356]                           })
[17:37:42.356]                       }
[17:37:42.356]                     }, args = future.call.arguments)
[17:37:42.356]                   }
[17:37:42.356]                 }, immediateCondition = function(cond) {
[17:37:42.356]                   save_rds <- function (object, pathname, ...) 
[17:37:42.356]                   {
[17:37:42.356]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.356]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.356]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.356]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.356]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.356]                         fi_tmp[["mtime"]])
[17:37:42.356]                     }
[17:37:42.356]                     tryCatch({
[17:37:42.356]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.356]                     }, error = function(ex) {
[17:37:42.356]                       msg <- conditionMessage(ex)
[17:37:42.356]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.356]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.356]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.356]                         fi_tmp[["mtime"]], msg)
[17:37:42.356]                       ex$message <- msg
[17:37:42.356]                       stop(ex)
[17:37:42.356]                     })
[17:37:42.356]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.356]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.356]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.356]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.356]                       fi <- file.info(pathname)
[17:37:42.356]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.356]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.356]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.356]                         fi[["size"]], fi[["mtime"]])
[17:37:42.356]                       stop(msg)
[17:37:42.356]                     }
[17:37:42.356]                     invisible(pathname)
[17:37:42.356]                   }
[17:37:42.356]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.356]                     rootPath = tempdir()) 
[17:37:42.356]                   {
[17:37:42.356]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.356]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.356]                       tmpdir = path, fileext = ".rds")
[17:37:42.356]                     save_rds(obj, file)
[17:37:42.356]                   }
[17:37:42.356]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.356]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.356]                   {
[17:37:42.356]                     inherits <- base::inherits
[17:37:42.356]                     invokeRestart <- base::invokeRestart
[17:37:42.356]                     is.null <- base::is.null
[17:37:42.356]                     muffled <- FALSE
[17:37:42.356]                     if (inherits(cond, "message")) {
[17:37:42.356]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.356]                       if (muffled) 
[17:37:42.356]                         invokeRestart("muffleMessage")
[17:37:42.356]                     }
[17:37:42.356]                     else if (inherits(cond, "warning")) {
[17:37:42.356]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.356]                       if (muffled) 
[17:37:42.356]                         invokeRestart("muffleWarning")
[17:37:42.356]                     }
[17:37:42.356]                     else if (inherits(cond, "condition")) {
[17:37:42.356]                       if (!is.null(pattern)) {
[17:37:42.356]                         computeRestarts <- base::computeRestarts
[17:37:42.356]                         grepl <- base::grepl
[17:37:42.356]                         restarts <- computeRestarts(cond)
[17:37:42.356]                         for (restart in restarts) {
[17:37:42.356]                           name <- restart$name
[17:37:42.356]                           if (is.null(name)) 
[17:37:42.356]                             next
[17:37:42.356]                           if (!grepl(pattern, name)) 
[17:37:42.356]                             next
[17:37:42.356]                           invokeRestart(restart)
[17:37:42.356]                           muffled <- TRUE
[17:37:42.356]                           break
[17:37:42.356]                         }
[17:37:42.356]                       }
[17:37:42.356]                     }
[17:37:42.356]                     invisible(muffled)
[17:37:42.356]                   }
[17:37:42.356]                   muffleCondition(cond)
[17:37:42.356]                 })
[17:37:42.356]             }))
[17:37:42.356]             future::FutureResult(value = ...future.value$value, 
[17:37:42.356]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.356]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.356]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.356]                     ...future.globalenv.names))
[17:37:42.356]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.356]         }, condition = base::local({
[17:37:42.356]             c <- base::c
[17:37:42.356]             inherits <- base::inherits
[17:37:42.356]             invokeRestart <- base::invokeRestart
[17:37:42.356]             length <- base::length
[17:37:42.356]             list <- base::list
[17:37:42.356]             seq.int <- base::seq.int
[17:37:42.356]             signalCondition <- base::signalCondition
[17:37:42.356]             sys.calls <- base::sys.calls
[17:37:42.356]             `[[` <- base::`[[`
[17:37:42.356]             `+` <- base::`+`
[17:37:42.356]             `<<-` <- base::`<<-`
[17:37:42.356]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.356]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.356]                   3L)]
[17:37:42.356]             }
[17:37:42.356]             function(cond) {
[17:37:42.356]                 is_error <- inherits(cond, "error")
[17:37:42.356]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.356]                   NULL)
[17:37:42.356]                 if (is_error) {
[17:37:42.356]                   sessionInformation <- function() {
[17:37:42.356]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.356]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.356]                       search = base::search(), system = base::Sys.info())
[17:37:42.356]                   }
[17:37:42.356]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.356]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.356]                     cond$call), session = sessionInformation(), 
[17:37:42.356]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.356]                   signalCondition(cond)
[17:37:42.356]                 }
[17:37:42.356]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.356]                 "immediateCondition"))) {
[17:37:42.356]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.356]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.356]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.356]                   if (TRUE && !signal) {
[17:37:42.356]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.356]                     {
[17:37:42.356]                       inherits <- base::inherits
[17:37:42.356]                       invokeRestart <- base::invokeRestart
[17:37:42.356]                       is.null <- base::is.null
[17:37:42.356]                       muffled <- FALSE
[17:37:42.356]                       if (inherits(cond, "message")) {
[17:37:42.356]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.356]                         if (muffled) 
[17:37:42.356]                           invokeRestart("muffleMessage")
[17:37:42.356]                       }
[17:37:42.356]                       else if (inherits(cond, "warning")) {
[17:37:42.356]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.356]                         if (muffled) 
[17:37:42.356]                           invokeRestart("muffleWarning")
[17:37:42.356]                       }
[17:37:42.356]                       else if (inherits(cond, "condition")) {
[17:37:42.356]                         if (!is.null(pattern)) {
[17:37:42.356]                           computeRestarts <- base::computeRestarts
[17:37:42.356]                           grepl <- base::grepl
[17:37:42.356]                           restarts <- computeRestarts(cond)
[17:37:42.356]                           for (restart in restarts) {
[17:37:42.356]                             name <- restart$name
[17:37:42.356]                             if (is.null(name)) 
[17:37:42.356]                               next
[17:37:42.356]                             if (!grepl(pattern, name)) 
[17:37:42.356]                               next
[17:37:42.356]                             invokeRestart(restart)
[17:37:42.356]                             muffled <- TRUE
[17:37:42.356]                             break
[17:37:42.356]                           }
[17:37:42.356]                         }
[17:37:42.356]                       }
[17:37:42.356]                       invisible(muffled)
[17:37:42.356]                     }
[17:37:42.356]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.356]                   }
[17:37:42.356]                 }
[17:37:42.356]                 else {
[17:37:42.356]                   if (TRUE) {
[17:37:42.356]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.356]                     {
[17:37:42.356]                       inherits <- base::inherits
[17:37:42.356]                       invokeRestart <- base::invokeRestart
[17:37:42.356]                       is.null <- base::is.null
[17:37:42.356]                       muffled <- FALSE
[17:37:42.356]                       if (inherits(cond, "message")) {
[17:37:42.356]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.356]                         if (muffled) 
[17:37:42.356]                           invokeRestart("muffleMessage")
[17:37:42.356]                       }
[17:37:42.356]                       else if (inherits(cond, "warning")) {
[17:37:42.356]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.356]                         if (muffled) 
[17:37:42.356]                           invokeRestart("muffleWarning")
[17:37:42.356]                       }
[17:37:42.356]                       else if (inherits(cond, "condition")) {
[17:37:42.356]                         if (!is.null(pattern)) {
[17:37:42.356]                           computeRestarts <- base::computeRestarts
[17:37:42.356]                           grepl <- base::grepl
[17:37:42.356]                           restarts <- computeRestarts(cond)
[17:37:42.356]                           for (restart in restarts) {
[17:37:42.356]                             name <- restart$name
[17:37:42.356]                             if (is.null(name)) 
[17:37:42.356]                               next
[17:37:42.356]                             if (!grepl(pattern, name)) 
[17:37:42.356]                               next
[17:37:42.356]                             invokeRestart(restart)
[17:37:42.356]                             muffled <- TRUE
[17:37:42.356]                             break
[17:37:42.356]                           }
[17:37:42.356]                         }
[17:37:42.356]                       }
[17:37:42.356]                       invisible(muffled)
[17:37:42.356]                     }
[17:37:42.356]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.356]                   }
[17:37:42.356]                 }
[17:37:42.356]             }
[17:37:42.356]         }))
[17:37:42.356]     }, error = function(ex) {
[17:37:42.356]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.356]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.356]                 ...future.rng), started = ...future.startTime, 
[17:37:42.356]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.356]             version = "1.8"), class = "FutureResult")
[17:37:42.356]     }, finally = {
[17:37:42.356]         if (!identical(...future.workdir, getwd())) 
[17:37:42.356]             setwd(...future.workdir)
[17:37:42.356]         {
[17:37:42.356]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.356]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.356]             }
[17:37:42.356]             base::options(...future.oldOptions)
[17:37:42.356]             if (.Platform$OS.type == "windows") {
[17:37:42.356]                 old_names <- names(...future.oldEnvVars)
[17:37:42.356]                 envs <- base::Sys.getenv()
[17:37:42.356]                 names <- names(envs)
[17:37:42.356]                 common <- intersect(names, old_names)
[17:37:42.356]                 added <- setdiff(names, old_names)
[17:37:42.356]                 removed <- setdiff(old_names, names)
[17:37:42.356]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.356]                   envs[common]]
[17:37:42.356]                 NAMES <- toupper(changed)
[17:37:42.356]                 args <- list()
[17:37:42.356]                 for (kk in seq_along(NAMES)) {
[17:37:42.356]                   name <- changed[[kk]]
[17:37:42.356]                   NAME <- NAMES[[kk]]
[17:37:42.356]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.356]                     next
[17:37:42.356]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.356]                 }
[17:37:42.356]                 NAMES <- toupper(added)
[17:37:42.356]                 for (kk in seq_along(NAMES)) {
[17:37:42.356]                   name <- added[[kk]]
[17:37:42.356]                   NAME <- NAMES[[kk]]
[17:37:42.356]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.356]                     next
[17:37:42.356]                   args[[name]] <- ""
[17:37:42.356]                 }
[17:37:42.356]                 NAMES <- toupper(removed)
[17:37:42.356]                 for (kk in seq_along(NAMES)) {
[17:37:42.356]                   name <- removed[[kk]]
[17:37:42.356]                   NAME <- NAMES[[kk]]
[17:37:42.356]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.356]                     next
[17:37:42.356]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.356]                 }
[17:37:42.356]                 if (length(args) > 0) 
[17:37:42.356]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.356]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.356]             }
[17:37:42.356]             else {
[17:37:42.356]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.356]             }
[17:37:42.356]             {
[17:37:42.356]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.356]                   0L) {
[17:37:42.356]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.356]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.356]                   base::options(opts)
[17:37:42.356]                 }
[17:37:42.356]                 {
[17:37:42.356]                   {
[17:37:42.356]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.356]                     NULL
[17:37:42.356]                   }
[17:37:42.356]                   options(future.plan = NULL)
[17:37:42.356]                   if (is.na(NA_character_)) 
[17:37:42.356]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.356]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.356]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.356]                     .init = FALSE)
[17:37:42.356]                 }
[17:37:42.356]             }
[17:37:42.356]         }
[17:37:42.356]     })
[17:37:42.356]     if (TRUE) {
[17:37:42.356]         base::sink(type = "output", split = FALSE)
[17:37:42.356]         if (TRUE) {
[17:37:42.356]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.356]         }
[17:37:42.356]         else {
[17:37:42.356]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.356]         }
[17:37:42.356]         base::close(...future.stdout)
[17:37:42.356]         ...future.stdout <- NULL
[17:37:42.356]     }
[17:37:42.356]     ...future.result$conditions <- ...future.conditions
[17:37:42.356]     ...future.result$finished <- base::Sys.time()
[17:37:42.356]     ...future.result
[17:37:42.356] }
[17:37:42.358] assign_globals() ...
[17:37:42.358] List of 5
[17:37:42.358]  $ ...future.FUN            :function (...)  
[17:37:42.358]  $ future.call.arguments    : list()
[17:37:42.358]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.358]  $ ...future.elements_ii    :List of 3
[17:37:42.358]   ..$ : int 0
[17:37:42.358]   ..$ : int 0
[17:37:42.358]   ..$ : int 0
[17:37:42.358]  $ ...future.seeds_ii       :List of 3
[17:37:42.358]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[17:37:42.358]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[17:37:42.358]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[17:37:42.358]  $ ...future.globals.maxSize: NULL
[17:37:42.358]  - attr(*, "where")=List of 5
[17:37:42.358]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.358]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.358]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.358]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.358]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.358]  - attr(*, "resolved")= logi FALSE
[17:37:42.358]  - attr(*, "total_size")= num 616
[17:37:42.358]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.358]  - attr(*, "already-done")= logi TRUE
[17:37:42.367] - reassign environment for ‘...future.FUN’
[17:37:42.367] - copied ‘...future.FUN’ to environment
[17:37:42.368] - copied ‘future.call.arguments’ to environment
[17:37:42.368] - copied ‘...future.elements_ii’ to environment
[17:37:42.368] - copied ‘...future.seeds_ii’ to environment
[17:37:42.368] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.368] assign_globals() ... done
[17:37:42.368] requestCore(): workers = 2
[17:37:42.371] MulticoreFuture started
[17:37:42.371] - Launch lazy future ... done
[17:37:42.371] run() for ‘MulticoreFuture’ ... done
[17:37:42.372] Created future:
[17:37:42.372] plan(): Setting new future strategy stack:
[17:37:42.372] List of future strategies:
[17:37:42.372] 1. sequential:
[17:37:42.372]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.372]    - tweaked: FALSE
[17:37:42.372]    - call: NULL
[17:37:42.373] plan(): nbrOfWorkers() = 1
[17:37:42.376] plan(): Setting new future strategy stack:
[17:37:42.376] List of future strategies:
[17:37:42.376] 1. multicore:
[17:37:42.376]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.376]    - tweaked: FALSE
[17:37:42.376]    - call: plan(strategy)
[17:37:42.381] plan(): nbrOfWorkers() = 2
[17:37:42.372] MulticoreFuture:
[17:37:42.372] Label: ‘future_replicate-2’
[17:37:42.372] Expression:
[17:37:42.372] {
[17:37:42.372]     do.call(function(...) {
[17:37:42.372]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.372]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.372]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.372]             on.exit(options(oopts), add = TRUE)
[17:37:42.372]         }
[17:37:42.372]         {
[17:37:42.372]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.372]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.372]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.372]                   envir = globalenv(), inherits = FALSE)
[17:37:42.372]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.372]             })
[17:37:42.372]         }
[17:37:42.372]     }, args = future.call.arguments)
[17:37:42.372] }
[17:37:42.372] Lazy evaluation: FALSE
[17:37:42.372] Asynchronous evaluation: TRUE
[17:37:42.372] Local evaluation: TRUE
[17:37:42.372] Environment: R_GlobalEnv
[17:37:42.372] Capture standard output: TRUE
[17:37:42.372] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.372] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:42.372] Packages: <none>
[17:37:42.372] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.372] Resolved: TRUE
[17:37:42.372] Value: <not collected>
[17:37:42.372] Conditions captured: <none>
[17:37:42.372] Early signaling: FALSE
[17:37:42.372] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.372] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.382] Chunk #2 of 2 ... DONE
[17:37:42.382] Launching 2 futures (chunks) ... DONE
[17:37:42.383] Resolving 2 futures (chunks) ...
[17:37:42.383] resolve() on list ...
[17:37:42.383]  recursive: 0
[17:37:42.383]  length: 2
[17:37:42.383] 
[17:37:42.384] Future #1
[17:37:42.384] result() for MulticoreFuture ...
[17:37:42.385] result() for MulticoreFuture ...
[17:37:42.385] result() for MulticoreFuture ... done
[17:37:42.385] result() for MulticoreFuture ... done
[17:37:42.385] result() for MulticoreFuture ...
[17:37:42.386] result() for MulticoreFuture ... done
[17:37:42.386] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:37:42.386] - nx: 2
[17:37:42.386] - relay: TRUE
[17:37:42.386] - stdout: TRUE
[17:37:42.387] - signal: TRUE
[17:37:42.387] - resignal: FALSE
[17:37:42.387] - force: TRUE
[17:37:42.387] - relayed: [n=2] FALSE, FALSE
[17:37:42.387] - queued futures: [n=2] FALSE, FALSE
[17:37:42.388]  - until=1
[17:37:42.388]  - relaying element #1
[17:37:42.388] result() for MulticoreFuture ...
[17:37:42.388] result() for MulticoreFuture ... done
[17:37:42.388] result() for MulticoreFuture ...
[17:37:42.388] result() for MulticoreFuture ... done
[17:37:42.389] result() for MulticoreFuture ...
[17:37:42.389] result() for MulticoreFuture ... done
[17:37:42.389] result() for MulticoreFuture ...
[17:37:42.389] result() for MulticoreFuture ... done
[17:37:42.390] - relayed: [n=2] TRUE, FALSE
[17:37:42.390] - queued futures: [n=2] TRUE, FALSE
[17:37:42.390] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:37:42.390]  length: 1 (resolved future 1)
[17:37:42.390] Future #2
[17:37:42.390] result() for MulticoreFuture ...
[17:37:42.391] result() for MulticoreFuture ...
[17:37:42.391] result() for MulticoreFuture ... done
[17:37:42.391] result() for MulticoreFuture ... done
[17:37:42.392] result() for MulticoreFuture ...
[17:37:42.392] result() for MulticoreFuture ... done
[17:37:42.392] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:37:42.392] - nx: 2
[17:37:42.392] - relay: TRUE
[17:37:42.392] - stdout: TRUE
[17:37:42.392] - signal: TRUE
[17:37:42.393] - resignal: FALSE
[17:37:42.393] - force: TRUE
[17:37:42.393] - relayed: [n=2] TRUE, FALSE
[17:37:42.393] - queued futures: [n=2] TRUE, FALSE
[17:37:42.393]  - until=2
[17:37:42.393]  - relaying element #2
[17:37:42.393] result() for MulticoreFuture ...
[17:37:42.394] result() for MulticoreFuture ... done
[17:37:42.394] result() for MulticoreFuture ...
[17:37:42.394] result() for MulticoreFuture ... done
[17:37:42.394] result() for MulticoreFuture ...
[17:37:42.394] result() for MulticoreFuture ... done
[17:37:42.394] result() for MulticoreFuture ...
[17:37:42.394] result() for MulticoreFuture ... done
[17:37:42.394] - relayed: [n=2] TRUE, TRUE
[17:37:42.395] - queued futures: [n=2] TRUE, TRUE
[17:37:42.395] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:37:42.395]  length: 0 (resolved future 2)
[17:37:42.395] Relaying remaining futures
[17:37:42.395] signalConditionsASAP(NULL, pos=0) ...
[17:37:42.395] - nx: 2
[17:37:42.395] - relay: TRUE
[17:37:42.395] - stdout: TRUE
[17:37:42.395] - signal: TRUE
[17:37:42.395] - resignal: FALSE
[17:37:42.396] - force: TRUE
[17:37:42.396] - relayed: [n=2] TRUE, TRUE
[17:37:42.396] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:42.396] - relayed: [n=2] TRUE, TRUE
[17:37:42.396] - queued futures: [n=2] TRUE, TRUE
[17:37:42.396] signalConditionsASAP(NULL, pos=0) ... done
[17:37:42.396] resolve() on list ... DONE
[17:37:42.396] result() for MulticoreFuture ...
[17:37:42.397] result() for MulticoreFuture ... done
[17:37:42.397] result() for MulticoreFuture ...
[17:37:42.397] result() for MulticoreFuture ... done
[17:37:42.397] result() for MulticoreFuture ...
[17:37:42.397] result() for MulticoreFuture ... done
[17:37:42.397] result() for MulticoreFuture ...
[17:37:42.397] result() for MulticoreFuture ... done
[17:37:42.397]  - Number of value chunks collected: 2
[17:37:42.397] Resolving 2 futures (chunks) ... DONE
[17:37:42.398] Reducing values from 2 chunks ...
[17:37:42.398]  - Number of values collected after concatenation: 5
[17:37:42.398]  - Number of values expected: 5
[17:37:42.398] Reducing values from 2 chunks ... DONE
[17:37:42.400] future_lapply() ... DONE
- example(replicate) ...
[17:37:42.401] future_lapply() ...
[17:37:42.402] Generating random seeds ...
[17:37:42.402] Generating random seed streams for 5 elements ...
[17:37:42.402] Generating random seed streams for 5 elements ... DONE
[17:37:42.402] Generating random seeds ... DONE
[17:37:42.403] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:42.408] Number of chunks: 2
[17:37:42.408] getGlobalsAndPackagesXApply() ...
[17:37:42.408]  - future.globals: TRUE
[17:37:42.408] getGlobalsAndPackages() ...
[17:37:42.409] Searching for globals...
[17:37:42.411] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:37:42.411] Searching for globals ... DONE
[17:37:42.411] Resolving globals: FALSE
[17:37:42.412] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:37:42.412] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:37:42.412] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:37:42.412] 
[17:37:42.413] getGlobalsAndPackages() ... DONE
[17:37:42.413]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:37:42.413]  - needed namespaces: [n=0] 
[17:37:42.413] Finding globals ... DONE
[17:37:42.413]  - use_args: TRUE
[17:37:42.413]  - Getting '...' globals ...
[17:37:42.413] resolve() on list ...
[17:37:42.414]  recursive: 0
[17:37:42.414]  length: 1
[17:37:42.414]  elements: ‘...’
[17:37:42.414]  length: 0 (resolved future 1)
[17:37:42.414] resolve() on list ... DONE
[17:37:42.414]    - '...' content: [n=0] 
[17:37:42.414] List of 1
[17:37:42.414]  $ ...: list()
[17:37:42.414]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.414]  - attr(*, "where")=List of 1
[17:37:42.414]   ..$ ...:<environment: 0x5640c1033c48> 
[17:37:42.414]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.414]  - attr(*, "resolved")= logi TRUE
[17:37:42.414]  - attr(*, "total_size")= num NA
[17:37:42.417]  - Getting '...' globals ... DONE
[17:37:42.417] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:37:42.418] List of 4
[17:37:42.418]  $ ...future.FUN:function (...)  
[17:37:42.418]  $ foo          :function (x = 1, y = 2)  
[17:37:42.418]  $ x            : num 3
[17:37:42.418]  $ ...          : list()
[17:37:42.418]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.418]  - attr(*, "where")=List of 4
[17:37:42.418]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:42.418]   ..$ foo          :<environment: R_EmptyEnv> 
[17:37:42.418]   ..$ x            :<environment: R_EmptyEnv> 
[17:37:42.418]   ..$ ...          :<environment: 0x5640c1033c48> 
[17:37:42.418]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.418]  - attr(*, "resolved")= logi FALSE
[17:37:42.418]  - attr(*, "total_size")= num 2200
[17:37:42.421] Packages to be attached in all futures: [n=0] 
[17:37:42.422] getGlobalsAndPackagesXApply() ... DONE
[17:37:42.422] Number of futures (= number of chunks): 2
[17:37:42.422] Launching 2 futures (chunks) ...
[17:37:42.422] Chunk #1 of 2 ...
[17:37:42.422]  - Finding globals in 'X' for chunk #1 ...
[17:37:42.422] getGlobalsAndPackages() ...
[17:37:42.422] Searching for globals...
[17:37:42.423] 
[17:37:42.423] Searching for globals ... DONE
[17:37:42.423] - globals: [0] <none>
[17:37:42.423] getGlobalsAndPackages() ... DONE
[17:37:42.423]    + additional globals found: [n=0] 
[17:37:42.423]    + additional namespaces needed: [n=0] 
[17:37:42.423]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:42.423]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.423]  - seeds: [2] <seeds>
[17:37:42.423]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.424] getGlobalsAndPackages() ...
[17:37:42.424] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.424] Resolving globals: FALSE
[17:37:42.424] Tweak future expression to call with '...' arguments ...
[17:37:42.424] {
[17:37:42.424]     do.call(function(...) {
[17:37:42.424]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.424]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.424]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.424]             on.exit(options(oopts), add = TRUE)
[17:37:42.424]         }
[17:37:42.424]         {
[17:37:42.424]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.424]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.424]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.424]                   envir = globalenv(), inherits = FALSE)
[17:37:42.424]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.424]             })
[17:37:42.424]         }
[17:37:42.424]     }, args = future.call.arguments)
[17:37:42.424] }
[17:37:42.424] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.425] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.425] 
[17:37:42.425] getGlobalsAndPackages() ... DONE
[17:37:42.425] run() for ‘Future’ ...
[17:37:42.425] - state: ‘created’
[17:37:42.425] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.429] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.429] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.429]   - Field: ‘label’
[17:37:42.429]   - Field: ‘local’
[17:37:42.429]   - Field: ‘owner’
[17:37:42.430]   - Field: ‘envir’
[17:37:42.430]   - Field: ‘workers’
[17:37:42.430]   - Field: ‘packages’
[17:37:42.430]   - Field: ‘gc’
[17:37:42.430]   - Field: ‘job’
[17:37:42.430]   - Field: ‘conditions’
[17:37:42.430]   - Field: ‘expr’
[17:37:42.430]   - Field: ‘uuid’
[17:37:42.430]   - Field: ‘seed’
[17:37:42.430]   - Field: ‘version’
[17:37:42.430]   - Field: ‘result’
[17:37:42.431]   - Field: ‘asynchronous’
[17:37:42.431]   - Field: ‘calls’
[17:37:42.431]   - Field: ‘globals’
[17:37:42.431]   - Field: ‘stdout’
[17:37:42.431]   - Field: ‘earlySignal’
[17:37:42.431]   - Field: ‘lazy’
[17:37:42.431]   - Field: ‘state’
[17:37:42.431] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.431] - Launch lazy future ...
[17:37:42.432] Packages needed by the future expression (n = 0): <none>
[17:37:42.432] Packages needed by future strategies (n = 0): <none>
[17:37:42.432] {
[17:37:42.432]     {
[17:37:42.432]         {
[17:37:42.432]             ...future.startTime <- base::Sys.time()
[17:37:42.432]             {
[17:37:42.432]                 {
[17:37:42.432]                   {
[17:37:42.432]                     {
[17:37:42.432]                       base::local({
[17:37:42.432]                         has_future <- base::requireNamespace("future", 
[17:37:42.432]                           quietly = TRUE)
[17:37:42.432]                         if (has_future) {
[17:37:42.432]                           ns <- base::getNamespace("future")
[17:37:42.432]                           version <- ns[[".package"]][["version"]]
[17:37:42.432]                           if (is.null(version)) 
[17:37:42.432]                             version <- utils::packageVersion("future")
[17:37:42.432]                         }
[17:37:42.432]                         else {
[17:37:42.432]                           version <- NULL
[17:37:42.432]                         }
[17:37:42.432]                         if (!has_future || version < "1.8.0") {
[17:37:42.432]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.432]                             "", base::R.version$version.string), 
[17:37:42.432]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.432]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.432]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.432]                               "release", "version")], collapse = " "), 
[17:37:42.432]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.432]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.432]                             info)
[17:37:42.432]                           info <- base::paste(info, collapse = "; ")
[17:37:42.432]                           if (!has_future) {
[17:37:42.432]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.432]                               info)
[17:37:42.432]                           }
[17:37:42.432]                           else {
[17:37:42.432]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.432]                               info, version)
[17:37:42.432]                           }
[17:37:42.432]                           base::stop(msg)
[17:37:42.432]                         }
[17:37:42.432]                       })
[17:37:42.432]                     }
[17:37:42.432]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.432]                     base::options(mc.cores = 1L)
[17:37:42.432]                   }
[17:37:42.432]                   ...future.strategy.old <- future::plan("list")
[17:37:42.432]                   options(future.plan = NULL)
[17:37:42.432]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.432]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.432]                 }
[17:37:42.432]                 ...future.workdir <- getwd()
[17:37:42.432]             }
[17:37:42.432]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.432]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.432]         }
[17:37:42.432]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.432]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.432]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.432]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.432]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.432]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.432]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.432]             base::names(...future.oldOptions))
[17:37:42.432]     }
[17:37:42.432]     if (FALSE) {
[17:37:42.432]     }
[17:37:42.432]     else {
[17:37:42.432]         if (TRUE) {
[17:37:42.432]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.432]                 open = "w")
[17:37:42.432]         }
[17:37:42.432]         else {
[17:37:42.432]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.432]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.432]         }
[17:37:42.432]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.432]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.432]             base::sink(type = "output", split = FALSE)
[17:37:42.432]             base::close(...future.stdout)
[17:37:42.432]         }, add = TRUE)
[17:37:42.432]     }
[17:37:42.432]     ...future.frame <- base::sys.nframe()
[17:37:42.432]     ...future.conditions <- base::list()
[17:37:42.432]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.432]     if (FALSE) {
[17:37:42.432]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.432]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.432]     }
[17:37:42.432]     ...future.result <- base::tryCatch({
[17:37:42.432]         base::withCallingHandlers({
[17:37:42.432]             ...future.value <- base::withVisible(base::local({
[17:37:42.432]                 withCallingHandlers({
[17:37:42.432]                   {
[17:37:42.432]                     do.call(function(...) {
[17:37:42.432]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.432]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.432]                         ...future.globals.maxSize)) {
[17:37:42.432]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.432]                         on.exit(options(oopts), add = TRUE)
[17:37:42.432]                       }
[17:37:42.432]                       {
[17:37:42.432]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.432]                           FUN = function(jj) {
[17:37:42.432]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.432]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.432]                               envir = globalenv(), inherits = FALSE)
[17:37:42.432]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.432]                           })
[17:37:42.432]                       }
[17:37:42.432]                     }, args = future.call.arguments)
[17:37:42.432]                   }
[17:37:42.432]                 }, immediateCondition = function(cond) {
[17:37:42.432]                   save_rds <- function (object, pathname, ...) 
[17:37:42.432]                   {
[17:37:42.432]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.432]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.432]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.432]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.432]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.432]                         fi_tmp[["mtime"]])
[17:37:42.432]                     }
[17:37:42.432]                     tryCatch({
[17:37:42.432]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.432]                     }, error = function(ex) {
[17:37:42.432]                       msg <- conditionMessage(ex)
[17:37:42.432]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.432]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.432]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.432]                         fi_tmp[["mtime"]], msg)
[17:37:42.432]                       ex$message <- msg
[17:37:42.432]                       stop(ex)
[17:37:42.432]                     })
[17:37:42.432]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.432]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.432]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.432]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.432]                       fi <- file.info(pathname)
[17:37:42.432]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.432]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.432]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.432]                         fi[["size"]], fi[["mtime"]])
[17:37:42.432]                       stop(msg)
[17:37:42.432]                     }
[17:37:42.432]                     invisible(pathname)
[17:37:42.432]                   }
[17:37:42.432]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.432]                     rootPath = tempdir()) 
[17:37:42.432]                   {
[17:37:42.432]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.432]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.432]                       tmpdir = path, fileext = ".rds")
[17:37:42.432]                     save_rds(obj, file)
[17:37:42.432]                   }
[17:37:42.432]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.432]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.432]                   {
[17:37:42.432]                     inherits <- base::inherits
[17:37:42.432]                     invokeRestart <- base::invokeRestart
[17:37:42.432]                     is.null <- base::is.null
[17:37:42.432]                     muffled <- FALSE
[17:37:42.432]                     if (inherits(cond, "message")) {
[17:37:42.432]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.432]                       if (muffled) 
[17:37:42.432]                         invokeRestart("muffleMessage")
[17:37:42.432]                     }
[17:37:42.432]                     else if (inherits(cond, "warning")) {
[17:37:42.432]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.432]                       if (muffled) 
[17:37:42.432]                         invokeRestart("muffleWarning")
[17:37:42.432]                     }
[17:37:42.432]                     else if (inherits(cond, "condition")) {
[17:37:42.432]                       if (!is.null(pattern)) {
[17:37:42.432]                         computeRestarts <- base::computeRestarts
[17:37:42.432]                         grepl <- base::grepl
[17:37:42.432]                         restarts <- computeRestarts(cond)
[17:37:42.432]                         for (restart in restarts) {
[17:37:42.432]                           name <- restart$name
[17:37:42.432]                           if (is.null(name)) 
[17:37:42.432]                             next
[17:37:42.432]                           if (!grepl(pattern, name)) 
[17:37:42.432]                             next
[17:37:42.432]                           invokeRestart(restart)
[17:37:42.432]                           muffled <- TRUE
[17:37:42.432]                           break
[17:37:42.432]                         }
[17:37:42.432]                       }
[17:37:42.432]                     }
[17:37:42.432]                     invisible(muffled)
[17:37:42.432]                   }
[17:37:42.432]                   muffleCondition(cond)
[17:37:42.432]                 })
[17:37:42.432]             }))
[17:37:42.432]             future::FutureResult(value = ...future.value$value, 
[17:37:42.432]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.432]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.432]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.432]                     ...future.globalenv.names))
[17:37:42.432]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.432]         }, condition = base::local({
[17:37:42.432]             c <- base::c
[17:37:42.432]             inherits <- base::inherits
[17:37:42.432]             invokeRestart <- base::invokeRestart
[17:37:42.432]             length <- base::length
[17:37:42.432]             list <- base::list
[17:37:42.432]             seq.int <- base::seq.int
[17:37:42.432]             signalCondition <- base::signalCondition
[17:37:42.432]             sys.calls <- base::sys.calls
[17:37:42.432]             `[[` <- base::`[[`
[17:37:42.432]             `+` <- base::`+`
[17:37:42.432]             `<<-` <- base::`<<-`
[17:37:42.432]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.432]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.432]                   3L)]
[17:37:42.432]             }
[17:37:42.432]             function(cond) {
[17:37:42.432]                 is_error <- inherits(cond, "error")
[17:37:42.432]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.432]                   NULL)
[17:37:42.432]                 if (is_error) {
[17:37:42.432]                   sessionInformation <- function() {
[17:37:42.432]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.432]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.432]                       search = base::search(), system = base::Sys.info())
[17:37:42.432]                   }
[17:37:42.432]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.432]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.432]                     cond$call), session = sessionInformation(), 
[17:37:42.432]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.432]                   signalCondition(cond)
[17:37:42.432]                 }
[17:37:42.432]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.432]                 "immediateCondition"))) {
[17:37:42.432]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.432]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.432]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.432]                   if (TRUE && !signal) {
[17:37:42.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.432]                     {
[17:37:42.432]                       inherits <- base::inherits
[17:37:42.432]                       invokeRestart <- base::invokeRestart
[17:37:42.432]                       is.null <- base::is.null
[17:37:42.432]                       muffled <- FALSE
[17:37:42.432]                       if (inherits(cond, "message")) {
[17:37:42.432]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.432]                         if (muffled) 
[17:37:42.432]                           invokeRestart("muffleMessage")
[17:37:42.432]                       }
[17:37:42.432]                       else if (inherits(cond, "warning")) {
[17:37:42.432]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.432]                         if (muffled) 
[17:37:42.432]                           invokeRestart("muffleWarning")
[17:37:42.432]                       }
[17:37:42.432]                       else if (inherits(cond, "condition")) {
[17:37:42.432]                         if (!is.null(pattern)) {
[17:37:42.432]                           computeRestarts <- base::computeRestarts
[17:37:42.432]                           grepl <- base::grepl
[17:37:42.432]                           restarts <- computeRestarts(cond)
[17:37:42.432]                           for (restart in restarts) {
[17:37:42.432]                             name <- restart$name
[17:37:42.432]                             if (is.null(name)) 
[17:37:42.432]                               next
[17:37:42.432]                             if (!grepl(pattern, name)) 
[17:37:42.432]                               next
[17:37:42.432]                             invokeRestart(restart)
[17:37:42.432]                             muffled <- TRUE
[17:37:42.432]                             break
[17:37:42.432]                           }
[17:37:42.432]                         }
[17:37:42.432]                       }
[17:37:42.432]                       invisible(muffled)
[17:37:42.432]                     }
[17:37:42.432]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.432]                   }
[17:37:42.432]                 }
[17:37:42.432]                 else {
[17:37:42.432]                   if (TRUE) {
[17:37:42.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.432]                     {
[17:37:42.432]                       inherits <- base::inherits
[17:37:42.432]                       invokeRestart <- base::invokeRestart
[17:37:42.432]                       is.null <- base::is.null
[17:37:42.432]                       muffled <- FALSE
[17:37:42.432]                       if (inherits(cond, "message")) {
[17:37:42.432]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.432]                         if (muffled) 
[17:37:42.432]                           invokeRestart("muffleMessage")
[17:37:42.432]                       }
[17:37:42.432]                       else if (inherits(cond, "warning")) {
[17:37:42.432]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.432]                         if (muffled) 
[17:37:42.432]                           invokeRestart("muffleWarning")
[17:37:42.432]                       }
[17:37:42.432]                       else if (inherits(cond, "condition")) {
[17:37:42.432]                         if (!is.null(pattern)) {
[17:37:42.432]                           computeRestarts <- base::computeRestarts
[17:37:42.432]                           grepl <- base::grepl
[17:37:42.432]                           restarts <- computeRestarts(cond)
[17:37:42.432]                           for (restart in restarts) {
[17:37:42.432]                             name <- restart$name
[17:37:42.432]                             if (is.null(name)) 
[17:37:42.432]                               next
[17:37:42.432]                             if (!grepl(pattern, name)) 
[17:37:42.432]                               next
[17:37:42.432]                             invokeRestart(restart)
[17:37:42.432]                             muffled <- TRUE
[17:37:42.432]                             break
[17:37:42.432]                           }
[17:37:42.432]                         }
[17:37:42.432]                       }
[17:37:42.432]                       invisible(muffled)
[17:37:42.432]                     }
[17:37:42.432]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.432]                   }
[17:37:42.432]                 }
[17:37:42.432]             }
[17:37:42.432]         }))
[17:37:42.432]     }, error = function(ex) {
[17:37:42.432]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.432]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.432]                 ...future.rng), started = ...future.startTime, 
[17:37:42.432]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.432]             version = "1.8"), class = "FutureResult")
[17:37:42.432]     }, finally = {
[17:37:42.432]         if (!identical(...future.workdir, getwd())) 
[17:37:42.432]             setwd(...future.workdir)
[17:37:42.432]         {
[17:37:42.432]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.432]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.432]             }
[17:37:42.432]             base::options(...future.oldOptions)
[17:37:42.432]             if (.Platform$OS.type == "windows") {
[17:37:42.432]                 old_names <- names(...future.oldEnvVars)
[17:37:42.432]                 envs <- base::Sys.getenv()
[17:37:42.432]                 names <- names(envs)
[17:37:42.432]                 common <- intersect(names, old_names)
[17:37:42.432]                 added <- setdiff(names, old_names)
[17:37:42.432]                 removed <- setdiff(old_names, names)
[17:37:42.432]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.432]                   envs[common]]
[17:37:42.432]                 NAMES <- toupper(changed)
[17:37:42.432]                 args <- list()
[17:37:42.432]                 for (kk in seq_along(NAMES)) {
[17:37:42.432]                   name <- changed[[kk]]
[17:37:42.432]                   NAME <- NAMES[[kk]]
[17:37:42.432]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.432]                     next
[17:37:42.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.432]                 }
[17:37:42.432]                 NAMES <- toupper(added)
[17:37:42.432]                 for (kk in seq_along(NAMES)) {
[17:37:42.432]                   name <- added[[kk]]
[17:37:42.432]                   NAME <- NAMES[[kk]]
[17:37:42.432]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.432]                     next
[17:37:42.432]                   args[[name]] <- ""
[17:37:42.432]                 }
[17:37:42.432]                 NAMES <- toupper(removed)
[17:37:42.432]                 for (kk in seq_along(NAMES)) {
[17:37:42.432]                   name <- removed[[kk]]
[17:37:42.432]                   NAME <- NAMES[[kk]]
[17:37:42.432]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.432]                     next
[17:37:42.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.432]                 }
[17:37:42.432]                 if (length(args) > 0) 
[17:37:42.432]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.432]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.432]             }
[17:37:42.432]             else {
[17:37:42.432]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.432]             }
[17:37:42.432]             {
[17:37:42.432]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.432]                   0L) {
[17:37:42.432]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.432]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.432]                   base::options(opts)
[17:37:42.432]                 }
[17:37:42.432]                 {
[17:37:42.432]                   {
[17:37:42.432]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.432]                     NULL
[17:37:42.432]                   }
[17:37:42.432]                   options(future.plan = NULL)
[17:37:42.432]                   if (is.na(NA_character_)) 
[17:37:42.432]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.432]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.432]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.432]                     .init = FALSE)
[17:37:42.432]                 }
[17:37:42.432]             }
[17:37:42.432]         }
[17:37:42.432]     })
[17:37:42.432]     if (TRUE) {
[17:37:42.432]         base::sink(type = "output", split = FALSE)
[17:37:42.432]         if (TRUE) {
[17:37:42.432]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.432]         }
[17:37:42.432]         else {
[17:37:42.432]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.432]         }
[17:37:42.432]         base::close(...future.stdout)
[17:37:42.432]         ...future.stdout <- NULL
[17:37:42.432]     }
[17:37:42.432]     ...future.result$conditions <- ...future.conditions
[17:37:42.432]     ...future.result$finished <- base::Sys.time()
[17:37:42.432]     ...future.result
[17:37:42.432] }
[17:37:42.435] assign_globals() ...
[17:37:42.435] List of 7
[17:37:42.435]  $ ...future.FUN            :function (...)  
[17:37:42.435]  $ foo                      :function (x = 1, y = 2)  
[17:37:42.435]  $ x                        : num 3
[17:37:42.435]  $ future.call.arguments    : list()
[17:37:42.435]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.435]  $ ...future.elements_ii    :List of 2
[17:37:42.435]   ..$ : int 0
[17:37:42.435]   ..$ : int 0
[17:37:42.435]  $ ...future.seeds_ii       :List of 2
[17:37:42.435]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[17:37:42.435]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[17:37:42.435]  $ ...future.globals.maxSize: NULL
[17:37:42.435]  - attr(*, "where")=List of 7
[17:37:42.435]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.435]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:37:42.435]   ..$ x                        :<environment: R_EmptyEnv> 
[17:37:42.435]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.435]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.435]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.435]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.435]  - attr(*, "resolved")= logi FALSE
[17:37:42.435]  - attr(*, "total_size")= num 2200
[17:37:42.435]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.435]  - attr(*, "already-done")= logi TRUE
[17:37:42.443] - reassign environment for ‘...future.FUN’
[17:37:42.443] - copied ‘...future.FUN’ to environment
[17:37:42.443] - reassign environment for ‘foo’
[17:37:42.443] - copied ‘foo’ to environment
[17:37:42.443] - copied ‘x’ to environment
[17:37:42.443] - copied ‘future.call.arguments’ to environment
[17:37:42.444] - copied ‘...future.elements_ii’ to environment
[17:37:42.444] - copied ‘...future.seeds_ii’ to environment
[17:37:42.444] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.444] assign_globals() ... done
[17:37:42.444] requestCore(): workers = 2
[17:37:42.446] MulticoreFuture started
[17:37:42.447] - Launch lazy future ... done
[17:37:42.447] run() for ‘MulticoreFuture’ ... done
[17:37:42.447] Created future:
[17:37:42.448] plan(): Setting new future strategy stack:
[17:37:42.448] List of future strategies:
[17:37:42.448] 1. sequential:
[17:37:42.448]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.448]    - tweaked: FALSE
[17:37:42.448]    - call: NULL
[17:37:42.449] plan(): nbrOfWorkers() = 1
[17:37:42.451] plan(): Setting new future strategy stack:
[17:37:42.451] List of future strategies:
[17:37:42.451] 1. multicore:
[17:37:42.451]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.451]    - tweaked: FALSE
[17:37:42.451]    - call: plan(strategy)
[17:37:42.457] plan(): nbrOfWorkers() = 2
[17:37:42.447] MulticoreFuture:
[17:37:42.447] Label: ‘future_replicate-1’
[17:37:42.447] Expression:
[17:37:42.447] {
[17:37:42.447]     do.call(function(...) {
[17:37:42.447]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.447]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.447]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.447]             on.exit(options(oopts), add = TRUE)
[17:37:42.447]         }
[17:37:42.447]         {
[17:37:42.447]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.447]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.447]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.447]                   envir = globalenv(), inherits = FALSE)
[17:37:42.447]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.447]             })
[17:37:42.447]         }
[17:37:42.447]     }, args = future.call.arguments)
[17:37:42.447] }
[17:37:42.447] Lazy evaluation: FALSE
[17:37:42.447] Asynchronous evaluation: TRUE
[17:37:42.447] Local evaluation: TRUE
[17:37:42.447] Environment: 0x5640bf30b5c0
[17:37:42.447] Capture standard output: TRUE
[17:37:42.447] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.447] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:37:42.447] Packages: <none>
[17:37:42.447] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.447] Resolved: TRUE
[17:37:42.447] Value: <not collected>
[17:37:42.447] Conditions captured: <none>
[17:37:42.447] Early signaling: FALSE
[17:37:42.447] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.447] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.458] Chunk #1 of 2 ... DONE
[17:37:42.458] Chunk #2 of 2 ...
[17:37:42.458]  - Finding globals in 'X' for chunk #2 ...
[17:37:42.458] getGlobalsAndPackages() ...
[17:37:42.459] Searching for globals...
[17:37:42.459] 
[17:37:42.459] Searching for globals ... DONE
[17:37:42.459] - globals: [0] <none>
[17:37:42.460] getGlobalsAndPackages() ... DONE
[17:37:42.460]    + additional globals found: [n=0] 
[17:37:42.460]    + additional namespaces needed: [n=0] 
[17:37:42.460]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:42.460]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:42.460]  - seeds: [3] <seeds>
[17:37:42.460]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.461] getGlobalsAndPackages() ...
[17:37:42.461] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.461] Resolving globals: FALSE
[17:37:42.461] Tweak future expression to call with '...' arguments ...
[17:37:42.461] {
[17:37:42.461]     do.call(function(...) {
[17:37:42.461]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.461]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.461]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.461]             on.exit(options(oopts), add = TRUE)
[17:37:42.461]         }
[17:37:42.461]         {
[17:37:42.461]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.461]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.461]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.461]                   envir = globalenv(), inherits = FALSE)
[17:37:42.461]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.461]             })
[17:37:42.461]         }
[17:37:42.461]     }, args = future.call.arguments)
[17:37:42.461] }
[17:37:42.462] Tweak future expression to call with '...' arguments ... DONE
[17:37:42.463] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:42.463] 
[17:37:42.463] getGlobalsAndPackages() ... DONE
[17:37:42.464] run() for ‘Future’ ...
[17:37:42.464] - state: ‘created’
[17:37:42.464] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:37:42.469] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.469] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:37:42.469]   - Field: ‘label’
[17:37:42.470]   - Field: ‘local’
[17:37:42.470]   - Field: ‘owner’
[17:37:42.470]   - Field: ‘envir’
[17:37:42.470]   - Field: ‘workers’
[17:37:42.470]   - Field: ‘packages’
[17:37:42.470]   - Field: ‘gc’
[17:37:42.471]   - Field: ‘job’
[17:37:42.471]   - Field: ‘conditions’
[17:37:42.471]   - Field: ‘expr’
[17:37:42.471]   - Field: ‘uuid’
[17:37:42.471]   - Field: ‘seed’
[17:37:42.471]   - Field: ‘version’
[17:37:42.471]   - Field: ‘result’
[17:37:42.472]   - Field: ‘asynchronous’
[17:37:42.472]   - Field: ‘calls’
[17:37:42.472]   - Field: ‘globals’
[17:37:42.472]   - Field: ‘stdout’
[17:37:42.472]   - Field: ‘earlySignal’
[17:37:42.472]   - Field: ‘lazy’
[17:37:42.472]   - Field: ‘state’
[17:37:42.473] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:37:42.473] - Launch lazy future ...
[17:37:42.473] Packages needed by the future expression (n = 0): <none>
[17:37:42.473] Packages needed by future strategies (n = 0): <none>
[17:37:42.474] {
[17:37:42.474]     {
[17:37:42.474]         {
[17:37:42.474]             ...future.startTime <- base::Sys.time()
[17:37:42.474]             {
[17:37:42.474]                 {
[17:37:42.474]                   {
[17:37:42.474]                     {
[17:37:42.474]                       base::local({
[17:37:42.474]                         has_future <- base::requireNamespace("future", 
[17:37:42.474]                           quietly = TRUE)
[17:37:42.474]                         if (has_future) {
[17:37:42.474]                           ns <- base::getNamespace("future")
[17:37:42.474]                           version <- ns[[".package"]][["version"]]
[17:37:42.474]                           if (is.null(version)) 
[17:37:42.474]                             version <- utils::packageVersion("future")
[17:37:42.474]                         }
[17:37:42.474]                         else {
[17:37:42.474]                           version <- NULL
[17:37:42.474]                         }
[17:37:42.474]                         if (!has_future || version < "1.8.0") {
[17:37:42.474]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:42.474]                             "", base::R.version$version.string), 
[17:37:42.474]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:42.474]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:42.474]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:42.474]                               "release", "version")], collapse = " "), 
[17:37:42.474]                             hostname = base::Sys.info()[["nodename"]])
[17:37:42.474]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:42.474]                             info)
[17:37:42.474]                           info <- base::paste(info, collapse = "; ")
[17:37:42.474]                           if (!has_future) {
[17:37:42.474]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:42.474]                               info)
[17:37:42.474]                           }
[17:37:42.474]                           else {
[17:37:42.474]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:42.474]                               info, version)
[17:37:42.474]                           }
[17:37:42.474]                           base::stop(msg)
[17:37:42.474]                         }
[17:37:42.474]                       })
[17:37:42.474]                     }
[17:37:42.474]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:42.474]                     base::options(mc.cores = 1L)
[17:37:42.474]                   }
[17:37:42.474]                   ...future.strategy.old <- future::plan("list")
[17:37:42.474]                   options(future.plan = NULL)
[17:37:42.474]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.474]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:42.474]                 }
[17:37:42.474]                 ...future.workdir <- getwd()
[17:37:42.474]             }
[17:37:42.474]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:42.474]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:42.474]         }
[17:37:42.474]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:42.474]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:42.474]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:42.474]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:42.474]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:42.474]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:42.474]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:42.474]             base::names(...future.oldOptions))
[17:37:42.474]     }
[17:37:42.474]     if (FALSE) {
[17:37:42.474]     }
[17:37:42.474]     else {
[17:37:42.474]         if (TRUE) {
[17:37:42.474]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:42.474]                 open = "w")
[17:37:42.474]         }
[17:37:42.474]         else {
[17:37:42.474]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:42.474]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:42.474]         }
[17:37:42.474]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:42.474]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:42.474]             base::sink(type = "output", split = FALSE)
[17:37:42.474]             base::close(...future.stdout)
[17:37:42.474]         }, add = TRUE)
[17:37:42.474]     }
[17:37:42.474]     ...future.frame <- base::sys.nframe()
[17:37:42.474]     ...future.conditions <- base::list()
[17:37:42.474]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:42.474]     if (FALSE) {
[17:37:42.474]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:42.474]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:42.474]     }
[17:37:42.474]     ...future.result <- base::tryCatch({
[17:37:42.474]         base::withCallingHandlers({
[17:37:42.474]             ...future.value <- base::withVisible(base::local({
[17:37:42.474]                 withCallingHandlers({
[17:37:42.474]                   {
[17:37:42.474]                     do.call(function(...) {
[17:37:42.474]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.474]                       if (!identical(...future.globals.maxSize.org, 
[17:37:42.474]                         ...future.globals.maxSize)) {
[17:37:42.474]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.474]                         on.exit(options(oopts), add = TRUE)
[17:37:42.474]                       }
[17:37:42.474]                       {
[17:37:42.474]                         lapply(seq_along(...future.elements_ii), 
[17:37:42.474]                           FUN = function(jj) {
[17:37:42.474]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.474]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.474]                               envir = globalenv(), inherits = FALSE)
[17:37:42.474]                             ...future.FUN(...future.X_jj, ...)
[17:37:42.474]                           })
[17:37:42.474]                       }
[17:37:42.474]                     }, args = future.call.arguments)
[17:37:42.474]                   }
[17:37:42.474]                 }, immediateCondition = function(cond) {
[17:37:42.474]                   save_rds <- function (object, pathname, ...) 
[17:37:42.474]                   {
[17:37:42.474]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:37:42.474]                     if (file_test("-f", pathname_tmp)) {
[17:37:42.474]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.474]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:37:42.474]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.474]                         fi_tmp[["mtime"]])
[17:37:42.474]                     }
[17:37:42.474]                     tryCatch({
[17:37:42.474]                       saveRDS(object, file = pathname_tmp, ...)
[17:37:42.474]                     }, error = function(ex) {
[17:37:42.474]                       msg <- conditionMessage(ex)
[17:37:42.474]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.474]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:37:42.474]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.474]                         fi_tmp[["mtime"]], msg)
[17:37:42.474]                       ex$message <- msg
[17:37:42.474]                       stop(ex)
[17:37:42.474]                     })
[17:37:42.474]                     stopifnot(file_test("-f", pathname_tmp))
[17:37:42.474]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:37:42.474]                     if (!res || file_test("-f", pathname_tmp)) {
[17:37:42.474]                       fi_tmp <- file.info(pathname_tmp)
[17:37:42.474]                       fi <- file.info(pathname)
[17:37:42.474]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:37:42.474]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:37:42.474]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:37:42.474]                         fi[["size"]], fi[["mtime"]])
[17:37:42.474]                       stop(msg)
[17:37:42.474]                     }
[17:37:42.474]                     invisible(pathname)
[17:37:42.474]                   }
[17:37:42.474]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:37:42.474]                     rootPath = tempdir()) 
[17:37:42.474]                   {
[17:37:42.474]                     obj <- list(time = Sys.time(), condition = cond)
[17:37:42.474]                     file <- tempfile(pattern = class(cond)[1], 
[17:37:42.474]                       tmpdir = path, fileext = ".rds")
[17:37:42.474]                     save_rds(obj, file)
[17:37:42.474]                   }
[17:37:42.474]                   saveImmediateCondition(cond, path = "/tmp/RtmpnwIrUW/.future/immediateConditions")
[17:37:42.474]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.474]                   {
[17:37:42.474]                     inherits <- base::inherits
[17:37:42.474]                     invokeRestart <- base::invokeRestart
[17:37:42.474]                     is.null <- base::is.null
[17:37:42.474]                     muffled <- FALSE
[17:37:42.474]                     if (inherits(cond, "message")) {
[17:37:42.474]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:42.474]                       if (muffled) 
[17:37:42.474]                         invokeRestart("muffleMessage")
[17:37:42.474]                     }
[17:37:42.474]                     else if (inherits(cond, "warning")) {
[17:37:42.474]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:42.474]                       if (muffled) 
[17:37:42.474]                         invokeRestart("muffleWarning")
[17:37:42.474]                     }
[17:37:42.474]                     else if (inherits(cond, "condition")) {
[17:37:42.474]                       if (!is.null(pattern)) {
[17:37:42.474]                         computeRestarts <- base::computeRestarts
[17:37:42.474]                         grepl <- base::grepl
[17:37:42.474]                         restarts <- computeRestarts(cond)
[17:37:42.474]                         for (restart in restarts) {
[17:37:42.474]                           name <- restart$name
[17:37:42.474]                           if (is.null(name)) 
[17:37:42.474]                             next
[17:37:42.474]                           if (!grepl(pattern, name)) 
[17:37:42.474]                             next
[17:37:42.474]                           invokeRestart(restart)
[17:37:42.474]                           muffled <- TRUE
[17:37:42.474]                           break
[17:37:42.474]                         }
[17:37:42.474]                       }
[17:37:42.474]                     }
[17:37:42.474]                     invisible(muffled)
[17:37:42.474]                   }
[17:37:42.474]                   muffleCondition(cond)
[17:37:42.474]                 })
[17:37:42.474]             }))
[17:37:42.474]             future::FutureResult(value = ...future.value$value, 
[17:37:42.474]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.474]                   ...future.rng), globalenv = if (FALSE) 
[17:37:42.474]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:42.474]                     ...future.globalenv.names))
[17:37:42.474]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:42.474]         }, condition = base::local({
[17:37:42.474]             c <- base::c
[17:37:42.474]             inherits <- base::inherits
[17:37:42.474]             invokeRestart <- base::invokeRestart
[17:37:42.474]             length <- base::length
[17:37:42.474]             list <- base::list
[17:37:42.474]             seq.int <- base::seq.int
[17:37:42.474]             signalCondition <- base::signalCondition
[17:37:42.474]             sys.calls <- base::sys.calls
[17:37:42.474]             `[[` <- base::`[[`
[17:37:42.474]             `+` <- base::`+`
[17:37:42.474]             `<<-` <- base::`<<-`
[17:37:42.474]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:42.474]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:42.474]                   3L)]
[17:37:42.474]             }
[17:37:42.474]             function(cond) {
[17:37:42.474]                 is_error <- inherits(cond, "error")
[17:37:42.474]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:42.474]                   NULL)
[17:37:42.474]                 if (is_error) {
[17:37:42.474]                   sessionInformation <- function() {
[17:37:42.474]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:42.474]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:42.474]                       search = base::search(), system = base::Sys.info())
[17:37:42.474]                   }
[17:37:42.474]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.474]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:42.474]                     cond$call), session = sessionInformation(), 
[17:37:42.474]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:42.474]                   signalCondition(cond)
[17:37:42.474]                 }
[17:37:42.474]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:42.474]                 "immediateCondition"))) {
[17:37:42.474]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:42.474]                   ...future.conditions[[length(...future.conditions) + 
[17:37:42.474]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:42.474]                   if (TRUE && !signal) {
[17:37:42.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.474]                     {
[17:37:42.474]                       inherits <- base::inherits
[17:37:42.474]                       invokeRestart <- base::invokeRestart
[17:37:42.474]                       is.null <- base::is.null
[17:37:42.474]                       muffled <- FALSE
[17:37:42.474]                       if (inherits(cond, "message")) {
[17:37:42.474]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.474]                         if (muffled) 
[17:37:42.474]                           invokeRestart("muffleMessage")
[17:37:42.474]                       }
[17:37:42.474]                       else if (inherits(cond, "warning")) {
[17:37:42.474]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.474]                         if (muffled) 
[17:37:42.474]                           invokeRestart("muffleWarning")
[17:37:42.474]                       }
[17:37:42.474]                       else if (inherits(cond, "condition")) {
[17:37:42.474]                         if (!is.null(pattern)) {
[17:37:42.474]                           computeRestarts <- base::computeRestarts
[17:37:42.474]                           grepl <- base::grepl
[17:37:42.474]                           restarts <- computeRestarts(cond)
[17:37:42.474]                           for (restart in restarts) {
[17:37:42.474]                             name <- restart$name
[17:37:42.474]                             if (is.null(name)) 
[17:37:42.474]                               next
[17:37:42.474]                             if (!grepl(pattern, name)) 
[17:37:42.474]                               next
[17:37:42.474]                             invokeRestart(restart)
[17:37:42.474]                             muffled <- TRUE
[17:37:42.474]                             break
[17:37:42.474]                           }
[17:37:42.474]                         }
[17:37:42.474]                       }
[17:37:42.474]                       invisible(muffled)
[17:37:42.474]                     }
[17:37:42.474]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.474]                   }
[17:37:42.474]                 }
[17:37:42.474]                 else {
[17:37:42.474]                   if (TRUE) {
[17:37:42.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:42.474]                     {
[17:37:42.474]                       inherits <- base::inherits
[17:37:42.474]                       invokeRestart <- base::invokeRestart
[17:37:42.474]                       is.null <- base::is.null
[17:37:42.474]                       muffled <- FALSE
[17:37:42.474]                       if (inherits(cond, "message")) {
[17:37:42.474]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:42.474]                         if (muffled) 
[17:37:42.474]                           invokeRestart("muffleMessage")
[17:37:42.474]                       }
[17:37:42.474]                       else if (inherits(cond, "warning")) {
[17:37:42.474]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:42.474]                         if (muffled) 
[17:37:42.474]                           invokeRestart("muffleWarning")
[17:37:42.474]                       }
[17:37:42.474]                       else if (inherits(cond, "condition")) {
[17:37:42.474]                         if (!is.null(pattern)) {
[17:37:42.474]                           computeRestarts <- base::computeRestarts
[17:37:42.474]                           grepl <- base::grepl
[17:37:42.474]                           restarts <- computeRestarts(cond)
[17:37:42.474]                           for (restart in restarts) {
[17:37:42.474]                             name <- restart$name
[17:37:42.474]                             if (is.null(name)) 
[17:37:42.474]                               next
[17:37:42.474]                             if (!grepl(pattern, name)) 
[17:37:42.474]                               next
[17:37:42.474]                             invokeRestart(restart)
[17:37:42.474]                             muffled <- TRUE
[17:37:42.474]                             break
[17:37:42.474]                           }
[17:37:42.474]                         }
[17:37:42.474]                       }
[17:37:42.474]                       invisible(muffled)
[17:37:42.474]                     }
[17:37:42.474]                     muffleCondition(cond, pattern = "^muffle")
[17:37:42.474]                   }
[17:37:42.474]                 }
[17:37:42.474]             }
[17:37:42.474]         }))
[17:37:42.474]     }, error = function(ex) {
[17:37:42.474]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:42.474]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:42.474]                 ...future.rng), started = ...future.startTime, 
[17:37:42.474]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:42.474]             version = "1.8"), class = "FutureResult")
[17:37:42.474]     }, finally = {
[17:37:42.474]         if (!identical(...future.workdir, getwd())) 
[17:37:42.474]             setwd(...future.workdir)
[17:37:42.474]         {
[17:37:42.474]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:42.474]                 ...future.oldOptions$nwarnings <- NULL
[17:37:42.474]             }
[17:37:42.474]             base::options(...future.oldOptions)
[17:37:42.474]             if (.Platform$OS.type == "windows") {
[17:37:42.474]                 old_names <- names(...future.oldEnvVars)
[17:37:42.474]                 envs <- base::Sys.getenv()
[17:37:42.474]                 names <- names(envs)
[17:37:42.474]                 common <- intersect(names, old_names)
[17:37:42.474]                 added <- setdiff(names, old_names)
[17:37:42.474]                 removed <- setdiff(old_names, names)
[17:37:42.474]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:42.474]                   envs[common]]
[17:37:42.474]                 NAMES <- toupper(changed)
[17:37:42.474]                 args <- list()
[17:37:42.474]                 for (kk in seq_along(NAMES)) {
[17:37:42.474]                   name <- changed[[kk]]
[17:37:42.474]                   NAME <- NAMES[[kk]]
[17:37:42.474]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.474]                     next
[17:37:42.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.474]                 }
[17:37:42.474]                 NAMES <- toupper(added)
[17:37:42.474]                 for (kk in seq_along(NAMES)) {
[17:37:42.474]                   name <- added[[kk]]
[17:37:42.474]                   NAME <- NAMES[[kk]]
[17:37:42.474]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.474]                     next
[17:37:42.474]                   args[[name]] <- ""
[17:37:42.474]                 }
[17:37:42.474]                 NAMES <- toupper(removed)
[17:37:42.474]                 for (kk in seq_along(NAMES)) {
[17:37:42.474]                   name <- removed[[kk]]
[17:37:42.474]                   NAME <- NAMES[[kk]]
[17:37:42.474]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:42.474]                     next
[17:37:42.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:42.474]                 }
[17:37:42.474]                 if (length(args) > 0) 
[17:37:42.474]                   base::do.call(base::Sys.setenv, args = args)
[17:37:42.474]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:42.474]             }
[17:37:42.474]             else {
[17:37:42.474]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:42.474]             }
[17:37:42.474]             {
[17:37:42.474]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:42.474]                   0L) {
[17:37:42.474]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:42.474]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:42.474]                   base::options(opts)
[17:37:42.474]                 }
[17:37:42.474]                 {
[17:37:42.474]                   {
[17:37:42.474]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:42.474]                     NULL
[17:37:42.474]                   }
[17:37:42.474]                   options(future.plan = NULL)
[17:37:42.474]                   if (is.na(NA_character_)) 
[17:37:42.474]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:42.474]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:42.474]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:42.474]                     .init = FALSE)
[17:37:42.474]                 }
[17:37:42.474]             }
[17:37:42.474]         }
[17:37:42.474]     })
[17:37:42.474]     if (TRUE) {
[17:37:42.474]         base::sink(type = "output", split = FALSE)
[17:37:42.474]         if (TRUE) {
[17:37:42.474]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:42.474]         }
[17:37:42.474]         else {
[17:37:42.474]             ...future.result["stdout"] <- base::list(NULL)
[17:37:42.474]         }
[17:37:42.474]         base::close(...future.stdout)
[17:37:42.474]         ...future.stdout <- NULL
[17:37:42.474]     }
[17:37:42.474]     ...future.result$conditions <- ...future.conditions
[17:37:42.474]     ...future.result$finished <- base::Sys.time()
[17:37:42.474]     ...future.result
[17:37:42.474] }
[17:37:42.478] assign_globals() ...
[17:37:42.478] List of 7
[17:37:42.478]  $ ...future.FUN            :function (...)  
[17:37:42.478]  $ foo                      :function (x = 1, y = 2)  
[17:37:42.478]  $ x                        : num 3
[17:37:42.478]  $ future.call.arguments    : list()
[17:37:42.478]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:42.478]  $ ...future.elements_ii    :List of 3
[17:37:42.478]   ..$ : int 0
[17:37:42.478]   ..$ : int 0
[17:37:42.478]   ..$ : int 0
[17:37:42.478]  $ ...future.seeds_ii       :List of 3
[17:37:42.478]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[17:37:42.478]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[17:37:42.478]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[17:37:42.478]  $ ...future.globals.maxSize: NULL
[17:37:42.478]  - attr(*, "where")=List of 7
[17:37:42.478]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[17:37:42.478]   ..$ foo                      :<environment: R_EmptyEnv> 
[17:37:42.478]   ..$ x                        :<environment: R_EmptyEnv> 
[17:37:42.478]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[17:37:42.478]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[17:37:42.478]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[17:37:42.478]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[17:37:42.478]  - attr(*, "resolved")= logi FALSE
[17:37:42.478]  - attr(*, "total_size")= num 2200
[17:37:42.478]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:42.478]  - attr(*, "already-done")= logi TRUE
[17:37:42.492] - reassign environment for ‘...future.FUN’
[17:37:42.493] - copied ‘...future.FUN’ to environment
[17:37:42.493] - reassign environment for ‘foo’
[17:37:42.493] - copied ‘foo’ to environment
[17:37:42.493] - copied ‘x’ to environment
[17:37:42.493] - copied ‘future.call.arguments’ to environment
[17:37:42.493] - copied ‘...future.elements_ii’ to environment
[17:37:42.493] - copied ‘...future.seeds_ii’ to environment
[17:37:42.494] - copied ‘...future.globals.maxSize’ to environment
[17:37:42.494] assign_globals() ... done
[17:37:42.494] requestCore(): workers = 2
[17:37:42.496] MulticoreFuture started
[17:37:42.497] - Launch lazy future ... done
[17:37:42.497] run() for ‘MulticoreFuture’ ... done
[17:37:42.498] Created future:
[17:37:42.498] plan(): Setting new future strategy stack:
[17:37:42.498] List of future strategies:
[17:37:42.498] 1. sequential:
[17:37:42.498]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.498]    - tweaked: FALSE
[17:37:42.498]    - call: NULL
[17:37:42.499] plan(): nbrOfWorkers() = 1
[17:37:42.502] plan(): Setting new future strategy stack:
[17:37:42.502] List of future strategies:
[17:37:42.502] 1. multicore:
[17:37:42.502]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:37:42.502]    - tweaked: FALSE
[17:37:42.502]    - call: plan(strategy)
[17:37:42.507] plan(): nbrOfWorkers() = 2
[17:37:42.498] MulticoreFuture:
[17:37:42.498] Label: ‘future_replicate-2’
[17:37:42.498] Expression:
[17:37:42.498] {
[17:37:42.498]     do.call(function(...) {
[17:37:42.498]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:42.498]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:42.498]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:42.498]             on.exit(options(oopts), add = TRUE)
[17:37:42.498]         }
[17:37:42.498]         {
[17:37:42.498]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:42.498]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:42.498]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:42.498]                   envir = globalenv(), inherits = FALSE)
[17:37:42.498]                 ...future.FUN(...future.X_jj, ...)
[17:37:42.498]             })
[17:37:42.498]         }
[17:37:42.498]     }, args = future.call.arguments)
[17:37:42.498] }
[17:37:42.498] Lazy evaluation: FALSE
[17:37:42.498] Asynchronous evaluation: TRUE
[17:37:42.498] Local evaluation: TRUE
[17:37:42.498] Environment: 0x5640bf30b5c0
[17:37:42.498] Capture standard output: TRUE
[17:37:42.498] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:42.498] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:37:42.498] Packages: <none>
[17:37:42.498] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:42.498] Resolved: TRUE
[17:37:42.498] Value: <not collected>
[17:37:42.498] Conditions captured: <none>
[17:37:42.498] Early signaling: FALSE
[17:37:42.498] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:42.498] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:42.508] Chunk #2 of 2 ... DONE
[17:37:42.509] Launching 2 futures (chunks) ... DONE
[17:37:42.509] Resolving 2 futures (chunks) ...
[17:37:42.509] resolve() on list ...
[17:37:42.509]  recursive: 0
[17:37:42.509]  length: 2
[17:37:42.509] 
[17:37:42.510] Future #1
[17:37:42.510] result() for MulticoreFuture ...
[17:37:42.511] result() for MulticoreFuture ...
[17:37:42.511] result() for MulticoreFuture ... done
[17:37:42.511] result() for MulticoreFuture ... done
[17:37:42.511] result() for MulticoreFuture ...
[17:37:42.511] result() for MulticoreFuture ... done
[17:37:42.512] signalConditionsASAP(MulticoreFuture, pos=1) ...
[17:37:42.512] - nx: 2
[17:37:42.512] - relay: TRUE
[17:37:42.512] - stdout: TRUE
[17:37:42.512] - signal: TRUE
[17:37:42.512] - resignal: FALSE
[17:37:42.513] - force: TRUE
[17:37:42.513] - relayed: [n=2] FALSE, FALSE
[17:37:42.513] - queued futures: [n=2] FALSE, FALSE
[17:37:42.513]  - until=1
[17:37:42.513]  - relaying element #1
[17:37:42.513] result() for MulticoreFuture ...
[17:37:42.513] result() for MulticoreFuture ... done
[17:37:42.514] result() for MulticoreFuture ...
[17:37:42.514] result() for MulticoreFuture ... done
[17:37:42.514] result() for MulticoreFuture ...
[17:37:42.514] result() for MulticoreFuture ... done
[17:37:42.514] result() for MulticoreFuture ...
[17:37:42.514] result() for MulticoreFuture ... done
[17:37:42.515] - relayed: [n=2] TRUE, FALSE
[17:37:42.515] - queued futures: [n=2] TRUE, FALSE
[17:37:42.515] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[17:37:42.515]  length: 1 (resolved future 1)
[17:37:42.515] Future #2
[17:37:42.516] result() for MulticoreFuture ...
[17:37:42.516] result() for MulticoreFuture ...
[17:37:42.517] result() for MulticoreFuture ... done
[17:37:42.517] result() for MulticoreFuture ... done
[17:37:42.517] result() for MulticoreFuture ...
[17:37:42.517] result() for MulticoreFuture ... done
[17:37:42.517] signalConditionsASAP(MulticoreFuture, pos=2) ...
[17:37:42.517] - nx: 2
[17:37:42.518] - relay: TRUE
[17:37:42.518] - stdout: TRUE
[17:37:42.518] - signal: TRUE
[17:37:42.518] - resignal: FALSE
[17:37:42.518] - force: TRUE
[17:37:42.518] - relayed: [n=2] TRUE, FALSE
[17:37:42.518] - queued futures: [n=2] TRUE, FALSE
[17:37:42.519]  - until=2
[17:37:42.519]  - relaying element #2
[17:37:42.519] result() for MulticoreFuture ...
[17:37:42.519] result() for MulticoreFuture ... done
[17:37:42.519] result() for MulticoreFuture ...
[17:37:42.519] result() for MulticoreFuture ... done
[17:37:42.519] result() for MulticoreFuture ...
[17:37:42.519] result() for MulticoreFuture ... done
[17:37:42.520] result() for MulticoreFuture ...
[17:37:42.520] result() for MulticoreFuture ... done
[17:37:42.520] - relayed: [n=2] TRUE, TRUE
[17:37:42.520] - queued futures: [n=2] TRUE, TRUE
[17:37:42.520] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[17:37:42.520]  length: 0 (resolved future 2)
[17:37:42.520] Relaying remaining futures
[17:37:42.520] signalConditionsASAP(NULL, pos=0) ...
[17:37:42.521] - nx: 2
[17:37:42.521] - relay: TRUE
[17:37:42.521] - stdout: TRUE
[17:37:42.521] - signal: TRUE
[17:37:42.521] - resignal: FALSE
[17:37:42.521] - force: TRUE
[17:37:42.521] - relayed: [n=2] TRUE, TRUE
[17:37:42.521] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:42.521] - relayed: [n=2] TRUE, TRUE
[17:37:42.522] - queued futures: [n=2] TRUE, TRUE
[17:37:42.522] signalConditionsASAP(NULL, pos=0) ... done
[17:37:42.522] resolve() on list ... DONE
[17:37:42.522] result() for MulticoreFuture ...
[17:37:42.522] result() for MulticoreFuture ... done
[17:37:42.522] result() for MulticoreFuture ...
[17:37:42.522] result() for MulticoreFuture ... done
[17:37:42.522] result() for MulticoreFuture ...
[17:37:42.522] result() for MulticoreFuture ... done
[17:37:42.523] result() for MulticoreFuture ...
[17:37:42.523] result() for MulticoreFuture ... done
[17:37:42.523]  - Number of value chunks collected: 2
[17:37:42.523] Resolving 2 futures (chunks) ... DONE
[17:37:42.523] Reducing values from 2 chunks ...
[17:37:42.523]  - Number of values collected after concatenation: 5
[17:37:42.523]  - Number of values expected: 5
[17:37:42.523] Reducing values from 2 chunks ... DONE
[17:37:42.524] future_lapply() ... DONE
[17:37:42.524] plan(): Setting new future strategy stack:
[17:37:42.524] List of future strategies:
[17:37:42.524] 1. sequential:
[17:37:42.524]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:42.524]    - tweaked: FALSE
[17:37:42.524]    - call: plan(sequential)
[17:37:42.525] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[17:37:42.525] plan(): Setting new future strategy stack:
[17:37:42.526] List of future strategies:
[17:37:42.526] 1. multisession:
[17:37:42.526]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:37:42.526]    - tweaked: FALSE
[17:37:42.526]    - call: plan(strategy)
[17:37:42.526] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:37:42.526] multisession:
[17:37:42.526] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:37:42.526] - tweaked: FALSE
[17:37:42.526] - call: plan(strategy)
[17:37:42.533] getGlobalsAndPackages() ...
[17:37:42.533] Not searching for globals
[17:37:42.533] - globals: [0] <none>
[17:37:42.534] getGlobalsAndPackages() ... DONE
[17:37:42.534] [local output] makeClusterPSOCK() ...
[17:37:42.584] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:37:42.585] [local output] Base port: 11996
[17:37:42.585] [local output] Getting setup options for 2 cluster nodes ...
[17:37:42.585] [local output]  - Node 1 of 2 ...
[17:37:42.585] [local output] localMachine=TRUE => revtunnel=FALSE

[17:37:42.586] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnwIrUW/worker.rank=1.parallelly.parent=34988.88ac6cc87d3d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpnwIrUW/worker.rank=1.parallelly.parent=34988.88ac6cc87d3d.pid")'’
[17:37:42.775] - Possible to infer worker's PID: TRUE
[17:37:42.775] [local output] Rscript port: 11996

[17:37:42.776] [local output]  - Node 2 of 2 ...
[17:37:42.776] [local output] localMachine=TRUE => revtunnel=FALSE

[17:37:42.777] [local output] Rscript port: 11996

[17:37:42.777] [local output] Getting setup options for 2 cluster nodes ... done
[17:37:42.777] [local output]  - Parallel setup requested for some PSOCK nodes
[17:37:42.778] [local output] Setting up PSOCK nodes in parallel
[17:37:42.778] List of 36
[17:37:42.778]  $ worker          : chr "localhost"
[17:37:42.778]   ..- attr(*, "localhost")= logi TRUE
[17:37:42.778]  $ master          : chr "localhost"
[17:37:42.778]  $ port            : int 11996
[17:37:42.778]  $ connectTimeout  : num 120
[17:37:42.778]  $ timeout         : num 2592000
[17:37:42.778]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:37:42.778]  $ homogeneous     : logi TRUE
[17:37:42.778]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:37:42.778]  $ rscript_envs    : NULL
[17:37:42.778]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:37:42.778]  $ rscript_startup : NULL
[17:37:42.778]  $ rscript_sh      : chr "sh"
[17:37:42.778]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:37:42.778]  $ methods         : logi TRUE
[17:37:42.778]  $ socketOptions   : chr "no-delay"
[17:37:42.778]  $ useXDR          : logi FALSE
[17:37:42.778]  $ outfile         : chr "/dev/null"
[17:37:42.778]  $ renice          : int NA
[17:37:42.778]  $ rshcmd          : NULL
[17:37:42.778]  $ user            : chr(0) 
[17:37:42.778]  $ revtunnel       : logi FALSE
[17:37:42.778]  $ rshlogfile      : NULL
[17:37:42.778]  $ rshopts         : chr(0) 
[17:37:42.778]  $ rank            : int 1
[17:37:42.778]  $ manual          : logi FALSE
[17:37:42.778]  $ dryrun          : logi FALSE
[17:37:42.778]  $ quiet           : logi FALSE
[17:37:42.778]  $ setup_strategy  : chr "parallel"
[17:37:42.778]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:37:42.778]  $ pidfile         : chr "/tmp/RtmpnwIrUW/worker.rank=1.parallelly.parent=34988.88ac6cc87d3d.pid"
[17:37:42.778]  $ rshcmd_label    : NULL
[17:37:42.778]  $ rsh_call        : NULL
[17:37:42.778]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:37:42.778]  $ localMachine    : logi TRUE
[17:37:42.778]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:37:42.778]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:37:42.778]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:37:42.778]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:37:42.778]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:37:42.778]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:37:42.778]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:37:42.778]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:37:42.778]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:37:42.778]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:37:42.778]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:37:42.778]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:37:42.778]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:37:42.778]  $ arguments       :List of 28
[17:37:42.778]   ..$ worker          : chr "localhost"
[17:37:42.778]   ..$ master          : NULL
[17:37:42.778]   ..$ port            : int 11996
[17:37:42.778]   ..$ connectTimeout  : num 120
[17:37:42.778]   ..$ timeout         : num 2592000
[17:37:42.778]   ..$ rscript         : NULL
[17:37:42.778]   ..$ homogeneous     : NULL
[17:37:42.778]   ..$ rscript_args    : NULL
[17:37:42.778]   ..$ rscript_envs    : NULL
[17:37:42.778]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:37:42.778]   ..$ rscript_startup : NULL
[17:37:42.778]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:37:42.778]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:37:42.778]   ..$ methods         : logi TRUE
[17:37:42.778]   ..$ socketOptions   : chr "no-delay"
[17:37:42.778]   ..$ useXDR          : logi FALSE
[17:37:42.778]   ..$ outfile         : chr "/dev/null"
[17:37:42.778]   ..$ renice          : int NA
[17:37:42.778]   ..$ rshcmd          : NULL
[17:37:42.778]   ..$ user            : NULL
[17:37:42.778]   ..$ revtunnel       : logi NA
[17:37:42.778]   ..$ rshlogfile      : NULL
[17:37:42.778]   ..$ rshopts         : NULL
[17:37:42.778]   ..$ rank            : int 1
[17:37:42.778]   ..$ manual          : logi FALSE
[17:37:42.778]   ..$ dryrun          : logi FALSE
[17:37:42.778]   ..$ quiet           : logi FALSE
[17:37:42.778]   ..$ setup_strategy  : chr "parallel"
[17:37:42.778]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:37:42.794] [local output] System call to launch all workers:
[17:37:42.794] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnwIrUW/worker.rank=1.parallelly.parent=34988.88ac6cc87d3d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11996 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:37:42.794] [local output] Starting PSOCK main server
[17:37:42.800] [local output] Workers launched
[17:37:42.800] [local output] Waiting for workers to connect back
[17:37:42.801]  - [local output] 0 workers out of 2 ready
[17:37:43.055]  - [local output] 0 workers out of 2 ready
[17:37:43.055]  - [local output] 1 workers out of 2 ready
[17:37:43.061]  - [local output] 1 workers out of 2 ready
[17:37:43.062]  - [local output] 2 workers out of 2 ready
[17:37:43.062] [local output] Launching of workers completed
[17:37:43.062] [local output] Collecting session information from workers
[17:37:43.063] [local output]  - Worker #1 of 2
[17:37:43.063] [local output]  - Worker #2 of 2
[17:37:43.064] [local output] makeClusterPSOCK() ... done
[17:37:43.075] Packages needed by the future expression (n = 0): <none>
[17:37:43.075] Packages needed by future strategies (n = 0): <none>
[17:37:43.075] {
[17:37:43.075]     {
[17:37:43.075]         {
[17:37:43.075]             ...future.startTime <- base::Sys.time()
[17:37:43.075]             {
[17:37:43.075]                 {
[17:37:43.075]                   {
[17:37:43.075]                     {
[17:37:43.075]                       base::local({
[17:37:43.075]                         has_future <- base::requireNamespace("future", 
[17:37:43.075]                           quietly = TRUE)
[17:37:43.075]                         if (has_future) {
[17:37:43.075]                           ns <- base::getNamespace("future")
[17:37:43.075]                           version <- ns[[".package"]][["version"]]
[17:37:43.075]                           if (is.null(version)) 
[17:37:43.075]                             version <- utils::packageVersion("future")
[17:37:43.075]                         }
[17:37:43.075]                         else {
[17:37:43.075]                           version <- NULL
[17:37:43.075]                         }
[17:37:43.075]                         if (!has_future || version < "1.8.0") {
[17:37:43.075]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.075]                             "", base::R.version$version.string), 
[17:37:43.075]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.075]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.075]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.075]                               "release", "version")], collapse = " "), 
[17:37:43.075]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.075]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.075]                             info)
[17:37:43.075]                           info <- base::paste(info, collapse = "; ")
[17:37:43.075]                           if (!has_future) {
[17:37:43.075]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.075]                               info)
[17:37:43.075]                           }
[17:37:43.075]                           else {
[17:37:43.075]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.075]                               info, version)
[17:37:43.075]                           }
[17:37:43.075]                           base::stop(msg)
[17:37:43.075]                         }
[17:37:43.075]                       })
[17:37:43.075]                     }
[17:37:43.075]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.075]                     base::options(mc.cores = 1L)
[17:37:43.075]                   }
[17:37:43.075]                   ...future.strategy.old <- future::plan("list")
[17:37:43.075]                   options(future.plan = NULL)
[17:37:43.075]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.075]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.075]                 }
[17:37:43.075]                 ...future.workdir <- getwd()
[17:37:43.075]             }
[17:37:43.075]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.075]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.075]         }
[17:37:43.075]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.075]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:37:43.075]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.075]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.075]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.075]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.075]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.075]             base::names(...future.oldOptions))
[17:37:43.075]     }
[17:37:43.075]     if (FALSE) {
[17:37:43.075]     }
[17:37:43.075]     else {
[17:37:43.075]         if (TRUE) {
[17:37:43.075]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.075]                 open = "w")
[17:37:43.075]         }
[17:37:43.075]         else {
[17:37:43.075]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.075]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.075]         }
[17:37:43.075]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.075]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.075]             base::sink(type = "output", split = FALSE)
[17:37:43.075]             base::close(...future.stdout)
[17:37:43.075]         }, add = TRUE)
[17:37:43.075]     }
[17:37:43.075]     ...future.frame <- base::sys.nframe()
[17:37:43.075]     ...future.conditions <- base::list()
[17:37:43.075]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.075]     if (FALSE) {
[17:37:43.075]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.075]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.075]     }
[17:37:43.075]     ...future.result <- base::tryCatch({
[17:37:43.075]         base::withCallingHandlers({
[17:37:43.075]             ...future.value <- base::withVisible(base::local({
[17:37:43.075]                 ...future.makeSendCondition <- base::local({
[17:37:43.075]                   sendCondition <- NULL
[17:37:43.075]                   function(frame = 1L) {
[17:37:43.075]                     if (is.function(sendCondition)) 
[17:37:43.075]                       return(sendCondition)
[17:37:43.075]                     ns <- getNamespace("parallel")
[17:37:43.075]                     if (exists("sendData", mode = "function", 
[17:37:43.075]                       envir = ns)) {
[17:37:43.075]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.075]                         envir = ns)
[17:37:43.075]                       envir <- sys.frame(frame)
[17:37:43.075]                       master <- NULL
[17:37:43.075]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.075]                         !identical(envir, emptyenv())) {
[17:37:43.075]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.075]                           inherits = FALSE)) {
[17:37:43.075]                           master <- get("master", mode = "list", 
[17:37:43.075]                             envir = envir, inherits = FALSE)
[17:37:43.075]                           if (inherits(master, c("SOCKnode", 
[17:37:43.075]                             "SOCK0node"))) {
[17:37:43.075]                             sendCondition <<- function(cond) {
[17:37:43.075]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.075]                                 success = TRUE)
[17:37:43.075]                               parallel_sendData(master, data)
[17:37:43.075]                             }
[17:37:43.075]                             return(sendCondition)
[17:37:43.075]                           }
[17:37:43.075]                         }
[17:37:43.075]                         frame <- frame + 1L
[17:37:43.075]                         envir <- sys.frame(frame)
[17:37:43.075]                       }
[17:37:43.075]                     }
[17:37:43.075]                     sendCondition <<- function(cond) NULL
[17:37:43.075]                   }
[17:37:43.075]                 })
[17:37:43.075]                 withCallingHandlers({
[17:37:43.075]                   NA
[17:37:43.075]                 }, immediateCondition = function(cond) {
[17:37:43.075]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.075]                   sendCondition(cond)
[17:37:43.075]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.075]                   {
[17:37:43.075]                     inherits <- base::inherits
[17:37:43.075]                     invokeRestart <- base::invokeRestart
[17:37:43.075]                     is.null <- base::is.null
[17:37:43.075]                     muffled <- FALSE
[17:37:43.075]                     if (inherits(cond, "message")) {
[17:37:43.075]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.075]                       if (muffled) 
[17:37:43.075]                         invokeRestart("muffleMessage")
[17:37:43.075]                     }
[17:37:43.075]                     else if (inherits(cond, "warning")) {
[17:37:43.075]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.075]                       if (muffled) 
[17:37:43.075]                         invokeRestart("muffleWarning")
[17:37:43.075]                     }
[17:37:43.075]                     else if (inherits(cond, "condition")) {
[17:37:43.075]                       if (!is.null(pattern)) {
[17:37:43.075]                         computeRestarts <- base::computeRestarts
[17:37:43.075]                         grepl <- base::grepl
[17:37:43.075]                         restarts <- computeRestarts(cond)
[17:37:43.075]                         for (restart in restarts) {
[17:37:43.075]                           name <- restart$name
[17:37:43.075]                           if (is.null(name)) 
[17:37:43.075]                             next
[17:37:43.075]                           if (!grepl(pattern, name)) 
[17:37:43.075]                             next
[17:37:43.075]                           invokeRestart(restart)
[17:37:43.075]                           muffled <- TRUE
[17:37:43.075]                           break
[17:37:43.075]                         }
[17:37:43.075]                       }
[17:37:43.075]                     }
[17:37:43.075]                     invisible(muffled)
[17:37:43.075]                   }
[17:37:43.075]                   muffleCondition(cond)
[17:37:43.075]                 })
[17:37:43.075]             }))
[17:37:43.075]             future::FutureResult(value = ...future.value$value, 
[17:37:43.075]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.075]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.075]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.075]                     ...future.globalenv.names))
[17:37:43.075]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.075]         }, condition = base::local({
[17:37:43.075]             c <- base::c
[17:37:43.075]             inherits <- base::inherits
[17:37:43.075]             invokeRestart <- base::invokeRestart
[17:37:43.075]             length <- base::length
[17:37:43.075]             list <- base::list
[17:37:43.075]             seq.int <- base::seq.int
[17:37:43.075]             signalCondition <- base::signalCondition
[17:37:43.075]             sys.calls <- base::sys.calls
[17:37:43.075]             `[[` <- base::`[[`
[17:37:43.075]             `+` <- base::`+`
[17:37:43.075]             `<<-` <- base::`<<-`
[17:37:43.075]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.075]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.075]                   3L)]
[17:37:43.075]             }
[17:37:43.075]             function(cond) {
[17:37:43.075]                 is_error <- inherits(cond, "error")
[17:37:43.075]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.075]                   NULL)
[17:37:43.075]                 if (is_error) {
[17:37:43.075]                   sessionInformation <- function() {
[17:37:43.075]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.075]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.075]                       search = base::search(), system = base::Sys.info())
[17:37:43.075]                   }
[17:37:43.075]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.075]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.075]                     cond$call), session = sessionInformation(), 
[17:37:43.075]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.075]                   signalCondition(cond)
[17:37:43.075]                 }
[17:37:43.075]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.075]                 "immediateCondition"))) {
[17:37:43.075]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.075]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.075]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.075]                   if (TRUE && !signal) {
[17:37:43.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.075]                     {
[17:37:43.075]                       inherits <- base::inherits
[17:37:43.075]                       invokeRestart <- base::invokeRestart
[17:37:43.075]                       is.null <- base::is.null
[17:37:43.075]                       muffled <- FALSE
[17:37:43.075]                       if (inherits(cond, "message")) {
[17:37:43.075]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.075]                         if (muffled) 
[17:37:43.075]                           invokeRestart("muffleMessage")
[17:37:43.075]                       }
[17:37:43.075]                       else if (inherits(cond, "warning")) {
[17:37:43.075]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.075]                         if (muffled) 
[17:37:43.075]                           invokeRestart("muffleWarning")
[17:37:43.075]                       }
[17:37:43.075]                       else if (inherits(cond, "condition")) {
[17:37:43.075]                         if (!is.null(pattern)) {
[17:37:43.075]                           computeRestarts <- base::computeRestarts
[17:37:43.075]                           grepl <- base::grepl
[17:37:43.075]                           restarts <- computeRestarts(cond)
[17:37:43.075]                           for (restart in restarts) {
[17:37:43.075]                             name <- restart$name
[17:37:43.075]                             if (is.null(name)) 
[17:37:43.075]                               next
[17:37:43.075]                             if (!grepl(pattern, name)) 
[17:37:43.075]                               next
[17:37:43.075]                             invokeRestart(restart)
[17:37:43.075]                             muffled <- TRUE
[17:37:43.075]                             break
[17:37:43.075]                           }
[17:37:43.075]                         }
[17:37:43.075]                       }
[17:37:43.075]                       invisible(muffled)
[17:37:43.075]                     }
[17:37:43.075]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.075]                   }
[17:37:43.075]                 }
[17:37:43.075]                 else {
[17:37:43.075]                   if (TRUE) {
[17:37:43.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.075]                     {
[17:37:43.075]                       inherits <- base::inherits
[17:37:43.075]                       invokeRestart <- base::invokeRestart
[17:37:43.075]                       is.null <- base::is.null
[17:37:43.075]                       muffled <- FALSE
[17:37:43.075]                       if (inherits(cond, "message")) {
[17:37:43.075]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.075]                         if (muffled) 
[17:37:43.075]                           invokeRestart("muffleMessage")
[17:37:43.075]                       }
[17:37:43.075]                       else if (inherits(cond, "warning")) {
[17:37:43.075]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.075]                         if (muffled) 
[17:37:43.075]                           invokeRestart("muffleWarning")
[17:37:43.075]                       }
[17:37:43.075]                       else if (inherits(cond, "condition")) {
[17:37:43.075]                         if (!is.null(pattern)) {
[17:37:43.075]                           computeRestarts <- base::computeRestarts
[17:37:43.075]                           grepl <- base::grepl
[17:37:43.075]                           restarts <- computeRestarts(cond)
[17:37:43.075]                           for (restart in restarts) {
[17:37:43.075]                             name <- restart$name
[17:37:43.075]                             if (is.null(name)) 
[17:37:43.075]                               next
[17:37:43.075]                             if (!grepl(pattern, name)) 
[17:37:43.075]                               next
[17:37:43.075]                             invokeRestart(restart)
[17:37:43.075]                             muffled <- TRUE
[17:37:43.075]                             break
[17:37:43.075]                           }
[17:37:43.075]                         }
[17:37:43.075]                       }
[17:37:43.075]                       invisible(muffled)
[17:37:43.075]                     }
[17:37:43.075]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.075]                   }
[17:37:43.075]                 }
[17:37:43.075]             }
[17:37:43.075]         }))
[17:37:43.075]     }, error = function(ex) {
[17:37:43.075]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.075]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.075]                 ...future.rng), started = ...future.startTime, 
[17:37:43.075]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.075]             version = "1.8"), class = "FutureResult")
[17:37:43.075]     }, finally = {
[17:37:43.075]         if (!identical(...future.workdir, getwd())) 
[17:37:43.075]             setwd(...future.workdir)
[17:37:43.075]         {
[17:37:43.075]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.075]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.075]             }
[17:37:43.075]             base::options(...future.oldOptions)
[17:37:43.075]             if (.Platform$OS.type == "windows") {
[17:37:43.075]                 old_names <- names(...future.oldEnvVars)
[17:37:43.075]                 envs <- base::Sys.getenv()
[17:37:43.075]                 names <- names(envs)
[17:37:43.075]                 common <- intersect(names, old_names)
[17:37:43.075]                 added <- setdiff(names, old_names)
[17:37:43.075]                 removed <- setdiff(old_names, names)
[17:37:43.075]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.075]                   envs[common]]
[17:37:43.075]                 NAMES <- toupper(changed)
[17:37:43.075]                 args <- list()
[17:37:43.075]                 for (kk in seq_along(NAMES)) {
[17:37:43.075]                   name <- changed[[kk]]
[17:37:43.075]                   NAME <- NAMES[[kk]]
[17:37:43.075]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.075]                     next
[17:37:43.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.075]                 }
[17:37:43.075]                 NAMES <- toupper(added)
[17:37:43.075]                 for (kk in seq_along(NAMES)) {
[17:37:43.075]                   name <- added[[kk]]
[17:37:43.075]                   NAME <- NAMES[[kk]]
[17:37:43.075]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.075]                     next
[17:37:43.075]                   args[[name]] <- ""
[17:37:43.075]                 }
[17:37:43.075]                 NAMES <- toupper(removed)
[17:37:43.075]                 for (kk in seq_along(NAMES)) {
[17:37:43.075]                   name <- removed[[kk]]
[17:37:43.075]                   NAME <- NAMES[[kk]]
[17:37:43.075]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.075]                     next
[17:37:43.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.075]                 }
[17:37:43.075]                 if (length(args) > 0) 
[17:37:43.075]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.075]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.075]             }
[17:37:43.075]             else {
[17:37:43.075]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.075]             }
[17:37:43.075]             {
[17:37:43.075]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.075]                   0L) {
[17:37:43.075]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.075]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.075]                   base::options(opts)
[17:37:43.075]                 }
[17:37:43.075]                 {
[17:37:43.075]                   {
[17:37:43.075]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.075]                     NULL
[17:37:43.075]                   }
[17:37:43.075]                   options(future.plan = NULL)
[17:37:43.075]                   if (is.na(NA_character_)) 
[17:37:43.075]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.075]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.075]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.075]                     .init = FALSE)
[17:37:43.075]                 }
[17:37:43.075]             }
[17:37:43.075]         }
[17:37:43.075]     })
[17:37:43.075]     if (TRUE) {
[17:37:43.075]         base::sink(type = "output", split = FALSE)
[17:37:43.075]         if (TRUE) {
[17:37:43.075]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.075]         }
[17:37:43.075]         else {
[17:37:43.075]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.075]         }
[17:37:43.075]         base::close(...future.stdout)
[17:37:43.075]         ...future.stdout <- NULL
[17:37:43.075]     }
[17:37:43.075]     ...future.result$conditions <- ...future.conditions
[17:37:43.075]     ...future.result$finished <- base::Sys.time()
[17:37:43.075]     ...future.result
[17:37:43.075] }
[17:37:43.129] MultisessionFuture started
[17:37:43.130] result() for ClusterFuture ...
[17:37:43.130] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.130] - Validating connection of MultisessionFuture
[17:37:43.162] - received message: FutureResult
[17:37:43.162] - Received FutureResult
[17:37:43.162] - Erased future from FutureRegistry
[17:37:43.162] result() for ClusterFuture ...
[17:37:43.162] - result already collected: FutureResult
[17:37:43.163] result() for ClusterFuture ... done
[17:37:43.163] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.163] result() for ClusterFuture ... done
[17:37:43.163] result() for ClusterFuture ...
[17:37:43.163] - result already collected: FutureResult
[17:37:43.163] result() for ClusterFuture ... done
[17:37:43.163] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:37:43.167] plan(): nbrOfWorkers() = 2
[17:37:43.168] future_lapply() ...
[17:37:43.168] Generating random seeds ...
[17:37:43.168] Generating random seed streams for 5 elements ...
[17:37:43.169] Generating random seed streams for 5 elements ... DONE
[17:37:43.169] Generating random seeds ... DONE
[17:37:43.169] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:43.173] Number of chunks: 2
[17:37:43.173] getGlobalsAndPackagesXApply() ...
[17:37:43.173]  - future.globals: TRUE
[17:37:43.173] getGlobalsAndPackages() ...
[17:37:43.173] Searching for globals...
[17:37:43.175] - globals found: [2] ‘FUN’, ‘sample’
[17:37:43.175] Searching for globals ... DONE
[17:37:43.175] Resolving globals: FALSE
[17:37:43.175] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:43.176] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:43.176] - globals: [1] ‘FUN’
[17:37:43.176] 
[17:37:43.176] getGlobalsAndPackages() ... DONE
[17:37:43.176]  - globals found/used: [n=1] ‘FUN’
[17:37:43.177]  - needed namespaces: [n=0] 
[17:37:43.177] Finding globals ... DONE
[17:37:43.177]  - use_args: TRUE
[17:37:43.177]  - Getting '...' globals ...
[17:37:43.177] resolve() on list ...
[17:37:43.177]  recursive: 0
[17:37:43.178]  length: 1
[17:37:43.178]  elements: ‘...’
[17:37:43.178]  length: 0 (resolved future 1)
[17:37:43.178] resolve() on list ... DONE
[17:37:43.178]    - '...' content: [n=0] 
[17:37:43.178] List of 1
[17:37:43.178]  $ ...: list()
[17:37:43.178]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.178]  - attr(*, "where")=List of 1
[17:37:43.178]   ..$ ...:<environment: 0x5640c1a9e790> 
[17:37:43.178]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.178]  - attr(*, "resolved")= logi TRUE
[17:37:43.178]  - attr(*, "total_size")= num NA
[17:37:43.181]  - Getting '...' globals ... DONE
[17:37:43.181] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:43.182] List of 2
[17:37:43.182]  $ ...future.FUN:function (...)  
[17:37:43.182]  $ ...          : list()
[17:37:43.182]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.182]  - attr(*, "where")=List of 2
[17:37:43.182]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:43.182]   ..$ ...          :<environment: 0x5640c1a9e790> 
[17:37:43.182]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.182]  - attr(*, "resolved")= logi FALSE
[17:37:43.182]  - attr(*, "total_size")= num 616
[17:37:43.185] Packages to be attached in all futures: [n=0] 
[17:37:43.185] getGlobalsAndPackagesXApply() ... DONE
[17:37:43.185] Number of futures (= number of chunks): 2
[17:37:43.185] Launching 2 futures (chunks) ...
[17:37:43.185] Chunk #1 of 2 ...
[17:37:43.186]  - Finding globals in 'X' for chunk #1 ...
[17:37:43.186] getGlobalsAndPackages() ...
[17:37:43.186] Searching for globals...
[17:37:43.186] 
[17:37:43.186] Searching for globals ... DONE
[17:37:43.186] - globals: [0] <none>
[17:37:43.187] getGlobalsAndPackages() ... DONE
[17:37:43.187]    + additional globals found: [n=0] 
[17:37:43.187]    + additional namespaces needed: [n=0] 
[17:37:43.187]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:43.187]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.187]  - seeds: [2] <seeds>
[17:37:43.187]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.187] getGlobalsAndPackages() ...
[17:37:43.187] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.188] Resolving globals: FALSE
[17:37:43.188] Tweak future expression to call with '...' arguments ...
[17:37:43.188] {
[17:37:43.188]     do.call(function(...) {
[17:37:43.188]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.188]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.188]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.188]             on.exit(options(oopts), add = TRUE)
[17:37:43.188]         }
[17:37:43.188]         {
[17:37:43.188]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.188]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.188]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.188]                   envir = globalenv(), inherits = FALSE)
[17:37:43.188]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.188]             })
[17:37:43.188]         }
[17:37:43.188]     }, args = future.call.arguments)
[17:37:43.188] }
[17:37:43.188] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.189] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.189] 
[17:37:43.189] getGlobalsAndPackages() ... DONE
[17:37:43.189] run() for ‘Future’ ...
[17:37:43.189] - state: ‘created’
[17:37:43.190] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.204] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.205] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.205]   - Field: ‘node’
[17:37:43.205]   - Field: ‘label’
[17:37:43.205]   - Field: ‘local’
[17:37:43.205]   - Field: ‘owner’
[17:37:43.205]   - Field: ‘envir’
[17:37:43.205]   - Field: ‘workers’
[17:37:43.205]   - Field: ‘packages’
[17:37:43.205]   - Field: ‘gc’
[17:37:43.206]   - Field: ‘conditions’
[17:37:43.206]   - Field: ‘persistent’
[17:37:43.206]   - Field: ‘expr’
[17:37:43.206]   - Field: ‘uuid’
[17:37:43.206]   - Field: ‘seed’
[17:37:43.206]   - Field: ‘version’
[17:37:43.206]   - Field: ‘result’
[17:37:43.206]   - Field: ‘asynchronous’
[17:37:43.207]   - Field: ‘calls’
[17:37:43.207]   - Field: ‘globals’
[17:37:43.207]   - Field: ‘stdout’
[17:37:43.207]   - Field: ‘earlySignal’
[17:37:43.207]   - Field: ‘lazy’
[17:37:43.207]   - Field: ‘state’
[17:37:43.207] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.207] - Launch lazy future ...
[17:37:43.208] Packages needed by the future expression (n = 0): <none>
[17:37:43.208] Packages needed by future strategies (n = 0): <none>
[17:37:43.208] {
[17:37:43.208]     {
[17:37:43.208]         {
[17:37:43.208]             ...future.startTime <- base::Sys.time()
[17:37:43.208]             {
[17:37:43.208]                 {
[17:37:43.208]                   {
[17:37:43.208]                     {
[17:37:43.208]                       base::local({
[17:37:43.208]                         has_future <- base::requireNamespace("future", 
[17:37:43.208]                           quietly = TRUE)
[17:37:43.208]                         if (has_future) {
[17:37:43.208]                           ns <- base::getNamespace("future")
[17:37:43.208]                           version <- ns[[".package"]][["version"]]
[17:37:43.208]                           if (is.null(version)) 
[17:37:43.208]                             version <- utils::packageVersion("future")
[17:37:43.208]                         }
[17:37:43.208]                         else {
[17:37:43.208]                           version <- NULL
[17:37:43.208]                         }
[17:37:43.208]                         if (!has_future || version < "1.8.0") {
[17:37:43.208]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.208]                             "", base::R.version$version.string), 
[17:37:43.208]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.208]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.208]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.208]                               "release", "version")], collapse = " "), 
[17:37:43.208]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.208]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.208]                             info)
[17:37:43.208]                           info <- base::paste(info, collapse = "; ")
[17:37:43.208]                           if (!has_future) {
[17:37:43.208]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.208]                               info)
[17:37:43.208]                           }
[17:37:43.208]                           else {
[17:37:43.208]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.208]                               info, version)
[17:37:43.208]                           }
[17:37:43.208]                           base::stop(msg)
[17:37:43.208]                         }
[17:37:43.208]                       })
[17:37:43.208]                     }
[17:37:43.208]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.208]                     base::options(mc.cores = 1L)
[17:37:43.208]                   }
[17:37:43.208]                   ...future.strategy.old <- future::plan("list")
[17:37:43.208]                   options(future.plan = NULL)
[17:37:43.208]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.208]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.208]                 }
[17:37:43.208]                 ...future.workdir <- getwd()
[17:37:43.208]             }
[17:37:43.208]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.208]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.208]         }
[17:37:43.208]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.208]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.208]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.208]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.208]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.208]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.208]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.208]             base::names(...future.oldOptions))
[17:37:43.208]     }
[17:37:43.208]     if (FALSE) {
[17:37:43.208]     }
[17:37:43.208]     else {
[17:37:43.208]         if (TRUE) {
[17:37:43.208]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.208]                 open = "w")
[17:37:43.208]         }
[17:37:43.208]         else {
[17:37:43.208]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.208]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.208]         }
[17:37:43.208]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.208]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.208]             base::sink(type = "output", split = FALSE)
[17:37:43.208]             base::close(...future.stdout)
[17:37:43.208]         }, add = TRUE)
[17:37:43.208]     }
[17:37:43.208]     ...future.frame <- base::sys.nframe()
[17:37:43.208]     ...future.conditions <- base::list()
[17:37:43.208]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.208]     if (FALSE) {
[17:37:43.208]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.208]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.208]     }
[17:37:43.208]     ...future.result <- base::tryCatch({
[17:37:43.208]         base::withCallingHandlers({
[17:37:43.208]             ...future.value <- base::withVisible(base::local({
[17:37:43.208]                 ...future.makeSendCondition <- base::local({
[17:37:43.208]                   sendCondition <- NULL
[17:37:43.208]                   function(frame = 1L) {
[17:37:43.208]                     if (is.function(sendCondition)) 
[17:37:43.208]                       return(sendCondition)
[17:37:43.208]                     ns <- getNamespace("parallel")
[17:37:43.208]                     if (exists("sendData", mode = "function", 
[17:37:43.208]                       envir = ns)) {
[17:37:43.208]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.208]                         envir = ns)
[17:37:43.208]                       envir <- sys.frame(frame)
[17:37:43.208]                       master <- NULL
[17:37:43.208]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.208]                         !identical(envir, emptyenv())) {
[17:37:43.208]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.208]                           inherits = FALSE)) {
[17:37:43.208]                           master <- get("master", mode = "list", 
[17:37:43.208]                             envir = envir, inherits = FALSE)
[17:37:43.208]                           if (inherits(master, c("SOCKnode", 
[17:37:43.208]                             "SOCK0node"))) {
[17:37:43.208]                             sendCondition <<- function(cond) {
[17:37:43.208]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.208]                                 success = TRUE)
[17:37:43.208]                               parallel_sendData(master, data)
[17:37:43.208]                             }
[17:37:43.208]                             return(sendCondition)
[17:37:43.208]                           }
[17:37:43.208]                         }
[17:37:43.208]                         frame <- frame + 1L
[17:37:43.208]                         envir <- sys.frame(frame)
[17:37:43.208]                       }
[17:37:43.208]                     }
[17:37:43.208]                     sendCondition <<- function(cond) NULL
[17:37:43.208]                   }
[17:37:43.208]                 })
[17:37:43.208]                 withCallingHandlers({
[17:37:43.208]                   {
[17:37:43.208]                     do.call(function(...) {
[17:37:43.208]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.208]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.208]                         ...future.globals.maxSize)) {
[17:37:43.208]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.208]                         on.exit(options(oopts), add = TRUE)
[17:37:43.208]                       }
[17:37:43.208]                       {
[17:37:43.208]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.208]                           FUN = function(jj) {
[17:37:43.208]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.208]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.208]                               envir = globalenv(), inherits = FALSE)
[17:37:43.208]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.208]                           })
[17:37:43.208]                       }
[17:37:43.208]                     }, args = future.call.arguments)
[17:37:43.208]                   }
[17:37:43.208]                 }, immediateCondition = function(cond) {
[17:37:43.208]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.208]                   sendCondition(cond)
[17:37:43.208]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.208]                   {
[17:37:43.208]                     inherits <- base::inherits
[17:37:43.208]                     invokeRestart <- base::invokeRestart
[17:37:43.208]                     is.null <- base::is.null
[17:37:43.208]                     muffled <- FALSE
[17:37:43.208]                     if (inherits(cond, "message")) {
[17:37:43.208]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.208]                       if (muffled) 
[17:37:43.208]                         invokeRestart("muffleMessage")
[17:37:43.208]                     }
[17:37:43.208]                     else if (inherits(cond, "warning")) {
[17:37:43.208]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.208]                       if (muffled) 
[17:37:43.208]                         invokeRestart("muffleWarning")
[17:37:43.208]                     }
[17:37:43.208]                     else if (inherits(cond, "condition")) {
[17:37:43.208]                       if (!is.null(pattern)) {
[17:37:43.208]                         computeRestarts <- base::computeRestarts
[17:37:43.208]                         grepl <- base::grepl
[17:37:43.208]                         restarts <- computeRestarts(cond)
[17:37:43.208]                         for (restart in restarts) {
[17:37:43.208]                           name <- restart$name
[17:37:43.208]                           if (is.null(name)) 
[17:37:43.208]                             next
[17:37:43.208]                           if (!grepl(pattern, name)) 
[17:37:43.208]                             next
[17:37:43.208]                           invokeRestart(restart)
[17:37:43.208]                           muffled <- TRUE
[17:37:43.208]                           break
[17:37:43.208]                         }
[17:37:43.208]                       }
[17:37:43.208]                     }
[17:37:43.208]                     invisible(muffled)
[17:37:43.208]                   }
[17:37:43.208]                   muffleCondition(cond)
[17:37:43.208]                 })
[17:37:43.208]             }))
[17:37:43.208]             future::FutureResult(value = ...future.value$value, 
[17:37:43.208]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.208]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.208]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.208]                     ...future.globalenv.names))
[17:37:43.208]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.208]         }, condition = base::local({
[17:37:43.208]             c <- base::c
[17:37:43.208]             inherits <- base::inherits
[17:37:43.208]             invokeRestart <- base::invokeRestart
[17:37:43.208]             length <- base::length
[17:37:43.208]             list <- base::list
[17:37:43.208]             seq.int <- base::seq.int
[17:37:43.208]             signalCondition <- base::signalCondition
[17:37:43.208]             sys.calls <- base::sys.calls
[17:37:43.208]             `[[` <- base::`[[`
[17:37:43.208]             `+` <- base::`+`
[17:37:43.208]             `<<-` <- base::`<<-`
[17:37:43.208]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.208]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.208]                   3L)]
[17:37:43.208]             }
[17:37:43.208]             function(cond) {
[17:37:43.208]                 is_error <- inherits(cond, "error")
[17:37:43.208]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.208]                   NULL)
[17:37:43.208]                 if (is_error) {
[17:37:43.208]                   sessionInformation <- function() {
[17:37:43.208]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.208]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.208]                       search = base::search(), system = base::Sys.info())
[17:37:43.208]                   }
[17:37:43.208]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.208]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.208]                     cond$call), session = sessionInformation(), 
[17:37:43.208]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.208]                   signalCondition(cond)
[17:37:43.208]                 }
[17:37:43.208]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.208]                 "immediateCondition"))) {
[17:37:43.208]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.208]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.208]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.208]                   if (TRUE && !signal) {
[17:37:43.208]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.208]                     {
[17:37:43.208]                       inherits <- base::inherits
[17:37:43.208]                       invokeRestart <- base::invokeRestart
[17:37:43.208]                       is.null <- base::is.null
[17:37:43.208]                       muffled <- FALSE
[17:37:43.208]                       if (inherits(cond, "message")) {
[17:37:43.208]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.208]                         if (muffled) 
[17:37:43.208]                           invokeRestart("muffleMessage")
[17:37:43.208]                       }
[17:37:43.208]                       else if (inherits(cond, "warning")) {
[17:37:43.208]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.208]                         if (muffled) 
[17:37:43.208]                           invokeRestart("muffleWarning")
[17:37:43.208]                       }
[17:37:43.208]                       else if (inherits(cond, "condition")) {
[17:37:43.208]                         if (!is.null(pattern)) {
[17:37:43.208]                           computeRestarts <- base::computeRestarts
[17:37:43.208]                           grepl <- base::grepl
[17:37:43.208]                           restarts <- computeRestarts(cond)
[17:37:43.208]                           for (restart in restarts) {
[17:37:43.208]                             name <- restart$name
[17:37:43.208]                             if (is.null(name)) 
[17:37:43.208]                               next
[17:37:43.208]                             if (!grepl(pattern, name)) 
[17:37:43.208]                               next
[17:37:43.208]                             invokeRestart(restart)
[17:37:43.208]                             muffled <- TRUE
[17:37:43.208]                             break
[17:37:43.208]                           }
[17:37:43.208]                         }
[17:37:43.208]                       }
[17:37:43.208]                       invisible(muffled)
[17:37:43.208]                     }
[17:37:43.208]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.208]                   }
[17:37:43.208]                 }
[17:37:43.208]                 else {
[17:37:43.208]                   if (TRUE) {
[17:37:43.208]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.208]                     {
[17:37:43.208]                       inherits <- base::inherits
[17:37:43.208]                       invokeRestart <- base::invokeRestart
[17:37:43.208]                       is.null <- base::is.null
[17:37:43.208]                       muffled <- FALSE
[17:37:43.208]                       if (inherits(cond, "message")) {
[17:37:43.208]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.208]                         if (muffled) 
[17:37:43.208]                           invokeRestart("muffleMessage")
[17:37:43.208]                       }
[17:37:43.208]                       else if (inherits(cond, "warning")) {
[17:37:43.208]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.208]                         if (muffled) 
[17:37:43.208]                           invokeRestart("muffleWarning")
[17:37:43.208]                       }
[17:37:43.208]                       else if (inherits(cond, "condition")) {
[17:37:43.208]                         if (!is.null(pattern)) {
[17:37:43.208]                           computeRestarts <- base::computeRestarts
[17:37:43.208]                           grepl <- base::grepl
[17:37:43.208]                           restarts <- computeRestarts(cond)
[17:37:43.208]                           for (restart in restarts) {
[17:37:43.208]                             name <- restart$name
[17:37:43.208]                             if (is.null(name)) 
[17:37:43.208]                               next
[17:37:43.208]                             if (!grepl(pattern, name)) 
[17:37:43.208]                               next
[17:37:43.208]                             invokeRestart(restart)
[17:37:43.208]                             muffled <- TRUE
[17:37:43.208]                             break
[17:37:43.208]                           }
[17:37:43.208]                         }
[17:37:43.208]                       }
[17:37:43.208]                       invisible(muffled)
[17:37:43.208]                     }
[17:37:43.208]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.208]                   }
[17:37:43.208]                 }
[17:37:43.208]             }
[17:37:43.208]         }))
[17:37:43.208]     }, error = function(ex) {
[17:37:43.208]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.208]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.208]                 ...future.rng), started = ...future.startTime, 
[17:37:43.208]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.208]             version = "1.8"), class = "FutureResult")
[17:37:43.208]     }, finally = {
[17:37:43.208]         if (!identical(...future.workdir, getwd())) 
[17:37:43.208]             setwd(...future.workdir)
[17:37:43.208]         {
[17:37:43.208]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.208]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.208]             }
[17:37:43.208]             base::options(...future.oldOptions)
[17:37:43.208]             if (.Platform$OS.type == "windows") {
[17:37:43.208]                 old_names <- names(...future.oldEnvVars)
[17:37:43.208]                 envs <- base::Sys.getenv()
[17:37:43.208]                 names <- names(envs)
[17:37:43.208]                 common <- intersect(names, old_names)
[17:37:43.208]                 added <- setdiff(names, old_names)
[17:37:43.208]                 removed <- setdiff(old_names, names)
[17:37:43.208]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.208]                   envs[common]]
[17:37:43.208]                 NAMES <- toupper(changed)
[17:37:43.208]                 args <- list()
[17:37:43.208]                 for (kk in seq_along(NAMES)) {
[17:37:43.208]                   name <- changed[[kk]]
[17:37:43.208]                   NAME <- NAMES[[kk]]
[17:37:43.208]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.208]                     next
[17:37:43.208]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.208]                 }
[17:37:43.208]                 NAMES <- toupper(added)
[17:37:43.208]                 for (kk in seq_along(NAMES)) {
[17:37:43.208]                   name <- added[[kk]]
[17:37:43.208]                   NAME <- NAMES[[kk]]
[17:37:43.208]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.208]                     next
[17:37:43.208]                   args[[name]] <- ""
[17:37:43.208]                 }
[17:37:43.208]                 NAMES <- toupper(removed)
[17:37:43.208]                 for (kk in seq_along(NAMES)) {
[17:37:43.208]                   name <- removed[[kk]]
[17:37:43.208]                   NAME <- NAMES[[kk]]
[17:37:43.208]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.208]                     next
[17:37:43.208]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.208]                 }
[17:37:43.208]                 if (length(args) > 0) 
[17:37:43.208]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.208]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.208]             }
[17:37:43.208]             else {
[17:37:43.208]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.208]             }
[17:37:43.208]             {
[17:37:43.208]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.208]                   0L) {
[17:37:43.208]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.208]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.208]                   base::options(opts)
[17:37:43.208]                 }
[17:37:43.208]                 {
[17:37:43.208]                   {
[17:37:43.208]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.208]                     NULL
[17:37:43.208]                   }
[17:37:43.208]                   options(future.plan = NULL)
[17:37:43.208]                   if (is.na(NA_character_)) 
[17:37:43.208]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.208]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.208]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.208]                     .init = FALSE)
[17:37:43.208]                 }
[17:37:43.208]             }
[17:37:43.208]         }
[17:37:43.208]     })
[17:37:43.208]     if (TRUE) {
[17:37:43.208]         base::sink(type = "output", split = FALSE)
[17:37:43.208]         if (TRUE) {
[17:37:43.208]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.208]         }
[17:37:43.208]         else {
[17:37:43.208]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.208]         }
[17:37:43.208]         base::close(...future.stdout)
[17:37:43.208]         ...future.stdout <- NULL
[17:37:43.208]     }
[17:37:43.208]     ...future.result$conditions <- ...future.conditions
[17:37:43.208]     ...future.result$finished <- base::Sys.time()
[17:37:43.208]     ...future.result
[17:37:43.208] }
[17:37:43.211] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:37:43.212] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:37:43.212] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:37:43.212] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:37:43.213] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.213] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:37:43.214] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:37:43.214] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:37:43.214] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:37:43.214] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:37:43.215] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.215] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:37:43.215] MultisessionFuture started
[17:37:43.216] - Launch lazy future ... done
[17:37:43.216] run() for ‘MultisessionFuture’ ... done
[17:37:43.216] Created future:
[17:37:43.216] MultisessionFuture:
[17:37:43.216] Label: ‘future_replicate-1’
[17:37:43.216] Expression:
[17:37:43.216] {
[17:37:43.216]     do.call(function(...) {
[17:37:43.216]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.216]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.216]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.216]             on.exit(options(oopts), add = TRUE)
[17:37:43.216]         }
[17:37:43.216]         {
[17:37:43.216]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.216]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.216]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.216]                   envir = globalenv(), inherits = FALSE)
[17:37:43.216]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.216]             })
[17:37:43.216]         }
[17:37:43.216]     }, args = future.call.arguments)
[17:37:43.216] }
[17:37:43.216] Lazy evaluation: FALSE
[17:37:43.216] Asynchronous evaluation: TRUE
[17:37:43.216] Local evaluation: TRUE
[17:37:43.216] Environment: R_GlobalEnv
[17:37:43.216] Capture standard output: TRUE
[17:37:43.216] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.216] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.216] Packages: <none>
[17:37:43.216] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.216] Resolved: FALSE
[17:37:43.216] Value: <not collected>
[17:37:43.216] Conditions captured: <none>
[17:37:43.216] Early signaling: FALSE
[17:37:43.216] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.216] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.228] Chunk #1 of 2 ... DONE
[17:37:43.228] Chunk #2 of 2 ...
[17:37:43.229]  - Finding globals in 'X' for chunk #2 ...
[17:37:43.229] getGlobalsAndPackages() ...
[17:37:43.229] Searching for globals...
[17:37:43.229] 
[17:37:43.229] Searching for globals ... DONE
[17:37:43.229] - globals: [0] <none>
[17:37:43.229] getGlobalsAndPackages() ... DONE
[17:37:43.230]    + additional globals found: [n=0] 
[17:37:43.230]    + additional namespaces needed: [n=0] 
[17:37:43.230]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:43.230]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.230]  - seeds: [3] <seeds>
[17:37:43.230]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.230] getGlobalsAndPackages() ...
[17:37:43.230] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.231] Resolving globals: FALSE
[17:37:43.231] Tweak future expression to call with '...' arguments ...
[17:37:43.231] {
[17:37:43.231]     do.call(function(...) {
[17:37:43.231]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.231]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.231]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.231]             on.exit(options(oopts), add = TRUE)
[17:37:43.231]         }
[17:37:43.231]         {
[17:37:43.231]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.231]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.231]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.231]                   envir = globalenv(), inherits = FALSE)
[17:37:43.231]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.231]             })
[17:37:43.231]         }
[17:37:43.231]     }, args = future.call.arguments)
[17:37:43.231] }
[17:37:43.231] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.231] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.232] 
[17:37:43.232] getGlobalsAndPackages() ... DONE
[17:37:43.232] run() for ‘Future’ ...
[17:37:43.232] - state: ‘created’
[17:37:43.232] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.247] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.247] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.247]   - Field: ‘node’
[17:37:43.247]   - Field: ‘label’
[17:37:43.247]   - Field: ‘local’
[17:37:43.248]   - Field: ‘owner’
[17:37:43.248]   - Field: ‘envir’
[17:37:43.248]   - Field: ‘workers’
[17:37:43.248]   - Field: ‘packages’
[17:37:43.248]   - Field: ‘gc’
[17:37:43.248]   - Field: ‘conditions’
[17:37:43.248]   - Field: ‘persistent’
[17:37:43.248]   - Field: ‘expr’
[17:37:43.248]   - Field: ‘uuid’
[17:37:43.249]   - Field: ‘seed’
[17:37:43.249]   - Field: ‘version’
[17:37:43.249]   - Field: ‘result’
[17:37:43.249]   - Field: ‘asynchronous’
[17:37:43.249]   - Field: ‘calls’
[17:37:43.249]   - Field: ‘globals’
[17:37:43.249]   - Field: ‘stdout’
[17:37:43.249]   - Field: ‘earlySignal’
[17:37:43.249]   - Field: ‘lazy’
[17:37:43.250]   - Field: ‘state’
[17:37:43.250] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.250] - Launch lazy future ...
[17:37:43.250] Packages needed by the future expression (n = 0): <none>
[17:37:43.250] Packages needed by future strategies (n = 0): <none>
[17:37:43.251] {
[17:37:43.251]     {
[17:37:43.251]         {
[17:37:43.251]             ...future.startTime <- base::Sys.time()
[17:37:43.251]             {
[17:37:43.251]                 {
[17:37:43.251]                   {
[17:37:43.251]                     {
[17:37:43.251]                       base::local({
[17:37:43.251]                         has_future <- base::requireNamespace("future", 
[17:37:43.251]                           quietly = TRUE)
[17:37:43.251]                         if (has_future) {
[17:37:43.251]                           ns <- base::getNamespace("future")
[17:37:43.251]                           version <- ns[[".package"]][["version"]]
[17:37:43.251]                           if (is.null(version)) 
[17:37:43.251]                             version <- utils::packageVersion("future")
[17:37:43.251]                         }
[17:37:43.251]                         else {
[17:37:43.251]                           version <- NULL
[17:37:43.251]                         }
[17:37:43.251]                         if (!has_future || version < "1.8.0") {
[17:37:43.251]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.251]                             "", base::R.version$version.string), 
[17:37:43.251]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.251]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.251]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.251]                               "release", "version")], collapse = " "), 
[17:37:43.251]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.251]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.251]                             info)
[17:37:43.251]                           info <- base::paste(info, collapse = "; ")
[17:37:43.251]                           if (!has_future) {
[17:37:43.251]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.251]                               info)
[17:37:43.251]                           }
[17:37:43.251]                           else {
[17:37:43.251]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.251]                               info, version)
[17:37:43.251]                           }
[17:37:43.251]                           base::stop(msg)
[17:37:43.251]                         }
[17:37:43.251]                       })
[17:37:43.251]                     }
[17:37:43.251]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.251]                     base::options(mc.cores = 1L)
[17:37:43.251]                   }
[17:37:43.251]                   ...future.strategy.old <- future::plan("list")
[17:37:43.251]                   options(future.plan = NULL)
[17:37:43.251]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.251]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.251]                 }
[17:37:43.251]                 ...future.workdir <- getwd()
[17:37:43.251]             }
[17:37:43.251]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.251]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.251]         }
[17:37:43.251]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.251]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.251]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.251]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.251]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.251]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.251]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.251]             base::names(...future.oldOptions))
[17:37:43.251]     }
[17:37:43.251]     if (FALSE) {
[17:37:43.251]     }
[17:37:43.251]     else {
[17:37:43.251]         if (TRUE) {
[17:37:43.251]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.251]                 open = "w")
[17:37:43.251]         }
[17:37:43.251]         else {
[17:37:43.251]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.251]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.251]         }
[17:37:43.251]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.251]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.251]             base::sink(type = "output", split = FALSE)
[17:37:43.251]             base::close(...future.stdout)
[17:37:43.251]         }, add = TRUE)
[17:37:43.251]     }
[17:37:43.251]     ...future.frame <- base::sys.nframe()
[17:37:43.251]     ...future.conditions <- base::list()
[17:37:43.251]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.251]     if (FALSE) {
[17:37:43.251]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.251]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.251]     }
[17:37:43.251]     ...future.result <- base::tryCatch({
[17:37:43.251]         base::withCallingHandlers({
[17:37:43.251]             ...future.value <- base::withVisible(base::local({
[17:37:43.251]                 ...future.makeSendCondition <- base::local({
[17:37:43.251]                   sendCondition <- NULL
[17:37:43.251]                   function(frame = 1L) {
[17:37:43.251]                     if (is.function(sendCondition)) 
[17:37:43.251]                       return(sendCondition)
[17:37:43.251]                     ns <- getNamespace("parallel")
[17:37:43.251]                     if (exists("sendData", mode = "function", 
[17:37:43.251]                       envir = ns)) {
[17:37:43.251]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.251]                         envir = ns)
[17:37:43.251]                       envir <- sys.frame(frame)
[17:37:43.251]                       master <- NULL
[17:37:43.251]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.251]                         !identical(envir, emptyenv())) {
[17:37:43.251]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.251]                           inherits = FALSE)) {
[17:37:43.251]                           master <- get("master", mode = "list", 
[17:37:43.251]                             envir = envir, inherits = FALSE)
[17:37:43.251]                           if (inherits(master, c("SOCKnode", 
[17:37:43.251]                             "SOCK0node"))) {
[17:37:43.251]                             sendCondition <<- function(cond) {
[17:37:43.251]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.251]                                 success = TRUE)
[17:37:43.251]                               parallel_sendData(master, data)
[17:37:43.251]                             }
[17:37:43.251]                             return(sendCondition)
[17:37:43.251]                           }
[17:37:43.251]                         }
[17:37:43.251]                         frame <- frame + 1L
[17:37:43.251]                         envir <- sys.frame(frame)
[17:37:43.251]                       }
[17:37:43.251]                     }
[17:37:43.251]                     sendCondition <<- function(cond) NULL
[17:37:43.251]                   }
[17:37:43.251]                 })
[17:37:43.251]                 withCallingHandlers({
[17:37:43.251]                   {
[17:37:43.251]                     do.call(function(...) {
[17:37:43.251]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.251]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.251]                         ...future.globals.maxSize)) {
[17:37:43.251]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.251]                         on.exit(options(oopts), add = TRUE)
[17:37:43.251]                       }
[17:37:43.251]                       {
[17:37:43.251]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.251]                           FUN = function(jj) {
[17:37:43.251]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.251]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.251]                               envir = globalenv(), inherits = FALSE)
[17:37:43.251]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.251]                           })
[17:37:43.251]                       }
[17:37:43.251]                     }, args = future.call.arguments)
[17:37:43.251]                   }
[17:37:43.251]                 }, immediateCondition = function(cond) {
[17:37:43.251]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.251]                   sendCondition(cond)
[17:37:43.251]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.251]                   {
[17:37:43.251]                     inherits <- base::inherits
[17:37:43.251]                     invokeRestart <- base::invokeRestart
[17:37:43.251]                     is.null <- base::is.null
[17:37:43.251]                     muffled <- FALSE
[17:37:43.251]                     if (inherits(cond, "message")) {
[17:37:43.251]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.251]                       if (muffled) 
[17:37:43.251]                         invokeRestart("muffleMessage")
[17:37:43.251]                     }
[17:37:43.251]                     else if (inherits(cond, "warning")) {
[17:37:43.251]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.251]                       if (muffled) 
[17:37:43.251]                         invokeRestart("muffleWarning")
[17:37:43.251]                     }
[17:37:43.251]                     else if (inherits(cond, "condition")) {
[17:37:43.251]                       if (!is.null(pattern)) {
[17:37:43.251]                         computeRestarts <- base::computeRestarts
[17:37:43.251]                         grepl <- base::grepl
[17:37:43.251]                         restarts <- computeRestarts(cond)
[17:37:43.251]                         for (restart in restarts) {
[17:37:43.251]                           name <- restart$name
[17:37:43.251]                           if (is.null(name)) 
[17:37:43.251]                             next
[17:37:43.251]                           if (!grepl(pattern, name)) 
[17:37:43.251]                             next
[17:37:43.251]                           invokeRestart(restart)
[17:37:43.251]                           muffled <- TRUE
[17:37:43.251]                           break
[17:37:43.251]                         }
[17:37:43.251]                       }
[17:37:43.251]                     }
[17:37:43.251]                     invisible(muffled)
[17:37:43.251]                   }
[17:37:43.251]                   muffleCondition(cond)
[17:37:43.251]                 })
[17:37:43.251]             }))
[17:37:43.251]             future::FutureResult(value = ...future.value$value, 
[17:37:43.251]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.251]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.251]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.251]                     ...future.globalenv.names))
[17:37:43.251]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.251]         }, condition = base::local({
[17:37:43.251]             c <- base::c
[17:37:43.251]             inherits <- base::inherits
[17:37:43.251]             invokeRestart <- base::invokeRestart
[17:37:43.251]             length <- base::length
[17:37:43.251]             list <- base::list
[17:37:43.251]             seq.int <- base::seq.int
[17:37:43.251]             signalCondition <- base::signalCondition
[17:37:43.251]             sys.calls <- base::sys.calls
[17:37:43.251]             `[[` <- base::`[[`
[17:37:43.251]             `+` <- base::`+`
[17:37:43.251]             `<<-` <- base::`<<-`
[17:37:43.251]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.251]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.251]                   3L)]
[17:37:43.251]             }
[17:37:43.251]             function(cond) {
[17:37:43.251]                 is_error <- inherits(cond, "error")
[17:37:43.251]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.251]                   NULL)
[17:37:43.251]                 if (is_error) {
[17:37:43.251]                   sessionInformation <- function() {
[17:37:43.251]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.251]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.251]                       search = base::search(), system = base::Sys.info())
[17:37:43.251]                   }
[17:37:43.251]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.251]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.251]                     cond$call), session = sessionInformation(), 
[17:37:43.251]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.251]                   signalCondition(cond)
[17:37:43.251]                 }
[17:37:43.251]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.251]                 "immediateCondition"))) {
[17:37:43.251]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.251]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.251]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.251]                   if (TRUE && !signal) {
[17:37:43.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.251]                     {
[17:37:43.251]                       inherits <- base::inherits
[17:37:43.251]                       invokeRestart <- base::invokeRestart
[17:37:43.251]                       is.null <- base::is.null
[17:37:43.251]                       muffled <- FALSE
[17:37:43.251]                       if (inherits(cond, "message")) {
[17:37:43.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.251]                         if (muffled) 
[17:37:43.251]                           invokeRestart("muffleMessage")
[17:37:43.251]                       }
[17:37:43.251]                       else if (inherits(cond, "warning")) {
[17:37:43.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.251]                         if (muffled) 
[17:37:43.251]                           invokeRestart("muffleWarning")
[17:37:43.251]                       }
[17:37:43.251]                       else if (inherits(cond, "condition")) {
[17:37:43.251]                         if (!is.null(pattern)) {
[17:37:43.251]                           computeRestarts <- base::computeRestarts
[17:37:43.251]                           grepl <- base::grepl
[17:37:43.251]                           restarts <- computeRestarts(cond)
[17:37:43.251]                           for (restart in restarts) {
[17:37:43.251]                             name <- restart$name
[17:37:43.251]                             if (is.null(name)) 
[17:37:43.251]                               next
[17:37:43.251]                             if (!grepl(pattern, name)) 
[17:37:43.251]                               next
[17:37:43.251]                             invokeRestart(restart)
[17:37:43.251]                             muffled <- TRUE
[17:37:43.251]                             break
[17:37:43.251]                           }
[17:37:43.251]                         }
[17:37:43.251]                       }
[17:37:43.251]                       invisible(muffled)
[17:37:43.251]                     }
[17:37:43.251]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.251]                   }
[17:37:43.251]                 }
[17:37:43.251]                 else {
[17:37:43.251]                   if (TRUE) {
[17:37:43.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.251]                     {
[17:37:43.251]                       inherits <- base::inherits
[17:37:43.251]                       invokeRestart <- base::invokeRestart
[17:37:43.251]                       is.null <- base::is.null
[17:37:43.251]                       muffled <- FALSE
[17:37:43.251]                       if (inherits(cond, "message")) {
[17:37:43.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.251]                         if (muffled) 
[17:37:43.251]                           invokeRestart("muffleMessage")
[17:37:43.251]                       }
[17:37:43.251]                       else if (inherits(cond, "warning")) {
[17:37:43.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.251]                         if (muffled) 
[17:37:43.251]                           invokeRestart("muffleWarning")
[17:37:43.251]                       }
[17:37:43.251]                       else if (inherits(cond, "condition")) {
[17:37:43.251]                         if (!is.null(pattern)) {
[17:37:43.251]                           computeRestarts <- base::computeRestarts
[17:37:43.251]                           grepl <- base::grepl
[17:37:43.251]                           restarts <- computeRestarts(cond)
[17:37:43.251]                           for (restart in restarts) {
[17:37:43.251]                             name <- restart$name
[17:37:43.251]                             if (is.null(name)) 
[17:37:43.251]                               next
[17:37:43.251]                             if (!grepl(pattern, name)) 
[17:37:43.251]                               next
[17:37:43.251]                             invokeRestart(restart)
[17:37:43.251]                             muffled <- TRUE
[17:37:43.251]                             break
[17:37:43.251]                           }
[17:37:43.251]                         }
[17:37:43.251]                       }
[17:37:43.251]                       invisible(muffled)
[17:37:43.251]                     }
[17:37:43.251]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.251]                   }
[17:37:43.251]                 }
[17:37:43.251]             }
[17:37:43.251]         }))
[17:37:43.251]     }, error = function(ex) {
[17:37:43.251]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.251]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.251]                 ...future.rng), started = ...future.startTime, 
[17:37:43.251]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.251]             version = "1.8"), class = "FutureResult")
[17:37:43.251]     }, finally = {
[17:37:43.251]         if (!identical(...future.workdir, getwd())) 
[17:37:43.251]             setwd(...future.workdir)
[17:37:43.251]         {
[17:37:43.251]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.251]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.251]             }
[17:37:43.251]             base::options(...future.oldOptions)
[17:37:43.251]             if (.Platform$OS.type == "windows") {
[17:37:43.251]                 old_names <- names(...future.oldEnvVars)
[17:37:43.251]                 envs <- base::Sys.getenv()
[17:37:43.251]                 names <- names(envs)
[17:37:43.251]                 common <- intersect(names, old_names)
[17:37:43.251]                 added <- setdiff(names, old_names)
[17:37:43.251]                 removed <- setdiff(old_names, names)
[17:37:43.251]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.251]                   envs[common]]
[17:37:43.251]                 NAMES <- toupper(changed)
[17:37:43.251]                 args <- list()
[17:37:43.251]                 for (kk in seq_along(NAMES)) {
[17:37:43.251]                   name <- changed[[kk]]
[17:37:43.251]                   NAME <- NAMES[[kk]]
[17:37:43.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.251]                     next
[17:37:43.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.251]                 }
[17:37:43.251]                 NAMES <- toupper(added)
[17:37:43.251]                 for (kk in seq_along(NAMES)) {
[17:37:43.251]                   name <- added[[kk]]
[17:37:43.251]                   NAME <- NAMES[[kk]]
[17:37:43.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.251]                     next
[17:37:43.251]                   args[[name]] <- ""
[17:37:43.251]                 }
[17:37:43.251]                 NAMES <- toupper(removed)
[17:37:43.251]                 for (kk in seq_along(NAMES)) {
[17:37:43.251]                   name <- removed[[kk]]
[17:37:43.251]                   NAME <- NAMES[[kk]]
[17:37:43.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.251]                     next
[17:37:43.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.251]                 }
[17:37:43.251]                 if (length(args) > 0) 
[17:37:43.251]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.251]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.251]             }
[17:37:43.251]             else {
[17:37:43.251]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.251]             }
[17:37:43.251]             {
[17:37:43.251]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.251]                   0L) {
[17:37:43.251]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.251]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.251]                   base::options(opts)
[17:37:43.251]                 }
[17:37:43.251]                 {
[17:37:43.251]                   {
[17:37:43.251]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.251]                     NULL
[17:37:43.251]                   }
[17:37:43.251]                   options(future.plan = NULL)
[17:37:43.251]                   if (is.na(NA_character_)) 
[17:37:43.251]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.251]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.251]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.251]                     .init = FALSE)
[17:37:43.251]                 }
[17:37:43.251]             }
[17:37:43.251]         }
[17:37:43.251]     })
[17:37:43.251]     if (TRUE) {
[17:37:43.251]         base::sink(type = "output", split = FALSE)
[17:37:43.251]         if (TRUE) {
[17:37:43.251]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.251]         }
[17:37:43.251]         else {
[17:37:43.251]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.251]         }
[17:37:43.251]         base::close(...future.stdout)
[17:37:43.251]         ...future.stdout <- NULL
[17:37:43.251]     }
[17:37:43.251]     ...future.result$conditions <- ...future.conditions
[17:37:43.251]     ...future.result$finished <- base::Sys.time()
[17:37:43.251]     ...future.result
[17:37:43.251] }
[17:37:43.303] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:37:43.303] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:37:43.304] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:37:43.304] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:37:43.304] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.305] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:37:43.305] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:37:43.305] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:37:43.306] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:37:43.306] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:37:43.306] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.306] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:37:43.307] MultisessionFuture started
[17:37:43.307] - Launch lazy future ... done
[17:37:43.307] run() for ‘MultisessionFuture’ ... done
[17:37:43.308] Created future:
[17:37:43.308] MultisessionFuture:
[17:37:43.308] Label: ‘future_replicate-2’
[17:37:43.308] Expression:
[17:37:43.308] {
[17:37:43.308]     do.call(function(...) {
[17:37:43.308]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.308]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.308]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.308]             on.exit(options(oopts), add = TRUE)
[17:37:43.308]         }
[17:37:43.308]         {
[17:37:43.308]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.308]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.308]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.308]                   envir = globalenv(), inherits = FALSE)
[17:37:43.308]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.308]             })
[17:37:43.308]         }
[17:37:43.308]     }, args = future.call.arguments)
[17:37:43.308] }
[17:37:43.308] Lazy evaluation: FALSE
[17:37:43.308] Asynchronous evaluation: TRUE
[17:37:43.308] Local evaluation: TRUE
[17:37:43.308] Environment: R_GlobalEnv
[17:37:43.308] Capture standard output: TRUE
[17:37:43.308] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.308] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.308] Packages: <none>
[17:37:43.308] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.308] Resolved: FALSE
[17:37:43.308] Value: <not collected>
[17:37:43.308] Conditions captured: <none>
[17:37:43.308] Early signaling: FALSE
[17:37:43.308] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.308] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.320] Chunk #2 of 2 ... DONE
[17:37:43.320] Launching 2 futures (chunks) ... DONE
[17:37:43.320] Resolving 2 futures (chunks) ...
[17:37:43.320] resolve() on list ...
[17:37:43.320]  recursive: 0
[17:37:43.320]  length: 2
[17:37:43.321] 
[17:37:43.321] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.321] - Validating connection of MultisessionFuture
[17:37:43.321] - received message: FutureResult
[17:37:43.322] - Received FutureResult
[17:37:43.322] - Erased future from FutureRegistry
[17:37:43.322] result() for ClusterFuture ...
[17:37:43.322] - result already collected: FutureResult
[17:37:43.322] result() for ClusterFuture ... done
[17:37:43.325] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.325] Future #1
[17:37:43.325] result() for ClusterFuture ...
[17:37:43.325] - result already collected: FutureResult
[17:37:43.325] result() for ClusterFuture ... done
[17:37:43.325] result() for ClusterFuture ...
[17:37:43.325] - result already collected: FutureResult
[17:37:43.325] result() for ClusterFuture ... done
[17:37:43.325] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:37:43.325] - nx: 2
[17:37:43.326] - relay: TRUE
[17:37:43.326] - stdout: TRUE
[17:37:43.326] - signal: TRUE
[17:37:43.326] - resignal: FALSE
[17:37:43.326] - force: TRUE
[17:37:43.326] - relayed: [n=2] FALSE, FALSE
[17:37:43.326] - queued futures: [n=2] FALSE, FALSE
[17:37:43.326]  - until=1
[17:37:43.326]  - relaying element #1
[17:37:43.326] result() for ClusterFuture ...
[17:37:43.326] - result already collected: FutureResult
[17:37:43.326] result() for ClusterFuture ... done
[17:37:43.327] result() for ClusterFuture ...
[17:37:43.327] - result already collected: FutureResult
[17:37:43.327] result() for ClusterFuture ... done
[17:37:43.327] result() for ClusterFuture ...
[17:37:43.327] - result already collected: FutureResult
[17:37:43.327] result() for ClusterFuture ... done
[17:37:43.327] result() for ClusterFuture ...
[17:37:43.327] - result already collected: FutureResult
[17:37:43.327] result() for ClusterFuture ... done
[17:37:43.327] - relayed: [n=2] TRUE, FALSE
[17:37:43.327] - queued futures: [n=2] TRUE, FALSE
[17:37:43.327] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:37:43.328]  length: 1 (resolved future 1)
[17:37:43.390] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.391] - Validating connection of MultisessionFuture
[17:37:43.391] - received message: FutureResult
[17:37:43.391] - Received FutureResult
[17:37:43.391] - Erased future from FutureRegistry
[17:37:43.391] result() for ClusterFuture ...
[17:37:43.391] - result already collected: FutureResult
[17:37:43.391] result() for ClusterFuture ... done
[17:37:43.391] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.392] Future #2
[17:37:43.392] result() for ClusterFuture ...
[17:37:43.392] - result already collected: FutureResult
[17:37:43.392] result() for ClusterFuture ... done
[17:37:43.392] result() for ClusterFuture ...
[17:37:43.392] - result already collected: FutureResult
[17:37:43.392] result() for ClusterFuture ... done
[17:37:43.392] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:37:43.392] - nx: 2
[17:37:43.392] - relay: TRUE
[17:37:43.392] - stdout: TRUE
[17:37:43.393] - signal: TRUE
[17:37:43.393] - resignal: FALSE
[17:37:43.393] - force: TRUE
[17:37:43.393] - relayed: [n=2] TRUE, FALSE
[17:37:43.393] - queued futures: [n=2] TRUE, FALSE
[17:37:43.393]  - until=2
[17:37:43.393]  - relaying element #2
[17:37:43.393] result() for ClusterFuture ...
[17:37:43.393] - result already collected: FutureResult
[17:37:43.393] result() for ClusterFuture ... done
[17:37:43.393] result() for ClusterFuture ...
[17:37:43.393] - result already collected: FutureResult
[17:37:43.394] result() for ClusterFuture ... done
[17:37:43.394] result() for ClusterFuture ...
[17:37:43.394] - result already collected: FutureResult
[17:37:43.394] result() for ClusterFuture ... done
[17:37:43.394] result() for ClusterFuture ...
[17:37:43.394] - result already collected: FutureResult
[17:37:43.394] result() for ClusterFuture ... done
[17:37:43.394] - relayed: [n=2] TRUE, TRUE
[17:37:43.394] - queued futures: [n=2] TRUE, TRUE
[17:37:43.394] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:37:43.394]  length: 0 (resolved future 2)
[17:37:43.395] Relaying remaining futures
[17:37:43.395] signalConditionsASAP(NULL, pos=0) ...
[17:37:43.395] - nx: 2
[17:37:43.395] - relay: TRUE
[17:37:43.395] - stdout: TRUE
[17:37:43.395] - signal: TRUE
[17:37:43.395] - resignal: FALSE
[17:37:43.395] - force: TRUE
[17:37:43.395] - relayed: [n=2] TRUE, TRUE
[17:37:43.395] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:43.395] - relayed: [n=2] TRUE, TRUE
[17:37:43.395] - queued futures: [n=2] TRUE, TRUE
[17:37:43.396] signalConditionsASAP(NULL, pos=0) ... done
[17:37:43.396] resolve() on list ... DONE
[17:37:43.396] result() for ClusterFuture ...
[17:37:43.396] - result already collected: FutureResult
[17:37:43.396] result() for ClusterFuture ... done
[17:37:43.396] result() for ClusterFuture ...
[17:37:43.396] - result already collected: FutureResult
[17:37:43.396] result() for ClusterFuture ... done
[17:37:43.396] result() for ClusterFuture ...
[17:37:43.396] - result already collected: FutureResult
[17:37:43.396] result() for ClusterFuture ... done
[17:37:43.397] result() for ClusterFuture ...
[17:37:43.397] - result already collected: FutureResult
[17:37:43.397] result() for ClusterFuture ... done
[17:37:43.397]  - Number of value chunks collected: 2
[17:37:43.397] Resolving 2 futures (chunks) ... DONE
[17:37:43.397] Reducing values from 2 chunks ...
[17:37:43.397]  - Number of values collected after concatenation: 5
[17:37:43.397]  - Number of values expected: 5
[17:37:43.397] Reducing values from 2 chunks ... DONE
[17:37:43.397] future_lapply() ... DONE
[17:37:43.397] future_lapply() ...
[17:37:43.398] Generating random seeds ...
[17:37:43.398] Generating random seed streams for 5 elements ...
[17:37:43.398] Generating random seed streams for 5 elements ... DONE
[17:37:43.398] Generating random seeds ... DONE
[17:37:43.398] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:43.403] Number of chunks: 2
[17:37:43.403] getGlobalsAndPackagesXApply() ...
[17:37:43.403]  - future.globals: TRUE
[17:37:43.403] getGlobalsAndPackages() ...
[17:37:43.403] Searching for globals...
[17:37:43.404] - globals found: [2] ‘FUN’, ‘sample’
[17:37:43.404] Searching for globals ... DONE
[17:37:43.404] Resolving globals: FALSE
[17:37:43.405] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:43.405] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:43.405] - globals: [1] ‘FUN’
[17:37:43.405] 
[17:37:43.405] getGlobalsAndPackages() ... DONE
[17:37:43.405]  - globals found/used: [n=1] ‘FUN’
[17:37:43.406]  - needed namespaces: [n=0] 
[17:37:43.406] Finding globals ... DONE
[17:37:43.406]  - use_args: TRUE
[17:37:43.406]  - Getting '...' globals ...
[17:37:43.406] resolve() on list ...
[17:37:43.406]  recursive: 0
[17:37:43.406]  length: 1
[17:37:43.406]  elements: ‘...’
[17:37:43.406]  length: 0 (resolved future 1)
[17:37:43.407] resolve() on list ... DONE
[17:37:43.407]    - '...' content: [n=0] 
[17:37:43.407] List of 1
[17:37:43.407]  $ ...: list()
[17:37:43.407]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.407]  - attr(*, "where")=List of 1
[17:37:43.407]   ..$ ...:<environment: 0x5640c08ac0d8> 
[17:37:43.407]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.407]  - attr(*, "resolved")= logi TRUE
[17:37:43.407]  - attr(*, "total_size")= num NA
[17:37:43.409]  - Getting '...' globals ... DONE
[17:37:43.409] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:43.409] List of 2
[17:37:43.409]  $ ...future.FUN:function (...)  
[17:37:43.409]  $ ...          : list()
[17:37:43.409]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.409]  - attr(*, "where")=List of 2
[17:37:43.409]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:43.409]   ..$ ...          :<environment: 0x5640c08ac0d8> 
[17:37:43.409]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.409]  - attr(*, "resolved")= logi FALSE
[17:37:43.409]  - attr(*, "total_size")= num 616
[17:37:43.412] Packages to be attached in all futures: [n=0] 
[17:37:43.412] getGlobalsAndPackagesXApply() ... DONE
[17:37:43.412] Number of futures (= number of chunks): 2
[17:37:43.412] Launching 2 futures (chunks) ...
[17:37:43.413] Chunk #1 of 2 ...
[17:37:43.413]  - Finding globals in 'X' for chunk #1 ...
[17:37:43.413] getGlobalsAndPackages() ...
[17:37:43.413] Searching for globals...
[17:37:43.413] 
[17:37:43.413] Searching for globals ... DONE
[17:37:43.413] - globals: [0] <none>
[17:37:43.413] getGlobalsAndPackages() ... DONE
[17:37:43.413]    + additional globals found: [n=0] 
[17:37:43.414]    + additional namespaces needed: [n=0] 
[17:37:43.414]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:43.414]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.414]  - seeds: [2] <seeds>
[17:37:43.414]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.414] getGlobalsAndPackages() ...
[17:37:43.414] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.414] Resolving globals: FALSE
[17:37:43.414] Tweak future expression to call with '...' arguments ...
[17:37:43.414] {
[17:37:43.414]     do.call(function(...) {
[17:37:43.414]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.414]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.414]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.414]             on.exit(options(oopts), add = TRUE)
[17:37:43.414]         }
[17:37:43.414]         {
[17:37:43.414]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.414]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.414]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.414]                   envir = globalenv(), inherits = FALSE)
[17:37:43.414]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.414]             })
[17:37:43.414]         }
[17:37:43.414]     }, args = future.call.arguments)
[17:37:43.414] }
[17:37:43.415] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.415] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.415] 
[17:37:43.415] getGlobalsAndPackages() ... DONE
[17:37:43.416] run() for ‘Future’ ...
[17:37:43.416] - state: ‘created’
[17:37:43.416] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.429] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.429] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.430]   - Field: ‘node’
[17:37:43.430]   - Field: ‘label’
[17:37:43.430]   - Field: ‘local’
[17:37:43.430]   - Field: ‘owner’
[17:37:43.430]   - Field: ‘envir’
[17:37:43.430]   - Field: ‘workers’
[17:37:43.430]   - Field: ‘packages’
[17:37:43.430]   - Field: ‘gc’
[17:37:43.430]   - Field: ‘conditions’
[17:37:43.430]   - Field: ‘persistent’
[17:37:43.430]   - Field: ‘expr’
[17:37:43.431]   - Field: ‘uuid’
[17:37:43.431]   - Field: ‘seed’
[17:37:43.431]   - Field: ‘version’
[17:37:43.431]   - Field: ‘result’
[17:37:43.431]   - Field: ‘asynchronous’
[17:37:43.431]   - Field: ‘calls’
[17:37:43.431]   - Field: ‘globals’
[17:37:43.431]   - Field: ‘stdout’
[17:37:43.431]   - Field: ‘earlySignal’
[17:37:43.431]   - Field: ‘lazy’
[17:37:43.431]   - Field: ‘state’
[17:37:43.432] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.432] - Launch lazy future ...
[17:37:43.432] Packages needed by the future expression (n = 0): <none>
[17:37:43.432] Packages needed by future strategies (n = 0): <none>
[17:37:43.433] {
[17:37:43.433]     {
[17:37:43.433]         {
[17:37:43.433]             ...future.startTime <- base::Sys.time()
[17:37:43.433]             {
[17:37:43.433]                 {
[17:37:43.433]                   {
[17:37:43.433]                     {
[17:37:43.433]                       base::local({
[17:37:43.433]                         has_future <- base::requireNamespace("future", 
[17:37:43.433]                           quietly = TRUE)
[17:37:43.433]                         if (has_future) {
[17:37:43.433]                           ns <- base::getNamespace("future")
[17:37:43.433]                           version <- ns[[".package"]][["version"]]
[17:37:43.433]                           if (is.null(version)) 
[17:37:43.433]                             version <- utils::packageVersion("future")
[17:37:43.433]                         }
[17:37:43.433]                         else {
[17:37:43.433]                           version <- NULL
[17:37:43.433]                         }
[17:37:43.433]                         if (!has_future || version < "1.8.0") {
[17:37:43.433]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.433]                             "", base::R.version$version.string), 
[17:37:43.433]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.433]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.433]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.433]                               "release", "version")], collapse = " "), 
[17:37:43.433]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.433]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.433]                             info)
[17:37:43.433]                           info <- base::paste(info, collapse = "; ")
[17:37:43.433]                           if (!has_future) {
[17:37:43.433]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.433]                               info)
[17:37:43.433]                           }
[17:37:43.433]                           else {
[17:37:43.433]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.433]                               info, version)
[17:37:43.433]                           }
[17:37:43.433]                           base::stop(msg)
[17:37:43.433]                         }
[17:37:43.433]                       })
[17:37:43.433]                     }
[17:37:43.433]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.433]                     base::options(mc.cores = 1L)
[17:37:43.433]                   }
[17:37:43.433]                   ...future.strategy.old <- future::plan("list")
[17:37:43.433]                   options(future.plan = NULL)
[17:37:43.433]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.433]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.433]                 }
[17:37:43.433]                 ...future.workdir <- getwd()
[17:37:43.433]             }
[17:37:43.433]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.433]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.433]         }
[17:37:43.433]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.433]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.433]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.433]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.433]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.433]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.433]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.433]             base::names(...future.oldOptions))
[17:37:43.433]     }
[17:37:43.433]     if (FALSE) {
[17:37:43.433]     }
[17:37:43.433]     else {
[17:37:43.433]         if (TRUE) {
[17:37:43.433]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.433]                 open = "w")
[17:37:43.433]         }
[17:37:43.433]         else {
[17:37:43.433]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.433]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.433]         }
[17:37:43.433]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.433]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.433]             base::sink(type = "output", split = FALSE)
[17:37:43.433]             base::close(...future.stdout)
[17:37:43.433]         }, add = TRUE)
[17:37:43.433]     }
[17:37:43.433]     ...future.frame <- base::sys.nframe()
[17:37:43.433]     ...future.conditions <- base::list()
[17:37:43.433]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.433]     if (FALSE) {
[17:37:43.433]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.433]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.433]     }
[17:37:43.433]     ...future.result <- base::tryCatch({
[17:37:43.433]         base::withCallingHandlers({
[17:37:43.433]             ...future.value <- base::withVisible(base::local({
[17:37:43.433]                 ...future.makeSendCondition <- base::local({
[17:37:43.433]                   sendCondition <- NULL
[17:37:43.433]                   function(frame = 1L) {
[17:37:43.433]                     if (is.function(sendCondition)) 
[17:37:43.433]                       return(sendCondition)
[17:37:43.433]                     ns <- getNamespace("parallel")
[17:37:43.433]                     if (exists("sendData", mode = "function", 
[17:37:43.433]                       envir = ns)) {
[17:37:43.433]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.433]                         envir = ns)
[17:37:43.433]                       envir <- sys.frame(frame)
[17:37:43.433]                       master <- NULL
[17:37:43.433]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.433]                         !identical(envir, emptyenv())) {
[17:37:43.433]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.433]                           inherits = FALSE)) {
[17:37:43.433]                           master <- get("master", mode = "list", 
[17:37:43.433]                             envir = envir, inherits = FALSE)
[17:37:43.433]                           if (inherits(master, c("SOCKnode", 
[17:37:43.433]                             "SOCK0node"))) {
[17:37:43.433]                             sendCondition <<- function(cond) {
[17:37:43.433]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.433]                                 success = TRUE)
[17:37:43.433]                               parallel_sendData(master, data)
[17:37:43.433]                             }
[17:37:43.433]                             return(sendCondition)
[17:37:43.433]                           }
[17:37:43.433]                         }
[17:37:43.433]                         frame <- frame + 1L
[17:37:43.433]                         envir <- sys.frame(frame)
[17:37:43.433]                       }
[17:37:43.433]                     }
[17:37:43.433]                     sendCondition <<- function(cond) NULL
[17:37:43.433]                   }
[17:37:43.433]                 })
[17:37:43.433]                 withCallingHandlers({
[17:37:43.433]                   {
[17:37:43.433]                     do.call(function(...) {
[17:37:43.433]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.433]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.433]                         ...future.globals.maxSize)) {
[17:37:43.433]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.433]                         on.exit(options(oopts), add = TRUE)
[17:37:43.433]                       }
[17:37:43.433]                       {
[17:37:43.433]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.433]                           FUN = function(jj) {
[17:37:43.433]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.433]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.433]                               envir = globalenv(), inherits = FALSE)
[17:37:43.433]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.433]                           })
[17:37:43.433]                       }
[17:37:43.433]                     }, args = future.call.arguments)
[17:37:43.433]                   }
[17:37:43.433]                 }, immediateCondition = function(cond) {
[17:37:43.433]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.433]                   sendCondition(cond)
[17:37:43.433]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.433]                   {
[17:37:43.433]                     inherits <- base::inherits
[17:37:43.433]                     invokeRestart <- base::invokeRestart
[17:37:43.433]                     is.null <- base::is.null
[17:37:43.433]                     muffled <- FALSE
[17:37:43.433]                     if (inherits(cond, "message")) {
[17:37:43.433]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.433]                       if (muffled) 
[17:37:43.433]                         invokeRestart("muffleMessage")
[17:37:43.433]                     }
[17:37:43.433]                     else if (inherits(cond, "warning")) {
[17:37:43.433]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.433]                       if (muffled) 
[17:37:43.433]                         invokeRestart("muffleWarning")
[17:37:43.433]                     }
[17:37:43.433]                     else if (inherits(cond, "condition")) {
[17:37:43.433]                       if (!is.null(pattern)) {
[17:37:43.433]                         computeRestarts <- base::computeRestarts
[17:37:43.433]                         grepl <- base::grepl
[17:37:43.433]                         restarts <- computeRestarts(cond)
[17:37:43.433]                         for (restart in restarts) {
[17:37:43.433]                           name <- restart$name
[17:37:43.433]                           if (is.null(name)) 
[17:37:43.433]                             next
[17:37:43.433]                           if (!grepl(pattern, name)) 
[17:37:43.433]                             next
[17:37:43.433]                           invokeRestart(restart)
[17:37:43.433]                           muffled <- TRUE
[17:37:43.433]                           break
[17:37:43.433]                         }
[17:37:43.433]                       }
[17:37:43.433]                     }
[17:37:43.433]                     invisible(muffled)
[17:37:43.433]                   }
[17:37:43.433]                   muffleCondition(cond)
[17:37:43.433]                 })
[17:37:43.433]             }))
[17:37:43.433]             future::FutureResult(value = ...future.value$value, 
[17:37:43.433]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.433]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.433]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.433]                     ...future.globalenv.names))
[17:37:43.433]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.433]         }, condition = base::local({
[17:37:43.433]             c <- base::c
[17:37:43.433]             inherits <- base::inherits
[17:37:43.433]             invokeRestart <- base::invokeRestart
[17:37:43.433]             length <- base::length
[17:37:43.433]             list <- base::list
[17:37:43.433]             seq.int <- base::seq.int
[17:37:43.433]             signalCondition <- base::signalCondition
[17:37:43.433]             sys.calls <- base::sys.calls
[17:37:43.433]             `[[` <- base::`[[`
[17:37:43.433]             `+` <- base::`+`
[17:37:43.433]             `<<-` <- base::`<<-`
[17:37:43.433]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.433]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.433]                   3L)]
[17:37:43.433]             }
[17:37:43.433]             function(cond) {
[17:37:43.433]                 is_error <- inherits(cond, "error")
[17:37:43.433]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.433]                   NULL)
[17:37:43.433]                 if (is_error) {
[17:37:43.433]                   sessionInformation <- function() {
[17:37:43.433]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.433]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.433]                       search = base::search(), system = base::Sys.info())
[17:37:43.433]                   }
[17:37:43.433]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.433]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.433]                     cond$call), session = sessionInformation(), 
[17:37:43.433]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.433]                   signalCondition(cond)
[17:37:43.433]                 }
[17:37:43.433]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.433]                 "immediateCondition"))) {
[17:37:43.433]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.433]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.433]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.433]                   if (TRUE && !signal) {
[17:37:43.433]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.433]                     {
[17:37:43.433]                       inherits <- base::inherits
[17:37:43.433]                       invokeRestart <- base::invokeRestart
[17:37:43.433]                       is.null <- base::is.null
[17:37:43.433]                       muffled <- FALSE
[17:37:43.433]                       if (inherits(cond, "message")) {
[17:37:43.433]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.433]                         if (muffled) 
[17:37:43.433]                           invokeRestart("muffleMessage")
[17:37:43.433]                       }
[17:37:43.433]                       else if (inherits(cond, "warning")) {
[17:37:43.433]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.433]                         if (muffled) 
[17:37:43.433]                           invokeRestart("muffleWarning")
[17:37:43.433]                       }
[17:37:43.433]                       else if (inherits(cond, "condition")) {
[17:37:43.433]                         if (!is.null(pattern)) {
[17:37:43.433]                           computeRestarts <- base::computeRestarts
[17:37:43.433]                           grepl <- base::grepl
[17:37:43.433]                           restarts <- computeRestarts(cond)
[17:37:43.433]                           for (restart in restarts) {
[17:37:43.433]                             name <- restart$name
[17:37:43.433]                             if (is.null(name)) 
[17:37:43.433]                               next
[17:37:43.433]                             if (!grepl(pattern, name)) 
[17:37:43.433]                               next
[17:37:43.433]                             invokeRestart(restart)
[17:37:43.433]                             muffled <- TRUE
[17:37:43.433]                             break
[17:37:43.433]                           }
[17:37:43.433]                         }
[17:37:43.433]                       }
[17:37:43.433]                       invisible(muffled)
[17:37:43.433]                     }
[17:37:43.433]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.433]                   }
[17:37:43.433]                 }
[17:37:43.433]                 else {
[17:37:43.433]                   if (TRUE) {
[17:37:43.433]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.433]                     {
[17:37:43.433]                       inherits <- base::inherits
[17:37:43.433]                       invokeRestart <- base::invokeRestart
[17:37:43.433]                       is.null <- base::is.null
[17:37:43.433]                       muffled <- FALSE
[17:37:43.433]                       if (inherits(cond, "message")) {
[17:37:43.433]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.433]                         if (muffled) 
[17:37:43.433]                           invokeRestart("muffleMessage")
[17:37:43.433]                       }
[17:37:43.433]                       else if (inherits(cond, "warning")) {
[17:37:43.433]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.433]                         if (muffled) 
[17:37:43.433]                           invokeRestart("muffleWarning")
[17:37:43.433]                       }
[17:37:43.433]                       else if (inherits(cond, "condition")) {
[17:37:43.433]                         if (!is.null(pattern)) {
[17:37:43.433]                           computeRestarts <- base::computeRestarts
[17:37:43.433]                           grepl <- base::grepl
[17:37:43.433]                           restarts <- computeRestarts(cond)
[17:37:43.433]                           for (restart in restarts) {
[17:37:43.433]                             name <- restart$name
[17:37:43.433]                             if (is.null(name)) 
[17:37:43.433]                               next
[17:37:43.433]                             if (!grepl(pattern, name)) 
[17:37:43.433]                               next
[17:37:43.433]                             invokeRestart(restart)
[17:37:43.433]                             muffled <- TRUE
[17:37:43.433]                             break
[17:37:43.433]                           }
[17:37:43.433]                         }
[17:37:43.433]                       }
[17:37:43.433]                       invisible(muffled)
[17:37:43.433]                     }
[17:37:43.433]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.433]                   }
[17:37:43.433]                 }
[17:37:43.433]             }
[17:37:43.433]         }))
[17:37:43.433]     }, error = function(ex) {
[17:37:43.433]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.433]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.433]                 ...future.rng), started = ...future.startTime, 
[17:37:43.433]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.433]             version = "1.8"), class = "FutureResult")
[17:37:43.433]     }, finally = {
[17:37:43.433]         if (!identical(...future.workdir, getwd())) 
[17:37:43.433]             setwd(...future.workdir)
[17:37:43.433]         {
[17:37:43.433]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.433]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.433]             }
[17:37:43.433]             base::options(...future.oldOptions)
[17:37:43.433]             if (.Platform$OS.type == "windows") {
[17:37:43.433]                 old_names <- names(...future.oldEnvVars)
[17:37:43.433]                 envs <- base::Sys.getenv()
[17:37:43.433]                 names <- names(envs)
[17:37:43.433]                 common <- intersect(names, old_names)
[17:37:43.433]                 added <- setdiff(names, old_names)
[17:37:43.433]                 removed <- setdiff(old_names, names)
[17:37:43.433]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.433]                   envs[common]]
[17:37:43.433]                 NAMES <- toupper(changed)
[17:37:43.433]                 args <- list()
[17:37:43.433]                 for (kk in seq_along(NAMES)) {
[17:37:43.433]                   name <- changed[[kk]]
[17:37:43.433]                   NAME <- NAMES[[kk]]
[17:37:43.433]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.433]                     next
[17:37:43.433]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.433]                 }
[17:37:43.433]                 NAMES <- toupper(added)
[17:37:43.433]                 for (kk in seq_along(NAMES)) {
[17:37:43.433]                   name <- added[[kk]]
[17:37:43.433]                   NAME <- NAMES[[kk]]
[17:37:43.433]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.433]                     next
[17:37:43.433]                   args[[name]] <- ""
[17:37:43.433]                 }
[17:37:43.433]                 NAMES <- toupper(removed)
[17:37:43.433]                 for (kk in seq_along(NAMES)) {
[17:37:43.433]                   name <- removed[[kk]]
[17:37:43.433]                   NAME <- NAMES[[kk]]
[17:37:43.433]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.433]                     next
[17:37:43.433]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.433]                 }
[17:37:43.433]                 if (length(args) > 0) 
[17:37:43.433]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.433]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.433]             }
[17:37:43.433]             else {
[17:37:43.433]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.433]             }
[17:37:43.433]             {
[17:37:43.433]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.433]                   0L) {
[17:37:43.433]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.433]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.433]                   base::options(opts)
[17:37:43.433]                 }
[17:37:43.433]                 {
[17:37:43.433]                   {
[17:37:43.433]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.433]                     NULL
[17:37:43.433]                   }
[17:37:43.433]                   options(future.plan = NULL)
[17:37:43.433]                   if (is.na(NA_character_)) 
[17:37:43.433]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.433]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.433]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.433]                     .init = FALSE)
[17:37:43.433]                 }
[17:37:43.433]             }
[17:37:43.433]         }
[17:37:43.433]     })
[17:37:43.433]     if (TRUE) {
[17:37:43.433]         base::sink(type = "output", split = FALSE)
[17:37:43.433]         if (TRUE) {
[17:37:43.433]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.433]         }
[17:37:43.433]         else {
[17:37:43.433]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.433]         }
[17:37:43.433]         base::close(...future.stdout)
[17:37:43.433]         ...future.stdout <- NULL
[17:37:43.433]     }
[17:37:43.433]     ...future.result$conditions <- ...future.conditions
[17:37:43.433]     ...future.result$finished <- base::Sys.time()
[17:37:43.433]     ...future.result
[17:37:43.433] }
[17:37:43.435] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:37:43.436] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:37:43.436] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:37:43.436] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:37:43.437] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.437] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:37:43.437] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:37:43.437] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:37:43.438] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:37:43.438] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:37:43.438] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.438] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:37:43.439] MultisessionFuture started
[17:37:43.439] - Launch lazy future ... done
[17:37:43.439] run() for ‘MultisessionFuture’ ... done
[17:37:43.439] Created future:
[17:37:43.439] MultisessionFuture:
[17:37:43.439] Label: ‘future_replicate-1’
[17:37:43.439] Expression:
[17:37:43.439] {
[17:37:43.439]     do.call(function(...) {
[17:37:43.439]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.439]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.439]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.439]             on.exit(options(oopts), add = TRUE)
[17:37:43.439]         }
[17:37:43.439]         {
[17:37:43.439]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.439]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.439]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.439]                   envir = globalenv(), inherits = FALSE)
[17:37:43.439]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.439]             })
[17:37:43.439]         }
[17:37:43.439]     }, args = future.call.arguments)
[17:37:43.439] }
[17:37:43.439] Lazy evaluation: FALSE
[17:37:43.439] Asynchronous evaluation: TRUE
[17:37:43.439] Local evaluation: TRUE
[17:37:43.439] Environment: R_GlobalEnv
[17:37:43.439] Capture standard output: TRUE
[17:37:43.439] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.439] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.439] Packages: <none>
[17:37:43.439] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.439] Resolved: FALSE
[17:37:43.439] Value: <not collected>
[17:37:43.439] Conditions captured: <none>
[17:37:43.439] Early signaling: FALSE
[17:37:43.439] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.439] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.451] Chunk #1 of 2 ... DONE
[17:37:43.451] Chunk #2 of 2 ...
[17:37:43.451]  - Finding globals in 'X' for chunk #2 ...
[17:37:43.451] getGlobalsAndPackages() ...
[17:37:43.451] Searching for globals...
[17:37:43.452] 
[17:37:43.452] Searching for globals ... DONE
[17:37:43.452] - globals: [0] <none>
[17:37:43.452] getGlobalsAndPackages() ... DONE
[17:37:43.452]    + additional globals found: [n=0] 
[17:37:43.452]    + additional namespaces needed: [n=0] 
[17:37:43.452]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:43.452]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.452]  - seeds: [3] <seeds>
[17:37:43.453]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.453] getGlobalsAndPackages() ...
[17:37:43.453] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.453] Resolving globals: FALSE
[17:37:43.453] Tweak future expression to call with '...' arguments ...
[17:37:43.453] {
[17:37:43.453]     do.call(function(...) {
[17:37:43.453]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.453]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.453]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.453]             on.exit(options(oopts), add = TRUE)
[17:37:43.453]         }
[17:37:43.453]         {
[17:37:43.453]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.453]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.453]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.453]                   envir = globalenv(), inherits = FALSE)
[17:37:43.453]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.453]             })
[17:37:43.453]         }
[17:37:43.453]     }, args = future.call.arguments)
[17:37:43.453] }
[17:37:43.453] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.454] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.454] 
[17:37:43.454] getGlobalsAndPackages() ... DONE
[17:37:43.454] run() for ‘Future’ ...
[17:37:43.454] - state: ‘created’
[17:37:43.454] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.468] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.468] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.468]   - Field: ‘node’
[17:37:43.469]   - Field: ‘label’
[17:37:43.469]   - Field: ‘local’
[17:37:43.469]   - Field: ‘owner’
[17:37:43.469]   - Field: ‘envir’
[17:37:43.469]   - Field: ‘workers’
[17:37:43.469]   - Field: ‘packages’
[17:37:43.469]   - Field: ‘gc’
[17:37:43.469]   - Field: ‘conditions’
[17:37:43.469]   - Field: ‘persistent’
[17:37:43.469]   - Field: ‘expr’
[17:37:43.470]   - Field: ‘uuid’
[17:37:43.470]   - Field: ‘seed’
[17:37:43.470]   - Field: ‘version’
[17:37:43.470]   - Field: ‘result’
[17:37:43.470]   - Field: ‘asynchronous’
[17:37:43.470]   - Field: ‘calls’
[17:37:43.470]   - Field: ‘globals’
[17:37:43.470]   - Field: ‘stdout’
[17:37:43.470]   - Field: ‘earlySignal’
[17:37:43.470]   - Field: ‘lazy’
[17:37:43.470]   - Field: ‘state’
[17:37:43.470] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.471] - Launch lazy future ...
[17:37:43.471] Packages needed by the future expression (n = 0): <none>
[17:37:43.471] Packages needed by future strategies (n = 0): <none>
[17:37:43.471] {
[17:37:43.471]     {
[17:37:43.471]         {
[17:37:43.471]             ...future.startTime <- base::Sys.time()
[17:37:43.471]             {
[17:37:43.471]                 {
[17:37:43.471]                   {
[17:37:43.471]                     {
[17:37:43.471]                       base::local({
[17:37:43.471]                         has_future <- base::requireNamespace("future", 
[17:37:43.471]                           quietly = TRUE)
[17:37:43.471]                         if (has_future) {
[17:37:43.471]                           ns <- base::getNamespace("future")
[17:37:43.471]                           version <- ns[[".package"]][["version"]]
[17:37:43.471]                           if (is.null(version)) 
[17:37:43.471]                             version <- utils::packageVersion("future")
[17:37:43.471]                         }
[17:37:43.471]                         else {
[17:37:43.471]                           version <- NULL
[17:37:43.471]                         }
[17:37:43.471]                         if (!has_future || version < "1.8.0") {
[17:37:43.471]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.471]                             "", base::R.version$version.string), 
[17:37:43.471]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.471]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.471]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.471]                               "release", "version")], collapse = " "), 
[17:37:43.471]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.471]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.471]                             info)
[17:37:43.471]                           info <- base::paste(info, collapse = "; ")
[17:37:43.471]                           if (!has_future) {
[17:37:43.471]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.471]                               info)
[17:37:43.471]                           }
[17:37:43.471]                           else {
[17:37:43.471]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.471]                               info, version)
[17:37:43.471]                           }
[17:37:43.471]                           base::stop(msg)
[17:37:43.471]                         }
[17:37:43.471]                       })
[17:37:43.471]                     }
[17:37:43.471]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.471]                     base::options(mc.cores = 1L)
[17:37:43.471]                   }
[17:37:43.471]                   ...future.strategy.old <- future::plan("list")
[17:37:43.471]                   options(future.plan = NULL)
[17:37:43.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.471]                 }
[17:37:43.471]                 ...future.workdir <- getwd()
[17:37:43.471]             }
[17:37:43.471]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.471]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.471]         }
[17:37:43.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.471]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.471]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.471]             base::names(...future.oldOptions))
[17:37:43.471]     }
[17:37:43.471]     if (FALSE) {
[17:37:43.471]     }
[17:37:43.471]     else {
[17:37:43.471]         if (TRUE) {
[17:37:43.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.471]                 open = "w")
[17:37:43.471]         }
[17:37:43.471]         else {
[17:37:43.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.471]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.471]         }
[17:37:43.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.471]             base::sink(type = "output", split = FALSE)
[17:37:43.471]             base::close(...future.stdout)
[17:37:43.471]         }, add = TRUE)
[17:37:43.471]     }
[17:37:43.471]     ...future.frame <- base::sys.nframe()
[17:37:43.471]     ...future.conditions <- base::list()
[17:37:43.471]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.471]     if (FALSE) {
[17:37:43.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.471]     }
[17:37:43.471]     ...future.result <- base::tryCatch({
[17:37:43.471]         base::withCallingHandlers({
[17:37:43.471]             ...future.value <- base::withVisible(base::local({
[17:37:43.471]                 ...future.makeSendCondition <- base::local({
[17:37:43.471]                   sendCondition <- NULL
[17:37:43.471]                   function(frame = 1L) {
[17:37:43.471]                     if (is.function(sendCondition)) 
[17:37:43.471]                       return(sendCondition)
[17:37:43.471]                     ns <- getNamespace("parallel")
[17:37:43.471]                     if (exists("sendData", mode = "function", 
[17:37:43.471]                       envir = ns)) {
[17:37:43.471]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.471]                         envir = ns)
[17:37:43.471]                       envir <- sys.frame(frame)
[17:37:43.471]                       master <- NULL
[17:37:43.471]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.471]                         !identical(envir, emptyenv())) {
[17:37:43.471]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.471]                           inherits = FALSE)) {
[17:37:43.471]                           master <- get("master", mode = "list", 
[17:37:43.471]                             envir = envir, inherits = FALSE)
[17:37:43.471]                           if (inherits(master, c("SOCKnode", 
[17:37:43.471]                             "SOCK0node"))) {
[17:37:43.471]                             sendCondition <<- function(cond) {
[17:37:43.471]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.471]                                 success = TRUE)
[17:37:43.471]                               parallel_sendData(master, data)
[17:37:43.471]                             }
[17:37:43.471]                             return(sendCondition)
[17:37:43.471]                           }
[17:37:43.471]                         }
[17:37:43.471]                         frame <- frame + 1L
[17:37:43.471]                         envir <- sys.frame(frame)
[17:37:43.471]                       }
[17:37:43.471]                     }
[17:37:43.471]                     sendCondition <<- function(cond) NULL
[17:37:43.471]                   }
[17:37:43.471]                 })
[17:37:43.471]                 withCallingHandlers({
[17:37:43.471]                   {
[17:37:43.471]                     do.call(function(...) {
[17:37:43.471]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.471]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.471]                         ...future.globals.maxSize)) {
[17:37:43.471]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.471]                         on.exit(options(oopts), add = TRUE)
[17:37:43.471]                       }
[17:37:43.471]                       {
[17:37:43.471]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.471]                           FUN = function(jj) {
[17:37:43.471]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.471]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.471]                               envir = globalenv(), inherits = FALSE)
[17:37:43.471]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.471]                           })
[17:37:43.471]                       }
[17:37:43.471]                     }, args = future.call.arguments)
[17:37:43.471]                   }
[17:37:43.471]                 }, immediateCondition = function(cond) {
[17:37:43.471]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.471]                   sendCondition(cond)
[17:37:43.471]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.471]                   {
[17:37:43.471]                     inherits <- base::inherits
[17:37:43.471]                     invokeRestart <- base::invokeRestart
[17:37:43.471]                     is.null <- base::is.null
[17:37:43.471]                     muffled <- FALSE
[17:37:43.471]                     if (inherits(cond, "message")) {
[17:37:43.471]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.471]                       if (muffled) 
[17:37:43.471]                         invokeRestart("muffleMessage")
[17:37:43.471]                     }
[17:37:43.471]                     else if (inherits(cond, "warning")) {
[17:37:43.471]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.471]                       if (muffled) 
[17:37:43.471]                         invokeRestart("muffleWarning")
[17:37:43.471]                     }
[17:37:43.471]                     else if (inherits(cond, "condition")) {
[17:37:43.471]                       if (!is.null(pattern)) {
[17:37:43.471]                         computeRestarts <- base::computeRestarts
[17:37:43.471]                         grepl <- base::grepl
[17:37:43.471]                         restarts <- computeRestarts(cond)
[17:37:43.471]                         for (restart in restarts) {
[17:37:43.471]                           name <- restart$name
[17:37:43.471]                           if (is.null(name)) 
[17:37:43.471]                             next
[17:37:43.471]                           if (!grepl(pattern, name)) 
[17:37:43.471]                             next
[17:37:43.471]                           invokeRestart(restart)
[17:37:43.471]                           muffled <- TRUE
[17:37:43.471]                           break
[17:37:43.471]                         }
[17:37:43.471]                       }
[17:37:43.471]                     }
[17:37:43.471]                     invisible(muffled)
[17:37:43.471]                   }
[17:37:43.471]                   muffleCondition(cond)
[17:37:43.471]                 })
[17:37:43.471]             }))
[17:37:43.471]             future::FutureResult(value = ...future.value$value, 
[17:37:43.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.471]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.471]                     ...future.globalenv.names))
[17:37:43.471]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.471]         }, condition = base::local({
[17:37:43.471]             c <- base::c
[17:37:43.471]             inherits <- base::inherits
[17:37:43.471]             invokeRestart <- base::invokeRestart
[17:37:43.471]             length <- base::length
[17:37:43.471]             list <- base::list
[17:37:43.471]             seq.int <- base::seq.int
[17:37:43.471]             signalCondition <- base::signalCondition
[17:37:43.471]             sys.calls <- base::sys.calls
[17:37:43.471]             `[[` <- base::`[[`
[17:37:43.471]             `+` <- base::`+`
[17:37:43.471]             `<<-` <- base::`<<-`
[17:37:43.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.471]                   3L)]
[17:37:43.471]             }
[17:37:43.471]             function(cond) {
[17:37:43.471]                 is_error <- inherits(cond, "error")
[17:37:43.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.471]                   NULL)
[17:37:43.471]                 if (is_error) {
[17:37:43.471]                   sessionInformation <- function() {
[17:37:43.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.471]                       search = base::search(), system = base::Sys.info())
[17:37:43.471]                   }
[17:37:43.471]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.471]                     cond$call), session = sessionInformation(), 
[17:37:43.471]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.471]                   signalCondition(cond)
[17:37:43.471]                 }
[17:37:43.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.471]                 "immediateCondition"))) {
[17:37:43.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.471]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.471]                   if (TRUE && !signal) {
[17:37:43.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.471]                     {
[17:37:43.471]                       inherits <- base::inherits
[17:37:43.471]                       invokeRestart <- base::invokeRestart
[17:37:43.471]                       is.null <- base::is.null
[17:37:43.471]                       muffled <- FALSE
[17:37:43.471]                       if (inherits(cond, "message")) {
[17:37:43.471]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.471]                         if (muffled) 
[17:37:43.471]                           invokeRestart("muffleMessage")
[17:37:43.471]                       }
[17:37:43.471]                       else if (inherits(cond, "warning")) {
[17:37:43.471]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.471]                         if (muffled) 
[17:37:43.471]                           invokeRestart("muffleWarning")
[17:37:43.471]                       }
[17:37:43.471]                       else if (inherits(cond, "condition")) {
[17:37:43.471]                         if (!is.null(pattern)) {
[17:37:43.471]                           computeRestarts <- base::computeRestarts
[17:37:43.471]                           grepl <- base::grepl
[17:37:43.471]                           restarts <- computeRestarts(cond)
[17:37:43.471]                           for (restart in restarts) {
[17:37:43.471]                             name <- restart$name
[17:37:43.471]                             if (is.null(name)) 
[17:37:43.471]                               next
[17:37:43.471]                             if (!grepl(pattern, name)) 
[17:37:43.471]                               next
[17:37:43.471]                             invokeRestart(restart)
[17:37:43.471]                             muffled <- TRUE
[17:37:43.471]                             break
[17:37:43.471]                           }
[17:37:43.471]                         }
[17:37:43.471]                       }
[17:37:43.471]                       invisible(muffled)
[17:37:43.471]                     }
[17:37:43.471]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.471]                   }
[17:37:43.471]                 }
[17:37:43.471]                 else {
[17:37:43.471]                   if (TRUE) {
[17:37:43.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.471]                     {
[17:37:43.471]                       inherits <- base::inherits
[17:37:43.471]                       invokeRestart <- base::invokeRestart
[17:37:43.471]                       is.null <- base::is.null
[17:37:43.471]                       muffled <- FALSE
[17:37:43.471]                       if (inherits(cond, "message")) {
[17:37:43.471]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.471]                         if (muffled) 
[17:37:43.471]                           invokeRestart("muffleMessage")
[17:37:43.471]                       }
[17:37:43.471]                       else if (inherits(cond, "warning")) {
[17:37:43.471]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.471]                         if (muffled) 
[17:37:43.471]                           invokeRestart("muffleWarning")
[17:37:43.471]                       }
[17:37:43.471]                       else if (inherits(cond, "condition")) {
[17:37:43.471]                         if (!is.null(pattern)) {
[17:37:43.471]                           computeRestarts <- base::computeRestarts
[17:37:43.471]                           grepl <- base::grepl
[17:37:43.471]                           restarts <- computeRestarts(cond)
[17:37:43.471]                           for (restart in restarts) {
[17:37:43.471]                             name <- restart$name
[17:37:43.471]                             if (is.null(name)) 
[17:37:43.471]                               next
[17:37:43.471]                             if (!grepl(pattern, name)) 
[17:37:43.471]                               next
[17:37:43.471]                             invokeRestart(restart)
[17:37:43.471]                             muffled <- TRUE
[17:37:43.471]                             break
[17:37:43.471]                           }
[17:37:43.471]                         }
[17:37:43.471]                       }
[17:37:43.471]                       invisible(muffled)
[17:37:43.471]                     }
[17:37:43.471]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.471]                   }
[17:37:43.471]                 }
[17:37:43.471]             }
[17:37:43.471]         }))
[17:37:43.471]     }, error = function(ex) {
[17:37:43.471]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.471]                 ...future.rng), started = ...future.startTime, 
[17:37:43.471]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.471]             version = "1.8"), class = "FutureResult")
[17:37:43.471]     }, finally = {
[17:37:43.471]         if (!identical(...future.workdir, getwd())) 
[17:37:43.471]             setwd(...future.workdir)
[17:37:43.471]         {
[17:37:43.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.471]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.471]             }
[17:37:43.471]             base::options(...future.oldOptions)
[17:37:43.471]             if (.Platform$OS.type == "windows") {
[17:37:43.471]                 old_names <- names(...future.oldEnvVars)
[17:37:43.471]                 envs <- base::Sys.getenv()
[17:37:43.471]                 names <- names(envs)
[17:37:43.471]                 common <- intersect(names, old_names)
[17:37:43.471]                 added <- setdiff(names, old_names)
[17:37:43.471]                 removed <- setdiff(old_names, names)
[17:37:43.471]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.471]                   envs[common]]
[17:37:43.471]                 NAMES <- toupper(changed)
[17:37:43.471]                 args <- list()
[17:37:43.471]                 for (kk in seq_along(NAMES)) {
[17:37:43.471]                   name <- changed[[kk]]
[17:37:43.471]                   NAME <- NAMES[[kk]]
[17:37:43.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.471]                     next
[17:37:43.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.471]                 }
[17:37:43.471]                 NAMES <- toupper(added)
[17:37:43.471]                 for (kk in seq_along(NAMES)) {
[17:37:43.471]                   name <- added[[kk]]
[17:37:43.471]                   NAME <- NAMES[[kk]]
[17:37:43.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.471]                     next
[17:37:43.471]                   args[[name]] <- ""
[17:37:43.471]                 }
[17:37:43.471]                 NAMES <- toupper(removed)
[17:37:43.471]                 for (kk in seq_along(NAMES)) {
[17:37:43.471]                   name <- removed[[kk]]
[17:37:43.471]                   NAME <- NAMES[[kk]]
[17:37:43.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.471]                     next
[17:37:43.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.471]                 }
[17:37:43.471]                 if (length(args) > 0) 
[17:37:43.471]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.471]             }
[17:37:43.471]             else {
[17:37:43.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.471]             }
[17:37:43.471]             {
[17:37:43.471]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.471]                   0L) {
[17:37:43.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.471]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.471]                   base::options(opts)
[17:37:43.471]                 }
[17:37:43.471]                 {
[17:37:43.471]                   {
[17:37:43.471]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.471]                     NULL
[17:37:43.471]                   }
[17:37:43.471]                   options(future.plan = NULL)
[17:37:43.471]                   if (is.na(NA_character_)) 
[17:37:43.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.471]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.471]                     .init = FALSE)
[17:37:43.471]                 }
[17:37:43.471]             }
[17:37:43.471]         }
[17:37:43.471]     })
[17:37:43.471]     if (TRUE) {
[17:37:43.471]         base::sink(type = "output", split = FALSE)
[17:37:43.471]         if (TRUE) {
[17:37:43.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.471]         }
[17:37:43.471]         else {
[17:37:43.471]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.471]         }
[17:37:43.471]         base::close(...future.stdout)
[17:37:43.471]         ...future.stdout <- NULL
[17:37:43.471]     }
[17:37:43.471]     ...future.result$conditions <- ...future.conditions
[17:37:43.471]     ...future.result$finished <- base::Sys.time()
[17:37:43.471]     ...future.result
[17:37:43.471] }
[17:37:43.474] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:37:43.474] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:37:43.475] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:37:43.475] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:37:43.475] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.475] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:37:43.476] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:37:43.476] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:37:43.476] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:37:43.476] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:37:43.477] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.477] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:37:43.477] MultisessionFuture started
[17:37:43.478] - Launch lazy future ... done
[17:37:43.478] run() for ‘MultisessionFuture’ ... done
[17:37:43.478] Created future:
[17:37:43.478] MultisessionFuture:
[17:37:43.478] Label: ‘future_replicate-2’
[17:37:43.478] Expression:
[17:37:43.478] {
[17:37:43.478]     do.call(function(...) {
[17:37:43.478]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.478]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.478]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.478]             on.exit(options(oopts), add = TRUE)
[17:37:43.478]         }
[17:37:43.478]         {
[17:37:43.478]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.478]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.478]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.478]                   envir = globalenv(), inherits = FALSE)
[17:37:43.478]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.478]             })
[17:37:43.478]         }
[17:37:43.478]     }, args = future.call.arguments)
[17:37:43.478] }
[17:37:43.478] Lazy evaluation: FALSE
[17:37:43.478] Asynchronous evaluation: TRUE
[17:37:43.478] Local evaluation: TRUE
[17:37:43.478] Environment: R_GlobalEnv
[17:37:43.478] Capture standard output: TRUE
[17:37:43.478] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.478] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.478] Packages: <none>
[17:37:43.478] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.478] Resolved: FALSE
[17:37:43.478] Value: <not collected>
[17:37:43.478] Conditions captured: <none>
[17:37:43.478] Early signaling: FALSE
[17:37:43.478] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.478] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.490] Chunk #2 of 2 ... DONE
[17:37:43.490] Launching 2 futures (chunks) ... DONE
[17:37:43.490] Resolving 2 futures (chunks) ...
[17:37:43.490] resolve() on list ...
[17:37:43.490]  recursive: 0
[17:37:43.490]  length: 2
[17:37:43.491] 
[17:37:43.491] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.491] - Validating connection of MultisessionFuture
[17:37:43.491] - received message: FutureResult
[17:37:43.492] - Received FutureResult
[17:37:43.492] - Erased future from FutureRegistry
[17:37:43.492] result() for ClusterFuture ...
[17:37:43.492] - result already collected: FutureResult
[17:37:43.492] result() for ClusterFuture ... done
[17:37:43.492] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.492] Future #1
[17:37:43.492] result() for ClusterFuture ...
[17:37:43.492] - result already collected: FutureResult
[17:37:43.492] result() for ClusterFuture ... done
[17:37:43.492] result() for ClusterFuture ...
[17:37:43.493] - result already collected: FutureResult
[17:37:43.493] result() for ClusterFuture ... done
[17:37:43.493] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:37:43.493] - nx: 2
[17:37:43.493] - relay: TRUE
[17:37:43.493] - stdout: TRUE
[17:37:43.493] - signal: TRUE
[17:37:43.493] - resignal: FALSE
[17:37:43.493] - force: TRUE
[17:37:43.493] - relayed: [n=2] FALSE, FALSE
[17:37:43.493] - queued futures: [n=2] FALSE, FALSE
[17:37:43.494]  - until=1
[17:37:43.494]  - relaying element #1
[17:37:43.494] result() for ClusterFuture ...
[17:37:43.494] - result already collected: FutureResult
[17:37:43.494] result() for ClusterFuture ... done
[17:37:43.494] result() for ClusterFuture ...
[17:37:43.494] - result already collected: FutureResult
[17:37:43.494] result() for ClusterFuture ... done
[17:37:43.494] result() for ClusterFuture ...
[17:37:43.494] - result already collected: FutureResult
[17:37:43.494] result() for ClusterFuture ... done
[17:37:43.495] result() for ClusterFuture ...
[17:37:43.495] - result already collected: FutureResult
[17:37:43.495] result() for ClusterFuture ... done
[17:37:43.495] - relayed: [n=2] TRUE, FALSE
[17:37:43.495] - queued futures: [n=2] TRUE, FALSE
[17:37:43.495] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:37:43.495]  length: 1 (resolved future 1)
[17:37:43.522] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.522] - Validating connection of MultisessionFuture
[17:37:43.522] - received message: FutureResult
[17:37:43.522] - Received FutureResult
[17:37:43.523] - Erased future from FutureRegistry
[17:37:43.523] result() for ClusterFuture ...
[17:37:43.523] - result already collected: FutureResult
[17:37:43.523] result() for ClusterFuture ... done
[17:37:43.523] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.523] Future #2
[17:37:43.523] result() for ClusterFuture ...
[17:37:43.523] - result already collected: FutureResult
[17:37:43.523] result() for ClusterFuture ... done
[17:37:43.523] result() for ClusterFuture ...
[17:37:43.523] - result already collected: FutureResult
[17:37:43.523] result() for ClusterFuture ... done
[17:37:43.524] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:37:43.524] - nx: 2
[17:37:43.524] - relay: TRUE
[17:37:43.524] - stdout: TRUE
[17:37:43.524] - signal: TRUE
[17:37:43.524] - resignal: FALSE
[17:37:43.524] - force: TRUE
[17:37:43.524] - relayed: [n=2] TRUE, FALSE
[17:37:43.524] - queued futures: [n=2] TRUE, FALSE
[17:37:43.524]  - until=2
[17:37:43.524]  - relaying element #2
[17:37:43.525] result() for ClusterFuture ...
[17:37:43.525] - result already collected: FutureResult
[17:37:43.525] result() for ClusterFuture ... done
[17:37:43.525] result() for ClusterFuture ...
[17:37:43.525] - result already collected: FutureResult
[17:37:43.525] result() for ClusterFuture ... done
[17:37:43.525] result() for ClusterFuture ...
[17:37:43.525] - result already collected: FutureResult
[17:37:43.525] result() for ClusterFuture ... done
[17:37:43.525] result() for ClusterFuture ...
[17:37:43.525] - result already collected: FutureResult
[17:37:43.526] result() for ClusterFuture ... done
[17:37:43.526] - relayed: [n=2] TRUE, TRUE
[17:37:43.526] - queued futures: [n=2] TRUE, TRUE
[17:37:43.526] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:37:43.526]  length: 0 (resolved future 2)
[17:37:43.526] Relaying remaining futures
[17:37:43.526] signalConditionsASAP(NULL, pos=0) ...
[17:37:43.526] - nx: 2
[17:37:43.526] - relay: TRUE
[17:37:43.526] - stdout: TRUE
[17:37:43.526] - signal: TRUE
[17:37:43.526] - resignal: FALSE
[17:37:43.527] - force: TRUE
[17:37:43.527] - relayed: [n=2] TRUE, TRUE
[17:37:43.527] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:43.527] - relayed: [n=2] TRUE, TRUE
[17:37:43.527] - queued futures: [n=2] TRUE, TRUE
[17:37:43.527] signalConditionsASAP(NULL, pos=0) ... done
[17:37:43.527] resolve() on list ... DONE
[17:37:43.527] result() for ClusterFuture ...
[17:37:43.527] - result already collected: FutureResult
[17:37:43.527] result() for ClusterFuture ... done
[17:37:43.527] result() for ClusterFuture ...
[17:37:43.528] - result already collected: FutureResult
[17:37:43.528] result() for ClusterFuture ... done
[17:37:43.528] result() for ClusterFuture ...
[17:37:43.528] - result already collected: FutureResult
[17:37:43.528] result() for ClusterFuture ... done
[17:37:43.528] result() for ClusterFuture ...
[17:37:43.528] - result already collected: FutureResult
[17:37:43.528] result() for ClusterFuture ... done
[17:37:43.528]  - Number of value chunks collected: 2
[17:37:43.528] Resolving 2 futures (chunks) ... DONE
[17:37:43.528] Reducing values from 2 chunks ...
[17:37:43.529]  - Number of values collected after concatenation: 5
[17:37:43.529]  - Number of values expected: 5
[17:37:43.529] Reducing values from 2 chunks ... DONE
[17:37:43.529] future_lapply() ... DONE
[17:37:43.529] future_lapply() ...
[17:37:43.529] Generating random seeds ...
[17:37:43.529] Generating random seed streams for 5 elements ...
[17:37:43.530] Generating random seed streams for 5 elements ... DONE
[17:37:43.530] Generating random seeds ... DONE
[17:37:43.530] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:43.534] Number of chunks: 2
[17:37:43.534] getGlobalsAndPackagesXApply() ...
[17:37:43.534]  - future.globals: TRUE
[17:37:43.534] getGlobalsAndPackages() ...
[17:37:43.534] Searching for globals...
[17:37:43.535] - globals found: [2] ‘FUN’, ‘sample’
[17:37:43.536] Searching for globals ... DONE
[17:37:43.536] Resolving globals: FALSE
[17:37:43.536] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:43.536] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:43.536] - globals: [1] ‘FUN’
[17:37:43.537] 
[17:37:43.537] getGlobalsAndPackages() ... DONE
[17:37:43.537]  - globals found/used: [n=1] ‘FUN’
[17:37:43.537]  - needed namespaces: [n=0] 
[17:37:43.537] Finding globals ... DONE
[17:37:43.537]  - use_args: TRUE
[17:37:43.537]  - Getting '...' globals ...
[17:37:43.537] resolve() on list ...
[17:37:43.538]  recursive: 0
[17:37:43.538]  length: 1
[17:37:43.538]  elements: ‘...’
[17:37:43.538]  length: 0 (resolved future 1)
[17:37:43.538] resolve() on list ... DONE
[17:37:43.538]    - '...' content: [n=0] 
[17:37:43.538] List of 1
[17:37:43.538]  $ ...: list()
[17:37:43.538]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.538]  - attr(*, "where")=List of 1
[17:37:43.538]   ..$ ...:<environment: 0x5640c2937038> 
[17:37:43.538]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.538]  - attr(*, "resolved")= logi TRUE
[17:37:43.538]  - attr(*, "total_size")= num NA
[17:37:43.541]  - Getting '...' globals ... DONE
[17:37:43.541] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:43.541] List of 2
[17:37:43.541]  $ ...future.FUN:function (...)  
[17:37:43.541]  $ ...          : list()
[17:37:43.541]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.541]  - attr(*, "where")=List of 2
[17:37:43.541]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:43.541]   ..$ ...          :<environment: 0x5640c2937038> 
[17:37:43.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.541]  - attr(*, "resolved")= logi FALSE
[17:37:43.541]  - attr(*, "total_size")= num 616
[17:37:43.545] Packages to be attached in all futures: [n=0] 
[17:37:43.545] getGlobalsAndPackagesXApply() ... DONE
[17:37:43.545] Number of futures (= number of chunks): 2
[17:37:43.546] Launching 2 futures (chunks) ...
[17:37:43.546] Chunk #1 of 2 ...
[17:37:43.546]  - Finding globals in 'X' for chunk #1 ...
[17:37:43.546] getGlobalsAndPackages() ...
[17:37:43.546] Searching for globals...
[17:37:43.546] 
[17:37:43.546] Searching for globals ... DONE
[17:37:43.546] - globals: [0] <none>
[17:37:43.547] getGlobalsAndPackages() ... DONE
[17:37:43.547]    + additional globals found: [n=0] 
[17:37:43.547]    + additional namespaces needed: [n=0] 
[17:37:43.547]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:43.547]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.547]  - seeds: [2] <seeds>
[17:37:43.547]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.547] getGlobalsAndPackages() ...
[17:37:43.547] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.547] Resolving globals: FALSE
[17:37:43.547] Tweak future expression to call with '...' arguments ...
[17:37:43.548] {
[17:37:43.548]     do.call(function(...) {
[17:37:43.548]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.548]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.548]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.548]             on.exit(options(oopts), add = TRUE)
[17:37:43.548]         }
[17:37:43.548]         {
[17:37:43.548]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.548]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.548]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.548]                   envir = globalenv(), inherits = FALSE)
[17:37:43.548]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.548]             })
[17:37:43.548]         }
[17:37:43.548]     }, args = future.call.arguments)
[17:37:43.548] }
[17:37:43.548] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.548] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.548] 
[17:37:43.548] getGlobalsAndPackages() ... DONE
[17:37:43.549] run() for ‘Future’ ...
[17:37:43.549] - state: ‘created’
[17:37:43.549] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.563] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.563] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.564]   - Field: ‘node’
[17:37:43.564]   - Field: ‘label’
[17:37:43.564]   - Field: ‘local’
[17:37:43.564]   - Field: ‘owner’
[17:37:43.564]   - Field: ‘envir’
[17:37:43.564]   - Field: ‘workers’
[17:37:43.564]   - Field: ‘packages’
[17:37:43.564]   - Field: ‘gc’
[17:37:43.564]   - Field: ‘conditions’
[17:37:43.564]   - Field: ‘persistent’
[17:37:43.565]   - Field: ‘expr’
[17:37:43.565]   - Field: ‘uuid’
[17:37:43.565]   - Field: ‘seed’
[17:37:43.565]   - Field: ‘version’
[17:37:43.565]   - Field: ‘result’
[17:37:43.565]   - Field: ‘asynchronous’
[17:37:43.565]   - Field: ‘calls’
[17:37:43.565]   - Field: ‘globals’
[17:37:43.565]   - Field: ‘stdout’
[17:37:43.565]   - Field: ‘earlySignal’
[17:37:43.565]   - Field: ‘lazy’
[17:37:43.565]   - Field: ‘state’
[17:37:43.566] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.566] - Launch lazy future ...
[17:37:43.566] Packages needed by the future expression (n = 0): <none>
[17:37:43.566] Packages needed by future strategies (n = 0): <none>
[17:37:43.566] {
[17:37:43.566]     {
[17:37:43.566]         {
[17:37:43.566]             ...future.startTime <- base::Sys.time()
[17:37:43.566]             {
[17:37:43.566]                 {
[17:37:43.566]                   {
[17:37:43.566]                     {
[17:37:43.566]                       base::local({
[17:37:43.566]                         has_future <- base::requireNamespace("future", 
[17:37:43.566]                           quietly = TRUE)
[17:37:43.566]                         if (has_future) {
[17:37:43.566]                           ns <- base::getNamespace("future")
[17:37:43.566]                           version <- ns[[".package"]][["version"]]
[17:37:43.566]                           if (is.null(version)) 
[17:37:43.566]                             version <- utils::packageVersion("future")
[17:37:43.566]                         }
[17:37:43.566]                         else {
[17:37:43.566]                           version <- NULL
[17:37:43.566]                         }
[17:37:43.566]                         if (!has_future || version < "1.8.0") {
[17:37:43.566]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.566]                             "", base::R.version$version.string), 
[17:37:43.566]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.566]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.566]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.566]                               "release", "version")], collapse = " "), 
[17:37:43.566]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.566]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.566]                             info)
[17:37:43.566]                           info <- base::paste(info, collapse = "; ")
[17:37:43.566]                           if (!has_future) {
[17:37:43.566]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.566]                               info)
[17:37:43.566]                           }
[17:37:43.566]                           else {
[17:37:43.566]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.566]                               info, version)
[17:37:43.566]                           }
[17:37:43.566]                           base::stop(msg)
[17:37:43.566]                         }
[17:37:43.566]                       })
[17:37:43.566]                     }
[17:37:43.566]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.566]                     base::options(mc.cores = 1L)
[17:37:43.566]                   }
[17:37:43.566]                   ...future.strategy.old <- future::plan("list")
[17:37:43.566]                   options(future.plan = NULL)
[17:37:43.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.566]                 }
[17:37:43.566]                 ...future.workdir <- getwd()
[17:37:43.566]             }
[17:37:43.566]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.566]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.566]         }
[17:37:43.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.566]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.566]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.566]             base::names(...future.oldOptions))
[17:37:43.566]     }
[17:37:43.566]     if (FALSE) {
[17:37:43.566]     }
[17:37:43.566]     else {
[17:37:43.566]         if (TRUE) {
[17:37:43.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.566]                 open = "w")
[17:37:43.566]         }
[17:37:43.566]         else {
[17:37:43.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.566]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.566]         }
[17:37:43.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.566]             base::sink(type = "output", split = FALSE)
[17:37:43.566]             base::close(...future.stdout)
[17:37:43.566]         }, add = TRUE)
[17:37:43.566]     }
[17:37:43.566]     ...future.frame <- base::sys.nframe()
[17:37:43.566]     ...future.conditions <- base::list()
[17:37:43.566]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.566]     if (FALSE) {
[17:37:43.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.566]     }
[17:37:43.566]     ...future.result <- base::tryCatch({
[17:37:43.566]         base::withCallingHandlers({
[17:37:43.566]             ...future.value <- base::withVisible(base::local({
[17:37:43.566]                 ...future.makeSendCondition <- base::local({
[17:37:43.566]                   sendCondition <- NULL
[17:37:43.566]                   function(frame = 1L) {
[17:37:43.566]                     if (is.function(sendCondition)) 
[17:37:43.566]                       return(sendCondition)
[17:37:43.566]                     ns <- getNamespace("parallel")
[17:37:43.566]                     if (exists("sendData", mode = "function", 
[17:37:43.566]                       envir = ns)) {
[17:37:43.566]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.566]                         envir = ns)
[17:37:43.566]                       envir <- sys.frame(frame)
[17:37:43.566]                       master <- NULL
[17:37:43.566]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.566]                         !identical(envir, emptyenv())) {
[17:37:43.566]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.566]                           inherits = FALSE)) {
[17:37:43.566]                           master <- get("master", mode = "list", 
[17:37:43.566]                             envir = envir, inherits = FALSE)
[17:37:43.566]                           if (inherits(master, c("SOCKnode", 
[17:37:43.566]                             "SOCK0node"))) {
[17:37:43.566]                             sendCondition <<- function(cond) {
[17:37:43.566]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.566]                                 success = TRUE)
[17:37:43.566]                               parallel_sendData(master, data)
[17:37:43.566]                             }
[17:37:43.566]                             return(sendCondition)
[17:37:43.566]                           }
[17:37:43.566]                         }
[17:37:43.566]                         frame <- frame + 1L
[17:37:43.566]                         envir <- sys.frame(frame)
[17:37:43.566]                       }
[17:37:43.566]                     }
[17:37:43.566]                     sendCondition <<- function(cond) NULL
[17:37:43.566]                   }
[17:37:43.566]                 })
[17:37:43.566]                 withCallingHandlers({
[17:37:43.566]                   {
[17:37:43.566]                     do.call(function(...) {
[17:37:43.566]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.566]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.566]                         ...future.globals.maxSize)) {
[17:37:43.566]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.566]                         on.exit(options(oopts), add = TRUE)
[17:37:43.566]                       }
[17:37:43.566]                       {
[17:37:43.566]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.566]                           FUN = function(jj) {
[17:37:43.566]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.566]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.566]                               envir = globalenv(), inherits = FALSE)
[17:37:43.566]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.566]                           })
[17:37:43.566]                       }
[17:37:43.566]                     }, args = future.call.arguments)
[17:37:43.566]                   }
[17:37:43.566]                 }, immediateCondition = function(cond) {
[17:37:43.566]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.566]                   sendCondition(cond)
[17:37:43.566]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.566]                   {
[17:37:43.566]                     inherits <- base::inherits
[17:37:43.566]                     invokeRestart <- base::invokeRestart
[17:37:43.566]                     is.null <- base::is.null
[17:37:43.566]                     muffled <- FALSE
[17:37:43.566]                     if (inherits(cond, "message")) {
[17:37:43.566]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.566]                       if (muffled) 
[17:37:43.566]                         invokeRestart("muffleMessage")
[17:37:43.566]                     }
[17:37:43.566]                     else if (inherits(cond, "warning")) {
[17:37:43.566]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.566]                       if (muffled) 
[17:37:43.566]                         invokeRestart("muffleWarning")
[17:37:43.566]                     }
[17:37:43.566]                     else if (inherits(cond, "condition")) {
[17:37:43.566]                       if (!is.null(pattern)) {
[17:37:43.566]                         computeRestarts <- base::computeRestarts
[17:37:43.566]                         grepl <- base::grepl
[17:37:43.566]                         restarts <- computeRestarts(cond)
[17:37:43.566]                         for (restart in restarts) {
[17:37:43.566]                           name <- restart$name
[17:37:43.566]                           if (is.null(name)) 
[17:37:43.566]                             next
[17:37:43.566]                           if (!grepl(pattern, name)) 
[17:37:43.566]                             next
[17:37:43.566]                           invokeRestart(restart)
[17:37:43.566]                           muffled <- TRUE
[17:37:43.566]                           break
[17:37:43.566]                         }
[17:37:43.566]                       }
[17:37:43.566]                     }
[17:37:43.566]                     invisible(muffled)
[17:37:43.566]                   }
[17:37:43.566]                   muffleCondition(cond)
[17:37:43.566]                 })
[17:37:43.566]             }))
[17:37:43.566]             future::FutureResult(value = ...future.value$value, 
[17:37:43.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.566]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.566]                     ...future.globalenv.names))
[17:37:43.566]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.566]         }, condition = base::local({
[17:37:43.566]             c <- base::c
[17:37:43.566]             inherits <- base::inherits
[17:37:43.566]             invokeRestart <- base::invokeRestart
[17:37:43.566]             length <- base::length
[17:37:43.566]             list <- base::list
[17:37:43.566]             seq.int <- base::seq.int
[17:37:43.566]             signalCondition <- base::signalCondition
[17:37:43.566]             sys.calls <- base::sys.calls
[17:37:43.566]             `[[` <- base::`[[`
[17:37:43.566]             `+` <- base::`+`
[17:37:43.566]             `<<-` <- base::`<<-`
[17:37:43.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.566]                   3L)]
[17:37:43.566]             }
[17:37:43.566]             function(cond) {
[17:37:43.566]                 is_error <- inherits(cond, "error")
[17:37:43.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.566]                   NULL)
[17:37:43.566]                 if (is_error) {
[17:37:43.566]                   sessionInformation <- function() {
[17:37:43.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.566]                       search = base::search(), system = base::Sys.info())
[17:37:43.566]                   }
[17:37:43.566]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.566]                     cond$call), session = sessionInformation(), 
[17:37:43.566]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.566]                   signalCondition(cond)
[17:37:43.566]                 }
[17:37:43.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.566]                 "immediateCondition"))) {
[17:37:43.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.566]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.566]                   if (TRUE && !signal) {
[17:37:43.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.566]                     {
[17:37:43.566]                       inherits <- base::inherits
[17:37:43.566]                       invokeRestart <- base::invokeRestart
[17:37:43.566]                       is.null <- base::is.null
[17:37:43.566]                       muffled <- FALSE
[17:37:43.566]                       if (inherits(cond, "message")) {
[17:37:43.566]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.566]                         if (muffled) 
[17:37:43.566]                           invokeRestart("muffleMessage")
[17:37:43.566]                       }
[17:37:43.566]                       else if (inherits(cond, "warning")) {
[17:37:43.566]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.566]                         if (muffled) 
[17:37:43.566]                           invokeRestart("muffleWarning")
[17:37:43.566]                       }
[17:37:43.566]                       else if (inherits(cond, "condition")) {
[17:37:43.566]                         if (!is.null(pattern)) {
[17:37:43.566]                           computeRestarts <- base::computeRestarts
[17:37:43.566]                           grepl <- base::grepl
[17:37:43.566]                           restarts <- computeRestarts(cond)
[17:37:43.566]                           for (restart in restarts) {
[17:37:43.566]                             name <- restart$name
[17:37:43.566]                             if (is.null(name)) 
[17:37:43.566]                               next
[17:37:43.566]                             if (!grepl(pattern, name)) 
[17:37:43.566]                               next
[17:37:43.566]                             invokeRestart(restart)
[17:37:43.566]                             muffled <- TRUE
[17:37:43.566]                             break
[17:37:43.566]                           }
[17:37:43.566]                         }
[17:37:43.566]                       }
[17:37:43.566]                       invisible(muffled)
[17:37:43.566]                     }
[17:37:43.566]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.566]                   }
[17:37:43.566]                 }
[17:37:43.566]                 else {
[17:37:43.566]                   if (TRUE) {
[17:37:43.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.566]                     {
[17:37:43.566]                       inherits <- base::inherits
[17:37:43.566]                       invokeRestart <- base::invokeRestart
[17:37:43.566]                       is.null <- base::is.null
[17:37:43.566]                       muffled <- FALSE
[17:37:43.566]                       if (inherits(cond, "message")) {
[17:37:43.566]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.566]                         if (muffled) 
[17:37:43.566]                           invokeRestart("muffleMessage")
[17:37:43.566]                       }
[17:37:43.566]                       else if (inherits(cond, "warning")) {
[17:37:43.566]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.566]                         if (muffled) 
[17:37:43.566]                           invokeRestart("muffleWarning")
[17:37:43.566]                       }
[17:37:43.566]                       else if (inherits(cond, "condition")) {
[17:37:43.566]                         if (!is.null(pattern)) {
[17:37:43.566]                           computeRestarts <- base::computeRestarts
[17:37:43.566]                           grepl <- base::grepl
[17:37:43.566]                           restarts <- computeRestarts(cond)
[17:37:43.566]                           for (restart in restarts) {
[17:37:43.566]                             name <- restart$name
[17:37:43.566]                             if (is.null(name)) 
[17:37:43.566]                               next
[17:37:43.566]                             if (!grepl(pattern, name)) 
[17:37:43.566]                               next
[17:37:43.566]                             invokeRestart(restart)
[17:37:43.566]                             muffled <- TRUE
[17:37:43.566]                             break
[17:37:43.566]                           }
[17:37:43.566]                         }
[17:37:43.566]                       }
[17:37:43.566]                       invisible(muffled)
[17:37:43.566]                     }
[17:37:43.566]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.566]                   }
[17:37:43.566]                 }
[17:37:43.566]             }
[17:37:43.566]         }))
[17:37:43.566]     }, error = function(ex) {
[17:37:43.566]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.566]                 ...future.rng), started = ...future.startTime, 
[17:37:43.566]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.566]             version = "1.8"), class = "FutureResult")
[17:37:43.566]     }, finally = {
[17:37:43.566]         if (!identical(...future.workdir, getwd())) 
[17:37:43.566]             setwd(...future.workdir)
[17:37:43.566]         {
[17:37:43.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.566]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.566]             }
[17:37:43.566]             base::options(...future.oldOptions)
[17:37:43.566]             if (.Platform$OS.type == "windows") {
[17:37:43.566]                 old_names <- names(...future.oldEnvVars)
[17:37:43.566]                 envs <- base::Sys.getenv()
[17:37:43.566]                 names <- names(envs)
[17:37:43.566]                 common <- intersect(names, old_names)
[17:37:43.566]                 added <- setdiff(names, old_names)
[17:37:43.566]                 removed <- setdiff(old_names, names)
[17:37:43.566]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.566]                   envs[common]]
[17:37:43.566]                 NAMES <- toupper(changed)
[17:37:43.566]                 args <- list()
[17:37:43.566]                 for (kk in seq_along(NAMES)) {
[17:37:43.566]                   name <- changed[[kk]]
[17:37:43.566]                   NAME <- NAMES[[kk]]
[17:37:43.566]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.566]                     next
[17:37:43.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.566]                 }
[17:37:43.566]                 NAMES <- toupper(added)
[17:37:43.566]                 for (kk in seq_along(NAMES)) {
[17:37:43.566]                   name <- added[[kk]]
[17:37:43.566]                   NAME <- NAMES[[kk]]
[17:37:43.566]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.566]                     next
[17:37:43.566]                   args[[name]] <- ""
[17:37:43.566]                 }
[17:37:43.566]                 NAMES <- toupper(removed)
[17:37:43.566]                 for (kk in seq_along(NAMES)) {
[17:37:43.566]                   name <- removed[[kk]]
[17:37:43.566]                   NAME <- NAMES[[kk]]
[17:37:43.566]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.566]                     next
[17:37:43.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.566]                 }
[17:37:43.566]                 if (length(args) > 0) 
[17:37:43.566]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.566]             }
[17:37:43.566]             else {
[17:37:43.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.566]             }
[17:37:43.566]             {
[17:37:43.566]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.566]                   0L) {
[17:37:43.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.566]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.566]                   base::options(opts)
[17:37:43.566]                 }
[17:37:43.566]                 {
[17:37:43.566]                   {
[17:37:43.566]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.566]                     NULL
[17:37:43.566]                   }
[17:37:43.566]                   options(future.plan = NULL)
[17:37:43.566]                   if (is.na(NA_character_)) 
[17:37:43.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.566]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.566]                     .init = FALSE)
[17:37:43.566]                 }
[17:37:43.566]             }
[17:37:43.566]         }
[17:37:43.566]     })
[17:37:43.566]     if (TRUE) {
[17:37:43.566]         base::sink(type = "output", split = FALSE)
[17:37:43.566]         if (TRUE) {
[17:37:43.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.566]         }
[17:37:43.566]         else {
[17:37:43.566]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.566]         }
[17:37:43.566]         base::close(...future.stdout)
[17:37:43.566]         ...future.stdout <- NULL
[17:37:43.566]     }
[17:37:43.566]     ...future.result$conditions <- ...future.conditions
[17:37:43.566]     ...future.result$finished <- base::Sys.time()
[17:37:43.566]     ...future.result
[17:37:43.566] }
[17:37:43.569] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:37:43.569] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:37:43.570] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:37:43.570] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:37:43.570] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.570] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:37:43.571] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:37:43.571] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:37:43.571] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:37:43.571] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:37:43.572] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.572] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:37:43.572] MultisessionFuture started
[17:37:43.573] - Launch lazy future ... done
[17:37:43.573] run() for ‘MultisessionFuture’ ... done
[17:37:43.573] Created future:
[17:37:43.573] MultisessionFuture:
[17:37:43.573] Label: ‘future_replicate-1’
[17:37:43.573] Expression:
[17:37:43.573] {
[17:37:43.573]     do.call(function(...) {
[17:37:43.573]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.573]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.573]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.573]             on.exit(options(oopts), add = TRUE)
[17:37:43.573]         }
[17:37:43.573]         {
[17:37:43.573]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.573]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.573]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.573]                   envir = globalenv(), inherits = FALSE)
[17:37:43.573]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.573]             })
[17:37:43.573]         }
[17:37:43.573]     }, args = future.call.arguments)
[17:37:43.573] }
[17:37:43.573] Lazy evaluation: FALSE
[17:37:43.573] Asynchronous evaluation: TRUE
[17:37:43.573] Local evaluation: TRUE
[17:37:43.573] Environment: R_GlobalEnv
[17:37:43.573] Capture standard output: TRUE
[17:37:43.573] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.573] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.573] Packages: <none>
[17:37:43.573] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.573] Resolved: FALSE
[17:37:43.573] Value: <not collected>
[17:37:43.573] Conditions captured: <none>
[17:37:43.573] Early signaling: FALSE
[17:37:43.573] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.573] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.585] Chunk #1 of 2 ... DONE
[17:37:43.585] Chunk #2 of 2 ...
[17:37:43.585]  - Finding globals in 'X' for chunk #2 ...
[17:37:43.585] getGlobalsAndPackages() ...
[17:37:43.585] Searching for globals...
[17:37:43.585] 
[17:37:43.585] Searching for globals ... DONE
[17:37:43.586] - globals: [0] <none>
[17:37:43.586] getGlobalsAndPackages() ... DONE
[17:37:43.586]    + additional globals found: [n=0] 
[17:37:43.586]    + additional namespaces needed: [n=0] 
[17:37:43.586]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:43.586]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.586]  - seeds: [3] <seeds>
[17:37:43.586]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.586] getGlobalsAndPackages() ...
[17:37:43.586] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.586] Resolving globals: FALSE
[17:37:43.587] Tweak future expression to call with '...' arguments ...
[17:37:43.587] {
[17:37:43.587]     do.call(function(...) {
[17:37:43.587]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.587]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.587]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.587]             on.exit(options(oopts), add = TRUE)
[17:37:43.587]         }
[17:37:43.587]         {
[17:37:43.587]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.587]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.587]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.587]                   envir = globalenv(), inherits = FALSE)
[17:37:43.587]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.587]             })
[17:37:43.587]         }
[17:37:43.587]     }, args = future.call.arguments)
[17:37:43.587] }
[17:37:43.587] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.587] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.587] 
[17:37:43.587] getGlobalsAndPackages() ... DONE
[17:37:43.588] run() for ‘Future’ ...
[17:37:43.588] - state: ‘created’
[17:37:43.588] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.602] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.603] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.603]   - Field: ‘node’
[17:37:43.603]   - Field: ‘label’
[17:37:43.603]   - Field: ‘local’
[17:37:43.603]   - Field: ‘owner’
[17:37:43.603]   - Field: ‘envir’
[17:37:43.603]   - Field: ‘workers’
[17:37:43.603]   - Field: ‘packages’
[17:37:43.603]   - Field: ‘gc’
[17:37:43.603]   - Field: ‘conditions’
[17:37:43.604]   - Field: ‘persistent’
[17:37:43.604]   - Field: ‘expr’
[17:37:43.604]   - Field: ‘uuid’
[17:37:43.604]   - Field: ‘seed’
[17:37:43.604]   - Field: ‘version’
[17:37:43.604]   - Field: ‘result’
[17:37:43.604]   - Field: ‘asynchronous’
[17:37:43.604]   - Field: ‘calls’
[17:37:43.604]   - Field: ‘globals’
[17:37:43.604]   - Field: ‘stdout’
[17:37:43.604]   - Field: ‘earlySignal’
[17:37:43.605]   - Field: ‘lazy’
[17:37:43.605]   - Field: ‘state’
[17:37:43.605] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.605] - Launch lazy future ...
[17:37:43.605] Packages needed by the future expression (n = 0): <none>
[17:37:43.605] Packages needed by future strategies (n = 0): <none>
[17:37:43.606] {
[17:37:43.606]     {
[17:37:43.606]         {
[17:37:43.606]             ...future.startTime <- base::Sys.time()
[17:37:43.606]             {
[17:37:43.606]                 {
[17:37:43.606]                   {
[17:37:43.606]                     {
[17:37:43.606]                       base::local({
[17:37:43.606]                         has_future <- base::requireNamespace("future", 
[17:37:43.606]                           quietly = TRUE)
[17:37:43.606]                         if (has_future) {
[17:37:43.606]                           ns <- base::getNamespace("future")
[17:37:43.606]                           version <- ns[[".package"]][["version"]]
[17:37:43.606]                           if (is.null(version)) 
[17:37:43.606]                             version <- utils::packageVersion("future")
[17:37:43.606]                         }
[17:37:43.606]                         else {
[17:37:43.606]                           version <- NULL
[17:37:43.606]                         }
[17:37:43.606]                         if (!has_future || version < "1.8.0") {
[17:37:43.606]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.606]                             "", base::R.version$version.string), 
[17:37:43.606]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.606]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.606]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.606]                               "release", "version")], collapse = " "), 
[17:37:43.606]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.606]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.606]                             info)
[17:37:43.606]                           info <- base::paste(info, collapse = "; ")
[17:37:43.606]                           if (!has_future) {
[17:37:43.606]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.606]                               info)
[17:37:43.606]                           }
[17:37:43.606]                           else {
[17:37:43.606]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.606]                               info, version)
[17:37:43.606]                           }
[17:37:43.606]                           base::stop(msg)
[17:37:43.606]                         }
[17:37:43.606]                       })
[17:37:43.606]                     }
[17:37:43.606]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.606]                     base::options(mc.cores = 1L)
[17:37:43.606]                   }
[17:37:43.606]                   ...future.strategy.old <- future::plan("list")
[17:37:43.606]                   options(future.plan = NULL)
[17:37:43.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.606]                 }
[17:37:43.606]                 ...future.workdir <- getwd()
[17:37:43.606]             }
[17:37:43.606]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.606]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.606]         }
[17:37:43.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.606]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.606]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.606]             base::names(...future.oldOptions))
[17:37:43.606]     }
[17:37:43.606]     if (FALSE) {
[17:37:43.606]     }
[17:37:43.606]     else {
[17:37:43.606]         if (TRUE) {
[17:37:43.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.606]                 open = "w")
[17:37:43.606]         }
[17:37:43.606]         else {
[17:37:43.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.606]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.606]         }
[17:37:43.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.606]             base::sink(type = "output", split = FALSE)
[17:37:43.606]             base::close(...future.stdout)
[17:37:43.606]         }, add = TRUE)
[17:37:43.606]     }
[17:37:43.606]     ...future.frame <- base::sys.nframe()
[17:37:43.606]     ...future.conditions <- base::list()
[17:37:43.606]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.606]     if (FALSE) {
[17:37:43.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.606]     }
[17:37:43.606]     ...future.result <- base::tryCatch({
[17:37:43.606]         base::withCallingHandlers({
[17:37:43.606]             ...future.value <- base::withVisible(base::local({
[17:37:43.606]                 ...future.makeSendCondition <- base::local({
[17:37:43.606]                   sendCondition <- NULL
[17:37:43.606]                   function(frame = 1L) {
[17:37:43.606]                     if (is.function(sendCondition)) 
[17:37:43.606]                       return(sendCondition)
[17:37:43.606]                     ns <- getNamespace("parallel")
[17:37:43.606]                     if (exists("sendData", mode = "function", 
[17:37:43.606]                       envir = ns)) {
[17:37:43.606]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.606]                         envir = ns)
[17:37:43.606]                       envir <- sys.frame(frame)
[17:37:43.606]                       master <- NULL
[17:37:43.606]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.606]                         !identical(envir, emptyenv())) {
[17:37:43.606]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.606]                           inherits = FALSE)) {
[17:37:43.606]                           master <- get("master", mode = "list", 
[17:37:43.606]                             envir = envir, inherits = FALSE)
[17:37:43.606]                           if (inherits(master, c("SOCKnode", 
[17:37:43.606]                             "SOCK0node"))) {
[17:37:43.606]                             sendCondition <<- function(cond) {
[17:37:43.606]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.606]                                 success = TRUE)
[17:37:43.606]                               parallel_sendData(master, data)
[17:37:43.606]                             }
[17:37:43.606]                             return(sendCondition)
[17:37:43.606]                           }
[17:37:43.606]                         }
[17:37:43.606]                         frame <- frame + 1L
[17:37:43.606]                         envir <- sys.frame(frame)
[17:37:43.606]                       }
[17:37:43.606]                     }
[17:37:43.606]                     sendCondition <<- function(cond) NULL
[17:37:43.606]                   }
[17:37:43.606]                 })
[17:37:43.606]                 withCallingHandlers({
[17:37:43.606]                   {
[17:37:43.606]                     do.call(function(...) {
[17:37:43.606]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.606]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.606]                         ...future.globals.maxSize)) {
[17:37:43.606]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.606]                         on.exit(options(oopts), add = TRUE)
[17:37:43.606]                       }
[17:37:43.606]                       {
[17:37:43.606]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.606]                           FUN = function(jj) {
[17:37:43.606]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.606]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.606]                               envir = globalenv(), inherits = FALSE)
[17:37:43.606]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.606]                           })
[17:37:43.606]                       }
[17:37:43.606]                     }, args = future.call.arguments)
[17:37:43.606]                   }
[17:37:43.606]                 }, immediateCondition = function(cond) {
[17:37:43.606]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.606]                   sendCondition(cond)
[17:37:43.606]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.606]                   {
[17:37:43.606]                     inherits <- base::inherits
[17:37:43.606]                     invokeRestart <- base::invokeRestart
[17:37:43.606]                     is.null <- base::is.null
[17:37:43.606]                     muffled <- FALSE
[17:37:43.606]                     if (inherits(cond, "message")) {
[17:37:43.606]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.606]                       if (muffled) 
[17:37:43.606]                         invokeRestart("muffleMessage")
[17:37:43.606]                     }
[17:37:43.606]                     else if (inherits(cond, "warning")) {
[17:37:43.606]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.606]                       if (muffled) 
[17:37:43.606]                         invokeRestart("muffleWarning")
[17:37:43.606]                     }
[17:37:43.606]                     else if (inherits(cond, "condition")) {
[17:37:43.606]                       if (!is.null(pattern)) {
[17:37:43.606]                         computeRestarts <- base::computeRestarts
[17:37:43.606]                         grepl <- base::grepl
[17:37:43.606]                         restarts <- computeRestarts(cond)
[17:37:43.606]                         for (restart in restarts) {
[17:37:43.606]                           name <- restart$name
[17:37:43.606]                           if (is.null(name)) 
[17:37:43.606]                             next
[17:37:43.606]                           if (!grepl(pattern, name)) 
[17:37:43.606]                             next
[17:37:43.606]                           invokeRestart(restart)
[17:37:43.606]                           muffled <- TRUE
[17:37:43.606]                           break
[17:37:43.606]                         }
[17:37:43.606]                       }
[17:37:43.606]                     }
[17:37:43.606]                     invisible(muffled)
[17:37:43.606]                   }
[17:37:43.606]                   muffleCondition(cond)
[17:37:43.606]                 })
[17:37:43.606]             }))
[17:37:43.606]             future::FutureResult(value = ...future.value$value, 
[17:37:43.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.606]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.606]                     ...future.globalenv.names))
[17:37:43.606]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.606]         }, condition = base::local({
[17:37:43.606]             c <- base::c
[17:37:43.606]             inherits <- base::inherits
[17:37:43.606]             invokeRestart <- base::invokeRestart
[17:37:43.606]             length <- base::length
[17:37:43.606]             list <- base::list
[17:37:43.606]             seq.int <- base::seq.int
[17:37:43.606]             signalCondition <- base::signalCondition
[17:37:43.606]             sys.calls <- base::sys.calls
[17:37:43.606]             `[[` <- base::`[[`
[17:37:43.606]             `+` <- base::`+`
[17:37:43.606]             `<<-` <- base::`<<-`
[17:37:43.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.606]                   3L)]
[17:37:43.606]             }
[17:37:43.606]             function(cond) {
[17:37:43.606]                 is_error <- inherits(cond, "error")
[17:37:43.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.606]                   NULL)
[17:37:43.606]                 if (is_error) {
[17:37:43.606]                   sessionInformation <- function() {
[17:37:43.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.606]                       search = base::search(), system = base::Sys.info())
[17:37:43.606]                   }
[17:37:43.606]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.606]                     cond$call), session = sessionInformation(), 
[17:37:43.606]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.606]                   signalCondition(cond)
[17:37:43.606]                 }
[17:37:43.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.606]                 "immediateCondition"))) {
[17:37:43.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.606]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.606]                   if (TRUE && !signal) {
[17:37:43.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.606]                     {
[17:37:43.606]                       inherits <- base::inherits
[17:37:43.606]                       invokeRestart <- base::invokeRestart
[17:37:43.606]                       is.null <- base::is.null
[17:37:43.606]                       muffled <- FALSE
[17:37:43.606]                       if (inherits(cond, "message")) {
[17:37:43.606]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.606]                         if (muffled) 
[17:37:43.606]                           invokeRestart("muffleMessage")
[17:37:43.606]                       }
[17:37:43.606]                       else if (inherits(cond, "warning")) {
[17:37:43.606]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.606]                         if (muffled) 
[17:37:43.606]                           invokeRestart("muffleWarning")
[17:37:43.606]                       }
[17:37:43.606]                       else if (inherits(cond, "condition")) {
[17:37:43.606]                         if (!is.null(pattern)) {
[17:37:43.606]                           computeRestarts <- base::computeRestarts
[17:37:43.606]                           grepl <- base::grepl
[17:37:43.606]                           restarts <- computeRestarts(cond)
[17:37:43.606]                           for (restart in restarts) {
[17:37:43.606]                             name <- restart$name
[17:37:43.606]                             if (is.null(name)) 
[17:37:43.606]                               next
[17:37:43.606]                             if (!grepl(pattern, name)) 
[17:37:43.606]                               next
[17:37:43.606]                             invokeRestart(restart)
[17:37:43.606]                             muffled <- TRUE
[17:37:43.606]                             break
[17:37:43.606]                           }
[17:37:43.606]                         }
[17:37:43.606]                       }
[17:37:43.606]                       invisible(muffled)
[17:37:43.606]                     }
[17:37:43.606]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.606]                   }
[17:37:43.606]                 }
[17:37:43.606]                 else {
[17:37:43.606]                   if (TRUE) {
[17:37:43.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.606]                     {
[17:37:43.606]                       inherits <- base::inherits
[17:37:43.606]                       invokeRestart <- base::invokeRestart
[17:37:43.606]                       is.null <- base::is.null
[17:37:43.606]                       muffled <- FALSE
[17:37:43.606]                       if (inherits(cond, "message")) {
[17:37:43.606]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.606]                         if (muffled) 
[17:37:43.606]                           invokeRestart("muffleMessage")
[17:37:43.606]                       }
[17:37:43.606]                       else if (inherits(cond, "warning")) {
[17:37:43.606]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.606]                         if (muffled) 
[17:37:43.606]                           invokeRestart("muffleWarning")
[17:37:43.606]                       }
[17:37:43.606]                       else if (inherits(cond, "condition")) {
[17:37:43.606]                         if (!is.null(pattern)) {
[17:37:43.606]                           computeRestarts <- base::computeRestarts
[17:37:43.606]                           grepl <- base::grepl
[17:37:43.606]                           restarts <- computeRestarts(cond)
[17:37:43.606]                           for (restart in restarts) {
[17:37:43.606]                             name <- restart$name
[17:37:43.606]                             if (is.null(name)) 
[17:37:43.606]                               next
[17:37:43.606]                             if (!grepl(pattern, name)) 
[17:37:43.606]                               next
[17:37:43.606]                             invokeRestart(restart)
[17:37:43.606]                             muffled <- TRUE
[17:37:43.606]                             break
[17:37:43.606]                           }
[17:37:43.606]                         }
[17:37:43.606]                       }
[17:37:43.606]                       invisible(muffled)
[17:37:43.606]                     }
[17:37:43.606]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.606]                   }
[17:37:43.606]                 }
[17:37:43.606]             }
[17:37:43.606]         }))
[17:37:43.606]     }, error = function(ex) {
[17:37:43.606]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.606]                 ...future.rng), started = ...future.startTime, 
[17:37:43.606]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.606]             version = "1.8"), class = "FutureResult")
[17:37:43.606]     }, finally = {
[17:37:43.606]         if (!identical(...future.workdir, getwd())) 
[17:37:43.606]             setwd(...future.workdir)
[17:37:43.606]         {
[17:37:43.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.606]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.606]             }
[17:37:43.606]             base::options(...future.oldOptions)
[17:37:43.606]             if (.Platform$OS.type == "windows") {
[17:37:43.606]                 old_names <- names(...future.oldEnvVars)
[17:37:43.606]                 envs <- base::Sys.getenv()
[17:37:43.606]                 names <- names(envs)
[17:37:43.606]                 common <- intersect(names, old_names)
[17:37:43.606]                 added <- setdiff(names, old_names)
[17:37:43.606]                 removed <- setdiff(old_names, names)
[17:37:43.606]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.606]                   envs[common]]
[17:37:43.606]                 NAMES <- toupper(changed)
[17:37:43.606]                 args <- list()
[17:37:43.606]                 for (kk in seq_along(NAMES)) {
[17:37:43.606]                   name <- changed[[kk]]
[17:37:43.606]                   NAME <- NAMES[[kk]]
[17:37:43.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.606]                     next
[17:37:43.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.606]                 }
[17:37:43.606]                 NAMES <- toupper(added)
[17:37:43.606]                 for (kk in seq_along(NAMES)) {
[17:37:43.606]                   name <- added[[kk]]
[17:37:43.606]                   NAME <- NAMES[[kk]]
[17:37:43.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.606]                     next
[17:37:43.606]                   args[[name]] <- ""
[17:37:43.606]                 }
[17:37:43.606]                 NAMES <- toupper(removed)
[17:37:43.606]                 for (kk in seq_along(NAMES)) {
[17:37:43.606]                   name <- removed[[kk]]
[17:37:43.606]                   NAME <- NAMES[[kk]]
[17:37:43.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.606]                     next
[17:37:43.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.606]                 }
[17:37:43.606]                 if (length(args) > 0) 
[17:37:43.606]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.606]             }
[17:37:43.606]             else {
[17:37:43.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.606]             }
[17:37:43.606]             {
[17:37:43.606]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.606]                   0L) {
[17:37:43.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.606]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.606]                   base::options(opts)
[17:37:43.606]                 }
[17:37:43.606]                 {
[17:37:43.606]                   {
[17:37:43.606]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.606]                     NULL
[17:37:43.606]                   }
[17:37:43.606]                   options(future.plan = NULL)
[17:37:43.606]                   if (is.na(NA_character_)) 
[17:37:43.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.606]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.606]                     .init = FALSE)
[17:37:43.606]                 }
[17:37:43.606]             }
[17:37:43.606]         }
[17:37:43.606]     })
[17:37:43.606]     if (TRUE) {
[17:37:43.606]         base::sink(type = "output", split = FALSE)
[17:37:43.606]         if (TRUE) {
[17:37:43.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.606]         }
[17:37:43.606]         else {
[17:37:43.606]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.606]         }
[17:37:43.606]         base::close(...future.stdout)
[17:37:43.606]         ...future.stdout <- NULL
[17:37:43.606]     }
[17:37:43.606]     ...future.result$conditions <- ...future.conditions
[17:37:43.606]     ...future.result$finished <- base::Sys.time()
[17:37:43.606]     ...future.result
[17:37:43.606] }
[17:37:43.608] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:37:43.608] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:37:43.609] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:37:43.609] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:37:43.609] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.610] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:37:43.610] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:37:43.610] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:37:43.610] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:37:43.610] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:37:43.611] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.611] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:37:43.611] MultisessionFuture started
[17:37:43.611] - Launch lazy future ... done
[17:37:43.611] run() for ‘MultisessionFuture’ ... done
[17:37:43.612] Created future:
[17:37:43.612] MultisessionFuture:
[17:37:43.612] Label: ‘future_replicate-2’
[17:37:43.612] Expression:
[17:37:43.612] {
[17:37:43.612]     do.call(function(...) {
[17:37:43.612]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.612]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.612]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.612]             on.exit(options(oopts), add = TRUE)
[17:37:43.612]         }
[17:37:43.612]         {
[17:37:43.612]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.612]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.612]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.612]                   envir = globalenv(), inherits = FALSE)
[17:37:43.612]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.612]             })
[17:37:43.612]         }
[17:37:43.612]     }, args = future.call.arguments)
[17:37:43.612] }
[17:37:43.612] Lazy evaluation: FALSE
[17:37:43.612] Asynchronous evaluation: TRUE
[17:37:43.612] Local evaluation: TRUE
[17:37:43.612] Environment: R_GlobalEnv
[17:37:43.612] Capture standard output: TRUE
[17:37:43.612] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.612] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.612] Packages: <none>
[17:37:43.612] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.612] Resolved: FALSE
[17:37:43.612] Value: <not collected>
[17:37:43.612] Conditions captured: <none>
[17:37:43.612] Early signaling: FALSE
[17:37:43.612] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.612] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.623] Chunk #2 of 2 ... DONE
[17:37:43.623] Launching 2 futures (chunks) ... DONE
[17:37:43.623] Resolving 2 futures (chunks) ...
[17:37:43.624] resolve() on list ...
[17:37:43.624]  recursive: 0
[17:37:43.624]  length: 2
[17:37:43.624] 
[17:37:43.624] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.625] - Validating connection of MultisessionFuture
[17:37:43.625] - received message: FutureResult
[17:37:43.625] - Received FutureResult
[17:37:43.625] - Erased future from FutureRegistry
[17:37:43.625] result() for ClusterFuture ...
[17:37:43.625] - result already collected: FutureResult
[17:37:43.625] result() for ClusterFuture ... done
[17:37:43.625] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.625] Future #1
[17:37:43.626] result() for ClusterFuture ...
[17:37:43.626] - result already collected: FutureResult
[17:37:43.626] result() for ClusterFuture ... done
[17:37:43.626] result() for ClusterFuture ...
[17:37:43.626] - result already collected: FutureResult
[17:37:43.626] result() for ClusterFuture ... done
[17:37:43.626] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:37:43.626] - nx: 2
[17:37:43.626] - relay: TRUE
[17:37:43.626] - stdout: TRUE
[17:37:43.626] - signal: TRUE
[17:37:43.626] - resignal: FALSE
[17:37:43.627] - force: TRUE
[17:37:43.627] - relayed: [n=2] FALSE, FALSE
[17:37:43.627] - queued futures: [n=2] FALSE, FALSE
[17:37:43.627]  - until=1
[17:37:43.627]  - relaying element #1
[17:37:43.627] result() for ClusterFuture ...
[17:37:43.627] - result already collected: FutureResult
[17:37:43.627] result() for ClusterFuture ... done
[17:37:43.627] result() for ClusterFuture ...
[17:37:43.627] - result already collected: FutureResult
[17:37:43.627] result() for ClusterFuture ... done
[17:37:43.628] result() for ClusterFuture ...
[17:37:43.628] - result already collected: FutureResult
[17:37:43.628] result() for ClusterFuture ... done
[17:37:43.628] result() for ClusterFuture ...
[17:37:43.628] - result already collected: FutureResult
[17:37:43.628] result() for ClusterFuture ... done
[17:37:43.628] - relayed: [n=2] TRUE, FALSE
[17:37:43.628] - queued futures: [n=2] TRUE, FALSE
[17:37:43.628] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:37:43.628]  length: 1 (resolved future 1)
[17:37:43.654] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.654] - Validating connection of MultisessionFuture
[17:37:43.654] - received message: FutureResult
[17:37:43.654] - Received FutureResult
[17:37:43.655] - Erased future from FutureRegistry
[17:37:43.655] result() for ClusterFuture ...
[17:37:43.655] - result already collected: FutureResult
[17:37:43.655] result() for ClusterFuture ... done
[17:37:43.655] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.655] Future #2
[17:37:43.655] result() for ClusterFuture ...
[17:37:43.655] - result already collected: FutureResult
[17:37:43.655] result() for ClusterFuture ... done
[17:37:43.655] result() for ClusterFuture ...
[17:37:43.655] - result already collected: FutureResult
[17:37:43.656] result() for ClusterFuture ... done
[17:37:43.656] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:37:43.656] - nx: 2
[17:37:43.656] - relay: TRUE
[17:37:43.656] - stdout: TRUE
[17:37:43.656] - signal: TRUE
[17:37:43.656] - resignal: FALSE
[17:37:43.656] - force: TRUE
[17:37:43.656] - relayed: [n=2] TRUE, FALSE
[17:37:43.656] - queued futures: [n=2] TRUE, FALSE
[17:37:43.656]  - until=2
[17:37:43.657]  - relaying element #2
[17:37:43.657] result() for ClusterFuture ...
[17:37:43.657] - result already collected: FutureResult
[17:37:43.657] result() for ClusterFuture ... done
[17:37:43.657] result() for ClusterFuture ...
[17:37:43.657] - result already collected: FutureResult
[17:37:43.657] result() for ClusterFuture ... done
[17:37:43.657] result() for ClusterFuture ...
[17:37:43.657] - result already collected: FutureResult
[17:37:43.657] result() for ClusterFuture ... done
[17:37:43.657] result() for ClusterFuture ...
[17:37:43.658] - result already collected: FutureResult
[17:37:43.658] result() for ClusterFuture ... done
[17:37:43.658] - relayed: [n=2] TRUE, TRUE
[17:37:43.658] - queued futures: [n=2] TRUE, TRUE
[17:37:43.658] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:37:43.658]  length: 0 (resolved future 2)
[17:37:43.658] Relaying remaining futures
[17:37:43.658] signalConditionsASAP(NULL, pos=0) ...
[17:37:43.658] - nx: 2
[17:37:43.658] - relay: TRUE
[17:37:43.658] - stdout: TRUE
[17:37:43.658] - signal: TRUE
[17:37:43.659] - resignal: FALSE
[17:37:43.659] - force: TRUE
[17:37:43.659] - relayed: [n=2] TRUE, TRUE
[17:37:43.659] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:43.659] - relayed: [n=2] TRUE, TRUE
[17:37:43.659] - queued futures: [n=2] TRUE, TRUE
[17:37:43.659] signalConditionsASAP(NULL, pos=0) ... done
[17:37:43.659] resolve() on list ... DONE
[17:37:43.659] result() for ClusterFuture ...
[17:37:43.659] - result already collected: FutureResult
[17:37:43.659] result() for ClusterFuture ... done
[17:37:43.660] result() for ClusterFuture ...
[17:37:43.660] - result already collected: FutureResult
[17:37:43.660] result() for ClusterFuture ... done
[17:37:43.660] result() for ClusterFuture ...
[17:37:43.660] - result already collected: FutureResult
[17:37:43.660] result() for ClusterFuture ... done
[17:37:43.660] result() for ClusterFuture ...
[17:37:43.660] - result already collected: FutureResult
[17:37:43.660] result() for ClusterFuture ... done
[17:37:43.660]  - Number of value chunks collected: 2
[17:37:43.660] Resolving 2 futures (chunks) ... DONE
[17:37:43.661] Reducing values from 2 chunks ...
[17:37:43.661]  - Number of values collected after concatenation: 5
[17:37:43.661]  - Number of values expected: 5
[17:37:43.661] Reducing values from 2 chunks ... DONE
[17:37:43.661] future_lapply() ... DONE
[17:37:43.661] future_lapply() ...
[17:37:43.662] Generating random seeds ...
[17:37:43.662] Generating random seed streams for 5 elements ...
[17:37:43.662] Generating random seed streams for 5 elements ... DONE
[17:37:43.662] Generating random seeds ... DONE
[17:37:43.662] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:43.666] Number of chunks: 2
[17:37:43.666] getGlobalsAndPackagesXApply() ...
[17:37:43.666]  - future.globals: TRUE
[17:37:43.666] getGlobalsAndPackages() ...
[17:37:43.667] Searching for globals...
[17:37:43.668] - globals found: [2] ‘FUN’, ‘sample’
[17:37:43.668] Searching for globals ... DONE
[17:37:43.668] Resolving globals: FALSE
[17:37:43.668] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:43.669] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:43.669] - globals: [1] ‘FUN’
[17:37:43.669] 
[17:37:43.669] getGlobalsAndPackages() ... DONE
[17:37:43.669]  - globals found/used: [n=1] ‘FUN’
[17:37:43.669]  - needed namespaces: [n=0] 
[17:37:43.669] Finding globals ... DONE
[17:37:43.669]  - use_args: TRUE
[17:37:43.669]  - Getting '...' globals ...
[17:37:43.670] resolve() on list ...
[17:37:43.670]  recursive: 0
[17:37:43.670]  length: 1
[17:37:43.670]  elements: ‘...’
[17:37:43.670]  length: 0 (resolved future 1)
[17:37:43.670] resolve() on list ... DONE
[17:37:43.670]    - '...' content: [n=0] 
[17:37:43.670] List of 1
[17:37:43.670]  $ ...: list()
[17:37:43.670]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.670]  - attr(*, "where")=List of 1
[17:37:43.670]   ..$ ...:<environment: 0x5640c1e62988> 
[17:37:43.670]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.670]  - attr(*, "resolved")= logi TRUE
[17:37:43.670]  - attr(*, "total_size")= num NA
[17:37:43.673]  - Getting '...' globals ... DONE
[17:37:43.673] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:43.673] List of 2
[17:37:43.673]  $ ...future.FUN:function (...)  
[17:37:43.673]  $ ...          : list()
[17:37:43.673]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.673]  - attr(*, "where")=List of 2
[17:37:43.673]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:43.673]   ..$ ...          :<environment: 0x5640c1e62988> 
[17:37:43.673]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.673]  - attr(*, "resolved")= logi FALSE
[17:37:43.673]  - attr(*, "total_size")= num 616
[17:37:43.676] Packages to be attached in all futures: [n=0] 
[17:37:43.676] getGlobalsAndPackagesXApply() ... DONE
[17:37:43.676] Number of futures (= number of chunks): 2
[17:37:43.676] Launching 2 futures (chunks) ...
[17:37:43.676] Chunk #1 of 2 ...
[17:37:43.676]  - Finding globals in 'X' for chunk #1 ...
[17:37:43.676] getGlobalsAndPackages() ...
[17:37:43.676] Searching for globals...
[17:37:43.677] 
[17:37:43.677] Searching for globals ... DONE
[17:37:43.677] - globals: [0] <none>
[17:37:43.677] getGlobalsAndPackages() ... DONE
[17:37:43.677]    + additional globals found: [n=0] 
[17:37:43.677]    + additional namespaces needed: [n=0] 
[17:37:43.677]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:43.677]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.677]  - seeds: [2] <seeds>
[17:37:43.678]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.678] getGlobalsAndPackages() ...
[17:37:43.678] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.678] Resolving globals: FALSE
[17:37:43.678] Tweak future expression to call with '...' arguments ...
[17:37:43.678] {
[17:37:43.678]     do.call(function(...) {
[17:37:43.678]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.678]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.678]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.678]             on.exit(options(oopts), add = TRUE)
[17:37:43.678]         }
[17:37:43.678]         {
[17:37:43.678]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.678]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.678]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.678]                   envir = globalenv(), inherits = FALSE)
[17:37:43.678]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.678]             })
[17:37:43.678]         }
[17:37:43.678]     }, args = future.call.arguments)
[17:37:43.678] }
[17:37:43.678] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.679] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.679] 
[17:37:43.679] getGlobalsAndPackages() ... DONE
[17:37:43.679] run() for ‘Future’ ...
[17:37:43.679] - state: ‘created’
[17:37:43.679] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.693] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.693] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.693]   - Field: ‘node’
[17:37:43.693]   - Field: ‘label’
[17:37:43.693]   - Field: ‘local’
[17:37:43.694]   - Field: ‘owner’
[17:37:43.694]   - Field: ‘envir’
[17:37:43.694]   - Field: ‘workers’
[17:37:43.694]   - Field: ‘packages’
[17:37:43.694]   - Field: ‘gc’
[17:37:43.694]   - Field: ‘conditions’
[17:37:43.694]   - Field: ‘persistent’
[17:37:43.694]   - Field: ‘expr’
[17:37:43.694]   - Field: ‘uuid’
[17:37:43.694]   - Field: ‘seed’
[17:37:43.694]   - Field: ‘version’
[17:37:43.694]   - Field: ‘result’
[17:37:43.695]   - Field: ‘asynchronous’
[17:37:43.695]   - Field: ‘calls’
[17:37:43.695]   - Field: ‘globals’
[17:37:43.695]   - Field: ‘stdout’
[17:37:43.695]   - Field: ‘earlySignal’
[17:37:43.695]   - Field: ‘lazy’
[17:37:43.695]   - Field: ‘state’
[17:37:43.695] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.695] - Launch lazy future ...
[17:37:43.696] Packages needed by the future expression (n = 0): <none>
[17:37:43.696] Packages needed by future strategies (n = 0): <none>
[17:37:43.696] {
[17:37:43.696]     {
[17:37:43.696]         {
[17:37:43.696]             ...future.startTime <- base::Sys.time()
[17:37:43.696]             {
[17:37:43.696]                 {
[17:37:43.696]                   {
[17:37:43.696]                     {
[17:37:43.696]                       base::local({
[17:37:43.696]                         has_future <- base::requireNamespace("future", 
[17:37:43.696]                           quietly = TRUE)
[17:37:43.696]                         if (has_future) {
[17:37:43.696]                           ns <- base::getNamespace("future")
[17:37:43.696]                           version <- ns[[".package"]][["version"]]
[17:37:43.696]                           if (is.null(version)) 
[17:37:43.696]                             version <- utils::packageVersion("future")
[17:37:43.696]                         }
[17:37:43.696]                         else {
[17:37:43.696]                           version <- NULL
[17:37:43.696]                         }
[17:37:43.696]                         if (!has_future || version < "1.8.0") {
[17:37:43.696]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.696]                             "", base::R.version$version.string), 
[17:37:43.696]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.696]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.696]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.696]                               "release", "version")], collapse = " "), 
[17:37:43.696]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.696]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.696]                             info)
[17:37:43.696]                           info <- base::paste(info, collapse = "; ")
[17:37:43.696]                           if (!has_future) {
[17:37:43.696]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.696]                               info)
[17:37:43.696]                           }
[17:37:43.696]                           else {
[17:37:43.696]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.696]                               info, version)
[17:37:43.696]                           }
[17:37:43.696]                           base::stop(msg)
[17:37:43.696]                         }
[17:37:43.696]                       })
[17:37:43.696]                     }
[17:37:43.696]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.696]                     base::options(mc.cores = 1L)
[17:37:43.696]                   }
[17:37:43.696]                   ...future.strategy.old <- future::plan("list")
[17:37:43.696]                   options(future.plan = NULL)
[17:37:43.696]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.696]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.696]                 }
[17:37:43.696]                 ...future.workdir <- getwd()
[17:37:43.696]             }
[17:37:43.696]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.696]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.696]         }
[17:37:43.696]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.696]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.696]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.696]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.696]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.696]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.696]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.696]             base::names(...future.oldOptions))
[17:37:43.696]     }
[17:37:43.696]     if (FALSE) {
[17:37:43.696]     }
[17:37:43.696]     else {
[17:37:43.696]         if (TRUE) {
[17:37:43.696]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.696]                 open = "w")
[17:37:43.696]         }
[17:37:43.696]         else {
[17:37:43.696]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.696]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.696]         }
[17:37:43.696]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.696]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.696]             base::sink(type = "output", split = FALSE)
[17:37:43.696]             base::close(...future.stdout)
[17:37:43.696]         }, add = TRUE)
[17:37:43.696]     }
[17:37:43.696]     ...future.frame <- base::sys.nframe()
[17:37:43.696]     ...future.conditions <- base::list()
[17:37:43.696]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.696]     if (FALSE) {
[17:37:43.696]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.696]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.696]     }
[17:37:43.696]     ...future.result <- base::tryCatch({
[17:37:43.696]         base::withCallingHandlers({
[17:37:43.696]             ...future.value <- base::withVisible(base::local({
[17:37:43.696]                 ...future.makeSendCondition <- base::local({
[17:37:43.696]                   sendCondition <- NULL
[17:37:43.696]                   function(frame = 1L) {
[17:37:43.696]                     if (is.function(sendCondition)) 
[17:37:43.696]                       return(sendCondition)
[17:37:43.696]                     ns <- getNamespace("parallel")
[17:37:43.696]                     if (exists("sendData", mode = "function", 
[17:37:43.696]                       envir = ns)) {
[17:37:43.696]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.696]                         envir = ns)
[17:37:43.696]                       envir <- sys.frame(frame)
[17:37:43.696]                       master <- NULL
[17:37:43.696]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.696]                         !identical(envir, emptyenv())) {
[17:37:43.696]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.696]                           inherits = FALSE)) {
[17:37:43.696]                           master <- get("master", mode = "list", 
[17:37:43.696]                             envir = envir, inherits = FALSE)
[17:37:43.696]                           if (inherits(master, c("SOCKnode", 
[17:37:43.696]                             "SOCK0node"))) {
[17:37:43.696]                             sendCondition <<- function(cond) {
[17:37:43.696]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.696]                                 success = TRUE)
[17:37:43.696]                               parallel_sendData(master, data)
[17:37:43.696]                             }
[17:37:43.696]                             return(sendCondition)
[17:37:43.696]                           }
[17:37:43.696]                         }
[17:37:43.696]                         frame <- frame + 1L
[17:37:43.696]                         envir <- sys.frame(frame)
[17:37:43.696]                       }
[17:37:43.696]                     }
[17:37:43.696]                     sendCondition <<- function(cond) NULL
[17:37:43.696]                   }
[17:37:43.696]                 })
[17:37:43.696]                 withCallingHandlers({
[17:37:43.696]                   {
[17:37:43.696]                     do.call(function(...) {
[17:37:43.696]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.696]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.696]                         ...future.globals.maxSize)) {
[17:37:43.696]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.696]                         on.exit(options(oopts), add = TRUE)
[17:37:43.696]                       }
[17:37:43.696]                       {
[17:37:43.696]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.696]                           FUN = function(jj) {
[17:37:43.696]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.696]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.696]                               envir = globalenv(), inherits = FALSE)
[17:37:43.696]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.696]                           })
[17:37:43.696]                       }
[17:37:43.696]                     }, args = future.call.arguments)
[17:37:43.696]                   }
[17:37:43.696]                 }, immediateCondition = function(cond) {
[17:37:43.696]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.696]                   sendCondition(cond)
[17:37:43.696]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.696]                   {
[17:37:43.696]                     inherits <- base::inherits
[17:37:43.696]                     invokeRestart <- base::invokeRestart
[17:37:43.696]                     is.null <- base::is.null
[17:37:43.696]                     muffled <- FALSE
[17:37:43.696]                     if (inherits(cond, "message")) {
[17:37:43.696]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.696]                       if (muffled) 
[17:37:43.696]                         invokeRestart("muffleMessage")
[17:37:43.696]                     }
[17:37:43.696]                     else if (inherits(cond, "warning")) {
[17:37:43.696]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.696]                       if (muffled) 
[17:37:43.696]                         invokeRestart("muffleWarning")
[17:37:43.696]                     }
[17:37:43.696]                     else if (inherits(cond, "condition")) {
[17:37:43.696]                       if (!is.null(pattern)) {
[17:37:43.696]                         computeRestarts <- base::computeRestarts
[17:37:43.696]                         grepl <- base::grepl
[17:37:43.696]                         restarts <- computeRestarts(cond)
[17:37:43.696]                         for (restart in restarts) {
[17:37:43.696]                           name <- restart$name
[17:37:43.696]                           if (is.null(name)) 
[17:37:43.696]                             next
[17:37:43.696]                           if (!grepl(pattern, name)) 
[17:37:43.696]                             next
[17:37:43.696]                           invokeRestart(restart)
[17:37:43.696]                           muffled <- TRUE
[17:37:43.696]                           break
[17:37:43.696]                         }
[17:37:43.696]                       }
[17:37:43.696]                     }
[17:37:43.696]                     invisible(muffled)
[17:37:43.696]                   }
[17:37:43.696]                   muffleCondition(cond)
[17:37:43.696]                 })
[17:37:43.696]             }))
[17:37:43.696]             future::FutureResult(value = ...future.value$value, 
[17:37:43.696]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.696]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.696]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.696]                     ...future.globalenv.names))
[17:37:43.696]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.696]         }, condition = base::local({
[17:37:43.696]             c <- base::c
[17:37:43.696]             inherits <- base::inherits
[17:37:43.696]             invokeRestart <- base::invokeRestart
[17:37:43.696]             length <- base::length
[17:37:43.696]             list <- base::list
[17:37:43.696]             seq.int <- base::seq.int
[17:37:43.696]             signalCondition <- base::signalCondition
[17:37:43.696]             sys.calls <- base::sys.calls
[17:37:43.696]             `[[` <- base::`[[`
[17:37:43.696]             `+` <- base::`+`
[17:37:43.696]             `<<-` <- base::`<<-`
[17:37:43.696]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.696]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.696]                   3L)]
[17:37:43.696]             }
[17:37:43.696]             function(cond) {
[17:37:43.696]                 is_error <- inherits(cond, "error")
[17:37:43.696]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.696]                   NULL)
[17:37:43.696]                 if (is_error) {
[17:37:43.696]                   sessionInformation <- function() {
[17:37:43.696]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.696]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.696]                       search = base::search(), system = base::Sys.info())
[17:37:43.696]                   }
[17:37:43.696]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.696]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.696]                     cond$call), session = sessionInformation(), 
[17:37:43.696]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.696]                   signalCondition(cond)
[17:37:43.696]                 }
[17:37:43.696]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.696]                 "immediateCondition"))) {
[17:37:43.696]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.696]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.696]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.696]                   if (TRUE && !signal) {
[17:37:43.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.696]                     {
[17:37:43.696]                       inherits <- base::inherits
[17:37:43.696]                       invokeRestart <- base::invokeRestart
[17:37:43.696]                       is.null <- base::is.null
[17:37:43.696]                       muffled <- FALSE
[17:37:43.696]                       if (inherits(cond, "message")) {
[17:37:43.696]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.696]                         if (muffled) 
[17:37:43.696]                           invokeRestart("muffleMessage")
[17:37:43.696]                       }
[17:37:43.696]                       else if (inherits(cond, "warning")) {
[17:37:43.696]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.696]                         if (muffled) 
[17:37:43.696]                           invokeRestart("muffleWarning")
[17:37:43.696]                       }
[17:37:43.696]                       else if (inherits(cond, "condition")) {
[17:37:43.696]                         if (!is.null(pattern)) {
[17:37:43.696]                           computeRestarts <- base::computeRestarts
[17:37:43.696]                           grepl <- base::grepl
[17:37:43.696]                           restarts <- computeRestarts(cond)
[17:37:43.696]                           for (restart in restarts) {
[17:37:43.696]                             name <- restart$name
[17:37:43.696]                             if (is.null(name)) 
[17:37:43.696]                               next
[17:37:43.696]                             if (!grepl(pattern, name)) 
[17:37:43.696]                               next
[17:37:43.696]                             invokeRestart(restart)
[17:37:43.696]                             muffled <- TRUE
[17:37:43.696]                             break
[17:37:43.696]                           }
[17:37:43.696]                         }
[17:37:43.696]                       }
[17:37:43.696]                       invisible(muffled)
[17:37:43.696]                     }
[17:37:43.696]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.696]                   }
[17:37:43.696]                 }
[17:37:43.696]                 else {
[17:37:43.696]                   if (TRUE) {
[17:37:43.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.696]                     {
[17:37:43.696]                       inherits <- base::inherits
[17:37:43.696]                       invokeRestart <- base::invokeRestart
[17:37:43.696]                       is.null <- base::is.null
[17:37:43.696]                       muffled <- FALSE
[17:37:43.696]                       if (inherits(cond, "message")) {
[17:37:43.696]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.696]                         if (muffled) 
[17:37:43.696]                           invokeRestart("muffleMessage")
[17:37:43.696]                       }
[17:37:43.696]                       else if (inherits(cond, "warning")) {
[17:37:43.696]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.696]                         if (muffled) 
[17:37:43.696]                           invokeRestart("muffleWarning")
[17:37:43.696]                       }
[17:37:43.696]                       else if (inherits(cond, "condition")) {
[17:37:43.696]                         if (!is.null(pattern)) {
[17:37:43.696]                           computeRestarts <- base::computeRestarts
[17:37:43.696]                           grepl <- base::grepl
[17:37:43.696]                           restarts <- computeRestarts(cond)
[17:37:43.696]                           for (restart in restarts) {
[17:37:43.696]                             name <- restart$name
[17:37:43.696]                             if (is.null(name)) 
[17:37:43.696]                               next
[17:37:43.696]                             if (!grepl(pattern, name)) 
[17:37:43.696]                               next
[17:37:43.696]                             invokeRestart(restart)
[17:37:43.696]                             muffled <- TRUE
[17:37:43.696]                             break
[17:37:43.696]                           }
[17:37:43.696]                         }
[17:37:43.696]                       }
[17:37:43.696]                       invisible(muffled)
[17:37:43.696]                     }
[17:37:43.696]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.696]                   }
[17:37:43.696]                 }
[17:37:43.696]             }
[17:37:43.696]         }))
[17:37:43.696]     }, error = function(ex) {
[17:37:43.696]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.696]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.696]                 ...future.rng), started = ...future.startTime, 
[17:37:43.696]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.696]             version = "1.8"), class = "FutureResult")
[17:37:43.696]     }, finally = {
[17:37:43.696]         if (!identical(...future.workdir, getwd())) 
[17:37:43.696]             setwd(...future.workdir)
[17:37:43.696]         {
[17:37:43.696]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.696]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.696]             }
[17:37:43.696]             base::options(...future.oldOptions)
[17:37:43.696]             if (.Platform$OS.type == "windows") {
[17:37:43.696]                 old_names <- names(...future.oldEnvVars)
[17:37:43.696]                 envs <- base::Sys.getenv()
[17:37:43.696]                 names <- names(envs)
[17:37:43.696]                 common <- intersect(names, old_names)
[17:37:43.696]                 added <- setdiff(names, old_names)
[17:37:43.696]                 removed <- setdiff(old_names, names)
[17:37:43.696]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.696]                   envs[common]]
[17:37:43.696]                 NAMES <- toupper(changed)
[17:37:43.696]                 args <- list()
[17:37:43.696]                 for (kk in seq_along(NAMES)) {
[17:37:43.696]                   name <- changed[[kk]]
[17:37:43.696]                   NAME <- NAMES[[kk]]
[17:37:43.696]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.696]                     next
[17:37:43.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.696]                 }
[17:37:43.696]                 NAMES <- toupper(added)
[17:37:43.696]                 for (kk in seq_along(NAMES)) {
[17:37:43.696]                   name <- added[[kk]]
[17:37:43.696]                   NAME <- NAMES[[kk]]
[17:37:43.696]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.696]                     next
[17:37:43.696]                   args[[name]] <- ""
[17:37:43.696]                 }
[17:37:43.696]                 NAMES <- toupper(removed)
[17:37:43.696]                 for (kk in seq_along(NAMES)) {
[17:37:43.696]                   name <- removed[[kk]]
[17:37:43.696]                   NAME <- NAMES[[kk]]
[17:37:43.696]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.696]                     next
[17:37:43.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.696]                 }
[17:37:43.696]                 if (length(args) > 0) 
[17:37:43.696]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.696]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.696]             }
[17:37:43.696]             else {
[17:37:43.696]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.696]             }
[17:37:43.696]             {
[17:37:43.696]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.696]                   0L) {
[17:37:43.696]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.696]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.696]                   base::options(opts)
[17:37:43.696]                 }
[17:37:43.696]                 {
[17:37:43.696]                   {
[17:37:43.696]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.696]                     NULL
[17:37:43.696]                   }
[17:37:43.696]                   options(future.plan = NULL)
[17:37:43.696]                   if (is.na(NA_character_)) 
[17:37:43.696]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.696]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.696]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.696]                     .init = FALSE)
[17:37:43.696]                 }
[17:37:43.696]             }
[17:37:43.696]         }
[17:37:43.696]     })
[17:37:43.696]     if (TRUE) {
[17:37:43.696]         base::sink(type = "output", split = FALSE)
[17:37:43.696]         if (TRUE) {
[17:37:43.696]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.696]         }
[17:37:43.696]         else {
[17:37:43.696]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.696]         }
[17:37:43.696]         base::close(...future.stdout)
[17:37:43.696]         ...future.stdout <- NULL
[17:37:43.696]     }
[17:37:43.696]     ...future.result$conditions <- ...future.conditions
[17:37:43.696]     ...future.result$finished <- base::Sys.time()
[17:37:43.696]     ...future.result
[17:37:43.696] }
[17:37:43.699] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:37:43.699] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:37:43.699] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:37:43.700] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:37:43.700] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.700] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:37:43.700] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:37:43.701] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:37:43.701] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:37:43.701] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:37:43.701] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.701] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:37:43.702] MultisessionFuture started
[17:37:43.702] - Launch lazy future ... done
[17:37:43.702] run() for ‘MultisessionFuture’ ... done
[17:37:43.702] Created future:
[17:37:43.702] MultisessionFuture:
[17:37:43.702] Label: ‘future_replicate-1’
[17:37:43.702] Expression:
[17:37:43.702] {
[17:37:43.702]     do.call(function(...) {
[17:37:43.702]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.702]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.702]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.702]             on.exit(options(oopts), add = TRUE)
[17:37:43.702]         }
[17:37:43.702]         {
[17:37:43.702]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.702]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.702]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.702]                   envir = globalenv(), inherits = FALSE)
[17:37:43.702]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.702]             })
[17:37:43.702]         }
[17:37:43.702]     }, args = future.call.arguments)
[17:37:43.702] }
[17:37:43.702] Lazy evaluation: FALSE
[17:37:43.702] Asynchronous evaluation: TRUE
[17:37:43.702] Local evaluation: TRUE
[17:37:43.702] Environment: R_GlobalEnv
[17:37:43.702] Capture standard output: TRUE
[17:37:43.702] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.702] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.702] Packages: <none>
[17:37:43.702] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.702] Resolved: FALSE
[17:37:43.702] Value: <not collected>
[17:37:43.702] Conditions captured: <none>
[17:37:43.702] Early signaling: FALSE
[17:37:43.702] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.702] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.714] Chunk #1 of 2 ... DONE
[17:37:43.714] Chunk #2 of 2 ...
[17:37:43.714]  - Finding globals in 'X' for chunk #2 ...
[17:37:43.714] getGlobalsAndPackages() ...
[17:37:43.714] Searching for globals...
[17:37:43.715] 
[17:37:43.715] Searching for globals ... DONE
[17:37:43.715] - globals: [0] <none>
[17:37:43.715] getGlobalsAndPackages() ... DONE
[17:37:43.715]    + additional globals found: [n=0] 
[17:37:43.715]    + additional namespaces needed: [n=0] 
[17:37:43.715]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:43.715]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.715]  - seeds: [3] <seeds>
[17:37:43.715]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.716] getGlobalsAndPackages() ...
[17:37:43.716] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.716] Resolving globals: FALSE
[17:37:43.716] Tweak future expression to call with '...' arguments ...
[17:37:43.716] {
[17:37:43.716]     do.call(function(...) {
[17:37:43.716]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.716]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.716]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.716]             on.exit(options(oopts), add = TRUE)
[17:37:43.716]         }
[17:37:43.716]         {
[17:37:43.716]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.716]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.716]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.716]                   envir = globalenv(), inherits = FALSE)
[17:37:43.716]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.716]             })
[17:37:43.716]         }
[17:37:43.716]     }, args = future.call.arguments)
[17:37:43.716] }
[17:37:43.716] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.717] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.717] 
[17:37:43.717] getGlobalsAndPackages() ... DONE
[17:37:43.717] run() for ‘Future’ ...
[17:37:43.717] - state: ‘created’
[17:37:43.717] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.733] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.733] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.734]   - Field: ‘node’
[17:37:43.734]   - Field: ‘label’
[17:37:43.734]   - Field: ‘local’
[17:37:43.734]   - Field: ‘owner’
[17:37:43.734]   - Field: ‘envir’
[17:37:43.734]   - Field: ‘workers’
[17:37:43.734]   - Field: ‘packages’
[17:37:43.734]   - Field: ‘gc’
[17:37:43.734]   - Field: ‘conditions’
[17:37:43.734]   - Field: ‘persistent’
[17:37:43.734]   - Field: ‘expr’
[17:37:43.735]   - Field: ‘uuid’
[17:37:43.735]   - Field: ‘seed’
[17:37:43.735]   - Field: ‘version’
[17:37:43.735]   - Field: ‘result’
[17:37:43.735]   - Field: ‘asynchronous’
[17:37:43.735]   - Field: ‘calls’
[17:37:43.735]   - Field: ‘globals’
[17:37:43.735]   - Field: ‘stdout’
[17:37:43.735]   - Field: ‘earlySignal’
[17:37:43.735]   - Field: ‘lazy’
[17:37:43.735]   - Field: ‘state’
[17:37:43.735] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.736] - Launch lazy future ...
[17:37:43.736] Packages needed by the future expression (n = 0): <none>
[17:37:43.736] Packages needed by future strategies (n = 0): <none>
[17:37:43.736] {
[17:37:43.736]     {
[17:37:43.736]         {
[17:37:43.736]             ...future.startTime <- base::Sys.time()
[17:37:43.736]             {
[17:37:43.736]                 {
[17:37:43.736]                   {
[17:37:43.736]                     {
[17:37:43.736]                       base::local({
[17:37:43.736]                         has_future <- base::requireNamespace("future", 
[17:37:43.736]                           quietly = TRUE)
[17:37:43.736]                         if (has_future) {
[17:37:43.736]                           ns <- base::getNamespace("future")
[17:37:43.736]                           version <- ns[[".package"]][["version"]]
[17:37:43.736]                           if (is.null(version)) 
[17:37:43.736]                             version <- utils::packageVersion("future")
[17:37:43.736]                         }
[17:37:43.736]                         else {
[17:37:43.736]                           version <- NULL
[17:37:43.736]                         }
[17:37:43.736]                         if (!has_future || version < "1.8.0") {
[17:37:43.736]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.736]                             "", base::R.version$version.string), 
[17:37:43.736]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.736]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.736]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.736]                               "release", "version")], collapse = " "), 
[17:37:43.736]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.736]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.736]                             info)
[17:37:43.736]                           info <- base::paste(info, collapse = "; ")
[17:37:43.736]                           if (!has_future) {
[17:37:43.736]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.736]                               info)
[17:37:43.736]                           }
[17:37:43.736]                           else {
[17:37:43.736]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.736]                               info, version)
[17:37:43.736]                           }
[17:37:43.736]                           base::stop(msg)
[17:37:43.736]                         }
[17:37:43.736]                       })
[17:37:43.736]                     }
[17:37:43.736]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.736]                     base::options(mc.cores = 1L)
[17:37:43.736]                   }
[17:37:43.736]                   ...future.strategy.old <- future::plan("list")
[17:37:43.736]                   options(future.plan = NULL)
[17:37:43.736]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.736]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.736]                 }
[17:37:43.736]                 ...future.workdir <- getwd()
[17:37:43.736]             }
[17:37:43.736]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.736]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.736]         }
[17:37:43.736]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.736]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.736]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.736]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.736]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.736]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.736]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.736]             base::names(...future.oldOptions))
[17:37:43.736]     }
[17:37:43.736]     if (FALSE) {
[17:37:43.736]     }
[17:37:43.736]     else {
[17:37:43.736]         if (TRUE) {
[17:37:43.736]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.736]                 open = "w")
[17:37:43.736]         }
[17:37:43.736]         else {
[17:37:43.736]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.736]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.736]         }
[17:37:43.736]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.736]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.736]             base::sink(type = "output", split = FALSE)
[17:37:43.736]             base::close(...future.stdout)
[17:37:43.736]         }, add = TRUE)
[17:37:43.736]     }
[17:37:43.736]     ...future.frame <- base::sys.nframe()
[17:37:43.736]     ...future.conditions <- base::list()
[17:37:43.736]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.736]     if (FALSE) {
[17:37:43.736]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.736]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.736]     }
[17:37:43.736]     ...future.result <- base::tryCatch({
[17:37:43.736]         base::withCallingHandlers({
[17:37:43.736]             ...future.value <- base::withVisible(base::local({
[17:37:43.736]                 ...future.makeSendCondition <- base::local({
[17:37:43.736]                   sendCondition <- NULL
[17:37:43.736]                   function(frame = 1L) {
[17:37:43.736]                     if (is.function(sendCondition)) 
[17:37:43.736]                       return(sendCondition)
[17:37:43.736]                     ns <- getNamespace("parallel")
[17:37:43.736]                     if (exists("sendData", mode = "function", 
[17:37:43.736]                       envir = ns)) {
[17:37:43.736]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.736]                         envir = ns)
[17:37:43.736]                       envir <- sys.frame(frame)
[17:37:43.736]                       master <- NULL
[17:37:43.736]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.736]                         !identical(envir, emptyenv())) {
[17:37:43.736]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.736]                           inherits = FALSE)) {
[17:37:43.736]                           master <- get("master", mode = "list", 
[17:37:43.736]                             envir = envir, inherits = FALSE)
[17:37:43.736]                           if (inherits(master, c("SOCKnode", 
[17:37:43.736]                             "SOCK0node"))) {
[17:37:43.736]                             sendCondition <<- function(cond) {
[17:37:43.736]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.736]                                 success = TRUE)
[17:37:43.736]                               parallel_sendData(master, data)
[17:37:43.736]                             }
[17:37:43.736]                             return(sendCondition)
[17:37:43.736]                           }
[17:37:43.736]                         }
[17:37:43.736]                         frame <- frame + 1L
[17:37:43.736]                         envir <- sys.frame(frame)
[17:37:43.736]                       }
[17:37:43.736]                     }
[17:37:43.736]                     sendCondition <<- function(cond) NULL
[17:37:43.736]                   }
[17:37:43.736]                 })
[17:37:43.736]                 withCallingHandlers({
[17:37:43.736]                   {
[17:37:43.736]                     do.call(function(...) {
[17:37:43.736]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.736]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.736]                         ...future.globals.maxSize)) {
[17:37:43.736]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.736]                         on.exit(options(oopts), add = TRUE)
[17:37:43.736]                       }
[17:37:43.736]                       {
[17:37:43.736]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.736]                           FUN = function(jj) {
[17:37:43.736]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.736]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.736]                               envir = globalenv(), inherits = FALSE)
[17:37:43.736]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.736]                           })
[17:37:43.736]                       }
[17:37:43.736]                     }, args = future.call.arguments)
[17:37:43.736]                   }
[17:37:43.736]                 }, immediateCondition = function(cond) {
[17:37:43.736]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.736]                   sendCondition(cond)
[17:37:43.736]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.736]                   {
[17:37:43.736]                     inherits <- base::inherits
[17:37:43.736]                     invokeRestart <- base::invokeRestart
[17:37:43.736]                     is.null <- base::is.null
[17:37:43.736]                     muffled <- FALSE
[17:37:43.736]                     if (inherits(cond, "message")) {
[17:37:43.736]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.736]                       if (muffled) 
[17:37:43.736]                         invokeRestart("muffleMessage")
[17:37:43.736]                     }
[17:37:43.736]                     else if (inherits(cond, "warning")) {
[17:37:43.736]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.736]                       if (muffled) 
[17:37:43.736]                         invokeRestart("muffleWarning")
[17:37:43.736]                     }
[17:37:43.736]                     else if (inherits(cond, "condition")) {
[17:37:43.736]                       if (!is.null(pattern)) {
[17:37:43.736]                         computeRestarts <- base::computeRestarts
[17:37:43.736]                         grepl <- base::grepl
[17:37:43.736]                         restarts <- computeRestarts(cond)
[17:37:43.736]                         for (restart in restarts) {
[17:37:43.736]                           name <- restart$name
[17:37:43.736]                           if (is.null(name)) 
[17:37:43.736]                             next
[17:37:43.736]                           if (!grepl(pattern, name)) 
[17:37:43.736]                             next
[17:37:43.736]                           invokeRestart(restart)
[17:37:43.736]                           muffled <- TRUE
[17:37:43.736]                           break
[17:37:43.736]                         }
[17:37:43.736]                       }
[17:37:43.736]                     }
[17:37:43.736]                     invisible(muffled)
[17:37:43.736]                   }
[17:37:43.736]                   muffleCondition(cond)
[17:37:43.736]                 })
[17:37:43.736]             }))
[17:37:43.736]             future::FutureResult(value = ...future.value$value, 
[17:37:43.736]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.736]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.736]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.736]                     ...future.globalenv.names))
[17:37:43.736]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.736]         }, condition = base::local({
[17:37:43.736]             c <- base::c
[17:37:43.736]             inherits <- base::inherits
[17:37:43.736]             invokeRestart <- base::invokeRestart
[17:37:43.736]             length <- base::length
[17:37:43.736]             list <- base::list
[17:37:43.736]             seq.int <- base::seq.int
[17:37:43.736]             signalCondition <- base::signalCondition
[17:37:43.736]             sys.calls <- base::sys.calls
[17:37:43.736]             `[[` <- base::`[[`
[17:37:43.736]             `+` <- base::`+`
[17:37:43.736]             `<<-` <- base::`<<-`
[17:37:43.736]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.736]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.736]                   3L)]
[17:37:43.736]             }
[17:37:43.736]             function(cond) {
[17:37:43.736]                 is_error <- inherits(cond, "error")
[17:37:43.736]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.736]                   NULL)
[17:37:43.736]                 if (is_error) {
[17:37:43.736]                   sessionInformation <- function() {
[17:37:43.736]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.736]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.736]                       search = base::search(), system = base::Sys.info())
[17:37:43.736]                   }
[17:37:43.736]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.736]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.736]                     cond$call), session = sessionInformation(), 
[17:37:43.736]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.736]                   signalCondition(cond)
[17:37:43.736]                 }
[17:37:43.736]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.736]                 "immediateCondition"))) {
[17:37:43.736]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.736]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.736]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.736]                   if (TRUE && !signal) {
[17:37:43.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.736]                     {
[17:37:43.736]                       inherits <- base::inherits
[17:37:43.736]                       invokeRestart <- base::invokeRestart
[17:37:43.736]                       is.null <- base::is.null
[17:37:43.736]                       muffled <- FALSE
[17:37:43.736]                       if (inherits(cond, "message")) {
[17:37:43.736]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.736]                         if (muffled) 
[17:37:43.736]                           invokeRestart("muffleMessage")
[17:37:43.736]                       }
[17:37:43.736]                       else if (inherits(cond, "warning")) {
[17:37:43.736]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.736]                         if (muffled) 
[17:37:43.736]                           invokeRestart("muffleWarning")
[17:37:43.736]                       }
[17:37:43.736]                       else if (inherits(cond, "condition")) {
[17:37:43.736]                         if (!is.null(pattern)) {
[17:37:43.736]                           computeRestarts <- base::computeRestarts
[17:37:43.736]                           grepl <- base::grepl
[17:37:43.736]                           restarts <- computeRestarts(cond)
[17:37:43.736]                           for (restart in restarts) {
[17:37:43.736]                             name <- restart$name
[17:37:43.736]                             if (is.null(name)) 
[17:37:43.736]                               next
[17:37:43.736]                             if (!grepl(pattern, name)) 
[17:37:43.736]                               next
[17:37:43.736]                             invokeRestart(restart)
[17:37:43.736]                             muffled <- TRUE
[17:37:43.736]                             break
[17:37:43.736]                           }
[17:37:43.736]                         }
[17:37:43.736]                       }
[17:37:43.736]                       invisible(muffled)
[17:37:43.736]                     }
[17:37:43.736]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.736]                   }
[17:37:43.736]                 }
[17:37:43.736]                 else {
[17:37:43.736]                   if (TRUE) {
[17:37:43.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.736]                     {
[17:37:43.736]                       inherits <- base::inherits
[17:37:43.736]                       invokeRestart <- base::invokeRestart
[17:37:43.736]                       is.null <- base::is.null
[17:37:43.736]                       muffled <- FALSE
[17:37:43.736]                       if (inherits(cond, "message")) {
[17:37:43.736]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.736]                         if (muffled) 
[17:37:43.736]                           invokeRestart("muffleMessage")
[17:37:43.736]                       }
[17:37:43.736]                       else if (inherits(cond, "warning")) {
[17:37:43.736]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.736]                         if (muffled) 
[17:37:43.736]                           invokeRestart("muffleWarning")
[17:37:43.736]                       }
[17:37:43.736]                       else if (inherits(cond, "condition")) {
[17:37:43.736]                         if (!is.null(pattern)) {
[17:37:43.736]                           computeRestarts <- base::computeRestarts
[17:37:43.736]                           grepl <- base::grepl
[17:37:43.736]                           restarts <- computeRestarts(cond)
[17:37:43.736]                           for (restart in restarts) {
[17:37:43.736]                             name <- restart$name
[17:37:43.736]                             if (is.null(name)) 
[17:37:43.736]                               next
[17:37:43.736]                             if (!grepl(pattern, name)) 
[17:37:43.736]                               next
[17:37:43.736]                             invokeRestart(restart)
[17:37:43.736]                             muffled <- TRUE
[17:37:43.736]                             break
[17:37:43.736]                           }
[17:37:43.736]                         }
[17:37:43.736]                       }
[17:37:43.736]                       invisible(muffled)
[17:37:43.736]                     }
[17:37:43.736]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.736]                   }
[17:37:43.736]                 }
[17:37:43.736]             }
[17:37:43.736]         }))
[17:37:43.736]     }, error = function(ex) {
[17:37:43.736]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.736]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.736]                 ...future.rng), started = ...future.startTime, 
[17:37:43.736]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.736]             version = "1.8"), class = "FutureResult")
[17:37:43.736]     }, finally = {
[17:37:43.736]         if (!identical(...future.workdir, getwd())) 
[17:37:43.736]             setwd(...future.workdir)
[17:37:43.736]         {
[17:37:43.736]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.736]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.736]             }
[17:37:43.736]             base::options(...future.oldOptions)
[17:37:43.736]             if (.Platform$OS.type == "windows") {
[17:37:43.736]                 old_names <- names(...future.oldEnvVars)
[17:37:43.736]                 envs <- base::Sys.getenv()
[17:37:43.736]                 names <- names(envs)
[17:37:43.736]                 common <- intersect(names, old_names)
[17:37:43.736]                 added <- setdiff(names, old_names)
[17:37:43.736]                 removed <- setdiff(old_names, names)
[17:37:43.736]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.736]                   envs[common]]
[17:37:43.736]                 NAMES <- toupper(changed)
[17:37:43.736]                 args <- list()
[17:37:43.736]                 for (kk in seq_along(NAMES)) {
[17:37:43.736]                   name <- changed[[kk]]
[17:37:43.736]                   NAME <- NAMES[[kk]]
[17:37:43.736]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.736]                     next
[17:37:43.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.736]                 }
[17:37:43.736]                 NAMES <- toupper(added)
[17:37:43.736]                 for (kk in seq_along(NAMES)) {
[17:37:43.736]                   name <- added[[kk]]
[17:37:43.736]                   NAME <- NAMES[[kk]]
[17:37:43.736]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.736]                     next
[17:37:43.736]                   args[[name]] <- ""
[17:37:43.736]                 }
[17:37:43.736]                 NAMES <- toupper(removed)
[17:37:43.736]                 for (kk in seq_along(NAMES)) {
[17:37:43.736]                   name <- removed[[kk]]
[17:37:43.736]                   NAME <- NAMES[[kk]]
[17:37:43.736]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.736]                     next
[17:37:43.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.736]                 }
[17:37:43.736]                 if (length(args) > 0) 
[17:37:43.736]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.736]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.736]             }
[17:37:43.736]             else {
[17:37:43.736]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.736]             }
[17:37:43.736]             {
[17:37:43.736]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.736]                   0L) {
[17:37:43.736]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.736]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.736]                   base::options(opts)
[17:37:43.736]                 }
[17:37:43.736]                 {
[17:37:43.736]                   {
[17:37:43.736]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.736]                     NULL
[17:37:43.736]                   }
[17:37:43.736]                   options(future.plan = NULL)
[17:37:43.736]                   if (is.na(NA_character_)) 
[17:37:43.736]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.736]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.736]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.736]                     .init = FALSE)
[17:37:43.736]                 }
[17:37:43.736]             }
[17:37:43.736]         }
[17:37:43.736]     })
[17:37:43.736]     if (TRUE) {
[17:37:43.736]         base::sink(type = "output", split = FALSE)
[17:37:43.736]         if (TRUE) {
[17:37:43.736]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.736]         }
[17:37:43.736]         else {
[17:37:43.736]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.736]         }
[17:37:43.736]         base::close(...future.stdout)
[17:37:43.736]         ...future.stdout <- NULL
[17:37:43.736]     }
[17:37:43.736]     ...future.result$conditions <- ...future.conditions
[17:37:43.736]     ...future.result$finished <- base::Sys.time()
[17:37:43.736]     ...future.result
[17:37:43.736] }
[17:37:43.739] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:37:43.739] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:37:43.740] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:37:43.740] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:37:43.740] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.741] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:37:43.741] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:37:43.741] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:37:43.742] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:37:43.742] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:37:43.742] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.742] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:37:43.743] MultisessionFuture started
[17:37:43.743] - Launch lazy future ... done
[17:37:43.743] run() for ‘MultisessionFuture’ ... done
[17:37:43.743] Created future:
[17:37:43.743] MultisessionFuture:
[17:37:43.743] Label: ‘future_replicate-2’
[17:37:43.743] Expression:
[17:37:43.743] {
[17:37:43.743]     do.call(function(...) {
[17:37:43.743]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.743]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.743]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.743]             on.exit(options(oopts), add = TRUE)
[17:37:43.743]         }
[17:37:43.743]         {
[17:37:43.743]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.743]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.743]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.743]                   envir = globalenv(), inherits = FALSE)
[17:37:43.743]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.743]             })
[17:37:43.743]         }
[17:37:43.743]     }, args = future.call.arguments)
[17:37:43.743] }
[17:37:43.743] Lazy evaluation: FALSE
[17:37:43.743] Asynchronous evaluation: TRUE
[17:37:43.743] Local evaluation: TRUE
[17:37:43.743] Environment: R_GlobalEnv
[17:37:43.743] Capture standard output: TRUE
[17:37:43.743] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.743] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.743] Packages: <none>
[17:37:43.743] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.743] Resolved: FALSE
[17:37:43.743] Value: <not collected>
[17:37:43.743] Conditions captured: <none>
[17:37:43.743] Early signaling: FALSE
[17:37:43.743] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.743] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.755] Chunk #2 of 2 ... DONE
[17:37:43.755] Launching 2 futures (chunks) ... DONE
[17:37:43.755] Resolving 2 futures (chunks) ...
[17:37:43.755] resolve() on list ...
[17:37:43.755]  recursive: 0
[17:37:43.755]  length: 2
[17:37:43.756] 
[17:37:43.756] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.756] - Validating connection of MultisessionFuture
[17:37:43.756] - received message: FutureResult
[17:37:43.757] - Received FutureResult
[17:37:43.757] - Erased future from FutureRegistry
[17:37:43.757] result() for ClusterFuture ...
[17:37:43.757] - result already collected: FutureResult
[17:37:43.757] result() for ClusterFuture ... done
[17:37:43.757] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.757] Future #1
[17:37:43.757] result() for ClusterFuture ...
[17:37:43.757] - result already collected: FutureResult
[17:37:43.757] result() for ClusterFuture ... done
[17:37:43.757] result() for ClusterFuture ...
[17:37:43.757] - result already collected: FutureResult
[17:37:43.758] result() for ClusterFuture ... done
[17:37:43.758] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:37:43.758] - nx: 2
[17:37:43.758] - relay: TRUE
[17:37:43.758] - stdout: TRUE
[17:37:43.758] - signal: TRUE
[17:37:43.758] - resignal: FALSE
[17:37:43.758] - force: TRUE
[17:37:43.758] - relayed: [n=2] FALSE, FALSE
[17:37:43.758] - queued futures: [n=2] FALSE, FALSE
[17:37:43.758]  - until=1
[17:37:43.758]  - relaying element #1
[17:37:43.759] result() for ClusterFuture ...
[17:37:43.759] - result already collected: FutureResult
[17:37:43.759] result() for ClusterFuture ... done
[17:37:43.759] result() for ClusterFuture ...
[17:37:43.759] - result already collected: FutureResult
[17:37:43.759] result() for ClusterFuture ... done
[17:37:43.759] result() for ClusterFuture ...
[17:37:43.759] - result already collected: FutureResult
[17:37:43.759] result() for ClusterFuture ... done
[17:37:43.759] result() for ClusterFuture ...
[17:37:43.759] - result already collected: FutureResult
[17:37:43.760] result() for ClusterFuture ... done
[17:37:43.760] - relayed: [n=2] TRUE, FALSE
[17:37:43.760] - queued futures: [n=2] TRUE, FALSE
[17:37:43.760] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:37:43.760]  length: 1 (resolved future 1)
[17:37:43.786] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.786] - Validating connection of MultisessionFuture
[17:37:43.786] - received message: FutureResult
[17:37:43.786] - Received FutureResult
[17:37:43.787] - Erased future from FutureRegistry
[17:37:43.787] result() for ClusterFuture ...
[17:37:43.787] - result already collected: FutureResult
[17:37:43.787] result() for ClusterFuture ... done
[17:37:43.787] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.787] Future #2
[17:37:43.787] result() for ClusterFuture ...
[17:37:43.787] - result already collected: FutureResult
[17:37:43.787] result() for ClusterFuture ... done
[17:37:43.787] result() for ClusterFuture ...
[17:37:43.787] - result already collected: FutureResult
[17:37:43.788] result() for ClusterFuture ... done
[17:37:43.788] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:37:43.788] - nx: 2
[17:37:43.788] - relay: TRUE
[17:37:43.788] - stdout: TRUE
[17:37:43.788] - signal: TRUE
[17:37:43.788] - resignal: FALSE
[17:37:43.788] - force: TRUE
[17:37:43.788] - relayed: [n=2] TRUE, FALSE
[17:37:43.788] - queued futures: [n=2] TRUE, FALSE
[17:37:43.788]  - until=2
[17:37:43.789]  - relaying element #2
[17:37:43.789] result() for ClusterFuture ...
[17:37:43.789] - result already collected: FutureResult
[17:37:43.789] result() for ClusterFuture ... done
[17:37:43.789] result() for ClusterFuture ...
[17:37:43.789] - result already collected: FutureResult
[17:37:43.789] result() for ClusterFuture ... done
[17:37:43.789] result() for ClusterFuture ...
[17:37:43.789] - result already collected: FutureResult
[17:37:43.789] result() for ClusterFuture ... done
[17:37:43.789] result() for ClusterFuture ...
[17:37:43.789] - result already collected: FutureResult
[17:37:43.790] result() for ClusterFuture ... done
[17:37:43.790] - relayed: [n=2] TRUE, TRUE
[17:37:43.790] - queued futures: [n=2] TRUE, TRUE
[17:37:43.790] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:37:43.790]  length: 0 (resolved future 2)
[17:37:43.790] Relaying remaining futures
[17:37:43.790] signalConditionsASAP(NULL, pos=0) ...
[17:37:43.790] - nx: 2
[17:37:43.790] - relay: TRUE
[17:37:43.790] - stdout: TRUE
[17:37:43.790] - signal: TRUE
[17:37:43.790] - resignal: FALSE
[17:37:43.791] - force: TRUE
[17:37:43.791] - relayed: [n=2] TRUE, TRUE
[17:37:43.791] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:43.791] - relayed: [n=2] TRUE, TRUE
[17:37:43.791] - queued futures: [n=2] TRUE, TRUE
[17:37:43.791] signalConditionsASAP(NULL, pos=0) ... done
[17:37:43.791] resolve() on list ... DONE
[17:37:43.791] result() for ClusterFuture ...
[17:37:43.791] - result already collected: FutureResult
[17:37:43.791] result() for ClusterFuture ... done
[17:37:43.791] result() for ClusterFuture ...
[17:37:43.792] - result already collected: FutureResult
[17:37:43.792] result() for ClusterFuture ... done
[17:37:43.792] result() for ClusterFuture ...
[17:37:43.792] - result already collected: FutureResult
[17:37:43.792] result() for ClusterFuture ... done
[17:37:43.792] result() for ClusterFuture ...
[17:37:43.792] - result already collected: FutureResult
[17:37:43.792] result() for ClusterFuture ... done
[17:37:43.792]  - Number of value chunks collected: 2
[17:37:43.792] Resolving 2 futures (chunks) ... DONE
[17:37:43.792] Reducing values from 2 chunks ...
[17:37:43.793]  - Number of values collected after concatenation: 5
[17:37:43.793]  - Number of values expected: 5
[17:37:43.793] Reducing values from 2 chunks ... DONE
[17:37:43.793] future_lapply() ... DONE
[17:37:43.793] future_lapply() ...
[17:37:43.793] Generating random seeds ...
[17:37:43.794] Generating random seed streams for 5 elements ...
[17:37:43.794] Generating random seed streams for 5 elements ... DONE
[17:37:43.794] Generating random seeds ... DONE
[17:37:43.794] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:43.798] Number of chunks: 2
[17:37:43.798] getGlobalsAndPackagesXApply() ...
[17:37:43.798]  - future.globals: TRUE
[17:37:43.798] getGlobalsAndPackages() ...
[17:37:43.799] Searching for globals...
[17:37:43.800] - globals found: [2] ‘FUN’, ‘sample’
[17:37:43.800] Searching for globals ... DONE
[17:37:43.800] Resolving globals: FALSE
[17:37:43.800] The total size of the 1 globals is 616 bytes (616 bytes)
[17:37:43.801] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[17:37:43.801] - globals: [1] ‘FUN’
[17:37:43.801] 
[17:37:43.801] getGlobalsAndPackages() ... DONE
[17:37:43.801]  - globals found/used: [n=1] ‘FUN’
[17:37:43.801]  - needed namespaces: [n=0] 
[17:37:43.801] Finding globals ... DONE
[17:37:43.801]  - use_args: TRUE
[17:37:43.801]  - Getting '...' globals ...
[17:37:43.802] resolve() on list ...
[17:37:43.802]  recursive: 0
[17:37:43.802]  length: 1
[17:37:43.802]  elements: ‘...’
[17:37:43.802]  length: 0 (resolved future 1)
[17:37:43.802] resolve() on list ... DONE
[17:37:43.802]    - '...' content: [n=0] 
[17:37:43.802] List of 1
[17:37:43.802]  $ ...: list()
[17:37:43.802]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.802]  - attr(*, "where")=List of 1
[17:37:43.802]   ..$ ...:<environment: 0x5640bf2e88e8> 
[17:37:43.802]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.802]  - attr(*, "resolved")= logi TRUE
[17:37:43.802]  - attr(*, "total_size")= num NA
[17:37:43.805]  - Getting '...' globals ... DONE
[17:37:43.805] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[17:37:43.805] List of 2
[17:37:43.805]  $ ...future.FUN:function (...)  
[17:37:43.805]  $ ...          : list()
[17:37:43.805]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.805]  - attr(*, "where")=List of 2
[17:37:43.805]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:43.805]   ..$ ...          :<environment: 0x5640bf2e88e8> 
[17:37:43.805]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.805]  - attr(*, "resolved")= logi FALSE
[17:37:43.805]  - attr(*, "total_size")= num 616
[17:37:43.808] Packages to be attached in all futures: [n=0] 
[17:37:43.808] getGlobalsAndPackagesXApply() ... DONE
[17:37:43.808] Number of futures (= number of chunks): 2
[17:37:43.808] Launching 2 futures (chunks) ...
[17:37:43.808] Chunk #1 of 2 ...
[17:37:43.808]  - Finding globals in 'X' for chunk #1 ...
[17:37:43.808] getGlobalsAndPackages() ...
[17:37:43.808] Searching for globals...
[17:37:43.809] 
[17:37:43.809] Searching for globals ... DONE
[17:37:43.809] - globals: [0] <none>
[17:37:43.809] getGlobalsAndPackages() ... DONE
[17:37:43.809]    + additional globals found: [n=0] 
[17:37:43.809]    + additional namespaces needed: [n=0] 
[17:37:43.809]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:43.809]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.809]  - seeds: [2] <seeds>
[17:37:43.809]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.810] getGlobalsAndPackages() ...
[17:37:43.810] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.810] Resolving globals: FALSE
[17:37:43.810] Tweak future expression to call with '...' arguments ...
[17:37:43.810] {
[17:37:43.810]     do.call(function(...) {
[17:37:43.810]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.810]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.810]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.810]             on.exit(options(oopts), add = TRUE)
[17:37:43.810]         }
[17:37:43.810]         {
[17:37:43.810]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.810]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.810]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.810]                   envir = globalenv(), inherits = FALSE)
[17:37:43.810]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.810]             })
[17:37:43.810]         }
[17:37:43.810]     }, args = future.call.arguments)
[17:37:43.810] }
[17:37:43.810] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.811] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.811] 
[17:37:43.811] getGlobalsAndPackages() ... DONE
[17:37:43.811] run() for ‘Future’ ...
[17:37:43.811] - state: ‘created’
[17:37:43.811] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.825] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.825] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.825]   - Field: ‘node’
[17:37:43.825]   - Field: ‘label’
[17:37:43.825]   - Field: ‘local’
[17:37:43.826]   - Field: ‘owner’
[17:37:43.826]   - Field: ‘envir’
[17:37:43.826]   - Field: ‘workers’
[17:37:43.826]   - Field: ‘packages’
[17:37:43.826]   - Field: ‘gc’
[17:37:43.826]   - Field: ‘conditions’
[17:37:43.826]   - Field: ‘persistent’
[17:37:43.826]   - Field: ‘expr’
[17:37:43.826]   - Field: ‘uuid’
[17:37:43.826]   - Field: ‘seed’
[17:37:43.826]   - Field: ‘version’
[17:37:43.826]   - Field: ‘result’
[17:37:43.827]   - Field: ‘asynchronous’
[17:37:43.827]   - Field: ‘calls’
[17:37:43.827]   - Field: ‘globals’
[17:37:43.827]   - Field: ‘stdout’
[17:37:43.827]   - Field: ‘earlySignal’
[17:37:43.827]   - Field: ‘lazy’
[17:37:43.827]   - Field: ‘state’
[17:37:43.827] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.827] - Launch lazy future ...
[17:37:43.828] Packages needed by the future expression (n = 0): <none>
[17:37:43.828] Packages needed by future strategies (n = 0): <none>
[17:37:43.828] {
[17:37:43.828]     {
[17:37:43.828]         {
[17:37:43.828]             ...future.startTime <- base::Sys.time()
[17:37:43.828]             {
[17:37:43.828]                 {
[17:37:43.828]                   {
[17:37:43.828]                     {
[17:37:43.828]                       base::local({
[17:37:43.828]                         has_future <- base::requireNamespace("future", 
[17:37:43.828]                           quietly = TRUE)
[17:37:43.828]                         if (has_future) {
[17:37:43.828]                           ns <- base::getNamespace("future")
[17:37:43.828]                           version <- ns[[".package"]][["version"]]
[17:37:43.828]                           if (is.null(version)) 
[17:37:43.828]                             version <- utils::packageVersion("future")
[17:37:43.828]                         }
[17:37:43.828]                         else {
[17:37:43.828]                           version <- NULL
[17:37:43.828]                         }
[17:37:43.828]                         if (!has_future || version < "1.8.0") {
[17:37:43.828]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.828]                             "", base::R.version$version.string), 
[17:37:43.828]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.828]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.828]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.828]                               "release", "version")], collapse = " "), 
[17:37:43.828]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.828]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.828]                             info)
[17:37:43.828]                           info <- base::paste(info, collapse = "; ")
[17:37:43.828]                           if (!has_future) {
[17:37:43.828]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.828]                               info)
[17:37:43.828]                           }
[17:37:43.828]                           else {
[17:37:43.828]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.828]                               info, version)
[17:37:43.828]                           }
[17:37:43.828]                           base::stop(msg)
[17:37:43.828]                         }
[17:37:43.828]                       })
[17:37:43.828]                     }
[17:37:43.828]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.828]                     base::options(mc.cores = 1L)
[17:37:43.828]                   }
[17:37:43.828]                   ...future.strategy.old <- future::plan("list")
[17:37:43.828]                   options(future.plan = NULL)
[17:37:43.828]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.828]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.828]                 }
[17:37:43.828]                 ...future.workdir <- getwd()
[17:37:43.828]             }
[17:37:43.828]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.828]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.828]         }
[17:37:43.828]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.828]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.828]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.828]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.828]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.828]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.828]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.828]             base::names(...future.oldOptions))
[17:37:43.828]     }
[17:37:43.828]     if (FALSE) {
[17:37:43.828]     }
[17:37:43.828]     else {
[17:37:43.828]         if (TRUE) {
[17:37:43.828]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.828]                 open = "w")
[17:37:43.828]         }
[17:37:43.828]         else {
[17:37:43.828]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.828]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.828]         }
[17:37:43.828]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.828]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.828]             base::sink(type = "output", split = FALSE)
[17:37:43.828]             base::close(...future.stdout)
[17:37:43.828]         }, add = TRUE)
[17:37:43.828]     }
[17:37:43.828]     ...future.frame <- base::sys.nframe()
[17:37:43.828]     ...future.conditions <- base::list()
[17:37:43.828]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.828]     if (FALSE) {
[17:37:43.828]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.828]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.828]     }
[17:37:43.828]     ...future.result <- base::tryCatch({
[17:37:43.828]         base::withCallingHandlers({
[17:37:43.828]             ...future.value <- base::withVisible(base::local({
[17:37:43.828]                 ...future.makeSendCondition <- base::local({
[17:37:43.828]                   sendCondition <- NULL
[17:37:43.828]                   function(frame = 1L) {
[17:37:43.828]                     if (is.function(sendCondition)) 
[17:37:43.828]                       return(sendCondition)
[17:37:43.828]                     ns <- getNamespace("parallel")
[17:37:43.828]                     if (exists("sendData", mode = "function", 
[17:37:43.828]                       envir = ns)) {
[17:37:43.828]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.828]                         envir = ns)
[17:37:43.828]                       envir <- sys.frame(frame)
[17:37:43.828]                       master <- NULL
[17:37:43.828]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.828]                         !identical(envir, emptyenv())) {
[17:37:43.828]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.828]                           inherits = FALSE)) {
[17:37:43.828]                           master <- get("master", mode = "list", 
[17:37:43.828]                             envir = envir, inherits = FALSE)
[17:37:43.828]                           if (inherits(master, c("SOCKnode", 
[17:37:43.828]                             "SOCK0node"))) {
[17:37:43.828]                             sendCondition <<- function(cond) {
[17:37:43.828]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.828]                                 success = TRUE)
[17:37:43.828]                               parallel_sendData(master, data)
[17:37:43.828]                             }
[17:37:43.828]                             return(sendCondition)
[17:37:43.828]                           }
[17:37:43.828]                         }
[17:37:43.828]                         frame <- frame + 1L
[17:37:43.828]                         envir <- sys.frame(frame)
[17:37:43.828]                       }
[17:37:43.828]                     }
[17:37:43.828]                     sendCondition <<- function(cond) NULL
[17:37:43.828]                   }
[17:37:43.828]                 })
[17:37:43.828]                 withCallingHandlers({
[17:37:43.828]                   {
[17:37:43.828]                     do.call(function(...) {
[17:37:43.828]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.828]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.828]                         ...future.globals.maxSize)) {
[17:37:43.828]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.828]                         on.exit(options(oopts), add = TRUE)
[17:37:43.828]                       }
[17:37:43.828]                       {
[17:37:43.828]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.828]                           FUN = function(jj) {
[17:37:43.828]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.828]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.828]                               envir = globalenv(), inherits = FALSE)
[17:37:43.828]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.828]                           })
[17:37:43.828]                       }
[17:37:43.828]                     }, args = future.call.arguments)
[17:37:43.828]                   }
[17:37:43.828]                 }, immediateCondition = function(cond) {
[17:37:43.828]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.828]                   sendCondition(cond)
[17:37:43.828]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.828]                   {
[17:37:43.828]                     inherits <- base::inherits
[17:37:43.828]                     invokeRestart <- base::invokeRestart
[17:37:43.828]                     is.null <- base::is.null
[17:37:43.828]                     muffled <- FALSE
[17:37:43.828]                     if (inherits(cond, "message")) {
[17:37:43.828]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.828]                       if (muffled) 
[17:37:43.828]                         invokeRestart("muffleMessage")
[17:37:43.828]                     }
[17:37:43.828]                     else if (inherits(cond, "warning")) {
[17:37:43.828]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.828]                       if (muffled) 
[17:37:43.828]                         invokeRestart("muffleWarning")
[17:37:43.828]                     }
[17:37:43.828]                     else if (inherits(cond, "condition")) {
[17:37:43.828]                       if (!is.null(pattern)) {
[17:37:43.828]                         computeRestarts <- base::computeRestarts
[17:37:43.828]                         grepl <- base::grepl
[17:37:43.828]                         restarts <- computeRestarts(cond)
[17:37:43.828]                         for (restart in restarts) {
[17:37:43.828]                           name <- restart$name
[17:37:43.828]                           if (is.null(name)) 
[17:37:43.828]                             next
[17:37:43.828]                           if (!grepl(pattern, name)) 
[17:37:43.828]                             next
[17:37:43.828]                           invokeRestart(restart)
[17:37:43.828]                           muffled <- TRUE
[17:37:43.828]                           break
[17:37:43.828]                         }
[17:37:43.828]                       }
[17:37:43.828]                     }
[17:37:43.828]                     invisible(muffled)
[17:37:43.828]                   }
[17:37:43.828]                   muffleCondition(cond)
[17:37:43.828]                 })
[17:37:43.828]             }))
[17:37:43.828]             future::FutureResult(value = ...future.value$value, 
[17:37:43.828]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.828]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.828]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.828]                     ...future.globalenv.names))
[17:37:43.828]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.828]         }, condition = base::local({
[17:37:43.828]             c <- base::c
[17:37:43.828]             inherits <- base::inherits
[17:37:43.828]             invokeRestart <- base::invokeRestart
[17:37:43.828]             length <- base::length
[17:37:43.828]             list <- base::list
[17:37:43.828]             seq.int <- base::seq.int
[17:37:43.828]             signalCondition <- base::signalCondition
[17:37:43.828]             sys.calls <- base::sys.calls
[17:37:43.828]             `[[` <- base::`[[`
[17:37:43.828]             `+` <- base::`+`
[17:37:43.828]             `<<-` <- base::`<<-`
[17:37:43.828]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.828]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.828]                   3L)]
[17:37:43.828]             }
[17:37:43.828]             function(cond) {
[17:37:43.828]                 is_error <- inherits(cond, "error")
[17:37:43.828]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.828]                   NULL)
[17:37:43.828]                 if (is_error) {
[17:37:43.828]                   sessionInformation <- function() {
[17:37:43.828]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.828]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.828]                       search = base::search(), system = base::Sys.info())
[17:37:43.828]                   }
[17:37:43.828]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.828]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.828]                     cond$call), session = sessionInformation(), 
[17:37:43.828]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.828]                   signalCondition(cond)
[17:37:43.828]                 }
[17:37:43.828]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.828]                 "immediateCondition"))) {
[17:37:43.828]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.828]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.828]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.828]                   if (TRUE && !signal) {
[17:37:43.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.828]                     {
[17:37:43.828]                       inherits <- base::inherits
[17:37:43.828]                       invokeRestart <- base::invokeRestart
[17:37:43.828]                       is.null <- base::is.null
[17:37:43.828]                       muffled <- FALSE
[17:37:43.828]                       if (inherits(cond, "message")) {
[17:37:43.828]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.828]                         if (muffled) 
[17:37:43.828]                           invokeRestart("muffleMessage")
[17:37:43.828]                       }
[17:37:43.828]                       else if (inherits(cond, "warning")) {
[17:37:43.828]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.828]                         if (muffled) 
[17:37:43.828]                           invokeRestart("muffleWarning")
[17:37:43.828]                       }
[17:37:43.828]                       else if (inherits(cond, "condition")) {
[17:37:43.828]                         if (!is.null(pattern)) {
[17:37:43.828]                           computeRestarts <- base::computeRestarts
[17:37:43.828]                           grepl <- base::grepl
[17:37:43.828]                           restarts <- computeRestarts(cond)
[17:37:43.828]                           for (restart in restarts) {
[17:37:43.828]                             name <- restart$name
[17:37:43.828]                             if (is.null(name)) 
[17:37:43.828]                               next
[17:37:43.828]                             if (!grepl(pattern, name)) 
[17:37:43.828]                               next
[17:37:43.828]                             invokeRestart(restart)
[17:37:43.828]                             muffled <- TRUE
[17:37:43.828]                             break
[17:37:43.828]                           }
[17:37:43.828]                         }
[17:37:43.828]                       }
[17:37:43.828]                       invisible(muffled)
[17:37:43.828]                     }
[17:37:43.828]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.828]                   }
[17:37:43.828]                 }
[17:37:43.828]                 else {
[17:37:43.828]                   if (TRUE) {
[17:37:43.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.828]                     {
[17:37:43.828]                       inherits <- base::inherits
[17:37:43.828]                       invokeRestart <- base::invokeRestart
[17:37:43.828]                       is.null <- base::is.null
[17:37:43.828]                       muffled <- FALSE
[17:37:43.828]                       if (inherits(cond, "message")) {
[17:37:43.828]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.828]                         if (muffled) 
[17:37:43.828]                           invokeRestart("muffleMessage")
[17:37:43.828]                       }
[17:37:43.828]                       else if (inherits(cond, "warning")) {
[17:37:43.828]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.828]                         if (muffled) 
[17:37:43.828]                           invokeRestart("muffleWarning")
[17:37:43.828]                       }
[17:37:43.828]                       else if (inherits(cond, "condition")) {
[17:37:43.828]                         if (!is.null(pattern)) {
[17:37:43.828]                           computeRestarts <- base::computeRestarts
[17:37:43.828]                           grepl <- base::grepl
[17:37:43.828]                           restarts <- computeRestarts(cond)
[17:37:43.828]                           for (restart in restarts) {
[17:37:43.828]                             name <- restart$name
[17:37:43.828]                             if (is.null(name)) 
[17:37:43.828]                               next
[17:37:43.828]                             if (!grepl(pattern, name)) 
[17:37:43.828]                               next
[17:37:43.828]                             invokeRestart(restart)
[17:37:43.828]                             muffled <- TRUE
[17:37:43.828]                             break
[17:37:43.828]                           }
[17:37:43.828]                         }
[17:37:43.828]                       }
[17:37:43.828]                       invisible(muffled)
[17:37:43.828]                     }
[17:37:43.828]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.828]                   }
[17:37:43.828]                 }
[17:37:43.828]             }
[17:37:43.828]         }))
[17:37:43.828]     }, error = function(ex) {
[17:37:43.828]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.828]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.828]                 ...future.rng), started = ...future.startTime, 
[17:37:43.828]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.828]             version = "1.8"), class = "FutureResult")
[17:37:43.828]     }, finally = {
[17:37:43.828]         if (!identical(...future.workdir, getwd())) 
[17:37:43.828]             setwd(...future.workdir)
[17:37:43.828]         {
[17:37:43.828]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.828]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.828]             }
[17:37:43.828]             base::options(...future.oldOptions)
[17:37:43.828]             if (.Platform$OS.type == "windows") {
[17:37:43.828]                 old_names <- names(...future.oldEnvVars)
[17:37:43.828]                 envs <- base::Sys.getenv()
[17:37:43.828]                 names <- names(envs)
[17:37:43.828]                 common <- intersect(names, old_names)
[17:37:43.828]                 added <- setdiff(names, old_names)
[17:37:43.828]                 removed <- setdiff(old_names, names)
[17:37:43.828]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.828]                   envs[common]]
[17:37:43.828]                 NAMES <- toupper(changed)
[17:37:43.828]                 args <- list()
[17:37:43.828]                 for (kk in seq_along(NAMES)) {
[17:37:43.828]                   name <- changed[[kk]]
[17:37:43.828]                   NAME <- NAMES[[kk]]
[17:37:43.828]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.828]                     next
[17:37:43.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.828]                 }
[17:37:43.828]                 NAMES <- toupper(added)
[17:37:43.828]                 for (kk in seq_along(NAMES)) {
[17:37:43.828]                   name <- added[[kk]]
[17:37:43.828]                   NAME <- NAMES[[kk]]
[17:37:43.828]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.828]                     next
[17:37:43.828]                   args[[name]] <- ""
[17:37:43.828]                 }
[17:37:43.828]                 NAMES <- toupper(removed)
[17:37:43.828]                 for (kk in seq_along(NAMES)) {
[17:37:43.828]                   name <- removed[[kk]]
[17:37:43.828]                   NAME <- NAMES[[kk]]
[17:37:43.828]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.828]                     next
[17:37:43.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.828]                 }
[17:37:43.828]                 if (length(args) > 0) 
[17:37:43.828]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.828]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.828]             }
[17:37:43.828]             else {
[17:37:43.828]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.828]             }
[17:37:43.828]             {
[17:37:43.828]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.828]                   0L) {
[17:37:43.828]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.828]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.828]                   base::options(opts)
[17:37:43.828]                 }
[17:37:43.828]                 {
[17:37:43.828]                   {
[17:37:43.828]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.828]                     NULL
[17:37:43.828]                   }
[17:37:43.828]                   options(future.plan = NULL)
[17:37:43.828]                   if (is.na(NA_character_)) 
[17:37:43.828]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.828]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.828]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.828]                     .init = FALSE)
[17:37:43.828]                 }
[17:37:43.828]             }
[17:37:43.828]         }
[17:37:43.828]     })
[17:37:43.828]     if (TRUE) {
[17:37:43.828]         base::sink(type = "output", split = FALSE)
[17:37:43.828]         if (TRUE) {
[17:37:43.828]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.828]         }
[17:37:43.828]         else {
[17:37:43.828]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.828]         }
[17:37:43.828]         base::close(...future.stdout)
[17:37:43.828]         ...future.stdout <- NULL
[17:37:43.828]     }
[17:37:43.828]     ...future.result$conditions <- ...future.conditions
[17:37:43.828]     ...future.result$finished <- base::Sys.time()
[17:37:43.828]     ...future.result
[17:37:43.828] }
[17:37:43.831] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[17:37:43.831] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[17:37:43.831] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[17:37:43.832] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:37:43.832] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.832] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:37:43.833] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:37:43.833] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:37:43.833] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:37:43.833] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:37:43.834] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.834] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[17:37:43.834] MultisessionFuture started
[17:37:43.834] - Launch lazy future ... done
[17:37:43.834] run() for ‘MultisessionFuture’ ... done
[17:37:43.835] Created future:
[17:37:43.835] MultisessionFuture:
[17:37:43.835] Label: ‘future_replicate-1’
[17:37:43.835] Expression:
[17:37:43.835] {
[17:37:43.835]     do.call(function(...) {
[17:37:43.835]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.835]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.835]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.835]             on.exit(options(oopts), add = TRUE)
[17:37:43.835]         }
[17:37:43.835]         {
[17:37:43.835]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.835]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.835]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.835]                   envir = globalenv(), inherits = FALSE)
[17:37:43.835]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.835]             })
[17:37:43.835]         }
[17:37:43.835]     }, args = future.call.arguments)
[17:37:43.835] }
[17:37:43.835] Lazy evaluation: FALSE
[17:37:43.835] Asynchronous evaluation: TRUE
[17:37:43.835] Local evaluation: TRUE
[17:37:43.835] Environment: R_GlobalEnv
[17:37:43.835] Capture standard output: TRUE
[17:37:43.835] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.835] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.835] Packages: <none>
[17:37:43.835] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.835] Resolved: FALSE
[17:37:43.835] Value: <not collected>
[17:37:43.835] Conditions captured: <none>
[17:37:43.835] Early signaling: FALSE
[17:37:43.835] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.835] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.846] Chunk #1 of 2 ... DONE
[17:37:43.846] Chunk #2 of 2 ...
[17:37:43.846]  - Finding globals in 'X' for chunk #2 ...
[17:37:43.847] getGlobalsAndPackages() ...
[17:37:43.847] Searching for globals...
[17:37:43.847] 
[17:37:43.847] Searching for globals ... DONE
[17:37:43.847] - globals: [0] <none>
[17:37:43.847] getGlobalsAndPackages() ... DONE
[17:37:43.847]    + additional globals found: [n=0] 
[17:37:43.847]    + additional namespaces needed: [n=0] 
[17:37:43.847]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:43.848]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.848]  - seeds: [3] <seeds>
[17:37:43.848]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.848] getGlobalsAndPackages() ...
[17:37:43.848] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.848] Resolving globals: FALSE
[17:37:43.848] Tweak future expression to call with '...' arguments ...
[17:37:43.848] {
[17:37:43.848]     do.call(function(...) {
[17:37:43.848]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.848]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.848]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.848]             on.exit(options(oopts), add = TRUE)
[17:37:43.848]         }
[17:37:43.848]         {
[17:37:43.848]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.848]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.848]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.848]                   envir = globalenv(), inherits = FALSE)
[17:37:43.848]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.848]             })
[17:37:43.848]         }
[17:37:43.848]     }, args = future.call.arguments)
[17:37:43.848] }
[17:37:43.849] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.849] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.849] 
[17:37:43.849] getGlobalsAndPackages() ... DONE
[17:37:43.849] run() for ‘Future’ ...
[17:37:43.849] - state: ‘created’
[17:37:43.850] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.864] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.864] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.864]   - Field: ‘node’
[17:37:43.864]   - Field: ‘label’
[17:37:43.864]   - Field: ‘local’
[17:37:43.864]   - Field: ‘owner’
[17:37:43.864]   - Field: ‘envir’
[17:37:43.865]   - Field: ‘workers’
[17:37:43.865]   - Field: ‘packages’
[17:37:43.865]   - Field: ‘gc’
[17:37:43.865]   - Field: ‘conditions’
[17:37:43.865]   - Field: ‘persistent’
[17:37:43.865]   - Field: ‘expr’
[17:37:43.865]   - Field: ‘uuid’
[17:37:43.865]   - Field: ‘seed’
[17:37:43.865]   - Field: ‘version’
[17:37:43.865]   - Field: ‘result’
[17:37:43.865]   - Field: ‘asynchronous’
[17:37:43.866]   - Field: ‘calls’
[17:37:43.866]   - Field: ‘globals’
[17:37:43.866]   - Field: ‘stdout’
[17:37:43.866]   - Field: ‘earlySignal’
[17:37:43.866]   - Field: ‘lazy’
[17:37:43.866]   - Field: ‘state’
[17:37:43.866] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.866] - Launch lazy future ...
[17:37:43.866] Packages needed by the future expression (n = 0): <none>
[17:37:43.867] Packages needed by future strategies (n = 0): <none>
[17:37:43.867] {
[17:37:43.867]     {
[17:37:43.867]         {
[17:37:43.867]             ...future.startTime <- base::Sys.time()
[17:37:43.867]             {
[17:37:43.867]                 {
[17:37:43.867]                   {
[17:37:43.867]                     {
[17:37:43.867]                       base::local({
[17:37:43.867]                         has_future <- base::requireNamespace("future", 
[17:37:43.867]                           quietly = TRUE)
[17:37:43.867]                         if (has_future) {
[17:37:43.867]                           ns <- base::getNamespace("future")
[17:37:43.867]                           version <- ns[[".package"]][["version"]]
[17:37:43.867]                           if (is.null(version)) 
[17:37:43.867]                             version <- utils::packageVersion("future")
[17:37:43.867]                         }
[17:37:43.867]                         else {
[17:37:43.867]                           version <- NULL
[17:37:43.867]                         }
[17:37:43.867]                         if (!has_future || version < "1.8.0") {
[17:37:43.867]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.867]                             "", base::R.version$version.string), 
[17:37:43.867]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.867]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.867]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.867]                               "release", "version")], collapse = " "), 
[17:37:43.867]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.867]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.867]                             info)
[17:37:43.867]                           info <- base::paste(info, collapse = "; ")
[17:37:43.867]                           if (!has_future) {
[17:37:43.867]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.867]                               info)
[17:37:43.867]                           }
[17:37:43.867]                           else {
[17:37:43.867]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.867]                               info, version)
[17:37:43.867]                           }
[17:37:43.867]                           base::stop(msg)
[17:37:43.867]                         }
[17:37:43.867]                       })
[17:37:43.867]                     }
[17:37:43.867]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.867]                     base::options(mc.cores = 1L)
[17:37:43.867]                   }
[17:37:43.867]                   ...future.strategy.old <- future::plan("list")
[17:37:43.867]                   options(future.plan = NULL)
[17:37:43.867]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.867]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.867]                 }
[17:37:43.867]                 ...future.workdir <- getwd()
[17:37:43.867]             }
[17:37:43.867]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.867]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.867]         }
[17:37:43.867]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.867]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.867]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.867]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.867]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.867]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.867]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.867]             base::names(...future.oldOptions))
[17:37:43.867]     }
[17:37:43.867]     if (FALSE) {
[17:37:43.867]     }
[17:37:43.867]     else {
[17:37:43.867]         if (TRUE) {
[17:37:43.867]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.867]                 open = "w")
[17:37:43.867]         }
[17:37:43.867]         else {
[17:37:43.867]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.867]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.867]         }
[17:37:43.867]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.867]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.867]             base::sink(type = "output", split = FALSE)
[17:37:43.867]             base::close(...future.stdout)
[17:37:43.867]         }, add = TRUE)
[17:37:43.867]     }
[17:37:43.867]     ...future.frame <- base::sys.nframe()
[17:37:43.867]     ...future.conditions <- base::list()
[17:37:43.867]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.867]     if (FALSE) {
[17:37:43.867]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.867]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.867]     }
[17:37:43.867]     ...future.result <- base::tryCatch({
[17:37:43.867]         base::withCallingHandlers({
[17:37:43.867]             ...future.value <- base::withVisible(base::local({
[17:37:43.867]                 ...future.makeSendCondition <- base::local({
[17:37:43.867]                   sendCondition <- NULL
[17:37:43.867]                   function(frame = 1L) {
[17:37:43.867]                     if (is.function(sendCondition)) 
[17:37:43.867]                       return(sendCondition)
[17:37:43.867]                     ns <- getNamespace("parallel")
[17:37:43.867]                     if (exists("sendData", mode = "function", 
[17:37:43.867]                       envir = ns)) {
[17:37:43.867]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.867]                         envir = ns)
[17:37:43.867]                       envir <- sys.frame(frame)
[17:37:43.867]                       master <- NULL
[17:37:43.867]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.867]                         !identical(envir, emptyenv())) {
[17:37:43.867]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.867]                           inherits = FALSE)) {
[17:37:43.867]                           master <- get("master", mode = "list", 
[17:37:43.867]                             envir = envir, inherits = FALSE)
[17:37:43.867]                           if (inherits(master, c("SOCKnode", 
[17:37:43.867]                             "SOCK0node"))) {
[17:37:43.867]                             sendCondition <<- function(cond) {
[17:37:43.867]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.867]                                 success = TRUE)
[17:37:43.867]                               parallel_sendData(master, data)
[17:37:43.867]                             }
[17:37:43.867]                             return(sendCondition)
[17:37:43.867]                           }
[17:37:43.867]                         }
[17:37:43.867]                         frame <- frame + 1L
[17:37:43.867]                         envir <- sys.frame(frame)
[17:37:43.867]                       }
[17:37:43.867]                     }
[17:37:43.867]                     sendCondition <<- function(cond) NULL
[17:37:43.867]                   }
[17:37:43.867]                 })
[17:37:43.867]                 withCallingHandlers({
[17:37:43.867]                   {
[17:37:43.867]                     do.call(function(...) {
[17:37:43.867]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.867]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.867]                         ...future.globals.maxSize)) {
[17:37:43.867]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.867]                         on.exit(options(oopts), add = TRUE)
[17:37:43.867]                       }
[17:37:43.867]                       {
[17:37:43.867]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.867]                           FUN = function(jj) {
[17:37:43.867]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.867]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.867]                               envir = globalenv(), inherits = FALSE)
[17:37:43.867]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.867]                           })
[17:37:43.867]                       }
[17:37:43.867]                     }, args = future.call.arguments)
[17:37:43.867]                   }
[17:37:43.867]                 }, immediateCondition = function(cond) {
[17:37:43.867]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.867]                   sendCondition(cond)
[17:37:43.867]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.867]                   {
[17:37:43.867]                     inherits <- base::inherits
[17:37:43.867]                     invokeRestart <- base::invokeRestart
[17:37:43.867]                     is.null <- base::is.null
[17:37:43.867]                     muffled <- FALSE
[17:37:43.867]                     if (inherits(cond, "message")) {
[17:37:43.867]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.867]                       if (muffled) 
[17:37:43.867]                         invokeRestart("muffleMessage")
[17:37:43.867]                     }
[17:37:43.867]                     else if (inherits(cond, "warning")) {
[17:37:43.867]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.867]                       if (muffled) 
[17:37:43.867]                         invokeRestart("muffleWarning")
[17:37:43.867]                     }
[17:37:43.867]                     else if (inherits(cond, "condition")) {
[17:37:43.867]                       if (!is.null(pattern)) {
[17:37:43.867]                         computeRestarts <- base::computeRestarts
[17:37:43.867]                         grepl <- base::grepl
[17:37:43.867]                         restarts <- computeRestarts(cond)
[17:37:43.867]                         for (restart in restarts) {
[17:37:43.867]                           name <- restart$name
[17:37:43.867]                           if (is.null(name)) 
[17:37:43.867]                             next
[17:37:43.867]                           if (!grepl(pattern, name)) 
[17:37:43.867]                             next
[17:37:43.867]                           invokeRestart(restart)
[17:37:43.867]                           muffled <- TRUE
[17:37:43.867]                           break
[17:37:43.867]                         }
[17:37:43.867]                       }
[17:37:43.867]                     }
[17:37:43.867]                     invisible(muffled)
[17:37:43.867]                   }
[17:37:43.867]                   muffleCondition(cond)
[17:37:43.867]                 })
[17:37:43.867]             }))
[17:37:43.867]             future::FutureResult(value = ...future.value$value, 
[17:37:43.867]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.867]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.867]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.867]                     ...future.globalenv.names))
[17:37:43.867]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.867]         }, condition = base::local({
[17:37:43.867]             c <- base::c
[17:37:43.867]             inherits <- base::inherits
[17:37:43.867]             invokeRestart <- base::invokeRestart
[17:37:43.867]             length <- base::length
[17:37:43.867]             list <- base::list
[17:37:43.867]             seq.int <- base::seq.int
[17:37:43.867]             signalCondition <- base::signalCondition
[17:37:43.867]             sys.calls <- base::sys.calls
[17:37:43.867]             `[[` <- base::`[[`
[17:37:43.867]             `+` <- base::`+`
[17:37:43.867]             `<<-` <- base::`<<-`
[17:37:43.867]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.867]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.867]                   3L)]
[17:37:43.867]             }
[17:37:43.867]             function(cond) {
[17:37:43.867]                 is_error <- inherits(cond, "error")
[17:37:43.867]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.867]                   NULL)
[17:37:43.867]                 if (is_error) {
[17:37:43.867]                   sessionInformation <- function() {
[17:37:43.867]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.867]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.867]                       search = base::search(), system = base::Sys.info())
[17:37:43.867]                   }
[17:37:43.867]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.867]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.867]                     cond$call), session = sessionInformation(), 
[17:37:43.867]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.867]                   signalCondition(cond)
[17:37:43.867]                 }
[17:37:43.867]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.867]                 "immediateCondition"))) {
[17:37:43.867]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.867]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.867]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.867]                   if (TRUE && !signal) {
[17:37:43.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.867]                     {
[17:37:43.867]                       inherits <- base::inherits
[17:37:43.867]                       invokeRestart <- base::invokeRestart
[17:37:43.867]                       is.null <- base::is.null
[17:37:43.867]                       muffled <- FALSE
[17:37:43.867]                       if (inherits(cond, "message")) {
[17:37:43.867]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.867]                         if (muffled) 
[17:37:43.867]                           invokeRestart("muffleMessage")
[17:37:43.867]                       }
[17:37:43.867]                       else if (inherits(cond, "warning")) {
[17:37:43.867]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.867]                         if (muffled) 
[17:37:43.867]                           invokeRestart("muffleWarning")
[17:37:43.867]                       }
[17:37:43.867]                       else if (inherits(cond, "condition")) {
[17:37:43.867]                         if (!is.null(pattern)) {
[17:37:43.867]                           computeRestarts <- base::computeRestarts
[17:37:43.867]                           grepl <- base::grepl
[17:37:43.867]                           restarts <- computeRestarts(cond)
[17:37:43.867]                           for (restart in restarts) {
[17:37:43.867]                             name <- restart$name
[17:37:43.867]                             if (is.null(name)) 
[17:37:43.867]                               next
[17:37:43.867]                             if (!grepl(pattern, name)) 
[17:37:43.867]                               next
[17:37:43.867]                             invokeRestart(restart)
[17:37:43.867]                             muffled <- TRUE
[17:37:43.867]                             break
[17:37:43.867]                           }
[17:37:43.867]                         }
[17:37:43.867]                       }
[17:37:43.867]                       invisible(muffled)
[17:37:43.867]                     }
[17:37:43.867]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.867]                   }
[17:37:43.867]                 }
[17:37:43.867]                 else {
[17:37:43.867]                   if (TRUE) {
[17:37:43.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.867]                     {
[17:37:43.867]                       inherits <- base::inherits
[17:37:43.867]                       invokeRestart <- base::invokeRestart
[17:37:43.867]                       is.null <- base::is.null
[17:37:43.867]                       muffled <- FALSE
[17:37:43.867]                       if (inherits(cond, "message")) {
[17:37:43.867]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.867]                         if (muffled) 
[17:37:43.867]                           invokeRestart("muffleMessage")
[17:37:43.867]                       }
[17:37:43.867]                       else if (inherits(cond, "warning")) {
[17:37:43.867]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.867]                         if (muffled) 
[17:37:43.867]                           invokeRestart("muffleWarning")
[17:37:43.867]                       }
[17:37:43.867]                       else if (inherits(cond, "condition")) {
[17:37:43.867]                         if (!is.null(pattern)) {
[17:37:43.867]                           computeRestarts <- base::computeRestarts
[17:37:43.867]                           grepl <- base::grepl
[17:37:43.867]                           restarts <- computeRestarts(cond)
[17:37:43.867]                           for (restart in restarts) {
[17:37:43.867]                             name <- restart$name
[17:37:43.867]                             if (is.null(name)) 
[17:37:43.867]                               next
[17:37:43.867]                             if (!grepl(pattern, name)) 
[17:37:43.867]                               next
[17:37:43.867]                             invokeRestart(restart)
[17:37:43.867]                             muffled <- TRUE
[17:37:43.867]                             break
[17:37:43.867]                           }
[17:37:43.867]                         }
[17:37:43.867]                       }
[17:37:43.867]                       invisible(muffled)
[17:37:43.867]                     }
[17:37:43.867]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.867]                   }
[17:37:43.867]                 }
[17:37:43.867]             }
[17:37:43.867]         }))
[17:37:43.867]     }, error = function(ex) {
[17:37:43.867]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.867]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.867]                 ...future.rng), started = ...future.startTime, 
[17:37:43.867]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.867]             version = "1.8"), class = "FutureResult")
[17:37:43.867]     }, finally = {
[17:37:43.867]         if (!identical(...future.workdir, getwd())) 
[17:37:43.867]             setwd(...future.workdir)
[17:37:43.867]         {
[17:37:43.867]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.867]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.867]             }
[17:37:43.867]             base::options(...future.oldOptions)
[17:37:43.867]             if (.Platform$OS.type == "windows") {
[17:37:43.867]                 old_names <- names(...future.oldEnvVars)
[17:37:43.867]                 envs <- base::Sys.getenv()
[17:37:43.867]                 names <- names(envs)
[17:37:43.867]                 common <- intersect(names, old_names)
[17:37:43.867]                 added <- setdiff(names, old_names)
[17:37:43.867]                 removed <- setdiff(old_names, names)
[17:37:43.867]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.867]                   envs[common]]
[17:37:43.867]                 NAMES <- toupper(changed)
[17:37:43.867]                 args <- list()
[17:37:43.867]                 for (kk in seq_along(NAMES)) {
[17:37:43.867]                   name <- changed[[kk]]
[17:37:43.867]                   NAME <- NAMES[[kk]]
[17:37:43.867]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.867]                     next
[17:37:43.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.867]                 }
[17:37:43.867]                 NAMES <- toupper(added)
[17:37:43.867]                 for (kk in seq_along(NAMES)) {
[17:37:43.867]                   name <- added[[kk]]
[17:37:43.867]                   NAME <- NAMES[[kk]]
[17:37:43.867]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.867]                     next
[17:37:43.867]                   args[[name]] <- ""
[17:37:43.867]                 }
[17:37:43.867]                 NAMES <- toupper(removed)
[17:37:43.867]                 for (kk in seq_along(NAMES)) {
[17:37:43.867]                   name <- removed[[kk]]
[17:37:43.867]                   NAME <- NAMES[[kk]]
[17:37:43.867]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.867]                     next
[17:37:43.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.867]                 }
[17:37:43.867]                 if (length(args) > 0) 
[17:37:43.867]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.867]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.867]             }
[17:37:43.867]             else {
[17:37:43.867]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.867]             }
[17:37:43.867]             {
[17:37:43.867]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.867]                   0L) {
[17:37:43.867]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.867]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.867]                   base::options(opts)
[17:37:43.867]                 }
[17:37:43.867]                 {
[17:37:43.867]                   {
[17:37:43.867]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.867]                     NULL
[17:37:43.867]                   }
[17:37:43.867]                   options(future.plan = NULL)
[17:37:43.867]                   if (is.na(NA_character_)) 
[17:37:43.867]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.867]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.867]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.867]                     .init = FALSE)
[17:37:43.867]                 }
[17:37:43.867]             }
[17:37:43.867]         }
[17:37:43.867]     })
[17:37:43.867]     if (TRUE) {
[17:37:43.867]         base::sink(type = "output", split = FALSE)
[17:37:43.867]         if (TRUE) {
[17:37:43.867]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.867]         }
[17:37:43.867]         else {
[17:37:43.867]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.867]         }
[17:37:43.867]         base::close(...future.stdout)
[17:37:43.867]         ...future.stdout <- NULL
[17:37:43.867]     }
[17:37:43.867]     ...future.result$conditions <- ...future.conditions
[17:37:43.867]     ...future.result$finished <- base::Sys.time()
[17:37:43.867]     ...future.result
[17:37:43.867] }
[17:37:43.870] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[17:37:43.870] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[17:37:43.870] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[17:37:43.870] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:37:43.871] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.871] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:37:43.871] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:37:43.871] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:37:43.872] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:37:43.872] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:37:43.872] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:37:43.872] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[17:37:43.873] MultisessionFuture started
[17:37:43.873] - Launch lazy future ... done
[17:37:43.873] run() for ‘MultisessionFuture’ ... done
[17:37:43.873] Created future:
[17:37:43.873] MultisessionFuture:
[17:37:43.873] Label: ‘future_replicate-2’
[17:37:43.873] Expression:
[17:37:43.873] {
[17:37:43.873]     do.call(function(...) {
[17:37:43.873]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.873]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.873]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.873]             on.exit(options(oopts), add = TRUE)
[17:37:43.873]         }
[17:37:43.873]         {
[17:37:43.873]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.873]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.873]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.873]                   envir = globalenv(), inherits = FALSE)
[17:37:43.873]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.873]             })
[17:37:43.873]         }
[17:37:43.873]     }, args = future.call.arguments)
[17:37:43.873] }
[17:37:43.873] Lazy evaluation: FALSE
[17:37:43.873] Asynchronous evaluation: TRUE
[17:37:43.873] Local evaluation: TRUE
[17:37:43.873] Environment: R_GlobalEnv
[17:37:43.873] Capture standard output: TRUE
[17:37:43.873] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.873] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[17:37:43.873] Packages: <none>
[17:37:43.873] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.873] Resolved: FALSE
[17:37:43.873] Value: <not collected>
[17:37:43.873] Conditions captured: <none>
[17:37:43.873] Early signaling: FALSE
[17:37:43.873] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.873] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.885] Chunk #2 of 2 ... DONE
[17:37:43.885] Launching 2 futures (chunks) ... DONE
[17:37:43.885] Resolving 2 futures (chunks) ...
[17:37:43.885] resolve() on list ...
[17:37:43.885]  recursive: 0
[17:37:43.885]  length: 2
[17:37:43.885] 
[17:37:43.886] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.886] - Validating connection of MultisessionFuture
[17:37:43.886] - received message: FutureResult
[17:37:43.886] - Received FutureResult
[17:37:43.886] - Erased future from FutureRegistry
[17:37:43.887] result() for ClusterFuture ...
[17:37:43.887] - result already collected: FutureResult
[17:37:43.887] result() for ClusterFuture ... done
[17:37:43.887] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.887] Future #1
[17:37:43.887] result() for ClusterFuture ...
[17:37:43.887] - result already collected: FutureResult
[17:37:43.887] result() for ClusterFuture ... done
[17:37:43.887] result() for ClusterFuture ...
[17:37:43.887] - result already collected: FutureResult
[17:37:43.887] result() for ClusterFuture ... done
[17:37:43.887] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:37:43.888] - nx: 2
[17:37:43.888] - relay: TRUE
[17:37:43.888] - stdout: TRUE
[17:37:43.888] - signal: TRUE
[17:37:43.888] - resignal: FALSE
[17:37:43.888] - force: TRUE
[17:37:43.888] - relayed: [n=2] FALSE, FALSE
[17:37:43.888] - queued futures: [n=2] FALSE, FALSE
[17:37:43.888]  - until=1
[17:37:43.888]  - relaying element #1
[17:37:43.888] result() for ClusterFuture ...
[17:37:43.889] - result already collected: FutureResult
[17:37:43.889] result() for ClusterFuture ... done
[17:37:43.889] result() for ClusterFuture ...
[17:37:43.889] - result already collected: FutureResult
[17:37:43.889] result() for ClusterFuture ... done
[17:37:43.889] result() for ClusterFuture ...
[17:37:43.889] - result already collected: FutureResult
[17:37:43.889] result() for ClusterFuture ... done
[17:37:43.889] result() for ClusterFuture ...
[17:37:43.889] - result already collected: FutureResult
[17:37:43.889] result() for ClusterFuture ... done
[17:37:43.889] - relayed: [n=2] TRUE, FALSE
[17:37:43.890] - queued futures: [n=2] TRUE, FALSE
[17:37:43.890] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:37:43.890]  length: 1 (resolved future 1)
[17:37:43.918] receiveMessageFromWorker() for ClusterFuture ...
[17:37:43.918] - Validating connection of MultisessionFuture
[17:37:43.918] - received message: FutureResult
[17:37:43.918] - Received FutureResult
[17:37:43.918] - Erased future from FutureRegistry
[17:37:43.918] result() for ClusterFuture ...
[17:37:43.919] - result already collected: FutureResult
[17:37:43.919] result() for ClusterFuture ... done
[17:37:43.919] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:43.919] Future #2
[17:37:43.919] result() for ClusterFuture ...
[17:37:43.919] - result already collected: FutureResult
[17:37:43.919] result() for ClusterFuture ... done
[17:37:43.919] result() for ClusterFuture ...
[17:37:43.919] - result already collected: FutureResult
[17:37:43.919] result() for ClusterFuture ... done
[17:37:43.919] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:37:43.920] - nx: 2
[17:37:43.920] - relay: TRUE
[17:37:43.920] - stdout: TRUE
[17:37:43.920] - signal: TRUE
[17:37:43.920] - resignal: FALSE
[17:37:43.920] - force: TRUE
[17:37:43.920] - relayed: [n=2] TRUE, FALSE
[17:37:43.920] - queued futures: [n=2] TRUE, FALSE
[17:37:43.920]  - until=2
[17:37:43.920]  - relaying element #2
[17:37:43.920] result() for ClusterFuture ...
[17:37:43.920] - result already collected: FutureResult
[17:37:43.921] result() for ClusterFuture ... done
[17:37:43.921] result() for ClusterFuture ...
[17:37:43.921] - result already collected: FutureResult
[17:37:43.921] result() for ClusterFuture ... done
[17:37:43.921] result() for ClusterFuture ...
[17:37:43.921] - result already collected: FutureResult
[17:37:43.921] result() for ClusterFuture ... done
[17:37:43.921] result() for ClusterFuture ...
[17:37:43.921] - result already collected: FutureResult
[17:37:43.921] result() for ClusterFuture ... done
[17:37:43.922] - relayed: [n=2] TRUE, TRUE
[17:37:43.922] - queued futures: [n=2] TRUE, TRUE
[17:37:43.922] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:37:43.922]  length: 0 (resolved future 2)
[17:37:43.922] Relaying remaining futures
[17:37:43.922] signalConditionsASAP(NULL, pos=0) ...
[17:37:43.922] - nx: 2
[17:37:43.922] - relay: TRUE
[17:37:43.922] - stdout: TRUE
[17:37:43.922] - signal: TRUE
[17:37:43.922] - resignal: FALSE
[17:37:43.922] - force: TRUE
[17:37:43.922] - relayed: [n=2] TRUE, TRUE
[17:37:43.923] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:43.923] - relayed: [n=2] TRUE, TRUE
[17:37:43.923] - queued futures: [n=2] TRUE, TRUE
[17:37:43.923] signalConditionsASAP(NULL, pos=0) ... done
[17:37:43.923] resolve() on list ... DONE
[17:37:43.923] result() for ClusterFuture ...
[17:37:43.923] - result already collected: FutureResult
[17:37:43.923] result() for ClusterFuture ... done
[17:37:43.923] result() for ClusterFuture ...
[17:37:43.923] - result already collected: FutureResult
[17:37:43.923] result() for ClusterFuture ... done
[17:37:43.926] result() for ClusterFuture ...
[17:37:43.926] - result already collected: FutureResult
[17:37:43.926] result() for ClusterFuture ... done
[17:37:43.926] result() for ClusterFuture ...
[17:37:43.926] - result already collected: FutureResult
[17:37:43.926] result() for ClusterFuture ... done
[17:37:43.926]  - Number of value chunks collected: 2
[17:37:43.926] Resolving 2 futures (chunks) ... DONE
[17:37:43.926] Reducing values from 2 chunks ...
[17:37:43.926]  - Number of values collected after concatenation: 5
[17:37:43.926]  - Number of values expected: 5
[17:37:43.927] Reducing values from 2 chunks ... DONE
[17:37:43.927] future_lapply() ... DONE
- example(replicate) ...
[17:37:43.927] future_lapply() ...
[17:37:43.927] Generating random seeds ...
[17:37:43.928] Generating random seed streams for 5 elements ...
[17:37:43.928] Generating random seed streams for 5 elements ... DONE
[17:37:43.928] Generating random seeds ... DONE
[17:37:43.928] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[17:37:43.932] Number of chunks: 2
[17:37:43.932] getGlobalsAndPackagesXApply() ...
[17:37:43.932]  - future.globals: TRUE
[17:37:43.932] getGlobalsAndPackages() ...
[17:37:43.932] Searching for globals...
[17:37:43.934] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[17:37:43.934] Searching for globals ... DONE
[17:37:43.934] Resolving globals: FALSE
[17:37:43.935] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[17:37:43.935] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:37:43.935] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[17:37:43.935] 
[17:37:43.935] getGlobalsAndPackages() ... DONE
[17:37:43.936]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[17:37:43.936]  - needed namespaces: [n=0] 
[17:37:43.936] Finding globals ... DONE
[17:37:43.936]  - use_args: TRUE
[17:37:43.936]  - Getting '...' globals ...
[17:37:43.936] resolve() on list ...
[17:37:43.936]  recursive: 0
[17:37:43.936]  length: 1
[17:37:43.936]  elements: ‘...’
[17:37:43.937]  length: 0 (resolved future 1)
[17:37:43.937] resolve() on list ... DONE
[17:37:43.937]    - '...' content: [n=0] 
[17:37:43.937] List of 1
[17:37:43.937]  $ ...: list()
[17:37:43.937]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.937]  - attr(*, "where")=List of 1
[17:37:43.937]   ..$ ...:<environment: 0x5640c11b4d50> 
[17:37:43.937]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.937]  - attr(*, "resolved")= logi TRUE
[17:37:43.937]  - attr(*, "total_size")= num NA
[17:37:43.939]  - Getting '...' globals ... DONE
[17:37:43.939] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[17:37:43.940] List of 4
[17:37:43.940]  $ ...future.FUN:function (...)  
[17:37:43.940]  $ foo          :function (x = 1, y = 2)  
[17:37:43.940]  $ x            : num 3
[17:37:43.940]  $ ...          : list()
[17:37:43.940]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:37:43.940]  - attr(*, "where")=List of 4
[17:37:43.940]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[17:37:43.940]   ..$ foo          :<environment: R_EmptyEnv> 
[17:37:43.940]   ..$ x            :<environment: R_EmptyEnv> 
[17:37:43.940]   ..$ ...          :<environment: 0x5640c11b4d50> 
[17:37:43.940]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:37:43.940]  - attr(*, "resolved")= logi FALSE
[17:37:43.940]  - attr(*, "total_size")= num 2200
[17:37:43.943] Packages to be attached in all futures: [n=0] 
[17:37:43.943] getGlobalsAndPackagesXApply() ... DONE
[17:37:43.943] Number of futures (= number of chunks): 2
[17:37:43.943] Launching 2 futures (chunks) ...
[17:37:43.944] Chunk #1 of 2 ...
[17:37:43.944]  - Finding globals in 'X' for chunk #1 ...
[17:37:43.944] getGlobalsAndPackages() ...
[17:37:43.944] Searching for globals...
[17:37:43.944] 
[17:37:43.944] Searching for globals ... DONE
[17:37:43.944] - globals: [0] <none>
[17:37:43.944] getGlobalsAndPackages() ... DONE
[17:37:43.945]    + additional globals found: [n=0] 
[17:37:43.945]    + additional namespaces needed: [n=0] 
[17:37:43.945]  - Finding globals in 'X' for chunk #1 ... DONE
[17:37:43.945]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.945]  - seeds: [2] <seeds>
[17:37:43.945]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.945] getGlobalsAndPackages() ...
[17:37:43.945] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.945] Resolving globals: FALSE
[17:37:43.945] Tweak future expression to call with '...' arguments ...
[17:37:43.946] {
[17:37:43.946]     do.call(function(...) {
[17:37:43.946]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.946]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.946]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.946]             on.exit(options(oopts), add = TRUE)
[17:37:43.946]         }
[17:37:43.946]         {
[17:37:43.946]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.946]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.946]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.946]                   envir = globalenv(), inherits = FALSE)
[17:37:43.946]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.946]             })
[17:37:43.946]         }
[17:37:43.946]     }, args = future.call.arguments)
[17:37:43.946] }
[17:37:43.946] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.946] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.946] 
[17:37:43.946] getGlobalsAndPackages() ... DONE
[17:37:43.947] run() for ‘Future’ ...
[17:37:43.947] - state: ‘created’
[17:37:43.947] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:43.962] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.962] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:43.962]   - Field: ‘node’
[17:37:43.962]   - Field: ‘label’
[17:37:43.962]   - Field: ‘local’
[17:37:43.962]   - Field: ‘owner’
[17:37:43.962]   - Field: ‘envir’
[17:37:43.962]   - Field: ‘workers’
[17:37:43.962]   - Field: ‘packages’
[17:37:43.963]   - Field: ‘gc’
[17:37:43.963]   - Field: ‘conditions’
[17:37:43.963]   - Field: ‘persistent’
[17:37:43.963]   - Field: ‘expr’
[17:37:43.963]   - Field: ‘uuid’
[17:37:43.963]   - Field: ‘seed’
[17:37:43.963]   - Field: ‘version’
[17:37:43.963]   - Field: ‘result’
[17:37:43.963]   - Field: ‘asynchronous’
[17:37:43.963]   - Field: ‘calls’
[17:37:43.963]   - Field: ‘globals’
[17:37:43.964]   - Field: ‘stdout’
[17:37:43.964]   - Field: ‘earlySignal’
[17:37:43.964]   - Field: ‘lazy’
[17:37:43.964]   - Field: ‘state’
[17:37:43.964] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:43.964] - Launch lazy future ...
[17:37:43.964] Packages needed by the future expression (n = 0): <none>
[17:37:43.964] Packages needed by future strategies (n = 0): <none>
[17:37:43.965] {
[17:37:43.965]     {
[17:37:43.965]         {
[17:37:43.965]             ...future.startTime <- base::Sys.time()
[17:37:43.965]             {
[17:37:43.965]                 {
[17:37:43.965]                   {
[17:37:43.965]                     {
[17:37:43.965]                       base::local({
[17:37:43.965]                         has_future <- base::requireNamespace("future", 
[17:37:43.965]                           quietly = TRUE)
[17:37:43.965]                         if (has_future) {
[17:37:43.965]                           ns <- base::getNamespace("future")
[17:37:43.965]                           version <- ns[[".package"]][["version"]]
[17:37:43.965]                           if (is.null(version)) 
[17:37:43.965]                             version <- utils::packageVersion("future")
[17:37:43.965]                         }
[17:37:43.965]                         else {
[17:37:43.965]                           version <- NULL
[17:37:43.965]                         }
[17:37:43.965]                         if (!has_future || version < "1.8.0") {
[17:37:43.965]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:43.965]                             "", base::R.version$version.string), 
[17:37:43.965]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:43.965]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:43.965]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:43.965]                               "release", "version")], collapse = " "), 
[17:37:43.965]                             hostname = base::Sys.info()[["nodename"]])
[17:37:43.965]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:43.965]                             info)
[17:37:43.965]                           info <- base::paste(info, collapse = "; ")
[17:37:43.965]                           if (!has_future) {
[17:37:43.965]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:43.965]                               info)
[17:37:43.965]                           }
[17:37:43.965]                           else {
[17:37:43.965]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:43.965]                               info, version)
[17:37:43.965]                           }
[17:37:43.965]                           base::stop(msg)
[17:37:43.965]                         }
[17:37:43.965]                       })
[17:37:43.965]                     }
[17:37:43.965]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:43.965]                     base::options(mc.cores = 1L)
[17:37:43.965]                   }
[17:37:43.965]                   ...future.strategy.old <- future::plan("list")
[17:37:43.965]                   options(future.plan = NULL)
[17:37:43.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:43.965]                 }
[17:37:43.965]                 ...future.workdir <- getwd()
[17:37:43.965]             }
[17:37:43.965]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:43.965]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:43.965]         }
[17:37:43.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:43.965]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:43.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:43.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:43.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:43.965]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:43.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:43.965]             base::names(...future.oldOptions))
[17:37:43.965]     }
[17:37:43.965]     if (FALSE) {
[17:37:43.965]     }
[17:37:43.965]     else {
[17:37:43.965]         if (TRUE) {
[17:37:43.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:43.965]                 open = "w")
[17:37:43.965]         }
[17:37:43.965]         else {
[17:37:43.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:43.965]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:43.965]         }
[17:37:43.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:43.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:43.965]             base::sink(type = "output", split = FALSE)
[17:37:43.965]             base::close(...future.stdout)
[17:37:43.965]         }, add = TRUE)
[17:37:43.965]     }
[17:37:43.965]     ...future.frame <- base::sys.nframe()
[17:37:43.965]     ...future.conditions <- base::list()
[17:37:43.965]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:43.965]     if (FALSE) {
[17:37:43.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:43.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:43.965]     }
[17:37:43.965]     ...future.result <- base::tryCatch({
[17:37:43.965]         base::withCallingHandlers({
[17:37:43.965]             ...future.value <- base::withVisible(base::local({
[17:37:43.965]                 ...future.makeSendCondition <- base::local({
[17:37:43.965]                   sendCondition <- NULL
[17:37:43.965]                   function(frame = 1L) {
[17:37:43.965]                     if (is.function(sendCondition)) 
[17:37:43.965]                       return(sendCondition)
[17:37:43.965]                     ns <- getNamespace("parallel")
[17:37:43.965]                     if (exists("sendData", mode = "function", 
[17:37:43.965]                       envir = ns)) {
[17:37:43.965]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:43.965]                         envir = ns)
[17:37:43.965]                       envir <- sys.frame(frame)
[17:37:43.965]                       master <- NULL
[17:37:43.965]                       while (!identical(envir, .GlobalEnv) && 
[17:37:43.965]                         !identical(envir, emptyenv())) {
[17:37:43.965]                         if (exists("master", mode = "list", envir = envir, 
[17:37:43.965]                           inherits = FALSE)) {
[17:37:43.965]                           master <- get("master", mode = "list", 
[17:37:43.965]                             envir = envir, inherits = FALSE)
[17:37:43.965]                           if (inherits(master, c("SOCKnode", 
[17:37:43.965]                             "SOCK0node"))) {
[17:37:43.965]                             sendCondition <<- function(cond) {
[17:37:43.965]                               data <- list(type = "VALUE", value = cond, 
[17:37:43.965]                                 success = TRUE)
[17:37:43.965]                               parallel_sendData(master, data)
[17:37:43.965]                             }
[17:37:43.965]                             return(sendCondition)
[17:37:43.965]                           }
[17:37:43.965]                         }
[17:37:43.965]                         frame <- frame + 1L
[17:37:43.965]                         envir <- sys.frame(frame)
[17:37:43.965]                       }
[17:37:43.965]                     }
[17:37:43.965]                     sendCondition <<- function(cond) NULL
[17:37:43.965]                   }
[17:37:43.965]                 })
[17:37:43.965]                 withCallingHandlers({
[17:37:43.965]                   {
[17:37:43.965]                     do.call(function(...) {
[17:37:43.965]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.965]                       if (!identical(...future.globals.maxSize.org, 
[17:37:43.965]                         ...future.globals.maxSize)) {
[17:37:43.965]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.965]                         on.exit(options(oopts), add = TRUE)
[17:37:43.965]                       }
[17:37:43.965]                       {
[17:37:43.965]                         lapply(seq_along(...future.elements_ii), 
[17:37:43.965]                           FUN = function(jj) {
[17:37:43.965]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.965]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.965]                               envir = globalenv(), inherits = FALSE)
[17:37:43.965]                             ...future.FUN(...future.X_jj, ...)
[17:37:43.965]                           })
[17:37:43.965]                       }
[17:37:43.965]                     }, args = future.call.arguments)
[17:37:43.965]                   }
[17:37:43.965]                 }, immediateCondition = function(cond) {
[17:37:43.965]                   sendCondition <- ...future.makeSendCondition()
[17:37:43.965]                   sendCondition(cond)
[17:37:43.965]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.965]                   {
[17:37:43.965]                     inherits <- base::inherits
[17:37:43.965]                     invokeRestart <- base::invokeRestart
[17:37:43.965]                     is.null <- base::is.null
[17:37:43.965]                     muffled <- FALSE
[17:37:43.965]                     if (inherits(cond, "message")) {
[17:37:43.965]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:43.965]                       if (muffled) 
[17:37:43.965]                         invokeRestart("muffleMessage")
[17:37:43.965]                     }
[17:37:43.965]                     else if (inherits(cond, "warning")) {
[17:37:43.965]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:43.965]                       if (muffled) 
[17:37:43.965]                         invokeRestart("muffleWarning")
[17:37:43.965]                     }
[17:37:43.965]                     else if (inherits(cond, "condition")) {
[17:37:43.965]                       if (!is.null(pattern)) {
[17:37:43.965]                         computeRestarts <- base::computeRestarts
[17:37:43.965]                         grepl <- base::grepl
[17:37:43.965]                         restarts <- computeRestarts(cond)
[17:37:43.965]                         for (restart in restarts) {
[17:37:43.965]                           name <- restart$name
[17:37:43.965]                           if (is.null(name)) 
[17:37:43.965]                             next
[17:37:43.965]                           if (!grepl(pattern, name)) 
[17:37:43.965]                             next
[17:37:43.965]                           invokeRestart(restart)
[17:37:43.965]                           muffled <- TRUE
[17:37:43.965]                           break
[17:37:43.965]                         }
[17:37:43.965]                       }
[17:37:43.965]                     }
[17:37:43.965]                     invisible(muffled)
[17:37:43.965]                   }
[17:37:43.965]                   muffleCondition(cond)
[17:37:43.965]                 })
[17:37:43.965]             }))
[17:37:43.965]             future::FutureResult(value = ...future.value$value, 
[17:37:43.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.965]                   ...future.rng), globalenv = if (FALSE) 
[17:37:43.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:43.965]                     ...future.globalenv.names))
[17:37:43.965]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:43.965]         }, condition = base::local({
[17:37:43.965]             c <- base::c
[17:37:43.965]             inherits <- base::inherits
[17:37:43.965]             invokeRestart <- base::invokeRestart
[17:37:43.965]             length <- base::length
[17:37:43.965]             list <- base::list
[17:37:43.965]             seq.int <- base::seq.int
[17:37:43.965]             signalCondition <- base::signalCondition
[17:37:43.965]             sys.calls <- base::sys.calls
[17:37:43.965]             `[[` <- base::`[[`
[17:37:43.965]             `+` <- base::`+`
[17:37:43.965]             `<<-` <- base::`<<-`
[17:37:43.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:43.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:43.965]                   3L)]
[17:37:43.965]             }
[17:37:43.965]             function(cond) {
[17:37:43.965]                 is_error <- inherits(cond, "error")
[17:37:43.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:43.965]                   NULL)
[17:37:43.965]                 if (is_error) {
[17:37:43.965]                   sessionInformation <- function() {
[17:37:43.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:43.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:43.965]                       search = base::search(), system = base::Sys.info())
[17:37:43.965]                   }
[17:37:43.965]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:43.965]                     cond$call), session = sessionInformation(), 
[17:37:43.965]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:43.965]                   signalCondition(cond)
[17:37:43.965]                 }
[17:37:43.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:43.965]                 "immediateCondition"))) {
[17:37:43.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:43.965]                   ...future.conditions[[length(...future.conditions) + 
[17:37:43.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:43.965]                   if (TRUE && !signal) {
[17:37:43.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.965]                     {
[17:37:43.965]                       inherits <- base::inherits
[17:37:43.965]                       invokeRestart <- base::invokeRestart
[17:37:43.965]                       is.null <- base::is.null
[17:37:43.965]                       muffled <- FALSE
[17:37:43.965]                       if (inherits(cond, "message")) {
[17:37:43.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.965]                         if (muffled) 
[17:37:43.965]                           invokeRestart("muffleMessage")
[17:37:43.965]                       }
[17:37:43.965]                       else if (inherits(cond, "warning")) {
[17:37:43.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.965]                         if (muffled) 
[17:37:43.965]                           invokeRestart("muffleWarning")
[17:37:43.965]                       }
[17:37:43.965]                       else if (inherits(cond, "condition")) {
[17:37:43.965]                         if (!is.null(pattern)) {
[17:37:43.965]                           computeRestarts <- base::computeRestarts
[17:37:43.965]                           grepl <- base::grepl
[17:37:43.965]                           restarts <- computeRestarts(cond)
[17:37:43.965]                           for (restart in restarts) {
[17:37:43.965]                             name <- restart$name
[17:37:43.965]                             if (is.null(name)) 
[17:37:43.965]                               next
[17:37:43.965]                             if (!grepl(pattern, name)) 
[17:37:43.965]                               next
[17:37:43.965]                             invokeRestart(restart)
[17:37:43.965]                             muffled <- TRUE
[17:37:43.965]                             break
[17:37:43.965]                           }
[17:37:43.965]                         }
[17:37:43.965]                       }
[17:37:43.965]                       invisible(muffled)
[17:37:43.965]                     }
[17:37:43.965]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.965]                   }
[17:37:43.965]                 }
[17:37:43.965]                 else {
[17:37:43.965]                   if (TRUE) {
[17:37:43.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:43.965]                     {
[17:37:43.965]                       inherits <- base::inherits
[17:37:43.965]                       invokeRestart <- base::invokeRestart
[17:37:43.965]                       is.null <- base::is.null
[17:37:43.965]                       muffled <- FALSE
[17:37:43.965]                       if (inherits(cond, "message")) {
[17:37:43.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:43.965]                         if (muffled) 
[17:37:43.965]                           invokeRestart("muffleMessage")
[17:37:43.965]                       }
[17:37:43.965]                       else if (inherits(cond, "warning")) {
[17:37:43.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:43.965]                         if (muffled) 
[17:37:43.965]                           invokeRestart("muffleWarning")
[17:37:43.965]                       }
[17:37:43.965]                       else if (inherits(cond, "condition")) {
[17:37:43.965]                         if (!is.null(pattern)) {
[17:37:43.965]                           computeRestarts <- base::computeRestarts
[17:37:43.965]                           grepl <- base::grepl
[17:37:43.965]                           restarts <- computeRestarts(cond)
[17:37:43.965]                           for (restart in restarts) {
[17:37:43.965]                             name <- restart$name
[17:37:43.965]                             if (is.null(name)) 
[17:37:43.965]                               next
[17:37:43.965]                             if (!grepl(pattern, name)) 
[17:37:43.965]                               next
[17:37:43.965]                             invokeRestart(restart)
[17:37:43.965]                             muffled <- TRUE
[17:37:43.965]                             break
[17:37:43.965]                           }
[17:37:43.965]                         }
[17:37:43.965]                       }
[17:37:43.965]                       invisible(muffled)
[17:37:43.965]                     }
[17:37:43.965]                     muffleCondition(cond, pattern = "^muffle")
[17:37:43.965]                   }
[17:37:43.965]                 }
[17:37:43.965]             }
[17:37:43.965]         }))
[17:37:43.965]     }, error = function(ex) {
[17:37:43.965]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:43.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:43.965]                 ...future.rng), started = ...future.startTime, 
[17:37:43.965]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:43.965]             version = "1.8"), class = "FutureResult")
[17:37:43.965]     }, finally = {
[17:37:43.965]         if (!identical(...future.workdir, getwd())) 
[17:37:43.965]             setwd(...future.workdir)
[17:37:43.965]         {
[17:37:43.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:43.965]                 ...future.oldOptions$nwarnings <- NULL
[17:37:43.965]             }
[17:37:43.965]             base::options(...future.oldOptions)
[17:37:43.965]             if (.Platform$OS.type == "windows") {
[17:37:43.965]                 old_names <- names(...future.oldEnvVars)
[17:37:43.965]                 envs <- base::Sys.getenv()
[17:37:43.965]                 names <- names(envs)
[17:37:43.965]                 common <- intersect(names, old_names)
[17:37:43.965]                 added <- setdiff(names, old_names)
[17:37:43.965]                 removed <- setdiff(old_names, names)
[17:37:43.965]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:43.965]                   envs[common]]
[17:37:43.965]                 NAMES <- toupper(changed)
[17:37:43.965]                 args <- list()
[17:37:43.965]                 for (kk in seq_along(NAMES)) {
[17:37:43.965]                   name <- changed[[kk]]
[17:37:43.965]                   NAME <- NAMES[[kk]]
[17:37:43.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.965]                     next
[17:37:43.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.965]                 }
[17:37:43.965]                 NAMES <- toupper(added)
[17:37:43.965]                 for (kk in seq_along(NAMES)) {
[17:37:43.965]                   name <- added[[kk]]
[17:37:43.965]                   NAME <- NAMES[[kk]]
[17:37:43.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.965]                     next
[17:37:43.965]                   args[[name]] <- ""
[17:37:43.965]                 }
[17:37:43.965]                 NAMES <- toupper(removed)
[17:37:43.965]                 for (kk in seq_along(NAMES)) {
[17:37:43.965]                   name <- removed[[kk]]
[17:37:43.965]                   NAME <- NAMES[[kk]]
[17:37:43.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:43.965]                     next
[17:37:43.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:43.965]                 }
[17:37:43.965]                 if (length(args) > 0) 
[17:37:43.965]                   base::do.call(base::Sys.setenv, args = args)
[17:37:43.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:43.965]             }
[17:37:43.965]             else {
[17:37:43.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:43.965]             }
[17:37:43.965]             {
[17:37:43.965]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:43.965]                   0L) {
[17:37:43.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:43.965]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:43.965]                   base::options(opts)
[17:37:43.965]                 }
[17:37:43.965]                 {
[17:37:43.965]                   {
[17:37:43.965]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:43.965]                     NULL
[17:37:43.965]                   }
[17:37:43.965]                   options(future.plan = NULL)
[17:37:43.965]                   if (is.na(NA_character_)) 
[17:37:43.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:43.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:43.965]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:43.965]                     .init = FALSE)
[17:37:43.965]                 }
[17:37:43.965]             }
[17:37:43.965]         }
[17:37:43.965]     })
[17:37:43.965]     if (TRUE) {
[17:37:43.965]         base::sink(type = "output", split = FALSE)
[17:37:43.965]         if (TRUE) {
[17:37:43.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:43.965]         }
[17:37:43.965]         else {
[17:37:43.965]             ...future.result["stdout"] <- base::list(NULL)
[17:37:43.965]         }
[17:37:43.965]         base::close(...future.stdout)
[17:37:43.965]         ...future.stdout <- NULL
[17:37:43.965]     }
[17:37:43.965]     ...future.result$conditions <- ...future.conditions
[17:37:43.965]     ...future.result$finished <- base::Sys.time()
[17:37:43.965]     ...future.result
[17:37:43.965] }
[17:37:43.968] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[17:37:43.968] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[17:37:43.968] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[17:37:43.968] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[17:37:43.969] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[17:37:43.969] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:37:43.969] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:37:43.969] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[17:37:43.970] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.970] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[17:37:43.970] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[17:37:43.970] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[17:37:43.971] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[17:37:43.971] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[17:37:43.971] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[17:37:43.971] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[17:37:43.972] MultisessionFuture started
[17:37:43.972] - Launch lazy future ... done
[17:37:43.972] run() for ‘MultisessionFuture’ ... done
[17:37:43.972] Created future:
[17:37:43.972] MultisessionFuture:
[17:37:43.972] Label: ‘future_replicate-1’
[17:37:43.972] Expression:
[17:37:43.972] {
[17:37:43.972]     do.call(function(...) {
[17:37:43.972]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.972]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.972]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.972]             on.exit(options(oopts), add = TRUE)
[17:37:43.972]         }
[17:37:43.972]         {
[17:37:43.972]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.972]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.972]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.972]                   envir = globalenv(), inherits = FALSE)
[17:37:43.972]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.972]             })
[17:37:43.972]         }
[17:37:43.972]     }, args = future.call.arguments)
[17:37:43.972] }
[17:37:43.972] Lazy evaluation: FALSE
[17:37:43.972] Asynchronous evaluation: TRUE
[17:37:43.972] Local evaluation: TRUE
[17:37:43.972] Environment: 0x5640c11b3460
[17:37:43.972] Capture standard output: TRUE
[17:37:43.972] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:43.972] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[17:37:43.972] Packages: <none>
[17:37:43.972] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:43.972] Resolved: FALSE
[17:37:43.972] Value: <not collected>
[17:37:43.972] Conditions captured: <none>
[17:37:43.972] Early signaling: FALSE
[17:37:43.972] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:43.972] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:43.984] Chunk #1 of 2 ... DONE
[17:37:43.984] Chunk #2 of 2 ...
[17:37:43.984]  - Finding globals in 'X' for chunk #2 ...
[17:37:43.984] getGlobalsAndPackages() ...
[17:37:43.984] Searching for globals...
[17:37:43.984] 
[17:37:43.985] Searching for globals ... DONE
[17:37:43.985] - globals: [0] <none>
[17:37:43.985] getGlobalsAndPackages() ... DONE
[17:37:43.985]    + additional globals found: [n=0] 
[17:37:43.985]    + additional namespaces needed: [n=0] 
[17:37:43.985]  - Finding globals in 'X' for chunk #2 ... DONE
[17:37:43.985]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[17:37:43.985]  - seeds: [3] <seeds>
[17:37:43.985]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.985] getGlobalsAndPackages() ...
[17:37:43.985] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.986] Resolving globals: FALSE
[17:37:43.986] Tweak future expression to call with '...' arguments ...
[17:37:43.986] {
[17:37:43.986]     do.call(function(...) {
[17:37:43.986]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:43.986]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:43.986]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:43.986]             on.exit(options(oopts), add = TRUE)
[17:37:43.986]         }
[17:37:43.986]         {
[17:37:43.986]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:43.986]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:43.986]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:43.986]                   envir = globalenv(), inherits = FALSE)
[17:37:43.986]                 ...future.FUN(...future.X_jj, ...)
[17:37:43.986]             })
[17:37:43.986]         }
[17:37:43.986]     }, args = future.call.arguments)
[17:37:43.986] }
[17:37:43.986] Tweak future expression to call with '...' arguments ... DONE
[17:37:43.986] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[17:37:43.987] 
[17:37:43.987] getGlobalsAndPackages() ... DONE
[17:37:43.987] run() for ‘Future’ ...
[17:37:43.987] - state: ‘created’
[17:37:43.987] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:37:44.001] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:44.001] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:37:44.001]   - Field: ‘node’
[17:37:44.001]   - Field: ‘label’
[17:37:44.001]   - Field: ‘local’
[17:37:44.001]   - Field: ‘owner’
[17:37:44.002]   - Field: ‘envir’
[17:37:44.002]   - Field: ‘workers’
[17:37:44.002]   - Field: ‘packages’
[17:37:44.002]   - Field: ‘gc’
[17:37:44.002]   - Field: ‘conditions’
[17:37:44.002]   - Field: ‘persistent’
[17:37:44.002]   - Field: ‘expr’
[17:37:44.002]   - Field: ‘uuid’
[17:37:44.002]   - Field: ‘seed’
[17:37:44.002]   - Field: ‘version’
[17:37:44.002]   - Field: ‘result’
[17:37:44.003]   - Field: ‘asynchronous’
[17:37:44.003]   - Field: ‘calls’
[17:37:44.003]   - Field: ‘globals’
[17:37:44.003]   - Field: ‘stdout’
[17:37:44.003]   - Field: ‘earlySignal’
[17:37:44.003]   - Field: ‘lazy’
[17:37:44.003]   - Field: ‘state’
[17:37:44.003] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:37:44.003] - Launch lazy future ...
[17:37:44.004] Packages needed by the future expression (n = 0): <none>
[17:37:44.004] Packages needed by future strategies (n = 0): <none>
[17:37:44.004] {
[17:37:44.004]     {
[17:37:44.004]         {
[17:37:44.004]             ...future.startTime <- base::Sys.time()
[17:37:44.004]             {
[17:37:44.004]                 {
[17:37:44.004]                   {
[17:37:44.004]                     {
[17:37:44.004]                       base::local({
[17:37:44.004]                         has_future <- base::requireNamespace("future", 
[17:37:44.004]                           quietly = TRUE)
[17:37:44.004]                         if (has_future) {
[17:37:44.004]                           ns <- base::getNamespace("future")
[17:37:44.004]                           version <- ns[[".package"]][["version"]]
[17:37:44.004]                           if (is.null(version)) 
[17:37:44.004]                             version <- utils::packageVersion("future")
[17:37:44.004]                         }
[17:37:44.004]                         else {
[17:37:44.004]                           version <- NULL
[17:37:44.004]                         }
[17:37:44.004]                         if (!has_future || version < "1.8.0") {
[17:37:44.004]                           info <- base::c(r_version = base::gsub("R version ", 
[17:37:44.004]                             "", base::R.version$version.string), 
[17:37:44.004]                             platform = base::sprintf("%s (%s-bit)", 
[17:37:44.004]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:37:44.004]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:37:44.004]                               "release", "version")], collapse = " "), 
[17:37:44.004]                             hostname = base::Sys.info()[["nodename"]])
[17:37:44.004]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:37:44.004]                             info)
[17:37:44.004]                           info <- base::paste(info, collapse = "; ")
[17:37:44.004]                           if (!has_future) {
[17:37:44.004]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:37:44.004]                               info)
[17:37:44.004]                           }
[17:37:44.004]                           else {
[17:37:44.004]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:37:44.004]                               info, version)
[17:37:44.004]                           }
[17:37:44.004]                           base::stop(msg)
[17:37:44.004]                         }
[17:37:44.004]                       })
[17:37:44.004]                     }
[17:37:44.004]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:37:44.004]                     base::options(mc.cores = 1L)
[17:37:44.004]                   }
[17:37:44.004]                   ...future.strategy.old <- future::plan("list")
[17:37:44.004]                   options(future.plan = NULL)
[17:37:44.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:37:44.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:37:44.004]                 }
[17:37:44.004]                 ...future.workdir <- getwd()
[17:37:44.004]             }
[17:37:44.004]             ...future.oldOptions <- base::as.list(base::.Options)
[17:37:44.004]             ...future.oldEnvVars <- base::Sys.getenv()
[17:37:44.004]         }
[17:37:44.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:37:44.004]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[17:37:44.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:37:44.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:37:44.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:37:44.004]             future.stdout.windows.reencode = NULL, width = 80L)
[17:37:44.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:37:44.004]             base::names(...future.oldOptions))
[17:37:44.004]     }
[17:37:44.004]     if (FALSE) {
[17:37:44.004]     }
[17:37:44.004]     else {
[17:37:44.004]         if (TRUE) {
[17:37:44.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:37:44.004]                 open = "w")
[17:37:44.004]         }
[17:37:44.004]         else {
[17:37:44.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:37:44.004]                 windows = "NUL", "/dev/null"), open = "w")
[17:37:44.004]         }
[17:37:44.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:37:44.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:37:44.004]             base::sink(type = "output", split = FALSE)
[17:37:44.004]             base::close(...future.stdout)
[17:37:44.004]         }, add = TRUE)
[17:37:44.004]     }
[17:37:44.004]     ...future.frame <- base::sys.nframe()
[17:37:44.004]     ...future.conditions <- base::list()
[17:37:44.004]     ...future.rng <- base::globalenv()$.Random.seed
[17:37:44.004]     if (FALSE) {
[17:37:44.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:37:44.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:37:44.004]     }
[17:37:44.004]     ...future.result <- base::tryCatch({
[17:37:44.004]         base::withCallingHandlers({
[17:37:44.004]             ...future.value <- base::withVisible(base::local({
[17:37:44.004]                 ...future.makeSendCondition <- base::local({
[17:37:44.004]                   sendCondition <- NULL
[17:37:44.004]                   function(frame = 1L) {
[17:37:44.004]                     if (is.function(sendCondition)) 
[17:37:44.004]                       return(sendCondition)
[17:37:44.004]                     ns <- getNamespace("parallel")
[17:37:44.004]                     if (exists("sendData", mode = "function", 
[17:37:44.004]                       envir = ns)) {
[17:37:44.004]                       parallel_sendData <- get("sendData", mode = "function", 
[17:37:44.004]                         envir = ns)
[17:37:44.004]                       envir <- sys.frame(frame)
[17:37:44.004]                       master <- NULL
[17:37:44.004]                       while (!identical(envir, .GlobalEnv) && 
[17:37:44.004]                         !identical(envir, emptyenv())) {
[17:37:44.004]                         if (exists("master", mode = "list", envir = envir, 
[17:37:44.004]                           inherits = FALSE)) {
[17:37:44.004]                           master <- get("master", mode = "list", 
[17:37:44.004]                             envir = envir, inherits = FALSE)
[17:37:44.004]                           if (inherits(master, c("SOCKnode", 
[17:37:44.004]                             "SOCK0node"))) {
[17:37:44.004]                             sendCondition <<- function(cond) {
[17:37:44.004]                               data <- list(type = "VALUE", value = cond, 
[17:37:44.004]                                 success = TRUE)
[17:37:44.004]                               parallel_sendData(master, data)
[17:37:44.004]                             }
[17:37:44.004]                             return(sendCondition)
[17:37:44.004]                           }
[17:37:44.004]                         }
[17:37:44.004]                         frame <- frame + 1L
[17:37:44.004]                         envir <- sys.frame(frame)
[17:37:44.004]                       }
[17:37:44.004]                     }
[17:37:44.004]                     sendCondition <<- function(cond) NULL
[17:37:44.004]                   }
[17:37:44.004]                 })
[17:37:44.004]                 withCallingHandlers({
[17:37:44.004]                   {
[17:37:44.004]                     do.call(function(...) {
[17:37:44.004]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:44.004]                       if (!identical(...future.globals.maxSize.org, 
[17:37:44.004]                         ...future.globals.maxSize)) {
[17:37:44.004]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:44.004]                         on.exit(options(oopts), add = TRUE)
[17:37:44.004]                       }
[17:37:44.004]                       {
[17:37:44.004]                         lapply(seq_along(...future.elements_ii), 
[17:37:44.004]                           FUN = function(jj) {
[17:37:44.004]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:44.004]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:44.004]                               envir = globalenv(), inherits = FALSE)
[17:37:44.004]                             ...future.FUN(...future.X_jj, ...)
[17:37:44.004]                           })
[17:37:44.004]                       }
[17:37:44.004]                     }, args = future.call.arguments)
[17:37:44.004]                   }
[17:37:44.004]                 }, immediateCondition = function(cond) {
[17:37:44.004]                   sendCondition <- ...future.makeSendCondition()
[17:37:44.004]                   sendCondition(cond)
[17:37:44.004]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:44.004]                   {
[17:37:44.004]                     inherits <- base::inherits
[17:37:44.004]                     invokeRestart <- base::invokeRestart
[17:37:44.004]                     is.null <- base::is.null
[17:37:44.004]                     muffled <- FALSE
[17:37:44.004]                     if (inherits(cond, "message")) {
[17:37:44.004]                       muffled <- grepl(pattern, "muffleMessage")
[17:37:44.004]                       if (muffled) 
[17:37:44.004]                         invokeRestart("muffleMessage")
[17:37:44.004]                     }
[17:37:44.004]                     else if (inherits(cond, "warning")) {
[17:37:44.004]                       muffled <- grepl(pattern, "muffleWarning")
[17:37:44.004]                       if (muffled) 
[17:37:44.004]                         invokeRestart("muffleWarning")
[17:37:44.004]                     }
[17:37:44.004]                     else if (inherits(cond, "condition")) {
[17:37:44.004]                       if (!is.null(pattern)) {
[17:37:44.004]                         computeRestarts <- base::computeRestarts
[17:37:44.004]                         grepl <- base::grepl
[17:37:44.004]                         restarts <- computeRestarts(cond)
[17:37:44.004]                         for (restart in restarts) {
[17:37:44.004]                           name <- restart$name
[17:37:44.004]                           if (is.null(name)) 
[17:37:44.004]                             next
[17:37:44.004]                           if (!grepl(pattern, name)) 
[17:37:44.004]                             next
[17:37:44.004]                           invokeRestart(restart)
[17:37:44.004]                           muffled <- TRUE
[17:37:44.004]                           break
[17:37:44.004]                         }
[17:37:44.004]                       }
[17:37:44.004]                     }
[17:37:44.004]                     invisible(muffled)
[17:37:44.004]                   }
[17:37:44.004]                   muffleCondition(cond)
[17:37:44.004]                 })
[17:37:44.004]             }))
[17:37:44.004]             future::FutureResult(value = ...future.value$value, 
[17:37:44.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:44.004]                   ...future.rng), globalenv = if (FALSE) 
[17:37:44.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:37:44.004]                     ...future.globalenv.names))
[17:37:44.004]                 else NULL, started = ...future.startTime, version = "1.8")
[17:37:44.004]         }, condition = base::local({
[17:37:44.004]             c <- base::c
[17:37:44.004]             inherits <- base::inherits
[17:37:44.004]             invokeRestart <- base::invokeRestart
[17:37:44.004]             length <- base::length
[17:37:44.004]             list <- base::list
[17:37:44.004]             seq.int <- base::seq.int
[17:37:44.004]             signalCondition <- base::signalCondition
[17:37:44.004]             sys.calls <- base::sys.calls
[17:37:44.004]             `[[` <- base::`[[`
[17:37:44.004]             `+` <- base::`+`
[17:37:44.004]             `<<-` <- base::`<<-`
[17:37:44.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:37:44.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:37:44.004]                   3L)]
[17:37:44.004]             }
[17:37:44.004]             function(cond) {
[17:37:44.004]                 is_error <- inherits(cond, "error")
[17:37:44.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:37:44.004]                   NULL)
[17:37:44.004]                 if (is_error) {
[17:37:44.004]                   sessionInformation <- function() {
[17:37:44.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:37:44.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:37:44.004]                       search = base::search(), system = base::Sys.info())
[17:37:44.004]                   }
[17:37:44.004]                   ...future.conditions[[length(...future.conditions) + 
[17:37:44.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:37:44.004]                     cond$call), session = sessionInformation(), 
[17:37:44.004]                     timestamp = base::Sys.time(), signaled = 0L)
[17:37:44.004]                   signalCondition(cond)
[17:37:44.004]                 }
[17:37:44.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:37:44.004]                 "immediateCondition"))) {
[17:37:44.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:37:44.004]                   ...future.conditions[[length(...future.conditions) + 
[17:37:44.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:37:44.004]                   if (TRUE && !signal) {
[17:37:44.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:44.004]                     {
[17:37:44.004]                       inherits <- base::inherits
[17:37:44.004]                       invokeRestart <- base::invokeRestart
[17:37:44.004]                       is.null <- base::is.null
[17:37:44.004]                       muffled <- FALSE
[17:37:44.004]                       if (inherits(cond, "message")) {
[17:37:44.004]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:44.004]                         if (muffled) 
[17:37:44.004]                           invokeRestart("muffleMessage")
[17:37:44.004]                       }
[17:37:44.004]                       else if (inherits(cond, "warning")) {
[17:37:44.004]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:44.004]                         if (muffled) 
[17:37:44.004]                           invokeRestart("muffleWarning")
[17:37:44.004]                       }
[17:37:44.004]                       else if (inherits(cond, "condition")) {
[17:37:44.004]                         if (!is.null(pattern)) {
[17:37:44.004]                           computeRestarts <- base::computeRestarts
[17:37:44.004]                           grepl <- base::grepl
[17:37:44.004]                           restarts <- computeRestarts(cond)
[17:37:44.004]                           for (restart in restarts) {
[17:37:44.004]                             name <- restart$name
[17:37:44.004]                             if (is.null(name)) 
[17:37:44.004]                               next
[17:37:44.004]                             if (!grepl(pattern, name)) 
[17:37:44.004]                               next
[17:37:44.004]                             invokeRestart(restart)
[17:37:44.004]                             muffled <- TRUE
[17:37:44.004]                             break
[17:37:44.004]                           }
[17:37:44.004]                         }
[17:37:44.004]                       }
[17:37:44.004]                       invisible(muffled)
[17:37:44.004]                     }
[17:37:44.004]                     muffleCondition(cond, pattern = "^muffle")
[17:37:44.004]                   }
[17:37:44.004]                 }
[17:37:44.004]                 else {
[17:37:44.004]                   if (TRUE) {
[17:37:44.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:37:44.004]                     {
[17:37:44.004]                       inherits <- base::inherits
[17:37:44.004]                       invokeRestart <- base::invokeRestart
[17:37:44.004]                       is.null <- base::is.null
[17:37:44.004]                       muffled <- FALSE
[17:37:44.004]                       if (inherits(cond, "message")) {
[17:37:44.004]                         muffled <- grepl(pattern, "muffleMessage")
[17:37:44.004]                         if (muffled) 
[17:37:44.004]                           invokeRestart("muffleMessage")
[17:37:44.004]                       }
[17:37:44.004]                       else if (inherits(cond, "warning")) {
[17:37:44.004]                         muffled <- grepl(pattern, "muffleWarning")
[17:37:44.004]                         if (muffled) 
[17:37:44.004]                           invokeRestart("muffleWarning")
[17:37:44.004]                       }
[17:37:44.004]                       else if (inherits(cond, "condition")) {
[17:37:44.004]                         if (!is.null(pattern)) {
[17:37:44.004]                           computeRestarts <- base::computeRestarts
[17:37:44.004]                           grepl <- base::grepl
[17:37:44.004]                           restarts <- computeRestarts(cond)
[17:37:44.004]                           for (restart in restarts) {
[17:37:44.004]                             name <- restart$name
[17:37:44.004]                             if (is.null(name)) 
[17:37:44.004]                               next
[17:37:44.004]                             if (!grepl(pattern, name)) 
[17:37:44.004]                               next
[17:37:44.004]                             invokeRestart(restart)
[17:37:44.004]                             muffled <- TRUE
[17:37:44.004]                             break
[17:37:44.004]                           }
[17:37:44.004]                         }
[17:37:44.004]                       }
[17:37:44.004]                       invisible(muffled)
[17:37:44.004]                     }
[17:37:44.004]                     muffleCondition(cond, pattern = "^muffle")
[17:37:44.004]                   }
[17:37:44.004]                 }
[17:37:44.004]             }
[17:37:44.004]         }))
[17:37:44.004]     }, error = function(ex) {
[17:37:44.004]         base::structure(base::list(value = NULL, visible = NULL, 
[17:37:44.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:37:44.004]                 ...future.rng), started = ...future.startTime, 
[17:37:44.004]             finished = Sys.time(), session_uuid = NA_character_, 
[17:37:44.004]             version = "1.8"), class = "FutureResult")
[17:37:44.004]     }, finally = {
[17:37:44.004]         if (!identical(...future.workdir, getwd())) 
[17:37:44.004]             setwd(...future.workdir)
[17:37:44.004]         {
[17:37:44.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:37:44.004]                 ...future.oldOptions$nwarnings <- NULL
[17:37:44.004]             }
[17:37:44.004]             base::options(...future.oldOptions)
[17:37:44.004]             if (.Platform$OS.type == "windows") {
[17:37:44.004]                 old_names <- names(...future.oldEnvVars)
[17:37:44.004]                 envs <- base::Sys.getenv()
[17:37:44.004]                 names <- names(envs)
[17:37:44.004]                 common <- intersect(names, old_names)
[17:37:44.004]                 added <- setdiff(names, old_names)
[17:37:44.004]                 removed <- setdiff(old_names, names)
[17:37:44.004]                 changed <- common[...future.oldEnvVars[common] != 
[17:37:44.004]                   envs[common]]
[17:37:44.004]                 NAMES <- toupper(changed)
[17:37:44.004]                 args <- list()
[17:37:44.004]                 for (kk in seq_along(NAMES)) {
[17:37:44.004]                   name <- changed[[kk]]
[17:37:44.004]                   NAME <- NAMES[[kk]]
[17:37:44.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:44.004]                     next
[17:37:44.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:44.004]                 }
[17:37:44.004]                 NAMES <- toupper(added)
[17:37:44.004]                 for (kk in seq_along(NAMES)) {
[17:37:44.004]                   name <- added[[kk]]
[17:37:44.004]                   NAME <- NAMES[[kk]]
[17:37:44.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:44.004]                     next
[17:37:44.004]                   args[[name]] <- ""
[17:37:44.004]                 }
[17:37:44.004]                 NAMES <- toupper(removed)
[17:37:44.004]                 for (kk in seq_along(NAMES)) {
[17:37:44.004]                   name <- removed[[kk]]
[17:37:44.004]                   NAME <- NAMES[[kk]]
[17:37:44.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:37:44.004]                     next
[17:37:44.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:37:44.004]                 }
[17:37:44.004]                 if (length(args) > 0) 
[17:37:44.004]                   base::do.call(base::Sys.setenv, args = args)
[17:37:44.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:37:44.004]             }
[17:37:44.004]             else {
[17:37:44.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:37:44.004]             }
[17:37:44.004]             {
[17:37:44.004]                 if (base::length(...future.futureOptionsAdded) > 
[17:37:44.004]                   0L) {
[17:37:44.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:37:44.004]                   base::names(opts) <- ...future.futureOptionsAdded
[17:37:44.004]                   base::options(opts)
[17:37:44.004]                 }
[17:37:44.004]                 {
[17:37:44.004]                   {
[17:37:44.004]                     base::options(mc.cores = ...future.mc.cores.old)
[17:37:44.004]                     NULL
[17:37:44.004]                   }
[17:37:44.004]                   options(future.plan = NULL)
[17:37:44.004]                   if (is.na(NA_character_)) 
[17:37:44.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:37:44.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:37:44.004]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:37:44.004]                     .init = FALSE)
[17:37:44.004]                 }
[17:37:44.004]             }
[17:37:44.004]         }
[17:37:44.004]     })
[17:37:44.004]     if (TRUE) {
[17:37:44.004]         base::sink(type = "output", split = FALSE)
[17:37:44.004]         if (TRUE) {
[17:37:44.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:37:44.004]         }
[17:37:44.004]         else {
[17:37:44.004]             ...future.result["stdout"] <- base::list(NULL)
[17:37:44.004]         }
[17:37:44.004]         base::close(...future.stdout)
[17:37:44.004]         ...future.stdout <- NULL
[17:37:44.004]     }
[17:37:44.004]     ...future.result$conditions <- ...future.conditions
[17:37:44.004]     ...future.result$finished <- base::Sys.time()
[17:37:44.004]     ...future.result
[17:37:44.004] }
[17:37:44.007] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[17:37:44.007] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[17:37:44.007] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[17:37:44.007] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[17:37:44.008] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[17:37:44.008] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:37:44.008] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:37:44.008] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[17:37:44.009] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[17:37:44.009] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[17:37:44.009] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[17:37:44.009] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[17:37:44.010] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[17:37:44.010] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[17:37:44.010] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[17:37:44.010] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[17:37:44.011] MultisessionFuture started
[17:37:44.011] - Launch lazy future ... done
[17:37:44.011] run() for ‘MultisessionFuture’ ... done
[17:37:44.011] Created future:
[17:37:44.011] MultisessionFuture:
[17:37:44.011] Label: ‘future_replicate-2’
[17:37:44.011] Expression:
[17:37:44.011] {
[17:37:44.011]     do.call(function(...) {
[17:37:44.011]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[17:37:44.011]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[17:37:44.011]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[17:37:44.011]             on.exit(options(oopts), add = TRUE)
[17:37:44.011]         }
[17:37:44.011]         {
[17:37:44.011]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[17:37:44.011]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[17:37:44.011]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[17:37:44.011]                   envir = globalenv(), inherits = FALSE)
[17:37:44.011]                 ...future.FUN(...future.X_jj, ...)
[17:37:44.011]             })
[17:37:44.011]         }
[17:37:44.011]     }, args = future.call.arguments)
[17:37:44.011] }
[17:37:44.011] Lazy evaluation: FALSE
[17:37:44.011] Asynchronous evaluation: TRUE
[17:37:44.011] Local evaluation: TRUE
[17:37:44.011] Environment: 0x5640c11b3460
[17:37:44.011] Capture standard output: TRUE
[17:37:44.011] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:37:44.011] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[17:37:44.011] Packages: <none>
[17:37:44.011] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[17:37:44.011] Resolved: FALSE
[17:37:44.011] Value: <not collected>
[17:37:44.011] Conditions captured: <none>
[17:37:44.011] Early signaling: FALSE
[17:37:44.011] Owner process: bf97e00b-f150-93d8-2388-31bbe0581eb6
[17:37:44.011] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:37:44.023] Chunk #2 of 2 ... DONE
[17:37:44.023] Launching 2 futures (chunks) ... DONE
[17:37:44.023] Resolving 2 futures (chunks) ...
[17:37:44.023] resolve() on list ...
[17:37:44.023]  recursive: 0
[17:37:44.023]  length: 2
[17:37:44.023] 
[17:37:44.024] receiveMessageFromWorker() for ClusterFuture ...
[17:37:44.024] - Validating connection of MultisessionFuture
[17:37:44.024] - received message: FutureResult
[17:37:44.024] - Received FutureResult
[17:37:44.024] - Erased future from FutureRegistry
[17:37:44.024] result() for ClusterFuture ...
[17:37:44.025] - result already collected: FutureResult
[17:37:44.025] result() for ClusterFuture ... done
[17:37:44.025] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:44.025] Future #1
[17:37:44.025] result() for ClusterFuture ...
[17:37:44.025] - result already collected: FutureResult
[17:37:44.025] result() for ClusterFuture ... done
[17:37:44.025] result() for ClusterFuture ...
[17:37:44.025] - result already collected: FutureResult
[17:37:44.025] result() for ClusterFuture ... done
[17:37:44.025] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:37:44.026] - nx: 2
[17:37:44.026] - relay: TRUE
[17:37:44.026] - stdout: TRUE
[17:37:44.026] - signal: TRUE
[17:37:44.026] - resignal: FALSE
[17:37:44.026] - force: TRUE
[17:37:44.026] - relayed: [n=2] FALSE, FALSE
[17:37:44.026] - queued futures: [n=2] FALSE, FALSE
[17:37:44.026]  - until=1
[17:37:44.026]  - relaying element #1
[17:37:44.026] result() for ClusterFuture ...
[17:37:44.026] - result already collected: FutureResult
[17:37:44.027] result() for ClusterFuture ... done
[17:37:44.027] result() for ClusterFuture ...
[17:37:44.027] - result already collected: FutureResult
[17:37:44.027] result() for ClusterFuture ... done
[17:37:44.027] result() for ClusterFuture ...
[17:37:44.027] - result already collected: FutureResult
[17:37:44.027] result() for ClusterFuture ... done
[17:37:44.027] result() for ClusterFuture ...
[17:37:44.027] - result already collected: FutureResult
[17:37:44.027] result() for ClusterFuture ... done
[17:37:44.027] - relayed: [n=2] TRUE, FALSE
[17:37:44.028] - queued futures: [n=2] TRUE, FALSE
[17:37:44.028] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:37:44.028]  length: 1 (resolved future 1)
[17:37:44.054] receiveMessageFromWorker() for ClusterFuture ...
[17:37:44.054] - Validating connection of MultisessionFuture
[17:37:44.054] - received message: FutureResult
[17:37:44.054] - Received FutureResult
[17:37:44.055] - Erased future from FutureRegistry
[17:37:44.055] result() for ClusterFuture ...
[17:37:44.055] - result already collected: FutureResult
[17:37:44.055] result() for ClusterFuture ... done
[17:37:44.055] receiveMessageFromWorker() for ClusterFuture ... done
[17:37:44.055] Future #2
[17:37:44.055] result() for ClusterFuture ...
[17:37:44.055] - result already collected: FutureResult
[17:37:44.055] result() for ClusterFuture ... done
[17:37:44.055] result() for ClusterFuture ...
[17:37:44.055] - result already collected: FutureResult
[17:37:44.056] result() for ClusterFuture ... done
[17:37:44.056] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:37:44.056] - nx: 2
[17:37:44.056] - relay: TRUE
[17:37:44.056] - stdout: TRUE
[17:37:44.056] - signal: TRUE
[17:37:44.056] - resignal: FALSE
[17:37:44.056] - force: TRUE
[17:37:44.056] - relayed: [n=2] TRUE, FALSE
[17:37:44.056] - queued futures: [n=2] TRUE, FALSE
[17:37:44.056]  - until=2
[17:37:44.057]  - relaying element #2
[17:37:44.057] result() for ClusterFuture ...
[17:37:44.057] - result already collected: FutureResult
[17:37:44.057] result() for ClusterFuture ... done
[17:37:44.057] result() for ClusterFuture ...
[17:37:44.057] - result already collected: FutureResult
[17:37:44.057] result() for ClusterFuture ... done
[17:37:44.057] result() for ClusterFuture ...
[17:37:44.057] - result already collected: FutureResult
[17:37:44.057] result() for ClusterFuture ... done
[17:37:44.057] result() for ClusterFuture ...
[17:37:44.058] - result already collected: FutureResult
[17:37:44.058] result() for ClusterFuture ... done
[17:37:44.058] - relayed: [n=2] TRUE, TRUE
[17:37:44.058] - queued futures: [n=2] TRUE, TRUE
[17:37:44.058] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:37:44.058]  length: 0 (resolved future 2)
[17:37:44.058] Relaying remaining futures
[17:37:44.058] signalConditionsASAP(NULL, pos=0) ...
[17:37:44.058] - nx: 2
[17:37:44.058] - relay: TRUE
[17:37:44.058] - stdout: TRUE
[17:37:44.058] - signal: TRUE
[17:37:44.059] - resignal: FALSE
[17:37:44.059] - force: TRUE
[17:37:44.059] - relayed: [n=2] TRUE, TRUE
[17:37:44.059] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:37:44.059] - relayed: [n=2] TRUE, TRUE
[17:37:44.059] - queued futures: [n=2] TRUE, TRUE
[17:37:44.059] signalConditionsASAP(NULL, pos=0) ... done
[17:37:44.059] resolve() on list ... DONE
[17:37:44.059] result() for ClusterFuture ...
[17:37:44.059] - result already collected: FutureResult
[17:37:44.059] result() for ClusterFuture ... done
[17:37:44.060] result() for ClusterFuture ...
[17:37:44.060] - result already collected: FutureResult
[17:37:44.060] result() for ClusterFuture ... done
[17:37:44.060] result() for ClusterFuture ...
[17:37:44.060] - result already collected: FutureResult
[17:37:44.060] result() for ClusterFuture ... done
[17:37:44.060] result() for ClusterFuture ...
[17:37:44.060] - result already collected: FutureResult
[17:37:44.060] result() for ClusterFuture ... done
[17:37:44.060]  - Number of value chunks collected: 2
[17:37:44.060] Resolving 2 futures (chunks) ... DONE
[17:37:44.061] Reducing values from 2 chunks ...
[17:37:44.061]  - Number of values collected after concatenation: 5
[17:37:44.061]  - Number of values expected: 5
[17:37:44.061] Reducing values from 2 chunks ... DONE
[17:37:44.061] future_lapply() ... DONE
[17:37:44.061] plan(): Setting new future strategy stack:
[17:37:44.061] List of future strategies:
[17:37:44.061] 1. sequential:
[17:37:44.061]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:44.061]    - tweaked: FALSE
[17:37:44.061]    - call: plan(sequential)
[17:37:44.062] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[17:37:44.063] plan(): Setting new future strategy stack:
[17:37:44.063] List of future strategies:
[17:37:44.063] 1. FutureStrategy:
[17:37:44.063]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:37:44.063]    - tweaked: FALSE
[17:37:44.063]    - call: future::plan(oplan)
[17:37:44.064] plan(): nbrOfWorkers() = 1
> 
