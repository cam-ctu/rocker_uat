
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "brio"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('brio')

Attaching package: ‘brio’

The following objects are masked from ‘package:base’:

    readLines, writeLines

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("file_line_endings")
> ### * file_line_endings
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: file_line_endings
> ### Title: Retrieve the type of line endings used by a file
> ### Aliases: file_line_endings
> 
> ### ** Examples
> 
> tf1 <- tempfile()
> tf2 <- tempfile()
> write_lines("foo", tf1, eol = "\n")
> write_lines("bar", tf2, eol = "\r\n")
> 
> file_line_endings(tf1)
[1] "\n"
> file_line_endings(tf2)
[1] "\r\n"
> 
> unlink(c(tf1, tf2))
> 
> 
> 
> cleanEx()
> nameEx("readLines")
> ### * readLines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readLines
> ### Title: Read text lines from a file
> ### Aliases: readLines
> 
> ### ** Examples
> 
> authors_file <- file.path(R.home("doc"), "AUTHORS")
> data <- readLines(authors_file)
> 
> # Trying to use connections throws an error
> con <- file(authors_file)
> try(readLines(con))
Error : Only file paths are supported by brio::readLines()
> close(con)
> 
> # Trying to use unsupported args throws a warning
> data <- readLines(authors_file, encoding = "UTF-16")
Warning: `encoding` is ignored by brio::readLines()
> 
> 
> 
> cleanEx()
> nameEx("read_file")
> ### * read_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_file
> ### Title: Read an entire file
> ### Aliases: read_file read_file_raw
> 
> ### ** Examples
> 
> authors_file <- file.path(R.home("doc"), "AUTHORS")
> data <- read_file(authors_file)
> data_raw <- read_file_raw(authors_file)
> identical(data, rawToChar(data_raw))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("read_lines")
> ### * read_lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_lines
> ### Title: Read text lines from a file
> ### Aliases: read_lines
> 
> ### ** Examples
> 
> authors_file <- file.path(R.home("doc"), "AUTHORS")
> data <- read_lines(authors_file)
> 
> 
> 
> cleanEx()
> nameEx("writeLines")
> ### * writeLines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeLines
> ### Title: Write lines to a file
> ### Aliases: writeLines
> 
> ### ** Examples
> 
> tf <- tempfile()
> 
> writeLines(rownames(mtcars), tf)
> 
> # Trying to use connections throws an error
> con <- file(tf)
> try(writeLines(con))
Error in writeLines(con) : argument "con" is missing, with no default
> close(con)
> 
> # Trying to use unsupported args throws a warning
> writeLines(rownames(mtcars), tf, useBytes = TRUE)
Warning: `useBytes` is ignored by brio::writeLines()
> 
> unlink(tf)
> 
> 
> 
> cleanEx()
> nameEx("write_file")
> ### * write_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_file
> ### Title: Write data to a file
> ### Aliases: write_file
> 
> ### ** Examples
> 
> tf <- tempfile()
> 
> write_file("some data\n", tf)
> 
> unlink(tf)
> 
> 
> 
> cleanEx()
> nameEx("write_file_raw")
> ### * write_file_raw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_file_raw
> ### Title: Write data to a file
> ### Aliases: write_file_raw
> 
> ### ** Examples
> 
> tf <- tempfile()
> 
> write_file_raw(as.raw(c(0x66, 0x6f, 0x6f, 0x0, 0x62, 0x61, 0x72)), tf)
> 
> unlink(tf)
> 
> 
> 
> cleanEx()
> nameEx("write_lines")
> ### * write_lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_lines
> ### Title: Write lines to a file
> ### Aliases: write_lines
> 
> ### ** Examples
> 
> tf <- tempfile()
> 
> write_lines(rownames(mtcars), tf)
> 
> # Write with Windows style line endings
> write_lines(rownames(mtcars), tf, eol = "\r\n")
> 
> unlink(tf)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.062 0.013 0.075 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
