
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "magick"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('magick')
Linking to ImageMagick 6.9.11.60
Enabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11
Disabled features: cairo, ghostscript, raw, rsvg
Using 4 threads
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("analysis")
> ### * analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: analysis
> ### Title: Image Analysis
> ### Aliases: analysis image_compare image_compare_dist image_fft
> 
> ### ** Examples
> 
> out1 <- image_blur(logo, 3)
> out2 <- image_oilpaint(logo, 3)
> input <- c(logo, out1, out2, logo)
> if(magick_config()$version >= "6.8.7"){
+   diff_img <- image_compare(input, logo, metric = "AE")
+   attributes(diff_img)
+ }
$class
[1] "magick-image"

$distortion
[1]     0 50455 20580     0

> 
> 
> 
> cleanEx()
> nameEx("animation")
> ### * animation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: animation
> ### Title: Image Frames and Animation
> ### Aliases: animation image_animate image_coalesce image_morph
> ###   image_mosaic image_flatten image_average image_append image_apply
> ###   image_montage
> 
> ### ** Examples
> 
> # Combine images
> logo <- image_read("https://jeroen.github.io/images/Rlogo.png")
> oldlogo <- image_read("https://jeroen.github.io/images/Rlogo-old.png")
> 
> # Create morphing animation
> both <- image_scale(c(oldlogo, logo), "400")
> image_average(image_crop(both))
  format width height colorspace matte filesize density
1    PNG   400    304       sRGB  TRUE        0 118x118
> image_animate(image_morph(both, 10))
   format width height colorspace matte filesize density
1     gif   400    304       sRGB  TRUE        0 118x118
2     gif   400    304       sRGB  TRUE        0 118x118
3     gif   400    304       sRGB  TRUE        0 118x118
4     gif   400    304       sRGB  TRUE        0 118x118
5     gif   400    304       sRGB  TRUE        0 118x118
6     gif   400    304       sRGB  TRUE        0 118x118
7     gif   400    304       sRGB  TRUE        0 118x118
8     gif   400    304       sRGB  TRUE        0 118x118
9     gif   400    304       sRGB  TRUE        0 118x118
10    gif   400    304       sRGB  TRUE        0 118x118
11    gif   400    304       sRGB  TRUE        0 118x118
12    gif   400    304       sRGB  TRUE        0   72x72
> 
> # Create thumbnails from GIF
> banana <- image_read("https://jeroen.github.io/images/banana.gif")
> length(banana)
[1] 8
> image_average(banana)
  format width height colorspace matte filesize density
1    GIF   365    360       sRGB  TRUE        0   72x72
> image_flatten(banana)
  format width height colorspace matte filesize density
1    GIF   365    360       sRGB  TRUE        0   72x72
> image_append(banana)
  format width height colorspace matte filesize density
1    GIF  2920    360       sRGB  TRUE        0   72x72
> image_append(banana, stack = TRUE)
  format width height colorspace matte filesize density
1    GIF   365   2880       sRGB  TRUE        0   72x72
> 
> # Append images together
> wizard <- image_read("wizard:")
> image_append(image_scale(c(image_append(banana[c(1,3)], stack = TRUE), wizard)))
  format width height colorspace matte filesize density
1    GIF   730    720       sRGB  TRUE        0   72x72
> 
> image_composite(banana, image_scale(logo, "300"))
  format width height colorspace matte filesize density
1    GIF   365    360       sRGB  TRUE        0   72x72
2    GIF   365    360       sRGB  TRUE        0   72x72
3    GIF   365    360       sRGB  TRUE        0   72x72
4    GIF   365    360       sRGB  TRUE        0   72x72
5    GIF   365    360       sRGB  TRUE        0   72x72
6    GIF   365    360       sRGB  TRUE        0   72x72
7    GIF   365    360       sRGB  TRUE        0   72x72
8    GIF   365    360       sRGB  TRUE        0   72x72
> 
> # Break down and combine frames
> front <- image_scale(banana, "300")
> background <- image_background(image_scale(logo, "400"), 'white')
> frames <- image_apply(front, function(x){image_composite(background, x, offset = "+70+30")})
> image_animate(frames, fps = 10)
  format width height colorspace matte filesize density
1    gif   400    310       sRGB  TRUE        0   72x72
2    gif   400    310       sRGB  TRUE        0   72x72
3    gif   400    310       sRGB  TRUE        0   72x72
4    gif   400    310       sRGB  TRUE        0   72x72
5    gif   400    310       sRGB  TRUE        0   72x72
6    gif   400    310       sRGB  TRUE        0   72x72
7    gif   400    310       sRGB  TRUE        0   72x72
8    gif   400    310       sRGB  TRUE        0   72x72
> # Simple 4x3 montage
> input <- rep(logo, 12)
> image_montage(input, geometry = 'x100+10+10', tile = '4x3', bg = 'pink', shadow = TRUE)
  format width height colorspace matte filesize density
1          600    372       sRGB FALSE        0   72x72
> 
> # With varying frame size
> input <- c(wizard, wizard, logo, logo)
> image_montage(input, tile = '2x2', bg = 'pink', gravity = 'southwest')
  format width height colorspace matte filesize density
1          256    252       sRGB FALSE        0   72x72
> 
> 
> 
> cleanEx()
> nameEx("autoviewer")
> ### * autoviewer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoviewer
> ### Title: RStudio Graphics AutoViewer
> ### Aliases: autoviewer autoviewer_enable autoviewer_disable
> 
> ### ** Examples
> 
> # Only has effect in RStudio (or other GUI with a viewer):
> autoviewer_enable()
> 
> img <- magick::image_graph()
> plot(1)
> abline(0, 1, col = "blue", lwd = 2, lty = "solid")
> abline(0.1, 1, col = "red", lwd = 3, lty = "dotted")
> 
> autoviewer_disable()
> abline(0.2, 1, col = "green", lwd = 4, lty = "twodash")
> abline(0.3, 1, col = "black", lwd = 5, lty = "dotdash")
> 
> autoviewer_enable()
> abline(0.4, 1, col = "purple", lwd = 6, lty = "dashed")
> abline(0.5, 1, col = "yellow", lwd = 7, lty = "longdash")
> 
> 
> 
> cleanEx()
> nameEx("color")
> ### * color
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: color
> ### Title: Image Color
> ### Aliases: color image_modulate image_quantize image_map
> ###   image_ordered_dither image_channel image_separate image_combine
> ###   image_transparent image_background image_colorize image_contrast
> ###   image_normalize image_enhance image_equalize image_median
> 
> ### ** Examples
> 
> # manually adjust colors
> logo <- image_read("logo:")
> image_modulate(logo, brightness = 200)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_modulate(logo, saturation = 150)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_modulate(logo, hue = 200)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> 
> # Reduce image to 10 different colors using various spaces
> image_quantize(logo, max = 10, colorspace = 'gray')
  format width height colorspace matte filesize density
1    GIF   640    480       Gray FALSE        0   72x72
> image_quantize(logo, max = 10, colorspace = 'rgb')
  format width height colorspace matte filesize density
1    GIF   640    480        RGB FALSE        0   72x72
> image_quantize(logo, max = 10, colorspace = 'cmyk')
  format width height colorspace matte filesize density
1    GIF   640    480       CMYK FALSE        0   72x72
> 
> image_ordered_dither(logo, 'o8x8')
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> # Change background color
> translogo <- image_transparent(logo, 'white')
> image_background(translogo, "pink", flatten = TRUE)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB  TRUE        0   72x72
> 
> # Compare to flood-fill method:
> image_fill(logo, "pink", fuzz = 20)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> 
> # Other color tweaks
> image_colorize(logo, 50, "red")
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_contrast(logo)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_normalize(logo)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_enhance(logo)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_equalize(logo)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_median(logo)
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> 
> # Alternate way to convert into black-white
> image_convert(logo, type = 'grayscale')
  format width height colorspace matte filesize density
1    GIF   640    480       Gray FALSE        0   72x72
> 
> 
> 
> cleanEx()
> nameEx("composite")
> ### * composite
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: composite
> ### Title: Image Composite
> ### Aliases: composite image_composite image_border image_frame
> ###   image_shadow_mask image_shadow image_shade
> 
> ### ** Examples
> 
> # Compose images using one of many operators
> imlogo <- image_scale(image_read("logo:"), "x275")
> rlogo <- image_read("https://jeroen.github.io/images/Rlogo-old.png")
> 
> # Standard is atop
> image_composite(imlogo, rlogo)
  format width height colorspace matte filesize density
1    GIF   367    275       sRGB FALSE        0   72x72
> 
> # Same as 'blend 50' in the command line
> image_composite(imlogo, rlogo, operator = "blend", compose_args="50")
  format width height colorspace matte filesize density
1    GIF   367    275       sRGB FALSE        0   72x72
> 
> # Offset can be geometry or gravity
> image_composite(logo, rose, offset = "+100+100")
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> image_composite(logo, rose, gravity = "East")
  format width height colorspace matte filesize density
1    GIF   640    480       sRGB FALSE        0   72x72
> 
> # Add a border frame around the image
> image_border(imlogo, "red", "10x10")
  format width height colorspace matte filesize density
1    GIF   387    295       sRGB FALSE        0   72x72
> image_frame(imlogo)
  format width height colorspace matte filesize density
1    GIF   417    325       sRGB FALSE        0   72x72
> image_shadow(imlogo)
  format width height colorspace matte filesize density
1    GIF   417    325       sRGB  TRUE        0   72x72
> image_shade(imlogo)
  format width height colorspace matte filesize density
1    GIF   367    275       sRGB FALSE        0   72x72
> 
> 
> 
> cleanEx()
> nameEx("config")
> ### * config
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coder_info
> ### Title: Magick Configuration
> ### Aliases: coder_info magick_config magick_set_seed
> 
> ### ** Examples
> 
> coder_info("png")
$name
[1] "PNG"

$description
[1] "Portable Network Graphics"

$isReadable
[1] "TRUE"

$isWritable
[1] "TRUE"

$isMultiFrame
[1] "FALSE"

> coder_info("jpg")
$name
[1] "JPG"

$description
[1] "Joint Photographic Experts Group JFIF format"

$isReadable
[1] "TRUE"

$isWritable
[1] "TRUE"

$isMultiFrame
[1] "FALSE"

> coder_info("pdf")
$name
[1] "PDF"

$description
[1] "Portable Document Format"

$isReadable
[1] "TRUE"

$isWritable
[1] "TRUE"

$isMultiFrame
[1] "TRUE"

> coder_info("tiff")
$name
[1] "TIFF"

$description
[1] "Tagged Image File Format"

$isReadable
[1] "TRUE"

$isWritable
[1] "TRUE"

$isMultiFrame
[1] "TRUE"

> coder_info("gif")
$name
[1] "GIF"

$description
[1] "CompuServe graphics interchange format"

$isReadable
[1] "TRUE"

$isWritable
[1] "TRUE"

$isMultiFrame
[1] "TRUE"

> # Reproduce random image
> magick_set_seed(123)
> image_blank(200,200, pseudo_image = "plasma:fractal")
    format width height colorspace matte filesize density
1 GRADIENT   200    200       sRGB FALSE        0   72x72
> 
> 
> 
> cleanEx()
> nameEx("defines")
> ### * defines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: defines
> ### Title: Set encoder defines
> ### Aliases: defines image_set_defines
> 
> ### ** Examples
> 
> # Write an image
> x <- image_read("https://jeroen.github.io/images/frink.png")
> image_write(x, "frink.png")
> 
> # Pass some properties to PNG encoder
> defines <- c("png:compression-filter" = "1", "png:compression-level" = "0")
> image_set_defines(x, defines)
> image_write(x, "frink-uncompressed.png")
> 
> # Unset properties
> defines[1:2] = NA
> image_set_defines(x, defines)
> image_write(x, "frink-final.png")
> 
> # Compare size and cleanup
> file.info(c("frink.png", "frink-uncompressed.png", "frink-final.png"))
                         size isdir mode               mtime
frink.png               67162 FALSE  644 2024-12-19 09:46:21
frink-uncompressed.png 392531 FALSE  644 2024-12-19 09:46:21
frink-final.png         67162 FALSE  644 2024-12-19 09:46:21
                                     ctime               atime uid gid uname
frink.png              2024-12-19 09:46:21 2024-12-19 09:46:21   0   0  root
frink-uncompressed.png 2024-12-19 09:46:21 2024-12-19 09:46:21   0   0  root
frink-final.png        2024-12-19 09:46:21 2024-12-19 09:46:21   0   0  root
                       grname
frink.png                root
frink-uncompressed.png   root
frink-final.png          root
> unlink(c("frink.png", "frink-uncompressed.png", "frink-final.png"))
> 
> 
> 
> cleanEx()
> nameEx("device")
> ### * device
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: device
> ### Title: Magick Graphics Device
> ### Aliases: device image_graph image_device image_draw image_capture
> 
> ### ** Examples
> 
> # Regular image
> frink <- image_read("https://jeroen.github.io/images/frink.png")
> 
> # Produce image using graphics device
> fig <- image_graph(res = 96)
> ggplot2::qplot(mpg, wt, data = mtcars, colour = cyl)
Warning: `qplot()` was deprecated in ggplot2 3.4.0.
> dev.off()
pdf 
  2 
> 
> # Combine
> out <- image_composite(fig, frink, offset = "+70+30")
> print(out)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      800    600 sRGB       TRUE         0 96x96  
> 
> # Or paint over an existing image
> img <- image_draw(frink)
> rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
> abline(h = 300, col = 'blue', lwd = '10', lty = "dotted")
> text(10, 250, "Hoiven-Glaven", family = "monospace", cex = 4, srt = 90)
> palette(rainbow(11, end = 0.9))
> symbols(rep(200, 11), seq(0, 400, 40), circles = runif(11, 5, 35),
+   bg = 1:11, inches = FALSE, add = TRUE)
> dev.off()
pdf 
  2 
> print(img)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      220    445 sRGB       TRUE         0 72x72  
> 
> 
> 
> 
> cleanEx()
> nameEx("edges")
> ### * edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edges
> ### Title: Edge / Line Detection
> ### Aliases: edges image_edge image_canny image_hough_draw image_hough_txt
> 
> ### ** Examples
> 
> if(magick_config()$version > "6.8.9"){
+ shape <- demo_image("shape_rectangle.gif")
+ rectangle <- image_canny(shape)
+ rectangle |> image_hough_draw('5x5+20')
+ rectangle |> image_hough_txt(format = 'svg') |> cat()
+ }
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
  "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg width="100" height="100">
<desc>Hough line transform: 5x5+20</desc>
<desc>x1,y1  x2,y2 # count angle distance</desc>
  <line x1="50.5774" y1="0" x2="-7.15768" y2="100"/>
<desc>22 30 46</desc>
  <line x1="0" y1="7.99262" x2="100" y2="63.4235"/>
<desc>35 119 58</desc>
  <line x1="0" y1="6.54068" x2="100" y2="66.6267"/>
<desc>35 121 59</desc>
  <line x1="0" y1="35.5662" x2="100" y2="93.3013"/>
<desc>50 120 83</desc>
  <line x1="108.312" y1="0" x2="50.5774" y2="100"/>
<desc>24 30 96</desc>
</svg>
> 
> 
> 
> cleanEx()
> nameEx("editing")
> ### * editing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: editing
> ### Title: Image Editing
> ### Aliases: editing image_read image_read_svg image_read_pdf
> ###   image_read_video image_write image_convert image_data image_raster
> ###   image_display image_browse image_strip image_blank image_destroy
> ###   image_join image_attributes image_get_artifact demo_image
> 
> ### ** Examples
> 
> # Download image from the web
> frink <- image_read("https://jeroen.github.io/images/frink.png")
> worldcup_frink <- image_fill(frink, "orange", "+100+200", 20)
> image_write(worldcup_frink, "output.png")
> 
> # extract raw bitmap array
> bitmap <- frink[[1]]
> 
> # replace pixels with #FF69B4 ('hot pink') and convert back to image
> bitmap[,50:100, 50:100] <- as.raw(c(0xff, 0x69, 0xb4, 0xff))
> image_read(bitmap)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      220    445 sRGB       TRUE         0 72x72  
> 
> # Plot to graphics device via legacy raster format
> raster <- as.raster(frink)
> par(ask=FALSE)
> plot(raster)
> 
> # Read bitmap arrays from other image packages
> download.file("https://jeroen.github.io/images/example.webp", "example.webp", mode = 'wb')
trying URL 'https://jeroen.github.io/images/example.webp'
Content type 'image/webp' length 60600 bytes (59 KB)
==================================================
downloaded 59 KB

> if(require(webp)) image_read(webp::read_webp("example.webp"))
Loading required package: webp
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘webp’
> unlink(c("example.webp", "output.png"))
> if(require(rsvg)){
+ tiger <- image_read_svg("http://jeroen.github.io/images/tiger.svg")
+ svgtxt <- '<?xml version="1.0" encoding="UTF-8"?>
+ <svg width="400" height="400" viewBox="0 0 400 400" fill="none">
+  <circle fill="steelblue" cx="200" cy="200" r="100" />
+  <circle fill="yellow" cx="200" cy="200" r="90" />
+ </svg>'
+ circles <- image_read_svg(svgtxt)
+ }
Loading required package: rsvg
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘rsvg’
> if(require(pdftools))
+ image_read_pdf(file.path(R.home('doc'), 'NEWS.pdf'), pages = 1, density = 100)
Loading required package: pdftools
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘pdftools’
> # create a solid canvas
> image_blank(600, 400, "green")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 png      600    400 sRGB       FALSE        0 72x72  
> image_blank(600, 400, pseudo_image = "radial-gradient:purple-yellow")
# A tibble: 1 × 7
  format          width height colorspace matte filesize density
  <chr>           <int>  <int> <chr>      <lgl>    <int> <chr>  
1 RADIAL-GRADIENT   600    400 sRGB       FALSE        0 72x72  
> image_blank(200, 200, pseudo_image = "gradient:#3498db-#db3a34",
+   defines = c('gradient:direction' = 'east'))
# A tibble: 1 × 7
  format   width height colorspace matte filesize density
  <chr>    <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GRADIENT   200    200 sRGB       FALSE        0 72x72  
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("effects")
> ### * effects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: effects
> ### Title: Image Effects
> ### Aliases: effects image_despeckle image_reducenoise image_noise
> ###   image_blur image_motion_blur image_charcoal image_oilpaint
> ###   image_emboss image_implode image_negate
> 
> ### ** Examples
> 
> logo <- image_read("logo:")
> image_despeckle(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_reducenoise(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_noise(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_blur(logo, 10, 10)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_motion_blur(logo, 10, 10, 45)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_charcoal(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 Gray       FALSE        0 72x72  
> image_oilpaint(logo, radius = 3)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_emboss(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_implode(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_negate(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> 
> 
> 
> cleanEx()
> nameEx("fx")
> ### * fx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fx
> ### Title: Image FX
> ### Aliases: fx image_fx image_fx_sequence
> 
> ### ** Examples
> 
> # Show image_fx() expression
> img <- image_convert(logo, colorspace = "Gray")
> gradient_x <- image_convolve(img, kernel = "Prewitt")
> gradient_y <- image_convolve(img, kernel = "Prewitt:90")
> gradient <- c(image_fx(gradient_x, expression = "p^2"),
+                 image_fx(gradient_y, expression = "p^2"))
> gradient <- image_flatten(gradient, operator = "Plus")
> #gradient <- image_fx(gradient, expression = "sqrt(p)")
> gradient
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 RGB        FALSE        0 72x72  
> 
> # Use multiple source images
> 
> 
> 
> cleanEx()
> nameEx("geometry")
> ### * geometry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geometry
> ### Title: Geometry Helpers
> ### Aliases: geometry geometry_point geometry_area geometry_size_pixels
> ###   geometry_size_percent
> 
> ### ** Examples
> 
> # Specify a point
> logo <- image_read("logo:")
> image_annotate(logo, "Some text", location = geometry_point(100, 200), size = 24)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       TRUE         0 72x72  
> 
> # Specify image area
> image_crop(logo, geometry_area(300, 300), repage = FALSE)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      300    300 sRGB       FALSE        0 72x72  
> image_crop(logo, geometry_area(300, 300, 100, 100), repage = FALSE)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      300    300 sRGB       FALSE        0 72x72  
> 
> # Specify image size
> image_resize(logo, geometry_size_pixels(300))
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      300    225 sRGB       FALSE        0 72x72  
> image_resize(logo, geometry_size_pixels(height = 300))
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      400    300 sRGB       FALSE        0 72x72  
> image_resize(logo, geometry_size_pixels(300, 300, preserve_aspect = FALSE))
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      300    300 sRGB       FALSE        0 72x72  
> 
> # resize relative to current size
> image_resize(logo, geometry_size_percent(50))
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      320    240 sRGB       FALSE        0 72x72  
> image_resize(logo, geometry_size_percent(50, 20))
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      320     96 sRGB       FALSE        0 72x72  
> 
> 
> 
> 
> cleanEx()
> nameEx("image_ggplot")
> ### * image_ggplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: image_ggplot
> ### Title: Image to ggplot
> ### Aliases: image_ggplot
> 
> ### ** Examples
> 
> # Plot with base R
> plot(logo)
> 
> # Plot image with ggplot2
> library(ggplot2)
> myplot <- image_ggplot(logo)
> myplot + ggtitle("Test plot")
> 
> # Show that coordinates are reversed:
> myplot + theme_classic()
> 
> # Or add to plot as annotation
> image <- image_fill(logo, 'none')
> raster <- as.raster(image)
> myplot <- qplot(mpg, wt, data = mtcars)
> myplot + annotation_raster(raster, 25, 35, 3, 5)
> 
> # Or overplot image using grid
> library(grid)
> qplot(speed, dist, data = cars, geom = c("point", "smooth"))
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> grid.raster(image)
> 
> 
> 
> cleanEx()

detaching ‘package:grid’, ‘package:ggplot2’

> nameEx("morphology")
> ### * morphology
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: morphology
> ### Title: Morphology
> ### Aliases: morphology image_morphology image_convolve
> 
> ### ** Examples
> 
> #example from IM website:
> if(magick_config()$version > "6.8.8"){
+ pixel <- image_blank(1, 1, 'white') |> image_border('black', '5x5')
+ 
+ # See the effect of Dilate method
+ pixel |> image_scale('800%')
+ pixel |> image_morphology('Dilate', "Diamond") |> image_scale('800%')
+ 
+ # These produce the same output:
+ pixel |> image_morphology('Dilate', "Diamond", iter = 3) |> image_scale('800%')
+ pixel |> image_morphology('Dilate', "Diamond:3") |> image_scale('800%')
+ 
+ # Plus example
+ pixel |> image_morphology('Dilate', "Plus", iterations = 2) |> image_scale('800%')
+ 
+ # Rose examples
+ rose |> image_morphology('ErodeI', 'Octagon', iter = 3)
+ rose |> image_morphology('DilateI', 'Octagon', iter = 3)
+ rose |> image_morphology('OpenI', 'Octagon', iter = 3)
+ rose |> image_morphology('CloseI', 'Octagon', iter = 3)
+ 
+ # Edge detection
+ man <- demo_image('man.gif')
+ man |> image_morphology('EdgeIn', 'Octagon')
+ man |> image_morphology('EdgeOut', 'Octagon')
+ man |> image_morphology('Edge', 'Octagon')
+ 
+ # Octagonal Convex Hull
+  man |>
+    image_morphology('Close', 'Diamond') |>
+    image_morphology('Thicken', 'ConvexHull', iterations = 1)
+ 
+ # Thinning down to a Skeleton
+ man |> image_morphology('Thinning', 'Skeleton', iterations = 1)
+ 
+ # Specify custom kernel matrix usingn a string:
+ img <- demo_image("test_mag.gif")
+ i <- image_convolve(img, kernel = '4x5:
+        0 -1  0  0
+       -1 +1 -1  0
+       -1 +1 -1  0
+       -1 +1 +1 -1
+        0 -1 -1  0 ', bias = "50%")
+ }
> 
> 
> 
> cleanEx()
> nameEx("ocr")
> ### * ocr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ocr
> ### Title: Image Text OCR
> ### Aliases: ocr image_ocr image_ocr_data
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("painting")
> ### * painting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: painting
> ### Title: Image Painting
> ### Aliases: painting image_fill image_annotate
> 
> ### ** Examples
> 
> logo <- image_read("logo:")
> logo <- image_background(logo, 'white')
> image_fill(logo, "pink", point = "+450+400")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> image_fill(logo, "pink", point = "+450+400", fuzz = 25)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       FALSE        0 72x72  
> # Add some text to an image
> image_annotate(logo, "This is a test")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       TRUE         0 72x72  
> image_annotate(logo, "CONFIDENTIAL", size = 50, color = "red", boxcolor = "pink",
+  degrees = 30, location = "+100+100")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       TRUE         0 72x72  
> 
> # Setting fonts requires fontconfig support (and that you have the font)
> image_annotate(logo, "The quick brown fox", font = "monospace", size = 50)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 sRGB       TRUE         0 72x72  
> 
> 
> 
> cleanEx()
> nameEx("segmentation")
> ### * segmentation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: segmentation
> ### Title: Image Segmentation
> ### Aliases: segmentation image_connect image_split image_fuzzycmeans
> 
> ### ** Examples
> 
> # Split an image by color
> img <- image_quantize(logo, 4)
> layers <- image_split(img)
> layers
# A tibble: 4 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      640    480 sRGB       TRUE         0 72x72  
2 PNG      640    480 sRGB       TRUE         0 72x72  
3 PNG      640    480 sRGB       TRUE         0 72x72  
4 PNG      640    480 sRGB       TRUE         0 72x72  
> 
> # This returns the original image
> image_flatten(layers)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      640    480 sRGB       TRUE         0 72x72  
> 
> # From the IM website
> objects <- image_convert(demo_image("objects.gif"), colorspace = "Gray")
> objects
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      256    171 Gray       FALSE        0 72x72  
> 
> 
> 
> 
> cleanEx()
> nameEx("thresholding")
> ### * thresholding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thresholding
> ### Title: Image thresholding
> ### Aliases: thresholding image_threshold image_level image_lat
> 
> ### ** Examples
> 
> test <- image_convert(logo, colorspace = "Gray")
> image_threshold(test, type = "black", threshold = "50%")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 Gray       FALSE        0 72x72  
> image_threshold(test, type = "white", threshold = "50%")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 Gray       FALSE        0 72x72  
> 
> # Turn image into BW
> test |>
+   image_threshold(type = "white", threshold = "50%") |>
+   image_threshold(type = "black", threshold = "50%")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 Gray       FALSE        0 72x72  
> 
> # adaptive thresholding
> image_lat(test, geometry = '10x10+5%')
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      640    480 Gray       FALSE        0 72x72  
> 
> 
> 
> cleanEx()
> nameEx("transform")
> ### * transform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform
> ### Title: Image Transform
> ### Aliases: transform image_trim image_chop image_rotate image_resize
> ###   image_scale image_sample image_crop image_extent image_flip
> ###   image_flop image_deskew image_deskew_angle image_page image_repage
> ###   image_orient image_shear image_distort
> 
> ### ** Examples
> 
> logo <- image_read("logo:")
> logo <- image_scale(logo, "400")
> image_trim(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      287    296 sRGB       FALSE        0 72x72  
> image_chop(logo, "100x20")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      300    280 sRGB       FALSE        0 72x72  
> image_rotate(logo, 45)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      496    496 sRGB       FALSE        0 72x72  
> # Small image
> rose <- image_convert(image_read("rose:"), "png")
> 
> # Resize to 400 width or height:
> image_resize(rose, "400x")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    263 sRGB       FALSE        0 72x72  
> image_resize(rose, "x400")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      609    400 sRGB       FALSE        0 72x72  
> 
> # Resize keeping ratio
> image_resize(rose, "400x400")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    263 sRGB       FALSE        0 72x72  
> 
> # Resize, force size losing ratio
> image_resize(rose, "400x400!")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    400 sRGB       FALSE        0 72x72  
> 
> # Different filters
> image_resize(rose, "400x", filter = "Triangle")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    263 sRGB       FALSE        0 72x72  
> image_resize(rose, "400x", filter = "Point")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    263 sRGB       FALSE        0 72x72  
> # simple pixel resize
> image_scale(rose, "400x")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    263 sRGB       FALSE        0 72x72  
> image_sample(rose, "400x")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      400    263 sRGB       FALSE        0 72x72  
> image_crop(logo, "400x400+200+200")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      200    100 sRGB       FALSE        0 72x72  
> image_extent(rose, '200x200', color = 'pink')
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 PNG      200    200 sRGB       FALSE        0 72x72  
> image_flip(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      400    300 sRGB       FALSE        0 72x72  
> image_flop(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      400    300 sRGB       FALSE        0 72x72  
> skewed <- image_rotate(logo, 5)
> deskewed <- image_deskew(skewed)
> attr(deskewed, 'angle')
[1] -4.80068
> if(magick_config()$version > "6.8.6")
+   image_orient(logo)
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      400    300 sRGB       FALSE        0 72x72  
> image_shear(logo, "10x10")
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 GIF      453    361 sRGB       FALSE        0 72x72  
> building <- demo_image('building.jpg')
> image_distort(building, 'perspective', c(7,40,4,30,4,124,4,123,85,122,100,123,85,2,100,30))
# A tibble: 1 × 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 JPEG     146    150 sRGB       FALSE        0 72x72  
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  12.549 0.394 6.75 0 0 
> grDevices::dev.off()
magick 
     3 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
