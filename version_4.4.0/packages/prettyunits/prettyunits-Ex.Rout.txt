
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "prettyunits"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('prettyunits')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("pretty_bytes")
> ### * pretty_bytes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_bytes
> ### Title: Bytes in a human readable string
> ### Aliases: pretty_bytes compute_bytes
> 
> ### ** Examples
> 
> bytes <- c(1337, 133337, 13333337, 1333333337, 133333333337)
> pretty_bytes(bytes)
[1] "  1.34 kB" "133.34 kB" " 13.33 MB" "  1.33 GB" "133.33 GB"
> pretty_bytes(bytes, style = "nopad")
[1] "1.34 kB"   "133.34 kB" "13.33 MB"  "1.33 GB"   "133.33 GB"
> pretty_bytes(bytes, style = "6")
[1] "1.3 kB" "133 kB" " 13 MB" "1.3 GB" "133 GB"
> 
> 
> 
> cleanEx()
> nameEx("pretty_dt")
> ### * pretty_dt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_dt
> ### Title: Pretty formatting of time intervals (difftime objects)
> ### Aliases: pretty_dt
> 
> ### ** Examples
> 
> pretty_dt(as.difftime(1000, units = "secs"))
[1] "16m 40s"
> pretty_dt(as.difftime(0, units = "secs"))
[1] "0ms"
> 
> 
> 
> cleanEx()
> nameEx("pretty_ms")
> ### * pretty_ms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_ms
> ### Title: Pretty formatting of milliseconds
> ### Aliases: pretty_ms
> 
> ### ** Examples
> 
> pretty_ms(c(1337, 13370, 133700, 1337000, 1337000000))
[1] "1.3s"            "13.4s"           "2m 13.7s"        "22m 17s"        
[5] "15d 11h 23m 20s"
> 
> pretty_ms(c(1337, 13370, 133700, 1337000, 1337000000),
+           compact = TRUE)
[1] "~1.3s"  "~13.4s" "~2m"    "~22m"   "~15d"  
> 
> 
> 
> cleanEx()
> nameEx("pretty_num")
> ### * pretty_num
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_num
> ### Title: Linear quantities in a human readable string
> ### Aliases: pretty_num compute_num
> 
> ### ** Examples
> 
> numbers <- c(1337, 1.3333e-5, 13333337, 1333333337, 133333333337)
> pretty_num(numbers)
[1] "  1.34 k" " 13.33 u" " 13.33 M" "  1.33 G" "133.33 G"
> pretty_num(numbers, style = "nopad")
[1] "1.34 k"   "13.33 u"  "13.33 M"  "1.33 G"   "133.33 G"
> pretty_num(numbers, style = "6")
[1] "1.34 k" "13.3 u" "13.3 M" "1.33 G" " 133 G"
> 
> 
> 
> cleanEx()
> nameEx("pretty_p_value")
> ### * pretty_p_value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_p_value
> ### Title: p-values in a human-readable string
> ### Aliases: pretty_p_value
> 
> ### ** Examples
> 
> pretty_p_value(c(1, 0, NA, 0.01, 0.0000001))
[1] "1.0000"  "<0.0001" NA        "0.0100"  "<0.0001"
> pretty_p_value(c(1, 0, NA, 0.01, 0.0000001), minval = 0.05)
[1] "1.00"  "<0.05" NA      "<0.05" "<0.05"
> 
> 
> 
> cleanEx()
> nameEx("pretty_sec")
> ### * pretty_sec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_sec
> ### Title: Pretty formatting of seconds
> ### Aliases: pretty_sec
> 
> ### ** Examples
> 
> pretty_sec(c(1337, 13370, 133700, 1337000, 13370000))
[1] "22m 17s"          "3h 42m 50s"       "1d 13h 8m 20s"    "15d 11h 23m 20s" 
[5] "154d 17h 53m 20s"
> 
> pretty_sec(c(1337, 13370, 133700, 1337000, 13370000),
+            compact = TRUE)
[1] "~22m"  "~3h"   "~1d"   "~15d"  "~154d"
> 
> 
> 
> cleanEx()
> nameEx("time_ago")
> ### * time_ago
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_ago
> ### Title: Human readable format of the time interval since a time point
> ### Aliases: time_ago
> 
> ### ** Examples
> 
> now <- Sys.time()
> 
> time_ago(now)
[1] "moments ago"
> time_ago(now - as.difftime(30, units = "secs"))
[1] "less than a minute ago"
> time_ago(now - as.difftime(14, units = "mins"))
[1] "14 minutes ago"
> time_ago(now - as.difftime(5, units = "hours"))
[1] "5 hours ago"
> time_ago(now - as.difftime(25, units = "hours"))
[1] "a day ago"
> time_ago(now - as.difftime(5, units = "days"))
[1] "5 days ago"
> time_ago(now - as.difftime(30, units = "days"))
[1] "about a month ago"
> time_ago(now - as.difftime(365, units = "days"))
[1] "about a year ago"
> time_ago(now - as.difftime(365 * 10, units = "days"))
[1] "10 years ago"
> 
> ## Short format
> time_ago(format = "short", now)
[1] "<1 min"
> time_ago(format = "short", now - as.difftime(30, units = "secs"))
[1] "<1 min"
> time_ago(format = "short", now - as.difftime(14, units = "mins"))
[1] "14 min"
> time_ago(format = "short", now - as.difftime(5, units = "hours"))
[1] "5 hours"
> time_ago(format = "short", now - as.difftime(25, units = "hours"))
[1] "1 day"
> time_ago(format = "short", now - as.difftime(5, units = "days"))
[1] "5 day"
> time_ago(format = "short", now - as.difftime(30, units = "days"))
[1] "1 mon"
> time_ago(format = "short", now - as.difftime(365, units = "days"))
[1] "1 year"
> time_ago(format = "short", now - as.difftime(365 * 10, units = "days"))
[1] "10 years"
> 
> ## Even shorter, terse format, (almost always) exactly 3 characters wide
> time_ago(format = "terse", now)
[1] " 0s"
> time_ago(format = "terse", now - as.difftime(30, units = "secs"))
[1] "30s"
> time_ago(format = "terse", now - as.difftime(14, units = "mins"))
[1] "14m"
> time_ago(format = "terse", now - as.difftime(5, units = "hours"))
[1] " 5h"
> time_ago(format = "terse", now - as.difftime(25, units = "hours"))
[1] " 1d"
> time_ago(format = "terse", now - as.difftime(5, units = "days"))
[1] " 5d"
> time_ago(format = "terse", now - as.difftime(30, units = "days"))
[1] " 1M"
> time_ago(format = "terse", now - as.difftime(365, units = "days"))
[1] " 1y"
> time_ago(format = "terse", now - as.difftime(365 * 10, units = "days"))
[1] "10y"
> 
> 
> 
> cleanEx()
> nameEx("vague_dt")
> ### * vague_dt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vague_dt
> ### Title: Human readable format of a time interval
> ### Aliases: vague_dt
> 
> ### ** Examples
> 
> vague_dt(as.difftime(30, units = "secs"))
[1] "less than a minute ago"
> vague_dt(as.difftime(14, units = "mins"))
[1] "14 minutes ago"
> vague_dt(as.difftime(5, units = "hours"))
[1] "5 hours ago"
> vague_dt(as.difftime(25, units = "hours"))
[1] "a day ago"
> vague_dt(as.difftime(5, units = "days"))
[1] "5 days ago"
> vague_dt(as.difftime(30, units = "days"))
[1] "about a month ago"
> vague_dt(as.difftime(365, units = "days"))
[1] "about a year ago"
> vague_dt(as.difftime(365 * 10, units = "days"))
[1] "10 years ago"
> 
> ## Short format
> vague_dt(format = "short", as.difftime(30, units = "secs"))
[1] "<1 min"
> vague_dt(format = "short", as.difftime(14, units = "mins"))
[1] "14 min"
> vague_dt(format = "short", as.difftime(5, units = "hours"))
[1] "5 hours"
> vague_dt(format = "short", as.difftime(25, units = "hours"))
[1] "1 day"
> vague_dt(format = "short", as.difftime(5, units = "days"))
[1] "5 day"
> vague_dt(format = "short", as.difftime(30, units = "days"))
[1] "1 mon"
> vague_dt(format = "short", as.difftime(365, units = "days"))
[1] "1 year"
> vague_dt(format = "short", as.difftime(365 * 10, units = "days"))
[1] "10 years"
> 
> ## Even shorter, terse format, (almost always) exactly 3 characters wide
> vague_dt(format = "terse", as.difftime(30, units = "secs"))
[1] "30s"
> vague_dt(format = "terse", as.difftime(14, units = "mins"))
[1] "14m"
> vague_dt(format = "terse", as.difftime(5, units = "hours"))
[1] " 5h"
> vague_dt(format = "terse", as.difftime(25, units = "hours"))
[1] " 1d"
> vague_dt(format = "terse", as.difftime(5, units = "days"))
[1] " 5d"
> vague_dt(format = "terse", as.difftime(30, units = "days"))
[1] " 1M"
> vague_dt(format = "terse", as.difftime(365, units = "days"))
[1] " 1y"
> vague_dt(format = "terse", as.difftime(365 * 10, units = "days"))
[1] "10y"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.122 0.014 0.136 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
