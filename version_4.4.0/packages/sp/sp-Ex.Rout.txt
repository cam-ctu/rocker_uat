
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('sp')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CRS-class")
> ### * CRS-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CRS-class
> ### Title: Class "CRS" of coordinate reference system arguments
> ### Aliases: CRS-class CRS identicalCRS print.CRS show,CRS-method
> ###   wkt,CRS-method rebuild_CRS rebuild_CRS,CRS-method
> ###   is.projected,CRS-method
> ### Keywords: classes spatial
> 
> ### ** Examples
> 
> CRS()
Coordinate Reference System:
Deprecated Proj.4 representation: NA 
> CRS("")
Coordinate Reference System:
Deprecated Proj.4 representation: NA 
> CRS(as.character(NA))
Coordinate Reference System:
Deprecated Proj.4 representation: NA 
> CRS("+proj=longlat +datum=WGS84")
Coordinate Reference System:
Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 
> run <- FALSE
> run <- require(sf) 
Loading required package: sf
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘sf’
> if (run) {
+   print((CRS("+proj=longlat +datum=NAD27")))
+ }
> if (run) {
+   print((CRS("+init=epsg:4267")))
+ }
> if (run) {
+   print((CRS("+init=epsg:26978")))
+ }
> if (run) {
+   print((CRS(paste("+proj=sterea +lat_0=52.15616055555555",
+  "+lon_0=5.38763888888889 +k=0.999908 +x_0=155000 +y_0=463000 +ellps=bessel",
+  " +towgs84=565.237,50.0087,465.658,-0.406857,0.350733,-1.87035,4.0812 +units=m"))))
+ }
> if (run) {
+   print((CRS("+init=epsg:28992")))
+ }
> if (run) {
+   print((CRS("EPSG:28992")))
+ }
> if (run) {
+   print((CRS(SRS_string="EPSG:28992")))
+ }
> if (run) {
+   o <- try(CRS(SRS_string="ESRI:102760"))
+   if (!inherits(o, "try-error")) print((o))
+ }
> if (run) {
+   o <- try(CRS("EPSG:4326"))
+   if (!inherits(o, "try-error")) print((o))
+ }
> if (run) {
+   o <- try(CRS("ESRI:102760"))
+   if (!inherits(o, "try-error")) print((o))
+ }
> if (run) {
+ o <- new("Spatial")
+ proj4string(o) <- CRS("+init=epsg:27700")
+ }
> if (run && !is.null(comment(slot(o, "proj4string")))) {
+   cat(wkt(o), sep="\n")
+   cat(wkt(slot(o, "proj4string")), sep="\n")
+ }
> 
> 
> 
> cleanEx()
> nameEx("DMS-class")
> ### * DMS-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DMS-class
> ### Title: Class "DMS" for degree, minute, decimal second values
> ### Aliases: DMS-class print.DMS show,DMS-method coerce,DMS-method
> ###   as.double.DMS as.numeric.DMS
> ### Keywords: classes spatial
> 
> ### ** Examples
> 
> data(state)
> dd2dms(state.center$x)
 [1] 86d45'3.24"W  127d15'W      111d37'30"W   92d17'57.12"W 119d46'22.8"W
 [6] 105d30'46.8"W 72d21'26.28"W 74d59'2.76"W  81d41'6"W     83d22'24.96"W
[11] 126d15'W      113d55'48"W   89d22'39.36"W 86d4'50.88"W  93d22'17.04"W
[16] 98d6'56.16"W  84d46'2.64"W  92d16'20.64"W 68d58'48.36"W 76d38'45.24"W
[21] 71d34'48"W    84d41'13.2"W  94d36'15.48"W 89d48'23.4"W  92d30'49.32"W
[26] 109d19'12"W   99d35'23.28"W 116d51'3.6"W  71d23'32.64"W 74d14'0.96"W 
[31] 105d56'31.2"W 75d8'41.64"W  78d28'6.96"W  100d5'56.4"W  82d35'46.68"W
[36] 97d7'26.04"W  120d4'4.8"W   77d27'W       71d7'27.84"W  80d30'20.16"W
[41] 99d43'25.68"W 86d27'21.6"W  98d47'8.52"W  111d19'48"W   72d32'42"W   
[46] 78d12'1.8"W   119d44'45.6"W 80d39'59.4"W  89d59'38.76"W 107d15'21.6"W
> dd2dms(state.center$y, NS=TRUE)
 [1] 32d35'24.36"N 49d15'N       34d13'9.12"N  34d44'0.96"N  36d32'2.76"N 
 [6] 38d40'39.72"N 41d35'34.08"N 38d40'39.72"N 27d52'27.84"N 32d19'58.44"N
[11] 31d45'N       43d33'53.28"N 40d2'58.2"N   40d2'58.2"N   41d56'8.88"N 
[16] 38d25'13.44"N 37d23'29.4"N  30d37'5.16"N  45d37'21.36"N 39d16'40.08"N
[21] 42d21'52.2"N  43d8'9.96"N   46d23'39.48"N 32d40'32.88"N 38d20'4.92"N 
[26] 46d49'22.8"N  41d20'8.16"N  39d6'22.68"N  43d23'36.24"N 39d57'49.32"N
[31] 34d28'35.04"N 43d8'9.96"N   35d25'10.2"N  47d15'6.12"N  40d13'15.6"N 
[36] 35d30'19.08"N 43d54'28.08"N 40d54'24.84"N 41d35'34.08"N 33d37'8.4"N  
[41] 44d20'11.4"N  35d40'36.12"N 31d23'22.92"N 39d6'22.68"N  44d15'2.88"N 
[46] 37d33'46.8"N  47d25'23.16"N 38d25'13.44"N 44d35'37.32"N 43d3'1.44"N  
> as.numeric(dd2dms(state.center$y))
 [1] 32.5901 49.2500 34.2192 34.7336 36.5341 38.6777 41.5928 38.6777 27.8744
[10] 32.3329 31.7500 43.5648 40.0495 40.0495 41.9358 38.4204 37.3915 30.6181
[19] 45.6226 39.2778 42.3645 43.1361 46.3943 32.6758 38.3347 46.8230 41.3356
[28] 39.1063 43.3934 39.9637 34.4764 43.1361 35.4195 47.2517 40.2210 35.5053
[37] 43.9078 40.9069 41.5928 33.6190 44.3365 35.6767 31.3897 39.1063 44.2508
[46] 37.5630 47.4231 38.4204 44.5937 43.0504
> as(dd2dms(state.center$y, NS=TRUE), "numeric")
 [1] 32.5901 49.2500 34.2192 34.7336 36.5341 38.6777 41.5928 38.6777 27.8744
[10] 32.3329 31.7500 43.5648 40.0495 40.0495 41.9358 38.4204 37.3915 30.6181
[19] 45.6226 39.2778 42.3645 43.1361 46.3943 32.6758 38.3347 46.8230 41.3356
[28] 39.1063 43.3934 39.9637 34.4764 43.1361 35.4195 47.2517 40.2210 35.5053
[37] 43.9078 40.9069 41.5928 33.6190 44.3365 35.6767 31.3897 39.1063 44.2508
[46] 37.5630 47.4231 38.4204 44.5937 43.0504
> as.numeric.DMS(dd2dms(state.center$y))
 [1] 32.5901 49.2500 34.2192 34.7336 36.5341 38.6777 41.5928 38.6777 27.8744
[10] 32.3329 31.7500 43.5648 40.0495 40.0495 41.9358 38.4204 37.3915 30.6181
[19] 45.6226 39.2778 42.3645 43.1361 46.3943 32.6758 38.3347 46.8230 41.3356
[28] 39.1063 43.3934 39.9637 34.4764 43.1361 35.4195 47.2517 40.2210 35.5053
[37] 43.9078 40.9069 41.5928 33.6190 44.3365 35.6767 31.3897 39.1063 44.2508
[46] 37.5630 47.4231 38.4204 44.5937 43.0504
> state.center$y
 [1] 32.5901 49.2500 34.2192 34.7336 36.5341 38.6777 41.5928 38.6777 27.8744
[10] 32.3329 31.7500 43.5648 40.0495 40.0495 41.9358 38.4204 37.3915 30.6181
[19] 45.6226 39.2778 42.3645 43.1361 46.3943 32.6758 38.3347 46.8230 41.3356
[28] 39.1063 43.3934 39.9637 34.4764 43.1361 35.4195 47.2517 40.2210 35.5053
[37] 43.9078 40.9069 41.5928 33.6190 44.3365 35.6767 31.3897 39.1063 44.2508
[46] 37.5630 47.4231 38.4204 44.5937 43.0504
> 
> 
> 
> cleanEx()
> nameEx("GridTopology-class")
> ### * GridTopology-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GridTopology-class
> ### Title: Class "GridTopology"
> ### Aliases: GridTopology-class print.summary.GridTopology
> ###   summary,GridTopology-method show,GridTopology-method
> ###   show,summary.GridTopology-method
> ###   coerce,GridTopology,data.frame-method
> ###   coerce,SpatialGrid,GridTopology-method
> ###   coerce,SpatialPixels,GridTopology-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> x = GridTopology(c(0,0), c(1,1), c(5,5))
> class(x)
[1] "GridTopology"
attr(,"package")
[1] "sp"
> x
                  X1 X2
cellcentre.offset  0  0
cellsize           1  1
cells.dim          5  5
> summary(x)
Grid topology:
  cellcentre.offset cellsize cells.dim
1                 0        1         5
2                 0        1         5
> coordinates(x)
      s1 s2
 [1,]  0  4
 [2,]  1  4
 [3,]  2  4
 [4,]  3  4
 [5,]  4  4
 [6,]  0  3
 [7,]  1  3
 [8,]  2  3
 [9,]  3  3
[10,]  4  3
[11,]  0  2
[12,]  1  2
[13,]  2  2
[14,]  3  2
[15,]  4  2
[16,]  0  1
[17,]  1  1
[18,]  2  1
[19,]  3  1
[20,]  4  1
[21,]  0  0
[22,]  1  0
[23,]  2  0
[24,]  3  0
[25,]  4  0
> y = SpatialGrid(grid = x)
> class(y)
[1] "SpatialGrid"
attr(,"package")
[1] "sp"
> y
Object of class SpatialGrid
Grid topology:
  cellcentre.offset cellsize cells.dim
1                 0        1         5
2                 0        1         5
SpatialPoints:
      s1 s2
 [1,]  0  4
 [2,]  1  4
 [3,]  2  4
 [4,]  3  4
 [5,]  4  4
 [6,]  0  3
 [7,]  1  3
 [8,]  2  3
 [9,]  3  3
[10,]  4  3
[11,]  0  2
[12,]  1  2
[13,]  2  2
[14,]  3  2
[15,]  4  2
[16,]  0  1
[17,]  1  1
[18,]  2  1
[19,]  3  1
[20,]  4  1
[21,]  0  0
[22,]  1  0
[23,]  2  0
[24,]  3  0
[25,]  4  0
Coordinate Reference System (CRS) arguments: NA 
> 
> 
> 
> cleanEx()
> nameEx("GridsDatums")
> ### * GridsDatums
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GridsDatums
> ### Title: Grids and Datums PE&RS listing
> ### Aliases: GridsDatums
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(GridsDatums)
> GridsDatums[grep("Norway", GridsDatums$country),]
                  country     month year ISO
17  The Kingdom of Norway (October) 1999 NOR
226                Norway    (July) 2017 NOR
> GridsDatums[grep("Google", GridsDatums$country),]
                            country month year  ISO
201 Datum Origins with Google Earth (May) 2015 <NA>
> GridsDatums[grep("^Mars$", GridsDatums$country),]
   country     month year  ISO
88    Mars (October) 2005 <NA>
> 
> 
> 
> cleanEx()
> nameEx("Line")
> ### * Line
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Line
> ### Title: create objects of class Line or Lines
> ### Aliases: Line Lines
> ### Keywords: classes
> 
> ### ** Examples
>  
> # from the sp vignette:
> l1 = cbind(c(1,2,3),c(3,2,2))
> l1a = cbind(l1[,1]+.05,l1[,2]+.05)
> l2 = cbind(c(1,2,3),c(1,1.5,1))
> Sl1 = Line(l1)
> Sl1a = Line(l1a)
> Sl2 = Line(l2)
> S1 = Lines(list(Sl1, Sl1a), ID="a")
> S2 = Lines(list(Sl2), ID="b")
> 
> 
> 
> cleanEx()
> nameEx("Rlogo")
> ### * Rlogo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rlogo
> ### Title: Rlogo jpeg image
> ### Aliases: Rlogo gt
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Rlogo)
> d = dim(Rlogo)
> cellsize = abs(c(gt[2],gt[6]))
> cells.dim = c(d[1], d[2]) # c(d[2],d[1])
> cellcentre.offset = c(x = gt[1] + 0.5 * cellsize[1], y = gt[4] - (d[2] - 0.5) * abs(cellsize[2]))
> grid = GridTopology(cellcentre.offset, cellsize, cells.dim)
> df = as.vector(Rlogo[,,1])
> for (band in 2:d[3]) df = cbind(df, as.vector(Rlogo[,,band]))
> df = as.data.frame(df)
> names(df) = paste("band", 1:d[3], sep="")
> Rlogo <- SpatialGridDataFrame(grid = grid, data = df)
> summary(Rlogo)
Object of class SpatialGridDataFrame
Coordinates:
  min max
x   0 101
y -77   0
Is projected: NA 
proj4string : [NA]
Grid attributes:
  cellcentre.offset cellsize cells.dim
x               0.5        1       101
y             -76.5        1        77
Data attributes:
     band1           band2           band3      
 Min.   :  0.0   Min.   :  0.0   Min.   :  0.0  
 1st Qu.:131.0   1st Qu.:138.0   1st Qu.:151.0  
 Median :196.0   Median :199.0   Median :215.0  
 Mean   :182.3   Mean   :185.4   Mean   :192.8  
 3rd Qu.:254.0   3rd Qu.:255.0   3rd Qu.:254.0  
 Max.   :255.0   Max.   :255.0   Max.   :255.0  
> spplot(Rlogo, zcol=1:3, names.attr=c("red","green","blue"), 
+ 	col.regions=grey(0:100/100),
+ 	main="example of three-layer (RGB) raster image", as.table=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("Spatial-class")
> ### * Spatial-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Spatial-class
> ### Title: Class "Spatial"
> ### Aliases: Spatial-class Spatial print.summary.Spatial subset.Spatial
> ###   cbind.Spatial head.Spatial tail.Spatial summary,Spatial-method
> ###   plot,Spatial,missing-method getParUsrBB setParUsrBB
> ###   coordinates<-,Spatial-method [[<-,Spatial,ANY,missing-method
> ###   [<-,Spatial-method [[,Spatial,ANY,missing-method $<-,Spatial-method
> ###   $,Spatial-method im-class owin-class ppp-class psp-class
> ###   rebuild_CRS,Spatial-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> o <- new("Spatial")
> proj4string(o) <- CRS("+init=epsg:27700")
> if (!is.null(comment(slot(o, "proj4string")))) {
+   cat(strsplit(wkt(o), "\n")[[1]], sep="\n")
+   cat(strsplit(wkt(slot(o, "proj4string")), "\n")[[1]], sep="\n")
+ }
> 
> 
> 
> cleanEx()
> nameEx("SpatialGrid-class")
> ### * SpatialGrid-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialGrid-class
> ### Title: Class "SpatialGrid"
> ### Aliases: SpatialGrid-class [,SpatialGrid-method
> ###   print.summary.SpatialGrid as.data.frame.SpatialGrid
> ###   summary,SpatialGrid-method coerce,SpatialGrid,data.frame-method
> ###   coerce,SpatialGrid,SpatialPixels-method
> ###   coerce,SpatialGrid,SpatialPoints-method
> ###   coerce,SpatialGrid,SpatialPolygons-method show,SpatialGrid-method
> ###   plot,SpatialGrid,missing-method coordnames,SpatialGrid-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> x = GridTopology(c(0,0), c(1,1), c(5,5))
> class(x)
[1] "GridTopology"
attr(,"package")
[1] "sp"
> x
                  X1 X2
cellcentre.offset  0  0
cellsize           1  1
cells.dim          5  5
> summary(x)
Grid topology:
  cellcentre.offset cellsize cells.dim
1                 0        1         5
2                 0        1         5
> coordinates(x)
      s1 s2
 [1,]  0  4
 [2,]  1  4
 [3,]  2  4
 [4,]  3  4
 [5,]  4  4
 [6,]  0  3
 [7,]  1  3
 [8,]  2  3
 [9,]  3  3
[10,]  4  3
[11,]  0  2
[12,]  1  2
[13,]  2  2
[14,]  3  2
[15,]  4  2
[16,]  0  1
[17,]  1  1
[18,]  2  1
[19,]  3  1
[20,]  4  1
[21,]  0  0
[22,]  1  0
[23,]  2  0
[24,]  3  0
[25,]  4  0
> y = SpatialGrid(grid = x)
> class(y)
[1] "SpatialGrid"
attr(,"package")
[1] "sp"
> y
Object of class SpatialGrid
Grid topology:
  cellcentre.offset cellsize cells.dim
1                 0        1         5
2                 0        1         5
SpatialPoints:
      s1 s2
 [1,]  0  4
 [2,]  1  4
 [3,]  2  4
 [4,]  3  4
 [5,]  4  4
 [6,]  0  3
 [7,]  1  3
 [8,]  2  3
 [9,]  3  3
[10,]  4  3
[11,]  0  2
[12,]  1  2
[13,]  2  2
[14,]  3  2
[15,]  4  2
[16,]  0  1
[17,]  1  1
[18,]  2  1
[19,]  3  1
[20,]  4  1
[21,]  0  0
[22,]  1  0
[23,]  2  0
[24,]  3  0
[25,]  4  0
Coordinate Reference System (CRS) arguments: NA 
> 
> 
> 
> cleanEx()
> nameEx("SpatialGrid")
> ### * SpatialGrid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPixels
> ### Title: define spatial grid
> ### Aliases: SpatialPixels SpatialGrid GridTopology SpatialGrid
> ###   plot.SpatialGrid coordinatevalues points2grid getGridIndex
> ###   getGridTopology areaSpatialGrid
> ### Keywords: spatial
> 
> ### ** Examples
> 
> x = GridTopology(c(0,0), c(1,1), c(5,4))
> class(x)
[1] "GridTopology"
attr(,"package")
[1] "sp"
> x
                  X1 X2
cellcentre.offset  0  0
cellsize           1  1
cells.dim          5  4
> summary(x)
Grid topology:
  cellcentre.offset cellsize cells.dim
1                 0        1         5
2                 0        1         4
> coordinates(x)
      s1 s2
 [1,]  0  3
 [2,]  1  3
 [3,]  2  3
 [4,]  3  3
 [5,]  4  3
 [6,]  0  2
 [7,]  1  2
 [8,]  2  2
 [9,]  3  2
[10,]  4  2
[11,]  0  1
[12,]  1  1
[13,]  2  1
[14,]  3  1
[15,]  4  1
[16,]  0  0
[17,]  1  0
[18,]  2  0
[19,]  3  0
[20,]  4  0
> coordinates(GridTopology(c(0,0), c(1,1), c(5,4)))
      s1 s2
 [1,]  0  3
 [2,]  1  3
 [3,]  2  3
 [4,]  3  3
 [5,]  4  3
 [6,]  0  2
 [7,]  1  2
 [8,]  2  2
 [9,]  3  2
[10,]  4  2
[11,]  0  1
[12,]  1  1
[13,]  2  1
[14,]  3  1
[15,]  4  1
[16,]  0  0
[17,]  1  0
[18,]  2  0
[19,]  3  0
[20,]  4  0
> coordinatevalues(x)
$s1
[1] 0 1 2 3 4

$s2
[1] 3 2 1 0

> data(meuse.grid)
> coordinates(meuse.grid) <- c("x", "y")
> points2grid(meuse.grid)
                       x      y
cellcentre.offset 178460 329620
cellsize              40     40
cells.dim             78    104
> data(meuse.grid)
> set.seed(1)
> meuse.grid$x <- meuse.grid$x + rnorm(length(meuse.grid$x), 0, 0.002)
> meuse.grid$y <- meuse.grid$y + rnorm(length(meuse.grid$y), 0, 0.002)
> coordinates(meuse.grid) <- c("x", "y")
> #EJP
> # points2grid(meuse.grid, tolerance=0.76, round=1)
> data(meuse.grid)
> a <- which(meuse.grid$x == 180140)
> b <- which(meuse.grid$x == 180180)
> c <- which(meuse.grid$x == 179260)
> d <- which(meuse.grid$y == 332460)
> e <- which(meuse.grid$y == 332420)
> f <- which(meuse.grid$y == 330740)
> meuse.grid <- meuse.grid[-c(a, b, c, d, e, f),]
> coordinates(meuse.grid) <- c("x", "y")
> points2grid(meuse.grid)
Warning in points2grid(meuse.grid) :
  grid has empty column/rows in dimension 1
Warning in points2grid(meuse.grid) :
  grid has empty column/rows in dimension 2
                       x      y
cellcentre.offset 178460 329620
cellsize              40     40
cells.dim             78    104
> data(meuse.grid)
> set.seed(1)
> meuse.grid$x <- meuse.grid$x + rnorm(length(meuse.grid$x), 0, 0.002)
> meuse.grid$y <- meuse.grid$y + rnorm(length(meuse.grid$y), 0, 0.002)
> meuse.grid <- meuse.grid[-c(a, b, c, d, e, f),]
> coordinates(meuse.grid) <- c("x", "y")
> # EJP
> # points2grid(meuse.grid, tolerance=0.69, round=1)
> 
> 
> 
> cleanEx()
> nameEx("SpatialGridDataFrame-class")
> ### * SpatialGridDataFrame-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialGridDataFrame-class
> ### Title: Class "SpatialGridDataFrame"
> ### Aliases: SpatialGridDataFrame-class [,SpatialGridDataFrame-method
> ###   show,SpatialGridDataFrame-method cbind.SpatialGridDataFrame
> ###   plot.SpatialGridDataFrame print.summary.SpatialGridDataFrame
> ###   as.array.SpatialGridDataFrame
> ###   coerce,SpatialGridDataFrame,SpatialPointsDataFrame-method
> ###   coerce,SpatialGridDataFrame,SpatialPixelsDataFrame-method
> ###   coerce,SpatialGridDataFrame,SpatialPolygonsDataFrame-method
> ###   coerce,SpatialGridDataFrame,data.frame-method
> ###   coerce,SpatialGridDataFrame,matrix-method
> ###   coerce,SpatialGridDataFrame,array-method
> ###   as.data.frame.SpatialGridDataFrame dim.SpatialGridDataFrame
> ###   coerce,im,SpatialGridDataFrame-method
> ###   coerce,ppp,SpatialGridDataFrame-method
> ###   plot,SpatialGridDataFrame,missing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> data(meuse.grid) # only the non-missing valued cells
> coordinates(meuse.grid) = c("x", "y") # promote to SpatialPointsDataFrame
> gridded(meuse.grid) <- TRUE # promote to SpatialPixelsDataFrame
> x = as(meuse.grid, "SpatialGridDataFrame") # creates the full grid
> x[["idist"]] = 1 - x[["dist"]] # assigns new attribute
> image(x["idist"]) # note the single [ for attribute selection
> 
> # toy example:
> df = data.frame(z = c(1:6,NA,8,9),
+     xc = c(1,1,1,2,2,2,3,3,3),
+     yc = c(rep(c(0, 1.5, 3),3)))
> coordinates(df) = ~xc+yc
> gridded(df) = TRUE
> df = as(df, "SpatialGridDataFrame") # to full grid
> image(df["z"])
> # draw labels to verify:
> cc = coordinates(df)
> z=df[["z"]]
> zc=as.character(z)
> zc[is.na(zc)]="NA"
> text(cc[,1],cc[,2],zc)
> 
> # the following is weird, but illustrates the concept of row/col selection:
> fullgrid(meuse.grid) = TRUE
> image(meuse.grid)
> image(meuse.grid[20:70, 10:70, "dist"], add = TRUE, col = bpy.colors())
> 
> # as.matrix, as.array
> sgdim = c(3,4)
> SG = SpatialGrid(GridTopology(rep(0,2), rep(10,2), sgdim))
> SGDF = SpatialGridDataFrame(SG, data.frame(val = 1:12))
> as.array(SGDF)
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> as.matrix(SGDF)
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> as(SGDF, "array")
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
> 
> 
> 
> cleanEx()
> nameEx("SpatialGridDataFrame")
> ### * SpatialGridDataFrame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPixelsDataFrame
> ### Title: define spatial grid with attribute data
> ### Aliases: SpatialPixelsDataFrame SpatialGridDataFrame
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse.grid)
> m = SpatialPixelsDataFrame(points = meuse.grid[c("x", "y")], data = meuse.grid)
> class(m)
[1] "SpatialPixelsDataFrame"
attr(,"package")
[1] "sp"
> summary(m)
Object of class SpatialPixelsDataFrame
Coordinates:
     min    max
x 178440 181560
y 329600 333760
Is projected: NA 
proj4string : [NA]
Number of points: 3103
Grid attributes:
  cellcentre.offset cellsize cells.dim
x            178460       40        78
y            329620       40       104
Data attributes:
       x                y              part.a           part.b      
 Min.   :178460   Min.   :329620   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:179420   1st Qu.:330460   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :179980   Median :331220   Median :0.0000   Median :1.0000  
 Mean   :179985   Mean   :331348   Mean   :0.3986   Mean   :0.6014  
 3rd Qu.:180580   3rd Qu.:332140   3rd Qu.:1.0000   3rd Qu.:1.0000  
 Max.   :181540   Max.   :333740   Max.   :1.0000   Max.   :1.0000  
      dist        soil     ffreq   
 Min.   :0.0000   1:1665   1: 779  
 1st Qu.:0.1193   2:1084   2:1335  
 Median :0.2715   3: 354   3: 989  
 Mean   :0.2971                    
 3rd Qu.:0.4402                    
 Max.   :0.9926                    
> 
> 
> 
> cleanEx()
> nameEx("SpatialLines-class")
> ### * SpatialLines-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialLines-class
> ### Title: a class for spatial lines
> ### Aliases: SpatialLines-class [,SpatialLines-method
> ###   plot,SpatialLines,missing-method summary,SpatialLines-method
> ###   rbind.SpatialLines coerce,SpatialLines,SpatialPoints-method
> ###   coerce,SpatialLines,SpatialPointsDataFrame-method
> ###   coerce,Lines,SpatialPoints-method
> ###   coerce,Lines,SpatialMultiPoints-method
> ###   coerce,SpatialLines,SpatialMultiPoints-method
> ###   coerce,deldir,SpatialLines-method row.names.SpatialLines
> ### Keywords: classes
> 
> ### ** Examples
>  
> # from the sp vignette:
> l1 = cbind(c(1,2,3),c(3,2,2))
> rownames(l1) = letters[1:3]
> l1a = cbind(l1[,1]+.05,l1[,2]+.05)
> rownames(l1a) = letters[1:3]
> l2 = cbind(c(1,2,3),c(1,1.5,1))
> rownames(l2) = letters[1:3]
> Sl1 = Line(l1)
> Sl1a = Line(l1a)
> Sl2 = Line(l2)
> S1 = Lines(list(Sl1, Sl1a), ID="a")
> S2 = Lines(list(Sl2), ID="b")
> Sl = SpatialLines(list(S1,S2))
> summary(Sl)
Object of class SpatialLines
Coordinates:
  min  max
x   1 3.05
y   1 3.05
Is projected: NA 
proj4string : [NA]
> plot(Sl, col = c("red", "blue"))
> 
> 
> 
> cleanEx()
> nameEx("SpatialMultiPoints-class")
> ### * SpatialMultiPoints-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialMultiPoints-class
> ### Title: Class "SpatialMultiPoints"
> ### Aliases: SpatialMultiPoints-class [,SpatialMultiPoints-method
> ###   coerce,SpatialMultiPoints,matrix-method
> ###   coerce,SpatialMultiPoints,data.frame-method
> ###   coerce,SpatialMultiPoints,SpatialPoints-method
> ###   show,SpatialMultiPoints-method as.data.frame.SpatialMultiPoints
> ###   plot,SpatialMultiPoints,missing-method
> ###   summary,SpatialMultiPoints-method print.SpatialMultiPoints
> ###   summary.SpatialMultiPoints rbind.SpatialMultiPoints
> ###   $,SpatialMultiPoints-method $<-,SpatialMultiPoints,character-method
> ###   row.names.SpatialMultiPoints
> ### Keywords: classes
> 
> ### ** Examples
> 
> cl1 = cbind(rnorm(3, 10), rnorm(3, 10))
> cl2 = cbind(rnorm(5, 10), rnorm(5,  0))
> cl3 = cbind(rnorm(7,  0), rnorm(7, 10))
> 
> mp = SpatialMultiPoints(list(cl1, cl2, cl3))
> plot(mp, col = 2, cex = 1, pch = 1:3)
> mp
SpatialMultiPoints:
[[1]]
          [,1]      [,2]
[1,]  9.373546 11.595281
[2,] 10.183643 10.329508
[3,]  9.164371  9.179532

[[2]]
          [,1]        [,2]
[1,] 10.487429  0.38984324
[2,] 10.738325 -0.62124058
[3,] 10.575781 -2.21469989
[4,]  9.694612  1.12493092
[5,] 11.511781 -0.04493361

[[3]]
            [,1]      [,2]
[1,] -0.01619026  8.010648
[2,]  0.94383621 10.619826
[3,]  0.82122120  9.943871
[4,]  0.59390132  9.844204
[5,]  0.91897737  8.529248
[6,]  0.78213630  9.521850
[7,]  0.07456498 10.417942

Coordinate Reference System (CRS) arguments: NA 
> mp[1:2]
SpatialMultiPoints:
[[1]]
          [,1]      [,2]
[1,]  9.373546 11.595281
[2,] 10.183643 10.329508
[3,]  9.164371  9.179532

[[2]]
          [,1]        [,2]
[1,] 10.487429  0.38984324
[2,] 10.738325 -0.62124058
[3,] 10.575781 -2.21469989
[4,]  9.694612  1.12493092
[5,] 11.511781 -0.04493361

Coordinate Reference System (CRS) arguments: NA 
> 
> print(mp, asWKT=TRUE, digits=3)
SpatialMultiPoints:
                                                                                      geometry
1                                                   MULTIPOINT (9.37 11.6,10.2 10.3,9.16 9.18)
2                         MULTIPOINT (10.5 0.39,10.7 -0.621,10.6 -2.21,9.69 1.12,11.5 -0.0449)
3 MULTIPOINT (-0.0162 8.01,0.944 10.6,0.821 9.94,0.594 9.84,0.919 8.53,0.782 9.52,0.0746 10.4)
Coordinate Reference System (CRS) arguments: NA 
> 
> 
> 
> cleanEx()
> nameEx("SpatialMultiPoints")
> ### * SpatialMultiPoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialMultiPoints
> ### Title: create objects of class SpatialMultiPoints or
> ###   SpatialMultiPointsDataFrame
> ### Aliases: SpatialMultiPoints SpatialMultiPointsDataFrame
> ### Keywords: manip
> 
> ### ** Examples
> 
> cl1 = cbind(rnorm(3, 10), rnorm(3, 10))
> cl2 = cbind(rnorm(5, 10), rnorm(5,  0))
> cl3 = cbind(rnorm(7,  0), rnorm(7, 10))
> 
> mp = SpatialMultiPoints(list(cl1, cl2, cl3))
> mpx = rbind(mp, mp) # rbind method
> plot(mp, col = 2, cex = 1, pch = 1:3)
> mp
SpatialMultiPoints:
[[1]]
          [,1]      [,2]
[1,]  9.373546 11.595281
[2,] 10.183643 10.329508
[3,]  9.164371  9.179532

[[2]]
          [,1]        [,2]
[1,] 10.487429  0.38984324
[2,] 10.738325 -0.62124058
[3,] 10.575781 -2.21469989
[4,]  9.694612  1.12493092
[5,] 11.511781 -0.04493361

[[3]]
            [,1]      [,2]
[1,] -0.01619026  8.010648
[2,]  0.94383621 10.619826
[3,]  0.82122120  9.943871
[4,]  0.59390132  9.844204
[5,]  0.91897737  8.529248
[6,]  0.78213630  9.521850
[7,]  0.07456498 10.417942

Coordinate Reference System (CRS) arguments: NA 
> mp[1:2]
SpatialMultiPoints:
[[1]]
          [,1]      [,2]
[1,]  9.373546 11.595281
[2,] 10.183643 10.329508
[3,]  9.164371  9.179532

[[2]]
          [,1]        [,2]
[1,] 10.487429  0.38984324
[2,] 10.738325 -0.62124058
[3,] 10.575781 -2.21469989
[4,]  9.694612  1.12493092
[5,] 11.511781 -0.04493361

Coordinate Reference System (CRS) arguments: NA 
> 
> print(mp, asWKT=TRUE, digits=3)
SpatialMultiPoints:
                                                                                      geometry
1                                                   MULTIPOINT (9.37 11.6,10.2 10.3,9.16 9.18)
2                         MULTIPOINT (10.5 0.39,10.7 -0.621,10.6 -2.21,9.69 1.12,11.5 -0.0449)
3 MULTIPOINT (-0.0162 8.01,0.944 10.6,0.821 9.94,0.594 9.84,0.919 8.53,0.782 9.52,0.0746 10.4)
Coordinate Reference System (CRS) arguments: NA 
> 
> mpdf = SpatialMultiPointsDataFrame(list(cl1, cl2, cl3), data.frame(a = 1:3))
> mpdf
                coordinates a
1      (9.373546, 11.59528) 1
1.1    (10.18364, 10.32951) 1
1.2    (9.164371, 9.179532) 1
2     (10.48743, 0.3898432) 2
2.1  (10.73832, -0.6212406) 2
2.2     (10.57578, -2.2147) 2
2.3    (9.694612, 1.124931) 2
2.4 (11.51178, -0.04493361) 2
3   (-0.01619026, 8.010648) 3
3.1   (0.9438362, 10.61983) 3
3.2   (0.8212212, 9.943871) 3
3.3   (0.5939013, 9.844204) 3
3.4   (0.9189774, 8.529248) 3
3.5    (0.7821363, 9.52185) 3
3.6  (0.07456498, 10.41794) 3
> mpdfx = rbind(mpdf, mpdf) # rbind method
> 
> plot(mpdf, col = mpdf$a, cex = 1:3)
> as(mpdf, "data.frame")
              X1          X2 index a
X1    9.37354619 11.59528080     1 1
X1.1 10.18364332 10.32950777     1 1
X1.2  9.16437139  9.17953162     1 1
X2   10.48742905  0.38984324     2 2
X2.1 10.73832471 -0.62124058     2 2
X2.2 10.57578135 -2.21469989     2 2
X2.3  9.69461161  1.12493092     2 2
X2.4 11.51178117 -0.04493361     2 2
X3   -0.01619026  8.01064830     3 3
X3.1  0.94383621 10.61982575     3 3
X3.2  0.82122120  9.94387126     3 3
X3.3  0.59390132  9.84420449     3 3
X3.4  0.91897737  8.52924762     3 3
X3.5  0.78213630  9.52184994     3 3
X3.6  0.07456498 10.41794156     3 3
> mpdf[1:2,]
                coordinates a
1      (9.373546, 11.59528) 1
1.1    (10.18364, 10.32951) 1
1.2    (9.164371, 9.179532) 1
2     (10.48743, 0.3898432) 2
2.1  (10.73832, -0.6212406) 2
2.2     (10.57578, -2.2147) 2
2.3    (9.694612, 1.124931) 2
2.4 (11.51178, -0.04493361) 2
> 
> 
> 
> cleanEx()
> nameEx("SpatialMultiPointsDataFrame-class")
> ### * SpatialMultiPointsDataFrame-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialMultiPointsDataFrame-class
> ### Title: Class "SpatialMultiPointsDataFrame"
> ### Aliases: SpatialMultiPointsDataFrame-class
> ###   [,SpatialMultiPointsDataFrame-method
> ###   coerce,SpatialMultiPointsDataFrame,data.frame-method
> ###   coerce,SpatialMultiPointsDataFrame,SpatialPointsDataFrame-method
> ###   show,SpatialMultiPointsDataFrame-method
> ###   points,SpatialMultiPointsDataFrame-method
> ###   coordinates,SpatialMultiPointsDataFrame-method
> ###   as.data.frame.SpatialMultiPointsDataFrame
> ###   dim.SpatialMultiPointsDataFrame print.SpatialMultiPointsDataFrame
> ###   rbind.SpatialMultiPointsDataFrame
> ###   row.names.SpatialMultiPointsDataFrame
> ### Keywords: classes
> 
> ### ** Examples
> 
> # create three sets of points:
> cl1 = cbind(rnorm(3, 10), rnorm(3, 10))
> cl2 = cbind(rnorm(5, 10), rnorm(5,  0))
> cl3 = cbind(rnorm(7,  0), rnorm(7, 10))
> 
> mpdf = SpatialMultiPointsDataFrame(list(cl1, cl2, cl3), data.frame(a = 1:3))
> mpdf
                coordinates a
1      (9.373546, 11.59528) 1
1.1    (10.18364, 10.32951) 1
1.2    (9.164371, 9.179532) 1
2     (10.48743, 0.3898432) 2
2.1  (10.73832, -0.6212406) 2
2.2     (10.57578, -2.2147) 2
2.3    (9.694612, 1.124931) 2
2.4 (11.51178, -0.04493361) 2
3   (-0.01619026, 8.010648) 3
3.1   (0.9438362, 10.61983) 3
3.2   (0.8212212, 9.943871) 3
3.3   (0.5939013, 9.844204) 3
3.4   (0.9189774, 8.529248) 3
3.5    (0.7821363, 9.52185) 3
3.6  (0.07456498, 10.41794) 3
> 
> plot(mpdf, col = mpdf$a, cex = 1:3)
> as(mpdf, "data.frame")
              X1          X2 index a
X1    9.37354619 11.59528080     1 1
X1.1 10.18364332 10.32950777     1 1
X1.2  9.16437139  9.17953162     1 1
X2   10.48742905  0.38984324     2 2
X2.1 10.73832471 -0.62124058     2 2
X2.2 10.57578135 -2.21469989     2 2
X2.3  9.69461161  1.12493092     2 2
X2.4 11.51178117 -0.04493361     2 2
X3   -0.01619026  8.01064830     3 3
X3.1  0.94383621 10.61982575     3 3
X3.2  0.82122120  9.94387126     3 3
X3.3  0.59390132  9.84420449     3 3
X3.4  0.91897737  8.52924762     3 3
X3.5  0.78213630  9.52184994     3 3
X3.6  0.07456498 10.41794156     3 3
> mpdf[1:2,]
                coordinates a
1      (9.373546, 11.59528) 1
1.1    (10.18364, 10.32951) 1
1.2    (9.164371, 9.179532) 1
2     (10.48743, 0.3898432) 2
2.1  (10.73832, -0.6212406) 2
2.2     (10.57578, -2.2147) 2
2.3    (9.694612, 1.124931) 2
2.4 (11.51178, -0.04493361) 2
> 
> 
> 
> 
> cleanEx()
> nameEx("SpatialPixels-class")
> ### * SpatialPixels-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPixels-class
> ### Title: Class "SpatialPixels"
> ### Aliases: SpatialPixels-class [,SpatialPixels-method
> ###   coerce,SpatialPixels,SpatialGrid-method print.summary.SpatialPixels
> ###   as.data.frame.SpatialPixels summary,SpatialPixels-method
> ###   coerce,SpatialPixels,data.frame-method show,SpatialPixels-method
> ###   plot,SpatialPixels,missing-method rbind.SpatialPixels
> ### Keywords: classes
> 
> ### ** Examples
> 
> data(meuse.grid)
> pts = meuse.grid[c("x", "y")]
> y = SpatialPixels(SpatialPoints(pts))
> class(y)
[1] "SpatialPixels"
attr(,"package")
[1] "sp"
> y
Object of class SpatialPixels
Grid topology:
  cellcentre.offset cellsize cells.dim
x            178460       40        78
y            329620       40       104
SpatialPoints:
          x      y
1    181180 333740
2    181140 333700
3    181180 333700
4    181220 333700
5    181100 333660
6    181140 333660
7    181180 333660
8    181220 333660
9    181060 333620
10   181100 333620
11   181140 333620
12   181180 333620
13   181220 333620
14   181260 333620
15   181020 333580
16   181060 333580
17   181100 333580
18   181140 333580
19   181180 333580
20   181220 333580
21   181260 333580
22   181300 333580
23   180980 333540
24   181020 333540
25   181060 333540
26   181100 333540
27   181140 333540
28   181180 333540
29   181220 333540
30   181260 333540
31   181300 333540
32   180940 333500
33   180980 333500
34   181020 333500
35   181060 333500
36   181100 333500
37   181140 333500
38   181180 333500
39   181220 333500
40   181260 333500
41   181300 333500
42   181340 333500
43   180940 333460
44   180980 333460
45   181020 333460
46   181060 333460
47   181100 333460
48   181140 333460
49   181180 333460
50   181220 333460
51   181260 333460
52   181300 333460
53   181340 333460
54   180900 333420
55   180940 333420
56   180980 333420
57   181020 333420
58   181060 333420
59   181100 333420
60   181140 333420
61   181180 333420
62   181220 333420
63   181260 333420
64   181300 333420
65   181340 333420
66   181380 333420
67   180860 333380
68   180900 333380
69   180940 333380
70   180980 333380
71   181020 333380
72   181060 333380
73   181100 333380
74   181140 333380
75   181180 333380
76   181220 333380
77   181260 333380
78   181300 333380
79   181340 333380
80   181380 333380
81   181420 333380
82   180860 333340
83   180900 333340
84   180940 333340
85   180980 333340
86   181020 333340
87   181060 333340
88   181100 333340
89   181140 333340
90   181180 333340
91   181220 333340
92   181260 333340
93   181300 333340
94   181340 333340
95   181380 333340
96   181420 333340
97   180820 333300
98   180860 333300
99   180900 333300
100  180940 333300
101  180980 333300
102  181020 333300
103  181060 333300
104  181100 333300
105  181140 333300
106  181180 333300
107  181220 333300
108  181260 333300
109  181300 333300
110  181340 333300
111  181380 333300
112  181420 333300
113  181460 333300
114  180820 333260
115  180860 333260
116  180900 333260
117  180940 333260
118  180980 333260
119  181020 333260
120  181060 333260
121  181100 333260
122  181140 333260
123  181180 333260
124  181220 333260
125  181260 333260
126  181300 333260
127  181340 333260
128  181380 333260
129  181420 333260
130  181460 333260
131  180780 333220
132  180820 333220
133  180860 333220
134  180900 333220
135  180940 333220
136  180980 333220
137  181020 333220
138  181060 333220
139  181100 333220
140  181140 333220
141  181180 333220
142  181220 333220
143  181260 333220
144  181300 333220
145  181340 333220
146  181380 333220
147  181420 333220
148  181460 333220
149  181500 333220
150  180780 333180
151  180820 333180
152  180860 333180
153  180900 333180
154  180940 333180
155  180980 333180
156  181020 333180
157  181060 333180
158  181100 333180
159  181140 333180
160  181180 333180
161  181220 333180
162  181260 333180
163  181300 333180
164  181340 333180
165  181380 333180
166  181420 333180
167  181460 333180
168  181500 333180
169  181540 333180
170  180780 333140
171  180820 333140
172  180860 333140
173  180900 333140
174  180940 333140
175  180980 333140
176  181020 333140
177  181060 333140
178  181100 333140
179  181140 333140
180  181180 333140
181  181220 333140
182  181260 333140
183  181300 333140
184  181340 333140
185  181380 333140
186  181420 333140
187  181460 333140
188  181500 333140
189  181540 333140
190  180740 333100
191  180780 333100
192  180820 333100
193  180860 333100
194  180900 333100
195  180940 333100
196  180980 333100
197  181020 333100
198  181060 333100
199  181100 333100
200  181140 333100
201  181180 333100
202  181220 333100
203  181260 333100
204  181300 333100
205  181340 333100
206  181380 333100
207  181420 333100
208  181460 333100
209  181500 333100
210  180700 333060
211  180740 333060
212  180780 333060
213  180820 333060
214  180860 333060
215  180900 333060
216  180940 333060
217  180980 333060
218  181020 333060
219  181060 333060
220  181100 333060
221  181140 333060
222  181180 333060
223  181220 333060
224  181260 333060
225  181300 333060
226  181340 333060
227  181380 333060
228  181420 333060
229  181460 333060
230  181500 333060
231  180700 333020
232  180740 333020
233  180780 333020
234  180820 333020
235  180860 333020
236  180900 333020
237  180940 333020
238  180980 333020
239  181020 333020
240  181060 333020
241  181100 333020
242  181140 333020
243  181180 333020
244  181220 333020
245  181260 333020
246  181300 333020
247  181340 333020
248  181380 333020
249  181420 333020
250  181460 333020
251  180660 332980
252  180700 332980
253  180740 332980
254  180780 332980
255  180820 332980
256  180860 332980
257  180900 332980
258  180940 332980
259  180980 332980
260  181020 332980
261  181060 332980
262  181100 332980
263  181140 332980
264  181180 332980
265  181220 332980
266  181260 332980
267  181300 332980
268  181340 332980
269  181380 332980
270  181420 332980
271  181460 332980
272  180660 332940
273  180700 332940
274  180740 332940
275  180780 332940
276  180820 332940
277  180860 332940
278  180900 332940
279  180940 332940
280  180980 332940
281  181020 332940
282  181060 332940
283  181100 332940
284  181140 332940
285  181180 332940
286  181220 332940
287  181260 332940
288  181300 332940
289  181340 332940
290  181380 332940
291  181420 332940
292  180620 332900
293  180660 332900
294  180700 332900
295  180740 332900
296  180780 332900
297  180820 332900
298  180860 332900
299  180900 332900
300  180940 332900
301  180980 332900
302  181020 332900
303  181060 332900
304  181100 332900
305  181140 332900
306  181180 332900
307  181220 332900
308  181260 332900
309  181300 332900
310  181340 332900
311  181380 332900
312  181420 332900
313  180620 332860
314  180660 332860
315  180700 332860
316  180740 332860
317  180780 332860
318  180820 332860
319  180860 332860
320  180900 332860
321  180940 332860
322  180980 332860
323  181020 332860
324  181060 332860
325  181100 332860
326  181140 332860
327  181180 332860
328  181220 332860
329  181260 332860
330  181300 332860
331  181340 332860
332  181380 332860
333  180620 332820
334  180660 332820
335  180700 332820
336  180740 332820
337  180780 332820
338  180820 332820
339  180860 332820
340  180900 332820
341  180940 332820
342  180980 332820
343  181020 332820
344  181060 332820
345  181100 332820
346  181140 332820
347  181180 332820
348  181220 332820
349  181260 332820
350  181300 332820
351  181340 332820
352  181380 332820
353  180580 332780
354  180620 332780
355  180660 332780
356  180700 332780
357  180740 332780
358  180780 332780
359  180820 332780
360  180860 332780
361  180900 332780
362  180940 332780
363  180980 332780
364  181020 332780
365  181060 332780
366  181100 332780
367  181140 332780
368  181180 332780
369  181220 332780
370  181260 332780
371  181300 332780
372  181340 332780
373  180580 332740
374  180620 332740
375  180660 332740
376  180700 332740
377  180740 332740
378  180780 332740
379  180820 332740
380  180860 332740
381  180900 332740
382  180940 332740
383  180980 332740
384  181020 332740
385  181060 332740
386  181100 332740
387  181140 332740
388  181180 332740
389  181220 332740
390  181260 332740
391  181300 332740
392  181340 332740
393  180540 332700
394  180580 332700
395  180620 332700
396  180660 332700
397  180700 332700
398  180740 332700
399  180780 332700
400  180820 332700
401  180860 332700
402  180900 332700
403  180940 332700
404  180980 332700
405  181020 332700
406  181060 332700
407  181100 332700
408  181140 332700
409  181180 332700
410  181220 332700
411  181260 332700
412  181300 332700
413  180540 332660
414  180580 332660
415  180620 332660
416  180660 332660
417  180700 332660
418  180740 332660
419  180780 332660
420  180820 332660
421  180860 332660
422  180900 332660
423  180940 332660
424  180980 332660
425  181020 332660
426  181060 332660
427  181100 332660
428  181140 332660
429  181180 332660
430  181220 332660
431  181260 332660
432  181300 332660
433  180500 332620
434  180540 332620
435  180580 332620
436  180620 332620
437  180660 332620
438  180700 332620
439  180740 332620
440  180780 332620
441  180820 332620
442  180860 332620
443  180900 332620
444  180940 332620
445  180980 332620
446  181020 332620
447  181060 332620
448  181100 332620
449  181140 332620
450  181180 332620
451  181220 332620
452  181260 332620
453  180460 332580
454  180500 332580
455  180540 332580
456  180580 332580
457  180620 332580
458  180660 332580
459  180700 332580
460  180740 332580
461  180780 332580
462  180820 332580
463  180860 332580
464  180900 332580
465  180940 332580
466  180980 332580
467  181020 332580
468  181060 332580
469  181100 332580
470  181140 332580
471  181180 332580
472  181220 332580
473  181260 332580
474  180420 332540
475  180460 332540
476  180500 332540
477  180540 332540
478  180580 332540
479  180620 332540
480  180660 332540
481  180700 332540
482  180740 332540
483  180780 332540
484  180820 332540
485  180860 332540
486  180900 332540
487  180940 332540
488  180980 332540
489  181020 332540
490  181060 332540
491  181100 332540
492  181140 332540
493  181180 332540
494  181220 332540
495  180380 332500
496  180420 332500
497  180460 332500
498  180500 332500
499  180540 332500
500  180580 332500
501  180620 332500
502  180660 332500
503  180700 332500
504  180740 332500
505  180780 332500
506  180820 332500
507  180860 332500
508  180900 332500
509  180940 332500
510  180980 332500
511  181020 332500
512  181060 332500
513  181100 332500
514  181140 332500
515  181180 332500
516  181220 332500
517  180340 332460
518  180380 332460
519  180420 332460
520  180460 332460
521  180500 332460
522  180540 332460
523  180580 332460
524  180620 332460
525  180660 332460
526  180700 332460
527  180740 332460
528  180780 332460
529  180820 332460
530  180860 332460
531  180900 332460
532  180940 332460
533  180980 332460
534  181020 332460
535  181060 332460
536  181100 332460
537  181140 332460
538  181180 332460
539  180300 332420
540  180340 332420
541  180380 332420
542  180420 332420
543  180460 332420
544  180500 332420
545  180540 332420
546  180580 332420
547  180620 332420
548  180660 332420
549  180700 332420
550  180740 332420
551  180780 332420
552  180820 332420
553  180860 332420
554  180900 332420
555  180940 332420
556  180980 332420
557  181020 332420
558  181060 332420
559  181100 332420
560  181140 332420
561  181180 332420
562  180260 332380
563  180300 332380
564  180340 332380
565  180380 332380
566  180420 332380
567  180460 332380
568  180500 332380
569  180540 332380
570  180580 332380
571  180620 332380
572  180660 332380
573  180700 332380
574  180740 332380
575  180780 332380
576  180820 332380
577  180860 332380
578  180900 332380
579  180940 332380
580  180980 332380
581  181020 332380
582  181060 332380
583  181100 332380
584  181140 332380
585  180140 332340
586  180180 332340
587  180220 332340
588  180260 332340
589  180300 332340
590  180340 332340
591  180380 332340
592  180420 332340
593  180460 332340
594  180500 332340
595  180540 332340
596  180580 332340
597  180620 332340
598  180660 332340
599  180700 332340
600  180740 332340
601  180780 332340
602  180820 332340
603  180860 332340
604  180900 332340
605  180940 332340
606  180980 332340
607  181020 332340
608  181060 332340
609  181100 332340
610  181140 332340
611  180020 332300
612  180060 332300
613  180100 332300
614  180140 332300
615  180180 332300
616  180220 332300
617  180260 332300
618  180300 332300
619  180340 332300
620  180380 332300
621  180420 332300
622  180460 332300
623  180500 332300
624  180540 332300
625  180580 332300
626  180620 332300
627  180660 332300
628  180700 332300
629  180740 332300
630  180780 332300
631  180820 332300
632  180860 332300
633  180900 332300
634  180940 332300
635  180980 332300
636  181020 332300
637  181060 332300
638  181100 332300
639  179860 332260
640  179900 332260
641  179940 332260
642  179980 332260
643  180020 332260
644  180060 332260
645  180100 332260
646  180140 332260
647  180180 332260
648  180220 332260
649  180260 332260
650  180300 332260
651  180340 332260
652  180380 332260
653  180420 332260
654  180460 332260
655  180500 332260
656  180540 332260
657  180580 332260
658  180620 332260
659  180660 332260
660  180700 332260
661  180740 332260
662  180780 332260
663  180820 332260
664  180860 332260
665  180900 332260
666  180940 332260
667  180980 332260
668  181020 332260
669  181060 332260
670  181100 332260
671  179700 332220
672  179740 332220
673  179780 332220
674  179820 332220
675  179860 332220
676  179900 332220
677  179940 332220
678  179980 332220
679  180020 332220
680  180060 332220
681  180100 332220
682  180140 332220
683  180180 332220
684  180220 332220
685  180260 332220
686  180300 332220
687  180340 332220
688  180380 332220
689  180420 332220
690  180460 332220
691  180500 332220
692  180540 332220
693  180580 332220
694  180620 332220
695  180660 332220
696  180700 332220
697  180740 332220
698  180780 332220
699  180820 332220
700  180860 332220
701  180900 332220
702  180940 332220
703  180980 332220
704  181020 332220
705  181060 332220
706  179660 332180
707  179700 332180
708  179740 332180
709  179780 332180
710  179820 332180
711  179860 332180
712  179900 332180
713  179940 332180
714  179980 332180
715  180020 332180
716  180060 332180
717  180100 332180
718  180140 332180
719  180180 332180
720  180220 332180
721  180260 332180
722  180300 332180
723  180340 332180
724  180380 332180
725  180420 332180
726  180460 332180
727  180500 332180
728  180540 332180
729  180580 332180
730  180620 332180
731  180660 332180
732  180700 332180
733  180740 332180
734  180780 332180
735  180820 332180
736  180860 332180
737  180900 332180
738  180940 332180
739  180980 332180
740  181020 332180
741  181060 332180
742  179620 332140
743  179660 332140
744  179700 332140
745  179740 332140
746  179780 332140
747  179820 332140
748  179860 332140
749  179900 332140
750  179940 332140
751  179980 332140
752  180020 332140
753  180060 332140
754  180100 332140
755  180140 332140
756  180180 332140
757  180220 332140
758  180260 332140
759  180300 332140
760  180340 332140
761  180380 332140
762  180420 332140
763  180460 332140
764  180500 332140
765  180540 332140
766  180580 332140
767  180620 332140
768  180660 332140
769  180700 332140
770  180740 332140
771  180780 332140
772  180820 332140
773  180860 332140
774  180900 332140
775  180940 332140
776  180980 332140
777  181020 332140
778  179580 332100
779  179620 332100
780  179660 332100
781  179700 332100
782  179740 332100
783  179780 332100
784  179820 332100
785  179860 332100
786  179900 332100
787  179940 332100
788  179980 332100
789  180020 332100
790  180060 332100
791  180100 332100
792  180140 332100
793  180180 332100
794  180220 332100
795  180260 332100
796  180300 332100
797  180340 332100
798  180380 332100
799  180420 332100
800  180460 332100
801  180500 332100
802  180540 332100
803  180580 332100
804  180620 332100
805  180660 332100
806  180700 332100
807  180740 332100
808  180780 332100
809  180820 332100
810  180860 332100
811  180900 332100
812  180940 332100
813  180980 332100
814  181020 332100
815  179580 332060
816  179620 332060
817  179660 332060
818  179700 332060
819  179740 332060
820  179780 332060
821  179820 332060
822  179860 332060
823  179900 332060
824  179940 332060
825  179980 332060
826  180020 332060
827  180060 332060
828  180100 332060
829  180140 332060
830  180180 332060
831  180220 332060
832  180260 332060
833  180300 332060
834  180340 332060
835  180380 332060
836  180420 332060
837  180460 332060
838  180500 332060
839  180540 332060
840  180580 332060
841  180620 332060
842  180660 332060
843  180700 332060
844  180740 332060
845  180780 332060
846  180820 332060
847  180860 332060
848  180900 332060
849  180940 332060
850  180980 332060
851  179540 332020
852  179580 332020
853  179620 332020
854  179660 332020
855  179700 332020
856  179740 332020
857  179780 332020
858  179820 332020
859  179860 332020
860  179900 332020
861  179940 332020
862  179980 332020
863  180020 332020
864  180060 332020
865  180100 332020
866  180140 332020
867  180180 332020
868  180220 332020
869  180260 332020
870  180300 332020
871  180340 332020
872  180380 332020
873  180420 332020
874  180460 332020
875  180500 332020
876  180540 332020
877  180580 332020
878  180620 332020
879  180660 332020
880  180700 332020
881  180740 332020
882  180780 332020
883  180820 332020
884  180860 332020
885  180900 332020
886  180940 332020
887  180980 332020
888  179540 331980
889  179580 331980
890  179620 331980
891  179660 331980
892  179700 331980
893  179740 331980
894  179780 331980
895  179820 331980
896  179860 331980
897  179900 331980
898  179940 331980
899  179980 331980
900  180020 331980
901  180060 331980
902  180100 331980
903  180140 331980
904  180180 331980
905  180220 331980
906  180260 331980
907  180300 331980
908  180340 331980
909  180380 331980
910  180420 331980
911  180460 331980
912  180500 331980
913  180540 331980
914  180580 331980
915  180620 331980
916  180660 331980
917  180700 331980
918  180740 331980
919  180780 331980
920  180820 331980
921  180860 331980
922  180900 331980
923  180940 331980
924  179540 331940
925  179580 331940
926  179620 331940
927  179660 331940
928  179700 331940
929  179740 331940
930  179780 331940
931  179820 331940
932  179860 331940
933  179900 331940
934  179940 331940
935  179980 331940
936  180020 331940
937  180060 331940
938  180100 331940
939  180140 331940
940  180180 331940
941  180220 331940
942  180260 331940
943  180300 331940
944  180340 331940
945  180380 331940
946  180420 331940
947  180460 331940
948  180500 331940
949  180540 331940
950  180580 331940
951  180620 331940
952  180660 331940
953  180700 331940
954  180740 331940
955  180780 331940
956  180820 331940
957  180860 331940
958  180900 331940
959  180940 331940
960  179500 331900
961  179540 331900
962  179580 331900
963  179620 331900
964  179660 331900
965  179700 331900
966  179740 331900
967  179780 331900
968  179820 331900
969  179860 331900
970  179900 331900
971  179940 331900
972  179980 331900
973  180020 331900
974  180060 331900
975  180100 331900
976  180140 331900
977  180180 331900
978  180220 331900
979  180260 331900
980  180300 331900
981  180340 331900
982  180380 331900
983  180420 331900
984  180460 331900
985  180500 331900
986  180540 331900
987  180580 331900
988  180620 331900
989  180660 331900
990  180700 331900
991  180740 331900
992  180780 331900
993  180820 331900
994  180860 331900
995  180900 331900
996  179500 331860
997  179540 331860
998  179580 331860
999  179620 331860
1000 179660 331860
1001 179700 331860
1002 179740 331860
1003 179780 331860
1004 179820 331860
1005 179860 331860
1006 179900 331860
1007 179940 331860
1008 179980 331860
1009 180020 331860
1010 180060 331860
1011 180100 331860
1012 180140 331860
1013 180180 331860
1014 180220 331860
1015 180260 331860
1016 180300 331860
1017 180340 331860
1018 180380 331860
1019 180420 331860
1020 180460 331860
1021 180500 331860
1022 180540 331860
1023 180580 331860
1024 180620 331860
1025 180660 331860
1026 180700 331860
1027 180740 331860
1028 180780 331860
1029 180820 331860
1030 180860 331860
1031 180900 331860
1032 179500 331820
1033 179540 331820
1034 179580 331820
1035 179620 331820
1036 179660 331820
1037 179700 331820
1038 179740 331820
1039 179780 331820
1040 179820 331820
1041 179860 331820
1042 179900 331820
1043 179940 331820
1044 179980 331820
1045 180020 331820
1046 180060 331820
1047 180100 331820
1048 180140 331820
1049 180180 331820
1050 180220 331820
1051 180260 331820
1052 180300 331820
1053 180340 331820
1054 180380 331820
1055 180420 331820
1056 180460 331820
1057 180500 331820
1058 180540 331820
1059 180580 331820
1060 180620 331820
1061 180660 331820
1062 180700 331820
1063 180740 331820
1064 180780 331820
1065 180820 331820
1066 180860 331820
1067 179500 331780
1068 179540 331780
1069 179580 331780
1070 179620 331780
1071 179660 331780
1072 179700 331780
1073 179740 331780
1074 179780 331780
1075 179820 331780
1076 179860 331780
1077 179900 331780
1078 179940 331780
1079 179980 331780
1080 180020 331780
1081 180060 331780
1082 180100 331780
1083 180140 331780
1084 180180 331780
1085 180220 331780
1086 180260 331780
1087 180300 331780
1088 180340 331780
1089 180380 331780
1090 180420 331780
1091 180460 331780
1092 180500 331780
1093 180540 331780
1094 180580 331780
1095 180620 331780
1096 180660 331780
1097 180700 331780
1098 180740 331780
1099 180780 331780
1100 180820 331780
1101 179460 331740
1102 179500 331740
1103 179540 331740
1104 179580 331740
1105 179620 331740
1106 179660 331740
1107 179700 331740
1108 179740 331740
1109 179780 331740
1110 179820 331740
1111 179860 331740
1112 179900 331740
1113 179940 331740
1114 179980 331740
1115 180020 331740
1116 180060 331740
1117 180100 331740
1118 180140 331740
1119 180180 331740
1120 180220 331740
1121 180260 331740
1122 180300 331740
1123 180340 331740
1124 180380 331740
1125 180420 331740
1126 180460 331740
1127 180500 331740
1128 180540 331740
1129 180580 331740
1130 180620 331740
1131 180660 331740
1132 180700 331740
1133 180740 331740
1134 180780 331740
1135 180820 331740
1136 179460 331700
1137 179500 331700
1138 179540 331700
1139 179580 331700
1140 179620 331700
1141 179660 331700
1142 179700 331700
1143 179740 331700
1144 179780 331700
1145 179820 331700
1146 179860 331700
1147 179900 331700
1148 179940 331700
1149 179980 331700
1150 180020 331700
1151 180060 331700
1152 180100 331700
1153 180140 331700
1154 180180 331700
1155 180220 331700
1156 180260 331700
1157 180300 331700
1158 180340 331700
1159 180380 331700
1160 180420 331700
1161 180460 331700
1162 180500 331700
1163 180540 331700
1164 180580 331700
1165 180620 331700
1166 180660 331700
1167 180700 331700
1168 180740 331700
1169 180780 331700
1170 179460 331660
1171 179500 331660
1172 179540 331660
1173 179580 331660
1174 179620 331660
1175 179660 331660
1176 179700 331660
1177 179740 331660
1178 179780 331660
1179 179820 331660
1180 179860 331660
1181 179900 331660
1182 179940 331660
1183 179980 331660
1184 180020 331660
1185 180060 331660
1186 180100 331660
1187 180140 331660
1188 180180 331660
1189 180220 331660
1190 180260 331660
1191 180300 331660
1192 180340 331660
1193 180380 331660
1194 180420 331660
1195 180460 331660
1196 180500 331660
1197 180540 331660
1198 180580 331660
1199 180620 331660
1200 180660 331660
1201 180700 331660
1202 180740 331660
1203 180780 331660
1204 179460 331620
1205 179500 331620
1206 179540 331620
1207 179580 331620
1208 179620 331620
1209 179660 331620
1210 179700 331620
1211 179740 331620
1212 179780 331620
1213 179820 331620
1214 179860 331620
1215 179900 331620
1216 179940 331620
1217 179980 331620
1218 180020 331620
1219 180060 331620
1220 180100 331620
1221 180140 331620
1222 180180 331620
1223 180220 331620
1224 180260 331620
1225 180300 331620
1226 180340 331620
1227 180380 331620
1228 180420 331620
1229 180460 331620
1230 180500 331620
1231 180540 331620
1232 180580 331620
1233 180620 331620
1234 180660 331620
1235 180700 331620
1236 180740 331620
1237 179420 331580
1238 179460 331580
1239 179500 331580
1240 179540 331580
1241 179580 331580
1242 179620 331580
1243 179660 331580
1244 179700 331580
1245 179740 331580
1246 179780 331580
1247 179820 331580
1248 179860 331580
1249 179900 331580
1250 179940 331580
1251 179980 331580
1252 180020 331580
1253 180060 331580
1254 180100 331580
1255 180140 331580
1256 180180 331580
1257 180220 331580
1258 180260 331580
1259 180300 331580
1260 180340 331580
1261 180380 331580
1262 180420 331580
1263 180460 331580
1264 180500 331580
1265 180540 331580
1266 180580 331580
1267 180620 331580
1268 180660 331580
1269 180700 331580
1270 180740 331580
1271 179420 331540
1272 179460 331540
1273 179500 331540
1274 179540 331540
1275 179580 331540
1276 179620 331540
1277 179660 331540
1278 179700 331540
1279 179740 331540
1280 179780 331540
1281 179820 331540
1282 179860 331540
1283 179900 331540
1284 179940 331540
1285 179980 331540
1286 180020 331540
1287 180060 331540
1288 180100 331540
1289 180140 331540
1290 180180 331540
1291 180220 331540
1292 180260 331540
1293 180300 331540
1294 180340 331540
1295 180380 331540
1296 180420 331540
1297 180460 331540
1298 180500 331540
1299 180540 331540
1300 180580 331540
1301 180620 331540
1302 180660 331540
1303 180700 331540
1304 179380 331500
1305 179420 331500
1306 179460 331500
1307 179500 331500
1308 179540 331500
1309 179580 331500
1310 179620 331500
1311 179660 331500
1312 179700 331500
1313 179740 331500
1314 179780 331500
1315 179820 331500
1316 179860 331500
1317 179900 331500
1318 179940 331500
1319 179980 331500
1320 180020 331500
1321 180060 331500
1322 180100 331500
1323 180140 331500
1324 180180 331500
1325 180220 331500
1326 180260 331500
1327 180300 331500
1328 180340 331500
1329 180380 331500
1330 180420 331500
1331 180460 331500
1332 180500 331500
1333 180540 331500
1334 180580 331500
1335 180620 331500
1336 180660 331500
1337 180700 331500
1338 179380 331460
1339 179420 331460
1340 179460 331460
1341 179500 331460
1342 179540 331460
1343 179580 331460
1344 179620 331460
1345 179660 331460
1346 179700 331460
1347 179740 331460
1348 179780 331460
1349 179820 331460
1350 179860 331460
1351 179900 331460
1352 179940 331460
1353 179980 331460
1354 180020 331460
1355 180060 331460
1356 180100 331460
1357 180140 331460
1358 180180 331460
1359 180220 331460
1360 180260 331460
1361 180300 331460
1362 180340 331460
1363 180380 331460
1364 180420 331460
1365 180460 331460
1366 180500 331460
1367 180540 331460
1368 180580 331460
1369 180620 331460
1370 180660 331460
1371 179340 331420
1372 179380 331420
1373 179420 331420
1374 179460 331420
1375 179500 331420
1376 179540 331420
1377 179580 331420
1378 179620 331420
1379 179660 331420
1380 179700 331420
1381 179740 331420
1382 179780 331420
1383 179820 331420
1384 179860 331420
1385 179900 331420
1386 179940 331420
1387 179980 331420
1388 180020 331420
1389 180060 331420
1390 180100 331420
1391 180140 331420
1392 180180 331420
1393 180220 331420
1394 180260 331420
1395 180300 331420
1396 180340 331420
1397 180380 331420
1398 180420 331420
1399 180460 331420
1400 180500 331420
1401 180540 331420
1402 180580 331420
1403 180620 331420
1404 180660 331420
1405 179300 331380
1406 179340 331380
1407 179380 331380
1408 179420 331380
1409 179460 331380
1410 179500 331380
1411 179540 331380
1412 179580 331380
1413 179620 331380
1414 179660 331380
1415 179700 331380
1416 179740 331380
1417 179780 331380
1418 179820 331380
1419 179860 331380
1420 179900 331380
1421 179940 331380
1422 179980 331380
1423 180020 331380
1424 180060 331380
1425 180100 331380
1426 180140 331380
1427 180180 331380
1428 180220 331380
1429 180260 331380
1430 180300 331380
1431 180340 331380
1432 180380 331380
1433 180420 331380
1434 180460 331380
1435 180500 331380
1436 180540 331380
1437 180580 331380
1438 180620 331380
1439 179260 331340
1440 179300 331340
1441 179340 331340
1442 179380 331340
1443 179420 331340
1444 179460 331340
1445 179500 331340
1446 179540 331340
1447 179580 331340
1448 179620 331340
1449 179660 331340
1450 179700 331340
1451 179740 331340
1452 179780 331340
1453 179820 331340
1454 179860 331340
1455 179900 331340
1456 179940 331340
1457 179980 331340
1458 180020 331340
1459 180060 331340
1460 180100 331340
1461 180140 331340
1462 180180 331340
1463 180220 331340
1464 180260 331340
1465 180300 331340
1466 180340 331340
1467 180380 331340
1468 180420 331340
1469 180460 331340
1470 180500 331340
1471 180540 331340
1472 180580 331340
1473 180620 331340
1474 179220 331300
1475 179260 331300
1476 179300 331300
1477 179340 331300
1478 179380 331300
1479 179420 331300
1480 179460 331300
1481 179500 331300
1482 179540 331300
1483 179580 331300
1484 179620 331300
1485 179660 331300
1486 179700 331300
1487 179740 331300
1488 179780 331300
1489 179820 331300
1490 179860 331300
1491 179900 331300
1492 179940 331300
1493 179980 331300
1494 180020 331300
1495 180060 331300
1496 180100 331300
1497 180140 331300
1498 180180 331300
1499 180220 331300
1500 180260 331300
1501 180300 331300
1502 180340 331300
1503 180380 331300
1504 180420 331300
1505 180460 331300
1506 180500 331300
1507 180540 331300
1508 180580 331300
1509 179180 331260
1510 179220 331260
1511 179260 331260
1512 179300 331260
1513 179340 331260
1514 179380 331260
1515 179420 331260
1516 179460 331260
1517 179500 331260
1518 179540 331260
1519 179580 331260
1520 179620 331260
1521 179660 331260
1522 179700 331260
1523 179740 331260
1524 179780 331260
1525 179820 331260
1526 179860 331260
1527 179900 331260
1528 179940 331260
1529 179980 331260
1530 180020 331260
1531 180060 331260
1532 180100 331260
1533 180140 331260
1534 180180 331260
1535 180220 331260
1536 180260 331260
1537 180300 331260
1538 180340 331260
1539 180380 331260
1540 180420 331260
1541 180460 331260
1542 180500 331260
1543 180540 331260
1544 180580 331260
1545 179140 331220
1546 179180 331220
1547 179220 331220
1548 179260 331220
1549 179300 331220
1550 179340 331220
1551 179380 331220
1552 179420 331220
1553 179460 331220
1554 179500 331220
1555 179540 331220
1556 179580 331220
1557 179620 331220
1558 179660 331220
1559 179700 331220
1560 179740 331220
1561 179780 331220
1562 179820 331220
1563 179860 331220
1564 179900 331220
1565 179940 331220
1566 179980 331220
1567 180020 331220
1568 180060 331220
1569 180100 331220
1570 180140 331220
1571 180180 331220
1572 180220 331220
1573 180260 331220
1574 180300 331220
1575 180340 331220
1576 180380 331220
1577 180420 331220
1578 180460 331220
1579 180500 331220
1580 180540 331220
1581 179140 331180
1582 179180 331180
1583 179220 331180
1584 179260 331180
1585 179300 331180
1586 179340 331180
1587 179380 331180
1588 179420 331180
1589 179460 331180
1590 179500 331180
1591 179540 331180
1592 179580 331180
1593 179620 331180
1594 179660 331180
1595 179700 331180
1596 179740 331180
1597 179780 331180
1598 179820 331180
1599 179860 331180
1600 179900 331180
1601 179940 331180
1602 179980 331180
1603 180020 331180
1604 180060 331180
1605 180100 331180
1606 180140 331180
1607 180180 331180
1608 180220 331180
1609 180260 331180
1610 180300 331180
1611 180340 331180
1612 180380 331180
1613 180420 331180
1614 180460 331180
1615 180500 331180
1616 180540 331180
1617 179100 331140
1618 179140 331140
1619 179180 331140
1620 179220 331140
1621 179260 331140
1622 179300 331140
1623 179340 331140
1624 179380 331140
1625 179420 331140
1626 179460 331140
1627 179500 331140
1628 179540 331140
1629 179580 331140
1630 179620 331140
1631 179660 331140
1632 179700 331140
1633 179740 331140
1634 179780 331140
1635 179820 331140
1636 179860 331140
1637 179900 331140
1638 179940 331140
1639 179980 331140
1640 180020 331140
1641 180060 331140
1642 180100 331140
1643 180140 331140
1644 180180 331140
1645 180220 331140
1646 180260 331140
1647 180300 331140
1648 180340 331140
1649 180380 331140
1650 180420 331140
1651 180460 331140
1652 180500 331140
1653 179100 331100
1654 179140 331100
1655 179180 331100
1656 179220 331100
1657 179260 331100
1658 179300 331100
1659 179340 331100
1660 179380 331100
1661 179420 331100
1662 179460 331100
1663 179500 331100
1664 179540 331100
1665 179580 331100
1666 179620 331100
1667 179660 331100
1668 179700 331100
1669 179740 331100
1670 179780 331100
1671 179820 331100
1672 179860 331100
1673 179900 331100
1674 179940 331100
1675 179980 331100
1676 180020 331100
1677 180060 331100
1678 180100 331100
1679 180140 331100
1680 180180 331100
1681 180220 331100
1682 180260 331100
1683 180300 331100
1684 180340 331100
1685 180380 331100
1686 180420 331100
1687 180460 331100
1688 180500 331100
1689 179100 331060
1690 179140 331060
1691 179180 331060
1692 179220 331060
1693 179260 331060
1694 179300 331060
1695 179340 331060
1696 179380 331060
1697 179420 331060
1698 179460 331060
1699 179500 331060
1700 179540 331060
1701 179580 331060
1702 179620 331060
1703 179660 331060
1704 179700 331060
1705 179740 331060
1706 179780 331060
1707 179820 331060
1708 179860 331060
1709 179900 331060
1710 179940 331060
1711 179980 331060
1712 180020 331060
1713 180060 331060
1714 180100 331060
1715 180140 331060
1716 180180 331060
1717 180220 331060
1718 180260 331060
1719 180300 331060
1720 180340 331060
1721 180380 331060
1722 180420 331060
1723 180460 331060
1724 179060 331020
1725 179100 331020
1726 179140 331020
1727 179180 331020
1728 179220 331020
1729 179260 331020
1730 179300 331020
1731 179340 331020
1732 179380 331020
1733 179420 331020
1734 179460 331020
1735 179500 331020
1736 179540 331020
1737 179580 331020
1738 179620 331020
1739 179660 331020
1740 179700 331020
1741 179740 331020
1742 179780 331020
1743 179820 331020
1744 179860 331020
1745 179900 331020
1746 179940 331020
1747 179980 331020
1748 180020 331020
1749 180060 331020
1750 180100 331020
1751 180140 331020
1752 180180 331020
1753 180220 331020
1754 180260 331020
1755 180300 331020
1756 180340 331020
1757 180380 331020
1758 180420 331020
1759 180460 331020
1760 178980 330980
1761 179020 330980
1762 179060 330980
1763 179100 330980
1764 179140 330980
1765 179180 330980
1766 179220 330980
1767 179260 330980
1768 179300 330980
1769 179340 330980
1770 179380 330980
1771 179420 330980
1772 179460 330980
1773 179500 330980
1774 179540 330980
1775 179580 330980
1776 179620 330980
1777 179660 330980
1778 179700 330980
1779 179740 330980
1780 179780 330980
1781 179820 330980
1782 179860 330980
1783 179900 330980
1784 179940 330980
1785 179980 330980
1786 180020 330980
1787 180060 330980
1788 180100 330980
1789 180140 330980
1790 180180 330980
1791 180220 330980
1792 180260 330980
1793 180300 330980
1794 180340 330980
1795 180380 330980
1796 180420 330980
1797 178900 330940
1798 178940 330940
1799 178980 330940
1800 179020 330940
1801 179060 330940
1802 179100 330940
1803 179140 330940
1804 179180 330940
1805 179220 330940
1806 179260 330940
1807 179300 330940
1808 179340 330940
1809 179380 330940
1810 179420 330940
1811 179460 330940
1812 179500 330940
1813 179540 330940
1814 179580 330940
1815 179620 330940
1816 179660 330940
1817 179700 330940
1818 179740 330940
1819 179780 330940
1820 179820 330940
1821 179860 330940
1822 179900 330940
1823 179940 330940
1824 179980 330940
1825 180020 330940
1826 180060 330940
1827 180100 330940
1828 180140 330940
1829 180180 330940
1830 180220 330940
1831 180260 330940
1832 180300 330940
1833 180340 330940
1834 180380 330940
1835 180420 330940
1836 178860 330900
1837 178900 330900
1838 178940 330900
1839 178980 330900
1840 179020 330900
1841 179060 330900
1842 179100 330900
1843 179140 330900
1844 179180 330900
1845 179220 330900
1846 179260 330900
1847 179300 330900
1848 179340 330900
1849 179380 330900
1850 179420 330900
1851 179460 330900
1852 179500 330900
1853 179540 330900
1854 179580 330900
1855 179620 330900
1856 179660 330900
1857 179700 330900
1858 179740 330900
1859 179780 330900
1860 179820 330900
1861 179860 330900
1862 179900 330900
1863 179940 330900
1864 179980 330900
1865 180020 330900
1866 180060 330900
1867 180100 330900
1868 180140 330900
1869 180180 330900
1870 180220 330900
1871 180260 330900
1872 180300 330900
1873 180340 330900
1874 180380 330900
1875 180420 330900
1876 178820 330860
1877 178860 330860
1878 178900 330860
1879 178940 330860
1880 178980 330860
1881 179020 330860
1882 179060 330860
1883 179100 330860
1884 179140 330860
1885 179180 330860
1886 179220 330860
1887 179260 330860
1888 179300 330860
1889 179340 330860
1890 179380 330860
1891 179420 330860
1892 179460 330860
1893 179500 330860
1894 179540 330860
1895 179580 330860
1896 179620 330860
1897 179660 330860
1898 179700 330860
1899 179740 330860
1900 179780 330860
1901 179820 330860
1902 179860 330860
1903 179900 330860
1904 179940 330860
1905 179980 330860
1906 180020 330860
1907 180060 330860
1908 180100 330860
1909 180140 330860
1910 180180 330860
1911 180220 330860
1912 180260 330860
1913 180300 330860
1914 180340 330860
1915 180380 330860
1916 180420 330860
1917 178820 330820
1918 178860 330820
1919 178900 330820
1920 178940 330820
1921 178980 330820
1922 179020 330820
1923 179060 330820
1924 179100 330820
1925 179140 330820
1926 179180 330820
1927 179220 330820
1928 179260 330820
1929 179300 330820
1930 179340 330820
1931 179380 330820
1932 179420 330820
1933 179460 330820
1934 179500 330820
1935 179540 330820
1936 179580 330820
1937 179620 330820
1938 179660 330820
1939 179700 330820
1940 179740 330820
1941 179780 330820
1942 179820 330820
1943 179860 330820
1944 179900 330820
1945 179940 330820
1946 179980 330820
1947 180020 330820
1948 180060 330820
1949 180100 330820
1950 180140 330820
1951 180180 330820
1952 180220 330820
1953 180260 330820
1954 180300 330820
1955 180340 330820
1956 180380 330820
1957 178780 330780
1958 178820 330780
1959 178860 330780
1960 178900 330780
1961 178940 330780
1962 178980 330780
1963 179020 330780
1964 179060 330780
1965 179100 330780
1966 179140 330780
1967 179180 330780
1968 179220 330780
1969 179260 330780
1970 179300 330780
1971 179340 330780
1972 179380 330780
1973 179420 330780
1974 179460 330780
1975 179500 330780
1976 179540 330780
1977 179580 330780
1978 179620 330780
1979 179660 330780
1980 179700 330780
1981 179740 330780
1982 179780 330780
1983 179820 330780
1984 179860 330780
1985 179900 330780
1986 179940 330780
1987 179980 330780
1988 180020 330780
1989 180060 330780
1990 180100 330780
1991 180140 330780
1992 180180 330780
1993 180220 330780
1994 180260 330780
1995 180300 330780
1996 180340 330780
1997 180380 330780
1998 178740 330740
1999 178780 330740
2000 178820 330740
2001 178860 330740
2002 178900 330740
2003 178940 330740
2004 178980 330740
2005 179020 330740
2006 179060 330740
2007 179100 330740
2008 179140 330740
2009 179180 330740
2010 179220 330740
2011 179260 330740
2012 179300 330740
2013 179340 330740
2014 179380 330740
2015 179420 330740
2016 179460 330740
2017 179500 330740
2018 179540 330740
2019 179580 330740
2020 179620 330740
2021 179660 330740
2022 179700 330740
2023 179740 330740
2024 179780 330740
2025 179820 330740
2026 179860 330740
2027 179900 330740
2028 179940 330740
2029 179980 330740
2030 180020 330740
2031 180060 330740
2032 180100 330740
2033 180140 330740
2034 180180 330740
2035 180220 330740
2036 180260 330740
2037 180300 330740
2038 180340 330740
2039 180380 330740
2040 178700 330700
2041 178740 330700
2042 178780 330700
2043 178820 330700
2044 178860 330700
2045 178900 330700
2046 178940 330700
2047 178980 330700
2048 179020 330700
2049 179060 330700
2050 179100 330700
2051 179140 330700
2052 179180 330700
2053 179220 330700
2054 179260 330700
2055 179300 330700
2056 179340 330700
2057 179380 330700
2058 179420 330700
2059 179460 330700
2060 179500 330700
2061 179540 330700
2062 179580 330700
2063 179620 330700
2064 179660 330700
2065 179700 330700
2066 179740 330700
2067 179780 330700
2068 179820 330700
2069 179860 330700
2070 179900 330700
2071 179940 330700
2072 179980 330700
2073 180020 330700
2074 180060 330700
2075 180100 330700
2076 180140 330700
2077 180180 330700
2078 180220 330700
2079 180260 330700
2080 180300 330700
2081 180340 330700
2082 180380 330700
2083 180420 330700
2084 178700 330660
2085 178740 330660
2086 178780 330660
2087 178820 330660
2088 178860 330660
2089 178900 330660
2090 178940 330660
2091 178980 330660
2092 179020 330660
2093 179060 330660
2094 179100 330660
2095 179140 330660
2096 179180 330660
2097 179220 330660
2098 179260 330660
2099 179300 330660
2100 179340 330660
2101 179380 330660
2102 179420 330660
2103 179460 330660
2104 179500 330660
2105 179540 330660
2106 179580 330660
2107 179620 330660
2108 179660 330660
2109 179700 330660
2110 179740 330660
2111 179780 330660
2112 179820 330660
2113 179860 330660
2114 179900 330660
2115 179940 330660
2116 179980 330660
2117 180020 330660
2118 180060 330660
2119 180100 330660
2120 180140 330660
2121 180180 330660
2122 180220 330660
2123 180260 330660
2124 180300 330660
2125 180340 330660
2126 180380 330660
2127 180420 330660
2128 178660 330620
2129 178700 330620
2130 178740 330620
2131 178780 330620
2132 178820 330620
2133 178860 330620
2134 178900 330620
2135 178940 330620
2136 178980 330620
2137 179020 330620
2138 179060 330620
2139 179100 330620
2140 179140 330620
2141 179180 330620
2142 179220 330620
2143 179260 330620
2144 179300 330620
2145 179340 330620
2146 179380 330620
2147 179420 330620
2148 179460 330620
2149 179500 330620
2150 179540 330620
2151 179580 330620
2152 179620 330620
2153 179660 330620
2154 179700 330620
2155 179740 330620
2156 179780 330620
2157 179820 330620
2158 179860 330620
2159 179900 330620
2160 179940 330620
2161 179980 330620
2162 180020 330620
2163 180060 330620
2164 180100 330620
2165 180140 330620
2166 180180 330620
2167 180220 330620
2168 180260 330620
2169 180300 330620
2170 180340 330620
2171 180380 330620
2172 180420 330620
2173 178620 330580
2174 178660 330580
2175 178700 330580
2176 178740 330580
2177 178780 330580
2178 178820 330580
2179 178860 330580
2180 178900 330580
2181 178940 330580
2182 178980 330580
2183 179020 330580
2184 179060 330580
2185 179100 330580
2186 179140 330580
2187 179180 330580
2188 179220 330580
2189 179260 330580
2190 179300 330580
2191 179340 330580
2192 179380 330580
2193 179420 330580
2194 179460 330580
2195 179500 330580
2196 179540 330580
2197 179580 330580
2198 179620 330580
2199 179660 330580
2200 179700 330580
2201 179740 330580
2202 179780 330580
2203 179820 330580
2204 179860 330580
2205 179900 330580
2206 179940 330580
2207 179980 330580
2208 180020 330580
2209 180060 330580
2210 180100 330580
2211 180140 330580
2212 180180 330580
2213 180220 330580
2214 180260 330580
2215 180300 330580
2216 180340 330580
2217 180380 330580
2218 180420 330580
2219 178580 330540
2220 178620 330540
2221 178660 330540
2222 178700 330540
2223 178740 330540
2224 178780 330540
2225 178820 330540
2226 178860 330540
2227 178900 330540
2228 178940 330540
2229 178980 330540
2230 179020 330540
2231 179060 330540
2232 179100 330540
2233 179140 330540
2234 179180 330540
2235 179220 330540
2236 179260 330540
2237 179300 330540
2238 179340 330540
2239 179380 330540
2240 179420 330540
2241 179460 330540
2242 179500 330540
2243 179540 330540
2244 179580 330540
2245 179620 330540
2246 179660 330540
2247 179700 330540
2248 179740 330540
2249 179780 330540
2250 179820 330540
2251 179860 330540
2252 179900 330540
2253 179940 330540
2254 179980 330540
2255 180020 330540
2256 180060 330540
2257 180100 330540
2258 180140 330540
2259 180180 330540
2260 180220 330540
2261 180260 330540
2262 180300 330540
2263 180340 330540
2264 180380 330540
2265 180420 330540
2266 180460 330540
2267 178540 330500
2268 178580 330500
2269 178620 330500
2270 178660 330500
2271 178700 330500
2272 178740 330500
2273 178780 330500
2274 178820 330500
2275 178860 330500
2276 178900 330500
2277 178940 330500
2278 178980 330500
2279 179020 330500
2280 179060 330500
2281 179100 330500
2282 179140 330500
2283 179180 330500
2284 179220 330500
2285 179260 330500
2286 179300 330500
2287 179340 330500
2288 179380 330500
2289 179420 330500
2290 179460 330500
2291 179500 330500
2292 179540 330500
2293 179580 330500
2294 179620 330500
2295 179660 330500
2296 179700 330500
2297 179740 330500
2298 179780 330500
2299 179820 330500
2300 179860 330500
2301 179900 330500
2302 179940 330500
2303 179980 330500
2304 180020 330500
2305 180060 330500
2306 180100 330500
2307 180140 330500
2308 180180 330500
2309 180220 330500
2310 180260 330500
2311 180300 330500
2312 180340 330500
2313 180380 330500
2314 180420 330500
2315 180460 330500
2316 178540 330460
2317 178580 330460
2318 178620 330460
2319 178660 330460
2320 178700 330460
2321 178740 330460
2322 178780 330460
2323 178820 330460
2324 178860 330460
2325 178900 330460
2326 178940 330460
2327 178980 330460
2328 179020 330460
2329 179060 330460
2330 179100 330460
2331 179140 330460
2332 179180 330460
2333 179220 330460
2334 179260 330460
2335 179300 330460
2336 179340 330460
2337 179380 330460
2338 179420 330460
2339 179460 330460
2340 179500 330460
2341 179540 330460
2342 179580 330460
2343 179620 330460
2344 179660 330460
2345 179700 330460
2346 179740 330460
2347 179780 330460
2348 179820 330460
2349 179860 330460
2350 179900 330460
2351 179940 330460
2352 179980 330460
2353 180020 330460
2354 180060 330460
2355 180100 330460
2356 180140 330460
2357 180180 330460
2358 180220 330460
2359 180260 330460
2360 180300 330460
2361 180340 330460
2362 180380 330460
2363 180420 330460
2364 180460 330460
2365 180500 330460
2366 178500 330420
2367 178540 330420
2368 178580 330420
2369 178620 330420
2370 178660 330420
2371 178700 330420
2372 178740 330420
2373 178780 330420
2374 178820 330420
2375 178860 330420
2376 178900 330420
2377 178940 330420
2378 178980 330420
2379 179020 330420
2380 179060 330420
2381 179100 330420
2382 179140 330420
2383 179180 330420
2384 179220 330420
2385 179260 330420
2386 179300 330420
2387 179340 330420
2388 179380 330420
2389 179420 330420
2390 179460 330420
2391 179500 330420
2392 179540 330420
2393 179580 330420
2394 179620 330420
2395 179660 330420
2396 179700 330420
2397 179740 330420
2398 179780 330420
2399 179820 330420
2400 179860 330420
2401 179900 330420
2402 179940 330420
2403 179980 330420
2404 180020 330420
2405 180060 330420
2406 180100 330420
2407 180140 330420
2408 180180 330420
2409 180220 330420
2410 180260 330420
2411 180300 330420
2412 180340 330420
2413 180380 330420
2414 180420 330420
2415 180460 330420
2416 180500 330420
2417 180540 330420
2418 178500 330380
2419 178540 330380
2420 178580 330380
2421 178620 330380
2422 178660 330380
2423 178700 330380
2424 178740 330380
2425 178780 330380
2426 178820 330380
2427 178860 330380
2428 178900 330380
2429 178940 330380
2430 178980 330380
2431 179020 330380
2432 179060 330380
2433 179100 330380
2434 179140 330380
2435 179180 330380
2436 179220 330380
2437 179260 330380
2438 179300 330380
2439 179340 330380
2440 179380 330380
2441 179420 330380
2442 179460 330380
2443 179500 330380
2444 179540 330380
2445 179580 330380
2446 179620 330380
2447 179660 330380
2448 179700 330380
2449 179740 330380
2450 179780 330380
2451 179820 330380
2452 179860 330380
2453 179900 330380
2454 179940 330380
2455 179980 330380
2456 180020 330380
2457 180060 330380
2458 180100 330380
2459 180140 330380
2460 180180 330380
2461 180220 330380
2462 180260 330380
2463 180300 330380
2464 180340 330380
2465 180380 330380
2466 180420 330380
2467 180460 330380
2468 180500 330380
2469 180540 330380
2470 180580 330380
2471 178500 330340
2472 178540 330340
2473 178580 330340
2474 178620 330340
2475 178660 330340
2476 178700 330340
2477 178740 330340
2478 178780 330340
2479 178820 330340
2480 178860 330340
2481 178900 330340
2482 178940 330340
2483 178980 330340
2484 179020 330340
2485 179060 330340
2486 179100 330340
2487 179140 330340
2488 179180 330340
2489 179220 330340
2490 179260 330340
2491 179300 330340
2492 179340 330340
2493 179380 330340
2494 179420 330340
2495 179460 330340
2496 179500 330340
2497 179540 330340
2498 179580 330340
2499 179620 330340
2500 179660 330340
2501 179700 330340
2502 179740 330340
2503 179780 330340
2504 179820 330340
2505 179860 330340
2506 179900 330340
2507 179940 330340
2508 179980 330340
2509 180020 330340
2510 180060 330340
2511 180100 330340
2512 180140 330340
2513 180180 330340
2514 180220 330340
2515 180260 330340
2516 180300 330340
2517 180340 330340
2518 180380 330340
2519 180420 330340
2520 180460 330340
2521 180500 330340
2522 180540 330340
2523 180580 330340
2524 180620 330340
2525 178500 330300
2526 178540 330300
2527 178580 330300
2528 178620 330300
2529 178660 330300
2530 178700 330300
2531 178740 330300
2532 178780 330300
2533 178820 330300
2534 178860 330300
2535 178900 330300
2536 178940 330300
2537 178980 330300
2538 179020 330300
2539 179060 330300
2540 179100 330300
2541 179140 330300
2542 179180 330300
2543 179220 330300
2544 179260 330300
2545 179300 330300
2546 179340 330300
2547 179380 330300
2548 179420 330300
2549 179460 330300
2550 179500 330300
2551 179540 330300
2552 179580 330300
2553 179620 330300
2554 179660 330300
2555 179700 330300
2556 179740 330300
2557 179780 330300
2558 179820 330300
2559 179860 330300
2560 179900 330300
2561 179940 330300
2562 179980 330300
2563 180020 330300
2564 180060 330300
2565 180100 330300
2566 180140 330300
2567 180180 330300
2568 180220 330300
2569 180260 330300
2570 180300 330300
2571 180340 330300
2572 180380 330300
2573 180420 330300
2574 180460 330300
2575 180500 330300
2576 180540 330300
2577 180580 330300
2578 180620 330300
2579 180660 330300
2580 178500 330260
2581 178540 330260
2582 178580 330260
2583 178620 330260
2584 178660 330260
2585 178700 330260
2586 178740 330260
2587 178780 330260
2588 178820 330260
2589 178860 330260
2590 178900 330260
2591 178940 330260
2592 178980 330260
2593 179020 330260
2594 179060 330260
2595 179100 330260
2596 179140 330260
2597 179180 330260
2598 179220 330260
2599 179260 330260
2600 179300 330260
2601 179340 330260
2602 179380 330260
2603 179420 330260
2604 179460 330260
2605 179500 330260
2606 179540 330260
2607 179580 330260
2608 179620 330260
2609 179660 330260
2610 179700 330260
2611 179740 330260
2612 179780 330260
2613 179820 330260
2614 179860 330260
2615 179900 330260
2616 179940 330260
2617 179980 330260
2618 180020 330260
2619 180060 330260
2620 180100 330260
2621 180300 330260
2622 180340 330260
2623 180380 330260
2624 180420 330260
2625 180460 330260
2626 180500 330260
2627 180540 330260
2628 180580 330260
2629 180620 330260
2630 180660 330260
2631 178500 330220
2632 178540 330220
2633 178580 330220
2634 178620 330220
2635 178660 330220
2636 178700 330220
2637 178740 330220
2638 178780 330220
2639 178820 330220
2640 178860 330220
2641 178900 330220
2642 178940 330220
2643 178980 330220
2644 179020 330220
2645 179060 330220
2646 179100 330220
2647 179140 330220
2648 179180 330220
2649 179220 330220
2650 179260 330220
2651 179300 330220
2652 179340 330220
2653 179380 330220
2654 179420 330220
2655 179460 330220
2656 179500 330220
2657 179540 330220
2658 179580 330220
2659 179620 330220
2660 179660 330220
2661 179700 330220
2662 179740 330220
2663 179780 330220
2664 179820 330220
2665 179860 330220
2666 179900 330220
2667 179940 330220
2668 179980 330220
2669 180460 330220
2670 180500 330220
2671 180540 330220
2672 180580 330220
2673 180620 330220
2674 180660 330220
2675 180700 330220
2676 178460 330180
2677 178500 330180
2678 178540 330180
2679 178580 330180
2680 178620 330180
2681 178660 330180
2682 178700 330180
2683 178740 330180
2684 178780 330180
2685 178820 330180
2686 178860 330180
2687 178900 330180
2688 178940 330180
2689 178980 330180
2690 179020 330180
2691 179060 330180
2692 179100 330180
2693 179140 330180
2694 179180 330180
2695 179220 330180
2696 179260 330180
2697 179300 330180
2698 179340 330180
2699 179380 330180
2700 179420 330180
2701 179460 330180
2702 179500 330180
2703 179540 330180
2704 179580 330180
2705 179620 330180
2706 179660 330180
2707 179700 330180
2708 179740 330180
2709 179780 330180
2710 179820 330180
2711 179860 330180
2712 179900 330180
2713 179940 330180
2714 180540 330180
2715 180580 330180
2716 180620 330180
2717 180660 330180
2718 180700 330180
2719 178460 330140
2720 178500 330140
2721 178540 330140
2722 178580 330140
2723 178620 330140
2724 178660 330140
2725 178700 330140
2726 178740 330140
2727 178780 330140
2728 178820 330140
2729 178860 330140
2730 178900 330140
2731 178940 330140
2732 178980 330140
2733 179020 330140
2734 179060 330140
2735 179100 330140
2736 179140 330140
2737 179180 330140
2738 179220 330140
2739 179260 330140
2740 179300 330140
2741 179340 330140
2742 179380 330140
2743 179420 330140
2744 179460 330140
2745 179500 330140
2746 179540 330140
2747 179580 330140
2748 179620 330140
2749 179660 330140
2750 179700 330140
2751 179740 330140
2752 179780 330140
2753 179820 330140
2754 179860 330140
2755 179900 330140
2756 180620 330140
2757 180660 330140
2758 180700 330140
2759 178500 330100
2760 178540 330100
2761 178580 330100
2762 178620 330100
2763 178660 330100
2764 178700 330100
2765 178740 330100
2766 178780 330100
2767 178820 330100
2768 178860 330100
2769 178900 330100
2770 178940 330100
2771 178980 330100
2772 179020 330100
2773 179060 330100
2774 179100 330100
2775 179140 330100
2776 179180 330100
2777 179220 330100
2778 179260 330100
2779 179300 330100
2780 179340 330100
2781 179380 330100
2782 179420 330100
2783 179460 330100
2784 179500 330100
2785 179540 330100
2786 179580 330100
2787 179620 330100
2788 179660 330100
2789 179700 330100
2790 179740 330100
2791 179780 330100
2792 179820 330100
2793 179860 330100
2794 180660 330100
2795 180700 330100
2796 178500 330060
2797 178540 330060
2798 178580 330060
2799 178620 330060
2800 178660 330060
2801 178700 330060
2802 178740 330060
2803 178780 330060
2804 178820 330060
2805 178860 330060
2806 178900 330060
2807 178940 330060
2808 178980 330060
2809 179020 330060
2810 179060 330060
2811 179100 330060
2812 179140 330060
2813 179180 330060
2814 179220 330060
2815 179260 330060
2816 179300 330060
2817 179340 330060
2818 179380 330060
2819 179420 330060
2820 179460 330060
2821 179500 330060
2822 179540 330060
2823 179580 330060
2824 179620 330060
2825 179660 330060
2826 179700 330060
2827 179740 330060
2828 179780 330060
2829 179820 330060
2830 178500 330020
2831 178540 330020
2832 178580 330020
2833 178620 330020
2834 178660 330020
2835 178700 330020
2836 178740 330020
2837 178780 330020
2838 178820 330020
2839 178860 330020
2840 178900 330020
2841 178940 330020
2842 178980 330020
2843 179020 330020
2844 179060 330020
2845 179100 330020
2846 179140 330020
2847 179180 330020
2848 179220 330020
2849 179260 330020
2850 179300 330020
2851 179340 330020
2852 179380 330020
2853 179420 330020
2854 179460 330020
2855 179500 330020
2856 179540 330020
2857 179580 330020
2858 179620 330020
2859 179660 330020
2860 179700 330020
2861 179740 330020
2862 179780 330020
2863 178500 329980
2864 178540 329980
2865 178580 329980
2866 178620 329980
2867 178660 329980
2868 178700 329980
2869 178740 329980
2870 178780 329980
2871 178820 329980
2872 178860 329980
2873 178900 329980
2874 178940 329980
2875 178980 329980
2876 179020 329980
2877 179060 329980
2878 179100 329980
2879 179140 329980
2880 179180 329980
2881 179220 329980
2882 179260 329980
2883 179300 329980
2884 179340 329980
2885 179380 329980
2886 179420 329980
2887 179460 329980
2888 179500 329980
2889 179540 329980
2890 179580 329980
2891 179620 329980
2892 179660 329980
2893 179700 329980
2894 179740 329980
2895 178540 329940
2896 178580 329940
2897 178620 329940
2898 178660 329940
2899 178700 329940
2900 178740 329940
2901 178780 329940
2902 178820 329940
2903 178860 329940
2904 178900 329940
2905 178940 329940
2906 178980 329940
2907 179020 329940
2908 179060 329940
2909 179100 329940
2910 179140 329940
2911 179180 329940
2912 179220 329940
2913 179260 329940
2914 179300 329940
2915 179340 329940
2916 179380 329940
2917 179420 329940
2918 179460 329940
2919 179500 329940
2920 179540 329940
2921 179580 329940
2922 179620 329940
2923 179660 329940
2924 179700 329940
2925 179740 329940
2926 178540 329900
2927 178580 329900
2928 178620 329900
2929 178660 329900
2930 178700 329900
2931 178740 329900
2932 178780 329900
2933 178820 329900
2934 178860 329900
2935 178900 329900
2936 178940 329900
2937 178980 329900
2938 179020 329900
2939 179060 329900
2940 179100 329900
2941 179140 329900
2942 179180 329900
2943 179220 329900
2944 179260 329900
2945 179300 329900
2946 179340 329900
2947 179380 329900
2948 179420 329900
2949 179460 329900
2950 179500 329900
2951 179540 329900
2952 179580 329900
2953 179620 329900
2954 179660 329900
2955 179700 329900
2956 178540 329860
2957 178580 329860
2958 178620 329860
2959 178660 329860
2960 178700 329860
2961 178740 329860
2962 178780 329860
2963 178820 329860
2964 178860 329860
2965 178900 329860
2966 178940 329860
2967 178980 329860
2968 179020 329860
2969 179060 329860
2970 179100 329860
2971 179140 329860
2972 179180 329860
2973 179220 329860
2974 179260 329860
2975 179300 329860
2976 179340 329860
2977 179380 329860
2978 179420 329860
2979 179460 329860
2980 179500 329860
2981 179540 329860
2982 179580 329860
2983 179620 329860
2984 179660 329860
2985 178580 329820
2986 178620 329820
2987 178660 329820
2988 178700 329820
2989 178740 329820
2990 178780 329820
2991 178820 329820
2992 178860 329820
2993 178900 329820
2994 178940 329820
2995 178980 329820
2996 179020 329820
2997 179060 329820
2998 179100 329820
2999 179140 329820
3000 179180 329820
3001 179220 329820
3002 179260 329820
3003 179300 329820
3004 179340 329820
3005 179380 329820
3006 179420 329820
3007 179460 329820
3008 179500 329820
3009 179540 329820
3010 179580 329820
3011 179620 329820
3012 178620 329780
3013 178660 329780
3014 178700 329780
3015 178740 329780
3016 178780 329780
3017 178820 329780
3018 178860 329780
3019 178900 329780
3020 178940 329780
3021 178980 329780
3022 179020 329780
3023 179060 329780
3024 179100 329780
3025 179140 329780
3026 179180 329780
3027 179220 329780
3028 179260 329780
3029 179300 329780
3030 179340 329780
3031 179380 329780
3032 179420 329780
3033 179460 329780
3034 179500 329780
3035 179540 329780
3036 179580 329780
3037 178660 329740
3038 178700 329740
3039 178740 329740
3040 178780 329740
3041 178820 329740
3042 178860 329740
3043 178900 329740
3044 178940 329740
3045 178980 329740
3046 179020 329740
3047 179060 329740
3048 179100 329740
3049 179140 329740
3050 179180 329740
3051 179220 329740
3052 179260 329740
3053 179300 329740
3054 179340 329740
3055 179380 329740
3056 179420 329740
3057 179460 329740
3058 179500 329740
3059 179540 329740
3060 178740 329700
3061 178780 329700
3062 178820 329700
3063 178860 329700
3064 178900 329700
3065 178940 329700
3066 178980 329700
3067 179020 329700
3068 179060 329700
3069 179100 329700
3070 179140 329700
3071 179180 329700
3072 179220 329700
3073 179260 329700
3074 179300 329700
3075 179340 329700
3076 179380 329700
3077 179420 329700
3078 179460 329700
3079 178780 329660
3080 178820 329660
3081 178860 329660
3082 178900 329660
3083 178940 329660
3084 178980 329660
3085 179020 329660
3086 179060 329660
3087 179100 329660
3088 179140 329660
3089 179180 329660
3090 179220 329660
3091 179260 329660
3092 179300 329660
3093 179340 329660
3094 179380 329660
3095 178900 329620
3096 178940 329620
3097 178980 329620
3098 179020 329620
3099 179060 329620
3100 179100 329620
3101 179140 329620
3102 179180 329620
3103 179220 329620
Coordinate Reference System (CRS) arguments: NA 
> summary(y)
Object of class SpatialPixels
Coordinates:
     min    max
x 178440 181560
y 329600 333760
Is projected: NA 
proj4string : [NA]
Number of points: 3103
Grid attributes:
  cellcentre.offset cellsize cells.dim
x            178460       40        78
y            329620       40       104
> plot(y) # plots grid
> plot(y, grid = FALSE) # plots points
> 
> 
> 
> cleanEx()
> nameEx("SpatialPixelsDataFrame-class")
> ### * SpatialPixelsDataFrame-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPixelsDataFrame-class
> ### Title: Class "SpatialPixelsDataFrame"
> ### Aliases: SpatialPixelsDataFrame-class [,SpatialPixelsDataFrame-method
> ###   show,SpatialPixelsDataFrame-method plot.SpatialPixelsDataFrame
> ###   print.summary.SpatialPixelsDataFrame
> ###   coerce,SpatialPixelsDataFrame,SpatialPointsDataFrame-method
> ###   coerce,SpatialPixelsDataFrame,SpatialGridDataFrame-method
> ###   coerce,SpatialPixelsDataFrame,SpatialPolygonsDataFrame-method
> ###   coerce,SpatialPixelsDataFrame,data.frame-method
> ###   coerce,SpatialPixelsDataFrame,matrix-method
> ###   coerce,SpatialPixelsDataFrame,array-method
> ###   as.data.frame.SpatialPixelsDataFrame rbind.SpatialPixelsDataFrame
> ###   dim.SpatialPixelsDataFrame plot,SpatialPixelsDataFrame,missing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> data(meuse.grid) # only the non-missing valued cells
> coordinates(meuse.grid) = c("x", "y") # promote to SpatialPointsDataFrame
> gridded(meuse.grid) <- TRUE # promote to SpatialPixelsDataFrame
> meuse.grid[["idist"]] = 1 - meuse.grid[["dist"]] # assigns new attribute
> image(meuse.grid["idist"]) # note the single [
> 
> # toy example:
> df = data.frame(z = c(1:6,NA,8,9),
+     xc = c(1,1,1,2,2,2,3,3,3),
+     yc = c(rep(c(0, 1.5, 3),3)))
> coordinates(df) = ~xc+yc
> gridded(df) = TRUE
> image(df["z"])
> # draw labels to verify:
> cc = coordinates(df)
> z=df[["z"]]
> zc=as.character(z)
> zc[is.na(zc)]="NA"
> text(cc[,1],cc[,2],zc)
> 
> 
> 
> 
> cleanEx()
> nameEx("SpatialPoints-class")
> ### * SpatialPoints-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPoints-class
> ### Title: Class "SpatialPoints"
> ### Aliases: SpatialPoints-class [,SpatialPoints-method
> ###   coerce,SpatialPoints,matrix-method
> ###   coerce,SpatialPoints,data.frame-method
> ###   coerce,SpatialPoints,SpatialPixels-method
> ###   coerce,SpatialPoints,Line-method coerce,SpatialPoints,Lines-method
> ###   coerce,SpatialPoints,SpatialLines-method
> ###   coerce,SpatialPointsDataFrame,SpatialPixelsDataFrame-method
> ###   show,SpatialPoints-method as.data.frame.SpatialPoints
> ###   plot,SpatialPoints,missing-method summary,SpatialPoints-method
> ###   print.SpatialPoints summary.SpatialPoints rbind.SpatialPoints
> ###   $,SpatialPoints-method $<-,SpatialPoints,character-method
> ###   row.names.SpatialPoints coerce,ppp,SpatialPoints-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> x = c(1,2,3,4,5)
> y = c(3,2,5,1,4)
> S <- SpatialPoints(cbind(x,y))
> S <- SpatialPoints(list(x,y))
> S <- SpatialPoints(data.frame(x,y))
> S
SpatialPoints:
     x y
[1,] 1 3
[2,] 2 2
[3,] 3 5
[4,] 4 1
[5,] 5 4
Coordinate Reference System (CRS) arguments: NA 
> plot(S)
> 
> 
> 
> cleanEx()
> nameEx("SpatialPoints")
> ### * SpatialPoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPoints
> ### Title: create objects of class SpatialPoints or SpatialPointsDataFrame
> ### Aliases: SpatialPoints SpatialPointsDataFrame
> ### Keywords: manip
> 
> ### ** Examples
> 
> set.seed(1331)
> pts = cbind(1:5, 1:5)
> dimnames(pts)[[1]] = letters[1:5]
> df = data.frame(a = 1:5)
> row.names(df) = letters[5:1]
> 
> library(sp)
> options(warn=1) # show warnings where they occur
> SpatialPointsDataFrame(pts, df) # warn
Warning in SpatialPointsDataFrame(pts, df) :
  forming a SpatialPointsDataFrame based on maching IDs, not on record order. Use match.ID = FALSE to match on record order
  coordinates a
a      (1, 1) 5
b      (2, 2) 4
c      (3, 3) 3
d      (4, 4) 2
e      (5, 5) 1
> SpatialPointsDataFrame(pts, df, match.ID = TRUE) # don't warn
  coordinates a
a      (1, 1) 5
b      (2, 2) 4
c      (3, 3) 3
d      (4, 4) 2
e      (5, 5) 1
> SpatialPointsDataFrame(pts, df, match.ID = FALSE) # don't warn
  coordinates a
e      (1, 1) 1
d      (2, 2) 2
c      (3, 3) 3
b      (4, 4) 4
a      (5, 5) 5
> df$m = letters[5:1]
> SpatialPointsDataFrame(pts, df, match.ID = "m") # don't warn
  coordinates a m
a      (1, 1) 5 a
b      (2, 2) 4 b
c      (3, 3) 3 c
d      (4, 4) 2 d
e      (5, 5) 1 e
> 
> dimnames(pts)[[1]] = letters[5:1]
> SpatialPointsDataFrame(pts, df) # don't warn: ID matching doesn't reorder
  coordinates a m
e      (1, 1) 1 e
d      (2, 2) 2 d
c      (3, 3) 3 c
b      (4, 4) 4 b
a      (5, 5) 5 a
> 
> 
> 
> cleanEx()
> nameEx("SpatialPointsDataFrame-class")
> ### * SpatialPointsDataFrame-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPointsDataFrame-class
> ### Title: Class "SpatialPointsDataFrame"
> ### Aliases: SpatialPointsDataFrame-class [,SpatialPointsDataFrame-method
> ###   coerce,SpatialPointsDataFrame,data.frame-method
> ###   coerce,SpatialPointsDataFrame,SpatialPoints-method
> ###   show,SpatialPointsDataFrame-method
> ###   points,SpatialPointsDataFrame-method
> ###   coordinates,SpatialPointsDataFrame-method
> ###   as.data.frame.SpatialPointsDataFrame dim.SpatialPointsDataFrame
> ###   print.SpatialPointsDataFrame ShowSpatialPointsDataFrame
> ###   as.SpatialPoints.SpatialPointsDataFrame rbind.SpatialPointsDataFrame
> ###   row.names.SpatialPointsDataFrame
> ###   coerce,ppp,SpatialPointsDataFrame-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> data(meuse)
> xy = meuse[c("x", "y")] # retrieve coordinates as data.frame
> class(meuse)
[1] "data.frame"
> data(meuse) # reload data.frame
> coordinates(meuse) = c("x", "y") # specify column names
> class(meuse)
[1] "SpatialPointsDataFrame"
attr(,"package")
[1] "sp"
> data(meuse) # reload data.frame
> coordinates(meuse) = c(1, 2) # specify column names
> class(meuse)
[1] "SpatialPointsDataFrame"
attr(,"package")
[1] "sp"
> data(meuse) # reload data.frame
> coordinates(meuse) = ~x+y # formula
> class(meuse)
[1] "SpatialPointsDataFrame"
attr(,"package")
[1] "sp"
> data(meuse) # reload data.frame
> coordinates(meuse) = xy   # as data frame
> class(meuse)
[1] "SpatialPointsDataFrame"
attr(,"package")
[1] "sp"
> data(meuse) # reload data.frame
> coordinates(meuse) = as.matrix(xy)   # as matrix
> meuse$log.zn = log(meuse$zinc)
> class(meuse)
[1] "SpatialPointsDataFrame"
attr(,"package")
[1] "sp"
> dim(meuse)
[1] 155  15
> 
> 
> 
> cleanEx()
> nameEx("SpatialPolygons-class")
> ### * SpatialPolygons-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPolygons-class
> ### Title: Class "SpatialPolygons"
> ### Aliases: SpatialPolygons-class [,SpatialPolygons-method
> ###   as.data.frame.SpatialPolygons
> ###   as.SpatialPolygonsDataFrame.SpatialPolygons
> ###   coerce,SpatialPolygons,SpatialPolygonsDataFrame-method
> ###   plot,SpatialPolygons,missing-method summary,SpatialPolygons-method
> ###   rbind.SpatialPolygons coerce,Polygons,Lines-method
> ###   coerce,SpatialPolygons,SpatialLines-method
> ###   coerce,deldir,SpatialPolygons-method row.names.SpatialPolygons
> ###   get_Polypath set_Polypath get_PolypathRule set_PolypathRule
> ### Keywords: classes
> 
> ### ** Examples
> 
> # simple example, from vignette("sp"):
> Sr1 = Polygon(cbind(c(2,4,4,1,2),c(2,3,5,4,2)))
> Sr2 = Polygon(cbind(c(5,4,2,5),c(2,3,2,2)))
> Sr3 = Polygon(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
> Sr4 = Polygon(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
> 
> Srs1 = Polygons(list(Sr1), "s1")
> Srs2 = Polygons(list(Sr2), "s2")
> Srs3 = Polygons(list(Sr3, Sr4), "s3/4")
> SpP = SpatialPolygons(list(Srs1,Srs2,Srs3), 1:3)
> plot(SpP, col = 1:3, pbg="white")
> 
> grd <- GridTopology(c(1,1), c(1,1), c(10,10))
> polys <- as(grd, "SpatialPolygons")
> plot(polys)
> text(coordinates(polys), labels=row.names(polys))
> 
> 
> 
> cleanEx()
> nameEx("SpatialPolygonsDataFrame-class")
> ### * SpatialPolygonsDataFrame-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SpatialPolygonsDataFrame-class
> ### Title: Class "SpatialPolygonsDataFrame"
> ### Aliases: SpatialPolygonsDataFrame-class
> ###   [,SpatialPolygonsDataFrame-method
> ###   as.data.frame.SpatialPolygonsDataFrame
> ###   coerce,SpatialPolygonsDataFrame,data.frame-method
> ###   coerce,SpatialPolygonsDataFrame,SpatialLinesDataFrame-method
> ###   coerce,SpatialPolygonsDataFrame,SpatialPolygons-method
> ###   rbind.SpatialPolygonsDataFrame dim.SpatialPolygonsDataFrame
> ###   row.names.SpatialPolygonsDataFrame
> ### Keywords: classes
> 
> ### ** Examples
> 
> # simple example, from scratch:
> Sr1 = Polygon(cbind(c(2,4,4,1,2),c(2,3,5,4,2)))
> Sr2 = Polygon(cbind(c(5,4,2,5),c(2,3,2,2)))
> Sr3 = Polygon(cbind(c(4,4,5,10,4),c(5,3,2,5,5)))
> Sr4 = Polygon(cbind(c(5,6,6,5,5),c(4,4,3,3,4)), hole = TRUE)
> 
> Srs1 = Polygons(list(Sr1), "s1")
> Srs2 = Polygons(list(Sr2), "s2")
> Srs3 = Polygons(list(Sr3, Sr4), "s3/4")
> SpP = SpatialPolygons(list(Srs1,Srs2,Srs3), 1:3)
> plot(SpP, col = 1:3, pbg="white")
> 
> grd <- GridTopology(c(1,1), c(1,1), c(10,10))
> polys <- as(grd, "SpatialPolygons")
> centroids <- coordinates(polys)
> x <- centroids[,1]
> y <- centroids[,2]
> z <- 1.4 + 0.1*x + 0.2*y + 0.002*x*x
> ex_1.7 <- SpatialPolygonsDataFrame(polys,
+  data=data.frame(x=x, y=y, z=z, row.names=row.names(polys)))
> brks <- quantile(z, seq(0,1,1/7))
> cols <- grey((length(brks):2)/length(brks))
> dens <- (2:length(brks))*3
> plot(ex_1.7, col=cols[findInterval(z, brks, all.inside=TRUE)])
> plot(ex_1.7, density=dens[findInterval(z, brks, all.inside=TRUE)])
> 
> 
> 
> cleanEx()
> nameEx("aggregate")
> ### * aggregate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aggregate
> ### Title: aggregation of spatial objects
> ### Aliases: aggregate aggregate.Spatial
> ### Keywords: methods
> 
> ### ** Examples
> 
> data("meuse")
> coordinates(meuse) <- ~x+y
> data("meuse.grid")
> coordinates(meuse.grid) <- ~x+y
> gridded(meuse.grid) <- TRUE
> i = cut(meuse.grid$dist, c(0,.25,.5,.75,1), include.lowest = TRUE)
> j = sample(1:2, 3103,replace=TRUE)
> 
> x = aggregate(meuse.grid["dist"], list(i=i,j=j), mean, dissolve = FALSE)
> spplot(x["j"], col.regions=bpy.colors())
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("as.SpatialPolygons.GridTopology")
> ### * as.SpatialPolygons.GridTopology
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.SpatialPolygons.GridTopology
> ### Title: Make SpatialPolygons object from GridTopology object
> ### Aliases: as.SpatialPolygons.GridTopology
> ###   coerce,GridTopology,SpatialPolygons-method HexPoints2SpatialPolygons
> ###   IDvaluesGridTopology as.SpatialPolygons.SpatialPixels
> ###   coerce,SpatialPixels,SpatialPolygons-method IDvaluesSpatialPixels
> ### Keywords: spatial
> 
> ### ** Examples
> 
> library(lattice)
> grd <- GridTopology(cellcentre.offset=c(-175,55), cellsize=c(10,10), cells.dim=c(4,4))
> SpP_grd <- as.SpatialPolygons.GridTopology(grd)
> plot(SpP_grd)
> text(coordinates(SpP_grd), sapply(slot(SpP_grd, "polygons"), function(i) slot(i, "ID")), cex=0.5)
> trdata <- data.frame(A=rep(c(1,2,3,4), 4), B=rep(c(1,2,3,4), each=4),
+  row.names=sapply(slot(SpP_grd, "polygons"), function(i) slot(i, "ID")))
> SpPDF <- SpatialPolygonsDataFrame(SpP_grd, trdata)
> spplot(SpPDF)
> 
> data(meuse.grid)
> gridded(meuse.grid)=~x+y
> xx = spsample(meuse.grid,  type="hexagonal", cellsize=200)
> xxpl = HexPoints2SpatialPolygons(xx)
> image(meuse.grid["dist"])
> plot(xxpl, add = TRUE)
> points(xx, cex = .5)
> ## Not run: 
> ##D spplot(aggregate(as(meuse.grid[,1:3], "SpatialPolygonsDataFrame"), xxpl,
> ##D  areaWeighted=TRUE), main = "aggregated meuse.grid")
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("as.SpatialPolygons.PolygonsList")
> ### * as.SpatialPolygons.PolygonsList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.SpatialPolygons.PolygonsList
> ### Title: Making SpatialPolygons objects
> ### Aliases: as.SpatialPolygons.PolygonsList
> ### Keywords: spatial
> 
> ### ** Examples
> 
> grd <- GridTopology(c(1,1), c(1,1), c(10,10))
> polys <- as.SpatialPolygons.GridTopology(grd)
> plot(polys)
> text(coordinates(polys), labels=sapply(slot(polys, "polygons"), function(i) slot(i, "ID")), cex=0.6)
> 
> 
> 
> cleanEx()
> nameEx("asciigrid")
> ### * asciigrid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.asciigrid
> ### Title: read/write to/from (ESRI) asciigrid format
> ### Aliases: read.asciigrid write.asciigrid
> ### Keywords: programming
> 
> ### ** Examples
> 
> x <- read.asciigrid(system.file("external/test.ag", package="sp")[1])
> class(x)
[1] "SpatialGridDataFrame"
attr(,"package")
[1] "sp"
> image(x)
> 
> 
> 
> cleanEx()
> nameEx("bbox")
> ### * bbox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bbox-methods
> ### Title: retrieve bbox from spatial data
> ### Aliases: bbox,Spatial-method bbox,ANY-method bbox,Line-method
> ###   bbox,Lines-method bbox,Polygon-method bbox,Polygons-method bbox
> ### Keywords: methods spatial
> 
> ### ** Examples
> 
> # just 9 points on a grid:
> x <- c(1,1,1,2,2,2,3,3,3)
> y <- c(1,2,3,1,2,3,1,2,3)
> xy <- cbind(x,y)
> S <- SpatialPoints(xy)
> bbox(S)
  min max
x   1   3
y   1   3
> 
> # data.frame
> data(meuse.grid)
> coordinates(meuse.grid) <- ~x+y
> gridded(meuse.grid) <- TRUE
> bbox(meuse.grid)
     min    max
x 178440 181560
y 329600 333760
> 
> 
> 
> 
> cleanEx()
> nameEx("bpy.colors")
> ### * bpy.colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bpy.colors
> ### Title: blue-pink-yellow color scheme, which also prints well on
> ###   black/white printers
> ### Aliases: bpy.colors
> ### Keywords: color
> 
> ### ** Examples
> 
> bpy.colors(10)
 [1] "#000033FF" "#000099FF" "#0000FFFF" "#5000FFFF" "#9F0FF0FF" "#EF42BDFF"
 [7] "#FF758AFF" "#FFA857FF" "#FFDB24FF" "#FFFF60FF"
> p <- expand.grid(x=1:30,y=1:30)
> p$z <- p$x + p$y
> coordinates(p) <- c("x", "y")
> gridded(p) <- TRUE
> image(p, col = bpy.colors(100), asp = 1)
> # require(lattice)
> # trellis.par.set("regions", list(col=bpy.colors())) # make this default pallette
> 
> 
> 
> cleanEx()
> nameEx("bubble")
> ### * bubble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bubble
> ### Title: Create a bubble plot of spatial data
> ### Aliases: bubble
> ### Keywords: dplot
> 
> ### ** Examples
> 
> data(meuse)
> coordinates(meuse) <- c("x", "y") # promote to SpatialPointsDataFrame
> bubble(meuse, "cadmium", maxsize = 2.5, main = "cadmium concentrations (ppm)", 
+     key.entries = 2^(-1:4))
> bubble(meuse, "zinc", main = "zinc concentrations (ppm)",
+     key.entries =  100 * 2^(0:4))
> 
> 
> 
> cleanEx()
> nameEx("char2dms")
> ### * char2dms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: char2dms
> ### Title: Convert character vector to DMS-class object
> ### Aliases: char2dms dd2dms coerce,DMS,numeric-method
> ###   coerce,DMS,character-method as.character.DMS
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(state)
> str(state.center$y)
 num [1:50] 32.6 49.2 34.2 34.7 36.5 ...
> stateN <- dd2dms(state.center$y, NS=TRUE)
> str(attributes(stateN))
List of 6
 $ WS   : logi [1:50] FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ deg  : int [1:50] 32 49 34 34 36 38 41 38 27 32 ...
 $ min  : int [1:50] 35 15 13 44 32 40 35 40 52 19 ...
 $ sec  : num [1:50] 24.36 0 9.12 0.96 2.76 ...
 $ NS   : logi TRUE
 $ class: chr "DMS"
  ..- attr(*, "package")= chr "sp"
> ch.stateN <- as.character(stateN)
> str(ch.stateN)
 chr [1:50] "32d35'24.36\"N" "49d15'N" "34d13'9.12\"N" "34d44'0.96\"N" ...
> stateNa <- char2dms(ch.stateN)
> str(attributes(stateNa))
List of 6
 $ WS   : logi [1:50] FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ deg  : int [1:50] 32 49 34 34 36 38 41 38 27 32 ...
 $ min  : int [1:50] 35 15 13 44 32 40 35 40 52 19 ...
 $ sec  : num [1:50] 24.36 0 9.12 0.96 2.76 ...
 $ NS   : logi TRUE
 $ class: chr "DMS"
  ..- attr(*, "package")= chr "sp"
> ch.stateN <- as(stateN, "character")
> str(ch.stateN)
 chr [1:50] "32d35'24.36\"N" "49d15'N" "34d13'9.12\"N" "34d44'0.96\"N" ...
> stateNa <- char2dms(ch.stateN)
> str(attributes(stateNa))
List of 6
 $ WS   : logi [1:50] FALSE FALSE FALSE FALSE FALSE FALSE ...
 $ deg  : int [1:50] 32 49 34 34 36 38 41 38 27 32 ...
 $ min  : int [1:50] 35 15 13 44 32 40 35 40 52 19 ...
 $ sec  : num [1:50] 24.36 0 9.12 0.96 2.76 ...
 $ NS   : logi TRUE
 $ class: chr "DMS"
  ..- attr(*, "package")= chr "sp"
> 
> 
> 
> cleanEx()
> nameEx("coordinates")
> ### * coordinates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coordinates
> ### Title: set spatial coordinates to create a Spatial object, or retrieve
> ###   spatial coordinates from a Spatial object
> ### Aliases: coordinates coordinates<-
> ### Keywords: manip
> 
> ### ** Examples
> 
> # data.frame
> data(meuse.grid)
> coordinates(meuse.grid) <- ~x+y
> gridded(meuse.grid) <- TRUE
> class(meuse.grid)
[1] "SpatialPixelsDataFrame"
attr(,"package")
[1] "sp"
> bbox(meuse.grid)
     min    max
x 178440 181560
y 329600 333760
> 
> data(meuse)
> meuse.xy = meuse[c("x", "y")]
> coordinates(meuse.xy) <- ~x+y
> class(meuse.xy)
[1] "SpatialPoints"
attr(,"package")
[1] "sp"
> 
> 
> 
> 
> cleanEx()
> nameEx("degaxis")
> ### * degaxis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: degAxis
> ### Title: axis with degrees
> ### Aliases: degAxis
> ### Keywords: dplot
> 
> ### ** Examples
> 
> xy = cbind(x = 2 * runif(100) - 1, y = 2 * runif(100) - 1)
> plot(SpatialPoints(xy, proj4string = CRS("+proj=longlat +ellps=WGS84")),xlim=c(-1,1),ylim=c(-1,1))
> degAxis(1)
> degAxis(2, at = c(-1,-0.5,0,0.5,1))
> #
> 
> 
> 
> cleanEx()
> nameEx("dimensions")
> ### * dimensions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimensions-methods
> ### Title: retrieve spatial dimensions from spatial data
> ### Aliases: dimensions,Spatial-method dimensions
> ### Keywords: methods methods
> 
> ### ** Examples
> 
> # just 9 points on a grid:
> x <- c(1,1,1,2,2,2,3,3,3)
> y <- c(1,2,3,1,2,3,1,2,3)
> xy <- cbind(x,y)
> S <- SpatialPoints(xy)
> dimensions(S)
[1] 2
> 
> # data.frame
> data(meuse.grid)
> coordinates(meuse.grid) <- ~x+y
> gridded(meuse.grid) <- TRUE
> dimensions(meuse.grid)
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("elide-methods")
> ### * elide-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: elide-methods
> ### Title: Methods for Function elide in Package 'maptools'
> ### Aliases: elide-methods elide,SpatialPoints-method
> ###   elide,SpatialPointsDataFrame-method elide,SpatialLines-method
> ###   elide,SpatialLinesDataFrame-method elide,SpatialPolygons-method
> ###   elide,SpatialPolygonsDataFrame-method elide
> ### Keywords: methods spatial
> 
> ### ** Examples
> 
> data(meuse)
> coordinates(meuse) <- c("x", "y")
> proj4string(meuse) <- CRS("+init=epsg:28992")
> data(meuse.riv)
> river_polygon <- Polygons(list(Polygon(meuse.riv)), ID="meuse")
> rivers <- SpatialPolygons(list(river_polygon))
> proj4string(rivers) <- CRS("+init=epsg:28992")
> rivers1 <- elide(rivers, reflect=c(TRUE, TRUE), scale=TRUE)
> meuse1 <- elide(meuse, bb=bbox(rivers), reflect=c(TRUE, TRUE), scale=TRUE)
> opar <- par(mfrow=c(1,2))
> plot(rivers, axes=TRUE)
> plot(meuse, add=TRUE)
> plot(rivers1, axes=TRUE)
> plot(meuse1, add=TRUE)
> par(opar)
> meuse1 <- elide(meuse, shift=c(10000, -10000))
> bbox(meuse)
     min    max
x 178605 181390
y 329714 333611
> bbox(meuse1)
     min    max
x 188605 191390
y 319714 323611
> rivers1 <- elide(rivers, shift=c(10000, -10000))
> bbox(rivers)
       min      max
x 178304.0 182331.5
y 325698.5 337684.8
> bbox(rivers1)
       min      max
x 188304.0 192331.5
y 315698.5 327684.8
> meuse1 <- elide(meuse, rotate=-30, center=apply(bbox(meuse), 1, mean))
> bbox(meuse)
     min    max
x 178605 181390
y 329714 333611
> bbox(meuse1)
       min      max
x 179419.8 181278.9
y 329462.8 333890.2
> plot(meuse1, axes=TRUE)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("flip")
> ### * flip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: flip
> ### Title: rearrange data in SpatialPointsDataFrame or SpatialGridDataFrame
> ###   for plotting with spplot (levelplot/xyplot wrapper)
> ### Aliases: flipHorizontal flipVertical
> ### Keywords: dplot
> 
> ### ** Examples
> 
> data(meuse.grid) # data frame
> gridded(meuse.grid) = c("x", "y") # promotes to 
> fullgrid(meuse.grid) = TRUE
> d = meuse.grid["dist"]
> image(d, axes=TRUE)
> image(flipHorizontal(d), axes=TRUE)
> image(flipVertical(d), axes=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("geometry-methods")
> ### * geometry-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geometry-methods
> ### Title: Methods for retrieving the geometry from a composite (geometry +
> ###   attributes) object
> ### Aliases: geometry geometry-methods geometry,Spatial-method
> ###   geometry,SpatialPointsDataFrame-method
> ###   geometry,SpatialMultiPointsDataFrame-method
> ###   geometry,SpatialGridDataFrame-method
> ###   geometry,SpatialPixelsDataFrame-method
> ###   geometry,SpatialLinesDataFrame-method
> ###   geometry,SpatialPolygonsDataFrame-method geometry<-
> ###   geometry<-,data.frame,Spatial-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(meuse)
> m = meuse
> coordinates(m) = meuse[, c("x", "y")]
> pts = geometry(m)
> class(pts)
[1] "SpatialPoints"
attr(,"package")
[1] "sp"
> geometry(meuse) = pts
> class(meuse)
[1] "SpatialPointsDataFrame"
attr(,"package")
[1] "sp"
> identical(m, meuse) # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("gridded-methods")
> ### * gridded-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gridded-methods
> ### Title: specify spatial data as being gridded, or find out whether they
> ###   are
> ### Aliases: gridded-methods gridparameters fullgrid
> ###   fullgrid,Spatial-method gridded gridded,Spatial-method fullgrid<-
> ###   gridded<- fullgrid<-,Spatial,ANY-method
> ###   fullgrid<-,SpatialGrid,logical-method
> ###   fullgrid<-,SpatialGridDataFrame,logical-method
> ###   fullgrid<-,SpatialPixels,logical-method
> ###   fullgrid<-,SpatialPixelsDataFrame,logical-method
> ###   gridded<-,SpatialGrid,logical-method
> ###   gridded<-,SpatialGridDataFrame,logical-method
> ###   gridded<-,SpatialPixels,logical-method
> ###   gridded<-,SpatialPixelsDataFrame,logical-method
> ###   gridded<-,SpatialPoints,list-method
> ###   gridded<-,SpatialPoints,logical-method
> ###   gridded<-,SpatialPointsDataFrame,list-method
> ###   gridded<-,SpatialPointsDataFrame,logical-method
> ###   gridded<-,data.frame,GridTopology-method
> ###   gridded<-,data.frame,character-method
> ###   gridded<-,data.frame,formula-method
> ### Keywords: methods spatial
> 
> ### ** Examples
> 
> # just 9 points on a grid:
> x <- c(1,1,1,2,2,2,3,3,3)
> y <- c(1,2,3,1,2,3,1,2,3)
> xy <- cbind(x,y)
> S <- SpatialPoints(xy)
> class(S)
[1] "SpatialPoints"
attr(,"package")
[1] "sp"
> plot(S)
> gridded(S) <- TRUE
> gridded(S)
[1] TRUE
> class(S)
[1] "SpatialPixels"
attr(,"package")
[1] "sp"
> summary(S)
Object of class SpatialPixels
Coordinates:
  min max
x 0.5 3.5
y 0.5 3.5
Is projected: NA 
proj4string : [NA]
Number of points: 9
Grid attributes:
  cellcentre.offset cellsize cells.dim
x                 1        1         3
y                 1        1         3
> plot(S)
> gridded(S) <- FALSE
> gridded(S)
[1] FALSE
> class(S)
[1] "SpatialPoints"
attr(,"package")
[1] "sp"
> 
> # data.frame
> data(meuse.grid)
> coordinates(meuse.grid) <- ~x+y
> gridded(meuse.grid) <- TRUE
> plot(meuse.grid) # not much good
> summary(meuse.grid)
Object of class SpatialPixelsDataFrame
Coordinates:
     min    max
x 178440 181560
y 329600 333760
Is projected: NA 
proj4string : [NA]
Number of points: 3103
Grid attributes:
  cellcentre.offset cellsize cells.dim
x            178460       40        78
y            329620       40       104
Data attributes:
     part.a           part.b            dist        soil     ffreq   
 Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   1:1665   1: 779  
 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.1193   2:1084   2:1335  
 Median :0.0000   Median :1.0000   Median :0.2715   3: 354   3: 989  
 Mean   :0.3986   Mean   :0.6014   Mean   :0.2971                    
 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:0.4402                    
 Max.   :1.0000   Max.   :1.0000   Max.   :0.9926                    
> 
> 
> 
> 
> cleanEx()
> nameEx("gridlines")
> ### * gridlines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gridlines
> ### Title: Create N-S and E-W grid lines over a geographic region
> ### Aliases: gridlines gridat text text.SpatialPointsDataFrame labels
> ###   labels.SpatialLines
> ### Keywords: spatial
> 
> ### ** Examples
> 
> 
> run <- FALSE
> if (requireNamespace("sf", quietly=TRUE)) run <- TRUE
> 
> data(meuse)
> coordinates(meuse) = ~x+y
> plot(meuse)
> plot(gridlines(meuse), add = TRUE)
> text(labels(gridlines(meuse)))
> title("default gridlines within Meuse bounding box")
> 
> if (run) {
+ proj4string(meuse) <- CRS("+init=epsg:28992")
+ crs.longlat <- CRS("+init=epsg:4326")
+ meuse_ll <- spTransform(meuse, crs.longlat)
+ grd <- gridlines(meuse_ll)
+ grd_x <- spTransform(grd, CRS("+init=epsg:28992"))
+ 
+ # labels South and West:
+ plot(meuse)
+ plot(grd_x, add=TRUE, lty=2)
+ grdat_ll <- gridat(meuse_ll)
+ grdat_x <- spTransform(grdat_ll, CRS("+init=epsg:28992"))
+ text(grdat_x)
+ }
> if (run) {
+ # labels North and East:
+ plot(meuse)
+ plot(grd_x, add=TRUE, lty=2)
+ grdat_ll <- gridat(meuse_ll, side="EN")
+ grdat_x <- spTransform(grdat_ll, CRS("+init=epsg:28992"))
+ text(grdat_x)
+ }
> if (run) {
+ # now using labels:
+ plot(meuse)
+ plot(grd_x, add=TRUE, lty=2)
+ text(labels(grd_x, crs.longlat))
+ }
> if (run) {
+ # demonstrate axis labels with angle, both sides:
+ sp = SpatialPoints(rbind(c(-101,9), c(-101,55), c(-19,9), c(-19,55)), crs.longlat)
+ laea = CRS("+proj=laea +lat_0=30 +lon_0=-40")
+ sp.l = spTransform(sp, laea)
+ plot(sp.l, expandBB = c(0, 0.05, 0, .05))
+ gl = spTransform(gridlines(sp), laea)
+ plot(gl, add = TRUE)
+ text(labels(gl, crs.longlat))
+ text(labels(gl, crs.longlat, side = 3:4), col = 'red')
+ title("curved text label demo")
+ }
> if (run) {
+ # polar:
+ pts=SpatialPoints(rbind(c(-180,-70),c(0,-70),c(180,-89),c(180,-70)), crs.longlat)
+ polar = CRS("+init=epsg:3031")
+ gl = spTransform(gridlines(pts, easts = seq(-180,180,20), ndiscr = 100), polar)
+ plot(spTransform(pts, polar), expandBB = c(.05,0,.05,0))
+ lines(gl)
+ l = labels(gl, crs.longlat, side = 3)
+ l$pos = NULL # pos is too simple, use adj:
+ text(l, adj = c(0.5, -0.5)) 
+ l = labels(gl, crs.longlat, side = 4)
+ l$srt = 0 # otherwise they end up upside-down
+ text(l)
+ title("grid line labels on polar projection, epsg 3031")
+ }
> ## Not run: 
> ##D if (require(maps)) demo(polar) # adds the map of the antarctic
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("image")
> ### * image
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: image.SpatialGridDataFrame
> ### Title: Image or contour method for gridded spatial data; convert to and
> ###   from image data structure
> ### Aliases: image.SpatialGridDataFrame image.SpatialPixelsDataFrame
> ###   image.SpatialPixels contour.SpatialGridDataFrame
> ###   contour.SpatialPixelsDataFrame as.image.SpatialGridDataFrame
> ###   image2Grid imageScale
> ### Keywords: spatial
> 
> ### ** Examples
> 
> data(meuse.grid)
> coordinates(meuse.grid) = c("x", "y") # promote to SpatialPointsDataFrame
> gridded(meuse.grid) = TRUE            # promote to SpatialGridDataFrame
> data(meuse)
> coordinates(meuse) = c("x", "y")
> image(meuse.grid["dist"], main = "Distance to river Meuse")
> points(coordinates(meuse), pch = "+")
> image(meuse.grid["dist"], main = "Distance to river Meuse",
+  useRasterImage=TRUE)
> points(coordinates(meuse), pch = "+")
> 
> # color scale:
> layout(cbind(1,2), c(4,1),1)
> image(meuse.grid["dist"])
> imageScale(meuse.grid$dist, axis.pos=4, add.axis=FALSE)
> axis(4,at=c(0,.2,.4,.8), las=2)
> 
> data(Rlogo)
> d = dim(Rlogo)
> cellsize = abs(c(gt[2],gt[6]))
> cells.dim = c(d[1], d[2]) # c(d[2],d[1])
> cellcentre.offset = c(x = gt[1] + 0.5 * cellsize[1], y = gt[4] - (d[2] - 0.5) * abs(cellsize[2]))
> grid = GridTopology(cellcentre.offset, cellsize, cells.dim)
> df = as.vector(Rlogo[,,1])
> for (band in 2:d[3]) df = cbind(df, as.vector(Rlogo[,,band]))
> df = as.data.frame(df)
> names(df) = paste("band", 1:d[3], sep="")
> Rlogo <- SpatialGridDataFrame(grid = grid, data = df)
> summary(Rlogo)
Object of class SpatialGridDataFrame
Coordinates:
  min max
x   0 101
y -77   0
Is projected: NA 
proj4string : [NA]
Grid attributes:
  cellcentre.offset cellsize cells.dim
x               0.5        1       101
y             -76.5        1        77
Data attributes:
     band1           band2           band3      
 Min.   :  0.0   Min.   :  0.0   Min.   :  0.0  
 1st Qu.:131.0   1st Qu.:138.0   1st Qu.:151.0  
 Median :196.0   Median :199.0   Median :215.0  
 Mean   :182.3   Mean   :185.4   Mean   :192.8  
 3rd Qu.:254.0   3rd Qu.:255.0   3rd Qu.:254.0  
 Max.   :255.0   Max.   :255.0   Max.   :255.0  
> image(Rlogo, red="band1", green="band2", blue="band3")
> image(Rlogo, red="band1", green="band2", blue="band3",
+  useRasterImage=FALSE)
> is.na(Rlogo$band1) <- Rlogo$band1 == 255
> is.na(Rlogo$band2) <- Rlogo$band2 == 255
> is.na(Rlogo$band3) <- Rlogo$band3 == 255
> Rlogo$i7 <- 7
> image(Rlogo, "i7")
> image(Rlogo, red="band1", green="band2", blue="band3", add=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("is.projected")
> ### * is.projected
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.projected
> ### Title: Sets or retrieves projection attributes on classes extending
> ###   SpatialData
> ### Aliases: is.projected proj4string proj4string<-
> ###   is.projected,Spatial-method proj4string,Spatial-method wkt
> ###   wkt,Spatial-method proj4string<-,Spatial,CRS-method
> ###   proj4string<-,Spatial,character-method get_ll_warn get_ll_TOL
> ###   set_ll_warn set_ll_TOL get_ReplCRS_warn set_ReplCRS_warn
> ### Keywords: spatial
> 
> ### ** Examples
> 
> o <- new("Spatial")
> proj4string(o) <- CRS("+init=epsg:27700")
> if (!is.null(comment(slot(o, "proj4string")))) {
+   cat(strsplit(wkt(o), "\n")[[1]], sep="\n")
+   cat(strsplit(wkt(slot(o, "proj4string")), "\n")[[1]], sep="\n")
+ }
> is.projected(CRS("+proj=longlat"))
[1] FALSE
> is.projected(CRS("+proj=geocent"))
[1] TRUE
> is.projected(CRS("+proj=geocent +units=km"))
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("loadmeuse")
> ### * loadmeuse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadMeuse
> ### Title: deprecated function to load the Meuse data set
> ### Aliases: loadMeuse
> ### Keywords: dplot
> 
> ### ** Examples
> 
> demo(meuse)


	demo(meuse)
	---- ~~~~~

> require(sp)

> crs = CRS("EPSG:28992")

> data("meuse")

> coordinates(meuse) <- ~x+y

> proj4string(meuse) <- crs

> data("meuse.grid")

> coordinates(meuse.grid) <- ~x+y

> gridded(meuse.grid) <- TRUE

> proj4string(meuse.grid) <- crs

> data("meuse.riv")

> meuse.riv <- SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)),"meuse.riv")))

> proj4string(meuse.riv) <- crs

> data("meuse.area")

> meuse.area = SpatialPolygons(list(Polygons(list(Polygon(meuse.area)), "area")))

> proj4string(meuse.area) <- crs
> 
> 
> 
> cleanEx()
> nameEx("meuse")
> ### * meuse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meuse
> ### Title: Meuse river data set
> ### Aliases: meuse
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(meuse)
> summary(meuse)
       x                y             cadmium           copper      
 Min.   :178605   Min.   :329714   Min.   : 0.200   Min.   : 14.00  
 1st Qu.:179371   1st Qu.:330762   1st Qu.: 0.800   1st Qu.: 23.00  
 Median :179991   Median :331633   Median : 2.100   Median : 31.00  
 Mean   :180005   Mean   :331635   Mean   : 3.246   Mean   : 40.32  
 3rd Qu.:180630   3rd Qu.:332463   3rd Qu.: 3.850   3rd Qu.: 49.50  
 Max.   :181390   Max.   :333611   Max.   :18.100   Max.   :128.00  
                                                                    
      lead            zinc             elev             dist        
 Min.   : 37.0   Min.   : 113.0   Min.   : 5.180   Min.   :0.00000  
 1st Qu.: 72.5   1st Qu.: 198.0   1st Qu.: 7.546   1st Qu.:0.07569  
 Median :123.0   Median : 326.0   Median : 8.180   Median :0.21184  
 Mean   :153.4   Mean   : 469.7   Mean   : 8.165   Mean   :0.24002  
 3rd Qu.:207.0   3rd Qu.: 674.5   3rd Qu.: 8.955   3rd Qu.:0.36407  
 Max.   :654.0   Max.   :1839.0   Max.   :10.520   Max.   :0.88039  
                                                                    
       om         ffreq  soil   lime       landuse       dist.m      
 Min.   : 1.000   1:84   1:97   0:111   W      :50   Min.   :  10.0  
 1st Qu.: 5.300   2:48   2:46   1: 44   Ah     :39   1st Qu.:  80.0  
 Median : 6.900   3:23   3:12           Am     :22   Median : 270.0  
 Mean   : 7.478                         Fw     :10   Mean   : 290.3  
 3rd Qu.: 9.000                         Ab     : 8   3rd Qu.: 450.0  
 Max.   :17.000                         (Other):25   Max.   :1000.0  
 NA's   :2                              NA's   : 1                   
> coordinates(meuse) <- ~x+y
> proj4string(meuse) <- CRS("+init=epsg:28992")
> 
> 
> 
> cleanEx()
> nameEx("meuse.grid")
> ### * meuse.grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meuse.grid
> ### Title: Prediction Grid for Meuse Data Set
> ### Aliases: meuse.grid
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(meuse.grid)
> coordinates(meuse.grid) = ~x+y
> proj4string(meuse.grid) <- CRS("+init=epsg:28992")
> gridded(meuse.grid) = TRUE
> spplot(meuse.grid)
> 
> 
> 
> cleanEx()
> nameEx("meuse.grid_ll")
> ### * meuse.grid_ll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meuse.grid_ll
> ### Title: Prediction Grid for Meuse Data Set, geographical coordinates
> ### Aliases: meuse.grid_ll
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(meuse.grid_ll)
> 
> 
> 
> cleanEx()
> nameEx("meuse.riv")
> ### * meuse.riv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meuse.riv
> ### Title: River Meuse outline
> ### Aliases: meuse.riv meuse.area
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(meuse.riv)
> plot(meuse.riv, type = "l", asp = 1)
> data(meuse.grid)
> coordinates(meuse.grid) = c("x", "y")
> gridded(meuse.grid) = TRUE
> image(meuse.grid, "dist", add = TRUE)
> data(meuse)
> coordinates(meuse) = c("x", "y")
> meuse.sr = SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)),"meuse.riv")))
> spplot(meuse.grid, col.regions=bpy.colors(), main = "meuse.grid",
+   sp.layout=list(
+ 	list("sp.polygons", meuse.sr),
+ 	list("sp.points", meuse, pch="+", col="black")
+   )
+ )
> spplot(meuse, "zinc", col.regions=bpy.colors(),  main = "zinc, ppm",
+   cuts = c(100,200,400,700,1200,2000), key.space = "right",
+   sp.layout= list("sp.polygons", meuse.sr, fill = "lightblue")
+ )
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("point.in.polygon")
> ### * point.in.polygon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: point.in.polygon
> ### Title: do point(s) fall in a given polygon?
> ### Aliases: point.in.polygon
> ### Keywords: manip
> 
> ### ** Examples
> 
> # open polygon:
> point.in.polygon(1:10,1:10,c(3,5,5,3),c(3,3,5,5))
 [1] 0 0 3 1 3 0 0 0 0 0
> # closed polygon:
> point.in.polygon(1:10,rep(4,10),c(3,5,5,3,3),c(3,3,5,5,3))
 [1] 0 0 2 1 2 0 0 0 0 0
> 
> 
> 
> cleanEx()
> nameEx("polygons")
> ### * polygons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polygons
> ### Title: sets spatial coordinates to create spatial data, or retrieves
> ###   spatial coordinates
> ### Aliases: polygons<- polygons
> ### Keywords: manip
> 
> ### ** Examples
> 
> grd <- GridTopology(c(1,1), c(1,1), c(10,10))
> polys <- as.SpatialPolygons.GridTopology(grd)
> centroids <- coordinates(polys)
> x <- centroids[,1]
> y <- centroids[,2]
> z <- 1.4 + 0.1*x + 0.2*y + 0.002*x*x
> df <- data.frame(x=x, y=y, z=z, row.names=row.names(polys))
> polygons(df) <- polys
> class(df)
[1] "SpatialPolygonsDataFrame"
attr(,"package")
[1] "sp"
> summary(df)
Object of class SpatialPolygonsDataFrame
Coordinates:
  min  max
x 0.5 10.5
y 0.5 10.5
Is projected: NA 
proj4string : [NA]
Data attributes:
       x              y              z        
 Min.   : 1.0   Min.   : 1.0   Min.   :1.702  
 1st Qu.: 3.0   1st Qu.: 3.0   1st Qu.:2.626  
 Median : 5.5   Median : 5.5   Median :3.123  
 Mean   : 5.5   Mean   : 5.5   Mean   :3.127  
 3rd Qu.: 8.0   3rd Qu.: 8.0   3rd Qu.:3.614  
 Max.   :10.0   Max.   :10.0   Max.   :4.600  
> 
> 
> 
> cleanEx()
> nameEx("recenter-methods")
> ### * recenter-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: recenter-methods
> ### Title: Methods for Function recenter in Package 'sp'
> ### Aliases: recenter-methods recenter recenter,SpatialPolygons-method
> ###   recenter,Polygons-method recenter,Polygon-method
> ###   recenter,SpatialLines-method recenter,Lines-method
> ###   recenter,Line-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> crds <- matrix(c(179, -179, -179, 179, 50, 50, 52, 52), ncol=2)
> SL <- SpatialLines(list(Lines(list(Line(crds)), "1")),
+  CRS("+proj=longlat +ellps=WGS84"))
> bbox(SL)
   min max
x -179 179
y   50  52
> SLr <- recenter(SL)
> bbox(SLr)
  min max
x 179 181
y  50  52
> rcrds <- rbind(crds, crds[1,])
> SpP <- SpatialPolygons(list(Polygons(list(Polygon(rcrds)), ID="r1")),
+  proj4string=CRS("+proj=longlat +ellps=WGS84"))
> bbox(SpP)
   min max
x -179 179
y   50  52
> SpPr <- recenter(SpP)
> bbox(SpPr)
  min max
x 179 181
y  50  52
> opar <- par(mfrow=c(1,2))
> plot(SpP)
> plot(SpPr)
> par(opar)
> crds <- matrix(c(-1, 1, 1, -1, 50, 50, 52, 52), ncol=2)
> SL <- SpatialLines(list(Lines(list(Line(crds)), "1")),
+  CRS("+proj=longlat +ellps=WGS84"))
> bbox(SL)
  min max
x  -1   1
y  50  52
> SLr <- recenter(SL)
> bbox(SLr)
  min max
x   1 359
y  50  52
> rcrds <- rbind(crds, crds[1,])
> SpP <- SpatialPolygons(list(Polygons(list(Polygon(rcrds)), ID="r1")),
+  proj4string=CRS("+proj=longlat +ellps=WGS84"))
> bbox(SpP)
  min max
x  -1   1
y  50  52
> SpPr <- recenter(SpP)
> bbox(SpPr)
  min max
x   1 359
y  50  52
> opar <- par(mfrow=c(1,2))
> plot(SpP)
> plot(SpPr)
> par(opar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("select.spatial")
> ### * select.spatial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select.spatial
> ### Title: select points spatially
> ### Aliases: select.spatial
> ### Keywords: models
> 
> ### ** Examples
> 
> data(meuse)
> ## the following command requires user interaction: left mouse
> ## selects points, right mouse ends digitizing
> data(meuse)
> coordinates(meuse) = c("x", "y")
> # select.spatial(meuse)
> 
> 
> 
> cleanEx()
> nameEx("sp2Mondrian")
> ### * sp2Mondrian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sp2Mondrian
> ### Title: write map data for Mondrian
> ### Aliases: sp2Mondrian
> ### Keywords: spatial
> 
> ### ** Examples
> 
> if (require("sf", quietly=TRUE)) {
+ td <- tempdir()
+ xx <- as(sf::st_read(system.file("shape/nc.shp", package="sf")[1], quiet=TRUE), "Spatial")
+ sp2Mondrian(xx, file=file.path(td, "sids1.txt"))
+ }
> 
> 
> 
> cleanEx()
> nameEx("spChFIDs-methods")
> ### * spChFIDs-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spChFIDs-methods
> ### Title: change feature IDs in spatial objects
> ### Aliases: spChFIDs-methods spChFIDs<- spChFIDs<-,Spatial-method
> ###   spChFIDs,SpatialLines,character-method
> ###   spChFIDs,SpatialLinesDataFrame,character-method
> ###   spChFIDs,SpatialPolygons,character-method
> ###   spChFIDs,SpatialPolygonsDataFrame,character-method spChFIDs
> ### Keywords: methods spatial
> 
> ### ** Examples
> 
> ## Not run: 
> ##D if(require(sf)) {
> ##D xx <- as(st_read(system.file("shape/nc.shp", package="sf")[1]), "Spatial")
> ##D row.names(xx) <- as.character(xx$"FIPSNO")
> ##D row.names(as(xx, "data.frame"))
> ##D xx1 <- spChFIDs(xx, as.character(xx$CNTY_ID))
> ##D row.names(as(xx1, "data.frame"))
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("spDistsN1")
> ### * spDistsN1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spDistsN1
> ### Title: Euclidean or Great Circle distance between points
> ### Aliases: spDistsN1 spDists
> ### Keywords: spatial
> 
> ### ** Examples
> 
> ll <- matrix(c(5, 6, 60, 60), ncol=2)
> km <- spDistsN1(ll, ll[1,], longlat=TRUE)
> zapsmall(km)
[1]  0.00000 55.79918
> utm32 <- matrix(c(276.9799, 332.7052, 6658.1572, 6655.2055), ncol=2)
> spDistsN1(utm32, utm32[1,])
[1]  0.00000 55.80342
> dg <- spDistsN1(ll, ll[1,])
> dg
[1] 0 1
> dg[2]/km[2]
[1] 0.01792141
> data(meuse)
> coordinates(meuse) <- c("x", "y")
> res <- spDistsN1(meuse, meuse[1,])
> summary(res)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0    1210    2279    2282    3403    4425 
> 
> p1 = SpatialPoints(cbind(1:3, 1:3))
> spDists(p1)
         [,1]     [,2]     [,3]
[1,] 0.000000 1.414214 2.828427
[2,] 1.414214 0.000000 1.414214
[3,] 2.828427 1.414214 0.000000
> spDists(p1, p1)
         [,1]     [,2]     [,3]
[1,] 0.000000 1.414214 2.828427
[2,] 1.414214 0.000000 1.414214
[3,] 2.828427 1.414214 0.000000
> spDists(p1, p1, diagonal = TRUE)
[1] 0 0 0
> try(spDists(p1, p1, segments = TRUE))
Error in spDists(p1, p1, segments = TRUE) : missing(y) is not TRUE
> spDists(p1, segments = TRUE)
[1] 1.414214 1.414214
> p2 = SpatialPoints(cbind(5:2, 2:5))
> spDists(p1, p2)
         [,1]     [,2]     [,3]     [,4]
[1,] 4.123106 3.605551 3.605551 4.123106
[2,] 3.000000 2.236068 2.236068 3.000000
[3,] 2.236068 1.000000 1.000000 2.236068
> try(spDists(p1, p2, diagonal = TRUE)) # fails
Error in spDists(p1, p2, diagonal = TRUE) : 
  nrow(x) == nrow(y) is not TRUE
> try(spDists(p1, p2, segments = TRUE)) # fails
Error in spDists(p1, p2, segments = TRUE) : missing(y) is not TRUE
> 
> # longlat points:
> proj4string(p1) = "+proj=longlat +ellps=WGS84"
> proj4string(p2) = "+proj=longlat +ellps=WGS84"
> is.projected(p1)
[1] FALSE
> is.projected(p2)
[1] FALSE
> spDists(p1)
         [,1]     [,2]     [,3]
[1,]   0.0000 156.8744 313.7019
[2,] 156.8744   0.0000 156.8276
[3,] 313.7019 156.8276   0.0000
> spDists(p1, p1)
         [,1]     [,2]     [,3]
[1,]   0.0000 156.8744 313.7019
[2,] 156.8744   0.0000 156.8276
[3,] 313.7019 156.8276   0.0000
> spDists(p1, p1, diagonal = TRUE)
[1] 0 0 0
> spDists(p1, p2)
         [,1]     [,2]     [,3]     [,4]
[1,] 458.6486 400.3590 399.3794 456.0565
[2,] 333.7564 248.3940 247.5177 331.7324
[3,] 248.3940 111.1679 110.5772 247.4690
> try(spDists(p1, p2, diagonal = TRUE)) # fails
Error in spDists(p1, p2, diagonal = TRUE) : 
  nrow(x) == nrow(y) is not TRUE
> spDists(p1, p2[1:length(p1),], diagonal = TRUE)
[1] 458.6486 248.3940 110.5772
> spDists(p1, segments = TRUE)
[1] 156.8744 156.8276
> spDists(p1[0],p2[0],diagonal=TRUE)
numeric(0)
> spDists(p1[0])
<0 x 0 matrix>
> 
> p1 = SpatialPoints(cbind(1:3, 1:3, 1:3))
> spDists(p1)
         1        2        3
1 0.000000 1.732051 3.464102
2 1.732051 0.000000 1.732051
3 3.464102 1.732051 0.000000
> spDists(p1, p1)
         [,1]     [,2]     [,3]
[1,] 0.000000 1.732051 3.464102
[2,] 1.732051 0.000000 1.732051
[3,] 3.464102 1.732051 0.000000
> try(spDists(p1, p1, diagonal = TRUE))
Error in spDists(p1, p1, diagonal = TRUE) : ncol(x) == 2 is not TRUE
> try(spDists(p1, p1, segments = TRUE))
Error in spDists(p1, p1, segments = TRUE) : missing(y) is not TRUE
> try(spDists(p1, segments = TRUE))
Error in spDists(p1, segments = TRUE) : ncol(x) == 2 is not TRUE
> p2 = SpatialPoints(cbind(5:2, 2:5, 3:6))
> spDists(p1, p2)
         [,1]     [,2]     [,3]     [,4]
[1,] 4.582576 4.690416 5.385165 6.480741
[2,] 3.162278 3.000000 3.741657 5.000000
[3,] 2.236068 1.414214 2.236068 3.741657
> try(spDists(p1, p2, diagonal = TRUE)) # fails
Error in spDists(p1, p2, diagonal = TRUE) : ncol(x) == 2 is not TRUE
> try(spDists(p1, p2, segments = TRUE)) # fails
Error in spDists(p1, p2, segments = TRUE) : missing(y) is not TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("spplot")
> ### * spplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spplot
> ### Title: Plot methods for spatial data with attributes
> ### Aliases: spplot spplot.grid spplot.locator spplot.polygons
> ###   spplot.points layout.north.arrow layout.scale.bar mapLegendGrob
> ###   sp.theme spplot-methods spplot,SpatialPixelsDataFrame-method
> ###   spplot,SpatialGridDataFrame-method
> ###   spplot,SpatialPolygonsDataFrame-method
> ###   spplot,SpatialLinesDataFrame-method
> ###   spplot,SpatialPointsDataFrame-method
> ###   spplot,SpatialMultiPointsDataFrame-method sppanel sppanel,Line-method
> ###   sppanel,Lines-method sppanel,NULL-method sppanel,SpatialGrid-method
> ###   sppanel,SpatialLines-method sppanel,SpatialPixels-method
> ###   sppanel,SpatialPoints-method sppanel,SpatialPolygons-method
> ###   sppanel,character-method sppanel,list-method panel.RgoogleMaps
> ###   panel.ggmap sppanel-methods set_col_regions get_col_regions
> ### Keywords: dplot
> 
> ### ** Examples
> 
> library(lattice)
> trellis.par.set(sp.theme()) # sets bpy.colors() ramp
> demo(meuse, ask = FALSE, echo = FALSE)
> l2 = list("SpatialPolygonsRescale", layout.north.arrow(), offset = c(181300,329800), 
+ 	scale = 400)
> l3 = list("SpatialPolygonsRescale", layout.scale.bar(), offset = c(180500,329800), 
+ 	scale = 500, fill=c("transparent","black"))
> l4 = list("sp.text", c(180500,329900), "0")
> l5 = list("sp.text", c(181000,329900), "500 m")
> 
> spplot(meuse, c("ffreq"), sp.layout=list(l2,l3,l4,l5), col.regions= "black", 
+ 	pch=c(1,2,3), key.space=list(x=0.1,y=.95,corner=c(0,1)))
> spplot(meuse, c("zinc", "lead"), sp.layout=list(l2,l3,l4,l5, which = 2),
+ 	key.space=list(x=0.1,y=.95,corner=c(0,1)))
> # plotting factors:
> meuse$f = factor(sample(letters[6:10], 155, replace=TRUE),levels=letters[1:10])
> meuse$g = factor(sample(letters[1:5], 155, replace=TRUE),levels=letters[1:10])
> spplot(meuse, c("f","g"), col.regions=bpy.colors(10))
> 
> if (require(RColorBrewer)) {
+ 	spplot(meuse, c("ffreq"), sp.layout=list(l2,l3,l4,l5),
+ 		col.regions=brewer.pal(3, "Set1"))
+ }
Loading required package: RColorBrewer
> 
> meuse.grid$g = factor(sample(letters[1:5], 3103, replace=TRUE),
+ 	levels=letters[1:10])
> meuse.grid$f = factor(sample(letters[6:10], 3103, replace=TRUE),
+ 	levels=letters[1:10])
> spplot(meuse.grid, c("f","g"), col.regions=bpy.colors(10))
> 
> # example modifying colorkey for points:
> spplot(meuse["dist"], colorkey = list(
+ 	right = list( # see ?levelplot in package trellis, argument colorkey:
+ 		fun = draw.colorkey, 
+ 		args = list(
+ 			key = list(
+ 				at = seq(0, 1, .1), # colour breaks
+ 				col = bpy.colors(11), # colours
+ 				labels = list(
+ 					at = c(0, .2, .4, .6, .8, 1), 
+ 					labels = c("0x", "20x", "40x", "60x", "80x", "100x")
+ 				)
+ 			)
+ 		)
+ 	)
+ ))
> l6 = list(meuse.grid["dist"], col = grey(seq(.5,.9,length.out=10)))
> spplot(meuse, c("zinc", "lead"), sp.layout = l6)
> spplot(meuse, c("zinc", "lead"), 
+ 	sp.layout = list(meuse.grid, meuse.riv, col = 'grey'))
> 
> #  Custom legend placement, taken from 
> # http://stackoverflow.com/questions/29344692/custom-placement-of-spplot-legend-in-the-map
> s <- spplot(meuse.grid[,'dist'], colorkey = list(space = "left", height = 0.4))
> 
> args <- s$legend$left$args$key
> 
> ## Prepare list of arguments needed by `legend=` argument (as described in ?xyplot)
> library(lattice) # draw.colorkey
> legendArgs <- list(fun = draw.colorkey,
+                    args = list(key = args),
+                    corner = c(0.05,.75))
> 
> ## Call spplot() again, this time passing in to legend the arguments
> ## needed to print a color key
> spplot(meuse.grid[,'dist'], colorkey = FALSE,
+        legend = list(inside = legendArgs))
> 
> 
> 
> cleanEx()

detaching ‘package:RColorBrewer’, ‘package:lattice’

> nameEx("spsample")
> ### * spsample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spsample
> ### Title: sample point locations in (or on) a spatial object
> ### Aliases: spsample-methods spsample,Spatial-method spsample,Line-method
> ###   spsample,Lines-method spsample,SpatialLines-method
> ###   spsample,Polygon-method spsample,Polygons-method
> ###   spsample,SpatialGrid-method spsample,SpatialPixels-method
> ###   spsample,SpatialPolygons-method spsample makegrid
> ### Keywords: manip methods
> 
> ### ** Examples
> 
> 
> data(meuse.riv)
> meuse.sr = SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)), "x")))
> 
> plot(meuse.sr)
> points(spsample(meuse.sr, n = 1000, "regular"), pch = 3)
> 
> plot(meuse.sr)
> points(spsample(meuse.sr, n = 1000, "random"), pch = 3)
> 
> plot(meuse.sr)
> points(spsample(meuse.sr, n = 1000, "stratified"), pch = 3)
> 
> plot(meuse.sr)
> points(spsample(meuse.sr, n = 1000, "nonaligned"), pch = 3)
> 
> plot(meuse.sr)
> points(spsample(meuse.sr@polygons[[1]], n = 100, "stratified"), pch = 3, cex=.5)
> 
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> image(meuse.grid)
> points(spsample(meuse.grid,n=1000,type="random"), pch=3, cex=.5)
> image(meuse.grid)
> points(spsample(meuse.grid,n=1000,type="stratified"), pch=3, cex=.5)
> image(meuse.grid)
> points(spsample(meuse.grid,n=1000,type="regular"), pch=3, cex=.5)
> image(meuse.grid)
> points(spsample(meuse.grid,n=1000,type="nonaligned"), pch=3, cex=.5)
> 
> fullgrid(meuse.grid) = TRUE
> image(meuse.grid)
> points(spsample(meuse.grid,n=1000,type="stratified"), pch=3,cex=.5)
> 
> 
> 
> 
> cleanEx()
> nameEx("stack")
> ### * stack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stack
> ### Title: rearrange data in SpatialPointsDataFrame or SpatialGridDataFrame
> ###   for plotting with spplot (levelplot/xyplot wrapper)
> ### Aliases: spmap.to.lev stack.SpatialPointsDataFrame
> ###   stack.SpatialGridDataFrame
> ### Keywords: dplot
> 
> ### ** Examples
> 
> library(lattice)
> data(meuse.grid) # data frame
> coordinates(meuse.grid) = c("x", "y") # promotes to SpatialPointsDataFrame
> meuse.grid[["idist"]] = 1 - meuse.grid[["dist"]] # add variable
> # the following is made much easier by spplot:
> levelplot(z~x+y|name, spmap.to.lev(meuse.grid, z=c("dist","idist"), names.attr =
+ 	c("distance", "inverse of distance")), aspect = "iso")
> levelplot(values~x+y|ind, as.data.frame(stack(meuse.grid)),aspect = "iso")
> gridded(meuse.grid) = TRUE
> levelplot(z~x+y|name, spmap.to.lev(meuse.grid, z=c("dist","idist"), names.attr =
+ 	c("distance", "inverse of distance")), aspect = "iso")
> levelplot(values~x+y|ind, as.data.frame(stack(meuse.grid)), asp = "iso")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("surfaceArea")
> ### * surfaceArea
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: surfaceArea
> ### Title: Compute surface area of a digital elevation model.
> ### Aliases: surfaceArea surfaceArea.matrix
> ###   surfaceArea,SpatialPixelsDataFrame-method
> ###   surfaceArea,SpatialGridDataFrame-method surfaceArea,matrix-method
> ### Keywords: spatial
> 
> ### ** Examples
> 
> surfaceArea(volcano)
[1] 16187.34
> image(surfaceArea(volcano,byCell=TRUE))
> 
> data(meuse.grid)
> gridded(meuse.grid) = ~x+y
> image(surfaceArea(meuse.grid["dist"], byCell=TRUE))
> surfaceArea(meuse.grid["dist"])
[1] 4964802
> 
> 
> 
> cleanEx()
> nameEx("zerodist")
> ### * zerodist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zerodist
> ### Title: find point pairs with equal spatial coordinates
> ### Aliases: zerodist zerodist2 remove.duplicates
> ### Keywords: dplot
> 
> ### ** Examples
> 
> data(meuse)
> summary(meuse)
       x                y             cadmium           copper      
 Min.   :178605   Min.   :329714   Min.   : 0.200   Min.   : 14.00  
 1st Qu.:179371   1st Qu.:330762   1st Qu.: 0.800   1st Qu.: 23.00  
 Median :179991   Median :331633   Median : 2.100   Median : 31.00  
 Mean   :180005   Mean   :331635   Mean   : 3.246   Mean   : 40.32  
 3rd Qu.:180630   3rd Qu.:332463   3rd Qu.: 3.850   3rd Qu.: 49.50  
 Max.   :181390   Max.   :333611   Max.   :18.100   Max.   :128.00  
                                                                    
      lead            zinc             elev             dist        
 Min.   : 37.0   Min.   : 113.0   Min.   : 5.180   Min.   :0.00000  
 1st Qu.: 72.5   1st Qu.: 198.0   1st Qu.: 7.546   1st Qu.:0.07569  
 Median :123.0   Median : 326.0   Median : 8.180   Median :0.21184  
 Mean   :153.4   Mean   : 469.7   Mean   : 8.165   Mean   :0.24002  
 3rd Qu.:207.0   3rd Qu.: 674.5   3rd Qu.: 8.955   3rd Qu.:0.36407  
 Max.   :654.0   Max.   :1839.0   Max.   :10.520   Max.   :0.88039  
                                                                    
       om         ffreq  soil   lime       landuse       dist.m      
 Min.   : 1.000   1:84   1:97   0:111   W      :50   Min.   :  10.0  
 1st Qu.: 5.300   2:48   2:46   1: 44   Ah     :39   1st Qu.:  80.0  
 Median : 6.900   3:23   3:12           Am     :22   Median : 270.0  
 Mean   : 7.478                         Fw     :10   Mean   : 290.3  
 3rd Qu.: 9.000                         Ab     : 8   3rd Qu.: 450.0  
 Max.   :17.000                         (Other):25   Max.   :1000.0  
 NA's   :2                              NA's   : 1                   
> # pick 10 rows
> n <- 10
> ran10 <- sample(nrow(meuse), size = n, replace = TRUE)
> meusedup <- rbind(meuse, meuse[ran10, ])
> coordinates(meusedup) <- c("x", "y")
> zd <- zerodist(meusedup)
> sum(abs(zd[1:n,1] - sort(ran10))) # 0!
[1] 472
> # remove the duplicate rows:
> meusedup2 <- meusedup[-zd[,2], ]
> summary(meusedup2)
Object of class SpatialPointsDataFrame
Coordinates:
     min    max
x 178605 181390
y 329714 333611
Is projected: NA 
proj4string : [NA]
Number of points: 155
Data attributes:
    cadmium           copper            lead            zinc       
 Min.   : 0.200   Min.   : 14.00   Min.   : 37.0   Min.   : 113.0  
 1st Qu.: 0.800   1st Qu.: 23.00   1st Qu.: 72.5   1st Qu.: 198.0  
 Median : 2.100   Median : 31.00   Median :123.0   Median : 326.0  
 Mean   : 3.246   Mean   : 40.32   Mean   :153.4   Mean   : 469.7  
 3rd Qu.: 3.850   3rd Qu.: 49.50   3rd Qu.:207.0   3rd Qu.: 674.5  
 Max.   :18.100   Max.   :128.00   Max.   :654.0   Max.   :1839.0  
                                                                   
      elev             dist               om         ffreq  soil   lime   
 Min.   : 5.180   Min.   :0.00000   Min.   : 1.000   1:84   1:97   0:111  
 1st Qu.: 7.546   1st Qu.:0.07569   1st Qu.: 5.300   2:48   2:46   1: 44  
 Median : 8.180   Median :0.21184   Median : 6.900   3:23   3:12          
 Mean   : 8.165   Mean   :0.24002   Mean   : 7.478                        
 3rd Qu.: 8.955   3rd Qu.:0.36407   3rd Qu.: 9.000                        
 Max.   :10.520   Max.   :0.88039   Max.   :17.000                        
                                    NA's   :2                             
    landuse       dist.m      
 W      :50   Min.   :  10.0  
 Ah     :39   1st Qu.:  80.0  
 Am     :22   Median : 270.0  
 Fw     :10   Mean   : 290.3  
 Ab     : 8   3rd Qu.: 450.0  
 (Other):25   Max.   :1000.0  
 NA's   : 1                   
> meusedup3 <- subset(meusedup, !(1:nrow(meusedup) %in% zd[,2]))
> summary(meusedup3)
Object of class SpatialPointsDataFrame
Coordinates:
     min    max
x 178605 181390
y 329714 333611
Is projected: NA 
proj4string : [NA]
Number of points: 155
Data attributes:
    cadmium           copper            lead            zinc       
 Min.   : 0.200   Min.   : 14.00   Min.   : 37.0   Min.   : 113.0  
 1st Qu.: 0.800   1st Qu.: 23.00   1st Qu.: 72.5   1st Qu.: 198.0  
 Median : 2.100   Median : 31.00   Median :123.0   Median : 326.0  
 Mean   : 3.246   Mean   : 40.32   Mean   :153.4   Mean   : 469.7  
 3rd Qu.: 3.850   3rd Qu.: 49.50   3rd Qu.:207.0   3rd Qu.: 674.5  
 Max.   :18.100   Max.   :128.00   Max.   :654.0   Max.   :1839.0  
                                                                   
      elev             dist               om         ffreq  soil   lime   
 Min.   : 5.180   Min.   :0.00000   Min.   : 1.000   1:84   1:97   0:111  
 1st Qu.: 7.546   1st Qu.:0.07569   1st Qu.: 5.300   2:48   2:46   1: 44  
 Median : 8.180   Median :0.21184   Median : 6.900   3:23   3:12          
 Mean   : 8.165   Mean   :0.24002   Mean   : 7.478                        
 3rd Qu.: 8.955   3rd Qu.:0.36407   3rd Qu.: 9.000                        
 Max.   :10.520   Max.   :0.88039   Max.   :17.000                        
                                    NA's   :2                             
    landuse       dist.m      
 W      :50   Min.   :  10.0  
 Ah     :39   1st Qu.:  80.0  
 Am     :22   Median : 270.0  
 Fw     :10   Mean   : 290.3  
 Ab     : 8   3rd Qu.: 450.0  
 (Other):25   Max.   :1000.0  
 NA's   : 1                   
> coordinates(meuse) <- c("x", "y")
> zerodist2(meuse, meuse[c(10:33,1,10),])
      [,1] [,2]
 [1,]   10    1
 [2,]   11    2
 [3,]   12    3
 [4,]   13    4
 [5,]   14    5
 [6,]   15    6
 [7,]   16    7
 [8,]   17    8
 [9,]   18    9
[10,]   19   10
[11,]   20   11
[12,]   21   12
[13,]   22   13
[14,]   23   14
[15,]   24   15
[16,]   25   16
[17,]   26   17
[18,]   27   18
[19,]   28   19
[20,]   29   20
[21,]   30   21
[22,]   31   22
[23,]   32   23
[24,]   33   24
[25,]    1   25
[26,]   10   26
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.96 0.154 3.114 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
