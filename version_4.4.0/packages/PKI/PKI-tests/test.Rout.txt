
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEAxVjKOBJM3xW0DtrDEWuc0h3JVKmeG66qwZJx7HYrc0zvJfDk"
 [3] "0SkJMSYm3FQWVVoyoJuPZXXUUVjjHRzQW9K7h/Zad5V6JPIZTQ5o9jbbdhUSS+H8"
 [4] "UytqaMDAdq+Bl85AuJneT+ig81B3GlAxZDmvqQ7xcqub8rv/4Q1T7ywXAM4PW1fh"
 [5] "RQKFolgD4AtAHWegVyMvIg1u3HWCiWUoWiA/UpqJnzmDKLLR6Epg+kkJrPXrhahR"
 [6] "sqSxEbCXC6ziVDjw9V2EqddtZeugggib7CUuOFa+LmoBMFTMvZklQXJV43+BgO+I"
 [7] "VQ2QvSruAo+kzTX2ZE5uc4H1otpOAGbbdaoaaQIDAQABAoIBAAqnEHJepYTgwWmQ"
 [8] "XDmBYTOT3UlrRwA4SVod1zW0CsQkbd/SzS0vrYH4TN51kQeOMP+rqf3IcpuqBEdu"
 [9] "5d3hBhOwpAFCwbdDFMPMsHSC8U2CVWygcBwGss2hAvqdHm4U+XglgSM329FKgYVb"
[10] "eREPjph9+KFPm2FKzeUGcMaPLxYxUPT8jDlGKSQPO/opcspKYUqYNSu2ej4d1pkK"
[11] "hjjbPr5Hz4XwsbA7CB2oPdIP/1VXMswMnzUa23YkneGTmJF+Bu8/4S8Hj/d4Eb+H"
[12] "Vq06KvwpzXCo7CG6xV+Y9ybXME9oPaMfEtVTL9Pxd/h/LsxCbgvri7mppqkh2WlV"
[13] "qVsB5sECgYEA9ax5npIy3G2tT8s1IgZXHsOCTxlIVaGfFC91WqoC32ELS7ln6KIX"
[14] "3bQLtnvSqrDbftA0dbEGKHlBjutK3Zp2FaUfmP4XHI8TzHVASFZqAKZsm6E7ld9i"
[15] "I613+aiTWQMLDqg/2AAC5rhlzzrcq83tcJ/t9GvuOyUdiJLrbtD7KakCgYEAzaRN"
[16] "dhA3LRV8jyDmS2jQw8rca9utA2euECQR/rSqxMXyXBnZ/RegdKpRiWkHRXFQY87e"
[17] "GYSoj3O2PwKmzxZ4yZUFJWXGTeNZvmx/ORqF5Jx31gvgCTJKUGOozzN/03fSDvmG"
[18] "U5OlGRJA7w7SnrnjDcUOwdGQytou0K9pDEuVYsECgYB8TuZHF0DHCnP8gR0Ed2LT"
[19] "vSeNcISKV7pPk2f1FTtY3hjCGzF5o7Mhyj12+5ZwKgcWVrGEr6snBZvnfiUmlkaT"
[20] "0zZ2ynLVT4w8E0QQljES3SLtaJrmzd4xoU+osuTD0Gdi5j1PxUmyhrF1Nxp7kDpJ"
[21] "l5Lm70nfAXu9JGIec33y6QKBgHLHCOEjzdghDQPKJh/i4drWSE7/LsMexF2H9G9I"
[22] "oaPwpARZ/XyxCkLzqUzbzU4qH+eFWBvAGmDvAcKLlVUywroordWgx51Djxyk7CGQ"
[23] "NzlRR+W1fRdE9YuHBHqZ0PfUAe+PwDS3zMeAk7Oaf15OfHd8DG+Lq5g9TTH3JdfR"
[24] "/BBBAoGBAM5mDu9I99p+uaDmdah/mOzO70phHtJyjmr1MdcJkRiiz/ddUobLPJw0"
[25] "zja4xo0sepFd3XT+1lQGC5ObeMvJRLm26YbwA0BQ5fQiLMdSB4SVpMc5hLn3K0id"
[26] "YCUMXkM4PmdT3ISPQpl7y++HQQ+CaycwQzAKkoSi1FpTf0oeLKvh"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 c5 58 ca 38 12 4c df 15 b4 0e da c3
  [25] 11 6b 9c d2 1d c9 54 a9 9e 1b ae aa c1 92 71 ec 76 2b 73 4c ef 25 f0 e4
  [49] d1 29 09 31 26 26 dc 54 16 55 5a 32 a0 9b 8f 65 75 d4 51 58 e3 1d 1c d0
  [73] 5b d2 bb 87 f6 5a 77 95 7a 24 f2 19 4d 0e 68 f6 36 db 76 15 12 4b e1 fc
  [97] 53 2b 6a 68 c0 c0 76 af 81 97 ce 40 b8 99 de 4f e8 a0 f3 50 77 1a 50 31
 [121] 64 39 af a9 0e f1 72 ab 9b f2 bb ff e1 0d 53 ef 2c 17 00 ce 0f 5b 57 e1
 [145] 45 02 85 a2 58 03 e0 0b 40 1d 67 a0 57 23 2f 22 0d 6e dc 75 82 89 65 28
 [169] 5a 20 3f 52 9a 89 9f 39 83 28 b2 d1 e8 4a 60 fa 49 09 ac f5 eb 85 a8 51
 [193] b2 a4 b1 11 b0 97 0b ac e2 54 38 f0 f5 5d 84 a9 d7 6d 65 eb a0 82 08 9b
 [217] ec 25 2e 38 56 be 2e 6a 01 30 54 cc bd 99 25 41 72 55 e3 7f 81 80 ef 88
 [241] 55 0d 90 bd 2a ee 02 8f a4 cd 35 f6 64 4e 6e 73 81 f5 a2 da 4e 00 66 db
 [265] 75 aa 1a 69 02 03 01 00 01 02 82 01 00 0a a7 10 72 5e a5 84 e0 c1 69 90
 [289] 5c 39 81 61 33 93 dd 49 6b 47 00 38 49 5a 1d d7 35 b4 0a c4 24 6d df d2
 [313] cd 2d 2f ad 81 f8 4c de 75 91 07 8e 30 ff ab a9 fd c8 72 9b aa 04 47 6e
 [337] e5 dd e1 06 13 b0 a4 01 42 c1 b7 43 14 c3 cc b0 74 82 f1 4d 82 55 6c a0
 [361] 70 1c 06 b2 cd a1 02 fa 9d 1e 6e 14 f9 78 25 81 23 37 db d1 4a 81 85 5b
 [385] 79 11 0f 8e 98 7d f8 a1 4f 9b 61 4a cd e5 06 70 c6 8f 2f 16 31 50 f4 fc
 [409] 8c 39 46 29 24 0f 3b fa 29 72 ca 4a 61 4a 98 35 2b b6 7a 3e 1d d6 99 0a
 [433] 86 38 db 3e be 47 cf 85 f0 b1 b0 3b 08 1d a8 3d d2 0f ff 55 57 32 cc 0c
 [457] 9f 35 1a db 76 24 9d e1 93 98 91 7e 06 ef 3f e1 2f 07 8f f7 78 11 bf 87
 [481] 56 ad 3a 2a fc 29 cd 70 a8 ec 21 ba c5 5f 98 f7 26 d7 30 4f 68 3d a3 1f
 [505] 12 d5 53 2f d3 f1 77 f8 7f 2e cc 42 6e 0b eb 8b b9 a9 a6 a9 21 d9 69 55
 [529] a9 5b 01 e6 c1 02 81 81 00 f5 ac 79 9e 92 32 dc 6d ad 4f cb 35 22 06 57
 [553] 1e c3 82 4f 19 48 55 a1 9f 14 2f 75 5a aa 02 df 61 0b 4b b9 67 e8 a2 17
 [577] dd b4 0b b6 7b d2 aa b0 db 7e d0 34 75 b1 06 28 79 41 8e eb 4a dd 9a 76
 [601] 15 a5 1f 98 fe 17 1c 8f 13 cc 75 40 48 56 6a 00 a6 6c 9b a1 3b 95 df 62
 [625] 23 ad 77 f9 a8 93 59 03 0b 0e a8 3f d8 00 02 e6 b8 65 cf 3a dc ab cd ed
 [649] 70 9f ed f4 6b ee 3b 25 1d 88 92 eb 6e d0 fb 29 a9 02 81 81 00 cd a4 4d
 [673] 76 10 37 2d 15 7c 8f 20 e6 4b 68 d0 c3 ca dc 6b db ad 03 67 ae 10 24 11
 [697] fe b4 aa c4 c5 f2 5c 19 d9 fd 17 a0 74 aa 51 89 69 07 45 71 50 63 ce de
 [721] 19 84 a8 8f 73 b6 3f 02 a6 cf 16 78 c9 95 05 25 65 c6 4d e3 59 be 6c 7f
 [745] 39 1a 85 e4 9c 77 d6 0b e0 09 32 4a 50 63 a8 cf 33 7f d3 77 d2 0e f9 86
 [769] 53 93 a5 19 12 40 ef 0e d2 9e b9 e3 0d c5 0e c1 d1 90 ca da 2e d0 af 69
 [793] 0c 4b 95 62 c1 02 81 80 7c 4e e6 47 17 40 c7 0a 73 fc 81 1d 04 77 62 d3
 [817] bd 27 8d 70 84 8a 57 ba 4f 93 67 f5 15 3b 58 de 18 c2 1b 31 79 a3 b3 21
 [841] ca 3d 76 fb 96 70 2a 07 16 56 b1 84 af ab 27 05 9b e7 7e 25 26 96 46 93
 [865] d3 36 76 ca 72 d5 4f 8c 3c 13 44 10 96 31 12 dd 22 ed 68 9a e6 cd de 31
 [889] a1 4f a8 b2 e4 c3 d0 67 62 e6 3d 4f c5 49 b2 86 b1 75 37 1a 7b 90 3a 49
 [913] 97 92 e6 ef 49 df 01 7b bd 24 62 1e 73 7d f2 e9 02 81 80 72 c7 08 e1 23
 [937] cd d8 21 0d 03 ca 26 1f e2 e1 da d6 48 4e ff 2e c3 1e c4 5d 87 f4 6f 48
 [961] a1 a3 f0 a4 04 59 fd 7c b1 0a 42 f3 a9 4c db cd 4e 2a 1f e7 85 58 1b c0
 [985] 1a 60 ef 01 c2 8b 95 55 32 c2 ba 28 ad d5 a0 c7 9d 43 8f 1c a4 ec 21 90
[1009] 37 39 51 47 e5 b5 7d 17 44 f5 8b 87 04 7a 99 d0 f7 d4 01 ef 8f c0 34 b7
[1033] cc c7 80 93 b3 9a 7f 5e 4e 7c 77 7c 0c 6f 8b ab 98 3d 4d 31 f7 25 d7 d1
[1057] fc 10 41 02 81 81 00 ce 66 0e ef 48 f7 da 7e b9 a0 e6 75 a8 7f 98 ec ce
[1081] ef 4a 61 1e d2 72 8e 6a f5 31 d7 09 91 18 a2 cf f7 5d 52 86 cb 3c 9c 34
[1105] ce 36 b8 c6 8d 2c 7a 91 5d dd 74 fe d6 54 06 0b 93 9b 78 cb c9 44 b9 b6
[1129] e9 86 f0 03 40 50 e5 f4 22 2c c7 52 07 84 95 a4 c7 39 84 b9 f7 2b 48 9d
[1153] 60 25 0c 5e 43 38 3e 67 53 dc 84 8f 42 99 7b cb ef 87 41 0f 82 6b 27 30
[1177] 43 30 0a 92 84 a2 d4 5a 53 7f 4a 1e 2c ab e1
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55a1a1a7da20>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55a1a1a6f180>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxVjKOBJM3xW0DtrDEWuc"
[3] "0h3JVKmeG66qwZJx7HYrc0zvJfDk0SkJMSYm3FQWVVoyoJuPZXXUUVjjHRzQW9K7"
[4] "h/Zad5V6JPIZTQ5o9jbbdhUSS+H8UytqaMDAdq+Bl85AuJneT+ig81B3GlAxZDmv"
[5] "qQ7xcqub8rv/4Q1T7ywXAM4PW1fhRQKFolgD4AtAHWegVyMvIg1u3HWCiWUoWiA/"
[6] "UpqJnzmDKLLR6Epg+kkJrPXrhahRsqSxEbCXC6ziVDjw9V2EqddtZeugggib7CUu"
[7] "OFa+LmoBMFTMvZklQXJV43+BgO+IVQ2QvSruAo+kzTX2ZE5uc4H1otpOAGbbdaoa"
[8] "aQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 c5 58 ca 38 12 4c df 15 b4 0e da c3 11 6b 9c d2 1d
 [51] c9 54 a9 9e 1b ae aa c1 92 71 ec 76 2b 73 4c ef 25 f0 e4 d1 29 09 31 26 26
 [76] dc 54 16 55 5a 32 a0 9b 8f 65 75 d4 51 58 e3 1d 1c d0 5b d2 bb 87 f6 5a 77
[101] 95 7a 24 f2 19 4d 0e 68 f6 36 db 76 15 12 4b e1 fc 53 2b 6a 68 c0 c0 76 af
[126] 81 97 ce 40 b8 99 de 4f e8 a0 f3 50 77 1a 50 31 64 39 af a9 0e f1 72 ab 9b
[151] f2 bb ff e1 0d 53 ef 2c 17 00 ce 0f 5b 57 e1 45 02 85 a2 58 03 e0 0b 40 1d
[176] 67 a0 57 23 2f 22 0d 6e dc 75 82 89 65 28 5a 20 3f 52 9a 89 9f 39 83 28 b2
[201] d1 e8 4a 60 fa 49 09 ac f5 eb 85 a8 51 b2 a4 b1 11 b0 97 0b ac e2 54 38 f0
[226] f5 5d 84 a9 d7 6d 65 eb a0 82 08 9b ec 25 2e 38 56 be 2e 6a 01 30 54 cc bd
[251] 99 25 41 72 55 e3 7f 81 80 ef 88 55 0d 90 bd 2a ee 02 8f a4 cd 35 f6 64 4e
[276] 6e 73 81 f5 a2 da 4e 00 66 db 75 aa 1a 69 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55a1a197c870>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55a1a197e120>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
