
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpQIBAAKCAQEA7MFx9mlFV0/yT/QxEUanVCFZhm2oFJJXYekV/89RbNuAkBZz"
 [3] "PIBF7SkGzfXj8nj4k9yuN6yu5uGrjFBQXb1CGYusIB4aNPcD2ig0em6ykKpxKOly"
 [4] "FmPpihYSekGBKxDVbmTGIcBZRujgvFufVZd1bfw1vzx3SOIJfJlhy+R9GPdlFbF8"
 [5] "Sjdsk942JuD5lN1mdOynMOXja2EZC9F71TgJJy0/g5BAEM6hqbLZL3DO70vzit+6"
 [6] "GP7qNeSPTcvmqWrKyOUAoQcFcYik7YnEmNPMmF3c5eUbKaHh75r3Nsx2gMTnkZJD"
 [7] "VrF7uut8XpDn/Z6o8apwkQ2MfipbhGGgJMCq8QIDAQABAoIBACDM1hSM1hH4Hfps"
 [8] "usWJc9IogqYomAItmhSS/bzAhKffqyqLKbDmlol6RxqOp+NmVg3qI2rMLjkHZ8Rb"
 [9] "Nh8egsNWQeT7NqdC15JIQqj5oByBuIax/N/UPL0oPKwaWiJUxTTzmi1/3/5+cfA2"
[10] "g1cQ0jCIIgwZ/O6ofib4ev+L6rbj/y78inpSCzeSyOMIp5g58924x4sm2rkMyEgO"
[11] "4h5ycElylo9UfsBByk0FmyXpRxLmiz+kcTMJuDAuUggwN9tppwFD7N7bgdCzSEB9"
[12] "ESZXOZ/Gll32XjAY+VL44AHkapKs1bMpozyfi8cddsOxVwTt1jdJiBEKnDe+rIki"
[13] "WFPTGI8CgYEA+zH6oadKxtae7+OsijYXOHMTnAk/07H3Vxd2KqNE6JnIMOpOU7nQ"
[14] "VXsW7bExzoeXsnVlsTFN8I0oQFcTP3lZ2sN3D0VOb/LJ+731r0xUw83maIkm/A3r"
[15] "WwfR7GmjRyYTMY8kCu3F+jRrUy5ZadX97on2lPfO0uWWmtfzT8dZ4TcCgYEA8UjC"
[16] "nM7PVlZ1+YF1hT00yaBxWPngWEYQzlKb9tVsyJ03RHt7TGwuV0SleSyqM2tsLsBr"
[17] "gSivGAdCp0kZ5c5XN4brMmzeBccBvTJqzR8I4fAH8BFwtPQfQs0M7FQpm+AwFhI9"
[18] "F7z2YMk323MCOcmZrNqMq5umlufZ/lefX/6RiRcCgYEA3dbXt2fc/BmSp9z0BeOb"
[19] "Qjku+kCY48Zp37pSm3kxZBJb4ActQXf6a2OXbjds+y54ZByVwJUAdg7Tm27LCuWK"
[20] "206AmTXl/av3gaHTlgrdWUc/0tY9XaCVWAFh/V2V20He9YeqlxRCIaOlnQJz6KoZ"
[21] "5k5lPE5Vk587EGji8nPmBqUCgYEAuIkIZrt5MbQguHm9svCTzd1Ks10wqvKzacke"
[22] "hZLHh0tOeK7kJxfZ/V6AHAQADCGNdNgvoHHIMF1lKeIrz2mXpN0oRsGisNJ6TwQf"
[23] "UM/6kCpvN7lu9MZ8ni+LQbhAtnmo7Uh3tw8LdAyRDuKQAjhgsyXXTmxV5bZfMDo9"
[24] "p0JgdnMCgYEA7vB8CXtbgKXumLsHabdpE5CclYnlqfxvrBBLhf9ZbaLb0dmodkk4"
[25] "NkYvIDGZAKiAW3EQEYZDK2k7RrKnDbBd6X8fdMk/qTfpVIeR9YRRuszqqID+9Aid"
[26] "+W7vrQHpcL6rsDMOhwCg71cNWG/wKKUgHeOkml8cVARrZMu10/Qsc/Q="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a5 02 01 00 02 82 01 01 00 ec c1 71 f6 69 45 57 4f f2 4f f4 31
  [25] 11 46 a7 54 21 59 86 6d a8 14 92 57 61 e9 15 ff cf 51 6c db 80 90 16 73
  [49] 3c 80 45 ed 29 06 cd f5 e3 f2 78 f8 93 dc ae 37 ac ae e6 e1 ab 8c 50 50
  [73] 5d bd 42 19 8b ac 20 1e 1a 34 f7 03 da 28 34 7a 6e b2 90 aa 71 28 e9 72
  [97] 16 63 e9 8a 16 12 7a 41 81 2b 10 d5 6e 64 c6 21 c0 59 46 e8 e0 bc 5b 9f
 [121] 55 97 75 6d fc 35 bf 3c 77 48 e2 09 7c 99 61 cb e4 7d 18 f7 65 15 b1 7c
 [145] 4a 37 6c 93 de 36 26 e0 f9 94 dd 66 74 ec a7 30 e5 e3 6b 61 19 0b d1 7b
 [169] d5 38 09 27 2d 3f 83 90 40 10 ce a1 a9 b2 d9 2f 70 ce ef 4b f3 8a df ba
 [193] 18 fe ea 35 e4 8f 4d cb e6 a9 6a ca c8 e5 00 a1 07 05 71 88 a4 ed 89 c4
 [217] 98 d3 cc 98 5d dc e5 e5 1b 29 a1 e1 ef 9a f7 36 cc 76 80 c4 e7 91 92 43
 [241] 56 b1 7b ba eb 7c 5e 90 e7 fd 9e a8 f1 aa 70 91 0d 8c 7e 2a 5b 84 61 a0
 [265] 24 c0 aa f1 02 03 01 00 01 02 82 01 00 20 cc d6 14 8c d6 11 f8 1d fa 6c
 [289] ba c5 89 73 d2 28 82 a6 28 98 02 2d 9a 14 92 fd bc c0 84 a7 df ab 2a 8b
 [313] 29 b0 e6 96 89 7a 47 1a 8e a7 e3 66 56 0d ea 23 6a cc 2e 39 07 67 c4 5b
 [337] 36 1f 1e 82 c3 56 41 e4 fb 36 a7 42 d7 92 48 42 a8 f9 a0 1c 81 b8 86 b1
 [361] fc df d4 3c bd 28 3c ac 1a 5a 22 54 c5 34 f3 9a 2d 7f df fe 7e 71 f0 36
 [385] 83 57 10 d2 30 88 22 0c 19 fc ee a8 7e 26 f8 7a ff 8b ea b6 e3 ff 2e fc
 [409] 8a 7a 52 0b 37 92 c8 e3 08 a7 98 39 f3 dd b8 c7 8b 26 da b9 0c c8 48 0e
 [433] e2 1e 72 70 49 72 96 8f 54 7e c0 41 ca 4d 05 9b 25 e9 47 12 e6 8b 3f a4
 [457] 71 33 09 b8 30 2e 52 08 30 37 db 69 a7 01 43 ec de db 81 d0 b3 48 40 7d
 [481] 11 26 57 39 9f c6 96 5d f6 5e 30 18 f9 52 f8 e0 01 e4 6a 92 ac d5 b3 29
 [505] a3 3c 9f 8b c7 1d 76 c3 b1 57 04 ed d6 37 49 88 11 0a 9c 37 be ac 89 22
 [529] 58 53 d3 18 8f 02 81 81 00 fb 31 fa a1 a7 4a c6 d6 9e ef e3 ac 8a 36 17
 [553] 38 73 13 9c 09 3f d3 b1 f7 57 17 76 2a a3 44 e8 99 c8 30 ea 4e 53 b9 d0
 [577] 55 7b 16 ed b1 31 ce 87 97 b2 75 65 b1 31 4d f0 8d 28 40 57 13 3f 79 59
 [601] da c3 77 0f 45 4e 6f f2 c9 fb bd f5 af 4c 54 c3 cd e6 68 89 26 fc 0d eb
 [625] 5b 07 d1 ec 69 a3 47 26 13 31 8f 24 0a ed c5 fa 34 6b 53 2e 59 69 d5 fd
 [649] ee 89 f6 94 f7 ce d2 e5 96 9a d7 f3 4f c7 59 e1 37 02 81 81 00 f1 48 c2
 [673] 9c ce cf 56 56 75 f9 81 75 85 3d 34 c9 a0 71 58 f9 e0 58 46 10 ce 52 9b
 [697] f6 d5 6c c8 9d 37 44 7b 7b 4c 6c 2e 57 44 a5 79 2c aa 33 6b 6c 2e c0 6b
 [721] 81 28 af 18 07 42 a7 49 19 e5 ce 57 37 86 eb 32 6c de 05 c7 01 bd 32 6a
 [745] cd 1f 08 e1 f0 07 f0 11 70 b4 f4 1f 42 cd 0c ec 54 29 9b e0 30 16 12 3d
 [769] 17 bc f6 60 c9 37 db 73 02 39 c9 99 ac da 8c ab 9b a6 96 e7 d9 fe 57 9f
 [793] 5f fe 91 89 17 02 81 81 00 dd d6 d7 b7 67 dc fc 19 92 a7 dc f4 05 e3 9b
 [817] 42 39 2e fa 40 98 e3 c6 69 df ba 52 9b 79 31 64 12 5b e0 07 2d 41 77 fa
 [841] 6b 63 97 6e 37 6c fb 2e 78 64 1c 95 c0 95 00 76 0e d3 9b 6e cb 0a e5 8a
 [865] db 4e 80 99 35 e5 fd ab f7 81 a1 d3 96 0a dd 59 47 3f d2 d6 3d 5d a0 95
 [889] 58 01 61 fd 5d 95 db 41 de f5 87 aa 97 14 42 21 a3 a5 9d 02 73 e8 aa 19
 [913] e6 4e 65 3c 4e 55 93 9f 3b 10 68 e2 f2 73 e6 06 a5 02 81 81 00 b8 89 08
 [937] 66 bb 79 31 b4 20 b8 79 bd b2 f0 93 cd dd 4a b3 5d 30 aa f2 b3 69 c9 1e
 [961] 85 92 c7 87 4b 4e 78 ae e4 27 17 d9 fd 5e 80 1c 04 00 0c 21 8d 74 d8 2f
 [985] a0 71 c8 30 5d 65 29 e2 2b cf 69 97 a4 dd 28 46 c1 a2 b0 d2 7a 4f 04 1f
[1009] 50 cf fa 90 2a 6f 37 b9 6e f4 c6 7c 9e 2f 8b 41 b8 40 b6 79 a8 ed 48 77
[1033] b7 0f 0b 74 0c 91 0e e2 90 02 38 60 b3 25 d7 4e 6c 55 e5 b6 5f 30 3a 3d
[1057] a7 42 60 76 73 02 81 81 00 ee f0 7c 09 7b 5b 80 a5 ee 98 bb 07 69 b7 69
[1081] 13 90 9c 95 89 e5 a9 fc 6f ac 10 4b 85 ff 59 6d a2 db d1 d9 a8 76 49 38
[1105] 36 46 2f 20 31 99 00 a8 80 5b 71 10 11 86 43 2b 69 3b 46 b2 a7 0d b0 5d
[1129] e9 7f 1f 74 c9 3f a9 37 e9 54 87 91 f5 84 51 ba cc ea a8 80 fe f4 08 9d
[1153] f9 6e ef ad 01 e9 70 be ab b0 33 0e 87 00 a0 ef 57 0d 58 6f f0 28 a5 20
[1177] 1d e3 a4 9a 5f 1c 54 04 6b 64 cb b5 d3 f4 2c 73 f4
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55e7f4036a60>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55e7f40281c0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7MFx9mlFV0/yT/QxEUan"
[3] "VCFZhm2oFJJXYekV/89RbNuAkBZzPIBF7SkGzfXj8nj4k9yuN6yu5uGrjFBQXb1C"
[4] "GYusIB4aNPcD2ig0em6ykKpxKOlyFmPpihYSekGBKxDVbmTGIcBZRujgvFufVZd1"
[5] "bfw1vzx3SOIJfJlhy+R9GPdlFbF8Sjdsk942JuD5lN1mdOynMOXja2EZC9F71TgJ"
[6] "Jy0/g5BAEM6hqbLZL3DO70vzit+6GP7qNeSPTcvmqWrKyOUAoQcFcYik7YnEmNPM"
[7] "mF3c5eUbKaHh75r3Nsx2gMTnkZJDVrF7uut8XpDn/Z6o8apwkQ2MfipbhGGgJMCq"
[8] "8QIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 ec c1 71 f6 69 45 57 4f f2 4f f4 31 11 46 a7 54 21
 [51] 59 86 6d a8 14 92 57 61 e9 15 ff cf 51 6c db 80 90 16 73 3c 80 45 ed 29 06
 [76] cd f5 e3 f2 78 f8 93 dc ae 37 ac ae e6 e1 ab 8c 50 50 5d bd 42 19 8b ac 20
[101] 1e 1a 34 f7 03 da 28 34 7a 6e b2 90 aa 71 28 e9 72 16 63 e9 8a 16 12 7a 41
[126] 81 2b 10 d5 6e 64 c6 21 c0 59 46 e8 e0 bc 5b 9f 55 97 75 6d fc 35 bf 3c 77
[151] 48 e2 09 7c 99 61 cb e4 7d 18 f7 65 15 b1 7c 4a 37 6c 93 de 36 26 e0 f9 94
[176] dd 66 74 ec a7 30 e5 e3 6b 61 19 0b d1 7b d5 38 09 27 2d 3f 83 90 40 10 ce
[201] a1 a9 b2 d9 2f 70 ce ef 4b f3 8a df ba 18 fe ea 35 e4 8f 4d cb e6 a9 6a ca
[226] c8 e5 00 a1 07 05 71 88 a4 ed 89 c4 98 d3 cc 98 5d dc e5 e5 1b 29 a1 e1 ef
[251] 9a f7 36 cc 76 80 c4 e7 91 92 43 56 b1 7b ba eb 7c 5e 90 e7 fd 9e a8 f1 aa
[276] 70 91 0d 8c 7e 2a 5b 84 61 a0 24 c0 aa f1 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55e7f3f35870>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55e7f3f37120>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
