
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "assertthat"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('assertthat')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("are_equal")
> ### * are_equal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: are_equal
> ### Title: Are two objects equal?
> ### Aliases: are_equal
> 
> ### ** Examples
> 
> x <- 2
> see_if(are_equal(x, 1.9))
[1] FALSE
attr(,"msg")
[1] "x not equal to 1.9"
> see_if(are_equal(x, 1.999, tol = 0.01))
[1] TRUE
> see_if(are_equal(x, 2))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("assert-is")
> ### * assert-is
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assert-is
> ### Title: Missing is functions.
> ### Aliases: is.error is.time is.date
> 
> ### ** Examples
> 
> a <- Sys.time()
> is.time(a)
[1] TRUE
> b <- Sys.Date()
> is.date(b)
[1] TRUE
> c <- try(stop("!!"))
Error in try(stop("!!")) : !!
> is.error(c)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("assert_that")
> ### * assert_that
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assert_that
> ### Title: Assert that certain conditions are true.
> ### Aliases: assert_that see_if
> 
> ### ** Examples
> 
> x <- 1
> # assert_that() generates errors, so can't be usefully run in
> # examples
> ## Not run: 
> ##D assert_that(is.character(x))
> ##D assert_that(length(x) == 3)
> ##D assert_that(is.dir("asdf"))
> ##D y <- tempfile()
> ##D writeLines("", y)
> ##D assert_that(is.dir(y))
> ##D assert_that(FALSE, msg = "Custom error message")
> ## End(Not run)
> 
> # But see_if just returns the values, so you'll see that a lot
> # in the examples: but remember to use assert_that in your code.
> see_if(is.character(x))
[1] FALSE
attr(,"msg")
[1] "x is not a character vector"
> see_if(length(x) == 3)
[1] FALSE
attr(,"msg")
[1] "length(x) not equal to 3"
> see_if(is.dir(17))
[1] FALSE
attr(,"msg")
[1] "path is not a string (a length one character vector)."
> see_if(is.dir("asdf"))
[1] FALSE
attr(,"msg")
[1] "Path 'asdf' does not exist"
> see_if(5 < 3, msg = "Five is not smaller than three")
[1] FALSE
attr(,"msg")
[1] "Five is not smaller than three"
> 
> 
> 
> cleanEx()
> nameEx("assertions-file")
> ### * assertions-file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assertions-file
> ### Title: Useful test related to files
> ### Aliases: assertions-file is.dir is.writeable is.readable has_extension
> 
> ### ** Examples
> 
> see_if(is.dir(1))
[1] FALSE
attr(,"msg")
[1] "path is not a string (a length one character vector)."
> 
> tmp <- tempfile()
> see_if(file.exists(tmp))
[1] FALSE
attr(,"msg")
[1] "Path '/tmp/Rtmp5swce4/file9ed5b6d4d1d' does not exist"
> see_if(is.dir(tmp))
[1] FALSE
attr(,"msg")
[1] "Path '/tmp/Rtmp5swce4/file9ed5b6d4d1d' does not exist"
> 
> writeLines("x", tmp)
> see_if(file.exists(tmp))
[1] TRUE
> see_if(is.dir(tmp))
[1] FALSE
attr(,"msg")
[1] "Path '/tmp/Rtmp5swce4/file9ed5b6d4d1d' is not a directory"
> see_if(is.writeable(tmp))
[1] TRUE
> see_if(is.readable(tmp))
[1] TRUE
> unlink(tmp)
> 
> see_if(is.readable(tmp))
[1] FALSE
attr(,"msg")
[1] "Path '/tmp/Rtmp5swce4/file9ed5b6d4d1d' does not exist"
> 
> 
> 
> cleanEx()
> nameEx("has_args")
> ### * has_args
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: has_args
> ### Title: Check a function has specified arguments
> ### Aliases: has_args %has_args%
> 
> ### ** Examples
> 
> has_args(mean, "x")
[1] TRUE
> has_args(mean, "x", exact = TRUE)
[1] FALSE
> 
> see_if(mean %has_args% "x")
[1] TRUE
> see_if(mean %has_args% "y")
[1] FALSE
attr(,"msg")
[1] "`%has_args%`(f = mean, args = \"y\") is not TRUE"
> 
> 
> 
> cleanEx()
> nameEx("has_attr")
> ### * has_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: has_attr
> ### Title: Has attribute or name?
> ### Aliases: has_attr %has_attr% has_name %has_name%
> 
> ### ** Examples
> 
> has_attr(has_attr, "fail")
[1] TRUE
> x <- 10
> x %has_attr% "a"
[1] FALSE
> 
> y <- list(a = 1, b = 2)
> see_if(y %has_name% "c")
[1] FALSE
attr(,"msg")
[1] "y does not have all of these name(s): 'c'"
> 
> 
> 
> cleanEx()
> nameEx("noNA")
> ### * noNA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: noNA
> ### Title: Does object contain any missing values?
> ### Aliases: noNA
> 
> ### ** Examples
> 
> see_if(noNA("a"))
[1] TRUE
> see_if(noNA(c(TRUE, NA)))
[1] FALSE
attr(,"msg")
[1] "c(TRUE, NA) contains 1 missing values"
> x <- sample(c(1:10, NA), 100, rep = TRUE)
> see_if(noNA(x))
[1] FALSE
attr(,"msg")
[1] "x contains 6 missing values"
> 
> 
> 
> cleanEx()
> nameEx("not_empty")
> ### * not_empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: not_empty
> ### Title: Check an object doesn't have any empty dimensions
> ### Aliases: not_empty
> 
> ### ** Examples
> 
> not_empty(numeric())
[1] FALSE
> not_empty(mtcars[0, ])
[1] FALSE
> not_empty(mtcars[, 0])
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("on_failure")
> ### * on_failure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: on_failure
> ### Title: Custom failure messages for assertions.
> ### Aliases: on_failure on_failure<-
> 
> ### ** Examples
> 
> is_odd <- function(x) {
+   assert_that(is.numeric(x), length(x) == 1)
+   x %% 2 == 1
+ }
> see_if(is_odd(2))
[1] FALSE
attr(,"msg")
[1] "is_odd(x = 2) is not TRUE"
> 
> on_failure(is_odd) <- function(call, env) {
+   paste0(deparse(call$x), " is even")
+ }
> see_if(is_odd(2))
[1] FALSE
attr(,"msg")
[1] "2 is even"
> 
> 
> 
> cleanEx()
> nameEx("scalar")
> ### * scalar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scalar
> ### Title: Assert input is a scalar.
> ### Aliases: is.scalar is.string is.number is.flag is.count
> 
> ### ** Examples
> 
> # Generic check for scalars
> see_if(is.scalar("a"))
[1] TRUE
> see_if(is.scalar(1:10))
[1] FALSE
attr(,"msg")
[1] "1:10 is not a scalar."
> 
> # string = scalar character vector
> see_if(is.string(1:3))
[1] FALSE
attr(,"msg")
[1] "1:3 is not a string (a length one character vector)."
> see_if(is.string(c("a", "b")))
[1] FALSE
attr(,"msg")
[1] "c(\"a\", \"b\") is not a string (a length one character vector)."
> see_if(is.string("x"))
[1] TRUE
> 
> # number = scalar numeric/integer vector
> see_if(is.number(1:3))
[1] FALSE
attr(,"msg")
[1] "1:3 is not a number (a length one numeric vector)."
> see_if(is.number(1.5))
[1] TRUE
> 
> # flag = scalar logical vector
> see_if(is.flag(1:3))
[1] FALSE
attr(,"msg")
[1] "1:3 is not a flag (a length one logical vector)."
> see_if(is.flag("a"))
[1] FALSE
attr(,"msg")
[1] "\"a\" is not a flag (a length one logical vector)."
> see_if(is.flag(c(FALSE, FALSE, TRUE)))
[1] FALSE
attr(,"msg")
[1] "c(FALSE, FALSE, TRUE) is not a flag (a length one logical vector)."
> see_if(is.flag(FALSE))
[1] TRUE
> 
> # count = scalar positive integer
> see_if(is.count("a"))
[1] FALSE
attr(,"msg")
[1] "\"a\" is not a count (a single positive integer)"
> see_if(is.count(-1))
[1] FALSE
attr(,"msg")
[1] "-1 is not a count (a single positive integer)"
> see_if(is.count(1:5))
[1] FALSE
attr(,"msg")
[1] "1:5 is not a count (a single positive integer)"
> see_if(is.count(1.5))
[1] FALSE
attr(,"msg")
[1] "1.5 is not a count (a single positive integer)"
> see_if(is.count(1))
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("validate_that")
> ### * validate_that
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validate_that
> ### Title: Validate that certain conditions are true.
> ### Aliases: validate_that
> 
> ### ** Examples
> 
> x <- 1
> # assert_that() generates errors, so can't be usefully run in
> # examples
> validate_that(is.numeric(x))
[1] TRUE
> validate_that(is.character(x))
[1] "x is not a character vector"
> validate_that(length(x) == 3)
[1] "length(x) not equal to 3"
> validate_that(is.dir("asdf"))
[1] "Path 'asdf' does not exist"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.062 0.016 0.079 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
