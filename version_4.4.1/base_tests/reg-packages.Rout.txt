
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> .R_LIBS <- function(libp = .libPaths()) { # (>> in utils?)
+     libp <- libp[! libp %in% .Library]
+     if(length(libp))
+         paste(libp, collapse = .Platform$path.sep)
+     else "" # character(0) is invalid for Sys.setenv()
+ }
> .libPaths(tail(.libPaths(), 1), include.site=FALSE) # no extra libraries (w/ many pkgs)\n")
> 
> Sys.setenv(R_LIBS = .R_LIBS() # for build.pkg() & install.packages()
+          , R_BUILD_ENVIRON = "nothing" # avoid ~/.R/build.environ which might set R_LIBS
+          , R_ENVIRON = "none"
+          , R_PROFILE = "none"
+            )
> showProc.time <- local({ ## function + 'pct' variable
+     pct <- proc.time()
+     function(final="\n") { ## CPU elapsed __since last called__
+ 	ot <- pct ; pct <<- proc.time()
+ 	cat('Time elapsed: ',
+ 	    format.default(round((pct - ot)[1:3], digits=3), digits=4),
+ 	    final)
+     }
+ })
> options(
+     width = 120
+   , repos = character()  # tests here should work without remote access
+ )
> 
> ## PR 1271  detach("package:base") crashes R.
> tools::assertError(detach("package:base"))
> 
> 
> ## invalid 'lib.loc'
> stopifnot(length(installed.packages("mgcv")) == 0)
> ## gave a low-level error message
> showProc.time()
Time elapsed:  0.008 0.003 0.010 
> 
> 
> 
> ## package.skeleton() with metadata-only code
> ## work in current (= ./tests/ directory):
> tmp <- tempfile()
> writeLines(c('setClass("foo", contains="numeric")',
+              'setMethod("show", "foo",',
+              '          function(object) cat("I am a \\"foo\\"\\n"))'),
+            tmp)
> if(file.exists("myTst")) unlink("myTst", recursive=TRUE)
> package.skeleton("myTst", code_files = tmp)# with a file name warning
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Copying code files ...
Making help files ...
Done.
Further steps are described in './myTst/Read-and-delete-me'.
Warning message:
In package.skeleton("myTst", code_files = tmp) :
  Invalid file name(s) for R code in ./myTst/R:
  'file1abf42c55d9bd'
 are now renamed to 'z<name>.R'
> file.copy(tmp, (tm2 <- paste(tmp,".R", sep="")))
[1] TRUE
> unlink("myTst", recursive=TRUE)
> op <- options(warn=2) # *NO* "invalid file name" warning {failed in 2.7.[01]}:
> package.skeleton("myTst", code_files = tm2)
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Copying code files ...
Making help files ...
Done.
Further steps are described in './myTst/Read-and-delete-me'.
> options(op)
> ##_2_ only a class, no generics/methods:
> writeLines(c('setClass("DocLink",',
+              'representation(name="character",',
+              '               desc="character"))'), tmp)
> if(file.exists("myTst2")) unlink("myTst2", recursive=TRUE)
> package.skeleton("myTst2", code_files = tmp)
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Copying code files ...
Making help files ...
Done.
Further steps are described in './myTst2/Read-and-delete-me'.
Warning message:
In package.skeleton("myTst2", code_files = tmp) :
  Invalid file name(s) for R code in ./myTst2/R:
  'file1abf42c55d9bd'
 are now renamed to 'z<name>.R'
> ##- end_2_ # failed in R 2.11.0
> stopifnot(1 == grep("setClass",
+ 		    readLines(list.files("myTst/R", full.names=TRUE))),
+ 	  c("foo-class.Rd","show-methods.Rd") %in% list.files("myTst/man"))
> ## failed for several reasons in R < 2.7.0
> ##
> ## Part 2: -- build, install, load and "inspect" the package:
> build.pkg <- function(dir, destdir = NULL, ignore.stderr = FALSE, no.latex=TRUE) {
+     dir <- normalizePath(dir)
+     if(length(dir) > 1)
+         return(lapply(dir, build.pkg, destdir=destdir,
+                       ignore.stderr=ignore.stderr, no.latex=no.latex))
+     ## else one 'dir':
+     stopifnot(dir.exists(dir), file.exists(DESC <- file.path(dir, "DESCRIPTION")))
+     pkgName <- sub("^[A-Za-z]+: ", "", grep("^Package: ", readLines(DESC), value=TRUE))
+     patt <- paste(pkgName, ".*tar\\.gz$", sep="_")
+     unlink(dir('.', pattern = patt))
+     Rcmd <- paste(shQuote(file.path(R.home("bin"), "R")), "CMD")
+     r <- system(paste(Rcmd, "build --keep-empty-dirs",
+                       if(no.latex) "--no-manual", shQuote(dir)),
+                 ignore.stderr=ignore.stderr, intern = TRUE)
+     ## return name of tar file built {plus the build log} :
+     tball <- structure(dir('.', pattern = patt), log3 = r)
+     if(is.null(destdir))
+         tball
+     else {
+         file.copy(tball, destdir)
+         file.path(destdir, basename(tball))
+     }
+ }
> build.pkg("myTst")

[1] "myTst_1.0.tar.gz"
attr(,"log3")
[1] "* checking for file '/usr/local/lib/R/tests/myTst/DESCRIPTION' ... OK"    
[2] "* preparing 'myTst':"                                                     
[3] "* checking DESCRIPTION meta-information ... OK"                           
[4] "* installing the package to process help pages"                           
[5] "* saving partial Rd database"                                             
[6] "* checking for LF line-endings in source and make files and shell scripts"
[7] "* checking for empty or unneeded directories"                             
[8] "* building 'myTst_1.0.tar.gz'"                                            
> ## clean up any previous attempt (which might have left a 00LOCK)
> unlink("myLib", recursive = TRUE)
> dir.create("myLib")
> install.packages("myTst", lib = "myLib", repos=NULL, type = "source")
* installing *source* package 'myTst' ...
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (myTst)
> print(installed.packages(lib.loc= "myLib", priority= "NA"))## (PR#13332)
      Package LibPath Version Priority Depends Imports   LinkingTo Suggests Enhances License                    
myTst "myTst" "myLib" "1.0"   NA       NA      "methods" NA        NA       NA       "What license is it under?"
      License_is_FOSS License_restricts_use OS_type MD5sum NeedsCompilation Built  
myTst NA              NA                    NA      NA     NA               "4.4.1"
> stopifnot(require("myTst",lib = "myLib"))
Loading required package: myTst
> sm <- findMethods(show, where= as.environment("package:myTst"))
> stopifnot(sm@names == "foo")
> unlink("myTst_*")
> 
> ## test warnings for missing/autogenerated Rd content
> owd <- setwd("myTst")  # (currently) needed for \Sexpr macros
> prompt(identity, filename = "man/identity.Rd")
Created file named 'man/identity.Rd'.
Edit the file and move it to the appropriate directory.
> print(res <- tools::checkRdContents(dir = "."))
Rd files without \description:
  'foo-class.Rd' 'identity.Rd'
Argument items with no description in Rd file 'identity.Rd':
  'x'
Auto-generated content requiring editing in Rd file 'identity.Rd':
  \title: 'A Capitalized Title (ideally limited to 65 characters)'
> stopifnot(exprs = {
+     res[["foo-class.Rd"]]$missing_description  # was part of checkRd() in R < 4.4.0
+     identical(res[["identity.Rd"]]$arguments_with_no_description, "x")
+     ## R < 4.4.0 treated \n and Rd comments as sufficient content
+     identical(res[["identity.Rd"]]$offending_autogenerated_content[,1], "\\title")
+ })
> file.remove("man/identity.Rd")
[1] TRUE
> setwd(owd)
> 
> 
> ## getPackageName()  for "package:foo":
> require('methods')
> library(tools)
> oo <- options(warn=2)
> detach("package:tools", unload=TRUE)
> options(oo)
> ## gave warning (-> Error) about creating package name
> 
> 
> ## More building & installing packages
> ## NB: tests were added here for 2.11.0.
> ## NB^2: do not do this in the R sources (but in a build != src directory!)
> ## and this testdir is not installed.
> if(interactive() && Sys.getenv("USER") == "maechler")
+     Sys.setenv(SRCDIR = normalizePath("~/R/D/r-devel/R/tests"))
> (pkgSrcPath <- file.path(Sys.getenv("SRCDIR"), "Pkgs"))# e.g., -> "../../R/tests/Pkgs"
[1] "./Pkgs"
> ## SRCDIR not available on windows, so pkgSrcPath won't be populated
> ## if this happens non-interactively, cleanup and quit gracefully
> if(!file_test("-d", pkgSrcPath) && !interactive()) {
+     unlink("myTst", recursive=TRUE)
+     showProc.time()
+     q("no")
+ }
Time elapsed:  0.135 0.018 3.336 
