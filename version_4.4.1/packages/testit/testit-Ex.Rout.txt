
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "testit"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('testit')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("assert")
> ### * assert
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assert
> ### Title: Assertions with an optional message
> ### Aliases: assert %==%
> 
> ### ** Examples
> 
> ## The first way to write assertions -------------------
> 
> assert("T is bad for TRUE, and so is F for FALSE", {
+     T = FALSE
+     F = TRUE
+     (T != TRUE)  # note the parentheses
+     (F != FALSE)
+ })
> 
> assert("A Poisson random number is non-negative", {
+     x = rpois(1, 10)
+     (x >= 0)
+     (x > -1)  # () is optional because it's the last expression
+ })
> 
> 
> ## The second way to write assertions --------------------
> 
> assert("one equals one", 1 == 1)
> assert("seq and : produce equal sequences", seq(1L, 10L) == 1L:10L)
> assert("seq and : produce identical sequences", identical(seq(1L, 10L), 1L:10L))
> 
> # multiple tests
> T = FALSE
> F = TRUE
> assert("T is bad for TRUE, and so is F for FALSE", T != TRUE, F != FALSE)
> 
> # a mixture of tests
> assert("Let's pray all of them will pass", 1 == 1, 1 != 2, letters[4] == "d", 
+     rev(rev(letters)) == letters)
> 
> # logical(0) cannot pass assert(), although stopifnot() does not care
> try(assert("logical(0) cannot pass", 1 == integer(0)))
assertion failed: logical(0) cannot pass
Error : 1 == integer(0) are not all TRUE
> stopifnot(1 == integer(0))  # it's OK!
> 
> # a compound expression
> try(assert("this if statement returns TRUE", if (TRUE) {
+     x = 1
+     x == 2
+ }))
assertion failed: this if statement returns TRUE
Error : if (TRUE) { .... x == 2 is not TRUE
> 
> # no message
> assert(!FALSE, TRUE, is.na(NA))
> 
> 
> 
> cleanEx()
> nameEx("has_message")
> ### * has_message
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: has_warning
> ### Title: Check if an R expression produces warnings or errors
> ### Aliases: has_warning has_error
> 
> ### ** Examples
> 
> has_warning(1 + 1)
[1] FALSE
> has_warning(1:2 + 1:3)
[1] TRUE
> 
> has_error(2 - 3)
[1] FALSE
> has_error(1 + "a")
[1] TRUE
> has_error(stop("err"), silent = TRUE)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("test_pkg")
> ### * test_pkg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test_pkg
> ### Title: Run the tests of a package in its namespace
> ### Aliases: test_pkg
> 
> ### ** Examples
> 
> ## Not run: 
> ##D test_pkg("testit")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.07 0 0.07 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
