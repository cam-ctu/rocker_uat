
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ragg"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ragg')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("agg_capture")
> ### * agg_capture
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: agg_capture
> ### Title: Draw to a buffer that can be accessed directly
> ### Aliases: agg_capture
> 
> ### ** Examples
> 
> cap <- agg_capture()
> plot(1:10, 1:10)
> 
> # Get the plot as a matrix
> raster <- cap()
> 
> # Get the plot as a nativeRaster
> raster_n <- cap(native = TRUE)
> 
> dev.off()
pdf 
  2 
> 
> # Look at the output
> plot(as.raster(raster))
> 
> 
> 
> 
> cleanEx()
> nameEx("agg_jpeg")
> ### * agg_jpeg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: agg_jpeg
> ### Title: Draw to a JPEG file
> ### Aliases: agg_jpeg
> 
> ### ** Examples
> 
> file <- tempfile(fileext = '.jpeg')
> agg_jpeg(file, quality = 50)
> plot(sin, -pi, 2*pi)
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> cleanEx()
> nameEx("agg_png")
> ### * agg_png
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: agg_png
> ### Title: Draw to a PNG file
> ### Aliases: agg_png
> 
> ### ** Examples
> 
> file <- tempfile(fileext = '.png')
> agg_png(file)
> plot(sin, -pi, 2*pi)
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> cleanEx()
> nameEx("agg_ppm")
> ### * agg_ppm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: agg_ppm
> ### Title: Draw to a PPM file
> ### Aliases: agg_ppm
> 
> ### ** Examples
> 
> file <- tempfile(fileext = '.ppm')
> agg_ppm(file)
> plot(sin, -pi, 2*pi)
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> cleanEx()
> nameEx("agg_tiff")
> ### * agg_tiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: agg_tiff
> ### Title: Draw to a TIFF file
> ### Aliases: agg_tiff
> 
> ### ** Examples
> 
> file <- tempfile(fileext = '.tiff')
> # Use jpeg compression
> agg_tiff(file, compression = 'lzw+p')
> plot(sin, -pi, 2*pi)
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.214 0.012 0.227 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
