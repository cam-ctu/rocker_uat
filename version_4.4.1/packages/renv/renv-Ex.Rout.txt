
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "renv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('renv')

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("activate")
> ### * activate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: activate
> ### Title: Activate or deactivate a project
> ### Aliases: activate deactivate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # activate the current project
> ##D renv::activate()
> ##D 
> ##D # activate a separate project
> ##D renv::activate(project = "~/projects/analysis")
> ##D 
> ##D # deactivate the currently-activated project
> ##D renv::deactivate()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("checkout")
> ### * checkout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkout
> ### Title: Checkout a repository
> ### Aliases: checkout
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # check out packages from PPM using the date '2023-01-02'
> ##D renv::checkout(date = "2023-01-02")
> ##D 
> ##D # alternatively, supply the full repository path
> ##D renv::checkout(repos = c(PPM = "https://packagemanager.rstudio.com/cran/2023-01-02"))
> ##D 
> ##D # only check out some subset of packages (and their recursive dependencies)
> ##D renv::checkout(packages = "dplyr", date = "2023-01-02")
> ##D 
> ##D # generate a lockfile based on a snapshot date
> ##D renv::checkout(date = "2023-01-02", actions = "snapshot")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("clean")
> ### * clean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clean
> ### Title: Clean a project
> ### Aliases: clean
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # clean the current project
> ##D renv::clean()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("config")
> ### * config
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: config
> ### Title: User-level settings
> ### Aliases: config
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> # disable automatic snapshots
> options(renv.config.auto.snapshot = FALSE)
> 
> # disable with environment variable
> Sys.setenv(RENV_CONFIG_AUTO_SNAPSHOT = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("dependencies")
> ### * dependencies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dependencies
> ### Title: Find R package dependencies in a project
> ### Aliases: dependencies
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # find R package dependencies in the current directory
> ##D renv::dependencies()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("equip")
> ### * equip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: equip
> ### Title: Install required system libraries
> ### Aliases: equip
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # download useful build tools
> ##D renv::equip()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("graph")
> ### * graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph
> ### Title: Generate a Package Dependency Graph
> ### Aliases: graph
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # graph the relationship between devtools and rlang
> ##D graph(root = "devtools", leaf = "rlang")
> ##D 
> ##D # figure out why a project depends on 'askpass'
> ##D graph(leaf = "askpass")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("history")
> ### * history
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: history
> ### Title: View and revert to a historical lockfile
> ### Aliases: history revert
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # get history of previous versions of renv.lock in VCS
> ##D db <- renv::history()
> ##D 
> ##D # choose an older commit
> ##D commit <- db$commit[5]
> ##D 
> ##D # revert to that version of the lockfile
> ##D renv::revert(commit = commit)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("hydrate")
> ### * hydrate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hydrate
> ### Title: Copy packages from user libraries to a project library
> ### Aliases: hydrate
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # hydrate the active library
> ##D renv::hydrate()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("init")
> ### * init
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: init
> ### Title: Use renv in a project
> ### Aliases: init
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # disable automatic snapshots
> ##D auto.snapshot <- getOption("renv.config.auto.snapshot")
> ##D options(renv.config.auto.snapshot = FALSE)
> ##D 
> ##D # initialize a new project (with an empty R library)
> ##D renv::init(bare = TRUE)
> ##D 
> ##D # install digest 0.6.19
> ##D renv::install("digest@0.6.19")
> ##D 
> ##D # save library state to lockfile
> ##D renv::snapshot()
> ##D 
> ##D # remove digest from library
> ##D renv::remove("digest")
> ##D 
> ##D # check library status
> ##D renv::status()
> ##D 
> ##D # restore lockfile, thereby reinstalling digest 0.6.19
> ##D renv::restore()
> ##D 
> ##D # restore automatic snapshots
> ##D options(renv.config.auto.snapshot = auto.snapshot)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install")
> ### * install
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install
> ### Title: Install packages
> ### Aliases: install
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # install the latest version of 'digest'
> ##D renv::install("digest")
> ##D 
> ##D # install an old version of 'digest' (using archives)
> ##D renv::install("digest@0.6.18")
> ##D 
> ##D # install 'digest' from GitHub (latest dev. version)
> ##D renv::install("eddelbuettel/digest")
> ##D 
> ##D # install a package from GitHub, using specific commit
> ##D renv::install("eddelbuettel/digest@df55b00bff33e945246eff2586717452e635032f")
> ##D 
> ##D # install a package from Bioconductor
> ##D # (note: requires the BiocManager package)
> ##D renv::install("bioc::Biobase")
> ##D 
> ##D # install a package, specifying path explicitly
> ##D renv::install("~/path/to/package")
> ##D 
> ##D # install packages as declared in the project DESCRIPTION file
> ##D renv::install()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("isolate")
> ### * isolate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isolate
> ### Title: Isolate a project
> ### Aliases: isolate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # isolate a project
> ##D renv::isolate()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("load")
> ### * load
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load
> ### Title: Load a project
> ### Aliases: load
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # load a project -- note that this is normally done automatically
> ##D # by the project's auto-loader, but calling this explicitly to
> ##D # load a particular project may be useful in some circumstances
> ##D renv::load()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("lockfile-api")
> ### * lockfile-api
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lockfile-api
> ### Title: Programmatically Create and Modify a Lockfile
> ### Aliases: lockfile-api lockfile
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D lock <- lockfile("renv.lock")
> ##D 
> ##D # set the repositories for a lockfile
> ##D lock$repos(CRAN = "https://cran.r-project.org")
> ##D 
> ##D # depend on digest 0.6.22
> ##D lock$add(digest = "digest@0.6.22")
> ##D 
> ##D # write to file
> ##D lock$write("renv.lock")
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("lockfile_validate")
> ### * lockfile_validate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lockfile_validate
> ### Title: Validate an renv lockfile against a schema
> ### Aliases: lockfile_validate
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # validate the project's lockfile
> ##D renv::lockfile_validate()
> ##D 
> ##D # validate the project's lockfile using a non-default schema
> ##D renv::lockfile_validate(schema = "/path/to/your/custom/schema.json")
> ##D 
> ##D # validate a lockfile using its path
> ##D renv::lockfile_validate(lockfile = "/path/to/your/renv.lock")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("migrate")
> ### * migrate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: migrate
> ### Title: Migrate a project from packrat to renv
> ### Aliases: migrate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # migrate Packrat project infrastructure to renv
> ##D renv::migrate()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("modify")
> ### * modify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modify
> ### Title: Modify a Lockfile
> ### Aliases: modify
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # modify an existing lockfile
> ##D if (interactive())
> ##D   renv::modify()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("paths")
> ### * paths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: paths
> ### Title: Path for storing global state
> ### Aliases: paths
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # get the path to the project library
> path <- renv::paths$library()
> 
> 
> 
> cleanEx()
> nameEx("project")
> ### * project
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: project
> ### Title: Retrieve the active project
> ### Aliases: project
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # get the currently-active renv project
> ##D renv::project()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("purge")
> ### * purge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: purge
> ### Title: Purge packages from the cache
> ### Aliases: purge
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # remove all versions of 'digest' from the cache
> ##D renv::purge("digest")
> ##D 
> ##D # remove only a particular version of 'digest' from the cache
> ##D renv::purge("digest", version = "0.6.19")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rebuild")
> ### * rebuild
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rebuild
> ### Title: Rebuild the packages in your project library
> ### Aliases: rebuild
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # rebuild the 'dplyr' package + all of its dependencies
> ##D renv::rebuild("dplyr", recursive = TRUE)
> ##D 
> ##D # rebuild only 'dplyr'
> ##D renv::rebuild("dplyr", recursive = FALSE)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("record")
> ### * record
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: record
> ### Title: Update package records in a lockfile
> ### Aliases: record
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # use digest 0.6.22 from package repositories -- different ways
> ##D # of specifying the remote. use whichever is most natural
> ##D renv::record("digest@0.6.22")
> ##D renv::record(list(digest = "0.6.22"))
> ##D renv::record(list(digest = "digest@0.6.22"))
> ##D 
> ##D # alternatively, provide a full record as a list
> ##D digest_record <- list(
> ##D   Package = "digest",
> ##D   Version = "0.6.22",
> ##D   Source  = "Repository",
> ##D   Repository = "CRAN"
> ##D )
> ##D 
> ##D renv::record(list(digest = digest_record))
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("refresh")
> ### * refresh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: refresh
> ### Title: Refresh the local cache of available packages
> ### Aliases: refresh
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # check available packages
> ##D db <- available.packages()
> ##D 
> ##D # wait some time (suppose packages are uploaded / changed in this time)
> ##D Sys.sleep(5)
> ##D 
> ##D # refresh the local available packages database
> ##D # (the old locally cached db will be removed)
> ##D db <- renv::refresh()
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("remove")
> ### * remove
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove
> ### Title: Remove packages
> ### Aliases: remove
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # disable automatic snapshots
> ##D auto.snapshot <- getOption("renv.config.auto.snapshot")
> ##D options(renv.config.auto.snapshot = FALSE)
> ##D 
> ##D # initialize a new project (with an empty R library)
> ##D renv::init(bare = TRUE)
> ##D 
> ##D # install digest 0.6.19
> ##D renv::install("digest@0.6.19")
> ##D 
> ##D # save library state to lockfile
> ##D renv::snapshot()
> ##D 
> ##D # remove digest from library
> ##D renv::remove("digest")
> ##D 
> ##D # check library status
> ##D renv::status()
> ##D 
> ##D # restore lockfile, thereby reinstalling digest 0.6.19
> ##D renv::restore()
> ##D 
> ##D # restore automatic snapshots
> ##D options(renv.config.auto.snapshot = auto.snapshot)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("restore")
> ### * restore
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restore
> ### Title: Restore project library from a lockfile
> ### Aliases: restore
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # disable automatic snapshots
> ##D auto.snapshot <- getOption("renv.config.auto.snapshot")
> ##D options(renv.config.auto.snapshot = FALSE)
> ##D 
> ##D # initialize a new project (with an empty R library)
> ##D renv::init(bare = TRUE)
> ##D 
> ##D # install digest 0.6.19
> ##D renv::install("digest@0.6.19")
> ##D 
> ##D # save library state to lockfile
> ##D renv::snapshot()
> ##D 
> ##D # remove digest from library
> ##D renv::remove("digest")
> ##D 
> ##D # check library status
> ##D renv::status()
> ##D 
> ##D # restore lockfile, thereby reinstalling digest 0.6.19
> ##D renv::restore()
> ##D 
> ##D # restore automatic snapshots
> ##D options(renv.config.auto.snapshot = auto.snapshot)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("retrieve")
> ### * retrieve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: retrieve
> ### Title: Retrieve packages
> ### Aliases: retrieve
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # retrieve package + versions as defined in the lockfile
> ##D # normally used as a pre-flight step to renv::restore()
> ##D renv::retrieve()
> ##D 
> ##D # download one or more packages locally
> ##D renv::retrieve("rlang", destdir = ".")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("scaffold")
> ### * scaffold
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scaffold
> ### Title: Generate project infrastructure
> ### Aliases: scaffold
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # create scaffolding with 'devtools' ignored
> ##D renv::scaffold(settings = list(ignored.packages = "devtools"))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("settings")
> ### * settings
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: settings
> ### Title: Project settings
> ### Aliases: settings
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # view currently-ignored packaged
> ##D renv::settings$ignored.packages()
> ##D 
> ##D # ignore a set of packages
> ##D renv::settings$ignored.packages("devtools", persist = FALSE)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("snapshot")
> ### * snapshot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: snapshot
> ### Title: Record current state of the project library in the lockfile
> ### Aliases: snapshot
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # disable automatic snapshots
> ##D auto.snapshot <- getOption("renv.config.auto.snapshot")
> ##D options(renv.config.auto.snapshot = FALSE)
> ##D 
> ##D # initialize a new project (with an empty R library)
> ##D renv::init(bare = TRUE)
> ##D 
> ##D # install digest 0.6.19
> ##D renv::install("digest@0.6.19")
> ##D 
> ##D # save library state to lockfile
> ##D renv::snapshot()
> ##D 
> ##D # remove digest from library
> ##D renv::remove("digest")
> ##D 
> ##D # check library status
> ##D renv::status()
> ##D 
> ##D # restore lockfile, thereby reinstalling digest 0.6.19
> ##D renv::restore()
> ##D 
> ##D # restore automatic snapshots
> ##D options(renv.config.auto.snapshot = auto.snapshot)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("status")
> ### * status
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: status
> ### Title: Report inconsistencies between lockfile, library, and
> ###   dependencies
> ### Aliases: status
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # disable automatic snapshots
> ##D auto.snapshot <- getOption("renv.config.auto.snapshot")
> ##D options(renv.config.auto.snapshot = FALSE)
> ##D 
> ##D # initialize a new project (with an empty R library)
> ##D renv::init(bare = TRUE)
> ##D 
> ##D # install digest 0.6.19
> ##D renv::install("digest@0.6.19")
> ##D 
> ##D # save library state to lockfile
> ##D renv::snapshot()
> ##D 
> ##D # remove digest from library
> ##D renv::remove("digest")
> ##D 
> ##D # check library status
> ##D renv::status()
> ##D 
> ##D # restore lockfile, thereby reinstalling digest 0.6.19
> ##D renv::restore()
> ##D 
> ##D # restore automatic snapshots
> ##D options(renv.config.auto.snapshot = auto.snapshot)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("update")
> ### * update
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update
> ### Title: Update packages
> ### Aliases: update
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # update the 'dplyr' package
> ##D renv::update("dplyr")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("upgrade")
> ### * upgrade
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: upgrade
> ### Title: Upgrade renv
> ### Aliases: upgrade
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # upgrade to the latest version of renv
> ##D renv::upgrade()
> ##D 
> ##D # upgrade to the latest version of renv on GitHub (development version)
> ##D renv::upgrade(version = "main")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_python")
> ### * use_python
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_python
> ### Title: Use python
> ### Aliases: use_python
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # use python with a project
> ##D renv::use_python()
> ##D 
> ##D # use python with a project; create the environment
> ##D # within the project directory in the '.venv' folder
> ##D renv::use_python(name = ".venv")
> ##D 
> ##D # use python with a pre-existing virtual environment located elsewhere
> ##D renv::use_python(name = "~/.virtualenvs/env")
> ##D 
> ##D # use virtualenv python with a project
> ##D renv::use_python(type = "virtualenv")
> ##D 
> ##D # use conda python with a project
> ##D renv::use_python(type = "conda")
> ##D 
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.765 0.025 1.341 0.04 0.017 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
