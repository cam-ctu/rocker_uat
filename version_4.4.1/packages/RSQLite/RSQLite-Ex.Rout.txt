
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RSQLite"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RSQLite')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SQLite")
> ### * SQLite
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SQLite
> ### Title: Connect to an SQLite database
> ### Aliases: SQLite RSQLite RSQLite-package dbConnect_SQLiteConnection
> ###   dbConnect,SQLiteConnection-method dbConnect_SQLiteDriver SQLITE_RWC
> ###   SQLITE_RW SQLITE_RO dbConnect,SQLiteDriver-method
> ###   dbDisconnect_SQLiteConnection dbDisconnect,SQLiteConnection-method
> 
> ### ** Examples
> 
> library(DBI)
> # Initialize a temporary in memory database and copy a data.frame into it
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> data(USArrests)
> dbWriteTable(con, "USArrests", USArrests)
> dbListTables(con)
[1] "USArrests"
> 
> # Fetch all query results into a data frame:
> dbGetQuery(con, "SELECT * FROM USArrests")
   Murder Assault UrbanPop Rape
1    13.2     236       58 21.2
2    10.0     263       48 44.5
3     8.1     294       80 31.0
4     8.8     190       50 19.5
5     9.0     276       91 40.6
6     7.9     204       78 38.7
7     3.3     110       77 11.1
8     5.9     238       72 15.8
9    15.4     335       80 31.9
10   17.4     211       60 25.8
11    5.3      46       83 20.2
12    2.6     120       54 14.2
13   10.4     249       83 24.0
14    7.2     113       65 21.0
15    2.2      56       57 11.3
16    6.0     115       66 18.0
17    9.7     109       52 16.3
18   15.4     249       66 22.2
19    2.1      83       51  7.8
20   11.3     300       67 27.8
21    4.4     149       85 16.3
22   12.1     255       74 35.1
23    2.7      72       66 14.9
24   16.1     259       44 17.1
25    9.0     178       70 28.2
26    6.0     109       53 16.4
27    4.3     102       62 16.5
28   12.2     252       81 46.0
29    2.1      57       56  9.5
30    7.4     159       89 18.8
31   11.4     285       70 32.1
32   11.1     254       86 26.1
33   13.0     337       45 16.1
34    0.8      45       44  7.3
35    7.3     120       75 21.4
36    6.6     151       68 20.0
37    4.9     159       67 29.3
38    6.3     106       72 14.9
39    3.4     174       87  8.3
40   14.4     279       48 22.5
41    3.8      86       45 12.8
42   13.2     188       59 26.9
43   12.7     201       80 25.5
44    3.2     120       80 22.9
45    2.2      48       32 11.2
46    8.5     156       63 20.7
47    4.0     145       73 26.2
48    5.7      81       39  9.3
49    2.6      53       66 10.8
50    6.8     161       60 15.6
> 
> # Or do it in batches
> rs <- dbSendQuery(con, "SELECT * FROM USArrests")
> d1 <- dbFetch(rs, n = 10) # extract data in chunks of 10 rows
> dbHasCompleted(rs)
[1] FALSE
> d2 <- dbFetch(rs, n = -1) # extract all remaining data
> dbHasCompleted(rs)
[1] TRUE
> dbClearResult(rs)
> 
> # clean up
> dbDisconnect(con)
> 
> 
> 
> cleanEx()

detaching ‘package:DBI’

> nameEx("datasetsDb")
> ### * datasetsDb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datasetsDb
> ### Title: A sample sqlite database
> ### Aliases: datasetsDb
> 
> ### ** Examples
> 
> library(DBI)
> db <- RSQLite::datasetsDb()
> dbListTables(db)
 [1] "BOD"              "CO2"              "ChickWeight"      "DNase"           
 [5] "Formaldehyde"     "Indometh"         "InsectSprays"     "LifeCycleSavings"
 [9] "Loblolly"         "Orange"           "OrchardSprays"    "PlantGrowth"     
[13] "Puromycin"        "Theoph"           "ToothGrowth"      "USArrests"       
[17] "USJudgeRatings"   "airquality"       "anscombe"         "attenu"          
[21] "attitude"         "cars"             "chickwts"         "esoph"           
[25] "faithful"         "freeny"           "infert"           "iris"            
[29] "longley"          "morley"           "mtcars"           "npk"             
[33] "pressure"         "quakes"           "randu"            "rock"            
[37] "sleep"            "stackloss"        "swiss"            "trees"           
[41] "warpbreaks"       "women"           
> 
> dbReadTable(db, "CO2")
   Plant        Type  Treatment conc uptake
1    Qn1      Quebec nonchilled   95   16.0
2    Qn1      Quebec nonchilled  175   30.4
3    Qn1      Quebec nonchilled  250   34.8
4    Qn1      Quebec nonchilled  350   37.2
5    Qn1      Quebec nonchilled  500   35.3
6    Qn1      Quebec nonchilled  675   39.2
7    Qn1      Quebec nonchilled 1000   39.7
8    Qn2      Quebec nonchilled   95   13.6
9    Qn2      Quebec nonchilled  175   27.3
10   Qn2      Quebec nonchilled  250   37.1
11   Qn2      Quebec nonchilled  350   41.8
12   Qn2      Quebec nonchilled  500   40.6
13   Qn2      Quebec nonchilled  675   41.4
14   Qn2      Quebec nonchilled 1000   44.3
15   Qn3      Quebec nonchilled   95   16.2
16   Qn3      Quebec nonchilled  175   32.4
17   Qn3      Quebec nonchilled  250   40.3
18   Qn3      Quebec nonchilled  350   42.1
19   Qn3      Quebec nonchilled  500   42.9
20   Qn3      Quebec nonchilled  675   43.9
21   Qn3      Quebec nonchilled 1000   45.5
22   Qc1      Quebec    chilled   95   14.2
23   Qc1      Quebec    chilled  175   24.1
24   Qc1      Quebec    chilled  250   30.3
25   Qc1      Quebec    chilled  350   34.6
26   Qc1      Quebec    chilled  500   32.5
27   Qc1      Quebec    chilled  675   35.4
28   Qc1      Quebec    chilled 1000   38.7
29   Qc2      Quebec    chilled   95    9.3
30   Qc2      Quebec    chilled  175   27.3
31   Qc2      Quebec    chilled  250   35.0
32   Qc2      Quebec    chilled  350   38.8
33   Qc2      Quebec    chilled  500   38.6
34   Qc2      Quebec    chilled  675   37.5
35   Qc2      Quebec    chilled 1000   42.4
36   Qc3      Quebec    chilled   95   15.1
37   Qc3      Quebec    chilled  175   21.0
38   Qc3      Quebec    chilled  250   38.1
39   Qc3      Quebec    chilled  350   34.0
40   Qc3      Quebec    chilled  500   38.9
41   Qc3      Quebec    chilled  675   39.6
42   Qc3      Quebec    chilled 1000   41.4
43   Mn1 Mississippi nonchilled   95   10.6
44   Mn1 Mississippi nonchilled  175   19.2
45   Mn1 Mississippi nonchilled  250   26.2
46   Mn1 Mississippi nonchilled  350   30.0
47   Mn1 Mississippi nonchilled  500   30.9
48   Mn1 Mississippi nonchilled  675   32.4
49   Mn1 Mississippi nonchilled 1000   35.5
50   Mn2 Mississippi nonchilled   95   12.0
51   Mn2 Mississippi nonchilled  175   22.0
52   Mn2 Mississippi nonchilled  250   30.6
53   Mn2 Mississippi nonchilled  350   31.8
54   Mn2 Mississippi nonchilled  500   32.4
55   Mn2 Mississippi nonchilled  675   31.1
56   Mn2 Mississippi nonchilled 1000   31.5
57   Mn3 Mississippi nonchilled   95   11.3
58   Mn3 Mississippi nonchilled  175   19.4
59   Mn3 Mississippi nonchilled  250   25.8
60   Mn3 Mississippi nonchilled  350   27.9
61   Mn3 Mississippi nonchilled  500   28.5
62   Mn3 Mississippi nonchilled  675   28.1
63   Mn3 Mississippi nonchilled 1000   27.8
64   Mc1 Mississippi    chilled   95   10.5
65   Mc1 Mississippi    chilled  175   14.9
66   Mc1 Mississippi    chilled  250   18.1
67   Mc1 Mississippi    chilled  350   18.9
68   Mc1 Mississippi    chilled  500   19.5
69   Mc1 Mississippi    chilled  675   22.2
70   Mc1 Mississippi    chilled 1000   21.9
71   Mc2 Mississippi    chilled   95    7.7
72   Mc2 Mississippi    chilled  175   11.4
73   Mc2 Mississippi    chilled  250   12.3
74   Mc2 Mississippi    chilled  350   13.0
75   Mc2 Mississippi    chilled  500   12.5
76   Mc2 Mississippi    chilled  675   13.7
77   Mc2 Mississippi    chilled 1000   14.4
78   Mc3 Mississippi    chilled   95   10.6
79   Mc3 Mississippi    chilled  175   18.0
80   Mc3 Mississippi    chilled  250   17.9
81   Mc3 Mississippi    chilled  350   17.9
82   Mc3 Mississippi    chilled  500   17.9
83   Mc3 Mississippi    chilled  675   18.9
84   Mc3 Mississippi    chilled 1000   19.9
> dbGetQuery(db, "SELECT * FROM CO2 WHERE conc < 100")
   Plant        Type  Treatment conc uptake
1    Qn1      Quebec nonchilled   95   16.0
2    Qn2      Quebec nonchilled   95   13.6
3    Qn3      Quebec nonchilled   95   16.2
4    Qc1      Quebec    chilled   95   14.2
5    Qc2      Quebec    chilled   95    9.3
6    Qc3      Quebec    chilled   95   15.1
7    Mn1 Mississippi nonchilled   95   10.6
8    Mn2 Mississippi nonchilled   95   12.0
9    Mn3 Mississippi nonchilled   95   11.3
10   Mc1 Mississippi    chilled   95   10.5
11   Mc2 Mississippi    chilled   95    7.7
12   Mc3 Mississippi    chilled   95   10.6
> 
> dbDisconnect(db)
> 
> 
> 
> cleanEx()

detaching ‘package:DBI’

> nameEx("dbReadTable")
> ### * dbReadTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbReadTable_SQLiteConnection_character
> ### Title: Read a database table
> ### Aliases: dbReadTable_SQLiteConnection_character
> ###   dbReadTable,SQLiteConnection,character-method
> 
> ### ** Examples
> 
> library(DBI)
> db <- RSQLite::datasetsDb()
> dbReadTable(db, "mtcars")
             row_names  mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1            Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2        Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3           Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5    Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6              Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7           Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8            Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9             Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10            Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
11           Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
12          Merc 450SE 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
13          Merc 450SL 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
14         Merc 450SLC 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
15  Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
16 Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
17   Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
18            Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
19         Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
20      Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
21       Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
22    Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
23         AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
24          Camaro Z28 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
25    Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
26           Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
27       Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
28        Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
29      Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
30        Ferrari Dino 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
31       Maserati Bora 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
32          Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> dbReadTable(db, "mtcars", row.names = FALSE)
             row_names  mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1            Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2        Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3           Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5    Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6              Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7           Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8            Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9             Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10            Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
11           Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
12          Merc 450SE 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
13          Merc 450SL 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
14         Merc 450SLC 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
15  Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
16 Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
17   Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
18            Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
19         Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
20      Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
21       Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
22    Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
23         AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
24          Camaro Z28 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
25    Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
26           Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
27       Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
28        Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
29      Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
30        Ferrari Dino 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
31       Maserati Bora 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
32          Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> dbDisconnect(db)
> 
> 
> 
> cleanEx()

detaching ‘package:DBI’

> nameEx("dbWriteTable")
> ### * dbWriteTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbWriteTable_SQLiteConnection_character_character
> ### Title: Write a local data frame or file to the database
> ### Aliases: dbWriteTable_SQLiteConnection_character_character
> ###   dbWriteTable,SQLiteConnection,character,character-method
> ###   dbWriteTable_SQLiteConnection_character_data.frame
> ###   dbWriteTable,SQLiteConnection,character,data.frame-method
> 
> ### ** Examples
> 
> con <- dbConnect(SQLite())
> dbWriteTable(con, "mtcars", mtcars)
> dbReadTable(con, "mtcars")
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> 
> # A zero row data frame just creates a table definition.
> dbWriteTable(con, "mtcars2", mtcars[0, ])
> dbReadTable(con, "mtcars2")
 [1] mpg  cyl  disp hp   drat wt   qsec vs   am   gear carb
<0 rows> (or 0-length row.names)
> 
> dbDisconnect(con)
> 
> 
> 
> cleanEx()
> nameEx("initExtension")
> ### * initExtension
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: initExtension
> ### Title: Add useful extension functions
> ### Aliases: initExtension
> 
> ### ** Examples
> 
> library(DBI)
> db <- RSQLite::datasetsDb()
> 
> # math
> RSQLite::initExtension(db)
> dbGetQuery(db, "SELECT stdev(mpg) FROM mtcars")
  stdev(mpg)
1   6.026948
> sd(mtcars$mpg)
[1] 6.026948
> 
> # regexp
> RSQLite::initExtension(db, "regexp")
> dbGetQuery(db, "SELECT * FROM mtcars WHERE carb REGEXP '[12]'")
           row_names  mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1         Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
2     Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
3  Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
4            Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
5          Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
6           Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
7           Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
8        Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
9     Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
10     Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
11  Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
12       AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
13  Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
14         Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
15     Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
16      Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
17        Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> 
> # series
> RSQLite::initExtension(db, "series")
> dbGetQuery(db, "SELECT value FROM generate_series(0, 20, 5);")
  value
1     0
2     5
3    10
4    15
5    20
> 
> dbDisconnect(db)
> 
> # csv
> db <- dbConnect(RSQLite::SQLite())
> RSQLite::initExtension(db, "csv")
> # use the filename argument to mount CSV files from disk
> sql <- paste0(
+   "CREATE VIRTUAL TABLE tbl USING ",
+   "csv(data='1,2', schema='CREATE TABLE x(a INT, b INT)')"
+ )
> dbExecute(db, sql)
[1] 0
> dbGetQuery(db, "SELECT * FROM tbl")
  a b
1 1 2
> 
> 
> 
> cleanEx()

detaching ‘package:DBI’

> nameEx("rsqliteVersion")
> ### * rsqliteVersion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rsqliteVersion
> ### Title: RSQLite version
> ### Aliases: rsqliteVersion
> 
> ### ** Examples
> 
> RSQLite::rsqliteVersion()
  header  library 
"3.46.0" "3.46.0" 
> 
> 
> 
> cleanEx()
> nameEx("sqlite-transaction")
> ### * sqlite-transaction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbBegin_SQLiteConnection
> ### Title: SQLite transaction management
> ### Aliases: dbBegin_SQLiteConnection dbBegin,SQLiteConnection-method
> ###   dbCommit_SQLiteConnection dbCommit,SQLiteConnection-method
> ###   dbRollback_SQLiteConnection dbRollback,SQLiteConnection-method
> ###   sqlite-transaction sqliteIsTransacting
> 
> ### ** Examples
> 
> library(DBI)
> con <- dbConnect(SQLite(), ":memory:")
> dbWriteTable(con, "arrests", datasets::USArrests)
> dbGetQuery(con, "select count(*) from arrests")
  count(*)
1       50
> 
> dbBegin(con)
> rs <- dbSendStatement(con, "DELETE from arrests WHERE Murder > 1")
> dbGetRowsAffected(rs)
[1] 49
> dbClearResult(rs)
> 
> dbGetQuery(con, "select count(*) from arrests")
  count(*)
1        1
> 
> dbRollback(con)
> dbGetQuery(con, "select count(*) from arrests")[1, ]
[1] 50
> 
> dbBegin(con)
> rs <- dbSendStatement(con, "DELETE FROM arrests WHERE Murder > 5")
> dbClearResult(rs)
> dbCommit(con)
> dbGetQuery(con, "SELECT count(*) FROM arrests")[1, ]
[1] 16
> 
> # Named savepoints can be nested --------------------------------------------
> dbBegin(con, name = "a")
> dbBegin(con, name = "b")
> sqliteIsTransacting(con)
[1] TRUE
> dbRollback(con, name = "b")
> dbCommit(con, name = "a")
> 
> dbDisconnect(con)
> 
> 
> 
> cleanEx()

detaching ‘package:DBI’

> nameEx("sqliteCopyDatabase")
> ### * sqliteCopyDatabase
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sqliteCopyDatabase
> ### Title: Copy a SQLite database
> ### Aliases: sqliteCopyDatabase
> 
> ### ** Examples
> 
> library(DBI)
> # Copy the built in databaseDb() to an in-memory database
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbListTables(con)
character(0)
> 
> db <- RSQLite::datasetsDb()
> RSQLite::sqliteCopyDatabase(db, con)
> dbDisconnect(db)
> dbListTables(con)
 [1] "BOD"              "CO2"              "ChickWeight"      "DNase"           
 [5] "Formaldehyde"     "Indometh"         "InsectSprays"     "LifeCycleSavings"
 [9] "Loblolly"         "Orange"           "OrchardSprays"    "PlantGrowth"     
[13] "Puromycin"        "Theoph"           "ToothGrowth"      "USArrests"       
[17] "USJudgeRatings"   "airquality"       "anscombe"         "attenu"          
[21] "attitude"         "cars"             "chickwts"         "esoph"           
[25] "faithful"         "freeny"           "infert"           "iris"            
[29] "longley"          "morley"           "mtcars"           "npk"             
[33] "pressure"         "quakes"           "randu"            "rock"            
[37] "sleep"            "stackloss"        "swiss"            "trees"           
[41] "warpbreaks"       "women"           
> 
> dbDisconnect(con)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:DBI’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.522 0.047 0.569 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
