
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "lubridate"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('lubridate')

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DateTimeUpdate")
> ### * DateTimeUpdate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DateTimeUpdate
> ### Title: Changes the components of a date object
> ### Aliases: DateTimeUpdate update.POSIXt
> ### Keywords: chron manip
> 
> ### ** Examples
> 
> date <- ymd("2009-02-10")
> update(date, year = 2010, month = 1, mday = 1)
[1] "2010-01-01"
> 
> update(date, year = 2010, month = 13, mday = 1)
[1] "2011-01-01"
> 
> update(date, minute = 10, second = 3)
[1] "2009-02-10 00:10:03 UTC"
> 
> 
> 
> cleanEx()
> nameEx("am")
> ### * am
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: am
> ### Title: Does date time occur in the am or pm?
> ### Aliases: am pm
> ### Keywords: chron
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> am(x)
[1] TRUE
> pm(x)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("as.duration")
> ### * as.duration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.duration
> ### Title: Change an object to a duration
> ### Aliases: as.duration as.duration,numeric-method
> ###   as.duration,logical-method as.duration,difftime-method
> ###   as.duration,Interval-method as.duration,Duration-method
> ###   as.duration,Period-method as.duration,character-method
> ### Keywords: chron classes manip methods
> 
> ### ** Examples
> 
> span <- interval(ymd("2009-01-01"), ymd("2009-08-01")) # interval
> as.duration(span)
[1] "18316800s (~30.29 weeks)"
> as.duration(10) # numeric
[1] "10s"
> dur <- duration(hours = 10, minutes = 6)
> as.numeric(dur, "hours")
[1] 10.1
> as.numeric(dur, "minutes")
[1] 606
> 
> 
> 
> cleanEx()
> nameEx("as.interval")
> ### * as.interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.interval
> ### Title: Change an object to an 'interval'
> ### Aliases: as.interval as.interval,numeric-method
> ###   as.interval,difftime-method as.interval,Interval-method
> ###   as.interval,Duration-method as.interval,Period-method
> ###   as.interval,POSIXt-method as.interval,logical-method
> ### Keywords: chron classes manip methods
> 
> ### ** Examples
> 
> diff <- make_difftime(days = 31) # difftime
> as.interval(diff, ymd("2009-01-01"))
[1] 2009-01-01 UTC--2009-02-01 UTC
> as.interval(diff, ymd("2009-02-01"))
[1] 2009-02-01 UTC--2009-03-04 UTC
> 
> dur <- duration(days = 31) # duration
> as.interval(dur, ymd("2009-01-01"))
[1] 2009-01-01 UTC--2009-02-01 UTC
> as.interval(dur, ymd("2009-02-01"))
[1] 2009-02-01 UTC--2009-03-04 UTC
> 
> per <- period(months = 1) # period
> as.interval(per, ymd("2009-01-01"))
[1] 2009-01-01 UTC--2009-02-01 UTC
> as.interval(per, ymd("2009-02-01"))
[1] 2009-02-01 UTC--2009-03-01 UTC
> 
> as.interval(3600, ymd("2009-01-01")) # numeric
[1] 2009-01-01 UTC--2018-11-10 UTC
> 
> 
> 
> cleanEx()
> nameEx("as.period")
> ### * as.period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.period
> ### Title: Change an object to a period
> ### Aliases: as.period as.period,numeric-method as.period,difftime-method
> ###   as.period,Interval-method as.period,Duration-method
> ###   as.period,Period-method as.period,logical-method
> ###   as.period,character-method
> ### Keywords: chron classes manip methods
> 
> ### ** Examples
> 
> span <- interval(ymd_hms("2009-01-01 00:00:00"), ymd_hms("2010-02-02 01:01:01")) # interval
> as.period(span)
[1] "1y 1m 1d 1H 1M 1S"
> as.period(span, unit = "day")
[1] "397d 1H 1M 1S"
> "397d 1H 1M 1S"
[1] "397d 1H 1M 1S"
> leap <- interval(ymd("2016-01-01"), ymd("2017-01-01"))
> as.period(leap, unit = "days")
[1] "366d 0H 0M 0S"
> as.period(leap, unit = "years")
[1] "1y 0m 0d 0H 0M 0S"
> dst <- interval(
+   ymd("2016-11-06", tz = "America/Chicago"),
+   ymd("2016-11-07", tz = "America/Chicago")
+ )
> # as.period(dst, unit = "seconds")
> as.period(dst, unit = "hours")
[1] "25H 0M 0S"
> per <- period(hours = 10, minutes = 6)
> as.numeric(per, "hours")
[1] 10.1
> as.numeric(per, "minutes")
[1] 606
> 
> 
> 
> cleanEx()
> nameEx("as_date")
> ### * as_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_date
> ### Title: Convert an object to a date or date-time
> ### Aliases: as_date as_date,ANY-method as_date,POSIXt-method
> ###   as_date,numeric-method as_date,character-method as_datetime
> ###   as_datetime,ANY-method as_datetime,POSIXt-method
> ###   as_datetime,numeric-method as_datetime,character-method
> ###   as_datetime,Date-method
> 
> ### ** Examples
> 
> dt_utc <- ymd_hms("2010-08-03 00:50:50")
> dt_europe <- ymd_hms("2010-08-03 00:50:50", tz = "Europe/London")
> c(as_date(dt_utc), as.Date(dt_utc))
[1] "2010-08-03" "2010-08-03"
> c(as_date(dt_europe), as.Date(dt_europe))
[1] "2010-08-03" "2010-08-02"
> ## need not supply origin
> as_date(10)
[1] "1970-01-11"
> ## Will replace invalid date format with NA
> dt_wrong <- c("2009-09-29", "2012-11-29", "2015-29-12")
> as_date(dt_wrong)
Warning:  1 failed to parse.
[1] "2009-09-29" "2012-11-29" NA          
> 
> 
> 
> cleanEx()
> nameEx("cyclic_encoding")
> ### * cyclic_encoding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cyclic_encoding
> ### Title: Cyclic encoding of date-times
> ### Aliases: cyclic_encoding
> 
> ### ** Examples
> 
> 
> times <- ymd_hms("2019-01-01 00:00:00") + hours(0:23)
> cyclic_encoding(times, c("day", "week", "month"))
            sin.day       cos.day  sin.week   cos.week   sin.month cos.month
 [1,]  0.000000e+00  1.000000e+00 0.9749279 -0.2225209 0.000000000 1.0000000
 [2,]  2.588190e-01  9.659258e-01 0.9659258 -0.2588190 0.008445041 0.9999643
 [3,]  5.000000e-01  8.660254e-01 0.9555728 -0.2947552 0.016889480 0.9998574
 [4,]  7.071068e-01  7.071068e-01 0.9438833 -0.3302791 0.025332714 0.9996791
 [5,]  8.660254e-01  5.000000e-01 0.9308737 -0.3653410 0.033774142 0.9994295
 [6,]  9.659258e-01  2.588190e-01 0.9165623 -0.3998920 0.042213161 0.9991086
 [7,]  1.000000e+00 -1.608123e-16 0.9009689 -0.4338837 0.050649169 0.9987165
 [8,]  9.659258e-01 -2.588190e-01 0.8841154 -0.4672686 0.059081565 0.9982532
 [9,]  8.660254e-01 -5.000000e-01 0.8660254 -0.5000000 0.067509747 0.9977186
[10,]  7.071068e-01 -7.071068e-01 0.8467242 -0.5320321 0.075933114 0.9971129
[11,]  5.000000e-01 -8.660254e-01 0.8262388 -0.5633201 0.084351066 0.9964361
[12,]  2.588190e-01 -9.659258e-01 0.8045978 -0.5938202 0.092763002 0.9956882
[13,] -3.216245e-16 -1.000000e+00 0.7818315 -0.6234898 0.101168322 0.9948693
[14,] -2.588190e-01 -9.659258e-01 0.7579717 -0.6522874 0.109566427 0.9939795
[15,] -5.000000e-01 -8.660254e-01 0.7330519 -0.6801727 0.117956717 0.9930187
[16,] -7.071068e-01 -7.071068e-01 0.7071068 -0.7071068 0.126338595 0.9919872
[17,] -8.660254e-01 -5.000000e-01 0.6801727 -0.7330519 0.134711462 0.9908849
[18,] -9.659258e-01 -2.588190e-01 0.6522874 -0.7579717 0.143074722 0.9897119
[19,] -1.000000e+00 -1.836970e-16 0.6234898 -0.7818315 0.151427778 0.9884683
[20,] -9.659258e-01  2.588190e-01 0.5938202 -0.8045978 0.159770033 0.9871543
[21,] -8.660254e-01  5.000000e-01 0.5633201 -0.8262388 0.168100894 0.9857698
[22,] -7.071068e-01  7.071068e-01 0.5320321 -0.8467242 0.176419766 0.9843150
[23,] -5.000000e-01  8.660254e-01 0.5000000 -0.8660254 0.184726056 0.9827901
[24,] -2.588190e-01  9.659258e-01 0.4672686 -0.8841154 0.193019171 0.9811950
> plot(cyclic_encoding(times, "1d"))
> plot(cyclic_encoding(times, "2d"), xlim = c(-1, 1))
> plot(cyclic_encoding(times, "4d"), xlim = c(-1, 1))
> 
> 
> 
> cleanEx()
> nameEx("date")
> ### * date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: date
> ### Title: Get/set date component of a date-time
> ### Aliases: date date<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- ymd_hms("2012-03-26 23:12:13", tz = "America/New_York")
> date(x)
[1] "2012-03-26"
> as.Date(x) # by default as.Date assumes you want to know the date in UTC
[1] "2012-03-27"
> as.Date(x, tz = "America/New_York")
[1] "2012-03-26"
> date(x) <- as.Date("2000-01-02")
> x
[1] "2000-01-02 23:12:13 EST"
> 
> 
> 
> cleanEx()
> nameEx("date_decimal")
> ### * date_decimal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: date_decimal
> ### Title: Converts a decimal to a date
> ### Aliases: date_decimal
> ### Keywords: chron manip methods
> 
> ### ** Examples
> 
> date <- ymd("2009-02-10")
> decimal <- decimal_date(date) # 2009.11
> date_decimal(decimal) # "2009-02-10 UTC"
[1] "2009-02-10 UTC"
> 
> 
> 
> cleanEx()
> nameEx("date_utils")
> ### * date_utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.Date
> ### Title: Various date utilities
> ### Aliases: is.Date Date NA_Date_
> ### Keywords: chron datasets logic
> 
> ### ** Examples
> 
> is.Date(as.Date("2009-08-03")) # TRUE
[1] TRUE
> is.Date(difftime(now() + 5, now())) # FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("day")
> ### * day
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: day
> ### Title: Get/set days component of a date-time
> ### Aliases: day mday wday qday yday day<- mday<- qday<- wday<- yday<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- as.Date("2009-09-02")
> wday(x) # 4
[1] 4
> wday(x, label = TRUE) # Wed
[1] Wed
Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
> 
> wday(x, week_start = 1) # 3
[1] 3
> wday(x, week_start = 7) # 4
[1] 4
> 
> wday(x, label = TRUE, week_start = 7) # Wed (Sun is the first level)
[1] Wed
Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
> wday(x, label = TRUE, week_start = 1) # Wed (Mon is the first level)
[1] Wed
Levels: Mon < Tue < Wed < Thu < Fri < Sat < Sun
> 
> wday(ymd(080101))
[1] 3
> wday(ymd(080101), label = TRUE, abbr = FALSE)
[1] Tuesday
7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday
> wday(ymd(080101), label = TRUE, abbr = TRUE)
[1] Tue
Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
> wday(ymd(080101) + days(-2:4), label = TRUE, abbr = TRUE)
[1] Sun Mon Tue Wed Thu Fri Sat
Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
> 
> x <- as.Date("2009-09-02")
> yday(x) # 245
[1] 245
> mday(x) # 2
[1] 2
> yday(x) <- 1 # "2009-01-01"
> yday(x) <- 366 # "2010-01-01"
> mday(x) > 3
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("decimal_date")
> ### * decimal_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: decimal_date
> ### Title: Converts a date to a decimal of its year
> ### Aliases: decimal_date
> ### Keywords: chron manip methods
> 
> ### ** Examples
> 
> date <- ymd("2009-02-10")
> decimal_date(date) # 2009.11
[1] 2009.11
> 
> 
> 
> cleanEx()
> nameEx("dst")
> ### * dst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dst
> ### Title: Get *d*aylight *s*avings *t*ime indicator of a date-time
> ### Aliases: dst
> ### Keywords: chron methods utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> dst(x)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("duration")
> ### * duration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: duration
> ### Title: Create a duration object.
> ### Aliases: duration dseconds dminutes dhours ddays dweeks dmonths dyears
> ###   dmilliseconds dmicroseconds dnanoseconds dpicoseconds is.duration
> ### Keywords: chron classes
> 
> ### ** Examples
> 
> 
> ### Separate period and units vectors
> 
> duration(90, "seconds")
[1] "90s (~1.5 minutes)"
> duration(1.5, "minutes")
[1] "90s (~1.5 minutes)"
> duration(-1, "days")
[1] "-86400s (~-1 days)"
> 
> ### Units as arguments
> 
> duration(day = -1)
[1] "-86400s (~-1 days)"
> duration(second = 90)
[1] "90s (~1.5 minutes)"
> duration(minute = 1.5)
[1] "90s (~1.5 minutes)"
> duration(mins = 1.5)
[1] "90s (~1.5 minutes)"
> duration(second = 3, minute = 1.5, hour = 2, day = 6, week = 1)
[1] "1130493s (~1.87 weeks)"
> duration(hour = 1, minute = -60)
[1] "0s"
> 
> ### Parsing
> 
> duration("2M 1sec")
[1] "121s (~2.02 minutes)"
> duration("2hours 2minutes 1second")
[1] "7321s (~2.03 hours)"
> duration("2d 2H 2M 2S")
[1] "180122s (~2.08 days)"
> duration("2days 2hours 2mins 2secs")
[1] "180122s (~2.08 days)"
> # Missing numerals default to 1. Repeated units are added up.
> duration("day day")
[1] "172800s (~2 days)"
> 
> ### ISO 8601 parsing
> 
> duration("P3Y6M4DT12H30M5S")
[1] "110842205s (~3.51 years)"
> duration("P23DT23H") # M stands for months
[1] "2070000s (~3.42 weeks)"
> duration("10DT10M") # M stands for minutes
[1] "864600s (~1.43 weeks)"
> duration("P23DT60H 20min 100 sec") # mixing ISO and lubridate style parsing
[1] "2204500s (~3.65 weeks)"
> 
> # Comparison with characters (from v1.6.0)
> 
> duration("day 2 sec") > "day 1sec"
[1] TRUE
> 
> 
> ## ELEMENTARY CONSTRUCTORS:
> 
> dseconds(1)
[1] "1s"
> dminutes(3.5)
[1] "210s (~3.5 minutes)"
> 
> x <- ymd("2009-08-03", tz = "America/Chicago")
> x + ddays(1) + dhours(6) + dminutes(30)
[1] "2009-08-04 06:30:00 CDT"
> x + ddays(100) - dhours(8)
[1] "2009-11-10 15:00:00 CST"
> 
> class(as.Date("2009-08-09") + ddays(1)) # retains Date class
[1] "Date"
> as.Date("2009-08-09") + dhours(12)
[1] "2009-08-09 12:00:00 UTC"
> class(as.Date("2009-08-09") + dhours(12))
[1] "POSIXct" "POSIXt" 
> # converts to POSIXt class to accomodate time units
> 
> dweeks(1) - ddays(7)
[1] "0s"
> c(1:3) * dhours(1)
[1] "3600s (~1 hours)"  "7200s (~2 hours)"  "10800s (~3 hours)"
> 
> # compare DST handling to durations
> boundary <- ymd_hms("2009-03-08 01:59:59", tz = "America/Chicago")
> boundary + days(1) # period
[1] "2009-03-09 01:59:59 CDT"
> boundary + ddays(1) # duration
[1] "2009-03-09 02:59:59 CDT"
> is.duration(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.duration(duration(days = 12.4)) # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("fit_to_timeline")
> ### * fit_to_timeline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_to_timeline
> ### Title: Fit a POSIXlt date-time to the timeline
> ### Aliases: fit_to_timeline
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D tricky <- structure(list(
> ##D   sec = c(5, 0, 0, -1),
> ##D   min = c(0L, 5L, 5L, 0L),
> ##D   hour = c(2L, 0L, 2L, 2L),
> ##D   mday = c(4L, 4L, 14L, 4L),
> ##D   mon = c(10L, 10L, 2L, 10L),
> ##D   year = c(112L, 112L, 110L, 112L),
> ##D   wday = c(0L, 0L, 0L, 0L),
> ##D   yday = c(308L, 308L, 72L, 308L),
> ##D   isdst = c(1L, 0L, 0L, 1L)
> ##D ),
> ##D .Names = c(
> ##D   "sec", "min", "hour", "mday", "mon",
> ##D   "year", "wday", "yday", "isdst"
> ##D ),
> ##D class = c("POSIXlt", "POSIXt"),
> ##D tzone = c("America/Chicago", "CST", "CDT")
> ##D )
> ##D 
> ##D tricky
> ##D ## [1] "2012-11-04 02:00:00 CDT" Doesn't exist because clocks "fall back" to 1:00 CST
> ##D ## [2] "2012-11-04 00:05:00 CST" Times are still CDT, not CST at this instant
> ##D ## [3] "2010-03-14 02:00:00 CDT" DST gap
> ##D ## [4] "2012-11-04 01:59:59 CDT" Does exist, but has deceptive internal structure
> ##D 
> ##D fit_to_timeline(tricky)
> ##D ## Returns:
> ##D ## [1] "2012-11-04 02:00:00 CST" instant paired with correct tz & DST combination
> ##D ## [2] "2012-11-04 00:05:00 CDT" instant paired with correct tz & DST combination
> ##D ## [3] NA - fake time changed to NA (compare to as.POSIXct(tricky))
> ##D ## [4] "2012-11-04 01:59:59 CDT" -real instant, left as is
> ##D 
> ##D fit_to_timeline(tricky, simple = TRUE)
> ##D ## Returns valid time-dates by extrapolating CDT and CST zones:
> ##D ## [1] "2012-11-04 01:00:05 CST" "2012-11-04 01:05:00 CDT"
> ##D ## [3] "2010-03-14 03:05:00 CDT" "2012-11-04 01:59:59 CDT"
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("force_tz")
> ### * force_tz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: force_tz
> ### Title: Replace time zone to create new date-time
> ### Aliases: force_tz force_tz.default force_tzs
> ### Keywords: chron manip
> 
> ### ** Examples
> 
> x <- ymd_hms("2009-08-07 00:00:01", tz = "America/New_York")
> force_tz(x, "UTC")
[1] "2009-08-07 00:00:01 UTC"
> force_tz(x, "Europe/Amsterdam")
[1] "2009-08-07 00:00:01 CEST"
> 
> ## DST skip:
> y <- ymd_hms("2010-03-14 02:05:05 UTC")
> force_tz(y, "America/New_York", roll_dst = "NA")
[1] NA
> force_tz(y, "America/New_York", roll_dst = "pre")
[1] "2010-03-14 01:05:05 EST"
> force_tz(y, "America/New_York", roll_dst = "boundary")
[1] "2010-03-14 03:00:00 EDT"
> force_tz(y, "America/New_York", roll_dst = "post")
[1] "2010-03-14 03:05:05 EDT"
> 
> ## DST repeat
> y <- ymd_hms("2014-11-02 01:35:00", tz = "UTC")
> force_tz(y, "America/New_York", roll_dst = "NA")
[1] NA
> force_tz(y, "America/New_York", roll_dst = "pre")
[1] "2014-11-02 01:35:00 EDT"
> force_tz(y, "America/New_York", roll_dst = "boundary")
[1] "2014-11-02 01:00:00 EST"
> force_tz(y, "America/New_York", roll_dst = "post")
[1] "2014-11-02 01:35:00 EST"
> 
> ## DST skipped and repeated
> y <- ymd_hms("2010-03-14 02:05:05 UTC", "2014-11-02 01:35:00", tz = "UTC")
> force_tz(y, "America/New_York", roll_dst = c("NA", "pre"))
[1] NA                        "2014-11-02 01:35:00 EDT"
> force_tz(y, "America/New_York", roll_dst = c("boundary", "post"))
[1] "2010-03-14 03:00:00 EDT" "2014-11-02 01:35:00 EST"
> 
> ## Heterogeneous time-zones:
> 
> x <- ymd_hms(c("2009-08-07 00:00:01", "2009-08-07 01:02:03"))
> force_tzs(x, tzones = c("America/New_York", "Europe/Amsterdam"))
[1] "2009-08-07 04:00:01 UTC" "2009-08-06 23:02:03 UTC"
> force_tzs(x, tzones = c("America/New_York", "Europe/Amsterdam"), tzone_out = "America/New_York")
[1] "2009-08-07 00:00:01 EDT" "2009-08-06 19:02:03 EDT"
> 
> x <- ymd_hms("2009-08-07 00:00:01")
> force_tzs(x, tzones = c("America/New_York", "Europe/Amsterdam"))
[1] "2009-08-07 04:00:01 UTC" "2009-08-06 22:00:01 UTC"
> 
> 
> 
> cleanEx()
> nameEx("format_ISO8601")
> ### * format_ISO8601
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: format_ISO8601
> ### Title: Format in ISO8601 character format
> ### Aliases: format_ISO8601 format_ISO8601,Date-method
> ###   format_ISO8601,POSIXt-method format_ISO8601,Interval-method
> ###   format_ISO8601,Duration-method format_ISO8601,Period-method
> 
> ### ** Examples
> 
> format_ISO8601(as.Date("02-01-2018", format = "%m-%d-%Y"))
[1] "2018-02-01"
> format_ISO8601(as.POSIXct("2018-02-01 03:04:05", tz = "EST"), usetz = TRUE)
[1] "2018-02-01T03:04:05-0500"
> format_ISO8601(as.POSIXct("2018-02-01 03:04:05", tz = "EST"), precision = "ymdhm")
[1] "2018-02-01T03:04"
> 
> 
> 
> cleanEx()
> nameEx("guess_formats")
> ### * guess_formats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: guess_formats
> ### Title: Guess possible date-times formats from a character vector
> ### Aliases: guess_formats
> 
> ### ** Examples
> 
> 
> x <- c('February 20th 1973',
+        "february  14, 2004",
+        "Sunday, May 1, 2000",
+        "Sunday, May 1, 2000",
+        "february  14, 04",
+        'Feb 20th 73',
+        "January 5 1999 at 7pm",
+        "jan 3 2010",
+        "Jan 1, 1999",
+        "jan 3   10",
+        "01 3 2010",
+        "1 3 10",
+        '1 13 89',
+        "5/27/1979",
+        "12/31/99",
+        "DOB:12/11/00",
+        "-----------",
+        'Thu, 1 July 2004 22:30:00',
+        'Thu, 1st of July 2004 at 22:30:00',
+        'Thu, 1July 2004 at 22:30:00',
+        'Thu, 1July2004 22:30:00',
+        'Thu, 1July04 22:30:00',
+        "21 Aug 2011, 11:15:34 pm",
+        "-----------",
+        "1979-05-27 05:00:59",
+        "1979-05-27",
+        "-----------",
+        "3 jan 2000",
+        "17 april 85",
+        "27/5/1979",
+        '20 01 89',
+        '00/13/10',
+        "-------",
+        "14 12 00",
+        "03:23:22 pm")
> 
> guess_formats(x, "BdY")
                ObdY                 ObdY                 ObdY 
       "%Ob %dth %Y"        "%Ob  %d, %Y"     "%A, %Ob %d, %Y" 
                ObdY                 ObdY                 ObdY 
    "%A, %Ob %d, %Y"          "%Ob %d %Y"         "%Ob %d, %Y" 
                 BdY                  BdY                  BdY 
        "%B %dth %Y"         "%B  %d, %Y"      "%A, %B %d, %Y" 
                 BdY                 ObdY                 ObdY 
     "%A, %B %d, %Y"        "%Ob %dth %Y"        "%Ob  %d, %Y" 
                ObdY                 ObdY                 ObdY 
"Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"          "%Ob %d %Y" 
                ObdY                  BdY                  BdY 
        "%Ob %d, %Y"         "%B %dth %Y"         "%B  %d, %Y" 
                 BdY                  BdY 
 "Sunday, %B %d, %Y"  "Sunday, %B %d, %Y" 
> guess_formats(x, "Bdy")
                Obdy                 Obdy                 Obdy 
       "%Ob %dth %Y"        "%Ob  %d, %Y"     "%A, %Ob %d, %Y" 
                Obdy                 Obdy                 Obdy 
    "%A, %Ob %d, %Y"        "%Ob  %d, %y"        "%Ob %dth %y" 
                Obdy                 Obdy                 Obdy 
         "%Ob %d %Y"         "%Ob %d, %Y"        "%Ob %d   %y" 
                 Bdy                  Bdy                  Bdy 
        "%B %dth %Y"         "%B  %d, %Y"      "%A, %B %d, %Y" 
                 Bdy                  Bdy                 Obdy 
     "%A, %B %d, %Y"         "%B  %d, %y"        "%Ob %dth %Y" 
                Obdy                 Obdy                 Obdy 
       "%Ob  %d, %Y" "Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y" 
                Obdy                 Obdy                 Obdy 
       "%Ob  %d, %y"        "%Ob %dth %y"          "%Ob %d %Y" 
                Obdy                 Obdy                  Bdy 
        "%Ob %d, %Y"        "%Ob %d   %y"         "%B %dth %Y" 
                 Bdy                  Bdy                  Bdy 
        "%B  %d, %Y"  "Sunday, %B %d, %Y"  "Sunday, %B %d, %Y" 
                 Bdy 
        "%B  %d, %y" 
> ## m also matches b and B; y also matches Y
> guess_formats(x, "mdy", print_matches = TRUE)
                                          Omdy                
 [1,] "February 20th 1973"                "%Om %dth %Y"       
 [2,] "february  14, 2004"                "%Om  %d, %Y"       
 [3,] "Sunday, May 1, 2000"               "Sunday, %Om %d, %Y"
 [4,] "Sunday, May 1, 2000"               "Sunday, %Om %d, %Y"
 [5,] "february  14, 04"                  "%Om  %d, %y"       
 [6,] "Feb 20th 73"                       "%Om %dth %y"       
 [7,] "January 5 1999 at 7pm"             ""                  
 [8,] "jan 3 2010"                        "%Om %d %Y"         
 [9,] "Jan 1, 1999"                       "%Om %d, %Y"        
[10,] "jan 3   10"                        "%Om %d   %y"       
[11,] "01 3 2010"                         "%Om %d %Y"         
[12,] "1 3 10"                            "%Om %d %y"         
[13,] "1 13 89"                           "%Om %d %y"         
[14,] "5/27/1979"                         "%Om/%d/%Y"         
[15,] "12/31/99"                          "%Om/%d/%y"         
[16,] "DOB:12/11/00"                      "DOB:%Om/%d/%y"     
[17,] "-----------"                       ""                  
[18,] "Thu, 1 July 2004 22:30:00"         ""                  
[19,] "Thu, 1st of July 2004 at 22:30:00" ""                  
[20,] "Thu, 1July 2004 at 22:30:00"       ""                  
[21,] "Thu, 1July2004 22:30:00"           ""                  
[22,] "Thu, 1July04 22:30:00"             ""                  
[23,] "21 Aug 2011, 11:15:34 pm"          ""                  
[24,] "-----------"                       ""                  
[25,] "1979-05-27 05:00:59"               ""                  
[26,] "1979-05-27"                        ""                  
[27,] "-----------"                       ""                  
[28,] "3 jan 2000"                        ""                  
[29,] "17 april 85"                       ""                  
[30,] "27/5/1979"                         ""                  
[31,] "20 01 89"                          ""                  
[32,] "00/13/10"                          ""                  
[33,] "-------"                           ""                  
[34,] "14 12 00"                          ""                  
[35,] "03:23:22 pm"                       "%Om:%d:%y pm"      
      mdy                
 [1,] "%B %dth %Y"       
 [2,] "%B  %d, %Y"       
 [3,] "Sunday, %b %d, %Y"
 [4,] "Sunday, %b %d, %Y"
 [5,] "%B  %d, %y"       
 [6,] "%b %dth %y"       
 [7,] ""                 
 [8,] "%b %d %Y"         
 [9,] "%b %d, %Y"        
[10,] "%b %d   %y"       
[11,] "%m %d %Y"         
[12,] "%m %d %y"         
[13,] "%m %d %y"         
[14,] "%m/%d/%Y"         
[15,] "%m/%d/%y"         
[16,] "DOB:%m/%d/%y"     
[17,] ""                 
[18,] ""                 
[19,] ""                 
[20,] ""                 
[21,] ""                 
[22,] ""                 
[23,] ""                 
[24,] ""                 
[25,] ""                 
[26,] ""                 
[27,] ""                 
[28,] ""                 
[29,] ""                 
[30,] ""                 
[31,] ""                 
[32,] ""                 
[33,] ""                 
[34,] ""                 
[35,] "%m:%d:%y pm"      
                Omdy                 Omdy                 Omdy 
       "%Om %dth %Y"        "%Om  %d, %Y"     "%A, %Om %d, %Y" 
                Omdy                 Omdy                 Omdy 
    "%A, %Om %d, %Y"        "%Om  %d, %y"        "%Om %dth %y" 
                Omdy                 Omdy                 Omdy 
         "%Om %d %Y"         "%Om %d, %Y"        "%Om %d   %y" 
                Omdy                 Omdy                 Omdy 
         "%Om %d %Y"          "%Om %d %y"          "%Om %d %y" 
                Omdy                 Omdy                 Omdy 
         "%Om/%d/%Y"          "%Om/%d/%y"      "DOB:%Om/%d/%y" 
                Omdy                  mdy                  mdy 
      "%Om:%d:%y pm"         "%B %dth %Y"         "%B  %d, %Y" 
                 mdy                  mdy                  mdy 
     "%A, %b %d, %Y"      "%A, %b %d, %Y"         "%B  %d, %y" 
                 mdy                  mdy                  mdy 
        "%b %dth %y"           "%b %d %Y"          "%b %d, %Y" 
                 mdy                  mdy                  mdy 
        "%b %d   %y"           "%m %d %Y"           "%m %d %y" 
                 mdy                  mdy                  mdy 
          "%m %d %y"           "%m/%d/%Y"           "%m/%d/%y" 
                 mdy                  mdy                 Omdy 
      "DOB:%m/%d/%y"        "%m:%d:%y pm"        "%Om %dth %Y" 
                Omdy                 Omdy                 Omdy 
       "%Om  %d, %Y" "Sunday, %Om %d, %Y" "Sunday, %Om %d, %Y" 
                Omdy                 Omdy                 Omdy 
       "%Om  %d, %y"        "%Om %dth %y"          "%Om %d %Y" 
                Omdy                 Omdy                 Omdy 
        "%Om %d, %Y"        "%Om %d   %y"          "%Om %d %Y" 
                Omdy                 Omdy                 Omdy 
         "%Om %d %y"          "%Om %d %y"          "%Om/%d/%Y" 
                Omdy                 Omdy                 Omdy 
         "%Om/%d/%y"      "DOB:%Om/%d/%y"       "%Om:%d:%y pm" 
                 mdy                  mdy                  mdy 
        "%B %dth %Y"         "%B  %d, %Y"  "Sunday, %b %d, %Y" 
                 mdy                  mdy                  mdy 
 "Sunday, %b %d, %Y"         "%B  %d, %y"         "%b %dth %y" 
                 mdy                  mdy                  mdy 
          "%b %d %Y"          "%b %d, %Y"         "%b %d   %y" 
                 mdy                  mdy                  mdy 
          "%m %d %Y"           "%m %d %y"           "%m %d %y" 
                 mdy                  mdy                  mdy 
          "%m/%d/%Y"           "%m/%d/%y"       "DOB:%m/%d/%y" 
                 mdy 
       "%m:%d:%y pm" 
> 
> ## T also matches IMSp order
> guess_formats(x, "T", print_matches = TRUE)
                                          HMSOp          T                   
 [1,] "February 20th 1973"                ""             ""                  
 [2,] "february  14, 2004"                ""             "february  %H, %M%S"
 [3,] "Sunday, May 1, 2000"               ""             ""                  
 [4,] "Sunday, May 1, 2000"               ""             ""                  
 [5,] "february  14, 04"                  ""             ""                  
 [6,] "Feb 20th 73"                       ""             ""                  
 [7,] "January 5 1999 at 7pm"             ""             ""                  
 [8,] "jan 3 2010"                        ""             ""                  
 [9,] "Jan 1, 1999"                       ""             ""                  
[10,] "jan 3   10"                        ""             ""                  
[11,] "01 3 2010"                         ""             ""                  
[12,] "1 3 10"                            ""             "%H %M %S"          
[13,] "1 13 89"                           ""             ""                  
[14,] "5/27/1979"                         ""             ""                  
[15,] "12/31/99"                          ""             ""                  
[16,] "DOB:12/11/00"                      ""             "DOB:%H/%M/%S"      
[17,] "-----------"                       ""             ""                  
[18,] "Thu, 1 July 2004 22:30:00"         ""             ""                  
[19,] "Thu, 1st of July 2004 at 22:30:00" ""             ""                  
[20,] "Thu, 1July 2004 at 22:30:00"       ""             ""                  
[21,] "Thu, 1July2004 22:30:00"           ""             ""                  
[22,] "Thu, 1July04 22:30:00"             ""             ""                  
[23,] "21 Aug 2011, 11:15:34 pm"          ""             ""                  
[24,] "-----------"                       ""             ""                  
[25,] "1979-05-27 05:00:59"               ""             ""                  
[26,] "1979-05-27"                        ""             ""                  
[27,] "-----------"                       ""             ""                  
[28,] "3 jan 2000"                        ""             ""                  
[29,] "17 april 85"                       ""             ""                  
[30,] "27/5/1979"                         ""             ""                  
[31,] "20 01 89"                          ""             ""                  
[32,] "00/13/10"                          ""             "%H/%M/%S"          
[33,] "-------"                           ""             ""                  
[34,] "14 12 00"                          ""             "%H %M %S"          
[35,] "03:23:22 pm"                       "%H:%M:%S %Op" "%I:%M:%S %p"       
               HMSOp                    T                    T 
      "%H:%M:%S %Op" "february  %H, %M%S"           "%H %M %S" 
                   T                    T                    T 
      "DOB:%H/%M/%S"           "%H/%M/%S"           "%H %M %S" 
                   T 
       "%I:%M:%S %p" 
> 
> ## b and B are equivalent and match, both, abreviated and full names
> guess_formats(x, c("mdY", "BdY", "Bdy", "bdY", "bdy"), print_matches = TRUE)
                                          ObdY                
 [1,] "February 20th 1973"                "%Ob %dth %Y"       
 [2,] "february  14, 2004"                "%Ob  %d, %Y"       
 [3,] "Sunday, May 1, 2000"               "Sunday, %Ob %d, %Y"
 [4,] "Sunday, May 1, 2000"               "Sunday, %Ob %d, %Y"
 [5,] "february  14, 04"                  ""                  
 [6,] "Feb 20th 73"                       ""                  
 [7,] "January 5 1999 at 7pm"             ""                  
 [8,] "jan 3 2010"                        "%Ob %d %Y"         
 [9,] "Jan 1, 1999"                       "%Ob %d, %Y"        
[10,] "jan 3   10"                        ""                  
[11,] "01 3 2010"                         ""                  
[12,] "1 3 10"                            ""                  
[13,] "1 13 89"                           ""                  
[14,] "5/27/1979"                         ""                  
[15,] "12/31/99"                          ""                  
[16,] "DOB:12/11/00"                      ""                  
[17,] "-----------"                       ""                  
[18,] "Thu, 1 July 2004 22:30:00"         ""                  
[19,] "Thu, 1st of July 2004 at 22:30:00" ""                  
[20,] "Thu, 1July 2004 at 22:30:00"       ""                  
[21,] "Thu, 1July2004 22:30:00"           ""                  
[22,] "Thu, 1July04 22:30:00"             ""                  
[23,] "21 Aug 2011, 11:15:34 pm"          ""                  
[24,] "-----------"                       ""                  
[25,] "1979-05-27 05:00:59"               ""                  
[26,] "1979-05-27"                        ""                  
[27,] "-----------"                       ""                  
[28,] "3 jan 2000"                        ""                  
[29,] "17 april 85"                       ""                  
[30,] "27/5/1979"                         ""                  
[31,] "20 01 89"                          ""                  
[32,] "00/13/10"                          ""                  
[33,] "-------"                           ""                  
[34,] "14 12 00"                          ""                  
[35,] "03:23:22 pm"                       ""                  
      Obdy                 ObdY                 Obdy                
 [1,] "%Ob %dth %Y"        "%Ob %dth %Y"        "%Ob %dth %Y"       
 [2,] "%Ob  %d, %Y"        "%Ob  %d, %Y"        "%Ob  %d, %Y"       
 [3,] "Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"
 [4,] "Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"
 [5,] "%Ob  %d, %y"        ""                   "%Ob  %d, %y"       
 [6,] "%Ob %dth %y"        ""                   "%Ob %dth %y"       
 [7,] ""                   ""                   ""                  
 [8,] "%Ob %d %Y"          "%Ob %d %Y"          "%Ob %d %Y"         
 [9,] "%Ob %d, %Y"         "%Ob %d, %Y"         "%Ob %d, %Y"        
[10,] "%Ob %d   %y"        ""                   "%Ob %d   %y"       
[11,] ""                   ""                   ""                  
[12,] ""                   ""                   ""                  
[13,] ""                   ""                   ""                  
[14,] ""                   ""                   ""                  
[15,] ""                   ""                   ""                  
[16,] ""                   ""                   ""                  
[17,] ""                   ""                   ""                  
[18,] ""                   ""                   ""                  
[19,] ""                   ""                   ""                  
[20,] ""                   ""                   ""                  
[21,] ""                   ""                   ""                  
[22,] ""                   ""                   ""                  
[23,] ""                   ""                   ""                  
[24,] ""                   ""                   ""                  
[25,] ""                   ""                   ""                  
[26,] ""                   ""                   ""                  
[27,] ""                   ""                   ""                  
[28,] ""                   ""                   ""                  
[29,] ""                   ""                   ""                  
[30,] ""                   ""                   ""                  
[31,] ""                   ""                   ""                  
[32,] ""                   ""                   ""                  
[33,] ""                   ""                   ""                  
[34,] ""                   ""                   ""                  
[35,] ""                   ""                   ""                  
      OmdY                 mdY                 BdY                
 [1,] "%Om %dth %Y"        "%B %dth %Y"        "%B %dth %Y"       
 [2,] "%Om  %d, %Y"        "%B  %d, %Y"        "%B  %d, %Y"       
 [3,] "Sunday, %Om %d, %Y" "Sunday, %b %d, %Y" "Sunday, %B %d, %Y"
 [4,] "Sunday, %Om %d, %Y" "Sunday, %b %d, %Y" "Sunday, %B %d, %Y"
 [5,] ""                   ""                  ""                 
 [6,] ""                   ""                  ""                 
 [7,] ""                   ""                  ""                 
 [8,] "%Om %d %Y"          "%b %d %Y"          ""                 
 [9,] "%Om %d, %Y"         "%b %d, %Y"         ""                 
[10,] ""                   ""                  ""                 
[11,] "%Om %d %Y"          "%m %d %Y"          ""                 
[12,] ""                   ""                  ""                 
[13,] ""                   ""                  ""                 
[14,] "%Om/%d/%Y"          "%m/%d/%Y"          ""                 
[15,] ""                   ""                  ""                 
[16,] ""                   ""                  ""                 
[17,] ""                   ""                  ""                 
[18,] ""                   ""                  ""                 
[19,] ""                   ""                  ""                 
[20,] ""                   ""                  ""                 
[21,] ""                   ""                  ""                 
[22,] ""                   ""                  ""                 
[23,] ""                   ""                  ""                 
[24,] ""                   ""                  ""                 
[25,] ""                   ""                  ""                 
[26,] ""                   ""                  ""                 
[27,] ""                   ""                  ""                 
[28,] ""                   ""                  ""                 
[29,] ""                   ""                  ""                 
[30,] ""                   ""                  ""                 
[31,] ""                   ""                  ""                 
[32,] ""                   ""                  ""                 
[33,] ""                   ""                  ""                 
[34,] ""                   ""                  ""                 
[35,] ""                   ""                  ""                 
      Bdy                 bdY                 bdy                
 [1,] "%B %dth %Y"        "%B %dth %Y"        "%B %dth %Y"       
 [2,] "%B  %d, %Y"        "%B  %d, %Y"        "%B  %d, %Y"       
 [3,] "Sunday, %B %d, %Y" "Sunday, %b %d, %Y" "Sunday, %b %d, %Y"
 [4,] "Sunday, %B %d, %Y" "Sunday, %b %d, %Y" "Sunday, %b %d, %Y"
 [5,] "%B  %d, %y"        ""                  "%B  %d, %y"       
 [6,] ""                  ""                  "%b %dth %y"       
 [7,] ""                  ""                  ""                 
 [8,] ""                  "%b %d %Y"          "%b %d %Y"         
 [9,] ""                  "%b %d, %Y"         "%b %d, %Y"        
[10,] ""                  ""                  "%b %d   %y"       
[11,] ""                  ""                  ""                 
[12,] ""                  ""                  ""                 
[13,] ""                  ""                  ""                 
[14,] ""                  ""                  ""                 
[15,] ""                  ""                  ""                 
[16,] ""                  ""                  ""                 
[17,] ""                  ""                  ""                 
[18,] ""                  ""                  ""                 
[19,] ""                  ""                  ""                 
[20,] ""                  ""                  ""                 
[21,] ""                  ""                  ""                 
[22,] ""                  ""                  ""                 
[23,] ""                  ""                  ""                 
[24,] ""                  ""                  ""                 
[25,] ""                  ""                  ""                 
[26,] ""                  ""                  ""                 
[27,] ""                  ""                  ""                 
[28,] ""                  ""                  ""                 
[29,] ""                  ""                  ""                 
[30,] ""                  ""                  ""                 
[31,] ""                  ""                  ""                 
[32,] ""                  ""                  ""                 
[33,] ""                  ""                  ""                 
[34,] ""                  ""                  ""                 
[35,] ""                  ""                  ""                 
                ObdY                 ObdY                 ObdY 
       "%Ob %dth %Y"        "%Ob  %d, %Y"     "%A, %Ob %d, %Y" 
                ObdY                 ObdY                 ObdY 
    "%A, %Ob %d, %Y"          "%Ob %d %Y"         "%Ob %d, %Y" 
                Obdy                 Obdy                 Obdy 
       "%Ob %dth %Y"        "%Ob  %d, %Y"     "%A, %Ob %d, %Y" 
                Obdy                 Obdy                 Obdy 
    "%A, %Ob %d, %Y"        "%Ob  %d, %y"        "%Ob %dth %y" 
                Obdy                 Obdy                 Obdy 
         "%Ob %d %Y"         "%Ob %d, %Y"        "%Ob %d   %y" 
                ObdY                 ObdY                 ObdY 
       "%Ob %dth %Y"        "%Ob  %d, %Y"     "%A, %Ob %d, %Y" 
                ObdY                 ObdY                 ObdY 
    "%A, %Ob %d, %Y"          "%Ob %d %Y"         "%Ob %d, %Y" 
                Obdy                 Obdy                 Obdy 
       "%Ob %dth %Y"        "%Ob  %d, %Y"     "%A, %Ob %d, %Y" 
                Obdy                 Obdy                 Obdy 
    "%A, %Ob %d, %Y"        "%Ob  %d, %y"        "%Ob %dth %y" 
                Obdy                 Obdy                 Obdy 
         "%Ob %d %Y"         "%Ob %d, %Y"        "%Ob %d   %y" 
                OmdY                 OmdY                 OmdY 
       "%Om %dth %Y"        "%Om  %d, %Y"     "%A, %Om %d, %Y" 
                OmdY                 OmdY                 OmdY 
    "%A, %Om %d, %Y"          "%Om %d %Y"         "%Om %d, %Y" 
                OmdY                 OmdY                  mdY 
         "%Om %d %Y"          "%Om/%d/%Y"         "%B %dth %Y" 
                 mdY                  mdY                  mdY 
        "%B  %d, %Y"      "%A, %b %d, %Y"      "%A, %b %d, %Y" 
                 mdY                  mdY                  mdY 
          "%b %d %Y"          "%b %d, %Y"           "%m %d %Y" 
                 mdY                  BdY                  BdY 
          "%m/%d/%Y"         "%B %dth %Y"         "%B  %d, %Y" 
                 BdY                  BdY                  Bdy 
     "%A, %B %d, %Y"      "%A, %B %d, %Y"         "%B %dth %Y" 
                 Bdy                  Bdy                  Bdy 
        "%B  %d, %Y"      "%A, %B %d, %Y"      "%A, %B %d, %Y" 
                 Bdy                  bdY                  bdY 
        "%B  %d, %y"         "%B %dth %Y"         "%B  %d, %Y" 
                 bdY                  bdY                  bdY 
     "%A, %b %d, %Y"      "%A, %b %d, %Y"           "%b %d %Y" 
                 bdY                  bdy                  bdy 
         "%b %d, %Y"         "%B %dth %Y"         "%B  %d, %Y" 
                 bdy                  bdy                  bdy 
     "%A, %b %d, %Y"      "%A, %b %d, %Y"         "%B  %d, %y" 
                 bdy                  bdy                  bdy 
        "%b %dth %y"           "%b %d %Y"          "%b %d, %Y" 
                 bdy                 ObdY                 ObdY 
        "%b %d   %y"        "%Ob %dth %Y"        "%Ob  %d, %Y" 
                ObdY                 ObdY                 ObdY 
"Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"          "%Ob %d %Y" 
                ObdY                 Obdy                 Obdy 
        "%Ob %d, %Y"        "%Ob %dth %Y"        "%Ob  %d, %Y" 
                Obdy                 Obdy                 Obdy 
"Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"        "%Ob  %d, %y" 
                Obdy                 Obdy                 Obdy 
       "%Ob %dth %y"          "%Ob %d %Y"         "%Ob %d, %Y" 
                Obdy                 ObdY                 ObdY 
       "%Ob %d   %y"        "%Ob %dth %Y"        "%Ob  %d, %Y" 
                ObdY                 ObdY                 ObdY 
"Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"          "%Ob %d %Y" 
                ObdY                 Obdy                 Obdy 
        "%Ob %d, %Y"        "%Ob %dth %Y"        "%Ob  %d, %Y" 
                Obdy                 Obdy                 Obdy 
"Sunday, %Ob %d, %Y" "Sunday, %Ob %d, %Y"        "%Ob  %d, %y" 
                Obdy                 Obdy                 Obdy 
       "%Ob %dth %y"          "%Ob %d %Y"         "%Ob %d, %Y" 
                Obdy                 OmdY                 OmdY 
       "%Ob %d   %y"        "%Om %dth %Y"        "%Om  %d, %Y" 
                OmdY                 OmdY                 OmdY 
"Sunday, %Om %d, %Y" "Sunday, %Om %d, %Y"          "%Om %d %Y" 
                OmdY                 OmdY                 OmdY 
        "%Om %d, %Y"          "%Om %d %Y"          "%Om/%d/%Y" 
                 mdY                  mdY                  mdY 
        "%B %dth %Y"         "%B  %d, %Y"  "Sunday, %b %d, %Y" 
                 mdY                  mdY                  mdY 
 "Sunday, %b %d, %Y"           "%b %d %Y"          "%b %d, %Y" 
                 mdY                  mdY                  BdY 
          "%m %d %Y"           "%m/%d/%Y"         "%B %dth %Y" 
                 BdY                  BdY                  BdY 
        "%B  %d, %Y"  "Sunday, %B %d, %Y"  "Sunday, %B %d, %Y" 
                 Bdy                  Bdy                  Bdy 
        "%B %dth %Y"         "%B  %d, %Y"  "Sunday, %B %d, %Y" 
                 Bdy                  Bdy                  bdY 
 "Sunday, %B %d, %Y"         "%B  %d, %y"         "%B %dth %Y" 
                 bdY                  bdY                  bdY 
        "%B  %d, %Y"  "Sunday, %b %d, %Y"  "Sunday, %b %d, %Y" 
                 bdY                  bdY                  bdy 
          "%b %d %Y"          "%b %d, %Y"         "%B %dth %Y" 
                 bdy                  bdy                  bdy 
        "%B  %d, %Y"  "Sunday, %b %d, %Y"  "Sunday, %b %d, %Y" 
                 bdy                  bdy                  bdy 
        "%B  %d, %y"         "%b %dth %y"           "%b %d %Y" 
                 bdy                  bdy 
         "%b %d, %Y"         "%b %d   %y" 
> guess_formats(x, c("dmy", "dbY", "dBy", "dBY"), print_matches = TRUE)
                                          dObY        dOby        dObY       
 [1,] "February 20th 1973"                ""          ""          ""         
 [2,] "february  14, 2004"                ""          ""          ""         
 [3,] "Sunday, May 1, 2000"               ""          ""          ""         
 [4,] "Sunday, May 1, 2000"               ""          ""          ""         
 [5,] "february  14, 04"                  ""          ""          ""         
 [6,] "Feb 20th 73"                       ""          ""          ""         
 [7,] "January 5 1999 at 7pm"             ""          ""          ""         
 [8,] "jan 3 2010"                        ""          ""          ""         
 [9,] "Jan 1, 1999"                       ""          ""          ""         
[10,] "jan 3   10"                        ""          ""          ""         
[11,] "01 3 2010"                         ""          ""          ""         
[12,] "1 3 10"                            ""          ""          ""         
[13,] "1 13 89"                           ""          ""          ""         
[14,] "5/27/1979"                         ""          ""          ""         
[15,] "12/31/99"                          ""          ""          ""         
[16,] "DOB:12/11/00"                      ""          ""          ""         
[17,] "-----------"                       ""          ""          ""         
[18,] "Thu, 1 July 2004 22:30:00"         ""          ""          ""         
[19,] "Thu, 1st of July 2004 at 22:30:00" ""          ""          ""         
[20,] "Thu, 1July 2004 at 22:30:00"       ""          ""          ""         
[21,] "Thu, 1July2004 22:30:00"           ""          ""          ""         
[22,] "Thu, 1July04 22:30:00"             ""          ""          ""         
[23,] "21 Aug 2011, 11:15:34 pm"          ""          ""          ""         
[24,] "-----------"                       ""          ""          ""         
[25,] "1979-05-27 05:00:59"               ""          ""          ""         
[26,] "1979-05-27"                        ""          ""          ""         
[27,] "-----------"                       ""          ""          ""         
[28,] "3 jan 2000"                        "%d %Ob %Y" "%d %Ob %Y" "%d %Ob %Y"
[29,] "17 april 85"                       ""          "%d %Ob %y" ""         
[30,] "27/5/1979"                         ""          ""          ""         
[31,] "20 01 89"                          ""          ""          ""         
[32,] "00/13/10"                          ""          ""          ""         
[33,] "-------"                           ""          ""          ""         
[34,] "14 12 00"                          ""          ""          ""         
[35,] "03:23:22 pm"                       ""          ""          ""         
      dOmy            dmy            dbY        dBy        dBY
 [1,] ""              ""             ""         ""         "" 
 [2,] ""              ""             ""         ""         "" 
 [3,] ""              ""             ""         ""         "" 
 [4,] ""              ""             ""         ""         "" 
 [5,] ""              ""             ""         ""         "" 
 [6,] ""              ""             ""         ""         "" 
 [7,] ""              ""             ""         ""         "" 
 [8,] ""              ""             ""         ""         "" 
 [9,] ""              ""             ""         ""         "" 
[10,] ""              ""             ""         ""         "" 
[11,] "%d %Om %Y"     "%d %m %Y"     ""         ""         "" 
[12,] "%d %Om %y"     "%d %m %y"     ""         ""         "" 
[13,] ""              ""             ""         ""         "" 
[14,] ""              ""             ""         ""         "" 
[15,] ""              ""             ""         ""         "" 
[16,] "DOB:%d/%Om/%y" "DOB:%d/%m/%y" ""         ""         "" 
[17,] ""              ""             ""         ""         "" 
[18,] ""              ""             ""         ""         "" 
[19,] ""              ""             ""         ""         "" 
[20,] ""              ""             ""         ""         "" 
[21,] ""              ""             ""         ""         "" 
[22,] ""              ""             ""         ""         "" 
[23,] ""              ""             ""         ""         "" 
[24,] ""              ""             ""         ""         "" 
[25,] ""              ""             ""         ""         "" 
[26,] ""              ""             ""         ""         "" 
[27,] ""              ""             ""         ""         "" 
[28,] "%d %Om %Y"     "%d %b %Y"     "%d %b %Y" ""         "" 
[29,] "%d %Om %y"     "%d %B %y"     ""         "%d %B %y" "" 
[30,] "%d/%Om/%Y"     "%d/%m/%Y"     ""         ""         "" 
[31,] "%d %Om %y"     "%d %m %y"     ""         ""         "" 
[32,] ""              ""             ""         ""         "" 
[33,] ""              ""             ""         ""         "" 
[34,] "%d %Om %y"     "%d %m %y"     ""         ""         "" 
[35,] ""              ""             ""         ""         "" 
           dObY            dOby            dOby            dObY            dOmy 
    "%d %Ob %Y"     "%d %Ob %Y"     "%d %Ob %y"     "%d %Ob %Y"     "%d %Om %Y" 
           dOmy            dOmy            dOmy            dOmy            dOmy 
    "%d %Om %y" "DOB:%d/%Om/%y"     "%d %Om %Y"     "%d %Om %y"     "%d/%Om/%Y" 
           dOmy            dOmy             dmy             dmy             dmy 
    "%d %Om %y"     "%d %Om %y"      "%d %m %Y"      "%d %m %y"  "DOB:%d/%m/%y" 
            dmy             dmy             dmy             dmy             dmy 
     "%d %b %Y"      "%d %B %y"      "%d/%m/%Y"      "%d %m %y"      "%d %m %y" 
            dbY             dBy 
     "%d %b %Y"      "%d %B %y" 
> 
> 
> guess_formats(x, c("dBY HMS", "dbY HMS", "dmyHMS", "BdY H"), print_matches = TRUE)
                                          dObYHMS                          
 [1,] "February 20th 1973"                ""                               
 [2,] "february  14, 2004"                ""                               
 [3,] "Sunday, May 1, 2000"               ""                               
 [4,] "Sunday, May 1, 2000"               ""                               
 [5,] "february  14, 04"                  ""                               
 [6,] "Feb 20th 73"                       ""                               
 [7,] "January 5 1999 at 7pm"             ""                               
 [8,] "jan 3 2010"                        ""                               
 [9,] "Jan 1, 1999"                       ""                               
[10,] "jan 3   10"                        ""                               
[11,] "01 3 2010"                         ""                               
[12,] "1 3 10"                            ""                               
[13,] "1 13 89"                           ""                               
[14,] "5/27/1979"                         ""                               
[15,] "12/31/99"                          ""                               
[16,] "DOB:12/11/00"                      ""                               
[17,] "-----------"                       ""                               
[18,] "Thu, 1 July 2004 22:30:00"         "Thu, %d %Ob %Y %H:%M:%S"        
[19,] "Thu, 1st of July 2004 at 22:30:00" "Thu, %dst of %Ob %Y at %H:%M:%S"
[20,] "Thu, 1July 2004 at 22:30:00"       "Thu, %d%Ob %Y at %H:%M:%S"      
[21,] "Thu, 1July2004 22:30:00"           "Thu, %d%Ob%Y %H:%M:%S"          
[22,] "Thu, 1July04 22:30:00"             ""                               
[23,] "21 Aug 2011, 11:15:34 pm"          "%d %Ob %Y, %H:%M:%S pm"         
[24,] "-----------"                       ""                               
[25,] "1979-05-27 05:00:59"               ""                               
[26,] "1979-05-27"                        ""                               
[27,] "-----------"                       ""                               
[28,] "3 jan 2000"                        ""                               
[29,] "17 april 85"                       ""                               
[30,] "27/5/1979"                         ""                               
[31,] "20 01 89"                          ""                               
[32,] "00/13/10"                          ""                               
[33,] "-------"                           ""                               
[34,] "14 12 00"                          ""                               
[35,] "03:23:22 pm"                       ""                               
      dObYHMS                           ObdYH              
 [1,] ""                                ""                 
 [2,] ""                                ""                 
 [3,] ""                                ""                 
 [4,] ""                                ""                 
 [5,] ""                                ""                 
 [6,] ""                                ""                 
 [7,] ""                                "%Ob %d %Y at %Hpm"
 [8,] ""                                ""                 
 [9,] ""                                ""                 
[10,] ""                                ""                 
[11,] ""                                ""                 
[12,] ""                                ""                 
[13,] ""                                ""                 
[14,] ""                                ""                 
[15,] ""                                ""                 
[16,] ""                                ""                 
[17,] ""                                ""                 
[18,] "Thu, %d %Ob %Y %H:%M:%S"         ""                 
[19,] "Thu, %dst of %Ob %Y at %H:%M:%S" ""                 
[20,] "Thu, %d%Ob %Y at %H:%M:%S"       ""                 
[21,] "Thu, %d%Ob%Y %H:%M:%S"           ""                 
[22,] ""                                ""                 
[23,] "%d %Ob %Y, %H:%M:%S pm"          ""                 
[24,] ""                                ""                 
[25,] ""                                ""                 
[26,] ""                                ""                 
[27,] ""                                ""                 
[28,] ""                                ""                 
[29,] ""                                ""                 
[30,] ""                                ""                 
[31,] ""                                ""                 
[32,] ""                                ""                 
[33,] ""                                ""                 
[34,] ""                                ""                 
[35,] ""                                ""                 
      dOmyHMS                           dBYHMS                          
 [1,] ""                                ""                              
 [2,] ""                                ""                              
 [3,] ""                                ""                              
 [4,] ""                                ""                              
 [5,] ""                                ""                              
 [6,] ""                                ""                              
 [7,] ""                                ""                              
 [8,] ""                                ""                              
 [9,] ""                                ""                              
[10,] ""                                ""                              
[11,] ""                                ""                              
[12,] ""                                ""                              
[13,] ""                                ""                              
[14,] ""                                ""                              
[15,] ""                                ""                              
[16,] ""                                ""                              
[17,] ""                                ""                              
[18,] "Thu, %d %Om %Y %H:%M:%S"         "Thu, %d %B %Y %H:%M:%S"        
[19,] "Thu, %dst of %Om %Y at %H:%M:%S" "Thu, %dst of %B %Y at %H:%M:%S"
[20,] "Thu, %d%Om %Y at %H:%M:%S"       "Thu, %d%B %Y at %H:%M:%S"      
[21,] "Thu, %d%Om%Y %H:%M:%S"           "Thu, %d%B%Y %H:%M:%S"          
[22,] "Thu, %d%Om%y %H:%M:%S"           ""                              
[23,] "%d %Om %Y, %H:%M:%S pm"          ""                              
[24,] ""                                ""                              
[25,] ""                                ""                              
[26,] ""                                ""                              
[27,] ""                                ""                              
[28,] ""                                ""                              
[29,] ""                                ""                              
[30,] ""                                ""                              
[31,] ""                                ""                              
[32,] ""                                ""                              
[33,] ""                                ""                              
[34,] ""                                ""                              
[35,] ""                                ""                              
      dbYHMS                           dmyHMS                          
 [1,] ""                               ""                              
 [2,] ""                               ""                              
 [3,] ""                               ""                              
 [4,] ""                               ""                              
 [5,] ""                               ""                              
 [6,] ""                               ""                              
 [7,] ""                               ""                              
 [8,] ""                               ""                              
 [9,] ""                               ""                              
[10,] ""                               ""                              
[11,] ""                               ""                              
[12,] ""                               ""                              
[13,] ""                               ""                              
[14,] ""                               ""                              
[15,] ""                               ""                              
[16,] ""                               ""                              
[17,] ""                               ""                              
[18,] "Thu, %d %B %Y %H:%M:%S"         "Thu, %d %B %Y %H:%M:%S"        
[19,] "Thu, %dst of %B %Y at %H:%M:%S" "Thu, %dst of %B %Y at %H:%M:%S"
[20,] "Thu, %d%B %Y at %H:%M:%S"       "Thu, %d%B %Y at %H:%M:%S"      
[21,] "Thu, %d%B%Y %H:%M:%S"           "Thu, %d%B%Y %H:%M:%S"          
[22,] ""                               "Thu, %d%B%y %H:%M:%S"          
[23,] "%d %b %Y, %H:%M:%S pm"          "%d %b %Y, %H:%M:%S pm"         
[24,] ""                               ""                              
[25,] ""                               ""                              
[26,] ""                               ""                              
[27,] ""                               ""                              
[28,] ""                               ""                              
[29,] ""                               ""                              
[30,] ""                               ""                              
[31,] ""                               ""                              
[32,] ""                               ""                              
[33,] ""                               ""                              
[34,] ""                               ""                              
[35,] ""                               ""                              
      BdYH              
 [1,] ""                
 [2,] ""                
 [3,] ""                
 [4,] ""                
 [5,] ""                
 [6,] ""                
 [7,] "%B %d %Y at %Hpm"
 [8,] ""                
 [9,] ""                
[10,] ""                
[11,] ""                
[12,] ""                
[13,] ""                
[14,] ""                
[15,] ""                
[16,] ""                
[17,] ""                
[18,] ""                
[19,] ""                
[20,] ""                
[21,] ""                
[22,] ""                
[23,] ""                
[24,] ""                
[25,] ""                
[26,] ""                
[27,] ""                
[28,] ""                
[29,] ""                
[30,] ""                
[31,] ""                
[32,] ""                
[33,] ""                
[34,] ""                
[35,] ""                
                          dObYHMS                           dObYHMS 
         "%a, %d %Ob %Y %H:%M:%S"  "%a, %dst of %Ob %Y at %H:%M:%S" 
                          dObYHMS                           dObYHMS 
       "%a, %d%Ob %Y at %H:%M:%S"            "%a, %d%Ob%Y %H:%M:%S" 
                          dObYHMS                           dObYHMS 
         "%d %Ob %Y, %H:%M:%S pm"          "%a, %d %Ob %Y %H:%M:%S" 
                          dObYHMS                           dObYHMS 
 "%a, %dst of %Ob %Y at %H:%M:%S"        "%a, %d%Ob %Y at %H:%M:%S" 
                          dObYHMS                           dObYHMS 
           "%a, %d%Ob%Y %H:%M:%S"          "%d %Ob %Y, %H:%M:%S pm" 
                            ObdYH                           dOmyHMS 
              "%Ob %d %Y at %Hpm"          "%a, %d %Om %Y %H:%M:%S" 
                          dOmyHMS                           dOmyHMS 
 "%a, %dst of %Om %Y at %H:%M:%S"        "%a, %d%Om %Y at %H:%M:%S" 
                          dOmyHMS                           dOmyHMS 
           "%a, %d%Om%Y %H:%M:%S"            "%a, %d%Om%y %H:%M:%S" 
                          dOmyHMS                            dBYHMS 
         "%d %Om %Y, %H:%M:%S pm"           "%a, %d %B %Y %H:%M:%S" 
                           dBYHMS                            dBYHMS 
  "%a, %dst of %B %Y at %H:%M:%S"         "%a, %d%B %Y at %H:%M:%S" 
                           dBYHMS                            dbYHMS 
            "%a, %d%B%Y %H:%M:%S"           "%a, %d %B %Y %H:%M:%S" 
                           dbYHMS                            dbYHMS 
  "%a, %dst of %B %Y at %H:%M:%S"         "%a, %d%B %Y at %H:%M:%S" 
                           dbYHMS                            dbYHMS 
            "%a, %d%B%Y %H:%M:%S"           "%d %b %Y, %H:%M:%S pm" 
                           dmyHMS                            dmyHMS 
          "%a, %d %B %Y %H:%M:%S"   "%a, %dst of %B %Y at %H:%M:%S" 
                           dmyHMS                            dmyHMS 
        "%a, %d%B %Y at %H:%M:%S"             "%a, %d%B%Y %H:%M:%S" 
                           dmyHMS                            dmyHMS 
            "%a, %d%B%y %H:%M:%S"           "%d %b %Y, %H:%M:%S pm" 
                             BdYH                           dObYHMS 
               "%B %d %Y at %Hpm"         "Thu, %d %Ob %Y %H:%M:%S" 
                          dObYHMS                           dObYHMS 
"Thu, %dst of %Ob %Y at %H:%M:%S"       "Thu, %d%Ob %Y at %H:%M:%S" 
                          dObYHMS                           dObYHMS 
          "Thu, %d%Ob%Y %H:%M:%S"          "%d %Ob %Y, %H:%M:%S pm" 
                          dObYHMS                           dObYHMS 
        "Thu, %d %Ob %Y %H:%M:%S" "Thu, %dst of %Ob %Y at %H:%M:%S" 
                          dObYHMS                           dObYHMS 
      "Thu, %d%Ob %Y at %H:%M:%S"           "Thu, %d%Ob%Y %H:%M:%S" 
                          dObYHMS                             ObdYH 
         "%d %Ob %Y, %H:%M:%S pm"               "%Ob %d %Y at %Hpm" 
                          dOmyHMS                           dOmyHMS 
        "Thu, %d %Om %Y %H:%M:%S" "Thu, %dst of %Om %Y at %H:%M:%S" 
                          dOmyHMS                           dOmyHMS 
      "Thu, %d%Om %Y at %H:%M:%S"           "Thu, %d%Om%Y %H:%M:%S" 
                          dOmyHMS                           dOmyHMS 
          "Thu, %d%Om%y %H:%M:%S"          "%d %Om %Y, %H:%M:%S pm" 
                           dBYHMS                            dBYHMS 
         "Thu, %d %B %Y %H:%M:%S"  "Thu, %dst of %B %Y at %H:%M:%S" 
                           dBYHMS                            dBYHMS 
       "Thu, %d%B %Y at %H:%M:%S"            "Thu, %d%B%Y %H:%M:%S" 
                           dbYHMS                            dbYHMS 
         "Thu, %d %B %Y %H:%M:%S"  "Thu, %dst of %B %Y at %H:%M:%S" 
                           dbYHMS                            dbYHMS 
       "Thu, %d%B %Y at %H:%M:%S"            "Thu, %d%B%Y %H:%M:%S" 
                           dbYHMS                            dmyHMS 
          "%d %b %Y, %H:%M:%S pm"          "Thu, %d %B %Y %H:%M:%S" 
                           dmyHMS                            dmyHMS 
 "Thu, %dst of %B %Y at %H:%M:%S"        "Thu, %d%B %Y at %H:%M:%S" 
                           dmyHMS                            dmyHMS 
           "Thu, %d%B%Y %H:%M:%S"            "Thu, %d%B%y %H:%M:%S" 
                           dmyHMS                              BdYH 
          "%d %b %Y, %H:%M:%S pm"                "%B %d %Y at %Hpm" 
> 
> guess_formats(x, c("ymd HMS"), print_matches = TRUE)
                                          yOmdHMS             
 [1,] "February 20th 1973"                ""                  
 [2,] "february  14, 2004"                ""                  
 [3,] "Sunday, May 1, 2000"               ""                  
 [4,] "Sunday, May 1, 2000"               ""                  
 [5,] "february  14, 04"                  ""                  
 [6,] "Feb 20th 73"                       ""                  
 [7,] "January 5 1999 at 7pm"             ""                  
 [8,] "jan 3 2010"                        ""                  
 [9,] "Jan 1, 1999"                       ""                  
[10,] "jan 3   10"                        ""                  
[11,] "01 3 2010"                         ""                  
[12,] "1 3 10"                            ""                  
[13,] "1 13 89"                           ""                  
[14,] "5/27/1979"                         ""                  
[15,] "12/31/99"                          ""                  
[16,] "DOB:12/11/00"                      ""                  
[17,] "-----------"                       ""                  
[18,] "Thu, 1 July 2004 22:30:00"         ""                  
[19,] "Thu, 1st of July 2004 at 22:30:00" ""                  
[20,] "Thu, 1July 2004 at 22:30:00"       ""                  
[21,] "Thu, 1July2004 22:30:00"           ""                  
[22,] "Thu, 1July04 22:30:00"             ""                  
[23,] "21 Aug 2011, 11:15:34 pm"          ""                  
[24,] "-----------"                       ""                  
[25,] "1979-05-27 05:00:59"               "%Y-%Om-%d %H:%M:%S"
[26,] "1979-05-27"                        ""                  
[27,] "-----------"                       ""                  
[28,] "3 jan 2000"                        ""                  
[29,] "17 april 85"                       ""                  
[30,] "27/5/1979"                         ""                  
[31,] "20 01 89"                          ""                  
[32,] "00/13/10"                          ""                  
[33,] "-------"                           ""                  
[34,] "14 12 00"                          ""                  
[35,] "03:23:22 pm"                       ""                  
      ymdHMS             
 [1,] ""                 
 [2,] ""                 
 [3,] ""                 
 [4,] ""                 
 [5,] ""                 
 [6,] ""                 
 [7,] ""                 
 [8,] ""                 
 [9,] ""                 
[10,] ""                 
[11,] ""                 
[12,] ""                 
[13,] ""                 
[14,] ""                 
[15,] ""                 
[16,] ""                 
[17,] ""                 
[18,] ""                 
[19,] ""                 
[20,] ""                 
[21,] ""                 
[22,] ""                 
[23,] ""                 
[24,] ""                 
[25,] "%Y-%m-%d %H:%M:%S"
[26,] ""                 
[27,] ""                 
[28,] ""                 
[29,] ""                 
[30,] ""                 
[31,] ""                 
[32,] ""                 
[33,] ""                 
[34,] ""                 
[35,] ""                 
             yOmdHMS               ymdHMS 
"%Y-%Om-%d %H:%M:%S"  "%Y-%m-%d %H:%M:%S" 
> 
> 
> 
> 
> cleanEx()
> nameEx("hms")
> ### * hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ms
> ### Title: Parse periods with *h*our, *m*inute, and *s*econd components
> ### Aliases: ms hm hms
> ### Keywords: period
> 
> ### ** Examples
> 
> ms(c("09:10", "09:02", "1:10"))
[1] "9M 10S" "9M 2S"  "1M 10S"
> ms("7 6")
[1] "7M 6S"
> ms("6,5")
[1] "6M 5S"
> hm(c("09:10", "09:02", "1:10"))
[1] "9H 10M 0S" "9H 2M 0S"  "1H 10M 0S"
> hm("7 6")
[1] "7H 6M 0S"
> hm("6,5")
[1] "6H 5M 0S"
> 
> x <- c("09:10:01", "09:10:02", "09:10:03")
> hms(x)
[1] "9H 10M 1S" "9H 10M 2S" "9H 10M 3S"
> 
> hms("7 6 5", "3:23:::2", "2 : 23 : 33", "Finished in 9 hours, 20 min and 4 seconds")
[1] "7H 6M 5S"   "3H 23M 2S"  "2H 23M 33S" "9H 20M 4S" 
> 
> 
> 
> cleanEx()
> nameEx("hour")
> ### * hour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hour
> ### Title: Get/set hours component of a date-time
> ### Aliases: hour hour<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> hour(x)
[1] 0
> hour(x) <- 1
> hour(x) <- 25
> hour(x) > 2
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("interval")
> ### * interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interval
> ### Title: Utilities for creation and manipulation of 'Interval' objects
> ### Aliases: interval %--% is.interval int_start int_start<- int_end
> ###   int_end<- int_length int_flip int_shift int_overlaps int_standardize
> ###   int_aligns int_diff
> 
> ### ** Examples
> 
> interval(ymd(20090201), ymd(20090101))
[1] 2009-02-01 UTC--2009-01-01 UTC
> 
> date1 <- ymd_hms("2009-03-08 01:59:59")
> date2 <- ymd_hms("2000-02-29 12:00:00")
> interval(date2, date1)
[1] 2000-02-29 12:00:00 UTC--2009-03-08 01:59:59 UTC
> interval(date1, date2)
[1] 2009-03-08 01:59:59 UTC--2000-02-29 12:00:00 UTC
> span <- interval(ymd(20090101), ymd(20090201))
> 
> ### ISO Intervals
> 
> interval("2007-03-01T13:00:00Z/2008-05-11T15:30:00Z")
[1] 2007-03-01 13:00:00 UTC--2008-05-11 15:30:00 UTC
> interval("2007-03-01T13:00:00Z/P1Y2M10DT2H30M")
[1] 2007-03-01 13:00:00 UTC--2008-05-11 15:30:00 UTC
> interval("P1Y2M10DT2H30M/2008-05-11T15:30:00Z")
[1] 2007-03-01 13:00:00 UTC--2008-05-11 15:30:00 UTC
> interval("2008-05-11/P2H30M")
[1] 2008-05-11 UTC--2010-11-11 02:00:00 UTC
> 
> ### More permisive parsing (as long as there are no intermittent / characters)
> interval("2008 05 11/P2hours 30minutes")
[1] 2008-05-11 UTC--2008-05-11 02:30:00 UTC
> interval("08 05 11/P 2h 30m")
[1] 2008-05-11 UTC--2010-11-11 02:00:00 UTC
> 
> is.interval(period(months = 1, days = 15)) # FALSE
[1] FALSE
> is.interval(interval(ymd(20090801), ymd(20090809))) # TRUE
[1] TRUE
> int <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int_start(int)
[1] "2001-01-01 UTC"
> int_start(int) <- ymd("2001-06-01")
> int
[1] 2001-06-01 UTC--2002-01-01 UTC
> 
> int <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int_end(int)
[1] "2002-01-01 UTC"
> int_end(int) <- ymd("2002-06-01")
> int
[1] 2001-01-01 UTC--2002-06-01 UTC
> int <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int_length(int)
[1] 31536000
> int <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int_flip(int)
[1] 2002-01-01 UTC--2001-01-01 UTC
> int <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int_shift(int, duration(days = 11))
[1] 2001-01-12 UTC--2002-01-12 UTC
> int_shift(int, duration(hours = -1))
[1] 2000-12-31 23:00:00 UTC--2001-12-31 23:00:00 UTC
> int1 <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int2 <- interval(ymd("2001-06-01"), ymd("2002-06-01"))
> int3 <- interval(ymd("2003-01-01"), ymd("2004-01-01"))
> 
> int_overlaps(int1, int2) # TRUE
[1] TRUE
> int_overlaps(int1, int3) # FALSE
[1] FALSE
> int <- interval(ymd("2002-01-01"), ymd("2001-01-01"))
> int_standardize(int)
[1] 2001-01-01 UTC--2002-01-01 UTC
> int1 <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int2 <- interval(ymd("2001-06-01"), ymd("2002-01-01"))
> int3 <- interval(ymd("2003-01-01"), ymd("2004-01-01"))
> 
> int_aligns(int1, int2) # TRUE
[1] TRUE
> int_aligns(int1, int3) # FALSE
[1] FALSE
> dates <- now() + days(1:10)
> int_diff(dates)
[1] 2024-12-20 17:46:22 UTC--2024-12-21 17:46:22 UTC
[2] 2024-12-21 17:46:22 UTC--2024-12-22 17:46:22 UTC
[3] 2024-12-22 17:46:22 UTC--2024-12-23 17:46:22 UTC
[4] 2024-12-23 17:46:22 UTC--2024-12-24 17:46:22 UTC
[5] 2024-12-24 17:46:22 UTC--2024-12-25 17:46:22 UTC
[6] 2024-12-25 17:46:22 UTC--2024-12-26 17:46:22 UTC
[7] 2024-12-26 17:46:22 UTC--2024-12-27 17:46:22 UTC
[8] 2024-12-27 17:46:22 UTC--2024-12-28 17:46:22 UTC
[9] 2024-12-28 17:46:22 UTC--2024-12-29 17:46:22 UTC
> 
> 
> 
> cleanEx()
> nameEx("is.difftime")
> ### * is.difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.difftime
> ### Title: Is x a difftime object?
> ### Aliases: is.difftime
> ### Keywords: chron logic
> 
> ### ** Examples
> 
> is.difftime(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.difftime(make_difftime(days = 12.4)) # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is.instant")
> ### * is.instant
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.instant
> ### Title: Is x a date-time object?
> ### Aliases: is.instant instant instants is.timepoint
> ### Keywords: chron logic
> 
> ### ** Examples
> 
> is.instant(as.Date("2009-08-03")) # TRUE
[1] TRUE
> is.timepoint(5) # FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is.timespan")
> ### * is.timespan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.timespan
> ### Title: Is x a length of time?
> ### Aliases: is.timespan
> ### Keywords: chron logic
> 
> ### ** Examples
> 
> is.timespan(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.timespan(duration(second = 1)) # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("leap_year")
> ### * leap_year
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leap_year
> ### Title: Is a year a leap year?
> ### Aliases: leap_year
> ### Keywords: chron logic
> 
> ### ** Examples
> 
> x <- as.Date("2009-08-02")
> leap_year(x) # FALSE
[1] FALSE
> leap_year(2009) # FALSE
[1] FALSE
> leap_year(2008) # TRUE
[1] TRUE
> leap_year(1900) # FALSE
[1] FALSE
> leap_year(2000) # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("local_time")
> ### * local_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: local_time
> ### Title: Get local time from a date-time vector.
> ### Aliases: local_time
> 
> ### ** Examples
> 
> 
> x <- ymd_hms(c("2009-08-07 01:02:03", "2009-08-07 10:20:30"))
> local_time(x, units = "secs")
Time differences in secs
[1]  3723 37230
> local_time(x, units = "hours")
Time differences in hours
[1]  1.034167 10.341667
> local_time(x, "Europe/Amsterdam")
Time differences in secs
[1] 10923 44430
> local_time(x, "Europe/Amsterdam") == local_time(with_tz(x, "Europe/Amsterdam"))
[1] TRUE TRUE
> 
> x <- ymd_hms("2009-08-07 01:02:03")
> local_time(x, c("America/New_York", "Europe/Amsterdam", "Asia/Shanghai"), unit = "hours")
Time differences in hours
[1] 21.034167  3.034167  9.034167
> 
> 
> 
> cleanEx()
> nameEx("make_datetime")
> ### * make_datetime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_datetime
> ### Title: Efficient creation of date-times from numeric representations
> ### Aliases: make_datetime make_date
> 
> ### ** Examples
> 
> make_datetime(year = 1999, month = 12, day = 22, sec = 10)
[1] "1999-12-22 00:00:10 UTC"
> make_datetime(year = 1999, month = 12, day = 22, sec = c(10, 11))
[1] "1999-12-22 00:00:10 UTC" "1999-12-22 00:00:11 UTC"
> 
> 
> 
> cleanEx()
> nameEx("make_difftime")
> ### * make_difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_difftime
> ### Title: Create a difftime object.
> ### Aliases: make_difftime
> ### Keywords: chron classes
> 
> ### ** Examples
> 
> make_difftime(1)
Time difference of 1 secs
> make_difftime(60)
Time difference of 1 mins
> make_difftime(3600)
Time difference of 1 hours
> make_difftime(3600, units = "minute")
Time difference of 60 mins
> # Time difference of 60 mins
> make_difftime(second = 90)
Time difference of 1.5 mins
> # Time difference of 1.5 mins
> make_difftime(minute = 1.5)
Time difference of 1.5 mins
> # Time difference of 1.5 mins
> make_difftime(second = 3, minute = 1.5, hour = 2, day = 6, week = 1)
Time difference of 13.08441 days
> # Time difference of 13.08441 days
> make_difftime(hour = 1, minute = -60)
Time difference of 0 secs
> # Time difference of 0 secs
> make_difftime(day = -1)
Time difference of -1 days
> # Time difference of -1 days
> make_difftime(120, day = -1, units = "minute")
Time differences in mins
[1]     2 -1440
> # Time differences in mins
> 
> 
> 
> cleanEx()
> nameEx("minute")
> ### * minute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: minute
> ### Title: Get/set minutes component of a date-time
> ### Aliases: minute minute<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> minute(x)
[1] 0
> minute(x) <- 1
> minute(x) <- 61
> minute(x) > 2
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("month")
> ### * month
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: month
> ### Title: Get/set months component of a date-time
> ### Aliases: month month<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> month(x)
[1] 3
> month(x) <- 1
> month(x) <- 13
> month(x) > 3
[1] FALSE
> 
> month(ymd(080101))
[1] 1
> month(ymd(080101), label = TRUE)
[1] Jan
12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
> month(ymd(080101), label = TRUE, abbr = FALSE)
[1] January
12 Levels: January < February < March < April < May < June < ... < December
> month(ymd(080101) + months(0:11), label = TRUE)
 [1] Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec
> 
> 
> 
> cleanEx()
> nameEx("mplus")
> ### * mplus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %m+%
> ### Title: Add and subtract months to a date without exceeding the last day
> ###   of the new month
> ### Aliases: %m+% m+ m- %m-% %m+%,ANY,ANY-method %m-%,ANY,ANY-method
> ###   %m+%,Period,ANY-method %m+%,ANY,Period-method %m-%,Period,ANY-method
> ###   %m-%,ANY,Period-method %m+%,Duration,ANY-method
> ###   %m+%,ANY,Duration-method %m-%,Duration,ANY-method
> ###   %m-%,ANY,Duration-method %m+%,Interval,ANY-method
> ###   %m+%,ANY,Interval-method %m-%,Interval,ANY-method
> ###   %m-%,ANY,Interval-method add_with_rollback
> 
> ### ** Examples
> 
> jan <- ymd_hms("2010-01-31 03:04:05")
> jan + months(1:3) # Feb 31 and April 31 returned as NA
[1] NA                        "2010-03-31 03:04:05 UTC"
[3] NA                       
> # NA "2010-03-31 03:04:05 UTC" NA
> jan %m+% months(1:3) # No rollover
[1] "2010-02-28 03:04:05 UTC" "2010-03-31 03:04:05 UTC"
[3] "2010-04-30 03:04:05 UTC"
> 
> leap <- ymd("2012-02-29")
> "2012-02-29 UTC"
[1] "2012-02-29 UTC"
> leap %m+% years(1)
[1] "2013-02-28"
> leap %m+% years(-1)
[1] "2011-02-28"
> leap %m-% years(1)
[1] "2011-02-28"
> 
> x <- ymd_hms("2019-01-29 01:02:03")
> add_with_rollback(x, months(1))
[1] "2019-02-28 01:02:03 UTC"
> add_with_rollback(x, months(1), preserve_hms = FALSE)
[1] "2019-02-28 UTC"
> add_with_rollback(x, months(1), roll_to_first = TRUE)
[1] "2019-03-01 01:02:03 UTC"
> add_with_rollback(x, months(1), roll_to_first = TRUE, preserve_hms = FALSE)
[1] "2019-03-01 UTC"
> 
> 
> 
> cleanEx()
> nameEx("now")
> ### * now
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: now
> ### Title: The current day and time
> ### Aliases: now today
> ### Keywords: chron utilities
> 
> ### ** Examples
> 
> now()
[1] "2024-12-19 17:46:22 UTC"
> now("GMT")
[1] "2024-12-19 17:46:22 GMT"
> now("")
[1] "2024-12-19 17:46:22 UTC"
> now() == now() # would be TRUE if computer processed both at the same instant
[1] FALSE
> now() < now() # TRUE
[1] TRUE
> now() > now() # FALSE
[1] FALSE
> today()
[1] "2024-12-19"
> today("GMT")
[1] "2024-12-19"
> today() == today("GMT") # not always true
[1] TRUE
> today() < as.Date("2999-01-01") # TRUE  (so far)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("origin")
> ### * origin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: origin
> ### Title: 1970-01-01 UTC
> ### Aliases: origin
> ### Keywords: chron data
> 
> ### ** Examples
> 
> origin
[1] "1970-01-01 UTC"
> 
> 
> 
> cleanEx()
> nameEx("parse_date_time")
> ### * parse_date_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse_date_time
> ### Title: User friendly date-time parsing functions
> ### Aliases: parse_date_time parse_date_time2 fast_strptime
> ### Keywords: chron
> 
> ### ** Examples
> 
> 
> ## ** orders are much easier to write **
> x <- c("09-01-01", "09-01-02", "09-01-03")
> parse_date_time(x, "ymd")
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> parse_date_time(x, "y m d")
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> parse_date_time(x, "%y%m%d")
[1] "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> #  "2009-01-01 UTC" "2009-01-02 UTC" "2009-01-03 UTC"
> 
> ## ** heterogeneous date-times **
> x <- c("09-01-01", "090102", "09-01 03", "09-01-03 12:02")
> parse_date_time(x, c("ymd", "ymd HM"))
[1] "2009-01-01 00:00:00 UTC" "2009-01-02 00:00:00 UTC"
[3] "2009-01-03 00:00:00 UTC" "2009-01-03 12:02:00 UTC"
> 
> ## ** different ymd orders **
> x <- c("2009-01-01", "02022010", "02-02-2010")
> parse_date_time(x, c("dmY", "ymd"))
[1] "2009-01-01 UTC" "2010-02-02 UTC" "2010-02-02 UTC"
> ##  "2009-01-01 UTC" "2010-02-02 UTC" "2010-02-02 UTC"
> 
> ## ** truncated time-dates **
> x <- c("2011-12-31 12:59:59", "2010-01-01 12:11", "2010-01-01 12", "2010-01-01")
> parse_date_time(x, "Ymd HMS", truncated = 3)
[1] "2011-12-31 12:59:59 UTC" "2010-01-01 12:11:00 UTC"
[3] "2010-01-01 12:00:00 UTC" "2010-01-01 00:00:00 UTC"
> 
> ## ** specifying exact formats and avoiding training and guessing **
> parse_date_time(x, c("%m-%d-%y", "%m%d%y", "%m-%d-%y %H:%M"), exact = TRUE)
Warning:  4 failed to parse.
[1] NA NA NA NA
> parse_date_time(c('12/17/1996 04:00:00','4/18/1950 0130'),
+                 c('%m/%d/%Y %I:%M:%S','%m/%d/%Y %H%M'), exact = TRUE)
[1] "1996-12-17 04:00:00 UTC" "1950-04-18 01:30:00 UTC"
> 
> ## ** quarters and partial dates **
> parse_date_time(c("2016.2", "2016-04"), orders = "Yq")
[1] "2016-04-01 UTC" "2016-10-01 UTC"
> parse_date_time(c("2016", "2016-04"), orders = c("Y", "Ym"))
[1] "2016-01-01 UTC" "2016-04-01 UTC"
> 
> ## ** fast parsing **
> ## Not run: 
> ##D   options(digits.secs = 3)
> ##D   ## random times between 1400 and 3000
> ##D   tt <- as.character(.POSIXct(runif(1000, -17987443200, 32503680000)))
> ##D   tt <- rep.int(tt, 1000)
> ##D 
> ##D   system.time(out <- as.POSIXct(tt, tz = "UTC"))
> ##D   system.time(out1 <- ymd_hms(tt)) # constant overhead on long vectors
> ##D   system.time(out2 <- parse_date_time2(tt, "YmdHMOS"))
> ##D   system.time(out3 <- fast_strptime(tt, "%Y-%m-%d %H:%M:%OS"))
> ##D 
> ##D   all.equal(out, out1)
> ##D   all.equal(out, out2)
> ##D   all.equal(out, out3)
> ## End(Not run)
> 
> ## ** how to use `select_formats` argument **
> ## By default %Y has precedence:
> parse_date_time(c("27-09-13", "27-09-2013"), "dmy")
[1] "2013-09-27 UTC" "2013-09-27 UTC"
> 
> ## to give priority to %y format, define your own select_format function:
> 
> my_select <-   function(trained, drop=FALSE, ...){
+    n_fmts <- nchar(gsub("[^%]", "", names(trained))) + grepl("%y", names(trained))*1.5
+    names(trained[ which.max(n_fmts) ])
+ }
> 
> parse_date_time(c("27-09-13", "27-09-2013"), "dmy", select_formats = my_select)
[1] "2013-09-27 UTC" "2013-09-27 UTC"
> 
> ## ** invalid times with "fast" parsing **
> parse_date_time("2010-03-14 02:05:06",  "YmdHMS", tz = "America/New_York")
Warning:  1 failed to parse.
[1] NA
> parse_date_time2("2010-03-14 02:05:06",  "YmdHMS", tz = "America/New_York")
[1] "2010-03-14 03:05:06 EDT"
> parse_date_time2("2010-03-14 02:05:06",  "YmdHMS", tz = "America/New_York", lt = TRUE)
[1] "2010-03-14 02:05:06 America/New_York"
> 
> 
> 
> cleanEx()
> nameEx("period")
> ### * period
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: period
> ### Title: Create or parse period objects
> ### Aliases: period periods is.period seconds minutes hours days weeks
> ###   years milliseconds microseconds nanoseconds picoseconds
> ###   months.numeric
> ### Keywords: chron classes
> 
> ### ** Examples
> 
> 
> ### Separate period and units vectors
> 
> period(c(90, 5), c("second", "minute"))
[1] "5M 90S"
> #  "5M 90S"
> period(-1, "days")
[1] "-1d 0H 0M 0S"
> period(c(3, 1, 2, 13, 1), c("second", "minute", "hour", "day", "week"))
[1] "20d 2H 1M 3S"
> period(c(1, -60), c("hour", "minute"))
[1] "1H -60M 0S"
> period(0, "second")
[1] "0S"
> 
> ### Units as arguments
> 
> period(second = 90, minute = 5)
[1] "5M 90S"
> period(day = -1)
[1] "-1d 0H 0M 0S"
> period(second = 3, minute = 1, hour = 2, day = 13, week = 1)
[1] "20d 2H 1M 3S"
> period(hour = 1, minute = -60)
[1] "1H -60M 0S"
> period(second = 0)
[1] "0S"
> period(c(1, -60), c("hour", "minute"), hour = c(1, 2), minute = c(3, 4))
[1] "1H -60M 0S" "1H 3M 0S"   "2H 4M 0S"  
> 
> ### Lubridate style parsing
> 
> period("2M 1sec")
[1] "2M 1S"
> period("2hours 2minutes 1second")
[1] "2H 2M 1S"
> period("2d 2H 2M 2S")
[1] "2d 2H 2M 2S"
> period("2days 2hours 2mins 2secs")
[1] "2d 2H 2M 2S"
> period("2 days, 2 hours, 2 mins, 2 secs")
[1] "2d 2H 2M 2S"
> # Missing numerals default to 1. Repeated units are added up.
> period("day day")
[1] "2d 0H 0M 0S"
> 
> ### ISO 8601 parsing
> 
> period("P10M23DT23H") # M stands for months
[1] "10m 23d 23H 0M 0S"
> period("10DT10M") # M stands for minutes
[1] "10d 0H 10M 0S"
> period("P3Y6M4DT12H30M5S") # M for both minutes and months
[1] "3y 6m 4d 12H 30M 5S"
> period("P23DT60H 20min 100 sec") # mixing ISO and lubridate style parsing
[1] "23d 60H 20M 100S"
> 
> ### Comparison with characters (from v1.6.0)
> 
> period("day 2 sec") > "day 1sec"
[1] TRUE
> 
> ### Elementary Constructors
> 
> x <- ymd("2009-08-03")
> x + days(1) + hours(6) + minutes(30)
[1] "2009-08-04 06:30:00 UTC"
> x + days(100) - hours(8)
[1] "2009-11-10 16:00:00 UTC"
> 
> class(as.Date("2009-08-09") + days(1)) # retains Date class
[1] "Date"
> as.Date("2009-08-09") + hours(12)
[1] "2009-08-09 12:00:00 UTC"
> class(as.Date("2009-08-09") + hours(12))
[1] "POSIXct" "POSIXt" 
> # converts to POSIXt class to accomodate time units
> 
> years(1) - months(7)
[1] "1y -7m 0d 0H 0M 0S"
> c(1:3) * hours(1)
[1] "1H 0M 0S" "2H 0M 0S" "3H 0M 0S"
> hours(1:3)
[1] "1H 0M 0S" "2H 0M 0S" "3H 0M 0S"
> 
> # sequencing
> y <- ymd(090101) # "2009-01-01 CST"
> y + months(0:11)
 [1] "2009-01-01" "2009-02-01" "2009-03-01" "2009-04-01" "2009-05-01"
 [6] "2009-06-01" "2009-07-01" "2009-08-01" "2009-09-01" "2009-10-01"
[11] "2009-11-01" "2009-12-01"
> 
> # compare DST handling to durations
> boundary <- ymd_hms("2009-03-08 01:59:59", tz = "America/Chicago")
> boundary + days(1) # period
[1] "2009-03-09 01:59:59 CDT"
> boundary + ddays(1) # duration
[1] "2009-03-09 02:59:59 CDT"
> is.period(as.Date("2009-08-03")) # FALSE
[1] FALSE
> is.period(period(months = 1, days = 15)) # TRUE
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("posix_utils")
> ### * posix_utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.POSIXt
> ### Title: Various POSIX utilities
> ### Aliases: is.POSIXt is.POSIXlt is.POSIXct POSIXct NA_POSIXct_
> ### Keywords: chron datasets logic
> 
> ### ** Examples
> 
> is.POSIXt(as.Date("2009-08-03"))
[1] FALSE
> is.POSIXt(as.POSIXct("2009-08-03"))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("pretty_dates")
> ### * pretty_dates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pretty_dates
> ### Title: Computes attractive axis breaks for date-time data
> ### Aliases: pretty_dates
> ### Keywords: chron dplot utilities
> 
> ### ** Examples
> 
> x <- seq.Date(as.Date("2009-08-02"), by = "year", length.out = 2)
> pretty_dates(x, 12)
 [1] "2009-08-01 UTC" "2009-09-01 UTC" "2009-10-01 UTC" "2009-11-01 UTC"
 [5] "2009-12-01 UTC" "2010-01-01 UTC" "2010-02-01 UTC" "2010-03-01 UTC"
 [9] "2010-04-01 UTC" "2010-05-01 UTC" "2010-06-01 UTC" "2010-07-01 UTC"
[13] "2010-08-01 UTC" "2010-09-01 UTC"
> 
> 
> 
> cleanEx()
> nameEx("quarter")
> ### * quarter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quarter
> ### Title: Get the fiscal quarter and semester of a date-time
> ### Aliases: quarter semester
> 
> ### ** Examples
> 
> x <- ymd(c("2012-03-26", "2012-05-04", "2012-09-23", "2012-12-31"))
> quarter(x)
[1] 1 2 3 4
> quarter(x, type = "year.quarter")
[1] 2012.1 2012.2 2012.3 2012.4
> quarter(x, type = "year.quarter", fiscal_start = 11)
[1] 2012.2 2012.3 2012.4 2013.1
> quarter(x, type = "date_first", fiscal_start = 11)
[1] "2012-02-01" "2012-05-01" "2012-08-01" "2012-11-01"
> quarter(x, type = "date_last", fiscal_start = 11)
[1] "2012-04-30" "2012-07-31" "2012-10-31" "2013-01-31"
> semester(x)
[1] 1 1 2 2
> semester(x, with_year = TRUE)
[1] 2012.1 2012.1 2012.2 2012.2
> 
> 
> 
> cleanEx()
> nameEx("rollbackward")
> ### * rollbackward
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rollbackward
> ### Title: Roll backward or forward a date the previous, current or next
> ###   month
> ### Aliases: rollbackward rollback rollforward
> 
> ### ** Examples
> 
> date <- ymd("2010-03-03")
> rollbackward(date)
[1] "2010-02-28"
> 
> dates <- date + months(0:2)
> rollbackward(dates)
[1] "2010-02-28" "2010-03-31" "2010-04-30"
> 
> date <- ymd_hms("2010-03-03 12:44:22")
> rollbackward(date)
[1] "2010-02-28 12:44:22 UTC"
> rollbackward(date, roll_to_first = TRUE)
[1] "2010-03-01 12:44:22 UTC"
> rollbackward(date, preserve_hms = FALSE)
[1] "2010-02-28 UTC"
> rollbackward(date, roll_to_first = TRUE, preserve_hms = FALSE)
[1] "2010-03-01 UTC"
> 
> 
> 
> cleanEx()
> nameEx("round_date")
> ### * round_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: round_date
> ### Title: Round, floor and ceiling methods for date-time objects
> ### Aliases: round_date floor_date ceiling_date
> ### Keywords: chron manip
> 
> ### ** Examples
> 
> 
> ## print fractional seconds
> options(digits.secs = 6)
> 
> x <- ymd_hms("2009-08-03 12:01:59.23")
> round_date(x, ".5s")
[1] "2009-08-03 12:01:59 UTC"
> round_date(x, "sec")
[1] "2009-08-03 12:01:59 UTC"
> round_date(x, "second")
[1] "2009-08-03 12:01:59 UTC"
> round_date(x, "minute")
[1] "2009-08-03 12:02:00 UTC"
> round_date(x, "5 mins")
[1] "2009-08-03 12:00:00 UTC"
> round_date(x, "hour")
[1] "2009-08-03 12:00:00 UTC"
> round_date(x, "2 hours")
[1] "2009-08-03 12:00:00 UTC"
> round_date(x, "day")
[1] "2009-08-04 UTC"
> round_date(x, "week")
[1] "2009-08-02 UTC"
> round_date(x, "month")
[1] "2009-08-01 UTC"
> round_date(x, "bimonth")
[1] "2009-09-01 UTC"
> round_date(x, "quarter") == round_date(x, "3 months")
[1] TRUE
> round_date(x, "halfyear")
[1] "2009-07-01 UTC"
> round_date(x, "year")
[1] "2010-01-01 UTC"
> 
> x <- ymd_hms("2009-08-03 12:01:59.23")
> floor_date(x, ".1s")
[1] "2009-08-03 12:01:59.2 UTC"
> floor_date(x, "second")
[1] "2009-08-03 12:01:59 UTC"
> floor_date(x, "minute")
[1] "2009-08-03 12:01:00 UTC"
> floor_date(x, "hour")
[1] "2009-08-03 12:00:00 UTC"
> floor_date(x, "day")
[1] "2009-08-03 UTC"
> floor_date(x, "week")
[1] "2009-08-02 UTC"
> floor_date(x, "month")
[1] "2009-08-01 UTC"
> floor_date(x, "bimonth")
[1] "2009-07-01 UTC"
> floor_date(x, "quarter")
[1] "2009-07-01 UTC"
> floor_date(x, "season")
[1] "2009-06-01 UTC"
> floor_date(x, "halfyear")
[1] "2009-07-01 UTC"
> floor_date(x, "year")
[1] "2009-01-01 UTC"
> 
> x <- ymd_hms("2009-08-03 12:01:59.23")
> ceiling_date(x, ".1 sec") # imprecise representation at 0.1 sec !!!
[1] "2009-08-03 12:01:59.2 UTC"
> ceiling_date(x, "second")
[1] "2009-08-03 12:02:00 UTC"
> ceiling_date(x, "minute")
[1] "2009-08-03 12:02:00 UTC"
> ceiling_date(x, "5 mins")
[1] "2009-08-03 12:05:00 UTC"
> ceiling_date(x, "hour")
[1] "2009-08-03 13:00:00 UTC"
> ceiling_date(x, "day")
[1] "2009-08-04 UTC"
> ceiling_date(x, "week")
[1] "2009-08-09 UTC"
> ceiling_date(x, "month")
[1] "2009-09-01 UTC"
> ceiling_date(x, "bimonth") == ceiling_date(x, "2 months")
[1] TRUE
> ceiling_date(x, "quarter")
[1] "2009-10-01 UTC"
> ceiling_date(x, "season")
[1] "2009-09-01 UTC"
> ceiling_date(x, "halfyear")
[1] "2010-01-01 UTC"
> ceiling_date(x, "year")
[1] "2010-01-01 UTC"
> 
> ## Period unit argument
> floor_date(x, days(2))
[1] "2009-08-03 UTC"
> floor_date(x, years(1))
[1] "2009-01-01 UTC"
> 
> ## As of R 3.4.2 POSIXct printing of fractional numbers is wrong
> as.POSIXct("2009-08-03 12:01:59.3") ## -> "2009-08-03 12:01:59.2 CEST"
[1] "2009-08-03 12:01:59.2 UTC"
> ceiling_date(x, ".1 sec") ## -> "2009-08-03 12:01:59.2 CEST"
[1] "2009-08-03 12:01:59.2 UTC"
> 
> ## behaviour of `change_on_boundary`
> ## As per default behaviour `NULL`, instants on the boundary remain the
> ## same but dates are rounded up
> ceiling_date(ymd_hms("2000-01-01 00:00:00"), "month")
[1] "2000-01-01 UTC"
> ceiling_date(ymd("2000-01-01"), "month")
[1] "2000-02-01"
> 
> ## If `TRUE`, both instants and dates on the boundary are rounded up
> ceiling_date(ymd_hms("2000-01-01 00:00:00"), "month", change_on_boundary = TRUE)
[1] "2000-02-01 UTC"
> ceiling_date(ymd("2000-01-01"), "month")
[1] "2000-02-01"
> 
> ## If `FALSE`, both instants and dates on the boundary remain the same
> ceiling_date(ymd_hms("2000-01-01 00:00:00"), "month", change_on_boundary = FALSE)
[1] "2000-01-01 UTC"
> ceiling_date(ymd("2000-01-01"), "month")
[1] "2000-02-01"
> 
> x <- ymd_hms("2000-01-01 00:00:00")
> ceiling_date(x, "month")
[1] "2000-01-01 UTC"
> ceiling_date(x, "month", change_on_boundary = TRUE)
[1] "2000-02-01 UTC"
> 
> ## For Date objects first day of the month is not on the
> ## "boundary". change_on_boundary applies to instants only.
> x <- ymd("2000-01-01")
> ceiling_date(x, "month")
[1] "2000-02-01"
> ceiling_date(x, "month", change_on_boundary = TRUE)
[1] "2000-02-01"
> 
> 
> 
> cleanEx()
> nameEx("second")
> ### * second
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: second
> ### Title: Get/set seconds component of a date-time
> ### Aliases: second second<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> second(x)
[1] 0
> second(x) <- 1
> second(x) <- 61
> second(x) > 2
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("stamp")
> ### * stamp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stamp
> ### Title: Format dates and times based on human-friendly templates
> ### Aliases: stamp stamp_date stamp_time
> 
> ### ** Examples
> 
> D <- ymd("2010-04-05") - days(1:5)
> stamp("March 1, 1999")(D)
Multiple formats matched: "%Om %d, %Y"(1), "March %Om, %Y"(1), "%B %d, %Y"(1), "March %m, %Y"(1)
Using: "%B %d, %Y"
[1] "April 04, 2010" "April 03, 2010" "April 02, 2010" "April 01, 2010"
[5] "March 31, 2010"
> sf <- stamp("Created on Sunday, Jan 1, 1999 3:34 pm")
Multiple formats matched: "Created on %A, %b %d, %Y %I:%M %p"(1), "Created on Sunday, %b %d, %Y %I:%M %p"(1), "Created on %A, %Om %d, %Y %I:%M %p"(0), "Created on Sunday, %Om %d, %Y %I:%M %p"(0)
Using: "Created on %A, %b %d, %Y %I:%M %p"
> sf(D)
[1] "Created on Sunday, Apr 04, 2010 12:00 AM"   
[2] "Created on Saturday, Apr 03, 2010 12:00 AM" 
[3] "Created on Friday, Apr 02, 2010 12:00 AM"   
[4] "Created on Thursday, Apr 01, 2010 12:00 AM" 
[5] "Created on Wednesday, Mar 31, 2010 12:00 AM"
> stamp("Jan 01")(D)
Multiple formats matched: "%Om %y"(1), "%Om %d"(1), "Jan %Om"(1), "%b %d"(1), "Jan %H"(1), "Jan %m"(1), "Jan %y"(1), "%b %y"(0)
Using: "%Om %y"
[1] "04 10" "04 10" "04 10" "04 10" "03 10"
> stamp("Sunday, May 1, 2000", locale = "C")(D)
Multiple formats matched: "%A, %b %d, %Y"(1), "Sunday, %Om %d, %Y"(1), "Sunday, May %Om, %Y"(1), "Sunday, %b %d, %Y"(1), "Sunday, May %m, %Y"(1), "%A, %Om %d, %Y"(0), "%A, May %Om, %Y"(0), "%A, May %m, %Y"(0)
Using: "%A, %b %d, %Y"
[1] "Sunday, Apr 04, 2010"    "Saturday, Apr 03, 2010" 
[3] "Friday, Apr 02, 2010"    "Thursday, Apr 01, 2010" 
[5] "Wednesday, Mar 31, 2010"
> stamp("Sun Aug 5")(D) #=> "Sun Aug 04" "Sat Aug 04" "Fri Aug 04" "Thu Aug 04" "Wed Aug 03"
Multiple formats matched: "%a %b %d"(1), "%a Aug %H"(1), "Sun %Om %d"(1), "Sun Aug %Om"(1), "Sun %b %d"(1), "Sun Aug %H"(1), "Sun Aug %m"(1), "%a %Om %d"(0), "%a Aug %Om"(0), "%a Aug %m"(0)
Using: "%a %b %d"
[1] "Sun Apr 04" "Sat Apr 03" "Fri Apr 02" "Thu Apr 01" "Wed Mar 31"
> stamp("12/31/99")(D)              #=> "06/09/11"
Multiple formats matched: "%Om/%d/%y"(1), "%m/%d/%y"(1)
Using: "%Om/%d/%y"
[1] "04/04/10" "04/03/10" "04/02/10" "04/01/10" "03/31/10"
> stamp("Sunday, May 1, 2000 22:10", locale = "C")(D)
Multiple formats matched: "%A, May %Om, %Y %d:%H"(1), "%A, %b %d, %Y %H:%M"(1), "%A, May %m, %Y %d:%H"(1), "Sunday, %Om %d, %Y %H:%M"(1), "Sunday, May %Om, %Y %d:%H"(1), "Sunday, %b %d, %Y %H:%M"(1), "Sunday, May %m, %Y %d:%H"(1), "%A, %Om %d, %Y %H:%M"(0)
Using: "%A, %b %d, %Y %H:%M"
[1] "Sunday, Apr 04, 2010 00:00"    "Saturday, Apr 03, 2010 00:00" 
[3] "Friday, Apr 02, 2010 00:00"    "Thursday, Apr 01, 2010 00:00" 
[5] "Wednesday, Mar 31, 2010 00:00"
> stamp("2013-01-01T06:00:00Z")(D)
Multiple formats matched: "%Y-%Om-%dT%H:%M:%S%Ou"(1), "%Y-%Om-%dT%H:%M:%SZ"(1), "%Y-%d-%OmT%H:%M:%SZ"(1), "%Y-%m-%dT%H:%M:%S%Ou"(1), "%Y-%m-%dT%H:%M:%SZ"(1), "%Y-%d-%mT%H:%M:%SZ"(1)
Using: "%Y-%Om-%dT%H:%M:%S%Ou"
[1] "2010-04-04T00:00:00Z" "2010-04-03T00:00:00Z" "2010-04-02T00:00:00Z"
[4] "2010-04-01T00:00:00Z" "2010-03-31T00:00:00Z"
> stamp("2013-01-01T00:00:00-06")(D)
Multiple formats matched: "%Y-%Om-%dT%H:%M:%S%Oo"(1), "%Y-%m-%dT%H:%M:%S%Oo"(1)
Using: "%Y-%Om-%dT%H:%M:%S%Oo"
[1] "2010-04-04T00:00:00+00" "2010-04-03T00:00:00+00" "2010-04-02T00:00:00+00"
[4] "2010-04-01T00:00:00+00" "2010-03-31T00:00:00+00"
> stamp("2013-01-01T00:00:00-08:00")(force_tz(D, "America/Chicago"))
Multiple formats matched: "%Y-%Om-%dT%H:%M:%S%OO"(1), "%Y-%m-%dT%H:%M:%S%OO"(1)
Using: "%Y-%Om-%dT%H:%M:%S%OO"
[1] "2010-04-04T00:00:00-05:00" "2010-04-03T00:00:00-05:00"
[3] "2010-04-02T00:00:00-05:00" "2010-04-01T00:00:00-05:00"
[5] "2010-03-31T00:00:00-05:00"
> 
> 
> 
> cleanEx()
> nameEx("time_length")
> ### * time_length
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_length
> ### Title: Compute the exact length of a time span
> ### Aliases: time_length time_length,Interval-method
> ### Keywords: chron math methods period
> 
> ### ** Examples
> 
> int <- interval(ymd("1980-01-01"), ymd("2014-09-18"))
> time_length(int, "week")
[1] 1811.286
> 
> # Exact age
> time_length(int, "year")
[1] 34.71233
> 
> # Age at last anniversary
> trunc(time_length(int, "year"))
[1] 34
> 
> # Example of difference between intervals and durations
> int <- interval(ymd("1900-01-01"), ymd("1999-12-31"))
> time_length(int, "year")
[1] 99.99726
> time_length(as.duration(int), "year")
[1] 99.99452
> 
> 
> 
> cleanEx()
> nameEx("timespan")
> ### * timespan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timespan
> ### Title: Description of time span classes in lubridate
> ### Aliases: timespan timespans
> ### Keywords: chron classes
> 
> ### ** Examples
> 
> duration(3690, "seconds")
[1] "3690s (~1.02 hours)"
> period(3690, "seconds")
[1] "3690S"
> period(second = 30, minute = 1, hour = 1)
[1] "1H 1M 30S"
> interval(ymd_hms("2009-08-09 13:01:30"), ymd_hms("2009-08-09 12:00:00"))
[1] 2009-08-09 13:01:30 UTC--2009-08-09 12:00:00 UTC
> 
> date <- ymd_hms("2009-03-08 01:59:59") # DST boundary
> date + days(1)
[1] "2009-03-09 01:59:59 UTC"
> date + ddays(1)
[1] "2009-03-09 01:59:59 UTC"
> 
> date2 <- ymd_hms("2000-02-29 12:00:00")
> date2 + years(1)
[1] NA
> # self corrects to next real day
> 
> date3 <- ymd_hms("2009-01-31 01:00:00")
> date3 + c(0:11) * months(1)
 [1] "2009-01-31 01:00:00 UTC" NA                       
 [3] "2009-03-31 01:00:00 UTC" NA                       
 [5] "2009-05-31 01:00:00 UTC" NA                       
 [7] "2009-07-31 01:00:00 UTC" "2009-08-31 01:00:00 UTC"
 [9] NA                        "2009-10-31 01:00:00 UTC"
[11] NA                        "2009-12-31 01:00:00 UTC"
> 
> span <- date2 %--% date # creates interval
> 
> date <- ymd_hms("2009-01-01 00:00:00")
> date + years(1)
[1] "2010-01-01 UTC"
> date - days(3) + hours(6)
[1] "2008-12-29 06:00:00 UTC"
> date + 3 * seconds(10)
[1] "2009-01-01 00:00:30 UTC"
> 
> months(6) + days(1)
[1] "6m 1d 0H 0M 0S"
> 
> 
> 
> cleanEx()
> nameEx("tz")
> ### * tz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tz
> ### Title: Get/set time zone component of a date-time
> ### Aliases: tz tz<-
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- y <- ymd_hms("2012-03-26 10:10:00", tz = "UTC")
> tz(x)
[1] "UTC"
> 
> # Note that setting tz() preserved the clock time, which implies
> # that the actual instant in time is changing
> tz(y) <- "Pacific/Auckland"
> y
[1] "2012-03-26 10:10:00 NZDT"
> x - y
Time difference of 13 hours
> 
> # This is the same as force_tz()
> force_tz(x, "Pacific/Auckland")
[1] "2012-03-26 10:10:00 NZDT"
> 
> # Use with_tz() if you want to change the time zone, leave
> # the instant in time the same
> with_tz(x, "Pacific/Auckland")
[1] "2012-03-26 23:10:00 NZDT"
> 
> 
> 
> cleanEx()
> nameEx("week")
> ### * week
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: week
> ### Title: Get/set weeks component of a date-time
> ### Aliases: week week<- isoweek epiweek
> ### Keywords: chron manip utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> week(x)
[1] 13
> week(x) <- 1
> week(x) <- 54
> week(x) > 3
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("with_tz")
> ### * with_tz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_tz
> ### Title: Get date-time in a different time zone
> ### Aliases: with_tz with_tz.default
> ### Keywords: chron manip
> 
> ### ** Examples
> 
> x <- ymd_hms("2009-08-07 00:00:01", tz = "America/New_York")
> with_tz(x, "GMT")
[1] "2009-08-07 04:00:01 GMT"
> 
> 
> 
> cleanEx()
> nameEx("within-interval")
> ### * within-interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %within%
> ### Title: Does a date (or interval) fall within an interval?
> ### Aliases: %within% %within%,Interval,Interval-method
> ###   %within%,ANY,Interval-method %within%,Date,list-method
> ###   %within%,POSIXt,list-method %within%,Interval,list-method
> 
> ### ** Examples
> 
> int <- interval(ymd("2001-01-01"), ymd("2002-01-01"))
> int2 <- interval(ymd("2001-06-01"), ymd("2002-01-01"))
> 
> ymd("2001-05-03") %within% int # TRUE
[1] TRUE
> int2 %within% int # TRUE
[1] TRUE
> ymd("1999-01-01") %within% int # FALSE
[1] FALSE
> 
> ## recycling (carefully note the difference between using a vector of
> ## intervals and list of intervals for the second argument)
> dates <- ymd(c("2014-12-20", "2014-12-30", "2015-01-01", "2015-01-03"))
> blackout_vector <- c(
+   interval(ymd("2014-12-30"), ymd("2014-12-31")),
+   interval(ymd("2014-12-30"), ymd("2015-01-03"))
+ )
> dates %within% blackout_vector
[1] FALSE  TRUE FALSE  TRUE
> 
> ## within ANY of the intervals of a list
> dates <- ymd(c("2014-12-20", "2014-12-30", "2015-01-01", "2015-01-03"))
> lst <- list(
+   interval(ymd("2014-12-30"), ymd("2014-12-31")),
+   interval(ymd("2014-12-30"), ymd("2015-01-03"))
+ )
> dates %within% lst
[1] FALSE  TRUE  TRUE  TRUE
> 
> ## interval within a list of intervals
> int <- interval(
+   ymd("2014-12-20", "2014-12-30"),
+   ymd("2015-01-01", "2015-01-03")
+ )
> int %within% lst
[1] FALSE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("year")
> ### * year
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: year
> ### Title: Get/set years component of a date-time
> ### Aliases: year year<- isoyear epiyear
> ### Keywords: chron manip methods utilities
> 
> ### ** Examples
> 
> x <- ymd("2012-03-26")
> year(x)
[1] 2012
> year(x) <- 2001
> year(x) > 1995
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("ymd")
> ### * ymd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ymd
> ### Title: Parse dates with *y*ear, *m*onth, and *d*ay components
> ### Aliases: ymd ydm mdy myd dmy dym yq ym my
> ### Keywords: chron
> 
> ### ** Examples
> 
> x <- c("09-01-01", "09-01-02", "09-01-03")
> ymd(x)
[1] "2009-01-01" "2009-01-02" "2009-01-03"
> x <- c("2009-01-01", "2009-01-02", "2009-01-03")
> ymd(x)
[1] "2009-01-01" "2009-01-02" "2009-01-03"
> ymd(090101, 90102)
[1] "2009-01-01" "2009-01-02"
> now() > ymd(20090101)
[1] TRUE
> ## TRUE
> dmy(010210)
[1] "2010-02-01"
> mdy(010210)
[1] "2010-01-02"
> 
> yq('2014.2')
[1] "2014-04-01"
> 
> ## heterogeneous formats in a single vector:
> x <- c(20090101, "2009-01-02", "2009 01 03", "2009-1-4",
+        "2009-1, 5", "Created on 2009 1 6", "200901 !!! 07")
> ymd(x)
[1] "2009-01-01" "2009-01-02" "2009-01-03" "2009-01-04" "2009-01-05"
[6] "2009-01-06" "2009-01-07"
> 
> ## What lubridate might not handle:
> 
> ## Extremely weird cases when one of the separators is "" and some of the
> ## formats are not in double digits might not be parsed correctly:
> ## Not run: 
> ##D ymd("201002-01", "201002-1", "20102-1")
> ##D dmy("0312-2010", "312-2010")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ymd_hms")
> ### * ymd_hms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ymd_hms
> ### Title: Parse date-times with *y*ear, *m*onth, and *d*ay, *h*our,
> ###   *m*inute, and *s*econd components.
> ### Aliases: ymd_hms ymd_hm ymd_h dmy_hms dmy_hm dmy_h mdy_hms mdy_hm mdy_h
> ###   ydm_hms ydm_hm ydm_h
> ### Keywords: POSIXt parse
> 
> ### ** Examples
> 
> 
> x <- c("2010-04-14-04-35-59", "2010-04-01-12-00-00")
> ymd_hms(x)
[1] "2010-04-14 04:35:59 UTC" "2010-04-01 12:00:00 UTC"
> x <- c("2011-12-31 12:59:59", "2010-01-01 12:00:00")
> ymd_hms(x)
[1] "2011-12-31 12:59:59 UTC" "2010-01-01 12:00:00 UTC"
> 
> 
> ## ** heterogeneous formats **
> x <- c(20100101120101, "2009-01-02 12-01-02", "2009.01.03 12:01:03",
+        "2009-1-4 12-1-4",
+        "2009-1, 5 12:1, 5",
+        "200901-08 1201-08",
+        "2009 arbitrary 1 non-decimal 6 chars 12 in between 1 !!! 6",
+        "OR collapsed formats: 20090107 120107 (as long as prefixed with zeros)",
+        "Automatic wday, Thu, detection, 10-01-10 10:01:10 and p format: AM",
+        "Created on 10-01-11 at 10:01:11 PM")
> ymd_hms(x)
 [1] "2010-01-01 12:01:01 UTC" "2009-01-02 12:01:02 UTC"
 [3] "2009-01-03 12:01:03 UTC" "2009-01-04 12:01:04 UTC"
 [5] "2009-01-05 12:01:05 UTC" "2009-01-08 12:01:08 UTC"
 [7] "2009-01-06 12:01:06 UTC" "2009-01-07 12:01:07 UTC"
 [9] "2010-01-10 10:01:10 UTC" "2010-01-11 22:01:11 UTC"
> 
> ## ** fractional seconds **
> op <- options(digits.secs=3)
> dmy_hms("20/2/06 11:16:16.683")
[1] "2006-02-20 11:16:16.683 UTC"
> options(op)
> 
> ## ** different formats for ISO8601 timezone offset **
> ymd_hms(c("2013-01-24 19:39:07.880-0600",
+ "2013-01-24 19:39:07.880", "2013-01-24 19:39:07.880-06:00",
+ "2013-01-24 19:39:07.880-06", "2013-01-24 19:39:07.880Z"))
[1] "2013-01-25 01:39:07.88 UTC" "2013-01-24 19:39:07.88 UTC"
[3] "2013-01-25 01:39:07.88 UTC" "2013-01-25 01:39:07.88 UTC"
[5] "2013-01-24 19:39:07.88 UTC"
> 
> ## ** internationalization **
> ## Not run: 
> ##D x_RO <- "Ma 2012 august 14 11:28:30 "
> ##D   ymd_hms(x_RO, locale = "ro_RO.utf8")
> ## End(Not run)
> 
> ## ** truncated time-dates **
> x <- c("2011-12-31 12:59:59", "2010-01-01 12:11", "2010-01-01 12", "2010-01-01")
> ymd_hms(x, truncated = 3)
[1] "2011-12-31 12:59:59 UTC" "2010-01-01 12:11:00 UTC"
[3] "2010-01-01 12:00:00 UTC" "2010-01-01 00:00:00 UTC"
> x <- c("2011-12-31 12:59", "2010-01-01 12", "2010-01-01")
> ymd_hm(x, truncated = 2)
[1] "2011-12-31 12:59:00 UTC" "2010-01-01 12:00:00 UTC"
[3] "2010-01-01 00:00:00 UTC"
> ## ** What lubridate might not handle **
> ## Extremely weird cases when one of the separators is "" and some of the
> ## formats are not in double digits might not be parsed correctly:
> ## Not run: 
> ##D ymd_hm("20100201 07-01", "20100201 07-1", "20100201 7-01")
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.824 0.048 0.873 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
