
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shape"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('shape')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Arrowhead")
> ### * Arrowhead
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arrowhead
> ### Title: adds arrowheads to a plot
> ### Aliases: Arrowhead
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(main = "Arrowhead")
> Arrowhead(x0 = runif(10), y0 = runif(10), angle = runif(10)*360, 
+           arr.length = 0.3, arr.type = "circle", arr.col = "green")
> Arrowhead(x0 = runif(10), y0 = runif(10), angle = runif(10)*360, 
+           arr.length = 0.4, arr.type = "curved", arr.col = "red")
> Arrowhead(x0 = runif(10), y0 = runif(10), angle = runif(10)*360, 
+           arr.length = runif(10), arr.type = "triangle", 
+           arr.col = rainbow(10))
> 
> 
> 
> cleanEx()
> nameEx("Arrows")
> ### * Arrows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arrows
> ### Title: adds arrows with improved arrowhead to a plot
> ### Aliases: Arrows
> ### Keywords: aplot
> 
> ### ** Examples
> 
> xlim <- c(-5 , 5)
> ylim <- c(-10, 10)
> plot(0, type = "n", xlim = xlim, ylim = ylim, 
+      main = "Arrows,  type = 'curved'")
> x0 <- runif(100, xlim[1], xlim[2])
> y0 <- runif(100, ylim[1], ylim[2])
> x1 <- x0+runif(100, -1, 1)
> y1 <- y0+runif(100, -1, 1)
> Arrows(x0, y0, x1, y1, arr.length = runif(100), code = 2, 
+        arr.type = "curved", arr.col = 1:100, lcol = 1:100)
>   
> plot(0, type = "n", xlim = xlim, ylim = ylim, 
+      main = "Arrows,  type = 'circle'")
> x0 <- runif(100, xlim[1], xlim[2])
> y0 <- runif(100, ylim[1], ylim[2])
> x1 <- x0 + runif(100, -1, 1)
> y1 <- y0 + runif(100, -1, 1)
> Arrows(x0, y0, x1, y1, arr.length = 0.2, code = 3, 
+        arr.type = "circle", arr.col = "grey")
>   
> plot(0, type = "n", xlim = xlim, ylim = ylim, 
+      main = "Arrows,  type = 'ellipse'")
> Arrows(x0, y0, x1, y1, arr.length = 0.2, arr.width = 0.5, 
+        code = 3, arr.type = "ellipse",  arr.col = "grey")
> 
> curve(expr = sin(x), 0, 2*pi+0.25, main = "Arrows")
> x  <- seq(0, 2*pi, length.out = 10)
> xd <- x + 0.025
> Arrows(x, sin(x), xd, sin(xd), type = "triangle", 
+        arr.length = 0.5, segment = FALSE)
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
Warning in polygon(RR, col = arr.col[i], border = lcol[i], lty = lty[i],  :
  graphical parameter "type" is obsolete
>   
> xx <- seq(0, 10*pi, length.out = 1000)
> plot(sin(xx)*xx, cos(xx)*xx, type = "l", axes = FALSE, 
+      xlab = "", ylab = "", main = "Arrows,  type = 'curved'")
> x  <- seq(0, 10*pi, length.out = 20)
> x1 <- sin(x)*x
> y1 <- cos(x)*x
> xd <- x+0.01
> x2 <- sin(xd)*xd
> y2 <- cos(xd)*xd
> Arrows(x1, y1, x2, y2, arr.type = "curved", arr.length = 0.4, 
+        segment = FALSE, code = 1, arr.adj = 0.5 )
> 
> plot(sin(xx)*xx, cos(xx)*xx, type = "l", axes = FALSE, 
+      xlab = "", ylab = "", main = "Arrows,  type = 'T'")
> Arrows(x1, y1, x2, y2, arr.type = "T", arr.length = 0.4, 
+        code = 1, arr.lwd = 2)
Warning in arrows(x0, y0, x1, y1, code = code, length = arr.length/(2 *  :
  zero-length arrow is of indeterminate angle and so skipped
NULL
> 
> 
> # arguments passed to polygon:
> 
> xlim <- c(-5 , 5)
> ylim <- c(-10, 10)
> plot(0, type = "n", xlim = xlim, ylim = ylim, 
+      main = "Arrows,  type = 'curved'")
> x0 <- runif(100, xlim[1]-1, xlim[2]+0.5)  # exceeds the x-range
> y0 <- runif(100, ylim[1], ylim[2])
> x1 <- x0+runif(100, -1, 1)
> y1 <- y0+runif(100, -1, 1)
> Arrows(x0, y0, x1, y1, arr.length = runif(100), code = 2, 
+        arr.type = "curved", arr.col = 1:100, lcol = 1:100, xpd = TRUE)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("colorlegend")
> ### * colorlegend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorlegend
> ### Title: adds a color legend to a plot.
> ### Aliases: colorlegend
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(main = "colorlegend")
> colorlegend(zlim = c(0, 10))
> colorlegend(posx = c(0.8, 0.83), col = greycol(100), 
+             zlim = c(0, 1), digit = 1)
> colorlegend(posx = c(0.7, 0.73), left = TRUE, col = rainbow(100), 
+             zlim = c(0, 10), digit = 1, dz = 2.5)
> colorlegend(posx = c(0.5, 0.53), 
+             col = intpalette(c("red", "yellow", "black"), 100), 
+             zlim = c(0, 20), zval = c(1, 3, 7, 15))
> colorlegend(posy = c(0.0, 0.15), posx = c(0.2, 0.3), 
+             col = rainbow(100), zlim = c(0, 1), 
+             zlevels = NULL, main = "rainbow")
> colorlegend(posy = c(0.25, 0.4), posx = c(0.2, 0.3), 
+             zlim = c(0, 1), zlevels = NULL, main = "femmecol")
> colorlegend(posy = c(0.5, 0.65), posx = c(0.2, 0.3), 
+             col = terrain.colors(100), zlim = c(0, 1), 
+             zlevels = NULL, main = "terrain.colors")
> colorlegend(posy = c(0.75, 0.9), posx = c(0.2, 0.3), 
+             col = heat.colors(100), zlim = c(0, 1), 
+             zlevels = NULL, main = "heat.colors")
> 
> 
> 
> cleanEx()
> nameEx("cylindersegment")
> ### * cylindersegment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cylindersegment
> ### Title: adds part of a cylinder to a plot
> ### Aliases: cylindersegment
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(main = "cylindersegment")
> cylindersegment(mid = c(0.1, 0.5), rx = 0.1, ry = 0.1, 
+                 from = pi, to = 3*pi/2, col = "blue",  
+                 len = 0.5, delt = 1.1, lwd = 2, angle = 90)
> cylindersegment(mid = c(0.8, 0.5), rx = 0.1, ry = 0.1, 
+                 from = 0, to = pi/2, col = "red", len = 0.5, 
+                 delt = 1.0, lwd = 2, angle = 45)
> cylindersegment(mid = c(0.5, 0.5), rx = 0.1, ry = 0.1, 
+                 from = pi/2, to = pi, col = "lightblue", 
+                 len = 0.2, delt = 1.5, lwd = 2)  
> for (i in seq(0.1, 0.9, 0.1))
+   cylindersegment(mid = c(i, 0.9), rx = 0.035, ry = 0.05, 
+                   from = pi/2, to = 3*pi/2, col = "darkblue", 
+                   len = 0.1, angle = 90)
> 
> 
> 
> cleanEx()
> nameEx("drapecol")
> ### * drapecol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drapecol
> ### Title: draping colors over a persp plot
> ### Aliases: drapecol
> ### Keywords: aplot
> 
> ### ** Examples
> 
> persp(volcano, theta = 135, phi = 30, col = drapecol(volcano),
+       main = "drapecol")
> persp(volcano, theta = 135, phi = 30, col = drapecol(volcano),
+       border = NA, main = "drapecol")
> 
> 
> 
> cleanEx()
> nameEx("femmecol")
> ### * femmecol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: femmecol
> ### Title: red-green-blue color palette
> ### Aliases: femmecol
> ### Keywords: color
> 
> ### ** Examples
> 
> filled.contour(volcano, color = femmecol, asp = 1, main = "femmecol")
> femmecol(10)
 [1] "#00008F" "#0000F3" "#0063FF" "#00D4FF" "#47FFB8" "#B8FF47" "#FFD500"
 [8] "#FF6300" "#F10000" "#800000"
> image(matrix(nrow = 1, ncol = 100, data = 1:100), 
+       col = femmecol(100), main = "femmecol")
> 
> 
> 
> cleanEx()
> nameEx("filledcircle")
> ### * filledcircle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filledcircle
> ### Title: adds colored circle to a plot
> ### Aliases: filledcircle
> ### Keywords: aplot
> 
> ### ** Examples
> 
> color <-graycol(n = 50)
> dr    <- 0.05
> emptyplot(xlim = c(-2, 2), col = color[length(color)], 
+           main = "filledcircle")
> filledcircle(r1 = 1, mid = c(1, 1), dr = dr, 
+           col = shadepalette(endcol = "darkblue")) 
> filledcircle(r1 = 1, mid = c(-1, -1), dr = dr, 
+           col = shadepalette(endcol = "darkred"))
> filledcircle(r1 = 1, r2 = 0.5, mid = c(0, 0), dr = dr, 
+           col = c(rev(color), color))
> filledcircle(r1 = 1, mid = c(1, -1), dr = dr, 
+           col = intpalette(c("red", "blue", "orange"), 100)) 
> filledcircle(mid = c(-1, 1))
>   
> emptyplot(main = "filledcircle")
> 
> for (i in seq(0, 0.45, 0.05)) 
+    filledcircle(r1 = i+0.05, r2 = i, 
+                 mid = c(0.5, 0.5), col = i*20)
> 
> 
> 
> cleanEx()
> nameEx("filledcylinder")
> ### * filledcylinder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filledcylinder
> ### Title: adds a colored and rotated cylinder to a plot
> ### Aliases: filledcylinder
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(c(-1.2, 1.2), c(-1, 1), main = "filledcylinder")
> col  <- c(rev(greycol(n = 50)), greycol(n = 50))
> col2 <- shadepalette("red", "blue", n = 50)
> col3 <- shadepalette("yellow", "black", n = 50)
> filledcylinder(rx = 0., ry = 0.2, len = 0.25, angle = 0, col = col,  
+           mid = c(-1, 0), topcol = col[25])          
> filledcylinder(rx = 0., ry = 0.2, angle = 90, col = col, 
+           mid = c(-0.5, 0), topcol = col[25])          
> filledcylinder(rx = 0.1, ry = 0.2, angle = 90, col = c(col2, rev(col2)), 
+           mid = c(0.45, 0), topcol = col2[25])          
> filledcylinder(rx = 0.05, ry = 0.2, angle = 90, col = c(col3, rev(col3)), 
+           mid = c(0.9, 0), topcol = col3[25])          
> filledcylinder(rx = 0.1, ry = 0.2, angle = 90, col = "white",  
+           lcol = "black", lcolint = "grey")          
>   
> emptyplot(c(-1, 1), c(-1, 1), main = "filledcylinder")
> col  <- shadepalette("blue", "black", n = 50)
> col2 <- shadepalette("red", "black", n = 50)
> col3 <- shadepalette("yellow", "black", n = 50)
> filledcylinder(rx = 0.025, ry = 0.2, angle = 90, col = c(col2, rev(col2)), 
+           mid = c(-0.8, 0), topcol = col2[25], delt = -1, lcol = "black")
> filledcylinder(rx = 0.1, ry = 0.2, angle = 00, col = c(col, rev(col)), 
+           mid = c(0.0, 0.0), topcol = col, delt = -1.2, lcol = "black")
> filledcylinder(rx = 0.075, ry = 0.2, angle = 90, col = c(col3, rev(col3)), 
+           mid = c(0.8, 0), topcol = col3[25], delt = 0.0, lcol = "black")
> 
> 
> 
> cleanEx()
> nameEx("filledellipse")
> ### * filledellipse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filledellipse
> ### Title: adds a colored and rotated ellipse to a plot
> ### Aliases: filledellipse
> ### Keywords: aplot
> 
> ### ** Examples
> 
> color <- greycol(50)
> dr    <- 0.05
> emptyplot(xlim = c(-2, 2), ylim = c(-2, 2), col = color[length(color)], 
+           main = "filledellipse")
> filledellipse(rx1 = 1, mid = c(1, 1) , dr = dr, 
+               col = shadepalette(endcol = "darkblue")) 
> filledellipse(rx1 = 1, ry1 = 0.5, mid = c(-1, -1), dr = dr, angle = 90, 
+               col = shadepalette(endcol = "darkred"))
> filledellipse(rx1 = 1, ry1 = 0.5, rx2 = 0.5, dr = dr, mid = c(0, 0), 
+               col = c(rev(color), color))
> filledellipse(rx1 = 0.5, mid = c(1, -1), dr = dr, from = pi,  to = 1.5*pi, 
+               col = rev(shadepalette(endcol = "black"))) 
> filledellipse(mid = c(-1, 1))  
>   
> emptyplot(xlim = c(-2, 2), ylim = c(-2, 2), main = "filledellipse")
> filledellipse(rx1 = 0.75, mid = c(-1, 1), col = greycol(100) , dr = dr,  
+               values = cbind (1:100, (1:100)^0.5))
> filledellipse(rx1 = 0.75, mid = c(1, 1), col = greycol(100)  , dr = dr,  
+               values = cbind (1:100, (1:100)))
> filledellipse(rx1 = 0.75, mid = c(-1, -1), col = greycol(100), dr = dr,  
+               values = cbind (1:100, (1:100)^2))
> filledellipse(rx1 = 0.75, mid = c(1, -1), col = greycol(100) , dr = dr,  
+               values = cbind (1:100, (1:100)^5))
> 
> 
> 
> cleanEx()
> nameEx("filledmultigonal")
> ### * filledmultigonal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filledmultigonal
> ### Title: adds a colored and rotated multigonal shape to a plot
> ### Aliases: filledmultigonal
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(c(-1, 1), main = "filledmultigonal")
> 
> filledmultigonal(rx = 0.25, ry = 0.125, nr = 3, mid = c(-0.75, 0.75), 
+             angle = 45, col = shadepalette("red", "blue", n = 50))
> filledmultigonal(rx = 0.125, ry = 0.25, nr = 3, mid = c(-0.25, 0.75), 
+             col = shadepalette("red", "yellow", n = 50))
> filledmultigonal(rx = 0.25, ry = 0.25 , nr = 3, mid = c(0.25, 0.75),  
+             col = c("red", "orange"))
> filledmultigonal(rx = 0.25, ry = 0.25 , nr = 3, mid = c(0.75, 0.75), 
+             angle = 90,  col = "red")
>  
> filledmultigonal(rx = 0.25, ry = 0.25, nr = 4, mid = c(-0.75, 0.25), 
+             angle = 0, col = shadepalette("red", "blue", n = 50))
> filledmultigonal(rx = 0.25, ry = 0.25, nr = 4, mid = c(-0.25, 0.25),  
+             angle = 45, col = shadepalette("red", "blue", n = 50))
> filledmultigonal(rx = 0.25, ry = 0.125, nr = 4, mid = c(0.25, 0.25), 
+             angle = 0, col = shadepalette("red", "blue", n = 50))
> filledmultigonal(rx = 0.25, ry = 0.125, nr = 4, mid = c(0.75, 0.25), 
+             angle = 45, col = shadepalette("red", "blue", n = 50))
>   
> filledmultigonal(rx = 0.25, ry = 0.25, nr = 5, mid = c(-0.75, -0.25),  
+             angle = 0, col = shadepalette("darkgreen", "lightgreen", n = 50))
> filledmultigonal(rx = 0.25, angle = 0, nr = 5, mid = c(-0.25, -0.25), 
+             col = rainbow(50))
> filledmultigonal(rx = 0.25, angle = 30, nr = 6, mid = c(0.25, -0.25), 
+             col = femmecol(50))
> filledmultigonal(rx = 0.25, ry = 0.125, angle = 30, nr = 6, mid = c(0.75, -0.25), 
+             col = "black")
>   
> filledmultigonal(rx = 0.25, col = "darkblue", nr = 7, mid = c(-0.75, -0.75))
> filledmultigonal(rx = 0.25, col = "darkblue", nr = 9, mid = c(-0.25, -0.75))
> filledmultigonal(rx = 0.25, col = "darkblue", nr = 3.7, mid = c(0.25, -0.75))
> filledmultigonal(rx = 0.25, col = "darkblue", nr = 4.5, mid = c(0.75, -0.75))
> 
> 
> 
> cleanEx()
> nameEx("filledrectangle")
> ### * filledrectangle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filledrectangle
> ### Title: adds a colored and rotated rectangle to a plot
> ### Aliases: filledrectangle
> ### Keywords: aplot
> 
> ### ** Examples
> 
> color <- shadepalette(grey(0.3), "lightblue", n = 50)
> emptyplot(main = "filledrectangle")
> filledrectangle(wx = 0.5, wy = 0.5, col = color, 
+                 mid = c(0.5, 0.5), angle = 0)
> filledrectangle(wx = 0.25, wy = 0.25, col = "darkblue", 
+                 mid = c(0.5, 0.5), angle = 45)
> filledrectangle(wx = 0.125, wy = 0.125, col = c("lightblue","blue"),
+                 mid = c(0.5, 0.5), angle = 90)
>   
> color <- shadepalette(grey(0.3), "blue", n = 50)
> emptyplot(c(-1, 1), main = "filledrectangle")
> filledrectangle(wx = 0.5, wy = 0.5, col = color, 
+                 mid = c(0, 0), angle = 0)
> filledrectangle(wx = 0.5, wy = 0.5, col = color, 
+                 mid = c(0.5, 0.5), angle = 90)
> filledrectangle(wx = 0.5, wy = 0.5, col = color, 
+                 mid = c(-0.5, -0.5), angle = -90)
> filledrectangle(wx = 0.5, wy = 0.5, col = color, 
+                 mid = c(0.5, -0.5), angle = 180)
> filledrectangle(wx = 0.5, wy = 0.5, col = color, 
+                 mid = c(-0.5, 0.5), angle = 270)
> 
> 
> 
> cleanEx()
> nameEx("filledshape")
> ### * filledshape
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filledshape
> ### Title: adds a colored shape to a plot
> ### Aliases: filledshape
> ### Keywords: aplot
> 
> ### ** Examples
> 
> #an egg
> color <-greycol(100)
> emptyplot(c(-3.2, 3.2), col = color[length(color)], main = "filledshape")
> b <- 4
> a <- 9
> x      <- seq(-sqrt(a), sqrt(a), by = 0.01)
> g      <- b-b/a*x^2 - 0.2*b*x + 0.2*b/a*x^3
> g[g<0] <- 0
> x1     <- c(x, rev(x))
> g1     <- c(sqrt(g), rev(-sqrt(g)))
> xouter <- cbind(x1, g1)
> xouter <- rbind(xouter, xouter[1,])
> filledshape(xouter, xyinner = c(-1, 0), col = color)
>   
> # a mill
> color <- shadepalette(grey(0.3), "yellow", n = 50)
> emptyplot(c(-3.3, 3.3), col = color[length(color)], main = "filledshape")
> x <- seq(0, 0.8*pi, pi/100)
> y <- sin(x)
> xouter <- cbind(x, y)
> 
> for (i in seq(0, 360, 60)) 
+   xouter <- rbind(xouter, rotatexy(cbind(x, y), mid = c(0, 0), angle = i))
> filledshape(xouter, c(0, 0), col = color)
>   
> # abstract art
> emptyplot(col = "darkgrey", main = "filledshape")
> filledshape(matrix(ncol = 2, runif(100)), col = "darkblue")
> 
> 
> 
> cleanEx()
> nameEx("getellipse")
> ### * getellipse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getellipse
> ### Title: x-y coordinates of ellipse
> ### Aliases: getellipse
> ### Keywords: dplot
> 
> ### ** Examples
> 
> plot(getellipse(1, from = 0, to = pi/2), type = "l", col = "red",
+      lwd = 2, main = "getellipse")
> lines(getellipse(0.5, 0.25, mid = c(0.5, 0.5)), type = "l", 
+       col = "blue", lwd = 2)
> lines(getellipse(0.5, 0.25, mid = c(0.5, 0.5), angle = 45), 
+       type = "l", col = "green", lwd = 2)
> 
> lines(getellipse(0.2, 0.2, mid = c(0.5, 0.5), from = 0, to = pi/2), 
+       type = "l", col = "orange", lwd = 2)
> lines(getellipse(0.2, 0.2, mid = c(0.5, 0.5), from = pi/2, to = 0), 
+       type = "l", col = "black", lwd = 2)
> lines(getellipse(0.1, 0.1, mid = c(0.75, 0.5), from = -pi/2, to = pi/2), 
+       type = "l", col = "black", lwd = 2)
> 
> emptyplot(main = "getellipse")
> col <- femmecol(90)
> for (i in seq(0, 180, by = 2)) 
+       lines(getellipse(0.5, 0.25, mid = c(0.5, 0.5), angle = i),
+             type = "l", col = col[(i/2)+1], lwd = 2)
> 
> 
> 
> cleanEx()
> nameEx("greycol")
> ### * greycol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: greycol
> ### Title: white-black color palette
> ### Aliases: greycol graycol
> ### Keywords: color
> 
> ### ** Examples
> 
> filled.contour(volcano, color = graycol, asp = 1, main = "greycol,graycol")
> graycol(10)
 [1] "#FFFFFF" "#EBEBEB" "#D7D7D7" "#C4C4C4" "#B0B0B0" "#9C9C9C" "#888888"
 [8] "#747474" "#606060" "#4C4C4C"
> image(matrix(nrow = 1, ncol = 100, data = 1:100),
+       col = graycol(100), main = "greycol,graycol")
> 
> 
> 
> cleanEx()
> nameEx("intpalette")
> ### * intpalette
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intpalette
> ### Title: color palettes
> ### Aliases: intpalette
> ### Keywords: color
> 
> ### ** Examples
> 
> intpalette(c("white", "black"), n = 10)
 [1] "#FFFFFF" "#E3E3E3" "#C6C6C6" "#AAAAAA" "#8E8E8E" "#717171" "#555555"
 [8] "#393939" "#1C1C1C" "#000000"
> grey(seq(1, 0, length.out = 10))
 [1] "#FFFFFF" "#E3E3E3" "#C6C6C6" "#AAAAAA" "#8E8E8E" "#717171" "#555555"
 [8] "#393939" "#1C1C1C" "#000000"
> image(matrix(nrow = 1,ncol = 100, data = 1:100),
+       col = intpalette(c("red", "blue"), numcol = 100),
+       main = "intpalette")
> image(matrix(nrow = 1, ncol = 100, data = 1:100),
+       col = intpalette(c("red", "blue", "yellow"), numcol = 100),
+       main = "intpalette")
> 
> 
> 
> cleanEx()
> nameEx("plotcircle")
> ### * plotcircle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotcircle
> ### Title: adds part of a colored circle to a plot
> ### Aliases: plotcircle
> ### Keywords: aplot
> 
> ### ** Examples
> 
> # symmetrical axes
> emptyplot(c(0, 1))
> plotcircle(mid = c(0.5, 0.5), r = 0.25, from = 0, to = 3*pi/2,
+            arrow = TRUE, arr.pos = 0.5, col = "red")
> # symmetrical
> plotellipse(mid = c(0.5, 0.5), rx = 0.2, ry = 0.2, 
+            arrow = TRUE, arr.pos = 0.5, col = "blue")
> 
> 
> #non-symmetrical axes
> emptyplot(c(0, 1), c(0, 2), main = "plotcircle", asp = FALSE)
> plotcircle(mid = c(0.5, 0.5), r = 0.25, from = 0, to = 3*pi/2,
+            arrow = TRUE, arr.pos = 0.5, col = "red")
> plotellipse(mid = c(0.5, 0.5), rx = 0.25, ry = 0.25, 
+            arrow = TRUE, arr.pos = 0.5, col = "blue")
> 
> 
> 
> cleanEx()
> nameEx("plotellipse")
> ### * plotellipse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotellipse
> ### Title: adds part of a colored and rotated ellipse to a plot
> ### Aliases: plotellipse
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(c(-1, 1), main = "plotellipse")
> plotellipse(rx = 0.8, ry = 0.3, angle = 60, col = "blue")
> plotellipse(rx = 1.0, ry = 0.6, angle = 0, from = pi, to = 2*pi,
+             arrow = TRUE, arr.pos = seq(0.1, 0.5, by = 0.1),
+             arr.col = rainbow(5))
> plotellipse(rx = 1.0, ry = 0.6, angle = 30, from = pi, to = 1.2*pi,
+             col = "red")
> plotellipse(rx = 0.1, ry = 0.6, from = 1.5*pi, to = pi,
+             lcol = "orange", mid = c(0.2,0.2))
> plotellipse(rx = 0.1, ry = 0.6, angle = 30, from = 1.5*pi, to = pi,
+             lcol = "orange", mid = c(0.2,0.2))
> 
> 
> 
> cleanEx()
> nameEx("rotatexy")
> ### * rotatexy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rotatexy
> ### Title: rotates 2-column matrix around a midpoint
> ### Aliases: rotatexy
> ### Keywords: manip
> 
> ### ** Examples
> 
> x <- seq(0, 2*pi, pi/100)
> y <- sin(x)
> cols <- intpalette(c("blue", "green", "yellow", "red"), n = 500)
> cols <- c(cols,rev(cols))
> plot(x, y, type = "l", ylim = c(-3, 3), main = "rotatexy", 
+      col = cols[1], lwd = 2)
> for (i in 2:1000) 
+   lines(rotatexy( cbind(x, y), angle = 0.18*i),
+         col = cols[i], lwd = 2)
>   
> cols <- femmecol(1000)
> plot(x, y, xlim = c(-1, 1), ylim = c(-1, 1), main = "rotatexy",
+      col = cols[1], type = "n")
> for (i in 2:1000) {
+   xy <- rotatexy(c(0, 1), angle = 0.36*i, mid = c(0,0))
+   points(xy[1], xy[2], col = cols[i], pch = ".", cex = 2)
+ }
> 
> 
> 
> cleanEx()
> nameEx("roundrect")
> ### * roundrect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: roundrect
> ### Title: adds a rounded rectangular box to a plot
> ### Aliases: roundrect
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot(c(-0.1, 1.1), main = "roundrect")
> for (i in 1:10) 
+   roundrect(mid = runif(2), col = i, radx = 0.1, rady = 0.05)
> for (i in 1:5)
+   roundrect(mid = runif(2), col = greycol(20), radx = 0.05,
+             rady = 0.05, angle = runif(1)*360)
> 
> 
> 
> cleanEx()
> nameEx("shadepalette")
> ### * shadepalette
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shadepalette
> ### Title: color palette inbetween two extremes
> ### Aliases: shadepalette
> ### Keywords: color
> 
> ### ** Examples
> 
> shadepalette(n = 10, "white", "black")
 [1] "#000000" "#1C1C1C" "#393939" "#555555" "#717171" "#8E8E8E" "#AAAAAA"
 [8] "#C6C6C6" "#E3E3E3" "#FFFFFF"
> image(matrix(nrow = 1, ncol = 100, data = 1:100),
+       col = shadepalette(100, "red", "blue"), main = "shadepalette")
> 
> 
> 
> cleanEx()
> nameEx("shape")
> ### * shape
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shape-package
> ### Title: Functions for plotting graphical shapes, colors
> ### Aliases: shape-package shape
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## show examples (see respective help pages for details)
> ##D example(rotatexy)
> ##D example(filledshape)
> ##D 
> ##D ## run demos
> ##D demo("colorshapes") # creating colored shapes
> ##D 
> ##D ## open the directory with source code of demos
> ##D browseURL(paste(system.file(package="shape"), "/demo", sep=""))
> ##D 
> ##D ## show package vignette
> ##D vignette("shape")
> ##D edit(vignette("shape"))
> ##D browseURL(paste(system.file(package="shape"), "/doc", sep=""))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("textflag")
> ### * textflag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: textflag
> ### Title: adds a filled rounded rectangular box with a text to a plot
> ### Aliases: textflag
> ### Keywords: aplot
> 
> ### ** Examples
> 
> emptyplot()
> textflag(mid = c(0.5, 0.5), radx = 0.5, rady = 0.1, 
+          lcol = "white",  lab = "hello", cex = 5, font = 2:3)
>  
> textflag(mid = c(0.5, 0.15), radx = 0.5, rady = 0.1, 
+          rx = 0.3,lcol = "black", lab = "hello 2", cex = 4, 
+          font = 2, angle = 20, tcol = "darkblue")
>   
> textflag(mid = c(0.5, 0.85), radx = 0.5, rady = 0.1, rx = 0.03,
+          lcol = "white", lab = "hello 3", cex = 4, font = 2, 
+          leftright = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("writelabel")
> ### * writelabel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writelabel
> ### Title: adds a label next to a plot
> ### Aliases: writelabel
> ### Keywords: aplot
> 
> ### ** Examples
> 
> plot(runif(2), main = "writelabel")
> writelabel("A")
> writelabel("B", at = 0)
> writelabel("C", at = 1)
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.923 0.09 3.015 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
