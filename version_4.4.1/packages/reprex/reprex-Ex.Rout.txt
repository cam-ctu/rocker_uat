
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "reprex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('reprex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("reprex")
> ### * reprex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reprex
> ### Title: Render a reprex
> ### Aliases: reprex
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # put some code like this on the clipboard
> ##D # (y <- 1:4)
> ##D # mean(y)
> ##D reprex()
> ##D 
> ##D # provide code as an expression
> ##D reprex(rbinom(3, size = 10, prob = 0.5))
> ##D reprex({y <- 1:4; mean(y)})
> ##D reprex({y <- 1:4; mean(y)}, style = TRUE)
> ##D 
> ##D # note that you can include newlines in those brackets
> ##D # in fact, that is often a good idea
> ##D reprex({
> ##D   x <- 1:4
> ##D   y <- 2:5
> ##D   x + y
> ##D })
> ##D 
> ##D ## provide code via character vector
> ##D reprex(input = c("x <- 1:4", "y <- 2:5", "x + y"))
> ##D 
> ##D ## if just one line, terminate with '\n'
> ##D reprex(input = "rnorm(3)\n")
> ##D 
> ##D ## customize the output comment prefix
> ##D reprex(rbinom(3, size = 10, prob = 0.5), comment = "#;-)")
> ##D 
> ##D # override a default chunk option
> ##D reprex({
> ##D   #+ setup, include = FALSE
> ##D   knitr::opts_chunk$set(collapse = FALSE)
> ##D 
> ##D   #+ actual-reprex-code
> ##D   (y <- 1:4)
> ##D   median(y)
> ##D })
> ##D 
> ##D # add prose, use general markdown formatting
> ##D reprex({
> ##D   #' # A Big Heading
> ##D   #'
> ##D   #' Look at my cute example. I love the
> ##D   #' [reprex](https://github.com/tidyverse/reprex#readme) package!
> ##D   y <- 1:4
> ##D   mean(y)
> ##D }, advertise = FALSE)
> ##D 
> ##D # read reprex from file and write resulting files to that location
> ##D tmp <- file.path(tempdir(), "foofy.R")
> ##D writeLines(c("x <- 1:4", "mean(x)"), tmp)
> ##D reprex(input = tmp)
> ##D list.files(dirname(tmp), pattern = "foofy")
> ##D 
> ##D # clean up
> ##D file.remove(list.files(dirname(tmp), pattern = "foofy", full.names = TRUE))
> ##D 
> ##D # write reprex to file AND keep figure local too, i.e. don't post to imgur
> ##D tmp <- file.path(tempdir(), "foofy")
> ##D dir.create(tmp)
> ##D reprex({
> ##D   #+ setup, include = FALSE
> ##D   knitr::opts_knit$set(upload.fun = identity)
> ##D 
> ##D   #+ actual-reprex-code
> ##D   #' Some prose
> ##D   ## regular comment
> ##D   (x <- 1:4)
> ##D   median(x)
> ##D   plot(x)
> ##D   }, wd = tmp)
> ##D list.files(dirname(tmp), pattern = "foofy")
> ##D 
> ##D # clean up
> ##D unlink(tmp, recursive = TRUE)
> ##D 
> ##D ## target venue = R, also good for email or Slack snippets
> ##D ret <- reprex({
> ##D   x <- 1:4
> ##D   y <- 2:5
> ##D   x + y
> ##D }, venue = "R")
> ##D ret
> ##D 
> ##D ## target venue = html
> ##D ret <- reprex({
> ##D   x <- 1:4
> ##D   y <- 2:5
> ##D   x + y
> ##D }, venue = "html")
> ##D ret
> ##D 
> ##D ## include prompt and don't comment the output
> ##D ## use this when you want to make your code hard to execute :)
> ##D reprex({
> ##D   #+ setup, include = FALSE
> ##D   knitr::opts_chunk$set(comment = NA, prompt = TRUE)
> ##D 
> ##D   #+ actual-reprex-code
> ##D   x <- 1:4
> ##D   y <- 2:5
> ##D   x + y
> ##D })
> ##D 
> ##D ## leading prompts are stripped from source
> ##D reprex(input = c("> x <- 1:3", "> median(x)"))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("reprex_document")
> ### * reprex_document
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reprex_document
> ### Title: reprex output format
> ### Aliases: reprex_document
> 
> ### ** Examples
> 
> reprex_document()
$knitr
$knitr$opts_chunk
$knitr$opts_chunk$dev
[1] "png"

$knitr$opts_chunk$dpi
[1] 96

$knitr$opts_chunk$fig.width
[1] 7

$knitr$opts_chunk$fig.height
[1] 5

$knitr$opts_chunk$fig.retina
NULL

$knitr$opts_chunk$collapse
[1] TRUE

$knitr$opts_chunk$error
[1] TRUE

$knitr$opts_chunk$comment
[1] "#>"

$knitr$opts_chunk$R.options
$knitr$opts_chunk$R.options$tidyverse.quiet
[1] TRUE

$knitr$opts_chunk$R.options$tidymodels.quiet
[1] TRUE



$knitr$opts_knit
$knitr$opts_knit$upload.fun
function (file, key = xfun::env_option("knitr.imgur.key", "9f3460e67f308f6"), 
    ...) 
{
    xfun::upload_imgur(file, key, ..., include_xml = TRUE)
}
<bytecode: 0x55b4c61ed668>
<environment: namespace:knitr>


$knitr$knit_hooks
NULL

$knitr$opts_hooks
NULL

$knitr$opts_template
NULL


$pandoc
$pandoc$to
[1] "gfm-yaml_metadata_block"

$pandoc$from
[1] "markdown+autolink_bare_uris+tex_math_single_backslash-implicit_figures"

$pandoc$args
[1] "--wrap=preserve"

$pandoc$keep_tex
[1] FALSE

$pandoc$latex_engine
[1] "pdflatex"

$pandoc$ext
[1] ".md"

$pandoc$convert_fun
NULL


$keep_md
[1] FALSE

$clean_supporting
[1] FALSE

$df_print
[1] "default"

$pre_knit
function (input, ...) 
{
    knit_input <- sub("[.]R$", ".spin.Rmd", input)
    input_lines <- read_lines(knit_input)
    input_lines <- c(rprofile_alert(venue), "", input_lines)
    input_lines <- c(reprex_opts(venue), "", input_lines)
    if (isTRUE(advertise)) {
        input_lines <- c(input_lines, "", ad(venue))
    }
    if (isTRUE(std_out_err)) {
        input_lines <- c(input_lines, "", std_out_err_stub(input, 
            venue))
    }
    if (isTRUE(session_info)) {
        input_lines <- c(input_lines, "", si(venue))
    }
    write_lines(input_lines, knit_input)
}
<bytecode: 0x55b4c698efb8>
<environment: 0x55b4c6990ae8>

$post_knit
NULL

$pre_processor
NULL

$intermediates_generator
NULL

$post_processor
NULL

$file_scope
NULL

$on_exit
function () 
{
    if (is.function(base)) 
        base()
    if (is.function(overlay)) 
        overlay()
}
<bytecode: 0x55b4c6e5a0d0>
<environment: 0x55b4c6e5e470>

attr(,"class")
[1] "rmarkdown_output_format"
> 
> 
> 
> cleanEx()
> nameEx("reprex_locale")
> ### * reprex_locale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reprex_locale
> ### Title: Render a reprex in a specific locale
> ### Aliases: reprex_locale
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # if all you want to do is make sure messages are in English
> ##D reprex_locale("a" / 2)
> ##D 
> ##D # change messages to a specific language
> ##D reprex_locale(
> ##D   {
> ##D     "a" / 2
> ##D   },
> ##D   language = "it"
> ##D )
> ##D 
> ##D reprex_locale(
> ##D   {
> ##D     "a" / 2
> ##D   },
> ##D   language = "fr_CA"
> ##D )
> ##D 
> ##D reprex_locale(
> ##D   {
> ##D     "a" / 2
> ##D   },
> ##D   language = "pt_BR"
> ##D )
> ##D 
> ##D # get day-of-week and month to print in French (not Windows)
> ##D reprex_locale(
> ##D   {
> ##D     format(as.Date(c("2019-01-01", "2019-02-01")), "%a %b %d")
> ##D   },
> ##D   locale = c(LC_TIME = "fr_FR")
> ##D )
> ##D 
> ##D # get day-of-week and month to print in French (Windows)
> ##D # assumes that the relevant language is installed on the system
> ##D # LC_TIME can also be specified as "French" or "French_France" here
> ##D reprex_locale(
> ##D   {
> ##D     format(as.Date(c("2019-01-01", "2019-02-01")), "%a %b %d")
> ##D   },
> ##D   locale = c(LC_TIME = "French_France.1252")
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("reprex_render")
> ### * reprex_render
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reprex_render
> ### Title: Render a document in a new R session
> ### Aliases: reprex_render
> 
> ### ** Examples
> 
> ## Not run: 
> ##D reprex_render("input.Rmd")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("un-reprex")
> ### * un-reprex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: un-reprex
> ### Title: Un-render a reprex
> ### Aliases: un-reprex reprex_invert reprex_clean reprex_rescue
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # a roundtrip: R code --> rendered reprex, as gfm --> R code
> ##D original <- file.path(tempdir(), "original.R")
> ##D writeLines(glue::glue("
> ##D   #' Some text
> ##D   #+ chunk-label-and-options-cannot-be-recovered, message = TRUE
> ##D   (x <- 1:4)
> ##D   #' More text
> ##D   y <- 2:5
> ##D   x + y"), con = original)
> ##D reprex(input = original, html_preview = FALSE, advertise = FALSE)
> ##D reprexed <- sub("[.]R$", "_reprex.md", original)
> ##D writeLines(readLines(reprexed))
> ##D unreprexed <- reprex_invert(input = reprexed)
> ##D writeLines(unreprexed)
> ##D 
> ##D # clean up
> ##D file.remove(
> ##D   list.files(dirname(original), pattern = "original", full.names = TRUE)
> ##D )
> ## End(Not run)
> ## Not run: 
> ##D # a roundtrip: R code --> rendered reprex, as R code --> original R code
> ##D code_in <- c(
> ##D   "# a regular comment, which is retained",
> ##D   "(x <- 1:4)",
> ##D   "median(x)"
> ##D )
> ##D reprexed <- reprex(input = code_in, venue = "r", advertise = FALSE)
> ##D writeLines(reprexed)
> ##D code_out <- reprex_clean(input = reprexed)
> ##D writeLines(code_out)
> ##D identical(code_in, code_out)
> ## End(Not run)
> ## Not run: 
> ##D # rescue a reprex that was copied from a live R session
> ##D from_r_console <- c(
> ##D   "> # a regular comment, which is retained",
> ##D   "> (x <- 1:4)",
> ##D   "[1] 1 2 3 4",
> ##D   "> median(x)",
> ##D   "[1] 2.5"
> ##D )
> ##D rescued <- reprex_rescue(input = from_r_console)
> ##D writeLines(rescued)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.245 0.008 0.267 0.005 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
