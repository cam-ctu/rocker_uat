
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "usethis"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('usethis')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("badges")
> ### * badges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: badges
> ### Title: README badges
> ### Aliases: badges use_badge use_cran_badge use_bioc_badge
> ###   use_lifecycle_badge use_binder_badge use_posit_cloud_badge
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_cran_badge()
> ##D use_lifecycle_badge("stable")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("browse-this")
> ### * browse-this
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: browse-this
> ### Title: Visit important project-related web pages
> ### Aliases: browse-this browse_package browse_project browse_github
> ###   browse_github_issues browse_github_pulls browse_github_actions
> ###   browse_circleci browse_cran
> 
> ### ** Examples
> 
> # works on the active project
> # browse_project()
> 
> browse_package("httr")
> browse_github("gh")
☐ Open URL <https://github.com/r-lib/gh>.
> browse_github_issues("fs")
☐ Open URL <https://github.com/r-lib/fs/issues/>.
> browse_github_issues("fs", 1)
☐ Open URL <https://github.com/r-lib/fs/issues/1>.
> browse_github_pulls("curl")
☐ Open URL <https://github.com/jeroen/curl/pulls/>.
> browse_github_pulls("curl", 183)
☐ Open URL <https://github.com/jeroen/curl/pull/183>.
> browse_cran("MASS")
☐ Open URL <https://cran.r-project.org/package=MASS>.
> 
> 
> 
> cleanEx()
> nameEx("create_from_github")
> ### * create_from_github
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_from_github
> ### Title: Create a project from a GitHub repo
> ### Aliases: create_from_github
> 
> ### ** Examples
> 
> ## Not run: 
> ##D create_from_github("r-lib/usethis")
> ##D 
> ##D # repo_spec can be a URL
> ##D create_from_github("https://github.com/r-lib/usethis")
> ##D 
> ##D # a URL repo_spec also specifies the host (e.g. GitHub Enterprise instance)
> ##D create_from_github("https://github.acme.com/OWNER/REPO")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("edit_file")
> ### * edit_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edit_file
> ### Title: Open file for editing
> ### Aliases: edit_file edit_template
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D edit_file("DESCRIPTION")
> ##D edit_file("~/.gitconfig")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("git-default-branch")
> ### * git-default-branch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: git-default-branch
> ### Title: Get or set the default Git branch
> ### Aliases: git-default-branch git_default_branch
> ###   git_default_branch_configure git_default_branch_rediscover
> ###   git_default_branch_rename
> 
> ### ** Examples
> 
> ## Not run: 
> ##D git_default_branch()
> ## End(Not run)
> ## Not run: 
> ##D git_default_branch_configure()
> ## End(Not run)
> ## Not run: 
> ##D git_default_branch_rediscover()
> ##D 
> ##D # you can always explicitly specify the local branch that's been playing the
> ##D # role of the default
> ##D git_default_branch_rediscover("unconventional_default_branch_name")
> ## End(Not run)
> ## Not run: 
> ##D git_default_branch_rename()
> ##D 
> ##D # you can always explicitly specify one or both branch names
> ##D git_default_branch_rename(from = "this", to = "that")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("git_protocol")
> ### * git_protocol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: git_protocol
> ### Title: See or set the default Git protocol
> ### Aliases: git_protocol use_git_protocol
> 
> ### ** Examples
> 
> ## Not run: 
> ##D git_protocol()
> ##D 
> ##D use_git_protocol("ssh")
> ##D git_protocol()
> ##D 
> ##D use_git_protocol("https")
> ##D git_protocol()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("git_sitrep")
> ### * git_sitrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: git_sitrep
> ### Title: Git/GitHub sitrep
> ### Aliases: git_sitrep
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # report all
> ##D git_sitrep()
> ##D 
> ##D # report git for current user
> ##D git_sitrep("git", "user")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("github-token")
> ### * github-token
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: github-token
> ### Title: Get help with GitHub personal access tokens
> ### Aliases: github-token create_github_token gh_token_help
> 
> ### ** Examples
> 
> ## Not run: 
> ##D create_github_token()
> ## End(Not run)
> ## Not run: 
> ##D gh_token_help()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("issue-this")
> ### * issue-this
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: issue-this
> ### Title: Helpers for GitHub issues
> ### Aliases: issue-this issue_close_community issue_reprex_needed
> 
> ### ** Examples
> 
> ## Not run: 
> ##D issue_close_community(12, reprex = TRUE)
> ##D 
> ##D issue_reprex_needed(241)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("proj_sitrep")
> ### * proj_sitrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: proj_sitrep
> ### Title: Report working directory and usethis/RStudio project
> ### Aliases: proj_sitrep
> 
> ### ** Examples
> 
> proj_sitrep()
•  working_directory: "/__w/rocker_uat/rocker_uat/packages/usethis"
• active_usethis_proj: <unset>
• active_rstudio_proj: <unset>
ℹ There is currently no active usethis project.
ℹ usethis attempts to activate a project upon first need.
☐ Call `usethis::proj_get()` to initiate project discovery.
☐ Call `proj_set("path/to/project")` or `proj_activate("path/to/project")` to
  provide an explicit path.
> 
> 
> 
> cleanEx()
> nameEx("proj_utils")
> ### * proj_utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: proj_utils
> ### Title: Utility functions for the active project
> ### Aliases: proj_utils proj_get proj_set proj_path with_project
> ###   local_project
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## see the active project
> ##D proj_get()
> ##D 
> ##D ## manually set the active project
> ##D proj_set("path/to/target/project")
> ##D 
> ##D ## build a path within the active project (both produce same result)
> ##D proj_path("R/foo.R")
> ##D proj_path("R", "foo", ext = "R")
> ##D 
> ##D ## build a path within SOME OTHER project
> ##D with_project("path/to/some/other/project", proj_path("blah.R"))
> ##D 
> ##D ## convince yourself that with_project() temporarily changes the project
> ##D with_project("path/to/some/other/project", print(proj_sitrep()))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pull-requests")
> ### * pull-requests
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pull-requests
> ### Title: Helpers for GitHub pull requests
> ### Aliases: pull-requests pr_init pr_resume pr_fetch pr_push pr_pull
> ###   pr_merge_main pr_view pr_pause pr_finish pr_forget
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pr_fetch(123)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ui-legacy-functions")
> ### * ui-legacy-functions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ui-legacy-functions
> ### Title: Legacy functions related to user interface
> ### Aliases: ui-legacy-functions ui_line ui_todo ui_done ui_oops ui_info
> ###   ui_code_block ui_stop ui_warn ui_field ui_value ui_path ui_code
> ###   ui_unset
> ### Keywords: internal
> 
> ### ** Examples
> 
> new_val <- "oxnard"
> ui_done("{ui_field('name')} set to {ui_value(new_val)}")
✔ name set to 'oxnard'
> ui_todo("Redocument with {ui_code('devtools::document()')}")
• Redocument with `devtools::document()`
> 
> ui_code_block(c(
+   "Line 1",
+   "Line 2",
+   "Line 3"
+ ))
  Line 1
  Line 2
  Line 3
> 
> 
> 
> cleanEx()
> nameEx("ui-questions")
> ### * ui-questions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ui-questions
> ### Title: User interface - Questions
> ### Aliases: ui-questions ui_yeah ui_nope
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ui_yeah("Do you like R?")
> ##D ui_nope("Have you tried turning it off and on again?", n_yes = 1, n_no = 1)
> ##D ui_yeah("Are you sure its plugged in?", yes = "Yes", no = "No", shuffle = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ui_silence")
> ### * ui_silence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ui_silence
> ### Title: Suppress usethis's messaging
> ### Aliases: ui_silence
> 
> ### ** Examples
> 
> # compare the messaging you see from this:
> browse_github("usethis")
☐ Open URL <https://github.com/r-lib/usethis>.
> # vs. this:
> ui_silence(
+   browse_github("usethis")
+ )
> 
> 
> 
> cleanEx()
> nameEx("use_author")
> ### * use_author
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_author
> ### Title: Add an author to the 'Authors@R' field in DESCRIPTION
> ### Aliases: use_author
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_author(
> ##D   given = "Lucy",
> ##D   family = "van Pelt",
> ##D   role = c("aut", "cre"),
> ##D   email = "lucy@example.com",
> ##D   comment = c(ORCID = "LUCY-ORCID-ID")
> ##D )
> ##D 
> ##D use_author("Charlie", "Brown")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("use_build_ignore")
> ### * use_build_ignore
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_build_ignore
> ### Title: Add files to '.Rbuildignore'
> ### Aliases: use_build_ignore
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # ignore all Excel files
> ##D use_build_ignore("[.]xlsx$", escape = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_course_details")
> ### * use_course_details
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_course_details
> ### Title: Helpers to download and unpack a ZIP file
> ### Aliases: use_course_details tidy_download tidy_unzip
> ###   create_download_url
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D tidy_download("https://github.com/r-lib/rematch2/archive/main.zip")
> ##D tidy_unzip("rematch2-main.zip")
> ## End(Not run)
> # GitHub
> create_download_url("https://github.com/r-lib/usethis")
[1] "https://github.com/r-lib/usethis/zipball/HEAD"
> create_download_url("https://github.com/r-lib/usethis/issues")
[1] "https://github.com/r-lib/usethis/zipball/HEAD"
> 
> # DropBox
> create_download_url("https://www.dropbox.com/sh/12345abcde/6789wxyz?dl=0")
[1] "https://www.dropbox.com/sh/12345abcde/6789wxyz?dl=1"
> 
> # Google Drive
> create_download_url("https://drive.google.com/open?id=123456789xxyyyzzz")
[1] "https://drive.google.com/uc?export=download&id=123456789xxyyyzzz"
> create_download_url("https://drive.google.com/open?id=123456789xxyyyzzz/view")
[1] "https://drive.google.com/uc?export=download&id=123456789xxyyyzzz"
> 
> 
> 
> cleanEx()
> nameEx("use_data")
> ### * use_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_data
> ### Title: Create package data
> ### Aliases: use_data use_data_raw
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- 1:10
> ##D y <- 1:100
> ##D 
> ##D use_data(x, y) # For external use
> ##D use_data(x, y, internal = TRUE) # For internal use
> ## End(Not run)
> ## Not run: 
> ##D use_data_raw("daisy")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_description")
> ### * use_description
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_description
> ### Title: Create or modify a DESCRIPTION file
> ### Aliases: use_description use_description_defaults
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_description()
> ##D 
> ##D use_description(fields = list(Language = "es"))
> ##D 
> ##D use_description_defaults()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_directory")
> ### * use_directory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_directory
> ### Title: Use a directory
> ### Aliases: use_directory
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_directory("inst")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_git")
> ### * use_git
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_git
> ### Title: Initialise a git repository
> ### Aliases: use_git
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_git()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_git_config")
> ### * use_git_config
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_git_config
> ### Title: Configure Git
> ### Aliases: use_git_config
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # set the user's global user.name and user.email
> ##D use_git_config(user.name = "Jane", user.email = "jane@example.org")
> ##D 
> ##D # set the user.name and user.email locally, i.e. for current repo/project
> ##D use_git_config(
> ##D   scope = "project",
> ##D   user.name = "Jane",
> ##D   user.email = "jane@example.org"
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_git_remote")
> ### * use_git_remote
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_git_remote
> ### Title: Configure and report Git remotes
> ### Aliases: use_git_remote git_remotes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # see current remotes
> ##D git_remotes()
> ##D 
> ##D # add new remote named 'foo', a la `git remote add <name> <url>`
> ##D use_git_remote(name = "foo", url = "https://github.com/<OWNER>/<REPO>.git")
> ##D 
> ##D # remove existing 'foo' remote, a la `git remote remove <name>`
> ##D use_git_remote(name = "foo", url = NULL, overwrite = TRUE)
> ##D 
> ##D # change URL of remote 'foo', a la `git remote set-url <name> <newurl>`
> ##D use_git_remote(
> ##D   name = "foo",
> ##D   url = "https://github.com/<OWNER>/<REPO>.git",
> ##D   overwrite = TRUE
> ##D )
> ##D 
> ##D # Scenario: Fix remotes when you cloned someone's repo, but you should
> ##D # have fork-and-cloned (in order to make a pull request).
> ##D 
> ##D # Store origin = main repo's URL, e.g., "git@github.com:<OWNER>/<REPO>.git"
> ##D upstream_url <- git_remotes()[["origin"]]
> ##D 
> ##D # IN THE BROWSER: fork the main GitHub repo and get your fork's remote URL
> ##D my_url <- "git@github.com:<ME>/<REPO>.git"
> ##D 
> ##D # Rotate the remotes
> ##D use_git_remote(name = "origin", url = my_url)
> ##D use_git_remote(name = "upstream", url = upstream_url)
> ##D git_remotes()
> ##D 
> ##D # Scenario: Add upstream remote to a repo that you fork-and-cloned, so you
> ##D # can pull upstream changes.
> ##D # Note: If you fork-and-clone via `usethis::create_from_github()`, this is
> ##D # done automatically!
> ##D 
> ##D # Get URL of main GitHub repo, probably in the browser
> ##D upstream_url <- "git@github.com:<OWNER>/<REPO>.git"
> ##D use_git_remote(name = "upstream", url = upstream_url)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_github")
> ### * use_github
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_github
> ### Title: Connect a local repo with GitHub
> ### Aliases: use_github
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pkgpath <- file.path(tempdir(), "testpkg")
> ##D create_package(pkgpath)
> ##D 
> ##D ## now, working inside "testpkg", initialize git repository
> ##D use_git()
> ##D 
> ##D ## create github repository and configure as git remote
> ##D use_github()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_github_action")
> ### * use_github_action
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_github_action
> ### Title: Set up a GitHub Actions workflow
> ### Aliases: use_github_action
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_github_action()
> ##D 
> ##D use_github_action_check_standard()
> ##D 
> ##D use_github_action("pkgdown")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_github_file")
> ### * use_github_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_github_file
> ### Title: Copy a file from any GitHub repo into the current project
> ### Aliases: use_github_file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_github_file(
> ##D   "https://github.com/r-lib/actions/blob/v2/examples/check-standard.yaml"
> ##D )
> ##D 
> ##D use_github_file(
> ##D   "r-lib/actions",
> ##D   path = "examples/check-standard.yaml",
> ##D   ref = "v2",
> ##D   save_as = ".github/workflows/R-CMD-check.yaml"
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_github_labels")
> ### * use_github_labels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_github_labels
> ### Title: Manage GitHub issue labels
> ### Aliases: use_github_labels use_tidy_github_labels tidy_labels
> ###   tidy_labels_rename tidy_label_colours tidy_label_descriptions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # typical use in, e.g., a new tidyverse project
> ##D use_github_labels(delete_default = TRUE)
> ##D 
> ##D # create labels without changing colours/descriptions
> ##D use_github_labels(
> ##D   labels = c("foofy", "foofier", "foofiest"),
> ##D   colours = NULL,
> ##D   descriptions = NULL
> ##D )
> ##D 
> ##D # change descriptions without changing names/colours
> ##D use_github_labels(
> ##D   labels = NULL,
> ##D   colours = NULL,
> ##D   descriptions = c("foofiest" = "the foofiest issue you ever saw")
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_github_links")
> ### * use_github_links
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_github_links
> ### Title: Use GitHub links in URL and BugReports
> ### Aliases: use_github_links
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_github_links()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("use_github_pages")
> ### * use_github_pages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_github_pages
> ### Title: Configure a GitHub Pages site
> ### Aliases: use_github_pages
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_github_pages()
> ##D use_github_pages(branch = git_default_branch(), path = "/docs")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_import_from")
> ### * use_import_from
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_import_from
> ### Title: Import a function from another package
> ### Aliases: use_import_from
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_import_from("glue", "glue")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_logo")
> ### * use_logo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_logo
> ### Title: Use a package logo
> ### Aliases: use_logo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_logo("usethis.png")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_package")
> ### * use_package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_package
> ### Title: Depend on another package
> ### Aliases: use_package use_dev_package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_package("ggplot2")
> ##D use_package("dplyr", "suggests")
> ##D use_dev_package("glue")
> ##D 
> ##D # Depend on R version 4.1
> ##D use_package("R", type = "Depends", min_version = "4.1")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_pipe")
> ### * use_pipe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_pipe
> ### Title: Use magrittr's pipe in your package
> ### Aliases: use_pipe
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_pipe()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_r")
> ### * use_r
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_r
> ### Title: Create or edit R or test files
> ### Aliases: use_r use_test
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # create a new .R file below R/
> ##D use_r("coolstuff")
> ##D 
> ##D # if `R/coolstuff.R` is active in a supported IDE, you can now do:
> ##D use_test()
> ##D 
> ##D # if `tests/testthat/test-coolstuff.R` is active in a supported IDE, you can
> ##D # return to `R/coolstuff.R` with:
> ##D use_r()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_readme_rmd")
> ### * use_readme_rmd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_readme_rmd
> ### Title: Create README files
> ### Aliases: use_readme_rmd use_readme_md
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_readme_rmd()
> ##D use_readme_md()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_release_issue")
> ### * use_release_issue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_release_issue
> ### Title: Create a release checklist in a GitHub issue
> ### Aliases: use_release_issue
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_release_issue("2.0.0")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_rmarkdown_template")
> ### * use_rmarkdown_template
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_rmarkdown_template
> ### Title: Add an RMarkdown Template
> ### Aliases: use_rmarkdown_template
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_rmarkdown_template()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_standalone")
> ### * use_standalone
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_standalone
> ### Title: Use a standalone file from another repo
> ### Aliases: use_standalone
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_standalone("r-lib/rlang", file = "types-check")
> ##D use_standalone("r-lib/rlang", file = "types-check", ref = "standalone-dep")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_template")
> ### * use_template
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_template
> ### Title: Use a usethis-style template
> ### Aliases: use_template
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # Note: running this will write `NEWS.md` to your working directory
> ##D   use_template(
> ##D     template = "NEWS.md",
> ##D     data = list(Package = "acme", Version = "1.2.3"),
> ##D     package = "usethis"
> ##D   )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_test_helper")
> ### * use_test_helper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_test_helper
> ### Title: Create or edit a test helper file
> ### Aliases: use_test_helper
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_test_helper()
> ##D use_test_helper("mocks")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_testthat")
> ### * use_testthat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_testthat
> ### Title: Sets up overall testing infrastructure
> ### Aliases: use_testthat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_testthat()
> ##D 
> ##D use_test()
> ##D 
> ##D use_test("something-management")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_tibble")
> ### * use_tibble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_tibble
> ### Title: Prepare to return a tibble
> ### Aliases: use_tibble
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_tibble()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_tidy_thanks")
> ### * use_tidy_thanks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_tidy_thanks
> ### Title: Identify contributors via GitHub activity
> ### Aliases: use_tidy_thanks
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # active project, interval = since the last release
> ##D use_tidy_thanks()
> ##D 
> ##D # active project, interval = since a specific datetime
> ##D use_tidy_thanks(from = "2020-07-24T00:13:45Z")
> ##D 
> ##D # r-lib/usethis, interval = since a certain date
> ##D use_tidy_thanks("r-lib/usethis", from = "2020-08-01")
> ##D 
> ##D # r-lib/usethis, up to a specific release
> ##D use_tidy_thanks("r-lib/usethis", from = NULL, to = "v1.1.0")
> ##D 
> ##D # r-lib/usethis, since a specific commit, up to a specific date
> ##D use_tidy_thanks("r-lib/usethis", from = "08a560d", to = "2018-05-14")
> ##D 
> ##D # r-lib/usethis, but with copy/paste of a browser URL
> ##D use_tidy_thanks("https://github.com/r-lib/usethis")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_tutorial")
> ### * use_tutorial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_tutorial
> ### Title: Create a learnr tutorial
> ### Aliases: use_tutorial
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_tutorial("learn-to-do-stuff", "Learn to do stuff")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_upkeep_issue")
> ### * use_upkeep_issue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_upkeep_issue
> ### Title: Create an upkeep checklist in a GitHub issue
> ### Aliases: use_upkeep_issue
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_upkeep_issue(2023)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("use_version")
> ### * use_version
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_version
> ### Title: Increment package version
> ### Aliases: use_version use_dev_version
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## for interactive selection, do this:
> ##D use_version()
> ##D 
> ##D ## request a specific type of increment
> ##D use_version("minor")
> ##D use_dev_version()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("use_vignette")
> ### * use_vignette
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: use_vignette
> ### Title: Create a vignette or article
> ### Aliases: use_vignette use_article
> 
> ### ** Examples
> 
> ## Not run: 
> ##D use_vignette("how-to-do-stuff", "How to do stuff")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("write-this")
> ### * write-this
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write-this
> ### Title: Write into or over a file
> ### Aliases: write-this write_union write_over
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> .old_wd <- setwd(tempdir())
> ## End(Don't show)
> write_union("a_file", letters[1:3])
✔ Adding "a", "b", and "c" to 'a_file'.
> readLines("a_file")
[1] "a" "b" "c"
> write_union("a_file", letters[1:5])
✔ Adding "d" and "e" to 'a_file'.
> readLines("a_file")
[1] "a" "b" "c" "d" "e"
> 
> write_over("another_file", letters[1:3])
✔ Writing 'another_file'.
> readLines("another_file")
[1] "a" "b" "c"
> write_over("another_file", letters[1:3])
> ## Not run: 
> ##D ## will error if user isn't present to approve the overwrite
> ##D write_over("another_file", letters[3:1])
> ## End(Not run)
> 
> ## clean up
> file.remove("a_file", "another_file")
[1] TRUE TRUE
> ## Don't show: 
> setwd(.old_wd)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("zip-utils")
> ### * zip-utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zip-utils
> ### Title: Download and unpack a ZIP file
> ### Aliases: zip-utils use_course use_zip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # download the source of usethis from GitHub, behind a bit.ly shortlink
> ##D use_course("bit.ly/usethis-shortlink-example")
> ##D use_course("http://bit.ly/usethis-shortlink-example")
> ##D 
> ##D # download the source of rematch2 package from CRAN
> ##D use_course("https://cran.r-project.org/bin/windows/contrib/3.4/rematch2_2.0.1.zip")
> ##D 
> ##D # download the source of rematch2 package from GitHub, 4 ways
> ##D use_course("r-lib/rematch2")
> ##D use_course("https://api.github.com/repos/r-lib/rematch2/zipball/HEAD")
> ##D use_course("https://api.github.com/repos/r-lib/rematch2/zipball/main")
> ##D use_course("https://github.com/r-lib/rematch2/archive/main.zip")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.658 0.038 0.697 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
