
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rmsb"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rmsb')
Loading required package: rms
Loading required package: Hmisc

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PostF")
> ### * PostF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PostF
> ### Title: Function Generator for Posterior Probabilities of Assertions
> ### Aliases: PostF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(y ~ age + sex)
> ##D   P <- PostF(f)
> ##D   P(b2 > 0)     # Model is a1 + b1*age + b2*(sex == 'male')
> ##D   P(b1 < 0 & b2 > 0)   # Post prob of a compound assertion
> ##D   # To compute probabilities using original parameter names:
> ##D   P <- PostF(f, name='orig')
> ##D   P(age < 0)    # Post prob of negative age effect
> ##D   P(`sex=male` > 0)
> ##D   f <- blrm(y ~ sex + pol(age, 2))
> ##D   P <- PostF(f)
> ##D   # Compute and plot posterior density of the vertex of the
> ##D   # quadratic age effect
> ##D   plot(P(-b2 / (2 * b3)))
> ##D 
> ##D   # The following would be useful in age and sex interacted
> ##D   k <- contrast(f, list(age=c(30, 50), sex='male'),
> ##D                    list(age=c(30, 50), sex='female'),
> ##D                 cnames=c('age 30 M-F', 'age 50 M-F'))
> ##D   P <- PostF(k)
> ##D   P(`age 30 M-F` > 0 & `age 50 M-F` > 0)
> ##D ##' 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("blrm")
> ### * blrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blrm
> ### Title: Bayesian Binary and Ordinal Logistic Regression
> ### Aliases: blrm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   getHdata(titanic3)
> ##D   dd <- datadist(titanic3); options(datadist='dd')
> ##D   f <- blrm(survived ~ (rcs(age, 5) + sex + pclass)^2, data=titanic3)
> ##D   f                   # model summary using print.blrm
> ##D   coef(f)             # compute posterior mean parameter values
> ##D   coef(f, 'median')   # compute posterior median values
> ##D   stanDx(f)           # print basic Stan diagnostics
> ##D   s <- stanGet(f)     # extract rstan object from fit
> ##D   plot(s, pars=f$betas)       # Stan posteriors for beta parameters
> ##D   stanDxplot(s)       # Stan diagnostic plots by chain
> ##D   blrmStats(f)        # more details about predictive accuracy measures
> ##D   ggplot(Predict(...))   # standard rms output
> ##D   summary(f, ...)     # invokes summary.rms
> ##D   contrast(f, ...)    # contrast.rms computes HPD intervals
> ##D   plot(nomogram(f, ...)) # plot nomogram using posterior mean parameters
> ##D 
> ##D   # Fit a random effects model to handle multiple observations per
> ##D   # subject ID using cmdstan
> ##D   # options(rmsb.backend='cmdstan')
> ##D   f <- blrm(outcome ~ rcs(age, 5) + sex + cluster(id), data=mydata)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("blrmStats")
> ### * blrmStats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blrmStats
> ### Title: Compute Indexes of Predictive Accuracy and Their Uncertainties
> ### Aliases: blrmStats
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   blrmStats(f, pl=TRUE)   # print and plot
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("coef.rmsb")
> ### * coef.rmsb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.rmsb
> ### Title: Extract Bayesian Summary of Coefficients
> ### Aliases: coef.rmsb
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   coef(f, stat='mode')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("predict.blrm")
> ### * predict.blrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.blrm
> ### Title: Make predictions from a 'blrm()' fit
> ### Aliases: predict.blrm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   predict(f, newdata, type='...', posterior.summary='median')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.blrm")
> ### * print.blrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.blrm
> ### Title: Print 'blrm()' Results
> ### Aliases: print.blrm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   options(lang='html')   # default is lang='plain'; also can be latex
> ##D   f               # print using defaults
> ##D   print(f, posterior.summary='median')   # instead of post. means
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.blrmStats")
> ### * print.blrmStats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.blrmStats
> ### Title: Print Details for 'blrmStats' Predictive Accuracy Measures
> ### Aliases: print.blrmStats
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   s <- blrmStats(...)
> ##D   s    # print with defaults
> ##D   print(s, dec=4)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.rmsb")
> ### * print.rmsb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.rmsb
> ### Title: Basic Print for Bayesian Parameter Summary
> ### Aliases: print.rmsb
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   print.rmsb(f)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("selectedQr")
> ### * selectedQr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: selectedQr
> ### Title: QR Decomposition Preserving Selected Columns
> ### Aliases: selectedQr
> 
> ### ** Examples
> 
>   x <- 1 : 10
>   X <- cbind(x, x^2)
>   w <- selectedQr(X)
>   w
$X
             [,1]        [,2]
 [1,] -0.49543369  0.52223297
 [2,] -0.38533732  0.17407766
 [3,] -0.27524094 -0.08703883
 [4,] -0.16514456 -0.26111648
 [5,] -0.05504819 -0.34815531
 [6,]  0.05504819 -0.34815531
 [7,]  0.16514456 -0.26111648
 [8,]  0.27524094 -0.08703883
 [9,]  0.38533732  0.17407766
[10,]  0.49543369  0.52223297

$R
            x         
[1,] 9.082951 99.91246
[2,] 0.000000 22.97825

$Rinv
          [,1]        [,2]
[1,] 0.1100964 -0.47871355
[2,] 0.0000000  0.04351941

$xbar
[1]  5.5 38.5

>   with(w, X %*% R)  # = scale(X, center=TRUE, scale=FALSE)
         x      
 [1,] -4.5 -37.5
 [2,] -3.5 -34.5
 [3,] -2.5 -29.5
 [4,] -1.5 -22.5
 [5,] -0.5 -13.5
 [6,]  0.5  -2.5
 [7,]  1.5  10.5
 [8,]  2.5  25.5
 [9,]  3.5  42.5
[10,]  4.5  61.5
>   Xqr <- w$X
>   plot(X[, 1], Xqr[, 1])
>   plot(X[, 1], Xqr[, 2])
>   cov(X)
           x          
x   9.166667  100.8333
  100.833333 1167.8333
>   cov(Xqr)
              [,1]          [,2]
[1,]  1.111111e-01 -7.646637e-18
[2,] -7.646637e-18  1.111111e-01
>   X <- cbind(x, x^3, x^4, x^2)
>   w <- selectedQr(X, not=2:3)
>   with(w, X %*% R)
      [,1]   [,2]    [,3]  [,4]
 [1,] -4.5 -301.5 -2532.3 -37.5
 [2,] -3.5 -294.5 -2517.3 -34.5
 [3,] -2.5 -275.5 -2452.3 -29.5
 [4,] -1.5 -238.5 -2277.3 -22.5
 [5,] -0.5 -177.5 -1908.3 -13.5
 [6,]  0.5  -86.5 -1237.3  -2.5
 [7,]  1.5   40.5  -132.3  10.5
 [8,]  2.5  209.5  1562.7  25.5
 [9,]  3.5  426.5  4027.7  42.5
[10,]  4.5  697.5  7466.7  61.5
> 
> 
> 
> cleanEx()
> nameEx("stanDx")
> ### * stanDx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stanDx
> ### Title: Print Stan Diagnostics
> ### Aliases: stanDx
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   stanDx(f)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("stanGet")
> ### * stanGet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stanGet
> ### Title: Get Stan Output
> ### Aliases: stanGet
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   s <- stanGet(f)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("vcov.rmsb")
> ### * vcov.rmsb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vcov.rmsb
> ### Title: Variance-Covariance Matrix
> ### Aliases: vcov.rmsb
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   f <- blrm(...)
> ##D   v <- vcov(f)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.683 0.257 2.655 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
