
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "uuid"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('uuid')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("UUID")
> ### * UUID
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UUID
> ### Title: UUID Data Type
> ### Aliases: UUID uuid as.UUID is.UUID
> ### Keywords: manip
> 
> ### ** Examples
> 
> (u <- as.UUID("837bc850-07d9-42f9-9afb-716409bf87b7"))
UUID: 837bc850-07d9-42f9-9afb-716409bf87b7
> (uv <- c(u, NA, UUIDgenerate(n=3, output="uuid")))
UUID vector:
[1] "837bc850-07d9-42f9-9afb-716409bf87b7"
[2] "a2070000-0000-f07f-0000-000000000000"
[3] "1065f7df-4705-406d-af64-feaa209577ed"
[4] "bc7cc0e2-3de8-4f06-b062-6ff48629ae78"
[5] "714ac491-f9cf-488d-b559-99f6d586ad84"
> as.character(u)
[1] "837bc850-07d9-42f9-9afb-716409bf87b7"
> uv == u
[1]  TRUE FALSE FALSE FALSE FALSE
> is.na(uv)
[1] FALSE FALSE FALSE FALSE FALSE
> identical(as.UUID(as.character(uv)), uv)
[1] TRUE
> as.raw(u)
 [1] 83 7b c8 50 07 d9 42 f9 9a fb 71 64 09 bf 87 b7
> 
> ## all forms are can be coerced losslessly
> identical(as.UUID(as.raw(uv)), uv)
[1] TRUE
> identical(as.UUID(as.character(as.UUID(as.raw(uv)))), uv)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("UUIDgenerate")
> ### * UUIDgenerate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: UUIDgenerate
> ### Title: UUID Functions
> ### Aliases: UUIDgenerate UUIDparse UUIDvalidate UUIDfromName
> ### Keywords: manip
> 
> ### ** Examples
> 
> UUIDgenerate()
[1] "f7fe97d8-81ce-43f0-89ab-1b772ec9a1e6"
> UUIDgenerate(TRUE)
[1] "0580b46c-cce6-11ef-8500-0242ac120002"
> UUIDgenerate(FALSE)
[1] "76ad1ffe-1272-4a31-a9db-88a222022686"
> 
> ## see if the randomness is any good
> length(unique(UUIDgenerate(n=1000)))
[1] 1000
> 
> ## generate a native UUID vector
> (u <- UUIDgenerate(n=3, output="uuid"))
UUID vector:
[1] "5db19896-14e7-4a2f-ba4c-6d5c53fb08b1"
[2] "b91df915-4782-42d5-a47d-b5fdfacfb06a"
[3] "fd494f49-06d4-4cc6-8b10-ffd4f09e73c9"
> 
> as.character(u)
[1] "5db19896-14e7-4a2f-ba4c-6d5c53fb08b1"
[2] "b91df915-4782-42d5-a47d-b5fdfacfb06a"
[3] "fd494f49-06d4-4cc6-8b10-ffd4f09e73c9"
> as.raw(u[1])
 [1] 5d b1 98 96 14 e7 4a 2f ba 4c 6d 5c 53 fb 08 b1
> 
> UUIDgenerate(output="raw")
 [1] 12 76 ee d6 ca f5 40 50 81 87 b3 3a 21 e0 86 79
> 
> ## UUID for DNS namespace
> DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
> ## SHA1 (v5) - default
> UUIDfromName(DNS.namespace, "r-project.org")
[1] "0cce4dd5-363b-5d7e-8baf-e5e06031f032"
> ## MD5 (v3)
> UUIDfromName(DNS.namespace, "r-project.org", type="md5")
[1] "b9a02725-3dba-3d7c-81be-d05e0f134f8b"
> 
> ## see ?UUID for more examples on UUID objects
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.066 0.005 0.072 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
