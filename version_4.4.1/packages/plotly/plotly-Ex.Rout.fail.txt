
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "plotly"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('plotly')
Loading required package: ggplot2

Attaching package: ‘plotly’

The following object is masked from ‘package:ggplot2’:

    last_plot

The following object is masked from ‘package:stats’:

    filter

The following object is masked from ‘package:graphics’:

    layout

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("TeX")
> ### * TeX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TeX
> ### Title: Render TeX in a plotly graph using MathJax
> ### Aliases: TeX
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>%
+   layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>%
+   config(mathjax = "cdn")
+ ## Don't show: 
+ }) # examplesIf
> plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>% layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>% 
+     config(mathjax = "cdn")
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("add_data")
> ### * add_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_data
> ### Title: Add data to a plotly visualization
> ### Aliases: add_data
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ plot_ly() %>% add_data(economics) %>% add_trace(x = ~date, y = ~pce)
+ ## Don't show: 
+ }) # examplesIf
> plot_ly() %>% add_data(economics) %>% add_trace(x = ~date, y = ~pce)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("add_trace")
> ### * add_trace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_trace
> ### Title: Add trace(s) to a plotly visualization
> ### Aliases: add_trace add_markers add_text add_paths add_lines
> ###   add_segments add_polygons add_sf add_table add_ribbons add_image
> ###   add_area add_pie add_bars add_histogram add_histogram2d
> ###   add_histogram2dcontour add_heatmap add_contour add_boxplot
> ###   add_surface add_mesh add_scattergeo add_choropleth
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # the `plot_ly()` function initiates an object, and if no trace type
+ # is specified, it sets a sensible default
+ p <- plot_ly(economics, x = ~date, y = ~uempmed)
+ p
+ 
+ # some `add_*()` functions are a specific case of a trace type
+ # for example, `add_markers()` is a scatter trace with mode of markers
+ add_markers(p)
+ 
+ # scatter trace with mode of text
+ add_text(p, text = "%")
+ 
+ # scatter trace with mode of lines 
+ add_paths(p)
+ 
+ # like `add_paths()`, but ensures points are connected according to `x`
+ add_lines(p)
+ 
+ # if you prefer to work with plotly.js more directly, can always
+ # use `add_trace()` and specify the type yourself
+ add_trace(p, type = "scatter", mode = "markers+lines")
+ 
+ # mappings provided to `plot_ly()` are "global", but can be overwritten
+ plot_ly(economics, x = ~date, y = ~uempmed, color = I("red"), showlegend = FALSE) %>% 
+   add_lines() %>%
+   add_markers(color = ~pop)
+ 
+ # a number of `add_*()` functions are special cases of the scatter trace
+ plot_ly(economics, x = ~date) %>% 
+   add_ribbons(ymin = ~pce - 1e3, ymax = ~pce + 1e3)
+ 
+ # use `group_by()` (or `group2NA()`) to apply visual mapping
+ # once per group (e.g. one line per group)
+ txhousing %>% 
+   group_by(city) %>% 
+   plot_ly(x = ~date, y = ~median) %>%
+   add_lines(color = I("black"))
+ 
+ ## Not run: 
+ ##D # use `add_sf()` or `add_polygons()` to create geo-spatial maps
+ ##D # http://blog.cpsievert.me/2018/03/30/visualizing-geo-spatial-data-with-sf-and-plotly/
+ ##D if (requireNamespace("sf", quietly = TRUE)) {
+ ##D   nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
+ ##D   plot_ly() %>% add_sf(data = nc)
+ ##D }
+ ##D 
+ ##D # univariate summary statistics
+ ##D plot_ly(mtcars, x = ~factor(vs), y = ~mpg) %>% 
+ ##D   add_boxplot()
+ ##D plot_ly(mtcars, x = ~factor(vs), y = ~mpg) %>% 
+ ##D   add_trace(type = "violin")
+ ##D   
+ ##D # `add_histogram()` does binning for you...
+ ##D mtcars %>%
+ ##D   plot_ly(x = ~factor(vs)) %>%
+ ##D   add_histogram()
+ ##D   
+ ##D # ...but you can 'pre-compute' bar heights in R
+ ##D mtcars %>%
+ ##D   dplyr::count(vs) %>%
+ ##D   plot_ly(x = ~vs, y = ~n) %>%
+ ##D   add_bars()
+ ##D 
+ ##D # the 2d analogy of add_histogram() is add_histogram2d()/add_histogram2dcontour()
+ ##D library(MASS)
+ ##D (p <- plot_ly(geyser, x = ~waiting, y = ~duration))
+ ##D add_histogram2d(p)
+ ##D add_histogram2dcontour(p)
+ ##D 
+ ##D # the 2d analogy of add_bars() is add_heatmap()/add_contour()
+ ##D # (i.e., bin counts must be pre-specified)
+ ##D den <- kde2d(geyser$waiting, geyser$duration)
+ ##D p <- plot_ly(x = den$x, y = den$y, z = den$z)
+ ##D add_heatmap(p)
+ ##D add_contour(p)
+ ##D 
+ ##D # `add_table()` makes it easy to map a data frame to the table trace type
+ ##D plot_ly(economics) %>% 
+ ##D   add_table()
+ ##D 
+ ##D # pie charts!
+ ##D ds <- data.frame(labels = c("A", "B", "C"), values = c(10, 40, 60))
+ ##D plot_ly(ds, labels = ~labels, values = ~values) %>%
+ ##D   add_pie() %>%
+ ##D   layout(title = "Basic Pie Chart using Plotly")
+ ##D   
+ ##D data(wind)
+ ##D plot_ly(wind, r = ~r, theta = ~t) %>% 
+ ##D   add_area(color = ~nms) %>%
+ ##D   layout(
+ ##D     polar = list(
+ ##D       radialaxis = list(ticksuffix = "%"), 
+ ##D       angularaxis = list(rotation = 90)
+ ##D     )
+ ##D   )
+ ##D 
+ ##D # ------------------------------------------------------------
+ ##D # 3D chart types
+ ##D # ------------------------------------------------------------
+ ##D plot_ly(z = ~volcano) %>% 
+ ##D   add_surface()
+ ##D plot_ly(x = c(0, 0, 1), y = c(0, 1, 0), z = c(0, 0, 0)) %>% 
+ ##D   add_mesh()
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(economics, x = ~date, y = ~uempmed)
> p
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> add_markers(p)
> add_text(p, text = "%")
> add_paths(p)
> add_lines(p)
> add_trace(p, type = "scatter", mode = "markers+lines")
> plot_ly(economics, x = ~date, y = ~uempmed, color = I("red"), showlegend = FALSE) %>% 
+     add_lines() %>% add_markers(color = ~pop)
> plot_ly(economics, x = ~date) %>% add_ribbons(ymin = ~pce - 1000, ymax = ~pce + 
+     1000)
> txhousing %>% group_by(city) %>% plot_ly(x = ~date, y = ~median) %>% add_lines(color = I("black"))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("animation")
> ### * animation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: animation_opts
> ### Title: Animation configuration options
> ### Aliases: animation_opts animation animation_slider animation_button
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ df <- data.frame(
+   x = c(1, 2, 2, 1, 1, 2),
+   y = c(1, 2, 2, 1, 1, 2),
+   z = c(1, 1, 2, 2, 3, 3)
+ )
+ plot_ly(df) %>%
+   add_markers(x = 1.5, y = 1.5) %>%
+   add_markers(x = ~x, y = ~y, frame = ~z)
+ 
+ # it's a good idea to remove smooth transitions when there is
+ # no relationship between objects in each view
+ plot_ly(mtcars, x = ~wt, y = ~mpg, frame = ~cyl) %>%
+   animation_opts(transition = 0)
+ 
+ # works the same way with ggplotly
+ if (interactive()) {
+   p <- ggplot(txhousing, aes(month, median)) +
+     geom_line(aes(group = year), alpha = 0.3) +
+     geom_smooth() +
+     geom_line(aes(frame = year, ids = month), color = "red") +
+     facet_wrap(~ city)
+  
+   ggplotly(p, width = 1200, height = 900) %>%
+     animation_opts(1000)
+ }
+ 
+   
+ #' # for more, see https://plotly.com/r/animating-views.html
+ ## Don't show: 
+ }) # examplesIf
> df <- data.frame(x = c(1, 2, 2, 1, 1, 2), y = c(1, 2, 2, 1, 1, 2), z = c(1, 
+     1, 2, 2, 3, 3))
> plot_ly(df) %>% add_markers(x = 1.5, y = 1.5) %>% add_markers(x = ~x, 
+     y = ~y, frame = ~z)
> plot_ly(mtcars, x = ~wt, y = ~mpg, frame = ~cyl) %>% animation_opts(transition = 0)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> if (interactive()) {
+     p <- ggplot(txhousing, aes(month, median)) + geom_line(aes(group = year), alpha = 0.3) + 
+         geom_smooth() + geom_line(aes(frame = year, ids = month), color = "red") + 
+         facet_wrap(~city)
+     ggplotly(p, width = 1200, height = 900) %>% animation_opts(1000)
+ }
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("api")
> ### * api
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: api_create
> ### Title: Tools for working with plotly's REST API (v2)
> ### Aliases: api_create api_create.plotly api_create.ggplot
> ###   api_create.data.frame api_download_plot api_download_grid api
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D 
+ ##D # ------------------------------------------------------------
+ ##D # api_create() makes it easy to upload ggplot2/plotly objects
+ ##D # and/or data frames to your plotly account
+ ##D # ------------------------------------------------------------
+ ##D 
+ ##D # A data frame creates a plotly "grid". Printing one will take you 
+ ##D # to the it's web address so you can start creating!
+ ##D (m <- api_create(mtcars))
+ ##D 
+ ##D # A plotly/ggplot2 object create a plotly "plot".
+ ##D p <- plot_ly(mtcars, x = ~factor(vs))
+ ##D (r <- api_create(p))
+ ##D 
+ ##D # api_create() returns metadata about the remote "file". Here is
+ ##D # one way you could use that metadata to download a plot for local use:
+ ##D fileID <- strsplit(r$file$fid, ":")[[1]]
+ ##D layout(
+ ##D   api_download_plot(fileID[2], fileID[1]),
+ ##D   title = sprintf("Local version of <a href='%s'>this</a> plot", r$file$web_url)
+ ##D )
+ ##D 
+ ##D ------------------------------------------------------------
+ ##D # The api() function provides a low-level interface for performing 
+ ##D # any action at any endpoint! It always returns a list.
+ ##D # ------------------------------------------------------------
+ ##D 
+ ##D # list all the endpoints
+ ##D api()
+ ##D 
+ ##D # search the entire platform!
+ ##D # see https://api.plot.ly/v2/search
+ ##D api("search?q=overdose")
+ ##D api("search?q=plottype:pie trump fake")
+ ##D 
+ ##D # these examples will require a user account
+ ##D usr <- Sys.getenv("plotly_username", NA)
+ ##D if (!is.na(usr)) {
+ ##D   # your account info https://api.plot.ly/v2/#users
+ ##D   api(sprintf("users/%s", usr))
+ ##D   # your folders/files https://api.plot.ly/v2/folders#user
+ ##D   api(sprintf("folders/home?user=%s", usr))
+ ##D }
+ ##D 
+ ##D # Retrieve a specific file https://api.plot.ly/v2/files#retrieve
+ ##D api("files/cpsievert:14681")
+ ##D 
+ ##D # change the filename https://api.plot.ly/v2/files#update
+ ##D # (note: this won't work unless you have proper credentials to the relevant account)
+ ##D api("files/cpsievert:14681", "PATCH", list(filename = "toy file")) 
+ ##D 
+ ##D # Copy a file https://api.plot.ly/v2/files#lookup
+ ##D api("files/cpsievert:14681/copy", "POST")
+ ##D 
+ ##D # Create a folder https://api.plot.ly/v2/folders#create
+ ##D api("folders", "POST", list(path = "/starts/at/root/and/ends/here"))
+ ##D 
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("as_widget")
> ### * as_widget
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_widget
> ### Title: Convert a list to a plotly htmlwidget object
> ### Aliases: as_widget
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ trace <- list(x = 1, y = 1)
+ obj <- list(data = list(trace), layout = list(title = "my plot"))
+ as_widget(obj)
+ ## Don't show: 
+ }) # examplesIf
> trace <- list(x = 1, y = 1)
> obj <- list(data = list(trace), layout = list(title = "my plot"))
> as_widget(obj)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("colorbar")
> ### * colorbar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorbar
> ### Title: Modify the colorbar
> ### Aliases: colorbar
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(mtcars, x = ~wt, y = ~mpg, color = ~cyl)
+ 
+ # pass any colorbar attribute -- 
+ # https://plotly.com/r/reference/#scatter-marker-colorbar
+ colorbar(p, len = 0.5)
+ 
+ # Expand the limits of the colorbar
+ colorbar(p, limits = c(0, 20))
+ # values outside the colorbar limits are considered "missing"
+ colorbar(p, limits = c(5, 6))
+ 
+ # also works on colorbars generated via a z value
+ corr <- cor(diamonds[vapply(diamonds, is.numeric, logical(1))])
+ plot_ly(x = rownames(corr), y = colnames(corr), z = corr) %>%
+  add_heatmap() %>%
+  colorbar(limits = c(-1, 1))
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(mtcars, x = ~wt, y = ~mpg, color = ~cyl)
> colorbar(p, len = 0.5)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> colorbar(p, limits = c(0, 20))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> colorbar(p, limits = c(5, 6))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> corr <- cor(diamonds[vapply(diamonds, is.numeric, logical(1))])
> plot_ly(x = rownames(corr), y = colnames(corr), z = corr) %>% add_heatmap() %>% 
+     colorbar(limits = c(-1, 1))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("config")
> ### * config
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: config
> ### Title: Set the default configuration for plotly
> ### Aliases: config
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # remove the plotly logo and collaborate button from modebar
+ config(plot_ly(), displaylogo = FALSE, collaborate = FALSE)
+ 
+ # enable mathjax
+ # see more examples at https://plotly.com/r/LaTeX/
+ plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>%
+   layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>%
+   config(mathjax = "cdn")
+ 
+ # change the language used to render date axes and on-graph text 
+ # (e.g., modebar buttons)
+ today <- Sys.Date()
+ x <- seq.Date(today, today + 360, by = "day")
+ p <- plot_ly(x = x, y = rnorm(length(x))) %>%
+   add_lines()
+ 
+ # japanese
+ config(p, locale = "ja")
+ # german
+ config(p, locale = "de")
+ # spanish
+ config(p, locale = "es")
+ # chinese
+ config(p, locale = "zh-CN")
+ ## Don't show: 
+ }) # examplesIf
> config(plot_ly(), displaylogo = FALSE, collaborate = FALSE)
Warning in config(plot_ly(), displaylogo = FALSE, collaborate = FALSE) :
  The collaborate button is no longer supported
Warning: No trace type specified and no positional attributes specified
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
Warning: 'config' objects don't have these attributes: 'collaborate'
Valid attributes include:
'autosizable', 'displaylogo', 'displayModeBar', 'doubleClick', 'doubleClickDelay', 'editable', 'edits', 'fillFrame', 'frameMargins', 'globalTransforms', 'linkText', 'locale', 'locales', 'logging', 'mapboxAccessToken', 'modeBarButtons', 'modeBarButtonsToAdd', 'modeBarButtonsToRemove', 'notifyOnLogging', 'plotGlPixelRatio', 'plotlyServerURL', 'queueLength', 'responsive', 'scrollZoom', 'sendData', 'setBackground', 'showAxisDragHandles', 'showAxisRangeEntryBoxes', 'showEditInChartStudio', 'showLink', 'showSendToCloud', 'showSources', 'showTips', 'staticPlot', 'toImageButtonOptions', 'topojsonURL', 'typesetMath', 'watermark'

> plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>% layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>% 
+     config(mathjax = "cdn")
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> today <- Sys.Date()
> x <- seq.Date(today, today + 360, by = "day")
> p <- plot_ly(x = x, y = rnorm(length(x))) %>% add_lines()
> config(p, locale = "ja")
> config(p, locale = "de")
> config(p, locale = "es")
> config(p, locale = "zh-CN")
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("event_data")
> ### * event_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: event_data
> ### Title: Access plotly user input event data in shiny
> ### Aliases: event_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D plotly_example("shiny", "event_data")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ggplotly")
> ### * ggplotly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggplotly
> ### Title: Convert ggplot2 to plotly
> ### Aliases: ggplotly
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simple example
> ##D ggpenguins <- qplot(bill_length_mm , body_mass_g, 
> ##D data = palmerpenguins::penguins, color = species)
> ##D ggplotly(ggpenguins)
> ##D 
> ##D data(canada.cities, package = "maps")
> ##D viz <- ggplot(canada.cities, aes(long, lat)) +
> ##D   borders(regions = "canada") +
> ##D   coord_equal() +
> ##D   geom_point(aes(text = name, size = pop), colour = "red", alpha = 1/2)
> ##D ggplotly(viz, tooltip = c("text", "size"))
> ##D 
> ##D # linked scatterplot brushing
> ##D d <- highlight_key(mtcars)
> ##D qplot(data = d, x = mpg, y = wt) %>%
> ##D   subplot(qplot(data = d, x = mpg, y = vs)) %>% 
> ##D   layout(title = "Click and drag to select points") %>%
> ##D   highlight("plotly_selected")
> ##D 
> ##D 
> ##D # more brushing (i.e. highlighting) examples
> ##D demo("crosstalk-highlight-ggplotly", package = "plotly")
> ##D 
> ##D # client-side linked brushing in a scatterplot matrix
> ##D highlight_key(palmerpenguins::penguins) %>%
> ##D   GGally::ggpairs(aes(colour = Species), columns = 1:4) %>%
> ##D   ggplotly(tooltip = c("x", "y", "colour")) %>%
> ##D   highlight("plotly_selected")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("group2NA")
> ### * group2NA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group2NA
> ### Title: Separate groups with missing values
> ### Aliases: group2NA
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # note the insertion of new rows with missing values 
+ group2NA(mtcars, "vs", "cyl")
+ 
+ # need to group lines by city somehow!
+ plot_ly(txhousing, x = ~date, y = ~median) %>% add_lines()
+ 
+ # instead of using group_by(), you could use group2NA()
+ tx <- group2NA(txhousing, "city")
+ plot_ly(tx, x = ~date, y = ~median) %>% add_lines()
+ 
+ # add_lines() will ensure paths are sorted by x, but this is equivalent
+ tx <- group2NA(txhousing, "city", ordered = "date")
+ plot_ly(tx, x = ~date, y = ~median) %>% add_paths()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("hide_colorbar")
> ### * hide_colorbar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hide_colorbar
> ### Title: Hide color bar(s)
> ### Aliases: hide_colorbar
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~cyl)
+ hide_colorbar(p)
+   
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~cyl)
> hide_colorbar(p)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("hide_legend")
> ### * hide_legend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hide_legend
> ### Title: Hide legend
> ### Aliases: hide_legend
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~factor(cyl))
+ hide_legend(p)
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~factor(cyl))
> hide_legend(p)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("highlight")
> ### * highlight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: highlight
> ### Title: Query graphical elements in multiple linked views
> ### Aliases: highlight
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # These examples are designed to show you how to highlight/brush a *single*
+ # view. For examples of multiple linked views, see `demo(package = "plotly")` 
+ 
+ d <- highlight_key(txhousing, ~city)
+ p <- ggplot(d, aes(date, median, group = city)) + geom_line()
+ gg <- ggplotly(p, tooltip = "city") 
+ highlight(gg, dynamic = TRUE)
+ 
+ # supply custom colors to the brush 
+ cols <- toRGB(RColorBrewer::brewer.pal(3, "Dark2"), 0.5)
+ highlight(gg, on = "plotly_hover", color = cols, dynamic = TRUE)
+ 
+ # Use attrs_selected() for complete control over the selection appearance
+ # note any relevant colors you specify here should override the color argument
+ s <- attrs_selected(
+   showlegend = TRUE,
+   mode = "lines+markers",
+   marker = list(symbol = "x")
+ )
+ 
+ highlight(layout(gg, showlegend = TRUE), selected = s)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("orca")
> ### * orca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: orca
> ### Title: Static image exporting via orca
> ### Aliases: orca orca_serve
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D # NOTE: in a headless environment, you may need to set `more_args="--enable-webgl"`
+ ##D # to export webgl correctly
+ ##D p <- plot_ly(z = ~volcano) %>% add_surface()
+ ##D orca(p, "surface-plot.svg")
+ ##D 
+ ##D #' # launch the server
+ ##D server <- orca_serve()
+ ##D 
+ ##D # export as many graphs as you'd like
+ ##D server$export(qplot(1:10), "test1.pdf")
+ ##D server$export(plot_ly(x = 1:10, y = 1:10), "test2.pdf")
+ ##D 
+ ##D # the underlying process is exposed as a field, so you
+ ##D # have full control over the external process
+ ##D server$process$is_alive()
+ ##D 
+ ##D # convenience method for closing down the server
+ ##D server$close()
+ ##D 
+ ##D # remove the exported files from disk
+ ##D unlink("test1.pdf")
+ ##D unlink("test2.pdf")
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("partial_bundle")
> ### * partial_bundle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: partial_bundle
> ### Title: Use a partial bundle of plotly.js
> ### Aliases: partial_bundle
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # ----------------------------------------------------------------------
+ # This function is always safe to use when rendering a single 
+ # plotly graph. In this case, we get a 3x file reduction.
+ # ----------------------------------------------------------------------
+ 
+ ## Not run: 
+ ##D library(plotly)
+ ##D p <- plot_ly(x = 1:10, y = 1:10) %>% add_markers()
+ ##D save_widget <- function(p, f) {
+ ##D   owd <- setwd(dirname(f))
+ ##D   on.exit(setwd(owd))
+ ##D   htmlwidgets::saveWidget(p, f)
+ ##D   mb <- round(file.info(f)$size / 1e6, 3)
+ ##D   message("File is: ", mb," MB")
+ ##D }
+ ##D f1 <- tempfile(fileext = ".html")
+ ##D f2 <- tempfile(fileext = ".html")
+ ##D save_widget(p, f1)
+ ##D save_widget(partial_bundle(p), f2)
+ ##D 
+ ##D # ----------------------------------------------------------------------
+ ##D # But, since plotly.js bundles override one another, 
+ ##D # be careful when putting multiple graphs in a larger document!
+ ##D # Note how the surface (part of the gl3d bundle) renders, but the 
+ ##D # heatmap (part of the cartesian bundle) doesn't...
+ ##D # ----------------------------------------------------------------------
+ ##D 
+ ##D library(htmltools)
+ ##D p1 <- plot_ly(z = ~volcano) %>% 
+ ##D   add_heatmap() %>%
+ ##D   partial_bundle()
+ ##D p2 <- plot_ly(z = ~volcano) %>% 
+ ##D   add_surface() %>%
+ ##D   partial_bundle()
+ ##D browsable(tagList(p1, p2))
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot_dendro")
> ### * plot_dendro
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dendro
> ### Title: Plot an interactive dendrogram
> ### Aliases: plot_dendro
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D hc <- hclust(dist(USArrests), "ave")
+ ##D dend1 <- as.dendrogram(hc)
+ ##D plot_dendro(dend1, height = 600) %>% 
+ ##D   hide_legend() %>% 
+ ##D   highlight(persistent = TRUE, dynamic = TRUE)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot_geo")
> ### * plot_geo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_geo
> ### Title: Initiate a plotly-geo object
> ### Aliases: plot_geo
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ map_data("world", "canada") %>%
+   group_by(group) %>%
+   plot_geo(x = ~long, y = ~lat) %>%
+   add_markers(size = I(1))
+ ## Don't show: 
+ }) # examplesIf
> map_data("world", "canada") %>% group_by(group) %>% plot_geo(x = ~long, 
+     y = ~lat) %>% add_markers(size = I(1))
Error in map_data("world", "canada") : 
  The package "maps" is required for `map_data()`.
Calls: <Anonymous> ... is.data.frame -> group_by -> map_data -> check_installed
Execution halted
