
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rJava"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rJava')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Exceptions")
> ### * Exceptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Exceptions
> ### Title: Exception handling
> ### Aliases: Exceptions $.Throwable $<-.Throwable
> 
> ### ** Examples
> 
> ## Don't show: 
> .jinit()
> ## End(Don't show)
> 
> Integer <- J("java.lang.Integer")
> tryCatch( Integer$parseInt( "10.." ), NumberFormatException = function(e){
+ 	e$jobj$printStackTrace() 
+ } )
java.lang.NumberFormatException: For input string: "10.."
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.base/java.lang.Integer.parseInt(Integer.java:652)
	at java.base/java.lang.Integer.parseInt(Integer.java:770)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at RJavaTools.invokeMethod(RJavaTools.java:399)
> 
> # the dollar method is also implemented for Throwable conditions, 
> # so that syntactic sugar can be used on condition objects
> # however, in the example below e is __not__ a jobjRef object reference
> tryCatch( Integer$parseInt( "10.." ), NumberFormatException = function(e){
+ 	e$printStackTrace() 
+ } )
java.lang.NumberFormatException: For input string: "10.."
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.base/java.lang.Integer.parseInt(Integer.java:652)
	at java.base/java.lang.Integer.parseInt(Integer.java:770)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at RJavaTools.invokeMethod(RJavaTools.java:399)
> 
> 
> ## Don't show: 
> tryCatch( Integer$parseInt( "10.." ), NumberFormatException = function(e){
+ 	classes <- class( e )
+ 	stopifnot( "NumberFormatException" %in% classes )
+ 	stopifnot( "Exception" %in% classes )
+ 	stopifnot( "Object" %in% classes )
+ 	stopifnot( "error" %in% classes )
+ 	stopifnot( "condition" %in% classes )
+ } )
> ## End(Don't show)
> 
> 
> 
> 
> cleanEx()
> nameEx("J")
> ### * J
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: J
> ### Title: High level API for accessing Java
> ### Aliases: J
> ### Keywords: interface
> 
> ### ** Examples
> 
> ## Don't show: 
> .jinit()
[1] 0
> ## End(Don't show)
> 
> if (!nzchar(Sys.getenv("NOAWT"))) {
+   f <- new(J("java.awt.Frame"), "Hello")
+   f$setVisible(TRUE)
+ }
Error in .jcall("RJavaTools", "Ljava/lang/Object;", "newInstance", class,  : 
  java.awt.HeadlessException: 
No X11 DISPLAY variable was set, but this program performed an operation which requires it.
Calls: new -> new -> .J -> .jcall -> .jcheck
Execution halted
