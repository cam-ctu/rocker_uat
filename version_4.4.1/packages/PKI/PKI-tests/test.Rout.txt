
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpAIBAAKCAQEAueM27s4SXE0RbfUeTh3k5F5DOpvMNGqP3FmEurvGbiiW8++S"
 [3] "Md45DnbTvjsAyZio62agxp8zDwwi0AbRT9p2AsminfzJRlbHUfaHj/ErPaVWUh0d"
 [4] "LwCRCMDUseQesBDdKe/5U3n4DgWa7gV0ELCd7MhVe5VpKR174lbuA37ckCK7KkiA"
 [5] "dz0fgXyKy3JafZvPX5WrOswO8MTNz5n5ADnnWTi7rAZ3+of1YiuX38SXrtD31UHa"
 [6] "csu1XIXfBWQANFEFgOJ8MerPiQd/5Gi8yQ/bKGTqwpw0VHcas855ZFWiBfVfo4aG"
 [7] "NkvlXC4lcdVSbZpK5E/Bibkt1nFss1SbkYYxSQIDAQABAoIBAA9e7EgYjn3HD6W7"
 [8] "KuuEXvd1RfOJi3wFbb+SQBPyz/3ZlGCNEwEq93vXM+YbLz2m8RzZ/88SE0uaEiIy"
 [9] "gMoCGK0IAE7hEWxOuQJG3j8hpD+KNZY/pbihFYfBmN+G1fTIHYmeDXdWHWlcvvVn"
[10] "Sl7Q7pYe8Kvx7GADz0klgrPo9b24mr67Zu9K3QibJDdBe05Ljq7AimwyeeCl8SNY"
[11] "1H2wKWTwLO6SAVUM9CSyFPVTUmu0sYiGpz1jxw9fcdva3BAMv3t6eEfcQv1Rv+/M"
[12] "8RHII0yCncApbY0yivuJFWr+Bpc9um7/7SPCmShCPVvZ3A5YqMY6rhWojFCtkRuZ"
[13] "9M3NSosCgYEA2sPgy9JOGSdSE5SQecXEapKQcno0Asc3CbJZaQTKgQda+alDhKYZ"
[14] "yBqRZnvIktFIHyn6GKBxVM6Z7J0bROYxVieRUT67iLgpqqVtSYzKPpLQKZI56ft3"
[15] "IoFi51tMY8uj0OYnLaIMxcjne6c36nnziwKYyR467HKmHHlk2tigFgcCgYEA2YbH"
[16] "7tehp4MTOWn2eK7jVq1kBgl/XHjMkM5fCCa9KQeF+hCbEau7TWVKK18zMvpYbBYG"
[17] "gakEd1krn3zKpRNFofgnsd3kry4tZW9gkKe9iqpi5YLXILk5BtBe+bMF6KPygsb+"
[18] "CpPVc7NFI13TwoAn4avXCAZGmbOiijSERWoTKi8CgYBkBWLmTcU/Yub35NkZk/51"
[19] "64T3kj/tdUAIwu52QaaEz+QcefNQ1tC62MrZ3Iab+evLs9mRIOowKDXgJQSuv8CW"
[20] "74hVaSU9IVaLmw8YrbJaYa2jFCQ+gqa5tAaQWQHYLuc7P79x8cF9PJn5wz6hihh7"
[21] "2jgY3CV8rf6czjP6i0jGSQKBgQCO9/j8UBldgdbmy3BFTZz54Sh2l1NwMa0yF5F6"
[22] "SAvXpaw2+ScSbC7E5afj7cQ24zeugqNwIOhgkOkM//YonQwNMo7UZqThRpZrrtJn"
[23] "APig5O/vLRm71kFW6ykhMLrXdrnznlpmFVgbnV35qrd9hMGxn0HLcmSArQJNl8q/"
[24] "3MIP3QKBgQCvJhgN+zxH4ENsOvfIY4pgG4BDq6RpcIV1FBQdOCJI29cife+EPTuE"
[25] "aFgv1g3x0AC5jnzpmU5O864Cgij7j5nBd0K7jZsBNk4bnSBH8Ekmd4UidPxEanCp"
[26] "pURICqUDNX0KYORFezLgMunTby79E4k65qYEYt5DADXSElO1JCqGtQ=="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a4 02 01 00 02 82 01 01 00 b9 e3 36 ee ce 12 5c 4d 11 6d f5 1e
  [25] 4e 1d e4 e4 5e 43 3a 9b cc 34 6a 8f dc 59 84 ba bb c6 6e 28 96 f3 ef 92
  [49] 31 de 39 0e 76 d3 be 3b 00 c9 98 a8 eb 66 a0 c6 9f 33 0f 0c 22 d0 06 d1
  [73] 4f da 76 02 c9 a2 9d fc c9 46 56 c7 51 f6 87 8f f1 2b 3d a5 56 52 1d 1d
  [97] 2f 00 91 08 c0 d4 b1 e4 1e b0 10 dd 29 ef f9 53 79 f8 0e 05 9a ee 05 74
 [121] 10 b0 9d ec c8 55 7b 95 69 29 1d 7b e2 56 ee 03 7e dc 90 22 bb 2a 48 80
 [145] 77 3d 1f 81 7c 8a cb 72 5a 7d 9b cf 5f 95 ab 3a cc 0e f0 c4 cd cf 99 f9
 [169] 00 39 e7 59 38 bb ac 06 77 fa 87 f5 62 2b 97 df c4 97 ae d0 f7 d5 41 da
 [193] 72 cb b5 5c 85 df 05 64 00 34 51 05 80 e2 7c 31 ea cf 89 07 7f e4 68 bc
 [217] c9 0f db 28 64 ea c2 9c 34 54 77 1a b3 ce 79 64 55 a2 05 f5 5f a3 86 86
 [241] 36 4b e5 5c 2e 25 71 d5 52 6d 9a 4a e4 4f c1 89 b9 2d d6 71 6c b3 54 9b
 [265] 91 86 31 49 02 03 01 00 01 02 82 01 00 0f 5e ec 48 18 8e 7d c7 0f a5 bb
 [289] 2a eb 84 5e f7 75 45 f3 89 8b 7c 05 6d bf 92 40 13 f2 cf fd d9 94 60 8d
 [313] 13 01 2a f7 7b d7 33 e6 1b 2f 3d a6 f1 1c d9 ff cf 12 13 4b 9a 12 22 32
 [337] 80 ca 02 18 ad 08 00 4e e1 11 6c 4e b9 02 46 de 3f 21 a4 3f 8a 35 96 3f
 [361] a5 b8 a1 15 87 c1 98 df 86 d5 f4 c8 1d 89 9e 0d 77 56 1d 69 5c be f5 67
 [385] 4a 5e d0 ee 96 1e f0 ab f1 ec 60 03 cf 49 25 82 b3 e8 f5 bd b8 9a be bb
 [409] 66 ef 4a dd 08 9b 24 37 41 7b 4e 4b 8e ae c0 8a 6c 32 79 e0 a5 f1 23 58
 [433] d4 7d b0 29 64 f0 2c ee 92 01 55 0c f4 24 b2 14 f5 53 52 6b b4 b1 88 86
 [457] a7 3d 63 c7 0f 5f 71 db da dc 10 0c bf 7b 7a 78 47 dc 42 fd 51 bf ef cc
 [481] f1 11 c8 23 4c 82 9d c0 29 6d 8d 32 8a fb 89 15 6a fe 06 97 3d ba 6e ff
 [505] ed 23 c2 99 28 42 3d 5b d9 dc 0e 58 a8 c6 3a ae 15 a8 8c 50 ad 91 1b 99
 [529] f4 cd cd 4a 8b 02 81 81 00 da c3 e0 cb d2 4e 19 27 52 13 94 90 79 c5 c4
 [553] 6a 92 90 72 7a 34 02 c7 37 09 b2 59 69 04 ca 81 07 5a f9 a9 43 84 a6 19
 [577] c8 1a 91 66 7b c8 92 d1 48 1f 29 fa 18 a0 71 54 ce 99 ec 9d 1b 44 e6 31
 [601] 56 27 91 51 3e bb 88 b8 29 aa a5 6d 49 8c ca 3e 92 d0 29 92 39 e9 fb 77
 [625] 22 81 62 e7 5b 4c 63 cb a3 d0 e6 27 2d a2 0c c5 c8 e7 7b a7 37 ea 79 f3
 [649] 8b 02 98 c9 1e 3a ec 72 a6 1c 79 64 da d8 a0 16 07 02 81 81 00 d9 86 c7
 [673] ee d7 a1 a7 83 13 39 69 f6 78 ae e3 56 ad 64 06 09 7f 5c 78 cc 90 ce 5f
 [697] 08 26 bd 29 07 85 fa 10 9b 11 ab bb 4d 65 4a 2b 5f 33 32 fa 58 6c 16 06
 [721] 81 a9 04 77 59 2b 9f 7c ca a5 13 45 a1 f8 27 b1 dd e4 af 2e 2d 65 6f 60
 [745] 90 a7 bd 8a aa 62 e5 82 d7 20 b9 39 06 d0 5e f9 b3 05 e8 a3 f2 82 c6 fe
 [769] 0a 93 d5 73 b3 45 23 5d d3 c2 80 27 e1 ab d7 08 06 46 99 b3 a2 8a 34 84
 [793] 45 6a 13 2a 2f 02 81 80 64 05 62 e6 4d c5 3f 62 e6 f7 e4 d9 19 93 fe 75
 [817] eb 84 f7 92 3f ed 75 40 08 c2 ee 76 41 a6 84 cf e4 1c 79 f3 50 d6 d0 ba
 [841] d8 ca d9 dc 86 9b f9 eb cb b3 d9 91 20 ea 30 28 35 e0 25 04 ae bf c0 96
 [865] ef 88 55 69 25 3d 21 56 8b 9b 0f 18 ad b2 5a 61 ad a3 14 24 3e 82 a6 b9
 [889] b4 06 90 59 01 d8 2e e7 3b 3f bf 71 f1 c1 7d 3c 99 f9 c3 3e a1 8a 18 7b
 [913] da 38 18 dc 25 7c ad fe 9c ce 33 fa 8b 48 c6 49 02 81 81 00 8e f7 f8 fc
 [937] 50 19 5d 81 d6 e6 cb 70 45 4d 9c f9 e1 28 76 97 53 70 31 ad 32 17 91 7a
 [961] 48 0b d7 a5 ac 36 f9 27 12 6c 2e c4 e5 a7 e3 ed c4 36 e3 37 ae 82 a3 70
 [985] 20 e8 60 90 e9 0c ff f6 28 9d 0c 0d 32 8e d4 66 a4 e1 46 96 6b ae d2 67
[1009] 00 f8 a0 e4 ef ef 2d 19 bb d6 41 56 eb 29 21 30 ba d7 76 b9 f3 9e 5a 66
[1033] 15 58 1b 9d 5d f9 aa b7 7d 84 c1 b1 9f 41 cb 72 64 80 ad 02 4d 97 ca bf
[1057] dc c2 0f dd 02 81 81 00 af 26 18 0d fb 3c 47 e0 43 6c 3a f7 c8 63 8a 60
[1081] 1b 80 43 ab a4 69 70 85 75 14 14 1d 38 22 48 db d7 22 7d ef 84 3d 3b 84
[1105] 68 58 2f d6 0d f1 d0 00 b9 8e 7c e9 99 4e 4e f3 ae 02 82 28 fb 8f 99 c1
[1129] 77 42 bb 8d 9b 01 36 4e 1b 9d 20 47 f0 49 26 77 85 22 74 fc 44 6a 70 a9
[1153] a5 44 48 0a a5 03 35 7d 0a 60 e4 45 7b 32 e0 32 e9 d3 6f 2e fd 13 89 3a
[1177] e6 a6 04 62 de 43 00 35 d2 12 53 b5 24 2a 86 b5
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x559c1ef04430>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x559c1eef5c70>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAueM27s4SXE0RbfUeTh3k"
[3] "5F5DOpvMNGqP3FmEurvGbiiW8++SMd45DnbTvjsAyZio62agxp8zDwwi0AbRT9p2"
[4] "AsminfzJRlbHUfaHj/ErPaVWUh0dLwCRCMDUseQesBDdKe/5U3n4DgWa7gV0ELCd"
[5] "7MhVe5VpKR174lbuA37ckCK7KkiAdz0fgXyKy3JafZvPX5WrOswO8MTNz5n5ADnn"
[6] "WTi7rAZ3+of1YiuX38SXrtD31UHacsu1XIXfBWQANFEFgOJ8MerPiQd/5Gi8yQ/b"
[7] "KGTqwpw0VHcas855ZFWiBfVfo4aGNkvlXC4lcdVSbZpK5E/Bibkt1nFss1SbkYYx"
[8] "SQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 b9 e3 36 ee ce 12 5c 4d 11 6d f5 1e 4e 1d e4 e4 5e
 [51] 43 3a 9b cc 34 6a 8f dc 59 84 ba bb c6 6e 28 96 f3 ef 92 31 de 39 0e 76 d3
 [76] be 3b 00 c9 98 a8 eb 66 a0 c6 9f 33 0f 0c 22 d0 06 d1 4f da 76 02 c9 a2 9d
[101] fc c9 46 56 c7 51 f6 87 8f f1 2b 3d a5 56 52 1d 1d 2f 00 91 08 c0 d4 b1 e4
[126] 1e b0 10 dd 29 ef f9 53 79 f8 0e 05 9a ee 05 74 10 b0 9d ec c8 55 7b 95 69
[151] 29 1d 7b e2 56 ee 03 7e dc 90 22 bb 2a 48 80 77 3d 1f 81 7c 8a cb 72 5a 7d
[176] 9b cf 5f 95 ab 3a cc 0e f0 c4 cd cf 99 f9 00 39 e7 59 38 bb ac 06 77 fa 87
[201] f5 62 2b 97 df c4 97 ae d0 f7 d5 41 da 72 cb b5 5c 85 df 05 64 00 34 51 05
[226] 80 e2 7c 31 ea cf 89 07 7f e4 68 bc c9 0f db 28 64 ea c2 9c 34 54 77 1a b3
[251] ce 79 64 55 a2 05 f5 5f a3 86 86 36 4b e5 5c 2e 25 71 d5 52 6d 9a 4a e4 4f
[276] c1 89 b9 2d d6 71 6c b3 54 9b 91 86 31 49 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x559c1ee031d0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x559c1ee04a80>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
