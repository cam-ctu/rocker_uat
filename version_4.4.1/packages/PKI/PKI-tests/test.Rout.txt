
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpAIBAAKCAQEAnlT852arItopIPfYzBzJQ8nDw7RRhPg9x7KJCr/mCKphRpP5"
 [3] "u0toy6wc8GnwBeqpIuI2kxhl6dc1w4u1l9+xqoG6+8VVhvH6yIMO+pnareYVxQ3v"
 [4] "3Cwtc/3nv4eEbxZjDfGS3xc2aYCYOEENVIZqa/TAGVMGHxkf+6SeIFwAcEFC+wee"
 [5] "ojf0iY4HC3nLTMcRPSA2P5nO2jOlsNNdit2kJDwcZ+Dvhqt4QoZ/RKoiGnvXcdb7"
 [6] "Vc+ZP2snkfF4rcCdQQij6DSzc1aw7RYJWoSCwa9bup1Op3JkWB6mMIKRY8/PxJbr"
 [7] "QQhJ+rQSSCQ+PdaNp53On+6N1GfHm68NVYlpXwIDAQABAoIBADAm0p8hNyyrQlTX"
 [8] "a2Rv4Lmv88xh22TgBhHkdw8A21mJT3oiaJGQVneSiV6IKUnzWqrUNxq3Ec9y9tPY"
 [9] "ekqM6kBbod0N33vhvY4bZYPLJJk8XySFn4vLF6ut7TvvX9RU75z++dbE/XRKeoCp"
[10] "L/+jvVvFnGJXQIZWosZqAvj+YdfBVpmVBkQsEzc8GNYngy+2uiipdmzB8Xd8LyOe"
[11] "7J9SmBRBS6xiJHhZsmR6wXzCZ6cMP9NjuIdzgNfpU150lIylwxCBdXLMdu3lNwW+"
[12] "1hEheAUFZlfY0SNek3vgmDa/hxXslOcnZzE2FCVGOsgjEtLXRYkBsjPIFaN+7tWE"
[13] "NkL68xkCgYEAvy8jgihCGbU1EKVhN6j1ITuHwJoiVkVQNsxNhLhU4G+wy/8GhR2q"
[14] "qiEqrJrneoOn5lfBNBn708JUxlUHcZF3lD1qT62Xxx1XydAk8y3PN1QwqgbZwvA5"
[15] "s3NobwcmhYppEyHia5cVwprY7QUi4sPr0YwBs7fSAD7XraEvWaEZydMCgYEA1AKc"
[16] "1xAu3aAk6prA0etJdJsdmkM90qc8DQjLW3VvlZ8t5fkPA9eNT/vqZSvtD6+/Q5sF"
[17] "qOFgjd4PT9Yy6AY6RJhwVYkoNd1v6HmdgtaEFg2lLxKG8k0D94tNL7Ub52dzapoy"
[18] "vbGp0ARwMLOJQ3Veay9jFiXtcpP5x75SmHjwPsUCgYB7T04ZvxmTNzs4t1JS8hjZ"
[19] "DGpsoX2QIzivf2poNfQYpjFkAeMUrKPNA4NgvLCcZpo+iU9F6ZRxap//JAyfBXIZ"
[20] "HNua9J42gQiEVEngxyUlzJlusOh3QTYWNlOfeP8xlqpa+rntJw+T6wgLKAruM+u/"
[21] "xgu6/M7n9aBqjtHZf30AnQKBgQCNNARD1Npx75RG0LU12tB8okcwFDLb11hOkhnn"
[22] "Gysrau5F6gCPHYRXzj/KDFyCgxoPK/O0DA+jzU9DbDVRhbxPLXw76/LlFUvQeRdo"
[23] "KfmlOodW9677OEI5IAVTjfs8vxEG4haDcw3Xpu0V8q2sSUKOfuwutyoTkuzclS0r"
[24] "sfjIxQKBgQCkZ44oyt/Z1dD85+IUu//b1uKcERPvYeO06NCntRxnjF+NfikSOHmI"
[25] "ojVoMXf7n9zBSeNB6AXPjrtkkjpXftHg0okrq4qcdqSLGErvsgEomtuiR/oVonF3"
[26] "6ssiHK1slJxbDnHwqH1ULzKJryRkyn0PbJB7+2qIzlc/LUl4IRNyZQ=="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a4 02 01 00 02 82 01 01 00 9e 54 fc e7 66 ab 22 da 29 20 f7 d8
  [25] cc 1c c9 43 c9 c3 c3 b4 51 84 f8 3d c7 b2 89 0a bf e6 08 aa 61 46 93 f9
  [49] bb 4b 68 cb ac 1c f0 69 f0 05 ea a9 22 e2 36 93 18 65 e9 d7 35 c3 8b b5
  [73] 97 df b1 aa 81 ba fb c5 55 86 f1 fa c8 83 0e fa 99 da ad e6 15 c5 0d ef
  [97] dc 2c 2d 73 fd e7 bf 87 84 6f 16 63 0d f1 92 df 17 36 69 80 98 38 41 0d
 [121] 54 86 6a 6b f4 c0 19 53 06 1f 19 1f fb a4 9e 20 5c 00 70 41 42 fb 07 9e
 [145] a2 37 f4 89 8e 07 0b 79 cb 4c c7 11 3d 20 36 3f 99 ce da 33 a5 b0 d3 5d
 [169] 8a dd a4 24 3c 1c 67 e0 ef 86 ab 78 42 86 7f 44 aa 22 1a 7b d7 71 d6 fb
 [193] 55 cf 99 3f 6b 27 91 f1 78 ad c0 9d 41 08 a3 e8 34 b3 73 56 b0 ed 16 09
 [217] 5a 84 82 c1 af 5b ba 9d 4e a7 72 64 58 1e a6 30 82 91 63 cf cf c4 96 eb
 [241] 41 08 49 fa b4 12 48 24 3e 3d d6 8d a7 9d ce 9f ee 8d d4 67 c7 9b af 0d
 [265] 55 89 69 5f 02 03 01 00 01 02 82 01 00 30 26 d2 9f 21 37 2c ab 42 54 d7
 [289] 6b 64 6f e0 b9 af f3 cc 61 db 64 e0 06 11 e4 77 0f 00 db 59 89 4f 7a 22
 [313] 68 91 90 56 77 92 89 5e 88 29 49 f3 5a aa d4 37 1a b7 11 cf 72 f6 d3 d8
 [337] 7a 4a 8c ea 40 5b a1 dd 0d df 7b e1 bd 8e 1b 65 83 cb 24 99 3c 5f 24 85
 [361] 9f 8b cb 17 ab ad ed 3b ef 5f d4 54 ef 9c fe f9 d6 c4 fd 74 4a 7a 80 a9
 [385] 2f ff a3 bd 5b c5 9c 62 57 40 86 56 a2 c6 6a 02 f8 fe 61 d7 c1 56 99 95
 [409] 06 44 2c 13 37 3c 18 d6 27 83 2f b6 ba 28 a9 76 6c c1 f1 77 7c 2f 23 9e
 [433] ec 9f 52 98 14 41 4b ac 62 24 78 59 b2 64 7a c1 7c c2 67 a7 0c 3f d3 63
 [457] b8 87 73 80 d7 e9 53 5e 74 94 8c a5 c3 10 81 75 72 cc 76 ed e5 37 05 be
 [481] d6 11 21 78 05 05 66 57 d8 d1 23 5e 93 7b e0 98 36 bf 87 15 ec 94 e7 27
 [505] 67 31 36 14 25 46 3a c8 23 12 d2 d7 45 89 01 b2 33 c8 15 a3 7e ee d5 84
 [529] 36 42 fa f3 19 02 81 81 00 bf 2f 23 82 28 42 19 b5 35 10 a5 61 37 a8 f5
 [553] 21 3b 87 c0 9a 22 56 45 50 36 cc 4d 84 b8 54 e0 6f b0 cb ff 06 85 1d aa
 [577] aa 21 2a ac 9a e7 7a 83 a7 e6 57 c1 34 19 fb d3 c2 54 c6 55 07 71 91 77
 [601] 94 3d 6a 4f ad 97 c7 1d 57 c9 d0 24 f3 2d cf 37 54 30 aa 06 d9 c2 f0 39
 [625] b3 73 68 6f 07 26 85 8a 69 13 21 e2 6b 97 15 c2 9a d8 ed 05 22 e2 c3 eb
 [649] d1 8c 01 b3 b7 d2 00 3e d7 ad a1 2f 59 a1 19 c9 d3 02 81 81 00 d4 02 9c
 [673] d7 10 2e dd a0 24 ea 9a c0 d1 eb 49 74 9b 1d 9a 43 3d d2 a7 3c 0d 08 cb
 [697] 5b 75 6f 95 9f 2d e5 f9 0f 03 d7 8d 4f fb ea 65 2b ed 0f af bf 43 9b 05
 [721] a8 e1 60 8d de 0f 4f d6 32 e8 06 3a 44 98 70 55 89 28 35 dd 6f e8 79 9d
 [745] 82 d6 84 16 0d a5 2f 12 86 f2 4d 03 f7 8b 4d 2f b5 1b e7 67 73 6a 9a 32
 [769] bd b1 a9 d0 04 70 30 b3 89 43 75 5e 6b 2f 63 16 25 ed 72 93 f9 c7 be 52
 [793] 98 78 f0 3e c5 02 81 80 7b 4f 4e 19 bf 19 93 37 3b 38 b7 52 52 f2 18 d9
 [817] 0c 6a 6c a1 7d 90 23 38 af 7f 6a 68 35 f4 18 a6 31 64 01 e3 14 ac a3 cd
 [841] 03 83 60 bc b0 9c 66 9a 3e 89 4f 45 e9 94 71 6a 9f ff 24 0c 9f 05 72 19
 [865] 1c db 9a f4 9e 36 81 08 84 54 49 e0 c7 25 25 cc 99 6e b0 e8 77 41 36 16
 [889] 36 53 9f 78 ff 31 96 aa 5a fa b9 ed 27 0f 93 eb 08 0b 28 0a ee 33 eb bf
 [913] c6 0b ba fc ce e7 f5 a0 6a 8e d1 d9 7f 7d 00 9d 02 81 81 00 8d 34 04 43
 [937] d4 da 71 ef 94 46 d0 b5 35 da d0 7c a2 47 30 14 32 db d7 58 4e 92 19 e7
 [961] 1b 2b 2b 6a ee 45 ea 00 8f 1d 84 57 ce 3f ca 0c 5c 82 83 1a 0f 2b f3 b4
 [985] 0c 0f a3 cd 4f 43 6c 35 51 85 bc 4f 2d 7c 3b eb f2 e5 15 4b d0 79 17 68
[1009] 29 f9 a5 3a 87 56 f7 ae fb 38 42 39 20 05 53 8d fb 3c bf 11 06 e2 16 83
[1033] 73 0d d7 a6 ed 15 f2 ad ac 49 42 8e 7e ec 2e b7 2a 13 92 ec dc 95 2d 2b
[1057] b1 f8 c8 c5 02 81 81 00 a4 67 8e 28 ca df d9 d5 d0 fc e7 e2 14 bb ff db
[1081] d6 e2 9c 11 13 ef 61 e3 b4 e8 d0 a7 b5 1c 67 8c 5f 8d 7e 29 12 38 79 88
[1105] a2 35 68 31 77 fb 9f dc c1 49 e3 41 e8 05 cf 8e bb 64 92 3a 57 7e d1 e0
[1129] d2 89 2b ab 8a 9c 76 a4 8b 18 4a ef b2 01 28 9a db a2 47 fa 15 a2 71 77
[1153] ea cb 22 1c ad 6c 94 9c 5b 0e 71 f0 a8 7d 54 2f 32 89 af 24 64 ca 7d 0f
[1177] 6c 90 7b fb 6a 88 ce 57 3f 2d 49 78 21 13 72 65
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55614db09290>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55614dafaad0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnlT852arItopIPfYzBzJ"
[3] "Q8nDw7RRhPg9x7KJCr/mCKphRpP5u0toy6wc8GnwBeqpIuI2kxhl6dc1w4u1l9+x"
[4] "qoG6+8VVhvH6yIMO+pnareYVxQ3v3Cwtc/3nv4eEbxZjDfGS3xc2aYCYOEENVIZq"
[5] "a/TAGVMGHxkf+6SeIFwAcEFC+weeojf0iY4HC3nLTMcRPSA2P5nO2jOlsNNdit2k"
[6] "JDwcZ+Dvhqt4QoZ/RKoiGnvXcdb7Vc+ZP2snkfF4rcCdQQij6DSzc1aw7RYJWoSC"
[7] "wa9bup1Op3JkWB6mMIKRY8/PxJbrQQhJ+rQSSCQ+PdaNp53On+6N1GfHm68NVYlp"
[8] "XwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 9e 54 fc e7 66 ab 22 da 29 20 f7 d8 cc 1c c9 43 c9
 [51] c3 c3 b4 51 84 f8 3d c7 b2 89 0a bf e6 08 aa 61 46 93 f9 bb 4b 68 cb ac 1c
 [76] f0 69 f0 05 ea a9 22 e2 36 93 18 65 e9 d7 35 c3 8b b5 97 df b1 aa 81 ba fb
[101] c5 55 86 f1 fa c8 83 0e fa 99 da ad e6 15 c5 0d ef dc 2c 2d 73 fd e7 bf 87
[126] 84 6f 16 63 0d f1 92 df 17 36 69 80 98 38 41 0d 54 86 6a 6b f4 c0 19 53 06
[151] 1f 19 1f fb a4 9e 20 5c 00 70 41 42 fb 07 9e a2 37 f4 89 8e 07 0b 79 cb 4c
[176] c7 11 3d 20 36 3f 99 ce da 33 a5 b0 d3 5d 8a dd a4 24 3c 1c 67 e0 ef 86 ab
[201] 78 42 86 7f 44 aa 22 1a 7b d7 71 d6 fb 55 cf 99 3f 6b 27 91 f1 78 ad c0 9d
[226] 41 08 a3 e8 34 b3 73 56 b0 ed 16 09 5a 84 82 c1 af 5b ba 9d 4e a7 72 64 58
[251] 1e a6 30 82 91 63 cf cf c4 96 eb 41 08 49 fa b4 12 48 24 3e 3d d6 8d a7 9d
[276] ce 9f ee 8d d4 67 c7 9b af 0d 55 89 69 5f 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55614da08060>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55614da09960>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
