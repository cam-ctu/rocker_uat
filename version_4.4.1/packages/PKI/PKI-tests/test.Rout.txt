
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEAyf+GU7aJHuDK07kq62tBRBfRBy5B6dsPVOo1DQP04qWUctxy"
 [3] "4A0p52ON9KqVxEKZEkd7YZ2tWn7HvgD1RvJzSgiGV+k9xqKekr0UTICk2sR9ntAo"
 [4] "TaMT/Co8aMG6/dgp0L+8Pt5l7G5ends0JOpetcpaG/tV1EHRgQ2PLn7oKt5QmzkP"
 [5] "lMIqFi2oH/zYrO/ydIzkEjPjyM/fryk2ES0KI8jhWu2Kmyi4oNz8g+oObxwVnOPG"
 [6] "wOJ1wp8p/CVib4+ld+Szvj3Kko9Ve9Y8h8XTVZM0DNOCn5nK/xGEjxMuroc5f+X/"
 [7] "Z/hlc9ETP+ZERJ7564KcbsB1BIZonUwq17LOZwIDAQABAoIBADMdfhhg8IHn0GuT"
 [8] "R9Ea6wEYJcTzZ6qNzGtoeNQ6VBWmYNJQBqG7swbiomFvaUaos6N0gzxIcj2cJ19l"
 [9] "TqwNXi81yQkl9IP3Urk/L4vMYesaHc+6TPiYc84zweWgYHkr4ij42+Hs1U3m//pi"
[10] "JefRhvXpprO9/hIgNau6iqjxZD60X/HNWrYQd4kxs1tppA3ObQFfXQCuqnGVG+XB"
[11] "BjItdIboNpV3W4qr/ON1+mIHXolce5E/abe4uRMWrPWErKqwPqKhxwMVngCwk/aM"
[12] "bBtHkNPZhbQrAI/s3jtGaOAcEL4Jml7q3rFjhPFr7mpSQJuRcWnLPvSYPfo9tyUi"
[13] "zgegnkECgYEA2j9t10W7PjrnDEbzNLiK6zimKKYV+BqDL8LHOoXCu8xcILY/BauQ"
[14] "Sh4cvWf/Mnuz2oCvz41PcTvaTn67tzMrz/xa3VRbzB9SsgFCu/fx5NIn3sOl8SrM"
[15] "ZByRDL0wxl8aBVY11R2RKwsKyJwfn58dml2OH7RMtqzUfiXissZfpWsCgYEA7PCF"
[16] "QOaA2HFM1i5LOSRlG7yi9bXJCHNmiTncLeFPR/neKEoR6kq9fHlSP3q7jYWTYJA9"
[17] "bcSET03XwEG9nC39MPI1V+HYl3vHno127zc6Hr8HppRfwbJXXxo/saMgwg6OilpD"
[18] "Z7ljjJQ6/phngjnJyVZvWchLsTbJ+bxKbGv9PfUCgYAPF5vM6zGLmB8qJi3jU2+n"
[19] "3H8BCJs0UQEJaHrGfUF+Ix+r026AQeD0fyiVoH9xSkShs4x02dzIg88Q5oqsnIlH"
[20] "FLhj3dWLRA8/5/5paTf9Dtta+ESdbMw9kAwnyV16GlF+VPvcBPNo+paAUOuO6j3t"
[21] "0tJlNt6nM0RuhMgsfLNYiQKBgBczIckOCNWoml5qYAEzWBcULFyktQ93xTVwjeeM"
[22] "JSgmBiOpxQFM2iri8jO2/8BGsPyGgw1Jba8aLyLrDPbK5fyx6pk1SvDiNNSIg3m+"
[23] "zZkPGV+tLYcYwEdWmZ/6Gg4GQNy5I9p3I5EzPmeJYrE0mVZ2eSawXwD2HWavkhX1"
[24] "qPE1AoGBAKCLovh8kyGg6V1THOgmZNH/1xIMKk5AQNbYoxMzHq4lRsL/FLl7veD9"
[25] "JkwKlbg8NBWyz1wm4qx+pLU9lCjbVpFa6wfde8LILIufsnQNBgF7g16McRVb9NBr"
[26] "6yoXOzfQXgY+vZspR1joyyxbzcKFSwZFJSsqGL5cyM9HYFdtyK4U"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 c9 ff 86 53 b6 89 1e e0 ca d3 b9 2a
  [25] eb 6b 41 44 17 d1 07 2e 41 e9 db 0f 54 ea 35 0d 03 f4 e2 a5 94 72 dc 72
  [49] e0 0d 29 e7 63 8d f4 aa 95 c4 42 99 12 47 7b 61 9d ad 5a 7e c7 be 00 f5
  [73] 46 f2 73 4a 08 86 57 e9 3d c6 a2 9e 92 bd 14 4c 80 a4 da c4 7d 9e d0 28
  [97] 4d a3 13 fc 2a 3c 68 c1 ba fd d8 29 d0 bf bc 3e de 65 ec 6e 5e 9d db 34
 [121] 24 ea 5e b5 ca 5a 1b fb 55 d4 41 d1 81 0d 8f 2e 7e e8 2a de 50 9b 39 0f
 [145] 94 c2 2a 16 2d a8 1f fc d8 ac ef f2 74 8c e4 12 33 e3 c8 cf df af 29 36
 [169] 11 2d 0a 23 c8 e1 5a ed 8a 9b 28 b8 a0 dc fc 83 ea 0e 6f 1c 15 9c e3 c6
 [193] c0 e2 75 c2 9f 29 fc 25 62 6f 8f a5 77 e4 b3 be 3d ca 92 8f 55 7b d6 3c
 [217] 87 c5 d3 55 93 34 0c d3 82 9f 99 ca ff 11 84 8f 13 2e ae 87 39 7f e5 ff
 [241] 67 f8 65 73 d1 13 3f e6 44 44 9e f9 eb 82 9c 6e c0 75 04 86 68 9d 4c 2a
 [265] d7 b2 ce 67 02 03 01 00 01 02 82 01 00 33 1d 7e 18 60 f0 81 e7 d0 6b 93
 [289] 47 d1 1a eb 01 18 25 c4 f3 67 aa 8d cc 6b 68 78 d4 3a 54 15 a6 60 d2 50
 [313] 06 a1 bb b3 06 e2 a2 61 6f 69 46 a8 b3 a3 74 83 3c 48 72 3d 9c 27 5f 65
 [337] 4e ac 0d 5e 2f 35 c9 09 25 f4 83 f7 52 b9 3f 2f 8b cc 61 eb 1a 1d cf ba
 [361] 4c f8 98 73 ce 33 c1 e5 a0 60 79 2b e2 28 f8 db e1 ec d5 4d e6 ff fa 62
 [385] 25 e7 d1 86 f5 e9 a6 b3 bd fe 12 20 35 ab ba 8a a8 f1 64 3e b4 5f f1 cd
 [409] 5a b6 10 77 89 31 b3 5b 69 a4 0d ce 6d 01 5f 5d 00 ae aa 71 95 1b e5 c1
 [433] 06 32 2d 74 86 e8 36 95 77 5b 8a ab fc e3 75 fa 62 07 5e 89 5c 7b 91 3f
 [457] 69 b7 b8 b9 13 16 ac f5 84 ac aa b0 3e a2 a1 c7 03 15 9e 00 b0 93 f6 8c
 [481] 6c 1b 47 90 d3 d9 85 b4 2b 00 8f ec de 3b 46 68 e0 1c 10 be 09 9a 5e ea
 [505] de b1 63 84 f1 6b ee 6a 52 40 9b 91 71 69 cb 3e f4 98 3d fa 3d b7 25 22
 [529] ce 07 a0 9e 41 02 81 81 00 da 3f 6d d7 45 bb 3e 3a e7 0c 46 f3 34 b8 8a
 [553] eb 38 a6 28 a6 15 f8 1a 83 2f c2 c7 3a 85 c2 bb cc 5c 20 b6 3f 05 ab 90
 [577] 4a 1e 1c bd 67 ff 32 7b b3 da 80 af cf 8d 4f 71 3b da 4e 7e bb b7 33 2b
 [601] cf fc 5a dd 54 5b cc 1f 52 b2 01 42 bb f7 f1 e4 d2 27 de c3 a5 f1 2a cc
 [625] 64 1c 91 0c bd 30 c6 5f 1a 05 56 35 d5 1d 91 2b 0b 0a c8 9c 1f 9f 9f 1d
 [649] 9a 5d 8e 1f b4 4c b6 ac d4 7e 25 e2 b2 c6 5f a5 6b 02 81 81 00 ec f0 85
 [673] 40 e6 80 d8 71 4c d6 2e 4b 39 24 65 1b bc a2 f5 b5 c9 08 73 66 89 39 dc
 [697] 2d e1 4f 47 f9 de 28 4a 11 ea 4a bd 7c 79 52 3f 7a bb 8d 85 93 60 90 3d
 [721] 6d c4 84 4f 4d d7 c0 41 bd 9c 2d fd 30 f2 35 57 e1 d8 97 7b c7 9e 8d 76
 [745] ef 37 3a 1e bf 07 a6 94 5f c1 b2 57 5f 1a 3f b1 a3 20 c2 0e 8e 8a 5a 43
 [769] 67 b9 63 8c 94 3a fe 98 67 82 39 c9 c9 56 6f 59 c8 4b b1 36 c9 f9 bc 4a
 [793] 6c 6b fd 3d f5 02 81 80 0f 17 9b cc eb 31 8b 98 1f 2a 26 2d e3 53 6f a7
 [817] dc 7f 01 08 9b 34 51 01 09 68 7a c6 7d 41 7e 23 1f ab d3 6e 80 41 e0 f4
 [841] 7f 28 95 a0 7f 71 4a 44 a1 b3 8c 74 d9 dc c8 83 cf 10 e6 8a ac 9c 89 47
 [865] 14 b8 63 dd d5 8b 44 0f 3f e7 fe 69 69 37 fd 0e db 5a f8 44 9d 6c cc 3d
 [889] 90 0c 27 c9 5d 7a 1a 51 7e 54 fb dc 04 f3 68 fa 96 80 50 eb 8e ea 3d ed
 [913] d2 d2 65 36 de a7 33 44 6e 84 c8 2c 7c b3 58 89 02 81 80 17 33 21 c9 0e
 [937] 08 d5 a8 9a 5e 6a 60 01 33 58 17 14 2c 5c a4 b5 0f 77 c5 35 70 8d e7 8c
 [961] 25 28 26 06 23 a9 c5 01 4c da 2a e2 f2 33 b6 ff c0 46 b0 fc 86 83 0d 49
 [985] 6d af 1a 2f 22 eb 0c f6 ca e5 fc b1 ea 99 35 4a f0 e2 34 d4 88 83 79 be
[1009] cd 99 0f 19 5f ad 2d 87 18 c0 47 56 99 9f fa 1a 0e 06 40 dc b9 23 da 77
[1033] 23 91 33 3e 67 89 62 b1 34 99 56 76 79 26 b0 5f 00 f6 1d 66 af 92 15 f5
[1057] a8 f1 35 02 81 81 00 a0 8b a2 f8 7c 93 21 a0 e9 5d 53 1c e8 26 64 d1 ff
[1081] d7 12 0c 2a 4e 40 40 d6 d8 a3 13 33 1e ae 25 46 c2 ff 14 b9 7b bd e0 fd
[1105] 26 4c 0a 95 b8 3c 34 15 b2 cf 5c 26 e2 ac 7e a4 b5 3d 94 28 db 56 91 5a
[1129] eb 07 dd 7b c2 c8 2c 8b 9f b2 74 0d 06 01 7b 83 5e 8c 71 15 5b f4 d0 6b
[1153] eb 2a 17 3b 37 d0 5e 06 3e bd 9b 29 47 58 e8 cb 2c 5b cd c2 85 4b 06 45
[1177] 25 2b 2a 18 be 5c c8 cf 47 60 57 6d c8 ae 14
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55c92fc3a430>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55c92fc2bc70>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyf+GU7aJHuDK07kq62tB"
[3] "RBfRBy5B6dsPVOo1DQP04qWUctxy4A0p52ON9KqVxEKZEkd7YZ2tWn7HvgD1RvJz"
[4] "SgiGV+k9xqKekr0UTICk2sR9ntAoTaMT/Co8aMG6/dgp0L+8Pt5l7G5ends0JOpe"
[5] "tcpaG/tV1EHRgQ2PLn7oKt5QmzkPlMIqFi2oH/zYrO/ydIzkEjPjyM/fryk2ES0K"
[6] "I8jhWu2Kmyi4oNz8g+oObxwVnOPGwOJ1wp8p/CVib4+ld+Szvj3Kko9Ve9Y8h8XT"
[7] "VZM0DNOCn5nK/xGEjxMuroc5f+X/Z/hlc9ETP+ZERJ7564KcbsB1BIZonUwq17LO"
[8] "ZwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 c9 ff 86 53 b6 89 1e e0 ca d3 b9 2a eb 6b 41 44 17
 [51] d1 07 2e 41 e9 db 0f 54 ea 35 0d 03 f4 e2 a5 94 72 dc 72 e0 0d 29 e7 63 8d
 [76] f4 aa 95 c4 42 99 12 47 7b 61 9d ad 5a 7e c7 be 00 f5 46 f2 73 4a 08 86 57
[101] e9 3d c6 a2 9e 92 bd 14 4c 80 a4 da c4 7d 9e d0 28 4d a3 13 fc 2a 3c 68 c1
[126] ba fd d8 29 d0 bf bc 3e de 65 ec 6e 5e 9d db 34 24 ea 5e b5 ca 5a 1b fb 55
[151] d4 41 d1 81 0d 8f 2e 7e e8 2a de 50 9b 39 0f 94 c2 2a 16 2d a8 1f fc d8 ac
[176] ef f2 74 8c e4 12 33 e3 c8 cf df af 29 36 11 2d 0a 23 c8 e1 5a ed 8a 9b 28
[201] b8 a0 dc fc 83 ea 0e 6f 1c 15 9c e3 c6 c0 e2 75 c2 9f 29 fc 25 62 6f 8f a5
[226] 77 e4 b3 be 3d ca 92 8f 55 7b d6 3c 87 c5 d3 55 93 34 0c d3 82 9f 99 ca ff
[251] 11 84 8f 13 2e ae 87 39 7f e5 ff 67 f8 65 73 d1 13 3f e6 44 44 9e f9 eb 82
[276] 9c 6e c0 75 04 86 68 9d 4c 2a d7 b2 ce 67 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55c92fb391d0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55c92fb3aa80>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
