
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpQIBAAKCAQEAvtsQJqwrCwilugD51IwPbyC5c27xqA8iWE5PKWVhaZw+TiM0"
 [3] "0xLgVNvs6KZIOyxID1JKrm1/3X/07vbnfmTD1GEhTyfMvTecSP7bGGC8kaTk/j3q"
 [4] "0L0mhhRPk1DHxj6kPadNg1KDaUspWJttEQxXZ2Q32T6m/+/NLfel0FNVqCy1rTBy"
 [5] "U4wrGkZ1foEnxGsJ8Pd63ewr61GzfwoZUfMUNvwma8rBas/qaoMUasFEd9cj6TfM"
 [6] "5ly7BW56zMrZoagdtudQh8RkqqHDPhL5y2h/eCdl/RJwEF014JNKvpKLMGlQPwA1"
 [7] "HnR6hDAhITA+zbZC2QhGS4G38FmKu8e2W+LE2QIDAQABAoIBAAFtD43fpIIzKwja"
 [8] "GRisCEty7BWu9avuR4xalitx82m5vWukCjtpBGkPiiPxZjN1G1NCTtdmEScK5ZbK"
 [9] "2JW/gXFcQ14acrgSeoC/U3jmN/lUpy3u98QvGTZimYbBCErOyQMgrEZT2w3Kt7sv"
[10] "WOMxO3m1MDutzLE6KpBhUiye9guy2Rx0DbsIE7LM+OiszpOG/SqrkbQyI6ZKCz2f"
[11] "kciBpaCZDayEtQFzrHiSbU0XlZcE8wBnhLghVMZUh1wsTHeZnrrr3K6eFJM9rn35"
[12] "qSKJpVAdaEaanA36jZW7HlCuvyjpRZu8CIwKHDbNH4/4j3cEgrdrsSYgNrZjWVDN"
[13] "AEoQwCkCgYEAxlkGxAmpAKEqJ+ZKP83iFhPuMe9tkAF8bquuxz3zIey+uOAFgVgo"
[14] "+k48xD0/Jccr3fDdAJSCYmDlgWAgD+cPosY4IKlrjfH0pS/zCcEt1/1exY3Jsd1M"
[15] "854oaTuBSPH2iI6SzXxmvpsA0RbDlnVIFkFt3ujBI5iLkxg4CdmS3FMCgYEA9lSO"
[16] "ibOdSMNnDg/Lqk/ED4adM3WxaW/UV0ltQbFqDsbzMq7dkbIPPS9v0bhdkquWAlK1"
[17] "SLy2Qkk/5uX8M6SXsFLqrFIuHTHwDAheabzEXeEyDIJYnbaTfCxpk5Sbgk+Mtlkg"
[18] "Sf+JQlDqxlisVBCeAU+FXWi9fsZp2hIUTMfuFKMCgYEAoF8JDmZ1JBIrIJmdvRr9"
[19] "SzaQKAXbw0zATEc6CNS5Cdv+lUJkkSEz+LZbgZu3vBbfDBMczcRF679GsaWEJvd+"
[20] "9/BnH1l8ogdY9Frhmih8pZ+yCe9Lfildd7iQGg3HybAB0oXcgpKsDD8NmQFb4QIw"
[21] "5/W9HTd6Ogq0B5nUbXpiuQsCgYEAzdaitVauG9uNBicU3WCCSScHvbSfZ6fXHIlz"
[22] "Du4d3fNJzhRpehH8wfgdzHXvW1yeoZpTelCXTJTBHUUZll33k5P2HcEeX68XFDb6"
[23] "Dgl7XaeMlv9k5YVngN/r6TLJL/8hak7XuH4cSJotVUlL14N7RUUaAJBBqOpMEboB"
[24] "1JdMz1kCgYEAq8aRYi2ICHZl6UgUQ4QwvTB5td96yKN/b7oSKKXQqnCuVGOeKX/o"
[25] "0/Gf4sX6d7nnVJp4hcM7An/gTnaxXmGvoak+iytvEiTsj2/7XuZ5Bt1ZRqlqbITf"
[26] "aLDvt/Or3E5k0ux0B961AE03Fh00+8nReCGcxodsc1OMMASOSA2rRfI="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a5 02 01 00 02 82 01 01 00 be db 10 26 ac 2b 0b 08 a5 ba 00 f9
  [25] d4 8c 0f 6f 20 b9 73 6e f1 a8 0f 22 58 4e 4f 29 65 61 69 9c 3e 4e 23 34
  [49] d3 12 e0 54 db ec e8 a6 48 3b 2c 48 0f 52 4a ae 6d 7f dd 7f f4 ee f6 e7
  [73] 7e 64 c3 d4 61 21 4f 27 cc bd 37 9c 48 fe db 18 60 bc 91 a4 e4 fe 3d ea
  [97] d0 bd 26 86 14 4f 93 50 c7 c6 3e a4 3d a7 4d 83 52 83 69 4b 29 58 9b 6d
 [121] 11 0c 57 67 64 37 d9 3e a6 ff ef cd 2d f7 a5 d0 53 55 a8 2c b5 ad 30 72
 [145] 53 8c 2b 1a 46 75 7e 81 27 c4 6b 09 f0 f7 7a dd ec 2b eb 51 b3 7f 0a 19
 [169] 51 f3 14 36 fc 26 6b ca c1 6a cf ea 6a 83 14 6a c1 44 77 d7 23 e9 37 cc
 [193] e6 5c bb 05 6e 7a cc ca d9 a1 a8 1d b6 e7 50 87 c4 64 aa a1 c3 3e 12 f9
 [217] cb 68 7f 78 27 65 fd 12 70 10 5d 35 e0 93 4a be 92 8b 30 69 50 3f 00 35
 [241] 1e 74 7a 84 30 21 21 30 3e cd b6 42 d9 08 46 4b 81 b7 f0 59 8a bb c7 b6
 [265] 5b e2 c4 d9 02 03 01 00 01 02 82 01 00 01 6d 0f 8d df a4 82 33 2b 08 da
 [289] 19 18 ac 08 4b 72 ec 15 ae f5 ab ee 47 8c 5a 96 2b 71 f3 69 b9 bd 6b a4
 [313] 0a 3b 69 04 69 0f 8a 23 f1 66 33 75 1b 53 42 4e d7 66 11 27 0a e5 96 ca
 [337] d8 95 bf 81 71 5c 43 5e 1a 72 b8 12 7a 80 bf 53 78 e6 37 f9 54 a7 2d ee
 [361] f7 c4 2f 19 36 62 99 86 c1 08 4a ce c9 03 20 ac 46 53 db 0d ca b7 bb 2f
 [385] 58 e3 31 3b 79 b5 30 3b ad cc b1 3a 2a 90 61 52 2c 9e f6 0b b2 d9 1c 74
 [409] 0d bb 08 13 b2 cc f8 e8 ac ce 93 86 fd 2a ab 91 b4 32 23 a6 4a 0b 3d 9f
 [433] 91 c8 81 a5 a0 99 0d ac 84 b5 01 73 ac 78 92 6d 4d 17 95 97 04 f3 00 67
 [457] 84 b8 21 54 c6 54 87 5c 2c 4c 77 99 9e ba eb dc ae 9e 14 93 3d ae 7d f9
 [481] a9 22 89 a5 50 1d 68 46 9a 9c 0d fa 8d 95 bb 1e 50 ae bf 28 e9 45 9b bc
 [505] 08 8c 0a 1c 36 cd 1f 8f f8 8f 77 04 82 b7 6b b1 26 20 36 b6 63 59 50 cd
 [529] 00 4a 10 c0 29 02 81 81 00 c6 59 06 c4 09 a9 00 a1 2a 27 e6 4a 3f cd e2
 [553] 16 13 ee 31 ef 6d 90 01 7c 6e ab ae c7 3d f3 21 ec be b8 e0 05 81 58 28
 [577] fa 4e 3c c4 3d 3f 25 c7 2b dd f0 dd 00 94 82 62 60 e5 81 60 20 0f e7 0f
 [601] a2 c6 38 20 a9 6b 8d f1 f4 a5 2f f3 09 c1 2d d7 fd 5e c5 8d c9 b1 dd 4c
 [625] f3 9e 28 69 3b 81 48 f1 f6 88 8e 92 cd 7c 66 be 9b 00 d1 16 c3 96 75 48
 [649] 16 41 6d de e8 c1 23 98 8b 93 18 38 09 d9 92 dc 53 02 81 81 00 f6 54 8e
 [673] 89 b3 9d 48 c3 67 0e 0f cb aa 4f c4 0f 86 9d 33 75 b1 69 6f d4 57 49 6d
 [697] 41 b1 6a 0e c6 f3 32 ae dd 91 b2 0f 3d 2f 6f d1 b8 5d 92 ab 96 02 52 b5
 [721] 48 bc b6 42 49 3f e6 e5 fc 33 a4 97 b0 52 ea ac 52 2e 1d 31 f0 0c 08 5e
 [745] 69 bc c4 5d e1 32 0c 82 58 9d b6 93 7c 2c 69 93 94 9b 82 4f 8c b6 59 20
 [769] 49 ff 89 42 50 ea c6 58 ac 54 10 9e 01 4f 85 5d 68 bd 7e c6 69 da 12 14
 [793] 4c c7 ee 14 a3 02 81 81 00 a0 5f 09 0e 66 75 24 12 2b 20 99 9d bd 1a fd
 [817] 4b 36 90 28 05 db c3 4c c0 4c 47 3a 08 d4 b9 09 db fe 95 42 64 91 21 33
 [841] f8 b6 5b 81 9b b7 bc 16 df 0c 13 1c cd c4 45 eb bf 46 b1 a5 84 26 f7 7e
 [865] f7 f0 67 1f 59 7c a2 07 58 f4 5a e1 9a 28 7c a5 9f b2 09 ef 4b 7e 29 5d
 [889] 77 b8 90 1a 0d c7 c9 b0 01 d2 85 dc 82 92 ac 0c 3f 0d 99 01 5b e1 02 30
 [913] e7 f5 bd 1d 37 7a 3a 0a b4 07 99 d4 6d 7a 62 b9 0b 02 81 81 00 cd d6 a2
 [937] b5 56 ae 1b db 8d 06 27 14 dd 60 82 49 27 07 bd b4 9f 67 a7 d7 1c 89 73
 [961] 0e ee 1d dd f3 49 ce 14 69 7a 11 fc c1 f8 1d cc 75 ef 5b 5c 9e a1 9a 53
 [985] 7a 50 97 4c 94 c1 1d 45 19 96 5d f7 93 93 f6 1d c1 1e 5f af 17 14 36 fa
[1009] 0e 09 7b 5d a7 8c 96 ff 64 e5 85 67 80 df eb e9 32 c9 2f ff 21 6a 4e d7
[1033] b8 7e 1c 48 9a 2d 55 49 4b d7 83 7b 45 45 1a 00 90 41 a8 ea 4c 11 ba 01
[1057] d4 97 4c cf 59 02 81 81 00 ab c6 91 62 2d 88 08 76 65 e9 48 14 43 84 30
[1081] bd 30 79 b5 df 7a c8 a3 7f 6f ba 12 28 a5 d0 aa 70 ae 54 63 9e 29 7f e8
[1105] d3 f1 9f e2 c5 fa 77 b9 e7 54 9a 78 85 c3 3b 02 7f e0 4e 76 b1 5e 61 af
[1129] a1 a9 3e 8b 2b 6f 12 24 ec 8f 6f fb 5e e6 79 06 dd 59 46 a9 6a 6c 84 df
[1153] 68 b0 ef b7 f3 ab dc 4e 64 d2 ec 74 07 de b5 00 4d 37 16 1d 34 fb c9 d1
[1177] 78 21 9c c6 87 6c 73 53 8c 30 04 8e 48 0d ab 45 f2
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55f87c6122e0>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55f87c603b20>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvtsQJqwrCwilugD51IwP"
[3] "byC5c27xqA8iWE5PKWVhaZw+TiM00xLgVNvs6KZIOyxID1JKrm1/3X/07vbnfmTD"
[4] "1GEhTyfMvTecSP7bGGC8kaTk/j3q0L0mhhRPk1DHxj6kPadNg1KDaUspWJttEQxX"
[5] "Z2Q32T6m/+/NLfel0FNVqCy1rTByU4wrGkZ1foEnxGsJ8Pd63ewr61GzfwoZUfMU"
[6] "Nvwma8rBas/qaoMUasFEd9cj6TfM5ly7BW56zMrZoagdtudQh8RkqqHDPhL5y2h/"
[7] "eCdl/RJwEF014JNKvpKLMGlQPwA1HnR6hDAhITA+zbZC2QhGS4G38FmKu8e2W+LE"
[8] "2QIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 be db 10 26 ac 2b 0b 08 a5 ba 00 f9 d4 8c 0f 6f 20
 [51] b9 73 6e f1 a8 0f 22 58 4e 4f 29 65 61 69 9c 3e 4e 23 34 d3 12 e0 54 db ec
 [76] e8 a6 48 3b 2c 48 0f 52 4a ae 6d 7f dd 7f f4 ee f6 e7 7e 64 c3 d4 61 21 4f
[101] 27 cc bd 37 9c 48 fe db 18 60 bc 91 a4 e4 fe 3d ea d0 bd 26 86 14 4f 93 50
[126] c7 c6 3e a4 3d a7 4d 83 52 83 69 4b 29 58 9b 6d 11 0c 57 67 64 37 d9 3e a6
[151] ff ef cd 2d f7 a5 d0 53 55 a8 2c b5 ad 30 72 53 8c 2b 1a 46 75 7e 81 27 c4
[176] 6b 09 f0 f7 7a dd ec 2b eb 51 b3 7f 0a 19 51 f3 14 36 fc 26 6b ca c1 6a cf
[201] ea 6a 83 14 6a c1 44 77 d7 23 e9 37 cc e6 5c bb 05 6e 7a cc ca d9 a1 a8 1d
[226] b6 e7 50 87 c4 64 aa a1 c3 3e 12 f9 cb 68 7f 78 27 65 fd 12 70 10 5d 35 e0
[251] 93 4a be 92 8b 30 69 50 3f 00 35 1e 74 7a 84 30 21 21 30 3e cd b6 42 d9 08
[276] 46 4b 81 b7 f0 59 8a bb c7 b6 5b e2 c4 d9 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55f87c511060>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55f87c512960>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
