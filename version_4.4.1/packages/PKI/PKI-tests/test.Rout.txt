
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpAIBAAKCAQEA9hntqyCHvqhJIBYa79szYjeseAs3XNJYetes83W/hQqcQ7O+"
 [3] "pJ5wPZh87novG8oKkyaG3cVhaxrIeNEPPa2j+e08OBWDbmw+RQysuHJyOjiqvpnp"
 [4] "GTd3JuIdeotSTvNmltnDDYwR/nPUlT6270imXaRI722pIPWrexJ7p7/JxWkG/9oT"
 [5] "DRrh0Tdx9mBto/E/j9YeiGCrgiwK7vX3YZVZ1swYGM9mmss2SXwRL7HWIjmLsQIF"
 [6] "Mqonu8iRF3Drzs9DeYdBqTDI4ke9FqIn2gI00golAs2EoFp+9g9iH80T3PEtKVaj"
 [7] "6SOYxF7NDwbz7nuriHpkrV7lloyrYxvz3EbndQIDAQABAoIBACU6B9cWfSIsf59A"
 [8] "aMO2kz+8rzSbcbzzPpoabNmJCrb7w2aEVoa9RroyildimSSpe88FiWoblOBoNUH9"
 [9] "UcJhNUg1iCHtsyttaT/1qlzeRwQilUVur7F2T+pMUuw6DfHOZMrV1ukCMqicaeBH"
[10] "k9F/WlcY5kV9f5NyRgXAZn8aBlH7hLkZaHISyTyXstaldHGq/kMPY/ur3v0pLAr/"
[11] "TBPDNnepaWx1MVqNqpzMtr2aaMAY/JPod276UqDvA1jghi+7qYgPvV9I29+3dhIj"
[12] "hdrNMREi3xL1FD/DH1ZY+5UWlQGYwu4rKhkKgL3NswDfxR/ZMFf5ySe9EkbGp+7d"
[13] "IXCFgjMCgYEA+3qNI3wYOhDbOj1cG/Oi59VcDKEMOoe+IMFZt8Z5vqjAe3GVFGwO"
[14] "E88VFIdJJkHxepwnjoa3bDwuslfkmQX8CNBFQ8bzl4bx/1qqVdv9R8sUcW9VorKT"
[15] "yaxEjgEn9HkxazPZ8RMYeTTuhF+KYgpKSaPHk9lz4aSBKhTEl+8CV9MCgYEA+oag"
[16] "hmAbmwYL2B2d/dzkRmZJ6IHVuM4cvyOe7qKaHzEy7QGKxAS/3h/iCMYTfJCcO8Us"
[17] "mVCuh7dJFlyYpwN/7dSy13HtXmC8fCPq6KTWR4RIPY4D/qygjTK/5Op9jwuYFE+8"
[18] "wm2ZJQBJzJbh/cCm37AKkrWEoBcnpa1/rKjgPpcCgYEA0eIpc4k5ixTQc14MxwNj"
[19] "XgwzZBLxatQp+ZqFr5zFtTuQUjaszruUUDIQDO8QPQ7iZIt5dDm5Ums0KgKzNofJ"
[20] "Hu38MSIV4cxtospfyYLudAHpEPdzyHM0ZygQm1gZqa+QcEF5Tvu5/EcSHobCryqZ"
[21] "b7ZydlIRpiwu5RkqLwf6s6MCgYEAg5xIJm/E8NrrS/y7LEtoDOfduezDV1PIXE2d"
[22] "R+ZaKzrQcxwVR0breQis2UkdoZniya+a72woVBngpoO8mjjHcy0DSxWJysPtIRZJ"
[23] "aTB3dZizzsqVpKwRqDvZ/auGjKhdm4YMNuQWyQ5utrEpRgJ4aBj2ZP5BD006wdn0"
[24] "scMCEz8CgYBHLeVNzz2l+GB9q0nxn/xWyCW3fp8s1TZYIJufsj9USyK46duUoW4G"
[25] "SRiBRA6/bKInPiaC8SRCGRlCc+M2O/FZW53tvEK0L9i2uU4Or4wGTBtdlUyUuurN"
[26] "yO9vJTfD3qPgMnA55BQLyu896ZoLTWqjJ7IDelbq0+FdAtJ5YQBmZQ=="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a4 02 01 00 02 82 01 01 00 f6 19 ed ab 20 87 be a8 49 20 16 1a
  [25] ef db 33 62 37 ac 78 0b 37 5c d2 58 7a d7 ac f3 75 bf 85 0a 9c 43 b3 be
  [49] a4 9e 70 3d 98 7c ee 7a 2f 1b ca 0a 93 26 86 dd c5 61 6b 1a c8 78 d1 0f
  [73] 3d ad a3 f9 ed 3c 38 15 83 6e 6c 3e 45 0c ac b8 72 72 3a 38 aa be 99 e9
  [97] 19 37 77 26 e2 1d 7a 8b 52 4e f3 66 96 d9 c3 0d 8c 11 fe 73 d4 95 3e b6
 [121] ef 48 a6 5d a4 48 ef 6d a9 20 f5 ab 7b 12 7b a7 bf c9 c5 69 06 ff da 13
 [145] 0d 1a e1 d1 37 71 f6 60 6d a3 f1 3f 8f d6 1e 88 60 ab 82 2c 0a ee f5 f7
 [169] 61 95 59 d6 cc 18 18 cf 66 9a cb 36 49 7c 11 2f b1 d6 22 39 8b b1 02 05
 [193] 32 aa 27 bb c8 91 17 70 eb ce cf 43 79 87 41 a9 30 c8 e2 47 bd 16 a2 27
 [217] da 02 34 d2 0a 25 02 cd 84 a0 5a 7e f6 0f 62 1f cd 13 dc f1 2d 29 56 a3
 [241] e9 23 98 c4 5e cd 0f 06 f3 ee 7b ab 88 7a 64 ad 5e e5 96 8c ab 63 1b f3
 [265] dc 46 e7 75 02 03 01 00 01 02 82 01 00 25 3a 07 d7 16 7d 22 2c 7f 9f 40
 [289] 68 c3 b6 93 3f bc af 34 9b 71 bc f3 3e 9a 1a 6c d9 89 0a b6 fb c3 66 84
 [313] 56 86 bd 46 ba 32 8a 57 62 99 24 a9 7b cf 05 89 6a 1b 94 e0 68 35 41 fd
 [337] 51 c2 61 35 48 35 88 21 ed b3 2b 6d 69 3f f5 aa 5c de 47 04 22 95 45 6e
 [361] af b1 76 4f ea 4c 52 ec 3a 0d f1 ce 64 ca d5 d6 e9 02 32 a8 9c 69 e0 47
 [385] 93 d1 7f 5a 57 18 e6 45 7d 7f 93 72 46 05 c0 66 7f 1a 06 51 fb 84 b9 19
 [409] 68 72 12 c9 3c 97 b2 d6 a5 74 71 aa fe 43 0f 63 fb ab de fd 29 2c 0a ff
 [433] 4c 13 c3 36 77 a9 69 6c 75 31 5a 8d aa 9c cc b6 bd 9a 68 c0 18 fc 93 e8
 [457] 77 6e fa 52 a0 ef 03 58 e0 86 2f bb a9 88 0f bd 5f 48 db df b7 76 12 23
 [481] 85 da cd 31 11 22 df 12 f5 14 3f c3 1f 56 58 fb 95 16 95 01 98 c2 ee 2b
 [505] 2a 19 0a 80 bd cd b3 00 df c5 1f d9 30 57 f9 c9 27 bd 12 46 c6 a7 ee dd
 [529] 21 70 85 82 33 02 81 81 00 fb 7a 8d 23 7c 18 3a 10 db 3a 3d 5c 1b f3 a2
 [553] e7 d5 5c 0c a1 0c 3a 87 be 20 c1 59 b7 c6 79 be a8 c0 7b 71 95 14 6c 0e
 [577] 13 cf 15 14 87 49 26 41 f1 7a 9c 27 8e 86 b7 6c 3c 2e b2 57 e4 99 05 fc
 [601] 08 d0 45 43 c6 f3 97 86 f1 ff 5a aa 55 db fd 47 cb 14 71 6f 55 a2 b2 93
 [625] c9 ac 44 8e 01 27 f4 79 31 6b 33 d9 f1 13 18 79 34 ee 84 5f 8a 62 0a 4a
 [649] 49 a3 c7 93 d9 73 e1 a4 81 2a 14 c4 97 ef 02 57 d3 02 81 81 00 fa 86 a0
 [673] 86 60 1b 9b 06 0b d8 1d 9d fd dc e4 46 66 49 e8 81 d5 b8 ce 1c bf 23 9e
 [697] ee a2 9a 1f 31 32 ed 01 8a c4 04 bf de 1f e2 08 c6 13 7c 90 9c 3b c5 2c
 [721] 99 50 ae 87 b7 49 16 5c 98 a7 03 7f ed d4 b2 d7 71 ed 5e 60 bc 7c 23 ea
 [745] e8 a4 d6 47 84 48 3d 8e 03 fe ac a0 8d 32 bf e4 ea 7d 8f 0b 98 14 4f bc
 [769] c2 6d 99 25 00 49 cc 96 e1 fd c0 a6 df b0 0a 92 b5 84 a0 17 27 a5 ad 7f
 [793] ac a8 e0 3e 97 02 81 81 00 d1 e2 29 73 89 39 8b 14 d0 73 5e 0c c7 03 63
 [817] 5e 0c 33 64 12 f1 6a d4 29 f9 9a 85 af 9c c5 b5 3b 90 52 36 ac ce bb 94
 [841] 50 32 10 0c ef 10 3d 0e e2 64 8b 79 74 39 b9 52 6b 34 2a 02 b3 36 87 c9
 [865] 1e ed fc 31 22 15 e1 cc 6d a2 ca 5f c9 82 ee 74 01 e9 10 f7 73 c8 73 34
 [889] 67 28 10 9b 58 19 a9 af 90 70 41 79 4e fb b9 fc 47 12 1e 86 c2 af 2a 99
 [913] 6f b6 72 76 52 11 a6 2c 2e e5 19 2a 2f 07 fa b3 a3 02 81 81 00 83 9c 48
 [937] 26 6f c4 f0 da eb 4b fc bb 2c 4b 68 0c e7 dd b9 ec c3 57 53 c8 5c 4d 9d
 [961] 47 e6 5a 2b 3a d0 73 1c 15 47 46 eb 79 08 ac d9 49 1d a1 99 e2 c9 af 9a
 [985] ef 6c 28 54 19 e0 a6 83 bc 9a 38 c7 73 2d 03 4b 15 89 ca c3 ed 21 16 49
[1009] 69 30 77 75 98 b3 ce ca 95 a4 ac 11 a8 3b d9 fd ab 86 8c a8 5d 9b 86 0c
[1033] 36 e4 16 c9 0e 6e b6 b1 29 46 02 78 68 18 f6 64 fe 41 0f 4d 3a c1 d9 f4
[1057] b1 c3 02 13 3f 02 81 80 47 2d e5 4d cf 3d a5 f8 60 7d ab 49 f1 9f fc 56
[1081] c8 25 b7 7e 9f 2c d5 36 58 20 9b 9f b2 3f 54 4b 22 b8 e9 db 94 a1 6e 06
[1105] 49 18 81 44 0e bf 6c a2 27 3e 26 82 f1 24 42 19 19 42 73 e3 36 3b f1 59
[1129] 5b 9d ed bc 42 b4 2f d8 b6 b9 4e 0e af 8c 06 4c 1b 5d 95 4c 94 ba ea cd
[1153] c8 ef 6f 25 37 c3 de a3 e0 32 70 39 e4 14 0b ca ef 3d e9 9a 0b 4d 6a a3
[1177] 27 b2 03 7a 56 ea d3 e1 5d 02 d2 79 61 00 66 65
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x560984c4b430>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x560984c3cc70>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9hntqyCHvqhJIBYa79sz"
[3] "YjeseAs3XNJYetes83W/hQqcQ7O+pJ5wPZh87novG8oKkyaG3cVhaxrIeNEPPa2j"
[4] "+e08OBWDbmw+RQysuHJyOjiqvpnpGTd3JuIdeotSTvNmltnDDYwR/nPUlT6270im"
[5] "XaRI722pIPWrexJ7p7/JxWkG/9oTDRrh0Tdx9mBto/E/j9YeiGCrgiwK7vX3YZVZ"
[6] "1swYGM9mmss2SXwRL7HWIjmLsQIFMqonu8iRF3Drzs9DeYdBqTDI4ke9FqIn2gI0"
[7] "0golAs2EoFp+9g9iH80T3PEtKVaj6SOYxF7NDwbz7nuriHpkrV7lloyrYxvz3Ebn"
[8] "dQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 f6 19 ed ab 20 87 be a8 49 20 16 1a ef db 33 62 37
 [51] ac 78 0b 37 5c d2 58 7a d7 ac f3 75 bf 85 0a 9c 43 b3 be a4 9e 70 3d 98 7c
 [76] ee 7a 2f 1b ca 0a 93 26 86 dd c5 61 6b 1a c8 78 d1 0f 3d ad a3 f9 ed 3c 38
[101] 15 83 6e 6c 3e 45 0c ac b8 72 72 3a 38 aa be 99 e9 19 37 77 26 e2 1d 7a 8b
[126] 52 4e f3 66 96 d9 c3 0d 8c 11 fe 73 d4 95 3e b6 ef 48 a6 5d a4 48 ef 6d a9
[151] 20 f5 ab 7b 12 7b a7 bf c9 c5 69 06 ff da 13 0d 1a e1 d1 37 71 f6 60 6d a3
[176] f1 3f 8f d6 1e 88 60 ab 82 2c 0a ee f5 f7 61 95 59 d6 cc 18 18 cf 66 9a cb
[201] 36 49 7c 11 2f b1 d6 22 39 8b b1 02 05 32 aa 27 bb c8 91 17 70 eb ce cf 43
[226] 79 87 41 a9 30 c8 e2 47 bd 16 a2 27 da 02 34 d2 0a 25 02 cd 84 a0 5a 7e f6
[251] 0f 62 1f cd 13 dc f1 2d 29 56 a3 e9 23 98 c4 5e cd 0f 06 f3 ee 7b ab 88 7a
[276] 64 ad 5e e5 96 8c ab 63 1b f3 dc 46 e7 75 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x560984b4a1d0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x560984b4ba80>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
