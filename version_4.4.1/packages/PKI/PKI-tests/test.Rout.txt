
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEAlbXfk/zhHtDJ/m6FlfIVvw5/28tjWpaqh2qGvOqu7uI0EOJC"
 [3] "7CnC3eTTctIzI1k6L06UalZbGcwdnH96qsYiXdx7zpy127J4BOGFVOd023NoCxJu"
 [4] "BrzE2PkAksMfjzJfwFvWrbUvJh8B6n5bzJAmPyZG6CbLYTunsS/ohX0RVzoTHm94"
 [5] "AmTNBkx0EarEmUkGASaKOv9h6UbkUEcoUjWducQ8J56b0XbLPRJL1Jqe+nka1zhN"
 [6] "wZJR4erP0e2vdJMmZSBpIcF2Dpnz6Y64cOh55R/6kgwY7RQqIRKWh5qfJurHwBYc"
 [7] "lSzLpsO6yYwaVsq6hCl2vmOQcMv+uzwFQuxKrQIDAQABAoIBACFHCZkEC2hFobiw"
 [8] "CXqQkpvi1bHeDkobFnG+UI/anKLV3hvop1aGW93l2Mh7h8lyMnhEf8H5Swu7btOU"
 [9] "FIi0PPxfH5gIBnZ8v6faF0CNqFCFYRmg8ZsGx7yw8JsuyyuR123THC+FiCLxnoPo"
[10] "rXAVlKLR184PnYKR947vpsBRUhLwqzUXzJ7ij3OuvIXC4wBoWXZh7oMyNKszgix9"
[11] "hLitSdmbIE19gO6fU1RyfeGU2jIPnlw5rIsrZQeWnLtIP1jgN8GmPd8cm+6AO+FG"
[12] "BtwLsBXWASW40zE3a4fum+2VifIQeENDIj8uPa8OKzgB7vbzSZ8ePP+KBCALQtBh"
[13] "vZKfX3ECgYEAx+lZPi9cdGK5yWaxVXDQ4LskU0qU2y1Fm6iGRxxxWEVsKllkTnL4"
[14] "gBRpz6iwz/tIwQcv3mhkIcF0WzOA67A94JfUBrw2IkkzIGkbwOf3vxynEQqMEgR6"
[15] "bzKu2G/MNhDx+pjQkvcHp5iyquiV2HWIkGHV4HGjoXUyIxwIc6JV2EkCgYEAv7bU"
[16] "sygKYzs+zY9QwquauTX1DdLxFoM0bKwC+CzLmVNA+JF0IzVZfKz/XKuEqQN2ZA+G"
[17] "YOfi0jTNKCrzXZocqGHPmHR0oWZGLU0wcMx01ci+PUwsQ9owOWIJl/kUcJi8nZrG"
[18] "PqctkdSfNUoTCMJ96ar4flepnMqHhchCugfnB0UCgYAntBidWRqros/zSAoARh+2"
[19] "AnT8dduKjDs+5wGELgn01hTddFOPoRXpmiRJsd8r72RLsfm32lPIwHszgc8hACfJ"
[20] "612Y2NiHhrI4xadVcLyroC0uHUIkce8/FnnTUqDkPAlTE/aYuacziggyGW9pRi6R"
[21] "Pl0T7n3pGzWR84daL+uMwQKBgH9d5CmybFRIxAylLi5m+8AYjNnGTs16FZYtITvn"
[22] "5svSd9OsLtBFXVJrTKwwd04iMsF/XvN6m0K0Oah6AH0rKebkNJtAo0unOvBV29zU"
[23] "uLpfR6RJuw7JIki9TUpd/Kphjs3WSebOAoRkEfHBaKvlKunW4IhvjQvRsf+7cDlP"
[24] "jrlRAoGAP5c5g45PzjNZ2WuhgWXUqxwpFqMPlwpbhTOqjgu1Am4gRYT6pjJoL8wH"
[25] "lRxnUjPBjQYzTrTyWsY0Cwnc5BzHTM2u+EA0w0Bk/6NxwBonNkXhRaIxRHsitzo9"
[26] "4J5wdW7GdUqifjKRPOu9EBvD+pBoUs8b6WQ751urbB6FrT5J7tg="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 95 b5 df 93 fc e1 1e d0 c9 fe 6e 85
  [25] 95 f2 15 bf 0e 7f db cb 63 5a 96 aa 87 6a 86 bc ea ae ee e2 34 10 e2 42
  [49] ec 29 c2 dd e4 d3 72 d2 33 23 59 3a 2f 4e 94 6a 56 5b 19 cc 1d 9c 7f 7a
  [73] aa c6 22 5d dc 7b ce 9c b5 db b2 78 04 e1 85 54 e7 74 db 73 68 0b 12 6e
  [97] 06 bc c4 d8 f9 00 92 c3 1f 8f 32 5f c0 5b d6 ad b5 2f 26 1f 01 ea 7e 5b
 [121] cc 90 26 3f 26 46 e8 26 cb 61 3b a7 b1 2f e8 85 7d 11 57 3a 13 1e 6f 78
 [145] 02 64 cd 06 4c 74 11 aa c4 99 49 06 01 26 8a 3a ff 61 e9 46 e4 50 47 28
 [169] 52 35 9d b9 c4 3c 27 9e 9b d1 76 cb 3d 12 4b d4 9a 9e fa 79 1a d7 38 4d
 [193] c1 92 51 e1 ea cf d1 ed af 74 93 26 65 20 69 21 c1 76 0e 99 f3 e9 8e b8
 [217] 70 e8 79 e5 1f fa 92 0c 18 ed 14 2a 21 12 96 87 9a 9f 26 ea c7 c0 16 1c
 [241] 95 2c cb a6 c3 ba c9 8c 1a 56 ca ba 84 29 76 be 63 90 70 cb fe bb 3c 05
 [265] 42 ec 4a ad 02 03 01 00 01 02 82 01 00 21 47 09 99 04 0b 68 45 a1 b8 b0
 [289] 09 7a 90 92 9b e2 d5 b1 de 0e 4a 1b 16 71 be 50 8f da 9c a2 d5 de 1b e8
 [313] a7 56 86 5b dd e5 d8 c8 7b 87 c9 72 32 78 44 7f c1 f9 4b 0b bb 6e d3 94
 [337] 14 88 b4 3c fc 5f 1f 98 08 06 76 7c bf a7 da 17 40 8d a8 50 85 61 19 a0
 [361] f1 9b 06 c7 bc b0 f0 9b 2e cb 2b 91 d7 6d d3 1c 2f 85 88 22 f1 9e 83 e8
 [385] ad 70 15 94 a2 d1 d7 ce 0f 9d 82 91 f7 8e ef a6 c0 51 52 12 f0 ab 35 17
 [409] cc 9e e2 8f 73 ae bc 85 c2 e3 00 68 59 76 61 ee 83 32 34 ab 33 82 2c 7d
 [433] 84 b8 ad 49 d9 9b 20 4d 7d 80 ee 9f 53 54 72 7d e1 94 da 32 0f 9e 5c 39
 [457] ac 8b 2b 65 07 96 9c bb 48 3f 58 e0 37 c1 a6 3d df 1c 9b ee 80 3b e1 46
 [481] 06 dc 0b b0 15 d6 01 25 b8 d3 31 37 6b 87 ee 9b ed 95 89 f2 10 78 43 43
 [505] 22 3f 2e 3d af 0e 2b 38 01 ee f6 f3 49 9f 1e 3c ff 8a 04 20 0b 42 d0 61
 [529] bd 92 9f 5f 71 02 81 81 00 c7 e9 59 3e 2f 5c 74 62 b9 c9 66 b1 55 70 d0
 [553] e0 bb 24 53 4a 94 db 2d 45 9b a8 86 47 1c 71 58 45 6c 2a 59 64 4e 72 f8
 [577] 80 14 69 cf a8 b0 cf fb 48 c1 07 2f de 68 64 21 c1 74 5b 33 80 eb b0 3d
 [601] e0 97 d4 06 bc 36 22 49 33 20 69 1b c0 e7 f7 bf 1c a7 11 0a 8c 12 04 7a
 [625] 6f 32 ae d8 6f cc 36 10 f1 fa 98 d0 92 f7 07 a7 98 b2 aa e8 95 d8 75 88
 [649] 90 61 d5 e0 71 a3 a1 75 32 23 1c 08 73 a2 55 d8 49 02 81 81 00 bf b6 d4
 [673] b3 28 0a 63 3b 3e cd 8f 50 c2 ab 9a b9 35 f5 0d d2 f1 16 83 34 6c ac 02
 [697] f8 2c cb 99 53 40 f8 91 74 23 35 59 7c ac ff 5c ab 84 a9 03 76 64 0f 86
 [721] 60 e7 e2 d2 34 cd 28 2a f3 5d 9a 1c a8 61 cf 98 74 74 a1 66 46 2d 4d 30
 [745] 70 cc 74 d5 c8 be 3d 4c 2c 43 da 30 39 62 09 97 f9 14 70 98 bc 9d 9a c6
 [769] 3e a7 2d 91 d4 9f 35 4a 13 08 c2 7d e9 aa f8 7e 57 a9 9c ca 87 85 c8 42
 [793] ba 07 e7 07 45 02 81 80 27 b4 18 9d 59 1a ab a2 cf f3 48 0a 00 46 1f b6
 [817] 02 74 fc 75 db 8a 8c 3b 3e e7 01 84 2e 09 f4 d6 14 dd 74 53 8f a1 15 e9
 [841] 9a 24 49 b1 df 2b ef 64 4b b1 f9 b7 da 53 c8 c0 7b 33 81 cf 21 00 27 c9
 [865] eb 5d 98 d8 d8 87 86 b2 38 c5 a7 55 70 bc ab a0 2d 2e 1d 42 24 71 ef 3f
 [889] 16 79 d3 52 a0 e4 3c 09 53 13 f6 98 b9 a7 33 8a 08 32 19 6f 69 46 2e 91
 [913] 3e 5d 13 ee 7d e9 1b 35 91 f3 87 5a 2f eb 8c c1 02 81 80 7f 5d e4 29 b2
 [937] 6c 54 48 c4 0c a5 2e 2e 66 fb c0 18 8c d9 c6 4e cd 7a 15 96 2d 21 3b e7
 [961] e6 cb d2 77 d3 ac 2e d0 45 5d 52 6b 4c ac 30 77 4e 22 32 c1 7f 5e f3 7a
 [985] 9b 42 b4 39 a8 7a 00 7d 2b 29 e6 e4 34 9b 40 a3 4b a7 3a f0 55 db dc d4
[1009] b8 ba 5f 47 a4 49 bb 0e c9 22 48 bd 4d 4a 5d fc aa 61 8e cd d6 49 e6 ce
[1033] 02 84 64 11 f1 c1 68 ab e5 2a e9 d6 e0 88 6f 8d 0b d1 b1 ff bb 70 39 4f
[1057] 8e b9 51 02 81 80 3f 97 39 83 8e 4f ce 33 59 d9 6b a1 81 65 d4 ab 1c 29
[1081] 16 a3 0f 97 0a 5b 85 33 aa 8e 0b b5 02 6e 20 45 84 fa a6 32 68 2f cc 07
[1105] 95 1c 67 52 33 c1 8d 06 33 4e b4 f2 5a c6 34 0b 09 dc e4 1c c7 4c cd ae
[1129] f8 40 34 c3 40 64 ff a3 71 c0 1a 27 36 45 e1 45 a2 31 44 7b 22 b7 3a 3d
[1153] e0 9e 70 75 6e c6 75 4a a2 7e 32 91 3c eb bd 10 1b c3 fa 90 68 52 cf 1b
[1177] e9 64 3b e7 5b ab 6c 1e 85 ad 3e 49 ee d8
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5574bbcf82a0>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5574bbce9ae0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlbXfk/zhHtDJ/m6FlfIV"
[3] "vw5/28tjWpaqh2qGvOqu7uI0EOJC7CnC3eTTctIzI1k6L06UalZbGcwdnH96qsYi"
[4] "Xdx7zpy127J4BOGFVOd023NoCxJuBrzE2PkAksMfjzJfwFvWrbUvJh8B6n5bzJAm"
[5] "PyZG6CbLYTunsS/ohX0RVzoTHm94AmTNBkx0EarEmUkGASaKOv9h6UbkUEcoUjWd"
[6] "ucQ8J56b0XbLPRJL1Jqe+nka1zhNwZJR4erP0e2vdJMmZSBpIcF2Dpnz6Y64cOh5"
[7] "5R/6kgwY7RQqIRKWh5qfJurHwBYclSzLpsO6yYwaVsq6hCl2vmOQcMv+uzwFQuxK"
[8] "rQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 95 b5 df 93 fc e1 1e d0 c9 fe 6e 85 95 f2 15 bf 0e
 [51] 7f db cb 63 5a 96 aa 87 6a 86 bc ea ae ee e2 34 10 e2 42 ec 29 c2 dd e4 d3
 [76] 72 d2 33 23 59 3a 2f 4e 94 6a 56 5b 19 cc 1d 9c 7f 7a aa c6 22 5d dc 7b ce
[101] 9c b5 db b2 78 04 e1 85 54 e7 74 db 73 68 0b 12 6e 06 bc c4 d8 f9 00 92 c3
[126] 1f 8f 32 5f c0 5b d6 ad b5 2f 26 1f 01 ea 7e 5b cc 90 26 3f 26 46 e8 26 cb
[151] 61 3b a7 b1 2f e8 85 7d 11 57 3a 13 1e 6f 78 02 64 cd 06 4c 74 11 aa c4 99
[176] 49 06 01 26 8a 3a ff 61 e9 46 e4 50 47 28 52 35 9d b9 c4 3c 27 9e 9b d1 76
[201] cb 3d 12 4b d4 9a 9e fa 79 1a d7 38 4d c1 92 51 e1 ea cf d1 ed af 74 93 26
[226] 65 20 69 21 c1 76 0e 99 f3 e9 8e b8 70 e8 79 e5 1f fa 92 0c 18 ed 14 2a 21
[251] 12 96 87 9a 9f 26 ea c7 c0 16 1c 95 2c cb a6 c3 ba c9 8c 1a 56 ca ba 84 29
[276] 76 be 63 90 70 cb fe bb 3c 05 42 ec 4a ad 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5574bbbf7060>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5574bbbf8960>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
