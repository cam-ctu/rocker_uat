
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rstantools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rstantools')
This is rstantools version 2.4.0
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("log_lik")
> ### * log_lik
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: log_lik
> ### Title: Generic function for pointwise log-likelihood
> ### Aliases: log_lik
> 
> ### ** Examples
> 
> # See help("log_lik", package = "rstanarm")
> 
> 
> 
> 
> cleanEx()
> nameEx("posterior_interval")
> ### * posterior_interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: posterior_interval
> ### Title: Generic function and default method for posterior uncertainty
> ###   intervals
> ### Aliases: posterior_interval posterior_interval.default
> 
> ### ** Examples
> 
> # Default method takes a numeric matrix (of posterior draws)
> draws <- matrix(rnorm(100 * 5), 100, 5) # fake draws
> colnames(draws) <- paste0("theta_", 1:5)
> posterior_interval(draws)
               5%      95%
theta_1 -1.381744 1.515534
theta_2 -1.489007 1.772387
theta_3 -1.746566 1.690411
theta_4 -1.871547 1.578643
theta_5 -1.770142 1.909140
> 
> # Also see help("posterior_interval", package = "rstanarm")
> 
> 
> 
> 
> cleanEx()
> nameEx("posterior_linpred")
> ### * posterior_linpred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: posterior_linpred
> ### Title: Generic function for accessing the posterior distribution of the
> ###   linear predictor
> ### Aliases: posterior_linpred
> 
> ### ** Examples
> 
> # See help("posterior_linpred", package = "rstanarm")
> 
> 
> 
> 
> cleanEx()
> nameEx("posterior_predict")
> ### * posterior_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: posterior_predict
> ### Title: Generic function for drawing from the posterior predictive
> ###   distribution
> ### Aliases: posterior_predict
> 
> ### ** Examples
> 
> # See help("posterior_predict", package = "rstanarm")
> 
> 
> 
> 
> cleanEx()
> nameEx("predictive_error")
> ### * predictive_error
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predictive_error
> ### Title: Generic function and default method for predictive errors
> ### Aliases: predictive_error predictive_error.default
> 
> ### ** Examples
> 
> # default method
> y <- rnorm(10)
> ypred <- matrix(rnorm(500), 50, 10)
> pred_errors <- predictive_error(ypred, y)
> dim(pred_errors)
[1] 50 10
> head(pred_errors)
            [,1]         [,2]       [,3]       [,4]        [,5]       [,6]
[1,] -2.13823498 -2.217974436 -0.1998922  1.1701804  0.49388360 -1.7714812
[2,] -1.01629705  0.222883327 -0.3739839  1.8339279 -0.09118687 -0.4312312
[3,] -0.00521323 -0.506096038 -2.2679109  0.5367978  0.72975452 -0.5361377
[4,]  1.58824608  0.155641165 -0.1849323  0.7088582  1.69971565 -1.6778782
[5,] -1.75138473  0.926916533 -0.6282479  2.2145239 -0.65833050 -2.5400957
[6,] -0.58152020 -0.005148975 -0.4428207 -0.6108217 -1.19023725 -1.0905233
           [,7]       [,8]        [,9]      [,10]
[1,] -0.5561834  3.3306524  0.96394886  0.1476487
[2,]  0.3883506 -0.5756775 -0.07675510 -2.4707569
[3,]  0.9415660  1.3738677 -0.54899109 -1.5511351
[4,]  1.1432109  1.1683035  1.34789215 -0.9008864
[5,]  0.5233515  0.9076430  1.08386757 -0.3102728
[6,] -0.5817324  0.1261065  0.05216076 -0.5847492
> 
> # Also see help("predictive_error", package = "rstanarm")
> 
> 
> 
> 
> cleanEx()
> nameEx("predictive_interval")
> ### * predictive_interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predictive_interval
> ### Title: Generic function for predictive intervals
> ### Aliases: predictive_interval predictive_interval.default
> 
> ### ** Examples
> 
> # Default method takes a numeric matrix (of draws from posterior
> # predictive distribution)
> ytilde <- matrix(rnorm(100 * 5, sd = 2), 100, 5) # fake draws
> predictive_interval(ytilde, prob = 0.8)
           10%      90%
[1,] -2.105315 2.362130
[2,] -2.473642 2.703926
[3,] -2.519171 2.295804
[4,] -2.371266 2.656095
[5,] -2.923368 2.891320
> 
> # Also see help("predictive_interval", package = "rstanarm")
> 
> 
> 
> 
> cleanEx()
> nameEx("prior_summary")
> ### * prior_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prior_summary
> ### Title: Generic function for extracting information about prior
> ###   distributions
> ### Aliases: prior_summary prior_summary.default
> 
> ### ** Examples
> 
> # See help("prior_summary", package = "rstanarm")
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.066 0.009 0.075 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
