
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "reactR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('reactR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("React")
> ### * React
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: React
> ### Title: React component builder.
> ### Aliases: React
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Create an instance of ParentComponent with two children,
> # ChildComponent and OtherChildComponent.
> React$ParentComponent(
+   x = 1,
+   y = 2,
+   React$ChildComponent(),
+   React$OtherChildComponent()
+ )
<ParentComponent x="1" y="2">
  <ChildComponent></ChildComponent>
  <OtherChildComponent></OtherChildComponent>
</ParentComponent>
> 
> 
> 
> cleanEx()
> nameEx("babel_transform")
> ### * babel_transform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: babel_transform
> ### Title: Transform Code with Babel
> ### Aliases: babel_transform
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(reactR)
> ##D babel_transform('<div>react div</div>')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("component")
> ### * component
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: component
> ### Title: Create a React component
> ### Aliases: component
> 
> ### ** Examples
> 
> component("ParentComponent",
+   list(
+     x = 1,
+     y = 2,
+     component("ChildComponent"),
+     component("OtherChildComponent")
+   )
+ )
<ParentComponent x="1" y="2">
  <ChildComponent></ChildComponent>
  <OtherChildComponent></OtherChildComponent>
</ParentComponent>
> 
> 
> 
> cleanEx()
> nameEx("createReactShinyInput")
> ### * createReactShinyInput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createReactShinyInput
> ### Title: Create a React-based input
> ### Aliases: createReactShinyInput
> 
> ### ** Examples
> 
> myInput <- function(inputId, default = "") {
+   # The value of createReactShinyInput should be returned from input constructor functions.
+   createReactShinyInput(
+     inputId,
+     "myinput",
+     # At least one htmlDependency must be provided -- the JavaScript implementation of the input.
+     htmlDependency(
+       name = "my-input",
+       version = "1.0.0",
+       src = "www/mypackage/myinput",
+       package = "mypackage",
+       script = "myinput.js"
+     ),
+     default
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("html_dependency_mobx")
> ### * html_dependency_mobx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: html_dependency_mobx
> ### Title: Dependencies for 'mobx'
> ### Aliases: html_dependency_mobx
> 
> ### ** Examples
> 
> if(interactive()) {
+ 
+ library(htmltools)
+ library(reactR)
+ 
+ browsable(
+   tagList(
+     html_dependency_mobx(react = FALSE),
+     div(id="test"),
+     tags$script(HTML(
+ "
+   var obs = mobx.observable({val: null})
+   mobx.autorun(function() {
+     document.querySelector('#test').innerText = obs.val
+   })
+   setInterval(
+     function() {obs.val++},
+     1000
+   )
+ "
+     ))
+   )
+ )
+ }
> 
> ## Not run: 
> ##D # use with react
> ##D library(htmltools)
> ##D library(reactR)
> ##D 
> ##D browsable(
> ##D   tagList(
> ##D     html_dependency_react(),
> ##D     html_dependency_mobx(),
> ##D     div(id="test"),
> ##D     tags$script(HTML(babel_transform(
> ##D "
> ##D   var obs = mobx.observable({val: null})
> ##D   var App = mobxReact.observer((props) => <div>{props.obs.val}</div>)
> ##D 
> ##D   ReactDOM.render(<App obs = {obs}/>, document.querySelector('#test'))
> ##D 
> ##D   setInterval(
> ##D     function() {obs.val++},
> ##D     1000
> ##D   )
> ##D "
> ##D     )))
> ##D   )
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("html_dependency_react")
> ### * html_dependency_react
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: html_dependency_react
> ### Title: Dependencies for React
> ### Aliases: html_dependency_react
> 
> ### ** Examples
> 
> library(reactR)
> library(htmltools)
> 
> tagList(
+   tags$script(
+   "
+     ReactDOM.render(
+       React.createElement(
+         'h1',
+         null,
+         'Powered by React'
+       ),
+       document.body
+     )
+   "
+   ),
+    #add core-js first to work in RStudio Viewer
+   html_dependency_corejs(),
+   html_dependency_react() #offline=FALSE for CDN
+ )
<script>
    ReactDOM.render(
      React.createElement(
        'h1',
        null,
        'Powered by React'
      ),
      document.body
    )
  </script>
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:htmltools’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.171 0.018 0.188 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
