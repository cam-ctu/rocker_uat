
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "openxlsx"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('openxlsx')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("NamedRegion")
> ### * NamedRegion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createNamedRegion
> ### Title: Create / delete a named region.
> ### Aliases: createNamedRegion deleteNamedRegion
> 
> ### ** Examples
> 
> ## create named regions
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> 
> ## specify region
> writeData(wb, sheet = 1, x = iris, startCol = 1, startRow = 1)
> createNamedRegion(
+   wb = wb,
+   sheet = 1,
+   name = "iris",
+   rows = 1:(nrow(iris) + 1),
+   cols = 1:ncol(iris)
+ )
> 
> 
> ## using writeData 'name' argument
> writeData(wb, sheet = 1, x = iris, name = "iris2", startCol = 10)
> 
> out_file <- tempfile(fileext = ".xlsx")
> ## Not run: 
> ##D saveWorkbook(wb, out_file, overwrite = TRUE)
> ##D 
> ##D ## see named regions
> ##D getNamedRegions(wb) ## From Workbook object
> ##D getNamedRegions(out_file) ## From xlsx file
> ##D 
> ##D ## delete one
> ##D deleteNamedRegion(wb = wb, name = "iris2")
> ##D getNamedRegions(wb)
> ##D 
> ##D ## read named regions
> ##D df <- read.xlsx(wb, namedRegion = "iris")
> ##D head(df)
> ##D 
> ##D df <- read.xlsx(out_file, namedRegion = "iris2")
> ##D head(df)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("activeSheet")
> ### * activeSheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: activeSheet
> ### Title: Get/set active sheet of the workbook
> ### Aliases: activeSheet activeSheet<-
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addWorksheet(wb, sheetName = "S1")
> addWorksheet(wb, sheetName = "S2")
> addWorksheet(wb, sheetName = "S3")
> 
> activeSheet(wb) # default value is the first sheet active
[1] 1
> activeSheet(wb) <- 1 ## active sheet S1
> activeSheet(wb)
[1] 1
> activeSheet(wb) <- "S2" ## active sheet S2
> activeSheet(wb)
[1] 2
> 
> 
> 
> cleanEx()
> nameEx("addCreator")
> ### * addCreator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addCreator
> ### Title: Add another author to the meta data of the file.
> ### Aliases: addCreator
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addCreator(wb, "test")
Warning in stri_replace_all_fixed(core, pattern = current_creator, replacement = stri_c(current_creator,  :
  empty search patterns are not supported
> 
> 
> 
> cleanEx()
> nameEx("addFilter")
> ### * addFilter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addFilter
> ### Title: Add column filters
> ### Aliases: addFilter
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> addWorksheet(wb, "Sheet 3")
> 
> writeData(wb, 1, iris)
> addFilter(wb, 1, row = 1, cols = 1:ncol(iris))
> 
> ## Equivalently
> writeData(wb, 2, x = iris, withFilter = TRUE)
> 
> ## Similarly
> writeDataTable(wb, 3, iris)
> ## Not run: 
> ##D saveWorkbook(wb, file = "addFilterExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("addStyle")
> ### * addStyle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addStyle
> ### Title: Add a style to a set of cells
> ### Aliases: addStyle
> 
> ### ** Examples
> 
> ## See package vignette for more examples.
> 
> ## Create a new workbook
> wb <- createWorkbook("My name here")
> 
> ## Add a worksheets
> addWorksheet(wb, "Expenditure", gridLines = FALSE)
> 
> ## write data to worksheet 1
> writeData(wb, sheet = 1, USPersonalExpenditure, rowNames = TRUE)
> 
> ## create and add a style to the column headers
> headerStyle <- createStyle(
+   fontSize = 14, fontColour = "#FFFFFF", halign = "center",
+   fgFill = "#4F81BD", border = "TopBottom", borderColour = "#4F81BD"
+ )
> 
> ## style for body
> bodyStyle <- createStyle(border = "TopBottom", borderColour = "#4F81BD")
> addStyle(wb, sheet = 1, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)
> setColWidths(wb, 1, cols = 1, widths = 21) ## set column width for row names column
> ## Not run: 
> ##D saveWorkbook(wb, "addStyleExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("addWorksheet")
> ### * addWorksheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addWorksheet
> ### Title: Add a worksheet to a workbook
> ### Aliases: addWorksheet
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook("Fred")
> 
> ## Add 3 worksheets
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2", gridLines = FALSE)
> addWorksheet(wb, "Sheet 3", tabColour = "red")
> addWorksheet(wb, "Sheet 4", gridLines = FALSE, tabColour = "#4F81BD")
> 
> ## Headers and Footers
> addWorksheet(wb, "Sheet 5",
+   header = c("ODD HEAD LEFT", "ODD HEAD CENTER", "ODD HEAD RIGHT"),
+   footer = c("ODD FOOT RIGHT", "ODD FOOT CENTER", "ODD FOOT RIGHT"),
+   evenHeader = c("EVEN HEAD LEFT", "EVEN HEAD CENTER", "EVEN HEAD RIGHT"),
+   evenFooter = c("EVEN FOOT RIGHT", "EVEN FOOT CENTER", "EVEN FOOT RIGHT"),
+   firstHeader = c("TOP", "OF FIRST", "PAGE"),
+   firstFooter = c("BOTTOM", "OF FIRST", "PAGE")
+ )
> 
> addWorksheet(wb, "Sheet 6",
+   header = c("&[Date]", "ALL HEAD CENTER 2", "&[Page] / &[Pages]"),
+   footer = c("&[Path]&[File]", NA, "&[Tab]"),
+   firstHeader = c(NA, "Center Header of First Page", NA),
+   firstFooter = c(NA, "Center Footer of First Page", NA)
+ )
> 
> addWorksheet(wb, "Sheet 7",
+   header = c("ALL HEAD LEFT 2", "ALL HEAD CENTER 2", "ALL HEAD RIGHT 2"),
+   footer = c("ALL FOOT RIGHT 2", "ALL FOOT CENTER 2", "ALL FOOT RIGHT 2")
+ )
> 
> addWorksheet(wb, "Sheet 8",
+   firstHeader = c("FIRST ONLY L", NA, "FIRST ONLY R"),
+   firstFooter = c("FIRST ONLY L", NA, "FIRST ONLY R")
+ )
> 
> ## Need data on worksheet to see all headers and footers
> writeData(wb, sheet = 5, 1:400)
> writeData(wb, sheet = 6, 1:400)
> writeData(wb, sheet = 7, 1:400)
> writeData(wb, sheet = 8, 1:400)
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "addWorksheetExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("auto_heights")
> ### * auto_heights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auto_heights
> ### Title: Compute optimal row heights
> ### Aliases: auto_heights
> 
> ### ** Examples
> 
> ## Create new workbook
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet")
> sheet <- 1
> 
> ## Write dummy data
> long_string <- "ABC ABC ABC ABC ABC ABC ABC ABC ABC ABC ABC"
> writeData(wb, sheet, c("A", long_string, "CCC"), startCol = 2, startRow = 3)
> writeData(wb, sheet, c(4, 5), startCol = 4, startRow = 3)
> 
> ## Set column widths and get optimal row heights
> setColWidths(wb, sheet, c(1,2,3,4), c(10,20,10,20))
> auto_heights(wb, sheet, 1:5)
[[1]]
[1] 1 2 3 4

[[2]]
[1] 15 15 15 39 15

> 
> 
> 
> 
> cleanEx()
> nameEx("buildWorkbook")
> ### * buildWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: buildWorkbook
> ### Title: Build Workbook
> ### Aliases: buildWorkbook
> 
> ### ** Examples
> 
> x <- data.frame(a = 1, b = 2)
> wb <- buildWorkbook(x)
> 
> y <- list(a = x, b = x, c = x)
> buildWorkbook(y, asTable = TRUE)
A Workbook object.
 
Worksheets:
 Sheet 1: "a"
 

 Sheet 2: "b"
 

 Sheet 3: "c"
 

 
 Worksheet write order: 1, 2, 3
 Active Sheet 1: "a" 
	Position: 1

> buildWorkbook(y, asTable = TRUE, tableStyle = "TableStyleLight8")
A Workbook object.
 
Worksheets:
 Sheet 1: "a"
 

 Sheet 2: "b"
 

 Sheet 3: "c"
 

 
 Worksheet write order: 1, 2, 3
 Active Sheet 1: "a" 
	Position: 1

> 
> 
> 
> 
> cleanEx()
> nameEx("cloneWorksheet")
> ### * cloneWorksheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cloneWorksheet
> ### Title: Clone a worksheet to a workbook
> ### Aliases: cloneWorksheet
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook("Fred")
> 
> ## Add 3 worksheets
> addWorksheet(wb, "Sheet 1")
> cloneWorksheet(wb, "Sheet 2", clonedSheet = "Sheet 1")
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "cloneWorksheetExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("col2int")
> ### * col2int
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: col2int
> ### Title: Convert Excel column to integer
> ### Aliases: col2int
> 
> ### ** Examples
> 
> col2int(LETTERS)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26
> 
> 
> 
> cleanEx()
> nameEx("conditionalFormatting")
> ### * conditionalFormatting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conditionalFormatting
> ### Title: Add conditional formatting to cells
> ### Aliases: conditionalFormatting databar
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "cellIs")
> addWorksheet(wb, "Moving Row")
> addWorksheet(wb, "Moving Col")
> addWorksheet(wb, "Dependent on")
> addWorksheet(wb, "Duplicates")
> addWorksheet(wb, "containsText")
> addWorksheet(wb, "notcontainsText")
> addWorksheet(wb, "beginsWith")
> addWorksheet(wb, "endsWith")
> addWorksheet(wb, "colourScale", zoom = 30)
> addWorksheet(wb, "databar")
> addWorksheet(wb, "between")
> addWorksheet(wb, "topN")
> addWorksheet(wb, "bottomN")
> addWorksheet(wb, "containsBlanks")
> addWorksheet(wb, "notContainsBlanks")
> addWorksheet(wb, "logical operators")
> 
> negStyle <- createStyle(fontColour = "#9C0006", bgFill = "#FFC7CE")
> posStyle <- createStyle(fontColour = "#006100", bgFill = "#C6EFCE")
> 
> ## rule applies to all each cell in range
> writeData(wb, "cellIs", -5:5)
> writeData(wb, "cellIs", LETTERS[1:11], startCol = 2)
> conditionalFormatting(wb, "cellIs",
+   cols = 1,
+   rows = 1:11, rule = "!=0", style = negStyle
+ )
> conditionalFormatting(wb, "cellIs",
+   cols = 1,
+   rows = 1:11, rule = "==0", style = posStyle
+ )
> 
> ## highlight row dependent on first cell in row
> writeData(wb, "Moving Row", -5:5)
> writeData(wb, "Moving Row", LETTERS[1:11], startCol = 2)
> conditionalFormatting(wb, "Moving Row",
+   cols = 1:2,
+   rows = 1:11, rule = "$A1<0", style = negStyle
+ )
> conditionalFormatting(wb, "Moving Row",
+   cols = 1:2,
+   rows = 1:11, rule = "$A1>0", style = posStyle
+ )
> 
> ## highlight column dependent on first cell in column
> writeData(wb, "Moving Col", -5:5)
> writeData(wb, "Moving Col", LETTERS[1:11], startCol = 2)
> conditionalFormatting(wb, "Moving Col",
+   cols = 1:2,
+   rows = 1:11, rule = "A$1<0", style = negStyle
+ )
> conditionalFormatting(wb, "Moving Col",
+   cols = 1:2,
+   rows = 1:11, rule = "A$1>0", style = posStyle
+ )
> 
> ## highlight entire range cols X rows dependent only on cell A1
> writeData(wb, "Dependent on", -5:5)
> writeData(wb, "Dependent on", LETTERS[1:11], startCol = 2)
> conditionalFormatting(wb, "Dependent on",
+   cols = 1:2,
+   rows = 1:11, rule = "$A$1<0", style = negStyle
+ )
> conditionalFormatting(wb, "Dependent on",
+   cols = 1:2,
+   rows = 1:11, rule = "$A$1>0", style = posStyle
+ )
> 
> ## highlight cells in column 1 based on value in column 2
> writeData(wb, "Dependent on", data.frame(x = 1:10, y = runif(10)), startRow = 15)
> conditionalFormatting(wb, "Dependent on",
+   cols = 1,
+   rows = 16:25, rule = "B16<0.5", style = negStyle
+ )
> conditionalFormatting(wb, "Dependent on",
+   cols = 1,
+   rows = 16:25, rule = "B16>=0.5", style = posStyle
+ )
> 
> 
> ## highlight duplicates using default style
> writeData(wb, "Duplicates", sample(LETTERS[1:15], size = 10, replace = TRUE))
> conditionalFormatting(wb, "Duplicates", cols = 1, rows = 1:10, type = "duplicates")
> 
> ## cells containing text
> fn <- function(x) paste(sample(LETTERS, 10), collapse = "-")
> writeData(wb, "containsText", sapply(1:10, fn))
> conditionalFormatting(wb, "containsText", cols = 1, rows = 1:10, type = "contains", rule = "A")
> 
> ## cells not containing text
> fn <- function(x) paste(sample(LETTERS, 10), collapse = "-")
> writeData(wb, "containsText", sapply(1:10, fn))
> conditionalFormatting(wb, "notcontainsText", cols = 1, 
+                      rows = 1:10, type = "notcontains", rule = "A")
> 
> 
> ## cells begins with text
> fn <- function(x) paste(sample(LETTERS, 10), collapse = "-")
> writeData(wb, "beginsWith", sapply(1:100, fn))
> conditionalFormatting(wb, "beginsWith", cols = 1, rows = 1:100, type = "beginsWith", rule = "A")
> 
> 
> ## cells ends with text
> fn <- function(x) paste(sample(LETTERS, 10), collapse = "-")
> writeData(wb, "endsWith", sapply(1:100, fn))
> conditionalFormatting(wb, "endsWith", cols = 1, rows = 1:100, type = "endsWith", rule = "A")
> 
> ## colourscale colours cells based on cell value
> df <- read.xlsx(system.file("extdata", "readTest.xlsx", package = "openxlsx"), sheet = 4)
> writeData(wb, "colourScale", df, colNames = FALSE) ## write data.frame
> 
> ## rule is a vector or colours of length 2 or 3 (any hex colour or any of colours())
> ## If rule is NULL, min and max of cells is used. Rule must be the same length as style or NULL.
> conditionalFormatting(wb, "colourScale",
+   cols = 1:ncol(df), rows = 1:nrow(df),
+   style = c("black", "white"),
+   rule = c(0, 255),
+   type = "colourScale"
+ )
> 
> setColWidths(wb, "colourScale", cols = 1:ncol(df), widths = 1.07)
> setRowHeights(wb, "colourScale", rows = 1:nrow(df), heights = 7.5)
> 
> ## Databars
> writeData(wb, "databar", -5:5)
> conditionalFormatting(wb, "databar", cols = 1, rows = 1:11, type = "databar") ## Default colours
> 
> ## Between
> # Highlight cells in interval [-2, 2]
> writeData(wb, "between", -5:5)
> conditionalFormatting(wb, "between", cols = 1, rows = 1:11, type = "between", rule = c(-2, 2))
> 
> ## Top N 
> writeData(wb, "topN", data.frame(x = 1:10, y = rnorm(10)))
> # Highlight top 5 values in column x
> conditionalFormatting(wb, "topN", cols = 1, rows = 2:11, 
+  style = posStyle, type = "topN", rank = 5)#'
> # Highlight top 20 percentage in column y
> conditionalFormatting(wb, "topN", cols = 2, rows = 2:11, 
+  style = posStyle, type = "topN", rank = 20, percent = TRUE)
> 
> ## Bottom N 
> writeData(wb, "bottomN", data.frame(x = 1:10, y = rnorm(10)))
> # Highlight bottom 5 values in column x
> conditionalFormatting(wb, "bottomN", cols = 1, rows = 2:11, 
+  style = negStyle, type = "topN", rank = 5)
> # Highlight bottom 20 percentage in column y
> conditionalFormatting(wb, "bottomN", cols = 2, rows = 2:11, 
+  style = negStyle, type = "topN", rank = 20, percent = TRUE)
>  
> ## cells containing blanks
> sample_data <- sample(c("X", NA_character_), 10, replace = TRUE)
> writeData(wb, "containsBlanks", sample_data)
> conditionalFormatting(wb, "containsBlanks", cols = 1, rows = 1:10, 
+ type = "blanks", style = negStyle)
> 
> ## cells not containing blanks
> sample_data <- sample(c("X", NA_character_), 10, replace = TRUE)
> writeData(wb, "notContainsBlanks", sample_data)
> conditionalFormatting(wb, "notContainsBlanks", cols = 1, rows = 1:10, 
+ type = "notBlanks", style = posStyle)
> 
> ## Logical Operators
> # You can use Excels logical Operators
> writeData(wb, "logical operators", 1:10)
> conditionalFormatting(wb, "logical operators",
+   cols = 1, rows = 1:10,
+   rule = "OR($A1=1,$A1=3,$A1=5,$A1=7)"
+ )
> ## Not run: 
> ##D saveWorkbook(wb, "conditionalFormattingExample.xlsx", TRUE)
> ## End(Not run)
> 
> 
> #########################################################################
> ## Databar Example
> 
> wb <- createWorkbook()
> addWorksheet(wb, "databar")
> 
> ## Databars
> writeData(wb, "databar", -5:5, startCol = 1)
> conditionalFormatting(wb, "databar", cols = 1, rows = 1:11, type = "databar") ## Defaults
> 
> writeData(wb, "databar", -5:5, startCol = 3)
> conditionalFormatting(wb, "databar", cols = 3, rows = 1:11, type = "databar", border = FALSE)
> 
> writeData(wb, "databar", -5:5, startCol = 5)
> conditionalFormatting(wb, "databar",
+   cols = 5, rows = 1:11,
+   type = "databar", style = c("#a6a6a6"), showValue = FALSE
+ )
> 
> writeData(wb, "databar", -5:5, startCol = 7)
> conditionalFormatting(wb, "databar",
+   cols = 7, rows = 1:11,
+   type = "databar", style = c("#a6a6a6"), showValue = FALSE, gradient = FALSE
+ )
> 
> writeData(wb, "databar", -5:5, startCol = 9)
> conditionalFormatting(wb, "databar",
+   cols = 9, rows = 1:11,
+   type = "databar", style = c("#a6a6a6", "#a6a6a6"), showValue = FALSE, gradient = FALSE
+ )
> ## Not run: 
> ##D saveWorkbook(wb, file = "databarExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("convertFromExcelRef")
> ### * convertFromExcelRef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertFromExcelRef
> ### Title: Convert excel column name to integer index
> ### Aliases: convertFromExcelRef
> 
> ### ** Examples
> 
> convertFromExcelRef("DOG")
[1] 3101
> convertFromExcelRef("COW")
[1] 2441
> 
> ## numbers will be removed
> convertFromExcelRef("R22")
[1] 18
> 
> 
> 
> cleanEx()
> nameEx("convertToDate")
> ### * convertToDate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertToDate
> ### Title: Convert from excel date number to R Date type
> ### Aliases: convertToDate
> 
> ### ** Examples
> 
> ## 2014 April 21st to 25th
> convertToDate(c(41750, 41751, 41752, 41753, 41754, NA))
[1] "2014-04-21" "2014-04-22" "2014-04-23" "2014-04-24" "2014-04-25"
[6] NA          
> convertToDate(c(41750.2, 41751.99, NA, 41753))
[1] "2014-04-21" "2014-04-22" NA           "2014-04-24"
> 
> 
> 
> cleanEx()
> nameEx("convertToDateTime")
> ### * convertToDateTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertToDateTime
> ### Title: Convert from excel time number to R POSIXct type.
> ### Aliases: convertToDateTime
> 
> ### ** Examples
> 
> ## 2014-07-01, 2014-06-30, 2014-06-29
> x <- c(41821.8127314815, 41820.8127314815, NA, 41819, NaN)
> convertToDateTime(x)
[1] "2014-07-01 19:30:20 UTC" "2014-06-30 19:30:20 UTC"
[3] NA                        "2014-06-29 00:00:00 UTC"
[5] NA                       
> convertToDateTime(x, tz = "Australia/Perth")
[1] "2014-07-01 11:30:20 UTC" "2014-06-30 11:30:20 UTC"
[3] NA                        "2014-06-28 16:00:00 UTC"
[5] NA                       
> convertToDateTime(x, tz = "UTC")
[1] "2014-07-01 19:30:20 UTC" "2014-06-30 19:30:20 UTC"
[3] NA                        "2014-06-29 00:00:00 UTC"
[5] NA                       
> 
> 
> 
> cleanEx()
> nameEx("copyWorkbook")
> ### * copyWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copyWorkbook
> ### Title: Copy a Workbook object.
> ### Aliases: copyWorkbook
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> wb2 <- wb ## does not create a copy
> wb3 <- copyWorkbook(wb) ## wrapper for wb$copy()
> 
> addWorksheet(wb, "Sheet1") ## adds worksheet to both wb and wb2 but not wb3
> 
> names(wb)
[1] "Sheet1"
> names(wb2)
[1] "Sheet1"
> names(wb3)
character(0)
> 
> 
> 
> cleanEx()
> nameEx("createComment")
> ### * createComment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createComment
> ### Title: create a Comment object
> ### Aliases: createComment
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> 
> c1 <- createComment(comment = "this is comment")
> writeComment(wb, 1, col = "B", row = 10, comment = c1)
> 
> s1 <- createStyle(fontSize = 12, fontColour = "red", textDecoration = c("BOLD"))
> s2 <- createStyle(fontSize = 9, fontColour = "black")
> 
> c2 <- createComment(comment = c("This Part Bold red\n\n", "This part black"), style = c(s1, s2))
> c2
Author: 
Text:
 This Part Bold red

This part black

Style:
Font size: 12
Font colour: #FF0000
Font decoration: BOLD


Font size: 9
Font colour: #000000


> 
> writeComment(wb, 1, col = 6, row = 3, comment = c2)
> ## Not run: 
> ##D saveWorkbook(wb, file = "createCommentExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createStyle")
> ### * createStyle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createStyle
> ### Title: Create a cell style
> ### Aliases: createStyle
> 
> ### ** Examples
> 
> ## See package vignettes for further examples
> 
> ## Modify default values of border colour and border line style
> options("openxlsx.borderColour" = "#4F80BD")
> options("openxlsx.borderStyle" = "thin")
> 
> ## Size 18 Arial, Bold, left horz. aligned, fill colour #1A33CC, all borders,
> style <- createStyle(
+   fontSize = 18, fontName = "Arial",
+   textDecoration = "bold", halign = "left", fgFill = "#1A33CC", border = "TopBottomLeftRight"
+ )
> 
> ## Red, size 24, Bold, italic, underline, center aligned Font, bottom border
> style <- createStyle(
+   fontSize = 24, fontColour = rgb(1, 0, 0),
+   textDecoration = c("bold", "italic", "underline"),
+   halign = "center", valign = "center", border = "Bottom"
+ )
> 
> # borderColour is recycled for each border or all colours can be supplied
> 
> # colour is recycled 3 times for "Top", "Bottom" & "Right" sides.
> createStyle(border = "TopBottomRight", borderColour = "red")
A custom cell style. 

 Cell formatting: GENERAL 
 Cell borders: Top: thin, Bottom: thin, Right: thin 
 Cell border colours: #FF0000, #FF0000, #FF0000 
 

> 
> # supply all colours
> createStyle(border = "TopBottomLeft", borderColour = c("red", "yellow", "green"))
A custom cell style. 

 Cell formatting: GENERAL 
 Cell borders: Top: thin, Bottom: thin, Left: thin 
 Cell border colours: #FF0000, #FFFF00, #00FF00 
 

> 
> 
> 
> cleanEx()
> nameEx("createWorkbook")
> ### * createWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createWorkbook
> ### Title: Create a new Workbook object
> ### Aliases: createWorkbook
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook()
> 
> ## Save workbook to working directory
> ## Not run: 
> ##D saveWorkbook(wb, file = "createWorkbookExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> ## Set Workbook properties
> wb <- createWorkbook(
+   creator = "Me",
+   title = "title here",
+   subject = "this & that",
+   category = "something"
+ )
> 
> 
> 
> cleanEx()
> nameEx("dataValidation")
> ### * dataValidation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dataValidation
> ### Title: Add data validation to cells
> ### Aliases: dataValidation
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> 
> writeDataTable(wb, 1, x = iris[1:30, ])
> 
> dataValidation(wb, 1,
+   col = 1:3, rows = 2:31, type = "whole",
+   operator = "between", value = c(1, 9)
+ )
> 
> dataValidation(wb, 1,
+   col = 5, rows = 2:31, type = "textLength",
+   operator = "between", value = c(4, 6)
+ )
> 
> 
> ## Date and Time cell validation
> df <- data.frame(
+   "d" = as.Date("2016-01-01") + -5:5,
+   "t" = as.POSIXct("2016-01-01") + -5:5 * 10000
+ )
> 
> writeData(wb, 2, x = df)
> dataValidation(wb, 2,
+   col = 1, rows = 2:12, type = "date",
+   operator = "greaterThanOrEqual", value = as.Date("2016-01-01")
+ )
> 
> dataValidation(wb, 2,
+   col = 2, rows = 2:12, type = "time",
+   operator = "between", value = df$t[c(4, 8)]
+ )
> ## Not run: 
> ##D saveWorkbook(wb, "dataValidationExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> ######################################################################
> ## If type == 'list'
> # operator argument is ignored.
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> 
> writeDataTable(wb, sheet = 1, x = iris[1:30, ])
> writeData(wb, sheet = 2, x = sample(iris$Sepal.Length, 10))
> 
> dataValidation(wb, 1, col = 1, rows = 2:31, type = "list", value = "'Sheet 2'!$A$1:$A$10")
> 
> # openXL(wb)
> 
> 
> 
> cleanEx()
> nameEx("deleteData")
> ### * deleteData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deleteData
> ### Title: Delete cell data
> ### Aliases: deleteData
> 
> ### ** Examples
> 
> ## write some data
> wb <- createWorkbook()
> addWorksheet(wb, "Worksheet 1")
> x <- data.frame(matrix(runif(200), ncol = 10))
> writeData(wb, sheet = 1, x = x, startCol = 2, startRow = 3, colNames = FALSE)
> 
> ## delete some data
> deleteData(wb, sheet = 1, cols = 3:5, rows = 5:7, gridExpand = TRUE)
> deleteData(wb, sheet = 1, cols = 7:9, rows = 5:7, gridExpand = TRUE)
> deleteData(wb, sheet = 1, cols = LETTERS, rows = 18, gridExpand = TRUE)
> ## Not run: 
> ##D saveWorkbook(wb, "deleteDataExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("deleteDataColumn")
> ### * deleteDataColumn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deleteDataColumn
> ### Title: Deletes a whole column from a workbook
> ### Aliases: deleteDataColumn
> 
> ### ** Examples
> 
> ## write some data
> wb <- createWorkbook()
> addWorksheet(wb, "tester")
> 
> for (i in seq(5)) {
+   mat <- data.frame(x = rep(paste0(int2col(i), i), 10))
+   writeData(wb, sheet = 1, startRow = 1, startCol = i, mat)
+   writeFormula(wb, sheet = 1, startRow = 12, startCol = i,
+                x = sprintf("=COUNTA(%s2:%s11)", int2col(i), int2col(i)))
+ }
> deleteDataColumn(wb, 1, col = 3)
> ## Not run: 
> ##D saveWorkbook(wb, "deleteDataColumnExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("freezePane")
> ### * freezePane
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freezePane
> ### Title: Freeze a worksheet pane
> ### Aliases: freezePane
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook("Kenshin")
> 
> ## Add some worksheets
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> addWorksheet(wb, "Sheet 3")
> addWorksheet(wb, "Sheet 4")
> 
> ## Freeze Panes
> freezePane(wb, "Sheet 1", firstActiveRow = 5, firstActiveCol = 3)
> freezePane(wb, "Sheet 2", firstCol = TRUE) ## shortcut to firstActiveCol = 2
> freezePane(wb, 3, firstRow = TRUE) ## shortcut to firstActiveRow = 2
> freezePane(wb, 4, firstActiveRow = 1, firstActiveCol = "D")
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "freezePaneExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getBaseFont")
> ### * getBaseFont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getBaseFont
> ### Title: Return the workbook default font
> ### Aliases: getBaseFont
> 
> ### ** Examples
> 
> ## create a workbook
> wb <- createWorkbook()
> getBaseFont(wb)
$size
$size$val
[1] "11"


$colour
$colour$rgb
[1] "FF000000"


$name
$name$val
[1] "Calibri"


> 
> ## modify base font to size 10 Arial Narrow in red
> modifyBaseFont(wb, fontSize = 10, fontColour = "#FF0000", fontName = "Arial Narrow")
> 
> getBaseFont(wb)
$size
$size$val
[1] "10"


$colour
$colour$rgb
[1] "FFFF0000"


$name
$name$val
[1] "Arial Narrow"


> 
> 
> 
> cleanEx()
> nameEx("getCellRefs")
> ### * getCellRefs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCellRefs
> ### Title: Return excel cell coordinates from (x,y) coordinates
> ### Aliases: getCellRefs
> 
> ### ** Examples
> 
> getCellRefs(data.frame(1, 2))
[1] "B1"
> # "B1"
> getCellRefs(data.frame(1:3, 2:4))
[1] "B1" "C2" "D3"
> # "B1" "C2" "D3"
> 
> 
> 
> cleanEx()
> nameEx("getCreators")
> ### * getCreators
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCreators
> ### Title: Add another author to the meta data of the file.
> ### Aliases: getCreators
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> getCreators(wb)
[1] ""
> 
> 
> 
> cleanEx()
> nameEx("getDateOrigin")
> ### * getDateOrigin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDateOrigin
> ### Title: Get the date origin an xlsx file is using
> ### Aliases: getDateOrigin
> 
> ### ** Examples
> 
> 
> ## create a file with some dates
> ## Not run: 
> ##D write.xlsx(as.Date("2015-01-10") - (0:4), file = "getDateOriginExample.xlsx")
> ##D m <- read.xlsx("getDateOriginExample.xlsx")
> ##D 
> ##D ## convert to dates
> ##D do <- getDateOrigin(system.file("extdata", "readTest.xlsx", package = "openxlsx"))
> ##D convertToDate(m[[1]], do)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getNamedRegions")
> ### * getNamedRegions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getNamedRegions
> ### Title: Get named regions
> ### Aliases: getNamedRegions
> 
> ### ** Examples
> 
> ## create named regions
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> 
> ## specify region
> writeData(wb, sheet = 1, x = iris, startCol = 1, startRow = 1)
> createNamedRegion(
+   wb = wb,
+   sheet = 1,
+   name = "iris",
+   rows = 1:(nrow(iris) + 1),
+   cols = 1:ncol(iris)
+ )
> 
> 
> ## using writeData 'name' argument to create a named region
> writeData(wb, sheet = 1, x = iris, name = "iris2", startCol = 10)
> ## Not run: 
> ##D out_file <- tempfile(fileext = ".xlsx")
> ##D saveWorkbook(wb, out_file, overwrite = TRUE)
> ##D 
> ##D ## see named regions
> ##D getNamedRegions(wb) ## From Workbook object
> ##D getNamedRegions(out_file) ## From xlsx file
> ##D 
> ##D ## read named regions
> ##D df <- read.xlsx(wb, namedRegion = "iris")
> ##D head(df)
> ##D 
> ##D df <- read.xlsx(out_file, namedRegion = "iris2")
> ##D head(df)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("getSheetNames")
> ### * getSheetNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getSheetNames
> ### Title: Get names of worksheets
> ### Aliases: getSheetNames
> 
> ### ** Examples
> 
> getSheetNames(system.file("extdata", "readTest.xlsx", package = "openxlsx"))
 [1] "Sheet1"  "Sheet2"  "Sheet 3" "Sheet 4" "Sheet 5" "Sheet 6" "1"      
 [8] "11"      "111"     "1111"    "11111"   "111111" 
> 
> 
> 
> cleanEx()
> nameEx("getStyles")
> ### * getStyles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getStyles
> ### Title: Returns a list of all styles in the workbook
> ### Aliases: getStyles
> 
> ### ** Examples
> 
> ## load a workbook
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> getStyles(wb)[1:3]
[[1]]
A custom cell style. 

 Cell formatting: GENERAL 
 Font name: Calibri 
 Font size: 11 
 Font colour: 10 
 Font decoration: UNDERLINE 
 Cell horz. align: left 
 


[[2]]
A custom cell style. 

 Cell formatting: GENERAL 
 Cell horz. align: center 
 wraptext: TRUE 


[[3]]
A custom cell style. 

 Cell formatting: GENERAL 
 


> 
> 
> 
> cleanEx()
> nameEx("getTables")
> ### * getTables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTables
> ### Title: List Excel tables in a workbook
> ### Aliases: getTables
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addWorksheet(wb, sheetName = "Sheet 1")
> writeDataTable(wb, sheet = "Sheet 1", x = iris)
> writeDataTable(wb, sheet = 1, x = mtcars, tableName = "mtcars", startCol = 10)
> 
> getTables(wb, sheet = "Sheet 1")
[1] "Table3" "mtcars"
attr(,"refs")
[1] "A1:E151" "J1:T33" 
> 
> 
> 
> cleanEx()
> nameEx("get_worksheet_entries")
> ### * get_worksheet_entries
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_worksheet_entries
> ### Title: Get entries from workbook worksheet
> ### Aliases: get_worksheet_entries
> 
> ### ** Examples
> 
> ## Create new workbook
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet")
> sheet <- 1
> 
> ## Write dummy data
> writeData(wb, sheet, c("A", "BB", "CCC"), startCol = 2, startRow = 3)
> writeData(wb, sheet, c(4, 5), startCol = 4, startRow = 3)
> 
> ## Get text entries
> get_worksheet_entries(wb, sheet)
[1] "A"   "BB"  "CCC" "4"   "5"  
> 
> 
> 
> 
> cleanEx()
> nameEx("groupRows")
> ### * groupRows
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupRows
> ### Title: Group Rows
> ### Aliases: groupRows
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, 'Sheet1')
> addWorksheet(wb, 'Sheet2')
> 
> writeData(wb, "Sheet1", iris)
> writeData(wb, "Sheet2", iris)
> 
> ## create list of groups
> # lines used for grouping (here: species)
> grp <- list(
+   seq(2, 51),
+   seq(52, 101),
+   seq(102, 151)
+ )
> # assign group levels
> names(grp) <- c("1","0","1")
> groupRows(wb, "Sheet1", rows = grp)
> 
> # different grouping
> names(grp) <- c("1","2","3")
> groupRows(wb, "Sheet2", rows = grp)
> 
> # alternatively, one can call groupRows multiple times
> addWorksheet(wb, 'Sheet3')
> writeData(wb, "Sheet3", iris)
> groupRows(wb, "Sheet3", 2:51, level = 1)
> groupRows(wb, "Sheet3", 102:151, level = 1)
> 
> addWorksheet(wb, 'Sheet4')
> writeData(wb, "Sheet4", iris)
> groupRows(wb, "Sheet4", 2:51, level = 1)
> groupRows(wb, "Sheet4", 52:101, level = 2)
> groupRows(wb, "Sheet4", 102:151, level = 3)
> 
> # Nested grouping can also be achieved without explicitly given the levels
> addWorksheet(wb, 'Sheet5')
> writeData(wb, "Sheet5", iris)
> groupRows(wb, "Sheet5", 2:151)
> groupRows(wb, "Sheet5", 52:151)
> groupRows(wb, "Sheet5", 102:151)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("if_null_then")
> ### * if_null_then
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: if_null_then
> ### Title: If NULL then ...
> ### Aliases: if_null_then %||%
> 
> ### ** Examples
> 
> ## Not run: 
> ##D x <- NULL
> ##D x <- x %||% "none"
> ##D x <- x %||% NA
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("insertImage")
> ### * insertImage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: insertImage
> ### Title: Insert an image into a worksheet
> ### Aliases: insertImage
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook("Ayanami")
> 
> ## Add some worksheets
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> addWorksheet(wb, "Sheet 3")
> addWorksheet(wb, "Sheet 4")
> 
> ## Insert images
> img <- system.file("extdata", "einstein.jpg", package = "openxlsx")
> insertImage(wb, "Sheet 1", img, startRow = 5, startCol = 3, width = 6, height = 5)
> insertImage(wb, 2, img, startRow = 2, startCol = 2)
> insertImage(wb, 3, img, width = 15, height = 12, startRow = 3, startCol = "G", units = "cm")
> insertImage(wb, 4, img, address = "https://github.com/ycphs/openxlsx")
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "insertImageExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("insertPlot")
> ### * insertPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: insertPlot
> ### Title: Insert the current plot into a worksheet
> ### Aliases: insertPlot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Create a new workbook
> ##D wb <- createWorkbook()
> ##D 
> ##D ## Add a worksheet
> ##D addWorksheet(wb, "Sheet 1", gridLines = FALSE)
> ##D 
> ##D ## create plot objects
> ##D require(ggplot2)
> ##D p1 <- qplot(mpg,
> ##D   data = mtcars, geom = "density",
> ##D   fill = as.factor(gear), alpha = I(.5), main = "Distribution of Gas Mileage"
> ##D )
> ##D p2 <- qplot(age, circumference,
> ##D   data = Orange, geom = c("point", "line"), colour = Tree
> ##D )
> ##D 
> ##D ## Insert currently displayed plot to sheet 1, row 1, column 1
> ##D print(p1) # plot needs to be showing
> ##D insertPlot(wb, 1, width = 5, height = 3.5, fileType = "png", units = "in")
> ##D 
> ##D ## Insert plot 2
> ##D print(p2)
> ##D insertPlot(wb, 1, xy = c("J", 2), width = 16, height = 10, fileType = "png", units = "cm")
> ##D 
> ##D ## Save workbook
> ##D saveWorkbook(wb, "insertPlotExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("int2col")
> ### * int2col
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: int2col
> ### Title: Convert integer to Excel column
> ### Aliases: int2col
> 
> ### ** Examples
> 
> int2col(1:10)
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
> 
> 
> 
> cleanEx()
> nameEx("loadWorkbook")
> ### * loadWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadWorkbook
> ### Title: Load an existing .xlsx file
> ### Aliases: loadWorkbook
> 
> ### ** Examples
> 
> ## load existing workbook from package folder
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> names(wb) # list worksheets
[1] "IrisSample"   "testing"      "mtcars"       "mtCars Pivot"
> wb ## view object
A Workbook object.
 
Worksheets:
 Sheet 1: "IrisSample"
 
	Custom row heights (row: height)
	 1: 34.5 
	Custom column widths (column: width)
	  1: 10.86, 2: 10.43, 3: 10.86, 4: 10.43, 5: 13.14, 7: 12.43, 8: 18.43, 9: 18.00, 10: 18.14, 11: 17.71, 12: 9.715 
 

 Sheet 2: "testing"
 
	Custom row heights (row: height)
	 7: 24, 8: 15.75, 20: 15.75, 27: 15.75, 28: 15.75, 29: 16.5, 31: 15.75, 33: 15.75, 35: 15.75, 36: 16.5, 37: 15.75, 38: 15.75 
	Custom column widths (column: width)
	  9: 13.00, 10: 13.00, 11: 13.00, 12: 13.00, 13: 13.00, 14: 13.00 
 

 Sheet 3: "mtcars"
 

 Sheet 4: "mtCars Pivot"
 
	Custom column widths (column: width)
	  1: 12.43, 2: 14.29, 3: 8.860, 4: 9.145, 5: 9.145 
 

 
 
Images:
 Image 1: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/media/image2.jpeg"
 Image 2: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/media/image1.jpeg"
 
Charts:
 Chart 1: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/colors2.xml"
 Chart 2: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/style2.xml"
 Chart 3: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/chart2.xml"
 Chart 4: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/chart1.xml"
 Chart 5: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/style1.xml"
 Chart 6: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/colors1.xml"
 Chart 7: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/_rels/chart2.xml.rels"
 Chart 8: "/tmp/RtmpbG7zrV/file10980385c44fa/xl/charts/_rels/chart1.xml.rels"
 Worksheet write order: 1, 2, 3, 4
 Active Sheet 2: "testing" 
	Position: 2

> ## Add a worksheet
> addWorksheet(wb, "A new worksheet")
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "loadExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("makeHyperlinkString")
> ### * makeHyperlinkString
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeHyperlinkString
> ### Title: create Excel hyperlink string
> ### Aliases: makeHyperlinkString
> 
> ### ** Examples
> 
> 
> ## Writing internal hyperlinks
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet1")
> addWorksheet(wb, "Sheet2")
> addWorksheet(wb, "Sheet 3")
> writeData(wb, sheet = 3, x = iris)
> 
> ## External Hyperlink
> x <- c("https://www.google.com", "https://www.google.com.au")
> names(x) <- c("google", "google Aus")
> class(x) <- "hyperlink"
> 
> writeData(wb, sheet = 1, x = x, startCol = 10)
> 
> 
> ## Internal Hyperlink - create hyperlink formula manually
> writeFormula(
+   wb, "Sheet1",
+   x = '=HYPERLINK(\"#Sheet2!B3\", "Text to Display - Link to Sheet2")',
+   startCol = 3
+ )
> 
> ## Internal - No text to display using makeHyperlinkString() function
> writeFormula(
+   wb, "Sheet1",
+   startRow = 1,
+   x = makeHyperlinkString(sheet = "Sheet 3", row = 1, col = 2)
+ )
> 
> ## Internal - Text to display
> writeFormula(
+   wb, "Sheet1",
+   startRow = 2,
+   x = makeHyperlinkString(
+     sheet = "Sheet 3", row = 1, col = 2,
+     text = "Link to Sheet 3"
+   )
+ )
> 
> ## Link to file - No text to display
> writeFormula(
+   wb, "Sheet1",
+   startRow = 4,
+   x = makeHyperlinkString(
+     sheet = "testing", row = 3, col = 10,
+     file = system.file("extdata", "loadExample.xlsx", package = "openxlsx")
+   )
+ )
> 
> ## Link to file - Text to display
> writeFormula(
+   wb, "Sheet1",
+   startRow = 3,
+   x = makeHyperlinkString(
+     sheet = "testing", row = 3, col = 10,
+     file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"),
+     text = "Link to File."
+   )
+ )
> 
> ## Link to external file - Text to display
> writeFormula(
+   wb, "Sheet1",
+   startRow = 10, startCol = 1,
+   x = '=HYPERLINK("[C:/Users]", "Link to an external file")'
+ )
> 
> ## Link to internal file
> x = makeHyperlinkString(text = "test.png", file = "D:/somepath/somepicture.png")
> writeFormula(wb, "Sheet1", startRow = 11, startCol = 1, x = x)
> 
> ## Not run: 
> ##D saveWorkbook(wb, "internalHyperlinks.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mergeCells")
> ### * mergeCells
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mergeCells
> ### Title: Merge cells within a worksheet
> ### Aliases: mergeCells
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook()
> 
> ## Add a worksheet
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> 
> ## Merge cells: Row 2 column C to F (3:6)
> mergeCells(wb, "Sheet 1", cols = 2, rows = 3:6)
> 
> ## Merge cells:Rows 10 to 20 columns A to J (1:10)
> mergeCells(wb, 1, cols = 1:10, rows = 10:20)
> 
> ## Intersecting merges
> mergeCells(wb, 2, cols = 1:10, rows = 1)
> mergeCells(wb, 2, cols = 5:10, rows = 2)
> mergeCells(wb, 2, cols = c(1, 10), rows = 12) ## equivalent to 1:10 as only min/max are used
> # mergeCells(wb, 2, cols = 1, rows = c(1,10)) # Throws error because intersects existing merge
> 
> ## remove merged cells
> removeCellMerge(wb, 2, cols = 1, rows = 1) # removes any intersecting merges
> mergeCells(wb, 2, cols = 1, rows = 1:10) # Now this works
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "mergeCellsExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("modifyBaseFont")
> ### * modifyBaseFont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modifyBaseFont
> ### Title: Modify the default font
> ### Aliases: modifyBaseFont
> 
> ### ** Examples
> 
> ## create a workbook
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> ## modify base font to size 10 Arial Narrow in red
> modifyBaseFont(wb, fontSize = 10, fontColour = "#FF0000", fontName = "Arial Narrow")
> 
> writeData(wb, "S1", iris)
> writeDataTable(wb, "S1", x = iris, startCol = 10) ## font colour does not affect tables
> ## Not run: 
> ##D saveWorkbook(wb, "modifyBaseFontExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("names")
> ### * names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: names
> ### Title: get or set worksheet names
> ### Aliases: names names.Workbook names<-.Workbook
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> addWorksheet(wb, "S2")
> addWorksheet(wb, "S3")
> 
> names(wb)
[1] "S1" "S2" "S3"
> names(wb)[[2]] <- "S2a"
> names(wb)
[1] "S1"  "S2a" "S3" 
> names(wb) <- paste("Sheet", 1:3)
> 
> 
> 
> cleanEx()
> nameEx("openXL")
> ### * openXL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: openXL
> ### Title: Open a Microsoft Excel file (xls/xlsx) or an openxlsx Workbook
> ### Aliases: openXL
> 
> ### ** Examples
> 
> # file example
> example(writeData)

writDt> ## See formatting vignette for further examples.
writDt> 
writDt> ## Options for default styling (These are the defaults)
writDt> options("openxlsx.borderColour" = "black")

writDt> options("openxlsx.borderStyle" = "thin")

writDt> options("openxlsx.dateFormat" = "mm/dd/yyyy")

writDt> options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")

writDt> options("openxlsx.numFmt" = NULL)

writDt> ## Change the default border colour to #4F81BD
writDt> options("openxlsx.borderColour" = "#4F81BD")

writDt> #####################################################################################
writDt> ## Create Workbook object and add worksheets
writDt> wb <- createWorkbook()

writDt> ## Add worksheets
writDt> addWorksheet(wb, "Cars")

writDt> addWorksheet(wb, "Formula")

writDt> x <- mtcars[1:6, ]

writDt> writeData(wb, "Cars", x, startCol = 2, startRow = 3, rowNames = TRUE)

writDt> #####################################################################################
writDt> ## Bordering
writDt> 
writDt> writeData(wb, "Cars", x,
writDt+   rowNames = TRUE, startCol = "O", startRow = 3,
writDt+   borders = "surrounding", borderColour = "black"
writDt+ ) ## black border

writDt> writeData(wb, "Cars", x,
writDt+   rowNames = TRUE,
writDt+   startCol = 2, startRow = 12, borders = "columns"
writDt+ )

writDt> writeData(wb, "Cars", x,
writDt+   rowNames = TRUE,
writDt+   startCol = "O", startRow = 12, borders = "rows"
writDt+ )

writDt> #####################################################################################
writDt> ## Header Styles
writDt> 
writDt> hs1 <- createStyle(
writDt+   fgFill = "#DCE6F1", halign = "CENTER", textDecoration = "italic",
writDt+   border = "Bottom"
writDt+ )

writDt> writeData(wb, "Cars", x,
writDt+   colNames = TRUE, rowNames = TRUE, startCol = "B",
writDt+   startRow = 23, borders = "rows", headerStyle = hs1, borderStyle = "dashed"
writDt+ )

writDt> hs2 <- createStyle(
writDt+   fontColour = "#ffffff", fgFill = "#4F80BD",
writDt+   halign = "center", valign = "center", textDecoration = "bold",
writDt+   border = "TopBottomLeftRight"
writDt+ )

writDt> writeData(wb, "Cars", x,
writDt+   colNames = TRUE, rowNames = TRUE,
writDt+   startCol = "O", startRow = 23, borders = "columns", headerStyle = hs2
writDt+ )

writDt> #####################################################################################
writDt> ## Hyperlinks
writDt> ## - vectors/columns with class 'hyperlink' are written as hyperlinks'
writDt> 
writDt> v <- rep("https://CRAN.R-project.org/", 4)

writDt> names(v) <- paste0("Hyperlink", 1:4) # Optional: names will be used as display text

writDt> class(v) <- "hyperlink"

writDt> writeData(wb, "Cars", x = v, xy = c("B", 32))

writDt> #####################################################################################
writDt> ## Formulas
writDt> ## - vectors/columns with class 'formula' are written as formulas'
writDt> 
writDt> df <- data.frame(
writDt+   x = 1:3, y = 1:3,
writDt+   z = paste0(paste0("A", 1:3 + 1L), paste0("B", 1:3 + 1L), sep = " + "),
writDt+   stringsAsFactors = FALSE
writDt+ )

writDt> class(df$z) <- c(class(df$z), "formula")

writDt> writeData(wb, sheet = "Formula", x = df)

writDt> #####################################################################################
writDt> ## Save workbook
writDt> ## Open in excel without saving file: openXL(wb)
writDt> ## Not run: 
writDt> ##D saveWorkbook(wb, "writeDataExample.xlsx", overwrite = TRUE)
writDt> ## End(Not run)
writDt> 
writDt> 
writDt> 
> # openXL("writeDataExample.xlsx")
> 
> # (not yet saved) Workbook example
> wb <- createWorkbook()
> x <- mtcars[1:6, ]
> addWorksheet(wb, "Cars")
> writeData(wb, "Cars", x, startCol = 2, startRow = 3, rowNames = TRUE)
> # openXL(wb)
> 
> 
> 
> cleanEx()
> nameEx("openxlsxFontSizeLookupTable")
> ### * openxlsxFontSizeLookupTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: openxlsxFontSizeLookupTable
> ### Title: Font Size Lookup tables
> ### Aliases: openxlsxFontSizeLookupTable openxlsxFontSizeLookupTableBold
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(openxlsxFontSizeLookupTable)
> data(openxlsxFontSizeLookupTableBold)
> 
> 
> 
> cleanEx()
> nameEx("openxlsx_options")
> ### * openxlsx_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: openxlsx_options
> ### Title: openxlsx Options
> ### Aliases: openxlsx_options op.openxlsx openxlsx_getOp openxlsx_setOp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> openxlsx_getOp("borders")
NULL
> op.openxlsx[["openxlsx.borders"]]
NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("pageBreak")
> ### * pageBreak
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pageBreak
> ### Title: add a page break to a worksheet
> ### Aliases: pageBreak
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> writeData(wb, sheet = 1, x = iris)
> 
> pageBreak(wb, sheet = 1, i = 10, type = "row")
> pageBreak(wb, sheet = 1, i = 20, type = "row")
> pageBreak(wb, sheet = 1, i = 2, type = "column")
> ## Not run: 
> ##D saveWorkbook(wb, "pageBreakExample.xlsx", TRUE)
> ## End(Not run)
> ## In Excel: View tab -> Page Break Preview
> 
> 
> 
> cleanEx()
> nameEx("pageSetup")
> ### * pageSetup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pageSetup
> ### Title: Set page margins, orientation and print scaling
> ### Aliases: pageSetup
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> addWorksheet(wb, "S2")
> writeDataTable(wb, 1, x = iris[1:30, ])
> writeDataTable(wb, 2, x = iris[1:30, ], xy = c("C", 5))
> 
> ## landscape page scaled to 50%
> pageSetup(wb, sheet = 1, orientation = "landscape", scale = 50)
> 
> ## portrait page scales to 300% with 0.5in left and right margins
> pageSetup(wb, sheet = 2, orientation = "portrait", scale = 300, left = 0.5, right = 0.5)
> 
> 
> ## print titles
> addWorksheet(wb, "print_title_rows")
> addWorksheet(wb, "print_title_cols")
> 
> writeData(wb, "print_title_rows", rbind(iris, iris, iris, iris))
> writeData(wb, "print_title_cols", x = rbind(mtcars, mtcars, mtcars), rowNames = TRUE)
> 
> pageSetup(wb, sheet = "print_title_rows", printTitleRows = 1) ## first row
> pageSetup(wb, sheet = "print_title_cols", printTitleCols = 1, printTitleRows = 1)
> ## Not run: 
> ##D saveWorkbook(wb, "pageSetupExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("protectWorkbook")
> ### * protectWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: protectWorkbook
> ### Title: Protect a workbook from modifications
> ### Aliases: protectWorkbook
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> protectWorkbook(wb, protect = TRUE, password = "Password", lockStructure = TRUE)
> ## Not run: 
> ##D saveWorkbook(wb, "WorkBook_Protection.xlsx", overwrite = TRUE)
> ## End(Not run)
> # Remove the protection
> protectWorkbook(wb, protect = FALSE)
> ## Not run: 
> ##D saveWorkbook(wb, "WorkBook_Protection_unprotected.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("protectWorksheet")
> ### * protectWorksheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: protectWorksheet
> ### Title: Protect a worksheet from modifications
> ### Aliases: protectWorksheet
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> writeDataTable(wb, 1, x = iris[1:30, ])
> # Formatting cells / columns is allowed , but inserting / deleting columns is protected:
> protectWorksheet(wb, "S1",
+   protect = TRUE,
+   lockFormattingCells = FALSE, lockFormattingColumns = FALSE,
+   lockInsertingColumns = TRUE, lockDeletingColumns = TRUE
+ )
> 
> # Remove the protection
> protectWorksheet(wb, "S1", protect = FALSE)
> ## Not run: 
> ##D saveWorkbook(wb, "pageSetupExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("read.xlsx")
> ### * read.xlsx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.xlsx
> ### Title: Read from an Excel file or Workbook object
> ### Aliases: read.xlsx
> 
> ### ** Examples
> 
> 
> xlsxFile <- system.file("extdata", "readTest.xlsx", package = "openxlsx")
> df1 <- read.xlsx(xlsxFile = xlsxFile, sheet = 1, skipEmptyRows = FALSE)
> sapply(df1, class)
       Var1        Var2        Var3        Var4        Var5        Var6 
  "logical"   "numeric"   "numeric" "character"   "numeric" "character" 
       Var7 
  "numeric" 
> 
> df2 <- read.xlsx(xlsxFile = xlsxFile, sheet = 3, skipEmptyRows = TRUE)
> df2$Date <- convertToDate(df2$Date)
> sapply(df2, class)
       Date       value        word        bool      wordZ2 
     "Date"   "numeric" "character"   "logical" "character" 
> head(df2)
        Date     value      word  bool  wordZ2
1 2014-04-28 0.8390764 N-U-B-R-A FALSE FALSE-Z
2 2014-04-27 0.8863800 N-Z-P-S-Y  TRUE  TRUE-Z
3 2014-04-26 0.5741314 C-G-D-X-H  TRUE  TRUE-Z
4 2014-04-25 0.1366065      <NA> FALSE FALSE-Z
5 2014-04-24 0.3692582 B-K-A-O-W  TRUE  TRUE-Z
6 2014-04-23        NA H-P-G-O-K  TRUE  TRUE-Z
> 
> df2 <- read.xlsx(
+   xlsxFile = xlsxFile, sheet = 3, skipEmptyRows = TRUE,
+   detectDates = TRUE
+ )
> sapply(df2, class)
       Date       value        word        bool      wordZ2 
     "Date"   "numeric" "character"   "logical" "character" 
> head(df2)
        Date     value      word  bool  wordZ2
1 2014-04-28 0.8390764 N-U-B-R-A FALSE FALSE-Z
2 2014-04-27 0.8863800 N-Z-P-S-Y  TRUE  TRUE-Z
3 2014-04-26 0.5741314 C-G-D-X-H  TRUE  TRUE-Z
4 2014-04-25 0.1366065      <NA> FALSE FALSE-Z
5 2014-04-24 0.3692582 B-K-A-O-W  TRUE  TRUE-Z
6 2014-04-23        NA H-P-G-O-K  TRUE  TRUE-Z
> 
> wb <- loadWorkbook(system.file("extdata", "readTest.xlsx", package = "openxlsx"))
> df3 <- read.xlsx(wb, sheet = 2, skipEmptyRows = FALSE, colNames = TRUE)
> df4 <- read.xlsx(xlsxFile, sheet = 2, skipEmptyRows = FALSE, colNames = TRUE)
> all.equal(df3, df4)
[1] TRUE
> 
> wb <- loadWorkbook(system.file("extdata", "readTest.xlsx", package = "openxlsx"))
> df3 <- read.xlsx(wb,
+   sheet = 2, skipEmptyRows = FALSE,
+   cols = c(1, 4), rows = c(1, 3, 4)
+ )
> 
> ## URL
> ##
> ## Not run: 
> ##D xlsxFile <- "https://github.com/awalker89/openxlsx/raw/master/inst/readTest.xlsx"
> ##D head(read.xlsx(xlsxFile))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("readWorkbook")
> ### * readWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readWorkbook
> ### Title: Read from an Excel file or Workbook object
> ### Aliases: readWorkbook
> 
> ### ** Examples
> 
> xlsxFile <- system.file("extdata", "readTest.xlsx", package = "openxlsx")
> df1 <- readWorkbook(xlsxFile = xlsxFile, sheet = 1)
> 
> xlsxFile <- system.file("extdata", "readTest.xlsx", package = "openxlsx")
> df1 <- readWorkbook(xlsxFile = xlsxFile, sheet = 1, rows = c(1, 3, 5), cols = 1:3)
> 
> 
> 
> cleanEx()
> nameEx("removeColWidths")
> ### * removeColWidths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeColWidths
> ### Title: Remove column widths from a worksheet
> ### Aliases: removeColWidths
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> 
> ## remove column widths in columns 1 to 20
> removeColWidths(wb, 1, cols = 1:20)
> ## Not run: 
> ##D saveWorkbook(wb, "removeColWidthsExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeFilter")
> ### * removeFilter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeFilter
> ### Title: Remove a worksheet filter
> ### Aliases: removeFilter
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> addWorksheet(wb, "Sheet 2")
> addWorksheet(wb, "Sheet 3")
> 
> writeData(wb, 1, iris)
> addFilter(wb, 1, row = 1, cols = 1:ncol(iris))
> 
> ## Equivalently
> writeData(wb, 2, x = iris, withFilter = TRUE)
> 
> ## Similarly
> writeDataTable(wb, 3, iris)
> 
> ## remove filters
> removeFilter(wb, 1:2) ## remove filters
> removeFilter(wb, 3) ## Does not affect tables!
> ## Not run: 
> ##D saveWorkbook(wb, file = "removeFilterExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeRowHeights")
> ### * removeRowHeights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeRowHeights
> ### Title: Remove custom row heights from a worksheet
> ### Aliases: removeRowHeights
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> 
> ## remove any custom row heights in rows 1 to 10
> removeRowHeights(wb, 1, rows = 1:10)
> ## Not run: 
> ##D saveWorkbook(wb, "removeRowHeightsExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("removeTable")
> ### * removeTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeTable
> ### Title: Remove an Excel table in a workbook
> ### Aliases: removeTable
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addWorksheet(wb, sheetName = "Sheet 1")
> addWorksheet(wb, sheetName = "Sheet 2")
> writeDataTable(wb, sheet = "Sheet 1", x = iris, tableName = "iris")
> writeDataTable(wb, sheet = 1, x = mtcars, tableName = "mtcars", startCol = 10)
> 
> 
> removeWorksheet(wb, sheet = 1) ## delete worksheet removes table objects
> 
> writeDataTable(wb, sheet = 1, x = iris, tableName = "iris")
> writeDataTable(wb, sheet = 1, x = mtcars, tableName = "mtcars", startCol = 10)
> 
> ## removeTable() deletes table object and all data
> getTables(wb, sheet = 1)
[1] "iris"   "mtcars"
attr(,"refs")
[1] "A1:E151" "J1:T33" 
> removeTable(wb = wb, sheet = 1, table = "iris")
> writeDataTable(wb, sheet = 1, x = iris, tableName = "iris", startCol = 1)
> 
> getTables(wb, sheet = 1)
[1] "mtcars" "iris"  
attr(,"refs")
[1] "J1:T33"  "A1:E151"
> removeTable(wb = wb, sheet = 1, table = "iris")
> writeDataTable(wb, sheet = 1, x = iris, tableName = "iris", startCol = 1)
> ## Not run: 
> ##D saveWorkbook(wb = wb, file = "removeTableExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("removeWorksheet")
> ### * removeWorksheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeWorksheet
> ### Title: Remove a worksheet from a workbook
> ### Aliases: removeWorksheet
> 
> ### ** Examples
> 
> ## load a workbook
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> 
> ## Remove sheet 2
> removeWorksheet(wb, 2)
> 
> ## save the modified workbook
> ## Not run: 
> ##D saveWorkbook(wb, "removeWorksheetExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("renameWorksheet")
> ### * renameWorksheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: renameWorksheet
> ### Title: Rename a worksheet
> ### Aliases: renameWorksheet
> 
> ### ** Examples
> 
> 
> ## Create a new workbook
> wb <- createWorkbook("CREATOR")
> 
> ## Add 3 worksheets
> addWorksheet(wb, "Worksheet Name")
> addWorksheet(wb, "This is worksheet 2")
> addWorksheet(wb, "Not the best name")
> 
> #' ## rename all worksheets
> names(wb) <- c("A", "B", "C")
> 
> 
> ## Rename worksheet 1 & 3
> renameWorksheet(wb, 1, "New name for sheet 1")
> names(wb)[[1]] <- "New name for sheet 1"
> names(wb)[[3]] <- "A better name"
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "renameWorksheetExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("replaceStyle")
> ### * replaceStyle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: replaceStyle
> ### Title: Replace an existing cell style
> ### Aliases: replaceStyle
> 
> ### ** Examples
> 
> 
> ## load a workbook
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> 
> ## create a new style and replace style 2
> 
> newStyle <- createStyle(fgFill = "#00FF00")
> 
> ## replace style 2
> getStyles(wb)[1:3] ## prints styles
[[1]]
A custom cell style. 

 Cell formatting: GENERAL 
 Font name: Calibri 
 Font size: 11 
 Font colour: 10 
 Font decoration: UNDERLINE 
 Cell horz. align: left 
 


[[2]]
A custom cell style. 

 Cell formatting: GENERAL 
 Cell horz. align: center 
 wraptext: TRUE 


[[3]]
A custom cell style. 

 Cell formatting: GENERAL 
 


> replaceStyle(wb, 2, newStyle = newStyle)
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "replaceStyleExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("saveWorkbook")
> ### * saveWorkbook
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveWorkbook
> ### Title: save Workbook to file
> ### Aliases: saveWorkbook
> 
> ### ** Examples
> 
> ## Create a new workbook and add a worksheet
> wb <- createWorkbook("Creator of workbook")
> addWorksheet(wb, sheetName = "My first worksheet")
> 
> ## Save workbook to working directory
> ## Not run: 
> ##D saveWorkbook(wb, file = "saveWorkbookExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setColWidths")
> ### * setColWidths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setColWidths
> ### Title: Set worksheet column widths
> ### Aliases: setColWidths
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook()
> 
> ## Add a worksheet
> addWorksheet(wb, "Sheet 1")
> 
> 
> ## set col widths
> setColWidths(wb, 1, cols = c(1, 4, 6, 7, 9), widths = c(16, 15, 12, 18, 33))
> 
> ## auto columns
> addWorksheet(wb, "Sheet 2")
> writeData(wb, sheet = 2, x = iris)
> setColWidths(wb, sheet = 2, cols = 1:5, widths = "auto")
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "setColWidthsExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("setFooter")
> ### * setFooter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setFooter
> ### Title: Set footer for all worksheets
> ### Aliases: setFooter
> 
> ### ** Examples
> 
> ## Not run: 
> ##D wb <- createWorkbook("Edgar Anderson")
> ##D addWorksheet(wb, "S1")
> ##D writeDataTable(wb, "S1", x = iris[1:30, ], xy = c("C", 5))
> ##D 
> ##D ## set all headers
> ##D setHeader(wb, "This is a header", position = "center")
> ##D setHeader(wb, "To the left", position = "left")
> ##D setHeader(wb, "On the right", position = "right")
> ##D 
> ##D ## set all footers
> ##D setFooter(wb, "Center Footer Here", position = "center")
> ##D setFooter(wb, "Bottom left", position = "left")
> ##D setFooter(wb, Sys.Date(), position = "right")
> ##D 
> ##D saveWorkbook(wb, "headerFooterExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setHeader")
> ### * setHeader
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setHeader
> ### Title: Set header for all worksheets
> ### Aliases: setHeader
> 
> ### ** Examples
> 
> ## Not run: 
> ##D wb <- createWorkbook("Edgar Anderson")
> ##D addWorksheet(wb, "S1")
> ##D writeDataTable(wb, "S1", x = iris[1:30, ], xy = c("C", 5))
> ##D 
> ##D ## set all headers
> ##D setHeader(wb, "This is a header", position = "center")
> ##D setHeader(wb, "To the left", position = "left")
> ##D setHeader(wb, "On the right", position = "right")
> ##D 
> ##D ## set all footers
> ##D setFooter(wb, "Center Footer Here", position = "center")
> ##D setFooter(wb, "Bottom left", position = "left")
> ##D setFooter(wb, Sys.Date(), position = "right")
> ##D 
> ##D saveWorkbook(wb, "headerHeaderExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setHeaderFooter")
> ### * setHeaderFooter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setHeaderFooter
> ### Title: Set document headers and footers
> ### Aliases: setHeaderFooter
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> 
> addWorksheet(wb, "S1")
> addWorksheet(wb, "S2")
> addWorksheet(wb, "S3")
> addWorksheet(wb, "S4")
> 
> writeData(wb, 1, 1:400)
> writeData(wb, 2, 1:400)
> writeData(wb, 3, 3:400)
> writeData(wb, 4, 3:400)
> 
> setHeaderFooter(wb,
+   sheet = "S1",
+   header = c("ODD HEAD LEFT", "ODD HEAD CENTER", "ODD HEAD RIGHT"),
+   footer = c("ODD FOOT RIGHT", "ODD FOOT CENTER", "ODD FOOT RIGHT"),
+   evenHeader = c("EVEN HEAD LEFT", "EVEN HEAD CENTER", "EVEN HEAD RIGHT"),
+   evenFooter = c("EVEN FOOT RIGHT", "EVEN FOOT CENTER", "EVEN FOOT RIGHT"),
+   firstHeader = c("TOP", "OF FIRST", "PAGE"),
+   firstFooter = c("BOTTOM", "OF FIRST", "PAGE")
+ )
> 
> setHeaderFooter(wb,
+   sheet = 2,
+   header = c("&[Date]", "ALL HEAD CENTER 2", "&[Page] / &[Pages]"),
+   footer = c("&[Path]&[File]", NA, "&[Tab]"),
+   firstHeader = c(NA, "Center Header of First Page", NA),
+   firstFooter = c(NA, "Center Footer of First Page", NA)
+ )
> 
> setHeaderFooter(wb,
+   sheet = 3,
+   header = c("ALL HEAD LEFT 2", "ALL HEAD CENTER 2", "ALL HEAD RIGHT 2"),
+   footer = c("ALL FOOT RIGHT 2", "ALL FOOT CENTER 2", "ALL FOOT RIGHT 2")
+ )
> 
> setHeaderFooter(wb,
+   sheet = 4,
+   firstHeader = c("FIRST ONLY L", NA, "FIRST ONLY R"),
+   firstFooter = c("FIRST ONLY L", NA, "FIRST ONLY R")
+ )
> ## Not run: 
> ##D saveWorkbook(wb, "setHeaderFooterExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setLastModifiedBy")
> ### * setLastModifiedBy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setLastModifiedBy
> ### Title: Add another author to the meta data of the file.
> ### Aliases: setLastModifiedBy
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> setLastModifiedBy(wb, "test")
Warning in stri_replace_all_fixed(core, pattern = current_LastModifiedBy,  :
  empty search patterns are not supported
> 
> 
> 
> cleanEx()
> nameEx("setRowHeights")
> ### * setRowHeights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setRowHeights
> ### Title: Set worksheet row heights
> ### Aliases: setRowHeights
> 
> ### ** Examples
> 
> ## Create a new workbook
> wb <- createWorkbook()
> 
> ## Add a worksheet
> addWorksheet(wb, "Sheet")
> sheet <- 1
> 
> ## Write dummy data
> writeData(wb, sheet, "fixed w/fixed h", startCol = 1, startRow = 1)
> writeData(wb, sheet, "fixed w/auto h ABC ABC ABC ABC ABC ABC ABC ABC ABC ABC ABC",
+  startCol = 2, startRow = 2)
> writeData(wb, sheet, "variable w/fixed h", startCol = 3, startRow = 3)
> 
> ## Set column widths and row heights
> setColWidths(wb, sheet, cols = c(1, 2, 3, 4), widths = c(10, 20, "auto", 20))
> setRowHeights(wb, sheet, rows = c(1, 2, 8, 4, 6), heights = c(30, "auto", 15, 15, 30))
> 
> ## Overwrite row 1 height
> setRowHeights(wb, sheet, rows = 1, heights = 40)
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "setRowHeightsExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("setWindowSize")
> ### * setWindowSize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setWindowSize
> ### Title: Set and Get Window Size for xlsx file
> ### Aliases: setWindowSize getWindowSize
> 
> ### ** Examples
> 
> ## Create Workbook object and add worksheets
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> getWindowSize(wb)
$xWindow
[1] "0"

$yWindow
[1] "0"

$windowWidth
[1] "13125"

$windowHeight
[1] "6105"

> setWindowSize(wb, windowWidth = 10000)
> 
> 
> 
> cleanEx()
> nameEx("sheetVisibility")
> ### * sheetVisibility
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheetVisibility
> ### Title: Get/set worksheet visible state
> ### Aliases: sheetVisibility sheetVisibility<-
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addWorksheet(wb, sheetName = "S1", visible = FALSE)
> addWorksheet(wb, sheetName = "S2", visible = TRUE)
> addWorksheet(wb, sheetName = "S3", visible = FALSE)
> 
> sheetVisibility(wb)
[1] "hidden"  "visible" "hidden" 
> sheetVisibility(wb)[1] <- TRUE ## show sheet 1
> sheetVisibility(wb)[2] <- FALSE ## hide sheet 2
> sheetVisibility(wb)[3] <- "hidden" ## hide sheet 3
> sheetVisibility(wb)[3] <- "veryHidden" ## hide sheet 3 from UI
> 
> 
> 
> cleanEx()
> nameEx("sheetVisible")
> ### * sheetVisible
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheetVisible
> ### Title: Get worksheet visible state.
> ### Aliases: sheetVisible sheetVisible<-
> 
> ### ** Examples
> 
> 
> wb <- createWorkbook()
> addWorksheet(wb, sheetName = "S1", visible = FALSE)
> addWorksheet(wb, sheetName = "S2", visible = TRUE)
> addWorksheet(wb, sheetName = "S3", visible = FALSE)
> 
> sheetVisible(wb)
Warning in sheetVisible(wb) :
  This function is deprecated. Use function 'sheetVisibility()'
[1] FALSE  TRUE FALSE
> sheetVisible(wb)[1] <- TRUE ## show sheet 1
Warning in sheetVisible(`*tmp*`) :
  This function is deprecated. Use function 'sheetVisibility()'
Warning in `sheetVisible<-`(`*tmp*`, value = c(TRUE, TRUE, FALSE)) :
  This function is deprecated. Use function 'sheetVisibility()'
> sheetVisible(wb)[2] <- FALSE ## hide sheet 2
Warning in sheetVisible(`*tmp*`) :
  This function is deprecated. Use function 'sheetVisibility()'
Warning in `sheetVisible<-`(`*tmp*`, value = c(TRUE, FALSE, FALSE)) :
  This function is deprecated. Use function 'sheetVisibility()'
> 
> 
> 
> cleanEx()
> nameEx("sheets")
> ### * sheets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheets
> ### Title: Returns names of worksheets.
> ### Aliases: sheets
> 
> ### ** Examples
> 
> 
> ## Create a new workbook
> wb <- createWorkbook()
> 
> ## Add some worksheets
> addWorksheet(wb, "Worksheet Name")
> addWorksheet(wb, "This is worksheet 2")
> addWorksheet(wb, "The third worksheet")
> 
> ## Return names of sheets, can not be used for assignment.
> names(wb)
[1] "Worksheet Name"      "This is worksheet 2" "The third worksheet"
> # openXL(wb)
> 
> names(wb) <- c("A", "B", "C")
> names(wb)
[1] "A" "B" "C"
> # openXL(wb)
> 
> 
> 
> cleanEx()
> nameEx("showGridLines")
> ### * showGridLines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: showGridLines
> ### Title: Set worksheet gridlines to show or hide.
> ### Aliases: showGridLines
> 
> ### ** Examples
> 
> wb <- loadWorkbook(file = system.file("extdata", "loadExample.xlsx", package = "openxlsx"))
> names(wb) ## list worksheets in workbook
[1] "IrisSample"   "testing"      "mtcars"       "mtCars Pivot"
> showGridLines(wb, 1, showGridLines = FALSE)
> showGridLines(wb, "testing", showGridLines = FALSE)
> ## Not run: 
> ##D saveWorkbook(wb, "showGridLinesExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("worksheetOrder")
> ### * worksheetOrder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: worksheetOrder
> ### Title: Order of worksheets in xlsx file
> ### Aliases: worksheetOrder worksheetOrder<-
> 
> ### ** Examples
> 
> ## setup a workbook with 3 worksheets
> wb <- createWorkbook()
> addWorksheet(wb = wb, sheetName = "Sheet 1", gridLines = FALSE)
> writeDataTable(wb = wb, sheet = 1, x = iris)
> 
> addWorksheet(wb = wb, sheetName = "mtcars (Sheet 2)", gridLines = FALSE)
> writeData(wb = wb, sheet = 2, x = mtcars)
> 
> addWorksheet(wb = wb, sheetName = "Sheet 3", gridLines = FALSE)
> writeData(wb = wb, sheet = 3, x = Formaldehyde)
> 
> worksheetOrder(wb)
[1] 1 2 3
> names(wb)
[1] "Sheet 1"          "mtcars (Sheet 2)" "Sheet 3"         
> worksheetOrder(wb) <- c(1, 3, 2) # switch position of sheets 2 & 3
> writeData(wb, 2, 'This is still the "mtcars" worksheet', startCol = 15)
> worksheetOrder(wb)
[1] 1 3 2
> names(wb) ## ordering within workbook is not changed
[1] "Sheet 1"          "mtcars (Sheet 2)" "Sheet 3"         
> ## Not run: 
> ##D saveWorkbook(wb, "worksheetOrderExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> worksheetOrder(wb) <- c(3, 2, 1)
> ## Not run: 
> ##D saveWorkbook(wb, "worksheetOrderExample2.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("write.xlsx")
> ### * write.xlsx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write.xlsx
> ### Title: write data to an xlsx file
> ### Aliases: write.xlsx
> 
> ### ** Examples
> 
> 
> ## write to working directory
> options("openxlsx.borderColour" = "#4F80BD") ## set default border colour
> ## Not run: 
> ##D write.xlsx(iris, file = "writeXLSX1.xlsx", colNames = TRUE, borders = "columns")
> ##D write.xlsx(iris, file = "writeXLSX2.xlsx", colNames = TRUE, borders = "surrounding")
> ## End(Not run)
> 
> 
> hs <- createStyle(
+   textDecoration = "BOLD", fontColour = "#FFFFFF", fontSize = 12,
+   fontName = "Arial Narrow", fgFill = "#4F80BD"
+ )
> ## Not run: 
> ##D write.xlsx(iris,
> ##D   file = "writeXLSX3.xlsx",
> ##D   colNames = TRUE, borders = "rows", headerStyle = hs
> ##D )
> ## End(Not run)
> 
> ## Lists elements are written to individual worksheets, using list names as sheet names if available
> l <- list("IRIS" = iris, "MTCATS" = mtcars, matrix(runif(1000), ncol = 5))
> ## Not run: 
> ##D write.xlsx(l, "writeList1.xlsx", colWidths = c(NA, "auto", "auto"))
> ## End(Not run)
> 
> ## different sheets can be given different parameters
> ## Not run: 
> ##D write.xlsx(l, "writeList2.xlsx",
> ##D   startCol = c(1, 2, 3), startRow = 2,
> ##D   asTable = c(TRUE, TRUE, FALSE), withFilter = c(TRUE, FALSE, FALSE)
> ##D )
> ## End(Not run)
> 
> # specify column widths for multiple sheets
> ## Not run: 
> ##D write.xlsx(l, "writeList2.xlsx", colWidths = 20)
> ##D write.xlsx(l, "writeList2.xlsx", colWidths = list(100, 200, 300))
> ##D write.xlsx(l, "writeList2.xlsx", colWidths = list(rep(10, 5), rep(8, 11), rep(5, 5)))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("writeComment")
> ### * writeComment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeComment
> ### Title: write a cell comment
> ### Aliases: writeComment
> 
> ### ** Examples
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> 
> c1 <- createComment(comment = "this is comment")
> writeComment(wb, 1, col = "B", row = 10, comment = c1)
> 
> s1 <- createStyle(fontSize = 12, fontColour = "red", textDecoration = c("BOLD"))
> s2 <- createStyle(fontSize = 9, fontColour = "black")
> 
> c2 <- createComment(comment = c("This Part Bold red\n\n", "This part black"), style = c(s1, s2))
> c2
Author: 
Text:
 This Part Bold red

This part black

Style:
Font size: 12
Font colour: #FF0000
Font decoration: BOLD


Font size: 9
Font colour: #000000


> 
> writeComment(wb, 1, col = 6, row = 3, comment = c2)
> ## Not run: 
> ##D saveWorkbook(wb, file = "writeCommentExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("writeData")
> ### * writeData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeData
> ### Title: Write an object to a worksheet
> ### Aliases: writeData
> 
> ### ** Examples
> 
> 
> ## See formatting vignette for further examples.
> 
> ## Options for default styling (These are the defaults)
> options("openxlsx.borderColour" = "black")
> options("openxlsx.borderStyle" = "thin")
> options("openxlsx.dateFormat" = "mm/dd/yyyy")
> options("openxlsx.datetimeFormat" = "yyyy-mm-dd hh:mm:ss")
> options("openxlsx.numFmt" = NULL)
> 
> ## Change the default border colour to #4F81BD
> options("openxlsx.borderColour" = "#4F81BD")
> 
> 
> #####################################################################################
> ## Create Workbook object and add worksheets
> wb <- createWorkbook()
> 
> ## Add worksheets
> addWorksheet(wb, "Cars")
> addWorksheet(wb, "Formula")
> 
> 
> x <- mtcars[1:6, ]
> writeData(wb, "Cars", x, startCol = 2, startRow = 3, rowNames = TRUE)
> 
> #####################################################################################
> ## Bordering
> 
> writeData(wb, "Cars", x,
+   rowNames = TRUE, startCol = "O", startRow = 3,
+   borders = "surrounding", borderColour = "black"
+ ) ## black border
> 
> writeData(wb, "Cars", x,
+   rowNames = TRUE,
+   startCol = 2, startRow = 12, borders = "columns"
+ )
> 
> writeData(wb, "Cars", x,
+   rowNames = TRUE,
+   startCol = "O", startRow = 12, borders = "rows"
+ )
> 
> 
> #####################################################################################
> ## Header Styles
> 
> hs1 <- createStyle(
+   fgFill = "#DCE6F1", halign = "CENTER", textDecoration = "italic",
+   border = "Bottom"
+ )
> 
> writeData(wb, "Cars", x,
+   colNames = TRUE, rowNames = TRUE, startCol = "B",
+   startRow = 23, borders = "rows", headerStyle = hs1, borderStyle = "dashed"
+ )
> 
> 
> hs2 <- createStyle(
+   fontColour = "#ffffff", fgFill = "#4F80BD",
+   halign = "center", valign = "center", textDecoration = "bold",
+   border = "TopBottomLeftRight"
+ )
> 
> writeData(wb, "Cars", x,
+   colNames = TRUE, rowNames = TRUE,
+   startCol = "O", startRow = 23, borders = "columns", headerStyle = hs2
+ )
> 
> 
> 
> 
> #####################################################################################
> ## Hyperlinks
> ## - vectors/columns with class 'hyperlink' are written as hyperlinks'
> 
> v <- rep("https://CRAN.R-project.org/", 4)
> names(v) <- paste0("Hyperlink", 1:4) # Optional: names will be used as display text
> class(v) <- "hyperlink"
> writeData(wb, "Cars", x = v, xy = c("B", 32))
> 
> 
> #####################################################################################
> ## Formulas
> ## - vectors/columns with class 'formula' are written as formulas'
> 
> df <- data.frame(
+   x = 1:3, y = 1:3,
+   z = paste0(paste0("A", 1:3 + 1L), paste0("B", 1:3 + 1L), sep = " + "),
+   stringsAsFactors = FALSE
+ )
> 
> class(df$z) <- c(class(df$z), "formula")
> 
> writeData(wb, sheet = "Formula", x = df)
> 
> 
> #####################################################################################
> ## Save workbook
> ## Open in excel without saving file: openXL(wb)
> ## Not run: 
> ##D saveWorkbook(wb, "writeDataExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("writeDataTable")
> ### * writeDataTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeDataTable
> ### Title: Write to a worksheet as an Excel table
> ### Aliases: writeDataTable
> 
> ### ** Examples
> 
> ## see package vignettes for further examples.
> 
> #####################################################################################
> ## Create Workbook object and add worksheets
> wb <- createWorkbook()
> addWorksheet(wb, "S1")
> addWorksheet(wb, "S2")
> addWorksheet(wb, "S3")
> 
> 
> #####################################################################################
> ## -- write data.frame as an Excel table with column filters
> ## -- default table style is "TableStyleMedium2"
> 
> writeDataTable(wb, "S1", x = iris)
> 
> writeDataTable(wb, "S2",
+   x = mtcars, xy = c("B", 3), rowNames = TRUE,
+   tableStyle = "TableStyleLight9"
+ )
> 
> df <- data.frame(
+   "Date" = Sys.Date() - 0:19,
+   "T" = TRUE, "F" = FALSE,
+   "Time" = Sys.time() - 0:19 * 60 * 60,
+   "Cash" = paste("$", 1:20), "Cash2" = 31:50,
+   "hLink" = "https://CRAN.R-project.org/",
+   "Percentage" = seq(0, 1, length.out = 20),
+   "TinyNumbers" = runif(20) / 1E9, stringsAsFactors = FALSE
+ )
> 
> ## openxlsx will apply default Excel styling for these classes
> class(df$Cash) <- c(class(df$Cash), "currency")
> class(df$Cash2) <- c(class(df$Cash2), "accounting")
> class(df$hLink) <- "hyperlink"
> class(df$Percentage) <- c(class(df$Percentage), "percentage")
> class(df$TinyNumbers) <- c(class(df$TinyNumbers), "scientific")
> 
> writeDataTable(wb, "S3", x = df, startRow = 4, rowNames = TRUE, tableStyle = "TableStyleMedium9")
> 
> #####################################################################################
> ## Additional Header Styling and remove column filters
> 
> writeDataTable(wb,
+   sheet = 1, x = iris, startCol = 7, headerStyle = createStyle(textRotation = 45),
+   withFilter = FALSE
+ )
> 
> 
> #####################################################################################
> ## Save workbook
> ## Open in excel without saving file: openXL(wb)
> ## Not run: 
> ##D saveWorkbook(wb, "writeDataTableExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> 
> #####################################################################################
> ## Pre-defined table styles gallery
> 
> wb <- createWorkbook(paste0("tableStylesGallery.xlsx"))
> addWorksheet(wb, "Style Samples")
> for (i in 1:21) {
+   style <- paste0("TableStyleLight", i)
+   writeDataTable(wb,
+     x = data.frame(style), sheet = 1,
+     tableStyle = style, startRow = 1, startCol = i * 3 - 2
+   )
+ }
> 
> for (i in 1:28) {
+   style <- paste0("TableStyleMedium", i)
+   writeDataTable(wb,
+     x = data.frame(style), sheet = 1,
+     tableStyle = style, startRow = 4, startCol = i * 3 - 2
+   )
+ }
> 
> for (i in 1:11) {
+   style <- paste0("TableStyleDark", i)
+   writeDataTable(wb,
+     x = data.frame(style), sheet = 1,
+     tableStyle = style, startRow = 7, startCol = i * 3 - 2
+   )
+ }
> 
> ## openXL(wb)
> ## Not run: 
> ##D saveWorkbook(wb, file = "tableStylesGallery.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("writeFormula")
> ### * writeFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeFormula
> ### Title: Write a character vector as an Excel Formula
> ### Aliases: writeFormula
> 
> ### ** Examples
> 
> 
> ## There are 3 ways to write a formula
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet 1")
> writeData(wb, "Sheet 1", x = iris)
> 
> ## SEE int2col() to convert int to Excel column label
> 
> ## 1. -  As a character vector using writeFormula
> 
> v <- c("SUM(A2:A151)", "AVERAGE(B2:B151)") ## skip header row
> writeFormula(wb, sheet = 1, x = v, startCol = 10, startRow = 2)
> writeFormula(wb, 1, x = "A2 + B2", startCol = 10, startRow = 10)
> 
> 
> ## 2. - As a data.frame column with class "formula" using writeData
> 
> df <- data.frame(
+   x = 1:3,
+   y = 1:3,
+   z = paste(paste0("A", 1:3 + 1L), paste0("B", 1:3 + 1L), sep = " + "),
+   z2 = sprintf("ADDRESS(1,%s)", 1:3),
+   stringsAsFactors = FALSE
+ )
> 
> class(df$z) <- c(class(df$z), "formula")
> class(df$z2) <- c(class(df$z2), "formula")
> 
> addWorksheet(wb, "Sheet 2")
> writeData(wb, sheet = 2, x = df)
> 
> 
> 
> ## 3. - As a vector with class "formula" using writeData
> 
> v2 <- c("SUM(A2:A4)", "AVERAGE(B2:B4)", "MEDIAN(C2:C4)")
> class(v2) <- c(class(v2), "formula")
> 
> writeData(wb, sheet = 2, x = v2, startCol = 10, startRow = 2)
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "writeFormulaExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> ## 4. - Writing internal hyperlinks
> 
> wb <- createWorkbook()
> addWorksheet(wb, "Sheet1")
> addWorksheet(wb, "Sheet2")
> writeFormula(wb, "Sheet1", x = '=HYPERLINK("#Sheet2!B3", "Text to Display - Link to Sheet2")')
> 
> ## Save workbook
> ## Not run: 
> ##D saveWorkbook(wb, "writeFormulaHyperlinkExample.xlsx", overwrite = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.717 0.176 3.895 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
