
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "visNetwork"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('visNetwork')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("addFontAwesome")
> ### * addFontAwesome
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addFontAwesome
> ### Title: Use fontAwesome icons in visNetwork 'graph'
> ### Aliases: addFontAwesome
> 
> ### ** Examples
> 
> 
> # use fontAwesome icons using groups or nodes options 
> # font-awesome is not part of dependencies. use addFontAwesome() if needed.
> # Versions in package (and compatible with vis.js) : 4.7.0 & 5.13.0
> # https://fontawesome.com/v4.7.0/
> # https://fontawesome.com/
> # cheatsheet available in package: 
> # system.file("fontAwesome/Font_Awesome_Cheatsheet_4_7_0.pdf", package = "visNetwork")
> 
> # definition in groups
> nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> edges <- data.frame(from = c(1,2), to = c(2,3))
> 
> visNetwork(nodes, edges) %>%
+   visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
+   visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
+   addFontAwesome(version = "4.7.0")
> 
> # use 5.13.0
> # set face = "'Font Awesome 5 Free'"
> # weight is automatically set to "bold"
> nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> edges <- data.frame(from = c(1,2), to = c(2,3))
> 
> visNetwork(nodes, edges) %>%
+   visGroups(groupname = "A", shape = "icon", 
+       icon = list(face = "'Font Awesome 5 Free'", code = "f0c0", size = 75)) %>%
+   visGroups(groupname = "B", shape = "icon", 
+       icon = list(face = "'Font Awesome 5 Free'", code = "f007", color = "red")) %>%
+   addFontAwesome(version = "5.13.0")
>   
> # definition in nodes
> nodes <- data.frame(id = 1:3, shape = "icon", icon.face = 'FontAwesome', 
+    icon.code = "f0c0")
> edges <- data.frame(from = c(1,2), to = c(1,3))
> 
> visNetwork(nodes, edges) %>%
+   addFontAwesome()
> 
> # using shinydashboard : change name if needed
> visNetwork(nodes, edges) %>%
+   addFontAwesome(name = "font-awesome-visNetwork")
>   
> 
> 
> 
> cleanEx()
> nameEx("addIonicons")
> ### * addIonicons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addIonicons
> ### Title: Use Ionicons in visNetwork 'graph'
> ### Aliases: addIonicons
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> edges <- data.frame(from = c(1,2), to = c(2,3))
> 
> visNetwork(nodes, edges) %>%
+   visGroups(groupname = "A", shape = "icon", 
+    icon = list(face ='Ionicons', code = "f101", size = 75)) %>%
+   visGroups(groupname = "B", shape = "icon", 
+    icon = list(face ='Ionicons', code = "f100", color = "red")) %>%
+   addIonicons()
> 
> 
> 
> 
> cleanEx()
> nameEx("visClusteringByColor")
> ### * visClusteringByColor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visClusteringByColor
> ### Title: Network visualization clustering options - by color
> ### Aliases: visClusteringByColor
> 
> ### ** Examples
> 
> 
> set.seed(124)
> nodes <- data.frame(id = 1:10, color = c(rep("blue", 6), rep("red", 3), rep("green", 1)))
> edges <- data.frame(from = round(runif(6)*10), to = round(runif(6)*10))
> 
> visNetwork(nodes, edges) %>%
+  visClusteringByColor(colors = c("blue"))
>  
>  nodes <- data.frame(id = 1:10, label = paste("Label", 1:10), 
+    group = sample(c("A", "B"), 10, replace = TRUE))
>  edges <- data.frame(from = c(2,5,10), to = c(1,2,10))
> 
>  visNetwork(nodes, edges) %>%
+    visGroups(groupname = "A", color = "red", shape = "square") %>%
+    visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
+    visClusteringByColor(colors = c("red"), label = "With color ") %>%
+    visClusteringByGroup(groups = c("B"), label = "Group : ") %>%
+    visLegend()
>    
>  visNetwork(nodes, edges) %>%
+    visGroups(groupname = "A", color = "red", shape = "triangle") %>%
+    visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
+    visClusteringByGroup(groups = c("A","B")) %>%
+    visLegend()
> 
> 
> 
> cleanEx()
> nameEx("visClusteringByConnection")
> ### * visClusteringByConnection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visClusteringByConnection
> ### Title: Network visualization clustering options - by node id
> ### Aliases: visClusteringByConnection
> 
> ### ** Examples
> 
> 
> set.seed(124)
> nodes <- data.frame(id = 1:10, color = c(rep("blue", 6), rep("red", 3), rep("green", 1)))
> edges <- data.frame(from = round(runif(6)*10), to = round(runif(6)*10))
> 
>  visNetwork(nodes, edges) %>%
+    visClusteringByConnection(nodes = 9)
>      
> 
> 
> 
> cleanEx()
> nameEx("visClusteringByGroup")
> ### * visClusteringByGroup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visClusteringByGroup
> ### Title: Network visualization clustering options - by group
> ### Aliases: visClusteringByGroup
> 
> ### ** Examples
> 
> 
>  
>  nodes <- data.frame(id = 1:10, label = paste("Label", 1:10), 
+    group = sample(c("A", "B"), 10, replace = TRUE))
>  edges <- data.frame(from = c(2,5,10), to = c(1,2,10))
> 
>  visNetwork(nodes, edges) %>%
+    visGroups(groupname = "A", color = "red", shape = "database") %>%
+    visGroups(groupname = "B", color = "yellow", shape = "triangle") %>%
+    visClusteringByGroup(groups = c("B"), label = "Group : ", 
+      shape = "ellipse", color = "blue", force = TRUE) %>%
+    visLegend()
>  
> 
> 
> 
> cleanEx()
> nameEx("visClusteringByHubsize")
> ### * visClusteringByHubsize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visClusteringByHubsize
> ### Title: Network visualization clustering options - by hubsize
> ### Aliases: visClusteringByHubsize
> 
> ### ** Examples
> 
> 
> set.seed(124)
> nodes <- data.frame(id = 1:10, color = c(rep("blue", 6), rep("red", 3), rep("green", 1)))
> edges <- data.frame(from = round(runif(6)*10), to = round(runif(6)*10))
> 
> visNetwork(nodes, edges) %>%
+  visClusteringByHubsize()
>  
> visNetwork(nodes, edges) %>%
+  visClusteringByHubsize(size = 2)
>  
> 
> 
> 
> cleanEx()
> nameEx("visClusteringOutliers")
> ### * visClusteringOutliers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visClusteringOutliers
> ### Title: Network visualization clustering options - outliers
> ### Aliases: visClusteringOutliers
> 
> ### ** Examples
> 
>  
> nodes <- data.frame(id = 1:10)
> edges <- data.frame(from = c(1,1,10,2,6,7,8,9,10), 
+                     to = c(2,3,4,5,2,5,6,7,9))
> 
> visNetwork(nodes, edges) %>%
+  visClusteringOutliers(1)
> 
>  
> 
> 
> 
> cleanEx()
> nameEx("visConfigure")
> ### * visConfigure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visConfigure
> ### Title: Network visualization configure options
> ### Aliases: visConfigure
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D nodes <- data.frame(id = 1:3, title = paste0("<p>", 1:3,"<br> tooltip</p>"))
> ##D edges <- data.frame(from = c(1,2), to = c(1,3))
> ##D 
> ##D visNetwork(nodes, edges) %>%
> ##D  visConfigure(enabled = TRUE, filter = "interaction")
> ##D  
> ##D # using visNetworkEditor
> ##D network <- visNetwork(nodes, edges)
> ##D custom_network <- visNetworkEditor(object = network)
> ##D custom_network
> ##D 
> ##D custom_network <- visNetworkEditor(object = network, filter = "nodes,edges")
> ##D custom_network
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visDocumentation")
> ### * visDocumentation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visDocumentation
> ### Title: View full documentation of vis.js on network
> ### Aliases: visDocumentation
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D visDocumentation()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visEdges")
> ### * visEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visEdges
> ### Title: Network visualization edges options
> ### Aliases: visEdges
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:3)
> edges <- data.frame(from = c(1,2), to = c(1,3))
> 
> # arrows
> visNetwork(nodes, edges) %>% visEdges(arrows = 'from')
> visNetwork(nodes, edges) %>% visEdges(arrows = 'to, from')
> 
> ## Not run: 
> ##D visNetwork(nodes, edges) %>% 
> ##D   visEdges(arrows = list(to = list(enabled = TRUE, 
> ##D      scaleFactor = 2, type = 'circle')))
> ##D 
> ##D # global smooth
> ##D visNetwork(nodes, edges) %>% visEdges(smooth = FALSE)
> ##D visNetwork(nodes, edges) %>% visEdges(smooth = list(enabled = TRUE, type = "diagonalCross"))
> ##D 
> ##D # individual smooth
> ##D edges <- data.frame(from = c(1,2), to = c(2,3))
> ##D edges$smooth.enabled <- c(TRUE, TRUE)
> ##D edges$smooth.type <- c("discrete", "curvedCW")
> ##D edges$smooth.roundness <- c(0.5, 1)
> ##D visNetwork(nodes, edges)
> ##D 
> ##D # width
> ##D visNetwork(nodes, edges) %>% visEdges(width = 10)
> ##D 
> ##D # color
> ##D visNetwork(nodes, edges) %>% visEdges(color = list(hover = "green")) %>%
> ##D  visInteraction(hover = TRUE)
> ##D visNetwork(nodes, edges) %>% visEdges(color = "red")
> ##D visNetwork(nodes, edges) %>% visEdges(color = list(color = "red", highlight = "yellow"))
> ##D 
> ##D # shadow
> ##D visNetwork(nodes, edges) %>% visEdges(shadow = TRUE)
> ##D visNetwork(nodes, edges) %>% visEdges(shadow = list(enabled = TRUE, size = 5))
> ##D 
> ##D # arrows
> ##D visNetwork(nodes, edges) %>%
> ##D    visEdges(arrows = list(to = list(enabled = TRUE, type = "bar")))
> ##D    
> ##D # dashes
> ##D # globally
> ##D visNetwork(nodes, edges) %>% visEdges(dashes = TRUE)
> ##D     
> ##D # set configuration individualy 
> ##D # have to use specific notation...
> ##D nodes <- data.frame(id = 1:3)
> ##D edges <- data.frame(from = c(1,2), to = c(1,3),
> ##D      dashes = c("[10,10,2,2]", "false"))
> ##D 
> ##D visNetwork(nodes, edges)
> ##D 
> ##D edges <- data.frame(from = c(1,2), to = c(1,3),
> ##D      dashes = c("[10,10,2,2]", "[2]"))
> ##D 
> ##D visNetwork(nodes, edges)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("visEvents")
> ### * visEvents
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visEvents
> ### Title: Network visualization events
> ### Aliases: visEvents
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:3)
> edges <- data.frame(from = c(1,2), to = c(1,3))
> 
> visNetwork(nodes, edges) %>%
+  visEvents(select = "function(properties) {
+      alert('selected nodes: ' + properties.nodes);}", 
+      dragEnd = "function(properties) {
+      alert('finish to drag');}")
> 
> # set one 
> visNetwork(nodes, edges) %>%
+  visEvents(type = "once", select = "function() {
+      alert('first selection');}") %>%
+  visEvents(select = "function(properties) {
+      alert('selected nodes: ' + properties.nodes);}", 
+      dragEnd = "function(properties) {
+      alert('finish to drag');}")
>       
> # use this to get the network
> visNetwork(nodes, edges) %>%
+   visEvents(type = "once", startStabilizing = "function() {
+             this.moveTo({scale:0.1})}") %>%
+   visPhysics(stabilization = FALSE)
> 
> # shift+click, .....
> visNetwork(nodes, edges) %>%
+     visEvents(click = "function(e) {
+             if(e.event.srcEvent.shiftKey){
+               alert('shift+click event')
+             } else if(e.event.srcEvent.ctrlKey){
+               alert('ctrl+click event')
+             }else if(e.event.srcEvent.altKey){
+               alert('alt+click event')
+             } else {
+               alert('click event')
+             }
+           }")
>           
> 
> 
> 
> cleanEx()
> nameEx("visExport")
> ### * visExport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visExport
> ### Title: Network export configuration
> ### Aliases: visExport
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> ##D edges <- data.frame(from = c(1,2), to = c(2,3))
> ##D 
> ##D visNetwork(nodes, edges) %>%
> ##D  visGroups(groupname = "A", color = "red") %>%
> ##D  visGroups(groupname = "B", color = "lightblue") %>%
> ##D  visLegend() %>% visExport() 
> ##D  
> ##D visNetwork(nodes, edges) %>%
> ##D  visGroups(groupname = "A", color = "red") %>%
> ##D  visGroups(groupname = "B", color = "lightblue") %>%
> ##D  visLegend() %>% visExport(type = "jpeg", name = "export-network", 
> ##D    float = "left", label = "Save network", background = "purple", style= "") 
> ##D  
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("visFit")
> ### * visFit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visFit
> ### Title: Network visualization fit method
> ### Aliases: visFit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visFocus")
> ### * visFocus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visFocus
> ### Title: Network visualization focus method
> ### Aliases: visFocus
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetBoundingBox")
> ### * visGetBoundingBox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetBoundingBox
> ### Title: Method getBoundingBox, with shiny only.
> ### Aliases: visGetBoundingBox
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetConnectedEdges")
> ### * visGetConnectedEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetConnectedEdges
> ### Title: Method getConnectedEdges, with shiny only.
> ### Aliases: visGetConnectedEdges
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetConnectedNodes")
> ### * visGetConnectedNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetConnectedNodes
> ### Title: Method getConnectedNodes, with shiny only.
> ### Aliases: visGetConnectedNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetEdges")
> ### * visGetEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetEdges
> ### Title: Function to get edges data, with shiny only.
> ### Aliases: visGetEdges
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetNodes")
> ### * visGetNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetNodes
> ### Title: Function to get nodes data, with shiny only.
> ### Aliases: visGetNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetPositions")
> ### * visGetPositions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetPositions
> ### Title: Network visualization getPositions method
> ### Aliases: visGetPositions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetScale")
> ### * visGetScale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetScale
> ### Title: Function to get current scale of network, with shiny only.
> ### Aliases: visGetScale
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetSelectedEdges")
> ### * visGetSelectedEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetSelectedEdges
> ### Title: Function to get selected edges, with shiny only.
> ### Aliases: visGetSelectedEdges
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetSelectedNodes")
> ### * visGetSelectedNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetSelectedNodes
> ### Title: Function to get selected nodes, with shiny only.
> ### Aliases: visGetSelectedNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetSelection")
> ### * visGetSelection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetSelection
> ### Title: Function to get selected edges & nodes, with shiny only.
> ### Aliases: visGetSelection
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGetViewPosition")
> ### * visGetViewPosition
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGetViewPosition
> ### Title: Function to get current view position, with shiny only.
> ### Aliases: visGetViewPosition
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visGroups")
> ### * visGroups
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visGroups
> ### Title: Network visualization groups options
> ### Aliases: visGroups
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:10, label = paste("Label", 1:10), 
+  group = sample(c("A", "B"), 10, replace = TRUE))
>  edges <- data.frame(from = c(2,5,10), to = c(1,2,10))
> 
> visNetwork(nodes, edges) %>%
+  visLegend() %>%
+  visGroups(groupname = "A", color = "red", shape = "database") %>%
+  visGroups(groupname = "B", color = "yellow", shape = "triangle")
>  
> 
> 
> 
> cleanEx()
> nameEx("visHclust")
> ### * visHclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visHclust
> ### Title: Visualize Hierarchical cluster analysis.
> ### Aliases: visHclust visHclust.default visHclust.data.frame
> ###   visHclust.dist visHclust.hclust
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D #--------------
> ##D # data.frame
> ##D #--------------
> ##D 
> ##D # default call on data.frame
> ##D visHclust(iris, cutree = 3, colorEdges = "red")
> ##D 
> ##D # update some parameters
> ##D visHclust(iris, cutree = 3, tooltipColumns = c(1, 5),
> ##D   colorGroups = c("red", "blue", "green"), horizontal = TRUE)
> ##D   
> ##D # no graphics on tooltip
> ##D visHclust(iris, cutree = 3, tooltipColumns = NULL,
> ##D   main = "Hclust on iris")
> ##D   
> ##D # Title(s)
> ##D visHclust(iris, cutree = 3,  main ="My_title",
> ##D           submain = "My_sub_title", footer = "My_footer")
> ##D           
> ##D # Export
> ##D visHclust(iris, cutree = 3, export = TRUE)
> ##D 
> ##D 
> ##D # update group / individual nodes
> ##D visHclust(iris, cutree = 8) %>% 
> ##D  visGroups(groupname = "group", color ="black", 
> ##D    shape = "triangleDown", size = 75)  %>% 
> ##D  visGroups(groupname = "individual", 
> ##D    font = list(size = 150),
> ##D    color = list(background = "white", border = "purple", 
> ##D             highlight = "#e2e9e9", hover = "orange"), shape = "box") 
> ##D 
> ##D #--------------
> ##D # dist
> ##D #--------------
> ##D 
> ##D # without adding data & info in tooltip
> ##D visHclust(dist(iris[,1:4]), cutree = 3)
> ##D   
> ##D # adding data & info in tooltip
> ##D visHclust(dist(iris[,1:4]), cutree = 3, data = iris)
> ##D 
> ##D #--------------
> ##D # hclust
> ##D #--------------
> ##D 
> ##D # without adding data & info in tooltip
> ##D visHclust(hclust(dist(iris[,1:4])), cutree = 3)
> ##D   
> ##D # adding data & info in tooltip
> ##D visHclust(hclust(dist(iris[,1:4])), cutree = 3, data = iris) 
> ##D     
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visHierarchicalLayout")
> ### * visHierarchicalLayout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visHierarchicalLayout
> ### Title: Network visualization Hierarchical layout options
> ### Aliases: visHierarchicalLayout
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:10)
> edges <- data.frame(from = round(runif(8)*10), to = round(runif(8)*10))
> 
> visNetwork(nodes, edges) %>%
+  visHierarchicalLayout()
> 
> visNetwork(nodes, edges) %>%
+  visHierarchicalLayout(direction = "LR")
>  
> 
> 
> 
> cleanEx()
> nameEx("visIgraphLayout")
> ### * visIgraphLayout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visIgraphLayout
> ### Title: Use a igraph layout for compute coordinates & fast rendering
> ### Aliases: visIgraphLayout
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D nnodes <- 200
> ##D nnedges <- 400
> ##D 
> ##D nodes <- data.frame(id = 1:nnodes)
> ##D edges <- data.frame(from = sample(1:nnodes, nnedges, replace = T), 
> ##D                    to = sample(1:nnodes, nnedges, replace = T))
> ##D 
> ##D # with default layout
> ##D visNetwork(nodes, edges) %>% 
> ##D  visIgraphLayout()
> ##D 
> ##D # use full space
> ##D visNetwork(nodes, edges) %>% 
> ##D  visIgraphLayout(type = "full")
> ##D 
> ##D # in circle ?
> ##D visNetwork(nodes, edges) %>% 
> ##D  visIgraphLayout(layout = "layout_in_circle") %>%
> ##D  visOptions(highlightNearest = list(enabled = T, hover = T), 
> ##D    nodesIdSelection = T)
> ##D  
> ##D # keep physics with smooth curves ?
> ##D visNetwork(nodes, edges) %>% 
> ##D  visIgraphLayout(physics = TRUE, smooth = TRUE)
> ##D 
> ##D # fix randomSeed to keep position
> ##D visNetwork(nodes, edges) %>% 
> ##D  visIgraphLayout(randomSeed = 123)
> ##D  
> ##D visNetwork(nodes, edges) %>% 
> ##D  visIgraphLayout(randomSeed = 123)
> ##D 
> ##D # layout_with_sugiyama
> ##D nodes <- data.frame(id = 1:5)
> ##D edges <- data.frame(from = c(1, 2, 2, 4), to = c(2, 3, 4, 5))
> ##D 
> ##D visNetwork(nodes, edges) %>%
> ##D  visIgraphLayout(layout = "layout_with_sugiyama", layers = c(1, 2, 3, 3, 4))
> ##D 
> ##D visNetwork(nodes, edges) %>%
> ##D  visIgraphLayout(layout = "layout_with_sugiyama")
> ##D  
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visInteraction")
> ### * visInteraction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visInteraction
> ### Title: Network visualization interaction
> ### Aliases: visInteraction
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:10, 
+  title = '<a target="_blank" href="https://github.com/datastorm-open/visNetwork">github</a>')
> edges <- data.frame(from = round(runif(8)*10), to = round(runif(8)*10))
> 
> # custom tooltip
> 
> # default value : 'position: fixed;visibility:hidden;padding: 5px;font-family: verdana;
> # font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;*
> # -webkit-border-radius: 3px;border-radius: 3px; border: 1px solid #808074;
> # box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);max-width:400px;word-break: break-all'
> 
> visNetwork(nodes, edges) %>%
+ visInteraction(tooltipStyle = 'position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;
+  font-family: cursive;font-size:18px;font-color:purple;background-color: red;')
> 
> nodes <- data.frame(id = 1:3)
> edges <- data.frame(from = c(1,2), to = c(1,3))
> 
> # frozen network
> visNetwork(nodes, edges) %>%
+  visInteraction(dragNodes = FALSE, dragView = FALSE, zoomView = FALSE)
> 
> visNetwork(nodes, edges) %>%
+  visInteraction(hideEdgesOnDrag = TRUE)
>  
> visNetwork(nodes, edges) %>%
+  visInteraction(hover = TRUE)
>  
> # navigation button  
> visNetwork(nodes, edges) %>%
+  visInteraction(navigationButtons = TRUE)
>  
> visNetwork(nodes, edges) %>%
+  visInteraction(selectConnectedEdges = FALSE)
>  
> visNetwork(nodes, edges) %>%
+  visInteraction(multiselect = TRUE)
>  
> visNetwork(nodes, edges) %>%
+   visInteraction(keyboard = TRUE)
>  
> 
> 
> 
> cleanEx()
> nameEx("visLayout")
> ### * visLayout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visLayout
> ### Title: Network visualization layout options
> ### Aliases: visLayout
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:10)
> edges <- data.frame(from = round(runif(8)*10), to = round(runif(8)*10))
> 
> # fix seed, so you retrieve same network each time...!
> visNetwork(nodes, edges) %>%
+  visLayout(randomSeed = 123) 
> 
> visNetwork(nodes, edges) %>%
+  visLayout(randomSeed = 123)   
>  
> # hierarchical
> visNetwork(nodes, edges) %>%
+  visLayout(hierarchical = TRUE) 
>  
> visNetwork(nodes, edges) %>%
+  visHierarchicalLayout(direction = "LR")
> 
> 
> 
> 
> cleanEx()
> nameEx("visLegend")
> ### * visLegend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visLegend
> ### Title: Add a legend on a visNetwork object
> ### Aliases: visLegend
> 
> ### ** Examples
> 
> 
> # minimal example
> nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> edges <- data.frame(from = c(1,2), to = c(2,3))
> 
> # default, on group
> visNetwork(nodes, edges) %>%
+   visGroups(groupname = "A", color = "red") %>%
+   visGroups(groupname = "B", color = "lightblue") %>%
+   visLegend()
> 
> ## Not run: 
> ##D # on group, adding options
> ##D visNetwork(nodes, edges) %>%
> ##D   visGroups(groupname = "A", color = "red") %>%
> ##D   visGroups(groupname = "B", color = "lightblue") %>%
> ##D   visLegend(width = 0.1, position = "right", main = "Legend")
> ##D   
> ##D # css on main   
> ##D visNetwork(nodes, edges) %>%
> ##D   visGroups(groupname = "A", color = "red") %>%
> ##D   visGroups(groupname = "B", color = "lightblue") %>%
> ##D   visLegend(main = list(text = "Custom Legend",
> ##D  style = "font-family:Comic Sans MS;color:#ff0000;font-size:12px;text-align:center;"))
> ##D    
> ##D # passing custom nodes and/or edges
> ##D lnodes <- data.frame(label = c("Group A", "Group B"), 
> ##D  shape = c( "ellipse"), color = c("red", "lightblue"),
> ##D  title = "Informations") 
> ##D    
> ##D ledges <- data.frame(color = c("lightblue", "red"), 
> ##D  label = c("reverse", "depends"), arrows =c("to", "from"), 
> ##D  font.align = "top") 
> ##D  
> ##D visNetwork(nodes, edges) %>%
> ##D   visGroups(groupname = "A", color = "red") %>%
> ##D   visGroups(groupname = "B", color = "lightblue") %>%
> ##D   visLegend(addNodes = lnodes, addEdges = ledges, useGroups = FALSE)
> ##D    
> ##D # divide in columns
> ##D visNetwork(nodes, edges) %>%
> ##D   visGroups(groupname = "A", color = "red") %>%
> ##D   visGroups(groupname = "B", color = "lightblue") %>%
> ##D   visLegend(addNodes = lnodes, useGroups = TRUE, ncol = 2)
> ##D   
> ##D # for more complex option, you can use a list(of list...)
> ##D # or a data.frame with specific notaion
> ##D 
> ##D nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> ##D edges <- data.frame(from = c(1,2), to = c(2,3))
> ##D 
> ##D # using a list
> ##D visNetwork(nodes, edges) %>%
> ##D  visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
> ##D  visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
> ##D  addFontAwesome() %>%
> ##D  visLegend(addNodes = list(
> ##D   list(label = "Group", shape = "icon", icon = list(code = "f0c0", size = 25)),
> ##D   list(label = "User", shape = "icon", icon = list(code = "f007", size = 50, color = "red"))
> ##D  ),
> ##D  addEdges = data.frame(label = "link"), useGroups = FALSE)   
> ##D  
> ##D # using a data.frame
> ##D addNodes <- data.frame(label = c("Group", "User"), shape = "icon",
> ##D  icon.code = c("f0c0", "f007"), icon.size = c(25, 50), icon.color = c(NA, "red"))
> ##D  
> ##D visNetwork(nodes, edges) %>%
> ##D  visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
> ##D  visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
> ##D  addFontAwesome() %>%
> ##D  visLegend(addNodes = addNodes,
> ##D    addEdges = data.frame(label = "link"), useGroups = FALSE)   
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visMoveNode")
> ### * visMoveNode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visMoveNode
> ### Title: Network visualization moveNode method
> ### Aliases: visMoveNode
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visNearestNodes")
> ### * visNearestNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNearestNodes
> ### Title: Function to nearest nodes of a target node, with shiny only.
> ### Aliases: visNearestNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visNetwork-collapse")
> ### * visNetwork-collapse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetwork-collapse
> ### Title: Network visualization collapse / uncollapsed method
> ### Aliases: visNetwork-collapse visCollapse visUncollapse
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ##D # You can also disable / enabled the double-click event opening cluster
> ##D visNetworkProxy("network_id") %>% visEvents(type = "off", doubleClick = "networkOpenCluster")
> ##D visNetworkProxy("network_id") %>% visEvents(type = "on", doubleClick = "networkOpenCluster")
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visNetwork-igraph")
> ### * visNetwork-igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetwork-igraph
> ### Title: Render a visNetwork object from an igraph object
> ### Aliases: visNetwork-igraph visIgraph toVisNetworkData
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D require(igraph)
> ##D igraph_network <- graph.famous("Walther")
> ##D 
> ##D # get data and plot :
> ##D data <- toVisNetworkData(igraph_network)
> ##D visNetwork(nodes = data$nodes, edges = data$edges)
> ##D 
> ##D # or plot directly
> ##D visIgraph(igraph_network)
> ##D 
> ##D # change layout
> ##D visIgraph(igraph_network, layout = "layout_in_circle")
> ##D 
> ##D # options
> ##D visIgraph(igraph_network, layout = "layout_in_circle", 
> ##D  physics = FALSE, smooth = TRUE)
> ##D  
> ##D # passing some info  
> ##D g <- graph.star(8)
> ##D V(g)$color <- c("green", "grey")
> ##D V(g)$size <- 1:8 *5
> ##D V(g)$label <- LETTERS[1:8]
> ##D V(g)$label.cex = seq(1, 2,length.out = 8)
> ##D V(g)$label.color = "red"
> ##D visIgraph(g, layout = "layout.circle", idToLabel = FALSE)  
> ##D 
> ##D g <- graph.full(5)
> ##D E(g)$weight <- runif(ecount(g))
> ##D E(g)$width <- 1
> ##D E(g)$color <- "red"
> ##D E(g)[ weight < 0.5 ]$width <- 4
> ##D E(g)[ weight < 0.5 ]$color <- "green"
> ##D E(g)$label <- LETTERS[1:10]
> ##D E(g)$label.cex = seq(1, 2,length.out = 10)
> ##D E(g)$label.color = "red"
> ##D visIgraph(g)
> ##D 
> ##D # color vertices of the largest component
> ##D largest_comp <- function(graph) {
> ##D  cl <- components(graph)
> ##D  V(graph)[which.max(cl$csize) == cl$membership]
> ##D }
> ##D g <- sample_(gnp(100, 2/100),
> ##D            with_vertex_(size = 3, label = ""),
> ##D             with_graph_(layout = layout_with_fr)
> ##D )
> ##D giant_v <- largest_comp(g)
> ##D V(g)$color <- "blue"
> ##D V(g)[giant_v]$color <- "orange"
> ##D plot(g)
> ##D visIgraph(g)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("visNetwork-shiny")
> ### * visNetwork-shiny
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetwork-shiny
> ### Title: Shiny bindings for visNetwork
> ### Aliases: visNetwork-shiny visNetworkOutput renderVisNetwork
> ###   visNetworkProxy
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("visNetwork-treeModule")
> ### * visNetwork-treeModule
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetwork-treeModule
> ### Title: Module shiny for visualize and customize a 'rpart' tree
> ### Aliases: visNetwork-treeModule visTreeModuleServer visTreeModuleUI
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D require(rpart)
> ##D # simple module editor on rpart
> ##D data <- iris
> ##D shiny::shinyApp(ui = shiny::fluidPage(
> ##D visTreeModuleUI(id = "id1", rpartParams = FALSE, visTreeParams = FALSE)), 
> ##D  server = function(input, output, session) {
> ##D  shiny::callModule(visTreeModuleServer, "id1", data = shiny::reactive(rpart(data)))
> ##D })
> ##D 
> ##D # full module editor on rpart + data.frame for sparkline
> ##D data <- iris
> ##D shiny::shinyApp(ui = shiny::fluidPage(
> ##D  visTreeModuleUI(id = "id1", rpartParams = FALSE, visTreeParams = TRUE)), 
> ##D  server = function(input, output, session) {
> ##D  shiny::callModule(visTreeModuleServer, "id1", data = shiny::reactive(rpart(data)), 
> ##D  tooltip_data = data)
> ##D })
> ##D 
> ##D # module on data.frame
> ##D shiny::shinyApp(ui = shiny::fluidPage(visTreeModuleUI(id = "id1",
> ##D  rpartParams = TRUE)), 
> ##D  server = function(input, output, session) {
> ##D  shiny::callModule(visTreeModuleServer, "id1", data = shiny::reactive(data))
> ##D })
> ##D 
> ##D # multiple modules
> ##D shiny::shinyApp(ui = 
> ##D navbarPage("Menu",shiny::tabPanel(
> ##D   "tt1",shiny::fluidPage(visTreeModuleUI(id = "id1", 
> ##D   rpartParams = TRUE,
> ##D   visTreeParams = TRUE))
> ##D ),
> ##D shiny::tabPanel(
> ##D   "tt2",shiny::fluidPage(visTreeModuleUI(id = "id2", 
> ##D   rpartParams = FALSE,
> ##D   visTreeParams = FALSE)))
> ##D ), 
> ##D server = function(input, output, session) {
> ##D   shiny::callModule(visTreeModuleServer, "id1", data = shiny::reactive(iris))
> ##D   shiny::callModule(visTreeModuleServer, "id2", data = shiny::reactive(rpart(iris)))
> ##D })
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visNetwork")
> ### * visNetwork
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetwork
> ### Title: Network visualization
> ### Aliases: visNetwork
> 
> ### ** Examples
> 
> 
> # minimal example
> nodes <- data.frame(id = 1:3)
> edges <- data.frame(from = c(1,2), to = c(1,3))
> 
> visNetwork(nodes, edges)
> 
> ## Not run: 
> ##D # add a title
> ##D visNetwork(nodes, edges, main = "visNetwork minimal example")
> ##D visNetwork(nodes, edges, main = list(text = "visNetwork minimal example",
> ##D  style = "font-family:Comic Sans MS;color:#ff0000;font-size:15px;text-align:center;"))
> ##D  
> ##D # and subtitle and footer
> ##D visNetwork(nodes, edges, main = "visNetwork minimal example",
> ##D  submain = "For add a subtitle", footer = "Fig.1 minimal example")
> ##D  
> ##D # change background color
> ##D visNetwork(nodes, edges, background = "black")
> ##D 
> ##D # customization adding more variables (see visNodes and visEdges)
> ##D nodes <- data.frame(id = 1:10, 
> ##D                     label = paste("Node", 1:10),                                 # labels
> ##D                     group = c("GrA", "GrB"),                                     # groups 
> ##D                     value = 1:10,                                                # size 
> ##D                     shape = c("square", "triangle", "box", "circle", "dot", "star",
> ##D                               "ellipse", "database", "text", "diamond"),         # shape
> ##D                     title = paste0("<p><b>", 1:10,"</b><br>Node !</p>"),         # tooltip
> ##D                     color = c("darkred", "grey", "orange", "darkblue", "purple"),# color
> ##D                     shadow = c(FALSE, TRUE, FALSE, TRUE, TRUE))                  # shadow
> ##D 
> ##D edges <- data.frame(from = sample(1:10,8), to = sample(1:10, 8),
> ##D                     label = paste("Edge", 1:8),                                 # labels
> ##D                     length = c(100,500),                                        # length
> ##D                     arrows = c("to", "from", "middle", "middle;to"),            # arrows
> ##D                     dashes = c(TRUE, FALSE),                                    # dashes
> ##D                     title = paste("Edge", 1:8),                                 # tooltip
> ##D                     smooth = c(FALSE, TRUE),                                    # smooth
> ##D                     shadow = c(FALSE, TRUE, FALSE, TRUE))                       # shadow
> ##D 
> ##D visNetwork(nodes, edges) 
> ##D 
> ##D # use more complex configuration : 
> ##D # when it's a list, you can use data.frame with specific notation like this
> ##D nodes <- data.frame(id = 1:3, color.background = c("red", "blue", "green"), 
> ##D  color.highlight.background = c("red", NA, "red"), shadow.size = c(5, 10, 15))
> ##D edges <- data.frame(from = c(1,2), to = c(1,3),
> ##D  label = LETTERS[1:2], font.color =c ("red", "blue"), font.size = c(10,20))
> ##D 
> ##D visNetwork(nodes, edges)
> ##D 
> ##D # highlight nearest
> ##D nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
> ##D  group = sample(LETTERS[1:3], 15, replace = TRUE))
> ##D 
> ##D edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
> ##D  to = trunc(runif(15)*(15-1))+1)
> ##D  
> ##D visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE)
> ##D 
> ##D # try an id node selection 
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)
> ##D  
> ##D # or add a selection on another column
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = "group")
> ##D 
> ##D nodes$sel <- sample(c("sel1", "sel2"), nrow(nodes), replace = TRUE)
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = "sel")
> ##D    
> ##D # add legend
> ##D visNetwork(nodes, edges) %>% visLegend()
> ##D     
> ##D # directed network
> ##D visNetwork(nodes, edges) %>% 
> ##D  visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
> ##D 
> ##D # custom navigation
> ##D visNetwork(nodes, edges) %>%
> ##D  visInteraction(navigationButtons = TRUE)
> ##D 
> ##D # data Manipulation
> ##D visNetwork(nodes, edges) %>% visOptions(manipulation = TRUE)
> ##D 
> ##D # Hierarchical Layout
> ##D visNetwork(nodes, edges) %>% visHierarchicalLayout()
> ##D 
> ##D # freeze network
> ##D visNetwork(nodes, edges) %>%
> ##D  visInteraction(dragNodes = FALSE, dragView = FALSE, zoomView = FALSE)
> ##D 
> ##D # use fontAwesome icons using groups or nodes options 
> ##D # font-awesome is not part of dependencies. use addFontAwesome() if needed
> ##D 
> ##D nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> ##D edges <- data.frame(from = c(1,2), to = c(2,3))
> ##D 
> ##D visNetwork(nodes, edges) %>%
> ##D   visGroups(groupname = "A", shape = "icon", icon = list(code = "f0c0", size = 75)) %>%
> ##D   visGroups(groupname = "B", shape = "icon", icon = list(code = "f007", color = "red")) %>%
> ##D   addFontAwesome()
> ##D 
> ##D nodes <- data.frame(id = 1:3)
> ##D edges <- data.frame(from = c(1,2), to = c(1,3))
> ##D 
> ##D visNetwork(nodes, edges) %>%
> ##D   visNodes(shape = "icon", icon = list( face ='FontAwesome', code = "f0c0")) %>%
> ##D   addFontAwesome()
> ##D 
> ##D # Save a network
> ##D 
> ##D network <- visNetwork(nodes, edges) %>% 
> ##D  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE,
> ##D  manipulation = TRUE) %>% visLegend()
> ##D  
> ##D network %>% visSave(file = "network.html")
> ##D # same as
> ##D visSave(network, file = "network.html")
> ##D 
> ##D 
> ##D # Export as png/jpeg (shiny or browser only)
> ##D visNetwork(nodes, edges) %>% 
> ##D  visExport()
> ##D 
> ##D 
> ##D # DOT language
> ##D visNetwork(dot = 'dinetwork {1 -> 1 -> 2; 2 -> 3; 2 -- 4; 2 -> 1 }')
> ##D 
> ##D # gephi json file
> ##D 
> ##D visNetwork(gephi = 'WorldCup2014.json') %>% visPhysics(stabilization = FALSE,   barnesHut = list(
> ##D     gravitationalConstant = -10000,
> ##D     springConstant = 0.002,
> ##D     springLength = 150
> ##D   ))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visNetworkEditor-module")
> ### * visNetworkEditor-module
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetworkEditor-module
> ### Title: Module shiny for visualize and customize and get back a
> ###   'visNetwork' object. Using the javascript interface visConfigure.
> ### Aliases: visNetworkEditor-module visNetworkEditorServer
> ###   visNetworkEditorUI
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D nodes <- data.frame(id = 1:3, label = paste("Node", 1:3))
> ##D edges <- data.frame(from = c(1,2), to = c(1,3), label = paste("Edge", 1:2))
> ##D network <- visNetwork(nodes, edges)
> ##D 
> ##D shiny::shinyApp(ui = shiny::fluidPage(
> ##D  visNetworkEditorUI(id = "id1")), 
> ##D  server = function(input, output, session) {
> ##D  shiny::callModule(visNetworkEditorServer, "id1", object = shiny::reactive(network))
> ##D })
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("visNetworkEditor")
> ### * visNetworkEditor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNetworkEditor
> ### Title: Visualize, customize and get back a 'visNetwork' object. Need
> ###   shiny package
> ### Aliases: visNetworkEditor
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D nodes <- data.frame(id = 1:3, label = paste("Node", 1:3))
> ##D edges <- data.frame(from = c(1,2), to = c(1,3), label = paste("Edge", 1:2))
> ##D network <- visNetwork(nodes, edges)
> ##D 
> ##D custom_network <- visNetworkEditor(object = network)
> ##D custom_network
> ##D 
> ##D custom_network <- visNetworkEditor(object = network, filter = "nodes,edges")
> ##D custom_network
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visNodes")
> ### * visNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visNodes
> ### Title: Network visualization nodes options
> ### Aliases: visNodes
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D nodes <- data.frame(id = 1:3)
> ##D edges <- data.frame(from = c(1,2), to = c(1,3))
> ##D 
> ##D visNetwork(nodes, edges) %>% 
> ##D   visNodes(shape = "square", title = "I'm a node", borderWidth = 3)
> ##D 
> ##D visNetwork(nodes, edges) %>% 
> ##D   visNodes(color = list(hover = "green")) %>%
> ##D   visInteraction(hover = TRUE)
> ##D 
> ##D 
> ##D visNetwork(nodes, edges) %>% visNodes(color = "red")
> ##D 
> ##D visNetwork(nodes, edges) %>% 
> ##D   visNodes(color = list(background = "red", border = "blue", 
> ##D     highlight = "yellow"))
> ##D 
> ##D visNetwork(nodes, edges) %>% visNodes(shadow = TRUE)
> ##D 
> ##D visNetwork(nodes, edges) %>% visNodes(shadow = list(enabled = TRUE, size = 50))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visOptions")
> ### * visOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visOptions
> ### Title: Network visualization general options
> ### Aliases: visOptions
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D   
> ##D nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
> ##D  group = sample(LETTERS[1:3], 15, replace = TRUE))
> ##D 
> ##D edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
> ##D  to = trunc(runif(15)*(15-1))+1)
> ##D  
> ##D ###################  
> ##D # highlight nearest
> ##D ###################
> ##D 
> ##D visNetwork(nodes, edges) %>% visOptions(highlightNearest = TRUE)
> ##D visNetwork(nodes, edges) %>% visOptions(highlightNearest = list(enabled = TRUE, degree = 2))
> ##D 
> ##D # also when hover a node ?
> ##D visNetwork(nodes, edges) %>% visOptions(highlightNearest = list(enabled = TRUE, hover = TRUE))
> ##D 
> ##D # don't show nodes/edges
> ##D visNetwork(nodes, edges) %>% visOptions(highlightNearest = list(enabled = TRUE, 
> ##D  hover = TRUE, hideColor = 'rgba(200,200,200,0)'))
> ##D 
> ##D # Using hierarchical information
> ##D nodes = data.frame(id = 1:6, level = c(1, 2, 3, 3, 4, 2))
> ##D edges = data.frame(from = c(1, 2, 2, 4, 6), to = c(2, 3, 4, 5, 4))
> ##D 
> ##D visNetwork(nodes, edges) %>% visHierarchicalLayout() %>% visEdges(arrows = "to") %>% 
> ##D  visOptions(highlightNearest = list(enabled = TRUE, algorithm = "hierarchical"))
> ##D  
> ##D visNetwork(nodes, edges) %>% visHierarchicalLayout() %>% visEdges(arrows = "to") %>% 
> ##D  visOptions(highlightNearest = list(enabled = TRUE, algorithm = "hierarchical", 
> ##D    degree = list(from = 0, to = 2)))
> ##D    
> ##D ##########################
> ##D # nodesIdSelection
> ##D ##########################
> ##D  
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE)
> ##D 
> ##D # add a default selected node ?
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(highlightNearest = TRUE, 
> ##D  nodesIdSelection = list(enabled = TRUE, selected = "1"))
> ##D  
> ##D # subset on id values & don't use labels ?
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(highlightNearest = TRUE, 
> ##D  nodesIdSelection = list(enabled = TRUE, 
> ##D    selected = "2", values = c(2:10), useLabels = FALSE))
> ##D  
> ##D # some style
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(highlightNearest = TRUE, 
> ##D  nodesIdSelection = list(enabled = TRUE, style = 'width: 200px; height: 26px;
> ##D    background: #f8f8f8;
> ##D    color: darkblue;
> ##D    border:none;
> ##D    outline:none;'))   
> ##D  
> ##D ##########################
> ##D # collapse
> ##D ##########################
> ##D  
> ##D nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
> ##D  group = sample(LETTERS[1:3], 15, replace = TRUE))
> ##D 
> ##D edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
> ##D  to = trunc(runif(15)*(15-1))+1)
> ##D  
> ##D # keeping all parent node attributes  
> ##D visNetwork(nodes, edges) %>% visEdges(arrows = "to") %>%
> ##D  visOptions(collapse = TRUE)
> ##D 
> ##D # setting some properties  
> ##D visNetwork(nodes, edges) %>% visEdges(arrows = "to") %>%
> ##D  visOptions(collapse = list(enabled = TRUE, clusterOptions = list(shape = "square"))) 
> ##D    
> ##D # enable / disable open cluster (proxy only) : 
> ##D # visEvents(type = "off", doubleClick = "networkOpenCluster")
> ##D # visEvents(type = "on", doubleClick = "networkOpenCluster")  
> ##D  
> ##D ##########################
> ##D # selectedBy
> ##D ##########################
> ##D nodes <- data.frame(id = 1:15, label = paste("Label", 1:15),
> ##D  group = sample(LETTERS[1:3], 15, replace = TRUE))
> ##D 
> ##D edges <- data.frame(from = trunc(runif(15)*(15-1))+1,
> ##D  to = trunc(runif(15)*(15-1))+1)
> ##D  
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = "group")
> ##D  
> ##D # add a default value ?
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = list(variable = "group", selected = "A"))
> ##D 
> ##D # subset on values ?
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = list(variable = "group", 
> ##D    selected = "C",
> ##D    values = c("A", "C")))
> ##D  
> ##D # highlight also
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = list(variable = "group", 
> ##D    highlight = TRUE), highlightNearest = TRUE) 
> ##D      
> ##D # add some style
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = list(variable = "group", style = 'width: 200px; height: 26px;
> ##D    background: #f8f8f8;
> ##D    color: darkblue;
> ##D    border:none;
> ##D    outline:none;'))
> ##D      
> ##D # can also be on new column
> ##D nodes$sample <- sample(c("sample 1", "sample 2"), nrow(nodes), replace = TRUE)
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = "sample")
> ##D 
> ##D # and with multiple groups ?
> ##D nodes$group <- sample(c("group 1", "group 2", "group 1, group 2, group 3"), 
> ##D  nrow(nodes), replace = TRUE)
> ##D  
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(selectedBy = list(variable = "group", multiple = TRUE))
> ##D  
> ##D ##########################
> ##D # manipulation
> ##D ##########################
> ##D  
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(manipulation = TRUE)
> ##D 
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(manipulation = list(enabled = TRUE, addNode = FALSE, addEdge = FALSE))
> ##D 
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(manipulation = list(enabled = TRUE, deleteNode = FALSE, deleteEdge = FALSE))
> ##D 
> ##D visNetwork(nodes, edges) %>% 
> ##D  visOptions(manipulation = list(enabled = TRUE, editNode = FALSE, editEdge = FALSE))
> ##D  
> ##D # choose columns to edit
> ##D visNetwork(nodes, edges) %>% 
> ##D   visOptions(manipulation = list(enabled = TRUE, 
> ##D                                  editEdgeCols = c("label"), 
> ##D                                  editNodeCols = c("id", "label", "title", "size"), 
> ##D                                  addNodeCols = c("label", "group")))
> ##D 
> ##D # choose columns to edit + input html type (text, number, ...)
> ##D # https://www.w3schools.com/tags/att_input_type.asp
> ##D visNetwork(nodes, edges) %>% 
> ##D   visOptions(manipulation = list(enabled = TRUE, 
> ##D                                  editEdgeCols = c("label"), 
> ##D                                  editNodeCols = list(
> ##D                                     "text" = c("id", "label", "title"),
> ##D                                     "number" = c("size")
> ##D                                  ), 
> ##D                                  addNodeCols = c("label", "group")))
> ##D visNetwork(nodes, edges)  %>% 
> ##D  visOptions(manipulation = list(enabled = TRUE, 
> ##D                                 editEdge = htmlwidgets::JS("function(data, callback) {
> ##D                                                            callback(data);
> ##D                                                            console.info('edit edge')
> ##D                                                            }")
> ##D                                     )
> ##D                                 )
> ##D ##########################
> ##D # collapse
> ##D ##########################
> ##D visNetwork(nodes, edges) %>% 
> ##D  visEdges(arrows = "to") %>% 
> ##D  visOptions(collapse = list(enabled = TRUE, 
> ##D    clusterOptions = list(shape = "square")))
> ## End(Not run)
>    
> 
> 
> 
> cleanEx()
> nameEx("visPhysics")
> ### * visPhysics
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visPhysics
> ### Title: Network visualization Physics options
> ### Aliases: visPhysics
> 
> ### ** Examples
> 
> 
> nodes <- data.frame(id = 1:10)
> edges <- data.frame(from = round(runif(8)*10), to = round(runif(8)*10))
> 
> visNetwork(nodes, edges) %>%
+  visPhysics(solver = "repulsion")
> 
> visNetwork(nodes, edges) %>%
+  visPhysics(solver = "forceAtlas2Based", forceAtlas2Based = list(gravitationalConstant = -10))
>  
> visNetwork(nodes, edges) %>%
+  visPhysics(stabilization = FALSE)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("visRedraw")
> ### * visRedraw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visRedraw
> ### Title: Network visualization redraw method
> ### Aliases: visRedraw
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visRemoveEdges")
> ### * visRemoveEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visRemoveEdges
> ### Title: Function to remove edges from network, with shiny only.
> ### Aliases: visRemoveEdges
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visRemoveNodes")
> ### * visRemoveNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visRemoveNodes
> ### Title: Function to remove nodes from network, with shiny only.
> ### Aliases: visRemoveNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visSave")
> ### * visSave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSave
> ### Title: Save a a visNetwork object to an HTML file
> ### Aliases: visSave
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D nodes <- data.frame(id = 1:3, group = c("B", "A", "B"))
> ##D edges <- data.frame(from = c(1,2), to = c(2,3))
> ##D 
> ##D network <- visNetwork(nodes, edges)
> ##D network
> ##D 
> ##D network %>% visSave(file = "network.html", background = "black")
> ##D 
> ##D # same as
> ##D visSave(network, file = "network.html", background = "black")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("visSelectEdges")
> ### * visSelectEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSelectEdges
> ### Title: Function to select edge(s) from network, with shiny only.
> ### Aliases: visSelectEdges
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visSelectNodes")
> ### * visSelectNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSelectNodes
> ### Title: Function to select node(s) from network, with shiny only.
> ### Aliases: visSelectNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visSetData")
> ### * visSetData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSetData
> ### Title: Network visualization setData method
> ### Aliases: visSetData
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visSetOptions")
> ### * visSetOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSetOptions
> ### Title: Network visualization full options setter
> ### Aliases: visSetOptions
> 
> ### ** Examples
> 
> nodes <- data.frame(id = 1:3)
> edges <- data.frame(from = c(1,2), to = c(1,3))
> 
> # using visNetwork functions
> visNetwork(nodes, edges) %>% visNodes(shape = "square", color = "red") %>%
+    visEdges(arrows = "to")
> 
> # directly use visSetOptions
> visNetwork(nodes, edges) %>% 
+  visSetOptions(options = list(nodes = list(shape = "square", color = "red"),
+                               edges = list(arrows = "to")))
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("visSetSelection")
> ### * visSetSelection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSetSelection
> ### Title: Function to select edge(s) / node(s) from network, with shiny
> ###   only.
> ### Aliases: visSetSelection
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visSetTitle")
> ### * visSetTitle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visSetTitle
> ### Title: Set title, subtitle, and footer using 'visNetworkProxy'
> ### Aliases: visSetTitle
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visStabilize")
> ### * visStabilize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visStabilize
> ### Title: Network visualization stabilize method
> ### Aliases: visStabilize
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visStartSimulation")
> ### * visStartSimulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visStartSimulation
> ### Title: Network visualization startSimulation method
> ### Aliases: visStartSimulation
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visStopSimulation")
> ### * visStopSimulation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visStopSimulation
> ### Title: Network visualization stopSimulation method
> ### Aliases: visStopSimulation
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visStorePositions")
> ### * visStorePositions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visStorePositions
> ### Title: Method storePositions, with shiny only.
> ### Aliases: visStorePositions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visTree")
> ### * visTree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visTree
> ### Title: Visualize Recursive Partitioning and Regression Trees (rpart
> ###   object)
> ### Aliases: visTree
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D library(rpart)
> ##D 
> ##D # Basic classification tree
> ##D res <- rpart(Species~., data=iris)
> ##D visTree(res, data = iris, main = "Iris classification Tree")
> ##D 
> ##D # Basic regression tree
> ##D res <- rpart(Petal.Length~., data=iris)
> ##D visTree(res, edgesFontSize = 14, nodesFontSize = 16)
> ##D 
> ##D # Complex tree
> ##D data("solder")
> ##D res <- rpart(Opening~., data = solder, control = rpart.control(cp = 0.00005))
> ##D visTree(res, data = solder, nodesPopSize = TRUE, minNodeSize = 10, 
> ##D   maxNodeSize = 30, height = "800px")
> ##D 
> ##D # ----- Options
> ##D res <- rpart(Opening~., data = solder, control = rpart.control(cp = 0.005))
> ##D 
> ##D # fallen leaves + align edges label & size
> ##D visTree(res, fallenLeaves = TRUE, height = "500px", 
> ##D  edgesFontAlign = "middle", edgesFontSize = 20)
> ##D 
> ##D # disable rules in tooltip, and render tooltip faster
> ##D # enable hover highlight
> ##D visTree(res, rules = FALSE, tooltipDelay = 0, 
> ##D  highlightNearest = list(enabled = TRUE, degree = list(from = 50000, to = 0), 
> ##D  hover = TRUE, algorithm = "hierarchical"))
> ##D 
> ##D # Change color with data.frame
> ##D colorVar <- data.frame(variable = names(solder), 
> ##D  color = c("#339933", "#b30000","#4747d1","#88cc00", "#9900ff","#247856"))
> ##D  
> ##D colorY <- data.frame(modality = unique(solder$Opening), 
> ##D  color = c("#AA00AA", "#CDAD15", "#213478"))
> ##D 
> ##D visTree(res, colorEdges = "#000099", colorVar = colorVar, colorY = colorY)
> ##D 
> ##D # Change color with vector
> ##D visTree(res, colorEdges = "#000099", 
> ##D     colorVar = substring(rainbow(6), 1, 7), 
> ##D     colorY = c("blue", "green", "orange"))
> ##D     
> ##D     
> ##D  # Use visNetwork functions to add more options
> ##D visTree(res) %>% 
> ##D     visOptions(highlightNearest = TRUE)
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visTreeEditor")
> ### * visTreeEditor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visTreeEditor
> ### Title: Run and edit a visTree, and get back in R
> ### Aliases: visTreeEditor
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D net <- visTreeEditor(data = iris)
> ##D net <- visTreeEditor(data = rpart(iris), main = "visTree Editor")
> ##D net <- visTreeEditor(data = rpart(iris), tooltip_data = iris, 
> ##D     main = "visTree Editor")
> ##D net
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visUnselectAll")
> ### * visUnselectAll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visUnselectAll
> ### Title: Network visualization unselectAll method
> ### Aliases: visUnselectAll
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visUpdateEdges")
> ### * visUpdateEdges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visUpdateEdges
> ### Title: Function to update the information of edges, with shiny only.
> ### Aliases: visUpdateEdges
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("visUpdateNodes")
> ### * visUpdateNodes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: visUpdateNodes
> ### Title: Function to update the information of nodes, with shiny only.
> ### Aliases: visUpdateNodes
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # have a look to : 
> ##D shiny::runApp(system.file("shiny", package = "visNetwork"))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.639 0.214 0.855 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
