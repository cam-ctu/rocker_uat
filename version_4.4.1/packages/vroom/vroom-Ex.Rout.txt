
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "vroom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('vroom')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.col_spec")
> ### * as.col_spec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.col_spec
> ### Title: Coerce to a column specification
> ### Aliases: as.col_spec
> ### Keywords: internal
> 
> ### ** Examples
> 
> as.col_spec("cccnnn")
cols(
  col_character(),
  col_character(),
  col_character(),
  col_number(),
  col_number(),
  col_number()
)
> 
> 
> 
> cleanEx()
> nameEx("cols")
> ### * cols
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cols
> ### Title: Create column specification
> ### Aliases: cols col_types cols_only col_logical col_integer
> ###   col_big_integer col_double col_character col_skip col_number
> ###   col_guess col_factor col_datetime col_date col_time
> 
> ### ** Examples
> 
> cols(a = col_integer())
cols(
  a = col_integer()
)
> cols_only(a = col_integer())
cols_only(
  a = col_integer()
)
> 
> # You can also use the standard abbreviations
> cols(a = "i")
cols(
  a = col_integer()
)
> cols(a = "i", b = "d", c = "_")
cols(
  a = col_integer(),
  b = col_double(),
  c = col_skip()
)
> 
> # Or long names (like utils::read.csv)
> cols(a = "integer", b = "double", c = "skip")
cols(
  a = col_integer(),
  b = col_double(),
  c = col_skip()
)
> 
> # You can also use multiple sets of column definitions by combining
> # them like so:
> 
> t1 <- cols(
+   column_one = col_integer(),
+   column_two = col_number())
> 
> t2 <- cols(
+  column_three = col_character())
> 
> t3 <- t1
> t3$cols <- c(t1$cols, t2$cols)
> t3
cols(
  column_one = col_integer(),
  column_two = col_number(),
  column_three = col_character()
)
> 
> 
> 
> cleanEx()
> nameEx("date_names")
> ### * date_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: date_names
> ### Title: Create or retrieve date names
> ### Aliases: date_names date_names_lang date_names_langs
> 
> ### ** Examples
> 
> date_names_lang("en")
<date_names>
Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), Thursday
        (Thu), Friday (Fri), Saturday (Sat)
Months: January (Jan), February (Feb), March (Mar), April (Apr), May (May),
        June (Jun), July (Jul), August (Aug), September (Sep), October
        (Oct), November (Nov), December (Dec)
AM/PM:  AM/PM
> date_names_lang("ko")
<date_names>
Days:   일요일 (일), 월요일 (월), 화요일 (화), 수요일 (수), 목요일 (목), 금요일
        (금), 토요일 (토)
Months: 1월, 2월, 3월, 4월, 5월, 6월, 7월, 8월, 9월, 10월, 11월, 12월
AM/PM:  오전/오후
> date_names_lang("fr")
<date_names>
Days:   dimanche (dim.), lundi (lun.), mardi (mar.), mercredi (mer.), jeudi
        (jeu.), vendredi (ven.), samedi (sam.)
Months: janvier (janv.), février (févr.), mars (mars), avril (avr.), mai (mai),
        juin (juin), juillet (juil.), août (août), septembre (sept.),
        octobre (oct.), novembre (nov.), décembre (déc.)
AM/PM:  AM/PM
> 
> 
> 
> cleanEx()
> nameEx("gen_tbl")
> ### * gen_tbl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gen_tbl
> ### Title: Generate a random tibble
> ### Aliases: gen_tbl
> 
> ### ** Examples
> 
> # random 10 x 5 table with random column types
> rand_tbl <- gen_tbl(10, 5)
> rand_tbl
# A tibble: 10 × 5
   X1                      X2      X3 X4                      X5
   <chr>                <dbl>   <dbl> <dttm>               <dbl>
 1 tzIdkxEH             0.330 -0.412  2010-07-22 00:16:19 -0.543
 2 LzMaGaBS4zwD7pdtmnP -0.820  0.252  2018-03-24 03:14:43 -0.433
 3 zwvufGGT9voopJQde    0.487 -0.892  2009-10-06 07:11:05 -0.649
 4 Yak34YOrd0TCkFcT4    0.738  0.436  2005-11-24 05:51:30  0.727
 5 EFH8Th               0.576 -1.24   2002-06-01 07:27:01  1.15 
 6 wuFFnV7RidZqYeZS    -0.305 -0.224  2002-12-28 14:24:25  0.992
 7 OLiD41               1.51   0.377  2007-04-30 08:45:20 -0.430
 8 WWmhgpaEeWYmBs       0.390  0.133  2011-05-17 14:57:32  1.24 
 9 mX0eVDds4           -0.621  0.804  2014-03-29 22:43:47 -0.279
10 VmjqYA              -2.21  -0.0571 2009-02-19 21:28:06  1.76 
> 
> # all double 25 x 4 table
> dbl_tbl <- gen_tbl(25, 4, col_types = "dddd")
> dbl_tbl
# A tibble: 25 × 4
       X1      X2       X3     X4
    <dbl>   <dbl>    <dbl>  <dbl>
 1  0.561 -1.43   -0.873   -1.12 
 2 -0.453  0.366   0.00837  0.336
 3 -0.832  0.248  -0.881    0.495
 4 -1.17   0.0653  0.596    0.138
 5 -1.07   0.0192  0.120   -0.119
 6 -1.56   0.257  -0.282    0.198
 7  1.16  -0.649   1.46    -1.07 
 8  0.832 -0.119   0.229   -0.803
 9 -0.227  0.664   0.997   -1.11 
10  0.266  1.10    0.782    1.58 
# ℹ 15 more rows
> 
> # Use the dots in long form column types to change the random function and options
> types <- rep(times = 4, list(col_double(f = stats::runif, min = -10, max = 25)))
> types
[[1]]
<collector_double>

[[2]]
<collector_double>

[[3]]
<collector_double>

[[4]]
<collector_double>

> dbl_tbl2 <- gen_tbl(25, 4, col_types = types)
> dbl_tbl2
# A tibble: 25 × 4
      X1     X2     X3     X4
   <dbl>  <dbl>  <dbl>  <dbl>
 1  8.46 -3.83   0.276 19.7  
 2 20.8  18.5    3.98  -7.12 
 3  3.06 -7.60  18.4   21.0  
 4 -8.32  4.02  -7.30   6.52 
 5 -5.15 -5.06   2.73  -6.18 
 6  1.25 -3.23   5.49   1.66 
 7 -4.58 19.4   -4.52  19.3  
 8 -5.37 15.2   10.4   -0.310
 9 -2.25 -0.648 24.0   10.5  
10 -2.08  7.33  24.6   19.3  
# ℹ 15 more rows
> 
> 
> 
> cleanEx()
> nameEx("generators")
> ### * generators
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generators
> ### Title: Generate individual vectors of the types supported by vroom
> ### Aliases: generators gen_character gen_double gen_number gen_integer
> ###   gen_factor gen_time gen_date gen_datetime gen_logical gen_name
> 
> ### ** Examples
> 
> # characters
> gen_character(4)
[1] "Qn1us3EZQ"          "fWUhR"              "8WI5EtGV1kJUTkI"   
[4] "HWzJaBk4lYoDctaeDN"
> 
> # factors
> gen_factor(4)
[1] happy_cougar yummy_impala black_hyena  gray_okapi  
23 Levels: deep_chamois black_hyena wrong_toad teeny_gemsbok ... slow_cougar
> 
> # logical
> gen_logical(4)
[1] FALSE FALSE FALSE FALSE
> 
> # numbers
> gen_double(4)
[1] -0.3942900 -0.0593134  1.1000254  0.7631757
> gen_integer(4)
[1] 1866839656 1717982027 1104163812  906764072
> 
> # temporal data
> gen_time(4)
05:53:30
03:26:21
05:45:03
01:24:51
> gen_date(4)
[1] "2004-02-08" "2001-03-25" "2006-03-10" "2009-06-28"
> gen_datetime(4)
[1] "2010-02-08 18:43:01 UTC" "2009-03-15 15:56:28 UTC"
[3] "2017-03-21 09:46:15 UTC" "2013-02-06 00:54:16 UTC"
> 
> 
> 
> cleanEx()
> nameEx("guess_type")
> ### * guess_type
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: guess_type
> ### Title: Guess the type of a vector
> ### Aliases: guess_type
> 
> ### ** Examples
> 
>  # Logical vectors
>  guess_type(c("FALSE", "TRUE", "F", "T"))
<collector_logical>
>  # Integers and doubles
>  guess_type(c("1","2","3"))
<collector_double>
>  guess_type(c("1.6","2.6","3.4"))
<collector_double>
>  # Numbers containing grouping mark
>  guess_type("1,234,566")
<collector_number>
>  # ISO 8601 date times
>  guess_type(c("2010-10-10"))
<collector_date>
>  guess_type(c("2010-10-10 01:02:03"))
<collector_datetime>
>  guess_type(c("01:02:03 AM"))
<collector_time>
> 
> 
> 
> cleanEx()
> nameEx("locale")
> ### * locale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: locale
> ### Title: Create locales
> ### Aliases: locale default_locale
> 
> ### ** Examples
> 
> locale()
<locale>
Numbers:  123,456.78
Formats:  %AD / %AT
Timezone: UTC
Encoding: UTF-8
<date_names>
Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), Thursday
        (Thu), Friday (Fri), Saturday (Sat)
Months: January (Jan), February (Feb), March (Mar), April (Apr), May (May),
        June (Jun), July (Jul), August (Aug), September (Sep), October
        (Oct), November (Nov), December (Dec)
AM/PM:  AM/PM
> locale("fr")
<locale>
Numbers:  123,456.78
Formats:  %AD / %AT
Timezone: UTC
Encoding: UTF-8
<date_names>
Days:   dimanche (dim.), lundi (lun.), mardi (mar.), mercredi (mer.), jeudi
        (jeu.), vendredi (ven.), samedi (sam.)
Months: janvier (janv.), février (févr.), mars (mars), avril (avr.), mai (mai),
        juin (juin), juillet (juil.), août (août), septembre (sept.),
        octobre (oct.), novembre (nov.), décembre (déc.)
AM/PM:  AM/PM
> 
> # South American locale
> locale("es", decimal_mark = ",")
<locale>
Numbers:  123.456,78
Formats:  %AD / %AT
Timezone: UTC
Encoding: UTF-8
<date_names>
Days:   domingo (dom.), lunes (lun.), martes (mar.), miércoles (mié.), jueves
        (jue.), viernes (vie.), sábado (sáb.)
Months: enero (ene.), febrero (feb.), marzo (mar.), abril (abr.), mayo (may.),
        junio (jun.), julio (jul.), agosto (ago.), septiembre (sept.),
        octubre (oct.), noviembre (nov.), diciembre (dic.)
AM/PM:  a. m./p. m.
> 
> 
> 
> cleanEx()
> nameEx("output_column")
> ### * output_column
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: output_column
> ### Title: Preprocess column for output
> ### Aliases: output_column
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Most types are returned unchanged
> output_column(1)
[1] 1
> output_column("x")
[1] "x"
> 
> # datetimes are formatted in ISO 8601
> output_column(Sys.Date())
[1] "2024-12-21"
> output_column(Sys.time())
[1] "2024-12-21T11:33:01Z"
> 
> 
> 
> cleanEx()
> nameEx("spec")
> ### * spec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cols_condense
> ### Title: Examine the column specifications for a data frame
> ### Aliases: cols_condense spec
> 
> ### ** Examples
> 
> df <- vroom(vroom_example("mtcars.csv"))
Rows: 32 Columns: 12
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): model
dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> s <- spec(df)
> s
cols(
  model = col_character(),
  mpg = col_double(),
  cyl = col_double(),
  disp = col_double(),
  hp = col_double(),
  drat = col_double(),
  wt = col_double(),
  qsec = col_double(),
  vs = col_double(),
  am = col_double(),
  gear = col_double(),
  carb = col_double(),
  .delim = ","
)
> 
> cols_condense(s)
cols(
  .default = col_double(),
  model = col_character(),
  .delim = ","
)
> 
> 
> 
> cleanEx()
> nameEx("vroom")
> ### * vroom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom
> ### Title: Read a delimited file into a tibble
> ### Aliases: vroom
> 
> ### ** Examples
> 
> # get path to example file
> input_file <- vroom_example("mtcars.csv")
> input_file
[1] "/usr/local/lib/R/site-library/vroom/extdata/mtcars.csv"
> 
> # Read from a path
> 
> # Input sources -------------------------------------------------------------
> # Read from a path
> vroom(input_file)
Rows: 32 Columns: 12
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): model
dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 32 × 12
   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> # You can also use paths directly
> # vroom("mtcars.csv")
> 
> ## Not run: 
> ##D # Including remote paths
> ##D vroom("https://github.com/tidyverse/vroom/raw/main/inst/extdata/mtcars.csv")
> ## End(Not run)
> 
> # Or directly from a string with `I()`
> vroom(I("x,y\n1,2\n3,4\n"))
Rows: 2 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (2): x, y

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 2 × 2
      x     y
  <dbl> <dbl>
1     1     2
2     3     4
> 
> # Column selection ----------------------------------------------------------
> # Pass column names or indexes directly to select them
> vroom(input_file, col_select = c(model, cyl, gear))
Rows: 32 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): model
dbl (2): cyl, gear

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 32 × 3
   model               cyl  gear
   <chr>             <dbl> <dbl>
 1 Mazda RX4             6     4
 2 Mazda RX4 Wag         6     4
 3 Datsun 710            4     4
 4 Hornet 4 Drive        6     3
 5 Hornet Sportabout     8     3
 6 Valiant               6     3
 7 Duster 360            8     3
 8 Merc 240D             4     4
 9 Merc 230              4     4
10 Merc 280              6     4
# ℹ 22 more rows
> vroom(input_file, col_select = c(1, 3, 11))
Rows: 32 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): model
dbl (2): cyl, gear

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 32 × 3
   model               cyl  gear
   <chr>             <dbl> <dbl>
 1 Mazda RX4             6     4
 2 Mazda RX4 Wag         6     4
 3 Datsun 710            4     4
 4 Hornet 4 Drive        6     3
 5 Hornet Sportabout     8     3
 6 Valiant               6     3
 7 Duster 360            8     3
 8 Merc 240D             4     4
 9 Merc 230              4     4
10 Merc 280              6     4
# ℹ 22 more rows
> 
> # Or use the selection helpers
> vroom(input_file, col_select = starts_with("d"))
Rows: 32 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (2): disp, drat

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 32 × 2
    disp  drat
   <dbl> <dbl>
 1  160   3.9 
 2  160   3.9 
 3  108   3.85
 4  258   3.08
 5  360   3.15
 6  225   2.76
 7  360   3.21
 8  147.  3.69
 9  141.  3.92
10  168.  3.92
# ℹ 22 more rows
> 
> # You can also rename specific columns
> vroom(input_file, col_select = c(car = model, everything()))
Rows: 32 Columns: 12
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): model
dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 32 × 12
   car           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> # Column types --------------------------------------------------------------
> # By default, vroom guesses the columns types, looking at 1000 rows
> # throughout the dataset.
> # You can specify them explicitly with a compact specification:
> vroom(I("x,y\n1,2\n3,4\n"), col_types = "dc")
# A tibble: 2 × 2
      x y    
  <dbl> <chr>
1     1 2    
2     3 4    
> 
> # Or with a list of column types:
> vroom(I("x,y\n1,2\n3,4\n"), col_types = list(col_double(), col_character()))
# A tibble: 2 × 2
      x y    
  <dbl> <chr>
1     1 2    
2     3 4    
> 
> # File types ----------------------------------------------------------------
> # csv
> vroom(I("a,b\n1.0,2.0\n"), delim = ",")
Rows: 1 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (2): a, b

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 1 × 2
      a     b
  <dbl> <dbl>
1     1     2
> # tsv
> vroom(I("a\tb\n1.0\t2.0\n"))
Rows: 1 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: "\t"
dbl (2): a, b

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 1 × 2
      a     b
  <dbl> <dbl>
1     1     2
> # Other delimiters
> vroom(I("a|b\n1.0|2.0\n"), delim = "|")
Rows: 1 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: "|"
dbl (2): a, b

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 1 × 2
      a     b
  <dbl> <dbl>
1     1     2
> 
> # Read datasets across multiple files ---------------------------------------
> mtcars_by_cyl <- vroom_example(vroom_examples("mtcars-"))
> mtcars_by_cyl
[1] "/usr/local/lib/R/site-library/vroom/extdata/mtcars-4.csv"        
[2] "/usr/local/lib/R/site-library/vroom/extdata/mtcars-6.csv"        
[3] "/usr/local/lib/R/site-library/vroom/extdata/mtcars-8.csv"        
[4] "/usr/local/lib/R/site-library/vroom/extdata/mtcars-multi-cyl.zip"
> 
> # Pass the filenames directly to vroom, they are efficiently combined
> vroom(mtcars_by_cyl)
Multiple files in zip: reading 'mtcars-4.csv'
Rows: 43 Columns: 12
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): model
dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 43 × 12
   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Datsun 710   22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
 2 Merc 240D    24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 3 Merc 230     22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 4 Fiat 128     32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 5 Honda Civic  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
 6 Toyota Cor…  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
 7 Toyota Cor…  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
 8 Fiat X1-9    27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 9 Porsche 91…  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
10 Lotus Euro…  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
# ℹ 33 more rows
> 
> # If you need to extract data from the filenames, use `id` to request a
> # column that reveals the underlying file path
> dat <- vroom(mtcars_by_cyl, id = "source")
Multiple files in zip: reading 'mtcars-4.csv'
Rows: 43 Columns: 13
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): model
dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> dat$source <- basename(dat$source)
> dat
# A tibble: 43 × 13
   source      model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear
   <chr>       <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 mtcars-4.c… Dats…  22.8     4 108      93  3.85  2.32  18.6     1     1     4
 2 mtcars-4.c… Merc…  24.4     4 147.     62  3.69  3.19  20       1     0     4
 3 mtcars-4.c… Merc…  22.8     4 141.     95  3.92  3.15  22.9     1     0     4
 4 mtcars-4.c… Fiat…  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4
 5 mtcars-4.c… Hond…  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4
 6 mtcars-4.c… Toyo…  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4
 7 mtcars-4.c… Toyo…  21.5     4 120.     97  3.7   2.46  20.0     1     0     3
 8 mtcars-4.c… Fiat…  27.3     4  79      66  4.08  1.94  18.9     1     1     4
 9 mtcars-4.c… Pors…  26       4 120.     91  4.43  2.14  16.7     0     1     5
10 mtcars-4.c… Lotu…  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5
# ℹ 33 more rows
# ℹ 1 more variable: carb <dbl>
> 
> 
> 
> cleanEx()
> nameEx("vroom_altrep")
> ### * vroom_altrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_altrep
> ### Title: Show which column types are using Altrep
> ### Aliases: vroom_altrep
> 
> ### ** Examples
> 
> vroom_altrep()
Using Altrep representations for:
 * chr
> vroom_altrep(c("chr", "fct", "int"))
Using Altrep representations for:
 * chr
 * fct
 * int
> vroom_altrep(TRUE)
Using Altrep representations for:
 * chr
 * fct
 * int
 * dbl
 * num
 * lgl
 * dttm
 * date
 * time
 * big_int
> vroom_altrep(FALSE)
Using Altrep representations for:
 * 
> 
> 
> 
> cleanEx()
> nameEx("vroom_example")
> ### * vroom_example
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_example
> ### Title: Get path to vroom examples
> ### Aliases: vroom_example vroom_examples
> 
> ### ** Examples
> 
> # List all available examples
> vroom_examples()
 [1] "fwf-sample.txt"       "mtcars-4.csv"         "mtcars-6.csv"        
 [4] "mtcars-8.csv"         "mtcars-multi-cyl.zip" "mtcars.csv"          
 [7] "mtcars.csv.bz2"       "mtcars.csv.gz"        "mtcars.csv.xz"       
[10] "mtcars.csv.zip"      
> 
> # Get path to one example
> vroom_example("mtcars.csv")
[1] "/usr/local/lib/R/site-library/vroom/extdata/mtcars.csv"
> 
> 
> 
> cleanEx()
> nameEx("vroom_fwf")
> ### * vroom_fwf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_fwf
> ### Title: Read a fixed width file into a tibble
> ### Aliases: vroom_fwf fwf_empty fwf_widths fwf_positions fwf_cols
> 
> ### ** Examples
> 
> fwf_sample <- vroom_example("fwf-sample.txt")
> writeLines(vroom_lines(fwf_sample))
John Smith          WA        418-Y11-4111
Mary Hartford       CA        319-Z19-4341
Evan Nolan          IL        219-532-c301
> 
> # You can specify column positions in several ways:
> # 1. Guess based on position of empty columns
> vroom_fwf(fwf_sample, fwf_empty(fwf_sample, col_names = c("first", "last", "state", "ssn")))
Rows: 3 Columns: 4
── Column specification ────────────────────────────────────────────────────────

chr (4): first, last, state, ssn

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 3 × 4
  first last     state ssn         
  <chr> <chr>    <chr> <chr>       
1 John  Smith    WA    418-Y11-4111
2 Mary  Hartford CA    319-Z19-4341
3 Evan  Nolan    IL    219-532-c301
> # 2. A vector of field widths
> vroom_fwf(fwf_sample, fwf_widths(c(20, 10, 12), c("name", "state", "ssn")))
Rows: 3 Columns: 3
── Column specification ────────────────────────────────────────────────────────

chr (3): name, state, ssn

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 3 × 3
  name          state ssn         
  <chr>         <chr> <chr>       
1 John Smith    WA    418-Y11-4111
2 Mary Hartford CA    319-Z19-4341
3 Evan Nolan    IL    219-532-c301
> # 3. Paired vectors of start and end positions
> vroom_fwf(fwf_sample, fwf_positions(c(1, 30), c(20, 42), c("name", "ssn")))
Rows: 3 Columns: 2
── Column specification ────────────────────────────────────────────────────────

chr (2): name, ssn

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 3 × 2
  name          ssn         
  <chr>         <chr>       
1 John Smith    418-Y11-4111
2 Mary Hartford 319-Z19-4341
3 Evan Nolan    219-532-c301
> # 4. Named arguments with start and end positions
> vroom_fwf(fwf_sample, fwf_cols(name = c(1, 20), ssn = c(30, 42)))
Rows: 3 Columns: 2
── Column specification ────────────────────────────────────────────────────────

chr (2): name, ssn

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 3 × 2
  name          ssn         
  <chr>         <chr>       
1 John Smith    418-Y11-4111
2 Mary Hartford 319-Z19-4341
3 Evan Nolan    219-532-c301
> # 5. Named arguments with column widths
> vroom_fwf(fwf_sample, fwf_cols(name = 20, state = 10, ssn = 12))
Rows: 3 Columns: 3
── Column specification ────────────────────────────────────────────────────────

chr (3): name, state, ssn

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 3 × 3
  name          state ssn         
  <chr>         <chr> <chr>       
1 John Smith    WA    418-Y11-4111
2 Mary Hartford CA    319-Z19-4341
3 Evan Nolan    IL    219-532-c301
> 
> 
> 
> cleanEx()
> nameEx("vroom_lines")
> ### * vroom_lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_lines
> ### Title: Read lines from a file
> ### Aliases: vroom_lines
> 
> ### ** Examples
> 
> lines <- vroom_lines(vroom_example("mtcars.csv"))
> 
> length(lines)
[1] 33
> head(lines, n = 2)
[1] "model,mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb"
[2] "Mazda RX4,21,6,160,110,3.9,2.62,16.46,0,1,4,4"     
> tail(lines, n = 2)
[1] "Maserati Bora,15,8,301,335,3.54,3.57,14.6,0,1,5,8"
[2] "Volvo 142E,21.4,4,121,109,4.11,2.78,18.6,1,1,4,2" 
> sample(lines, size = 2)
[1] "Datsun 710,22.8,4,108,93,3.85,2.32,18.61,1,1,4,1"
[2] "Valiant,18.1,6,225,105,2.76,3.46,20.22,1,0,3,1"  
> 
> 
> 
> cleanEx()
> nameEx("vroom_progress")
> ### * vroom_progress
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_progress
> ### Title: Determine whether progress bars should be shown
> ### Aliases: vroom_progress
> 
> ### ** Examples
> 
> vroom_progress()
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("vroom_str")
> ### * vroom_str
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_str
> ### Title: Structure of objects
> ### Aliases: vroom_str
> 
> ### ** Examples
> 
> # when used on non-altrep objects altrep will always be false
> vroom_str(mtcars)
'data.frame': 32 obs., 11 vars.:
$mpg:	altrep:false	type: double	length:32
$cyl:	altrep:false	type: double	length:32
$disp:	altrep:false	type: double	length:32
$hp:	altrep:false	type: double	length:32
$drat:	altrep:false	type: double	length:32
$wt:	altrep:false	type: double	length:32
$qsec:	altrep:false	type: double	length:32
$vs:	altrep:false	type: double	length:32
$am:	altrep:false	type: double	length:32
$gear:	altrep:false	type: double	length:32
$carb:	altrep:false	type: double	length:32
> 
> mt <- vroom(vroom_example("mtcars.csv"), ",", altrep = c("chr", "dbl"))
Rows: 32 Columns: 12
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): model
dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> vroom_str(mt)
'spec_tbl_df', 'tbl_df', 'tbl', and 'data.frame': 32 obs., 12 vars.:
$model:	altrep:true	type:vroom::vroom_chr	length:32	materialized:false
$mpg:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$cyl:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$disp:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$hp:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$drat:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$wt:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$qsec:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$vs:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$am:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$gear:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
$carb:	altrep:true	type:vroom::vroom_dbl	length:32	materialized:false
> 
> 
> 
> cleanEx()
> nameEx("vroom_write")
> ### * vroom_write
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vroom_write
> ### Title: Write a data frame to a delimited file
> ### Aliases: vroom_write
> 
> ### ** Examples
> 
> # If you only specify a file name, vroom_write() will write
> # the file to your current working directory.
> out_file <- tempfile(fileext = "csv")
> vroom_write(mtcars, out_file, ",")
> 
> # You can also use a literal filename
> # vroom_write(mtcars, "mtcars.tsv")
> 
> # If you add an extension to the file name, write_()* will
> # automatically compress the output.
> # vroom_write(mtcars, "mtcars.tsv.gz")
> # vroom_write(mtcars, "mtcars.tsv.bz2")
> # vroom_write(mtcars, "mtcars.tsv.xz")
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.314 0.058 1.375 0.001 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
