
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "duckdb"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('duckdb')
Loading required package: DBI
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("backend-duckdb")
> ### * backend-duckdb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: backend-duckdb
> ### Title: DuckDB SQL backend for dbplyr
> ### Aliases: tbl_file tbl_function tbl_query simulate_duckdb
> 
> ### ** Examples
> 
> ## Don't show: 
> if (duckdb:::TEST_RE2 && rlang::is_installed("dbplyr")) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(dplyr, warn.conflicts = FALSE)
+ con <- DBI::dbConnect(duckdb(), path = ":memory:")
+ 
+ db <- copy_to(con, data.frame(a = 1:3, b = letters[2:4]))
+ 
+ db %>%
+   filter(a > 1) %>%
+   select(b)
+ 
+ path <- tempfile(fileext = ".csv")
+ write.csv(data.frame(a = 1:3, b = letters[2:4]))
+ 
+ db_csv <- tbl_file(con, path)
+ db_csv %>%
+   summarize(sum_a = sum(a))
+ 
+ db_csv_fun <- tbl_function(con, paste0("read_csv_auto('", path, "')"))
+ db_csv %>%
+   count()
+ 
+ DBI::dbDisconnect(con, shutdown = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("duckdb")
> ### * duckdb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: duckdb
> ### Title: Connect to a DuckDB database instance
> ### Aliases: duckdb duckdb_shutdown duckdb_adbc dbConnect__duckdb_driver
> ###   dbConnect,duckdb_driver-method dbDisconnect__duckdb_connection
> ###   dbDisconnect,duckdb_connection-method
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("adbcdrivermanager", quietly = TRUE)) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(adbcdrivermanager)
+ with_adbc(db <- adbc_database_init(duckdb_adbc()), {
+   as.data.frame(read_adbc(db, "SELECT 1 as one;"))
+ })
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> drv <- duckdb()
> con <- dbConnect(drv)
> 
> dbGetQuery(con, "SELECT 'Hello, world!'")
  'Hello, world!'
1   Hello, world!
> 
> dbDisconnect(con)
> duckdb_shutdown(drv)
> 
> # Shorter:
> con <- dbConnect(duckdb())
> dbGetQuery(con, "SELECT 'Hello, world!'")
  'Hello, world!'
1   Hello, world!
> dbDisconnect(con, shutdown = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("duckdb_read_csv")
> ### * duckdb_read_csv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: duckdb_read_csv
> ### Title: Reads a CSV file into DuckDB
> ### Aliases: duckdb_read_csv
> 
> ### ** Examples
> 
> ## Don't show: 
> if (duckdb:::TEST_RE2) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(duckdb())
+ 
+ data <- data.frame(a = 1:3, b = letters[1:3])
+ path <- tempfile(fileext = ".csv")
+ 
+ write.csv(data, path, row.names = FALSE)
+ 
+ duckdb_read_csv(con, "data", path)
+ dbReadTable(con, "data")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("duckdb_register")
> ### * duckdb_register
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: duckdb_register
> ### Title: Register a data frame as a virtual table
> ### Aliases: duckdb_register duckdb_unregister
> 
> ### ** Examples
> 
> con <- dbConnect(duckdb())
> 
> data <- data.frame(a = 1:3, b = letters[1:3])
> 
> duckdb_register(con, "data", data)
> dbReadTable(con, "data")
  a b
1 1 a
2 2 b
3 3 c
> 
> duckdb_unregister(con, "data")
> 
> dbDisconnect(con)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.357 0.049 0.404 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
