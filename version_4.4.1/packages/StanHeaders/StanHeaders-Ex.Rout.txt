
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "StanHeaders"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('StanHeaders')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("stanFunction")
> ### * stanFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stanFunction
> ### Title: Compile and Call a Stan Math Function
> ### Aliases: stanFunction
> 
> ### ** Examples
> 
>   files <- dir(system.file("include", "stan", "math", "prim",
+                            package = "StanHeaders"), 
+                pattern = "hpp$", recursive = TRUE)
>   functions <- sub("\\.hpp$", "", 
+                    sort(unique(basename(files[dirname(files) != "."]))))
>   length(functions) # you could call most of these Stan functions
[1] 955
>   
>   ## Not run: 
> ##D     log(sum(exp(exp(1)), exp(pi))) # true value
> ##D     
> ##D     stanFunction("log_sum_exp", x = exp(1), y = pi)
> ##D     args(log_sum_exp) # now exists in .GlobalEnv
> ##D     log_sum_exp(x = pi, y = exp(1))
> ##D     
> ##D     # but log_sum_exp() was not defined for a vector or matrix
> ##D     x <- c(exp(1), pi)
> ##D     try(log_sum_exp(x))
> ##D     stanFunction("log_sum_exp", x = x) # now it is
> ##D     
> ##D     # log_sum_exp() is now also defined for a matrix
> ##D     log_sum_exp(as.matrix(x))
> ##D     log_sum_exp(t(as.matrix(x)))
> ##D     log_sum_exp(rbind(x, x))
> ##D     
> ##D     # but log_sum_exp() was not defined for a list
> ##D     try(log_sum_exp(as.list(x)))
> ##D     stanFunction("log_sum_exp", x = as.list(x)) # now it is
> ##D 
> ##D     # in rare cases, passing a nested list is needed
> ##D     stanFunction("dims", x = list(list(1:3)))
> ##D     
> ##D     # functions of complex arguments work
> ##D     stanFunction("eigenvalues", # different ordering than base:eigen()
> ##D                  x = matrix(complex(real = 1:9, imaginary = pi),
> ##D                             nrow = 3, ncol = 3))
> ##D     
> ##D     # nullary functions work but are not that interesting
> ##D     stanFunction("negative_infinity")
> ##D     
> ##D     # PRNG functions work by adding a seed argument
> ##D     stanFunction("lkj_corr_rng", K = 3L, eta = 1)
> ##D     args(lkj_corr_rng) # has a seed argument
> ##D   
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.07 0.015 0.086 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
