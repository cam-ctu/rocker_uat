
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "forcats"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('forcats')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_factor")
> ### * as_factor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_factor
> ### Title: Convert input to a factor
> ### Aliases: as_factor as_factor.factor as_factor.character
> ###   as_factor.numeric as_factor.logical
> 
> ### ** Examples
> 
> # Character object
> x <- c("a", "z", "g")
> as_factor(x)
[1] a z g
Levels: a z g
> as.factor(x)
[1] a z g
Levels: a g z
> 
> # Character object containing numbers
> y <- c("1.1", "11", "2.2", "22")
> as_factor(y)
[1] 1.1 11  2.2 22 
Levels: 1.1 11 2.2 22
> as.factor(y)
[1] 1.1 11  2.2 22 
Levels: 1.1 11 2.2 22
> 
> # Numeric object
> z <- as.numeric(y)
> as_factor(z)
[1] 1.1 11  2.2 22 
Levels: 1.1 2.2 11 22
> as.factor(z)
[1] 1.1 11  2.2 22 
Levels: 1.1 2.2 11 22
> 
> 
> 
> cleanEx()
> nameEx("fct")
> ### * fct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct
> ### Title: Create a factor
> ### Aliases: fct
> 
> ### ** Examples
> 
> # Use factors when you know the set of possible values a variable might take
> x <- c("A", "O", "O", "AB", "A")
> fct(x, levels = c("O", "A", "B", "AB"))
[1] A  O  O  AB A 
Levels: O A B AB
> 
> # If you don't specify the levels, fct will create from the data
> # in the order that they're seen
> fct(x)
[1] A  O  O  AB A 
Levels: A O AB
> 
> 
> # Differences with base R -----------------------------------------------
> # factor() silently generates NAs
> x <- c("a", "b", "c")
> factor(x, levels = c("a", "b"))
[1] a    b    <NA>
Levels: a b
> # fct() errors
> try(fct(x, levels = c("a", "b")))
Error in fct(x, levels = c("a", "b")) : 
  All values of `x` must appear in `levels` or `na`
ℹ Missing level: "c"
> # Unless you explicitly supply NA:
> fct(x, levels = c("a", "b"), na = "c")
[1] a    b    <NA>
Levels: a b
> 
> # factor() sorts default levels:
> factor(c("y", "x"))
[1] y x
Levels: x y
> # fct() uses in order of appearance:
> fct(c("y", "x"))
[1] y x
Levels: y x
> 
> 
> 
> cleanEx()
> nameEx("fct_anon")
> ### * fct_anon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_anon
> ### Title: Anonymise factor levels
> ### Aliases: fct_anon
> 
> ### ** Examples
> 
> gss_cat$relig %>% fct_count()
# A tibble: 16 × 2
   f                           n
   <fct>                   <int>
 1 No answer                  93
 2 Don't know                 15
 3 Inter-nondenominational   109
 4 Native american            23
 5 Christian                 689
 6 Orthodox-christian         95
 7 Moslem/islam              104
 8 Other eastern              32
 9 Hinduism                   71
10 Buddhism                  147
11 Other                     224
12 None                     3523
13 Jewish                    388
14 Catholic                 5124
15 Protestant              10846
16 Not applicable              0
> gss_cat$relig %>%
+   fct_anon() %>%
+   fct_count()
# A tibble: 16 × 2
   f         n
   <fct> <int>
 1 01       23
 2 02      689
 3 03       32
 4 04       15
 5 05      147
 6 06      388
 7 07      109
 8 08        0
 9 09       93
10 10     3523
11 11      224
12 12      104
13 13       71
14 14       95
15 15     5124
16 16    10846
> gss_cat$relig %>%
+   fct_anon("X") %>%
+   fct_count()
# A tibble: 16 × 2
   f         n
   <fct> <int>
 1 X01    3523
 2 X02      71
 3 X03    5124
 4 X04     388
 5 X05     109
 6 X06     224
 7 X07       0
 8 X08     147
 9 X09      93
10 X10      32
11 X11   10846
12 X12      95
13 X13     104
14 X14      23
15 X15      15
16 X16     689
> 
> 
> 
> cleanEx()
> nameEx("fct_c")
> ### * fct_c
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_c
> ### Title: Concatenate factors, combining levels
> ### Aliases: fct_c
> 
> ### ** Examples
> 
> fa <- factor("a")
> fb <- factor("b")
> fab <- factor(c("a", "b"))
> 
> c(fa, fb, fab)
[1] a b a b
Levels: a b
> fct_c(fa, fb, fab)
[1] a b a b
Levels: a b
> 
> # You can also pass a list of factors with !!!
> fs <- list(fa, fb, fab)
> fct_c(!!!fs)
[1] a b a b
Levels: a b
> 
> 
> 
> cleanEx()
> nameEx("fct_collapse")
> ### * fct_collapse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_collapse
> ### Title: Collapse factor levels into manually defined groups
> ### Aliases: fct_collapse
> 
> ### ** Examples
> 
> fct_count(gss_cat$partyid)
# A tibble: 10 × 2
   f                      n
   <fct>              <int>
 1 No answer            154
 2 Don't know             1
 3 Other party          393
 4 Strong republican   2314
 5 Not str republican  3032
 6 Ind,near rep        1791
 7 Independent         4119
 8 Ind,near dem        2499
 9 Not str democrat    3690
10 Strong democrat     3490
> 
> partyid2 <- fct_collapse(gss_cat$partyid,
+   missing = c("No answer", "Don't know"),
+   other = "Other party",
+   rep = c("Strong republican", "Not str republican"),
+   ind = c("Ind,near rep", "Independent", "Ind,near dem"),
+   dem = c("Not str democrat", "Strong democrat")
+ )
> fct_count(partyid2)
# A tibble: 5 × 2
  f           n
  <fct>   <int>
1 missing   155
2 other     393
3 rep      5346
4 ind      8409
5 dem      7180
> 
> 
> 
> cleanEx()
> nameEx("fct_count")
> ### * fct_count
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_count
> ### Title: Count entries in a factor
> ### Aliases: fct_count
> 
> ### ** Examples
> 
> f <- factor(sample(letters)[rpois(1000, 10)])
> table(f)
f
  a   b   d   e   f   g   i   j   k   l   m   n   p   q   r   s   t   u   w   x 
 29  40   7  19  94   8  39 106  72   7   2  87   1  67 113   3 102  11 138  52 
  y 
  3 
> fct_count(f)
# A tibble: 21 × 2
   f         n
   <fct> <int>
 1 a        29
 2 b        40
 3 d         7
 4 e        19
 5 f        94
 6 g         8
 7 i        39
 8 j       106
 9 k        72
10 l         7
# ℹ 11 more rows
> fct_count(f, sort = TRUE)
# A tibble: 21 × 2
   f         n
   <fct> <int>
 1 w       138
 2 r       113
 3 j       106
 4 t       102
 5 f        94
 6 n        87
 7 k        72
 8 q        67
 9 x        52
10 b        40
# ℹ 11 more rows
> fct_count(f, sort = TRUE, prop = TRUE)
# A tibble: 21 × 3
   f         n     p
   <fct> <int> <dbl>
 1 w       138 0.138
 2 r       113 0.113
 3 j       106 0.106
 4 t       102 0.102
 5 f        94 0.094
 6 n        87 0.087
 7 k        72 0.072
 8 q        67 0.067
 9 x        52 0.052
10 b        40 0.04 
# ℹ 11 more rows
> 
> 
> 
> cleanEx()
> nameEx("fct_cross")
> ### * fct_cross
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_cross
> ### Title: Combine levels from two or more factors to create a new factor
> ### Aliases: fct_cross
> 
> ### ** Examples
> 
> fruit <- factor(c("apple", "kiwi", "apple", "apple"))
> colour <- factor(c("green", "green", "red", "green"))
> eaten <- c("yes", "no", "yes", "no")
> fct_cross(fruit, colour)
[1] apple:green kiwi:green  apple:red   apple:green
Levels: apple:green kiwi:green apple:red
> fct_cross(fruit, colour, eaten)
[1] apple:green:yes kiwi:green:no   apple:red:yes   apple:green:no 
Levels: apple:green:no kiwi:green:no apple:green:yes apple:red:yes
> fct_cross(fruit, colour, keep_empty = TRUE)
[1] apple:green kiwi:green  apple:red   apple:green
Levels: apple:green kiwi:green apple:red kiwi:red
> 
> 
> 
> cleanEx()
> nameEx("fct_drop")
> ### * fct_drop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_drop
> ### Title: Drop unused levels
> ### Aliases: fct_drop
> 
> ### ** Examples
> 
> f <- factor(c("a", "b"), levels = c("a", "b", "c"))
> f
[1] a b
Levels: a b c
> fct_drop(f)
[1] a b
Levels: a b
> 
> # Set only to restrict which levels to drop
> fct_drop(f, only = "a")
[1] a b
Levels: a b c
> fct_drop(f, only = "c")
[1] a b
Levels: a b
> 
> 
> 
> cleanEx()
> nameEx("fct_expand")
> ### * fct_expand
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_expand
> ### Title: Add additional levels to a factor
> ### Aliases: fct_expand
> 
> ### ** Examples
> 
> f <- factor(sample(letters[1:3], 20, replace = TRUE))
> f
 [1] a c a b a c c b b c c a a a b b b b c a
Levels: a b c
> fct_expand(f, "d", "e", "f")
 [1] a c a b a c c b b c c a a a b b b b c a
Levels: a b c d e f
> fct_expand(f, letters[1:6])
 [1] a c a b a c c b b c c a a a b b b b c a
Levels: a b c d e f
> fct_expand(f, "Z", after = 0)
 [1] a c a b a c c b b c c a a a b b b b c a
Levels: Z a b c
> 
> 
> 
> cleanEx()
> nameEx("fct_explicit_na")
> ### * fct_explicit_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_explicit_na
> ### Title: Make missing values explicit
> ### Aliases: fct_explicit_na
> ### Keywords: internal
> 
> ### ** Examples
> 
> f1 <- factor(c("a", "a", NA, NA, "a", "b", NA, "c", "a", "c", "b"))
> fct_count(f1)
# A tibble: 4 × 2
  f         n
  <fct> <int>
1 a         4
2 b         2
3 c         2
4 <NA>      3
> table(f1)
f1
a b c 
4 2 2 
> sum(is.na(f1))
[1] 3
> 
> # previously
> f2 <- fct_explicit_na(f1)
Warning: `fct_explicit_na()` was deprecated in forcats 1.0.0.
ℹ Please use `fct_na_value_to_level()` instead.
> # now
> f2 <- fct_na_value_to_level(f1)
> 
> fct_count(f2)
# A tibble: 4 × 2
  f         n
  <fct> <int>
1 a         4
2 b         2
3 c         2
4 <NA>      3
> table(f2)
f2
   a    b    c <NA> 
   4    2    2    3 
> sum(is.na(f2))
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("fct_inorder")
> ### * fct_inorder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_inorder
> ### Title: Reorder factor levels by first appearance, frequency, or numeric
> ###   order
> ### Aliases: fct_inorder fct_infreq fct_inseq
> 
> ### ** Examples
> 
> f <- factor(c("b", "b", "a", "c", "c", "c"))
> f
[1] b b a c c c
Levels: a b c
> fct_inorder(f)
[1] b b a c c c
Levels: b a c
> fct_infreq(f)
[1] b b a c c c
Levels: c b a
> 
> f <- factor(1:3, levels = c("3", "2", "1"))
> f
[1] 1 2 3
Levels: 3 2 1
> fct_inseq(f)
[1] 1 2 3
Levels: 1 2 3
> 
> 
> 
> cleanEx()
> nameEx("fct_lump")
> ### * fct_lump
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_lump
> ### Title: Lump uncommon factor together levels into "other"
> ### Aliases: fct_lump fct_lump_min fct_lump_prop fct_lump_n
> ###   fct_lump_lowfreq
> 
> ### ** Examples
> 
> x <- factor(rep(LETTERS[1:9], times = c(40, 10, 5, 27, 1, 1, 1, 1, 1)))
> x %>% table()
.
 A  B  C  D  E  F  G  H  I 
40 10  5 27  1  1  1  1  1 
> x %>%
+   fct_lump_n(3) %>%
+   table()
.
    A     B     D Other 
   40    10    27    10 
> x %>%
+   fct_lump_prop(0.10) %>%
+   table()
.
    A     B     D Other 
   40    10    27    10 
> x %>%
+   fct_lump_min(5) %>%
+   table()
.
    A     B     C     D Other 
   40    10     5    27     5 
> x %>%
+   fct_lump_lowfreq() %>%
+   table()
.
    A     D Other 
   40    27    20 
> 
> x <- factor(letters[rpois(100, 5)])
> x
  [1] d d e h c h i f f b c c f d g e f k d g i c f c d d a d h d e e e c g f g
 [38] b f d g f g e e g a e f f e g d c b b d e f d h d e d f c e g b h d g d d
 [75] e h g d g i d f d d f c f b c c c b f h g g e d g e
Levels: a b c d e f g h i k
> table(x)
x
 a  b  c  d  e  f  g  h  i  k 
 2  7 12 22 15 16 15  7  3  1 
> table(fct_lump_lowfreq(x))

    b     c     d     e     f     g     h Other 
    7    12    22    15    16    15     7     6 
> 
> # Use positive values to collapse the rarest
> fct_lump_n(x, n = 3)
  [1] d     d     e     Other Other Other Other f     f     Other Other Other
 [13] f     d     g     e     f     Other d     g     Other Other f     Other
 [25] d     d     Other d     Other d     e     e     e     Other g     f    
 [37] g     Other f     d     g     f     g     e     e     g     Other e    
 [49] f     f     e     g     d     Other Other Other d     e     f     d    
 [61] Other d     e     d     f     Other e     g     Other Other d     g    
 [73] d     d     e     Other g     d     g     Other d     f     d     d    
 [85] f     Other f     Other Other Other Other Other f     Other g     g    
 [97] e     d     g     e    
Levels: d e f g Other
> fct_lump_prop(x, prop = 0.1)
  [1] d     d     e     Other c     Other Other f     f     Other c     c    
 [13] f     d     g     e     f     Other d     g     Other c     f     c    
 [25] d     d     Other d     Other d     e     e     e     c     g     f    
 [37] g     Other f     d     g     f     g     e     e     g     Other e    
 [49] f     f     e     g     d     c     Other Other d     e     f     d    
 [61] Other d     e     d     f     c     e     g     Other Other d     g    
 [73] d     d     e     Other g     d     g     Other d     f     d     d    
 [85] f     c     f     Other c     c     c     Other f     Other g     g    
 [97] e     d     g     e    
Levels: c d e f g Other
> 
> # Use negative values to collapse the most common
> fct_lump_n(x, n = -3)
  [1] Other Other Other Other Other Other i     Other Other Other Other Other
 [13] Other Other Other Other Other k     Other Other i     Other Other Other
 [25] Other Other a     Other Other Other Other Other Other Other Other Other
 [37] Other Other Other Other Other Other Other Other Other Other a     Other
 [49] Other Other Other Other Other Other Other Other Other Other Other Other
 [61] Other Other Other Other Other Other Other Other Other Other Other Other
 [73] Other Other Other Other Other Other Other i     Other Other Other Other
 [85] Other Other Other Other Other Other Other Other Other Other Other Other
 [97] Other Other Other Other
Levels: a i k Other
> fct_lump_prop(x, prop = -0.1)
  [1] Other Other Other h     Other h     i     Other Other b     Other Other
 [13] Other Other Other Other Other k     Other Other i     Other Other Other
 [25] Other Other a     Other h     Other Other Other Other Other Other Other
 [37] Other b     Other Other Other Other Other Other Other Other a     Other
 [49] Other Other Other Other Other Other b     b     Other Other Other Other
 [61] h     Other Other Other Other Other Other Other b     h     Other Other
 [73] Other Other Other h     Other Other Other i     Other Other Other Other
 [85] Other Other Other b     Other Other Other b     Other h     Other Other
 [97] Other Other Other Other
Levels: a b h i k Other
> 
> # Use weighted frequencies
> w <- c(rep(2, 50), rep(1, 50))
> fct_lump_n(x, n = 5, w = w)
  [1] d     d     e     Other c     Other Other f     f     Other c     c    
 [13] f     d     g     e     f     Other d     g     Other c     f     c    
 [25] d     d     Other d     Other d     e     e     e     c     g     f    
 [37] g     Other f     d     g     f     g     e     e     g     Other e    
 [49] f     f     e     g     d     c     Other Other d     e     f     d    
 [61] Other d     e     d     f     c     e     g     Other Other d     g    
 [73] d     d     e     Other g     d     g     Other d     f     d     d    
 [85] f     c     f     Other c     c     c     Other f     Other g     g    
 [97] e     d     g     e    
Levels: c d e f g Other
> 
> # Use ties.method to control how tied factors are collapsed
> fct_lump_n(x, n = 6)
  [1] d     d     e     h     c     h     Other f     f     b     c     c    
 [13] f     d     g     e     f     Other d     g     Other c     f     c    
 [25] d     d     Other d     h     d     e     e     e     c     g     f    
 [37] g     b     f     d     g     f     g     e     e     g     Other e    
 [49] f     f     e     g     d     c     b     b     d     e     f     d    
 [61] h     d     e     d     f     c     e     g     b     h     d     g    
 [73] d     d     e     h     g     d     g     Other d     f     d     d    
 [85] f     c     f     b     c     c     c     b     f     h     g     g    
 [97] e     d     g     e    
Levels: b c d e f g h Other
> fct_lump_n(x, n = 6, ties.method = "max")
  [1] d     d     e     Other c     Other Other f     f     Other c     c    
 [13] f     d     g     e     f     Other d     g     Other c     f     c    
 [25] d     d     Other d     Other d     e     e     e     c     g     f    
 [37] g     Other f     d     g     f     g     e     e     g     Other e    
 [49] f     f     e     g     d     c     Other Other d     e     f     d    
 [61] Other d     e     d     f     c     e     g     Other Other d     g    
 [73] d     d     e     Other g     d     g     Other d     f     d     d    
 [85] f     c     f     Other c     c     c     Other f     Other g     g    
 [97] e     d     g     e    
Levels: c d e f g Other
> 
> # Use fct_lump_min() to lump together all levels with fewer than `n` values
> table(fct_lump_min(x, min = 10))

    c     d     e     f     g Other 
   12    22    15    16    15    20 
> table(fct_lump_min(x, min = 15))

    d     e     f     g Other 
   22    15    16    15    32 
> 
> 
> 
> cleanEx()
> nameEx("fct_match")
> ### * fct_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_match
> ### Title: Test for presence of levels in a factor
> ### Aliases: fct_match
> 
> ### ** Examples
> 
> table(fct_match(gss_cat$marital, c("Married", "Divorced")))

FALSE  TRUE 
 7983 13500 
> 
> # Compare to %in%, misspelled levels throw an error
> table(gss_cat$marital %in% c("Maried", "Davorced"))

FALSE 
21483 
> ## Not run: 
> ##D table(fct_match(gss_cat$marital, c("Maried", "Davorced")))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fct_na_value_to_level")
> ### * fct_na_value_to_level
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_na_value_to_level
> ### Title: Convert between 'NA' values and 'NA' levels
> ### Aliases: fct_na_value_to_level fct_na_level_to_value
> 
> ### ** Examples
> 
> # Most factors store NAs in the values:
> f1 <- fct(c("a", "b", NA, "c", "b", NA))
> levels(f1)
[1] "a" "b" "c"
> as.integer(f1)
[1]  1  2 NA  3  2 NA
> is.na(f1)
[1] FALSE FALSE  TRUE FALSE FALSE  TRUE
> 
> # But it's also possible to store them in the levels
> f2 <- fct_na_value_to_level(f1)
> levels(f2)
[1] "a" "b" "c" NA 
> as.integer(f2)
[1] 1 2 4 3 2 4
> is.na(f2)
[1] FALSE FALSE FALSE FALSE FALSE FALSE
> 
> # If needed, you can convert back to NAs in the values:
> f3 <- fct_na_level_to_value(f2)
> levels(f3)
[1] "a" "b" "c"
> as.integer(f3)
[1]  1  2 NA  3  2 NA
> is.na(f3)
[1] FALSE FALSE  TRUE FALSE FALSE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("fct_other")
> ### * fct_other
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_other
> ### Title: Manually replace levels with "other"
> ### Aliases: fct_other
> 
> ### ** Examples
> 
> x <- factor(rep(LETTERS[1:9], times = c(40, 10, 5, 27, 1, 1, 1, 1, 1)))
> 
> fct_other(x, keep = c("A", "B"))
 [1] A     A     A     A     A     A     A     A     A     A     A     A    
[13] A     A     A     A     A     A     A     A     A     A     A     A    
[25] A     A     A     A     A     A     A     A     A     A     A     A    
[37] A     A     A     A     B     B     B     B     B     B     B     B    
[49] B     B     Other Other Other Other Other Other Other Other Other Other
[61] Other Other Other Other Other Other Other Other Other Other Other Other
[73] Other Other Other Other Other Other Other Other Other Other Other Other
[85] Other Other Other
Levels: A B Other
> fct_other(x, drop = c("A", "B"))
 [1] Other Other Other Other Other Other Other Other Other Other Other Other
[13] Other Other Other Other Other Other Other Other Other Other Other Other
[25] Other Other Other Other Other Other Other Other Other Other Other Other
[37] Other Other Other Other Other Other Other Other Other Other Other Other
[49] Other Other C     C     C     C     C     D     D     D     D     D    
[61] D     D     D     D     D     D     D     D     D     D     D     D    
[73] D     D     D     D     D     D     D     D     D     D     E     F    
[85] G     H     I    
Levels: C D E F G H I Other
> 
> 
> 
> cleanEx()
> nameEx("fct_recode")
> ### * fct_recode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_recode
> ### Title: Change factor levels by hand
> ### Aliases: fct_recode
> 
> ### ** Examples
> 
> x <- factor(c("apple", "bear", "banana", "dear"))
> fct_recode(x, fruit = "apple", fruit = "banana")
[1] fruit bear  fruit dear 
Levels: fruit bear dear
> 
> # If you make a mistake you'll get a warning
> fct_recode(x, fruit = "apple", fruit = "bananana")
Warning: Unknown levels in `f`: bananana
[1] fruit  bear   banana dear  
Levels: fruit banana bear dear
> 
> # If you name the level NULL it will be removed
> fct_recode(x, NULL = "apple", fruit = "banana")
[1] <NA>  bear  fruit dear 
Levels: fruit bear dear
> 
> # Wrap the left hand side in quotes if it contains special variables
> fct_recode(x, "an apple" = "apple", "a bear" = "bear")
[1] an apple a bear   banana   dear    
Levels: an apple banana a bear dear
> 
> # When passing a named vector to rename levels use !!! to splice
> x <- factor(c("apple", "bear", "banana", "dear"))
> levels <- c(fruit = "apple", fruit = "banana")
> fct_recode(x, !!!levels)
[1] fruit bear  fruit dear 
Levels: fruit bear dear
> 
> 
> 
> cleanEx()
> nameEx("fct_relabel")
> ### * fct_relabel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_relabel
> ### Title: Relabel factor levels with a function, collapsing as necessary
> ### Aliases: fct_relabel
> 
> ### ** Examples
> 
> gss_cat$partyid %>% fct_count()
# A tibble: 10 × 2
   f                      n
   <fct>              <int>
 1 No answer            154
 2 Don't know             1
 3 Other party          393
 4 Strong republican   2314
 5 Not str republican  3032
 6 Ind,near rep        1791
 7 Independent         4119
 8 Ind,near dem        2499
 9 Not str democrat    3690
10 Strong democrat     3490
> gss_cat$partyid %>%
+   fct_relabel(~ gsub(",", ", ", .x)) %>%
+   fct_count()
# A tibble: 10 × 2
   f                      n
   <fct>              <int>
 1 No answer            154
 2 Don't know             1
 3 Other party          393
 4 Strong republican   2314
 5 Not str republican  3032
 6 Ind, near rep       1791
 7 Independent         4119
 8 Ind, near dem       2499
 9 Not str democrat    3690
10 Strong democrat     3490
> 
> convert_income <- function(x) {
+   regex <- "^(?:Lt |)[$]([0-9]+).*$"
+   is_range <- grepl(regex, x)
+   num_income <- as.numeric(gsub(regex, "\\1", x[is_range]))
+   num_income <- trunc(num_income / 5000) * 5000
+   x[is_range] <- paste0("Gt $", num_income)
+   x
+ }
> fct_count(gss_cat$rincome)
# A tibble: 16 × 2
   f                  n
   <fct>          <int>
 1 No answer        183
 2 Don't know       267
 3 Refused          975
 4 $25000 or more  7363
 5 $20000 - 24999  1283
 6 $15000 - 19999  1048
 7 $10000 - 14999  1168
 8 $8000 to 9999    340
 9 $7000 to 7999    188
10 $6000 to 6999    215
11 $5000 to 5999    227
12 $4000 to 4999    226
13 $3000 to 3999    276
14 $1000 to 2999    395
15 Lt $1000         286
16 Not applicable  7043
> convert_income(levels(gss_cat$rincome))
 [1] "No answer"      "Don't know"     "Refused"        "Gt $25000"     
 [5] "Gt $20000"      "Gt $15000"      "Gt $10000"      "Gt $5000"      
 [9] "Gt $5000"       "Gt $5000"       "Gt $5000"       "Gt $0"         
[13] "Gt $0"          "Gt $0"          "Gt $0"          "Not applicable"
> rincome2 <- fct_relabel(gss_cat$rincome, convert_income)
> fct_count(rincome2)
# A tibble: 10 × 2
   f                  n
   <fct>          <int>
 1 No answer        183
 2 Don't know       267
 3 Refused          975
 4 Gt $25000       7363
 5 Gt $20000       1283
 6 Gt $15000       1048
 7 Gt $10000       1168
 8 Gt $5000         970
 9 Gt $0           1183
10 Not applicable  7043
> 
> 
> 
> cleanEx()
> nameEx("fct_relevel")
> ### * fct_relevel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_relevel
> ### Title: Reorder factor levels by hand
> ### Aliases: fct_relevel
> 
> ### ** Examples
> 
> f <- factor(c("a", "b", "c", "d"), levels = c("b", "c", "d", "a"))
> fct_relevel(f)
[1] a b c d
Levels: b c d a
> fct_relevel(f, "a")
[1] a b c d
Levels: a b c d
> fct_relevel(f, "b", "a")
[1] a b c d
Levels: b a c d
> 
> # Move to the third position
> fct_relevel(f, "a", after = 2)
[1] a b c d
Levels: b c a d
> 
> # Relevel to the end
> fct_relevel(f, "a", after = Inf)
[1] a b c d
Levels: b c d a
> fct_relevel(f, "a", after = 3)
[1] a b c d
Levels: b c d a
> 
> # Relevel with a function
> fct_relevel(f, sort)
[1] a b c d
Levels: a b c d
> fct_relevel(f, sample)
[1] a b c d
Levels: b d a c
> fct_relevel(f, rev)
[1] a b c d
Levels: a d c b
> 
> # Using 'Inf' allows you to relevel to the end when the number
> # of levels is unknown or variable (e.g. vectorised operations)
> df <- forcats::gss_cat[, c("rincome", "denom")]
> lapply(df, levels)
$rincome
 [1] "No answer"      "Don't know"     "Refused"        "$25000 or more"
 [5] "$20000 - 24999" "$15000 - 19999" "$10000 - 14999" "$8000 to 9999" 
 [9] "$7000 to 7999"  "$6000 to 6999"  "$5000 to 5999"  "$4000 to 4999" 
[13] "$3000 to 3999"  "$1000 to 2999"  "Lt $1000"       "Not applicable"

$denom
 [1] "No answer"            "Don't know"           "No denomination"     
 [4] "Other"                "Episcopal"            "Presbyterian-dk wh"  
 [7] "Presbyterian, merged" "Other presbyterian"   "United pres ch in us"
[10] "Presbyterian c in us" "Lutheran-dk which"    "Evangelical luth"    
[13] "Other lutheran"       "Wi evan luth synod"   "Lutheran-mo synod"   
[16] "Luth ch in america"   "Am lutheran"          "Methodist-dk which"  
[19] "Other methodist"      "United methodist"     "Afr meth ep zion"    
[22] "Afr meth episcopal"   "Baptist-dk which"     "Other baptists"      
[25] "Southern baptist"     "Nat bapt conv usa"    "Nat bapt conv of am" 
[28] "Am bapt ch in usa"    "Am baptist asso"      "Not applicable"      

> 
> df2 <- lapply(df, fct_relevel, "Don't know", after = Inf)
> lapply(df2, levels)
$rincome
 [1] "No answer"      "Refused"        "$25000 or more" "$20000 - 24999"
 [5] "$15000 - 19999" "$10000 - 14999" "$8000 to 9999"  "$7000 to 7999" 
 [9] "$6000 to 6999"  "$5000 to 5999"  "$4000 to 4999"  "$3000 to 3999" 
[13] "$1000 to 2999"  "Lt $1000"       "Not applicable" "Don't know"    

$denom
 [1] "No answer"            "No denomination"      "Other"               
 [4] "Episcopal"            "Presbyterian-dk wh"   "Presbyterian, merged"
 [7] "Other presbyterian"   "United pres ch in us" "Presbyterian c in us"
[10] "Lutheran-dk which"    "Evangelical luth"     "Other lutheran"      
[13] "Wi evan luth synod"   "Lutheran-mo synod"    "Luth ch in america"  
[16] "Am lutheran"          "Methodist-dk which"   "Other methodist"     
[19] "United methodist"     "Afr meth ep zion"     "Afr meth episcopal"  
[22] "Baptist-dk which"     "Other baptists"       "Southern baptist"    
[25] "Nat bapt conv usa"    "Nat bapt conv of am"  "Am bapt ch in usa"   
[28] "Am baptist asso"      "Not applicable"       "Don't know"          

> 
> # You'll get a warning if the levels don't exist
> fct_relevel(f, "e")
Warning: 1 unknown level in `f`: e
[1] a b c d
Levels: b c d a
> 
> 
> 
> cleanEx()
> nameEx("fct_reorder")
> ### * fct_reorder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_reorder
> ### Title: Reorder factor levels by sorting along another variable
> ### Aliases: fct_reorder fct_reorder2 last2 first2
> 
> ### ** Examples
> 
> # fct_reorder() -------------------------------------------------------------
> # Useful when a categorical variable is mapped to position
> boxplot(Sepal.Width ~ Species, data = iris)
> boxplot(Sepal.Width ~ fct_reorder(Species, Sepal.Width), data = iris)
> 
> # or with
> library(ggplot2)
> ggplot(iris, aes(fct_reorder(Species, Sepal.Width), Sepal.Width)) +
+   geom_boxplot()
> 
> # fct_reorder2() -------------------------------------------------------------
> # Useful when a categorical variable is mapped to color, size, shape etc
> 
> chks <- subset(ChickWeight, as.integer(Chick) < 10)
> chks <- transform(chks, Chick = fct_shuffle(Chick))
> 
> # Without reordering it's hard to match line to legend
> ggplot(chks, aes(Time, weight, colour = Chick)) +
+   geom_point() +
+   geom_line()
> 
> # With reordering it's much easier
> ggplot(chks, aes(Time, weight, colour = fct_reorder2(Chick, Time, weight))) +
+   geom_point() +
+   geom_line() +
+   labs(colour = "Chick")
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("fct_rev")
> ### * fct_rev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_rev
> ### Title: Reverse order of factor levels
> ### Aliases: fct_rev
> 
> ### ** Examples
> 
> f <- factor(c("a", "b", "c"))
> fct_rev(f)
[1] a b c
Levels: c b a
> 
> 
> 
> cleanEx()
> nameEx("fct_shift")
> ### * fct_shift
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_shift
> ### Title: Shift factor levels to left or right, wrapping around at end
> ### Aliases: fct_shift
> 
> ### ** Examples
> 
> x <- factor(
+   c("Mon", "Tue", "Wed"),
+   levels = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"),
+   ordered = TRUE
+ )
> x
[1] Mon Tue Wed
Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat
> fct_shift(x)
[1] Mon Tue Wed
Levels: Mon < Tue < Wed < Thu < Fri < Sat < Sun
> fct_shift(x, 2)
[1] Mon Tue Wed
Levels: Tue < Wed < Thu < Fri < Sat < Sun < Mon
> fct_shift(x, -1)
[1] Mon Tue Wed
Levels: Sat < Sun < Mon < Tue < Wed < Thu < Fri
> 
> 
> 
> cleanEx()
> nameEx("fct_shuffle")
> ### * fct_shuffle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_shuffle
> ### Title: Randomly permute factor levels
> ### Aliases: fct_shuffle
> 
> ### ** Examples
> 
> f <- factor(c("a", "b", "c"))
> fct_shuffle(f)
[1] a b c
Levels: a b c
> fct_shuffle(f)
[1] a b c
Levels: a b c
> 
> 
> 
> cleanEx()
> nameEx("fct_unify")
> ### * fct_unify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_unify
> ### Title: Unify the levels in a list of factors
> ### Aliases: fct_unify
> 
> ### ** Examples
> 
> fs <- list(factor("a"), factor("b"), factor(c("a", "b")))
> fct_unify(fs)
[[1]]
[1] a
Levels: a b

[[2]]
[1] b
Levels: a b

[[3]]
[1] a b
Levels: a b

> 
> 
> 
> cleanEx()
> nameEx("fct_unique")
> ### * fct_unique
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fct_unique
> ### Title: Unique values of a factor, as a factor
> ### Aliases: fct_unique
> 
> ### ** Examples
> 
> f <- fct(letters[rpois(100, 10)])
> unique(f)     # in order of appearance
 [1] h j g k n l i b c m e o f p d
Levels: h j g k n l i b c m e o f p d
> fct_unique(f) # in order of levels
 [1] h j g k n l i b c m e o f p d
Levels: h j g k n l i b c m e o f p d
> 
> f <- fct(letters[rpois(100, 2)], letters[1:20])
> unique(f)     # levels that appear in data
[1] a b c d e f g
Levels: a b c d e f g h i j k l m n o p q r s t
> fct_unique(f) # all possible levels
 [1] a b c d e f g h i j k l m n o p q r s t
Levels: a b c d e f g h i j k l m n o p q r s t
> 
> 
> 
> cleanEx()
> nameEx("gss_cat")
> ### * gss_cat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gss_cat
> ### Title: A sample of categorical variables from the General Social survey
> ### Aliases: gss_cat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> gss_cat
# A tibble: 21,483 × 9
    year marital         age race  rincome        partyid    relig denom tvhours
   <int> <fct>         <int> <fct> <fct>          <fct>      <fct> <fct>   <int>
 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12
 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA
 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2
 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4
 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1
 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA
 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3
 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA
 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0
10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3
# ℹ 21,473 more rows
> 
> fct_count(gss_cat$relig)
# A tibble: 16 × 2
   f                           n
   <fct>                   <int>
 1 No answer                  93
 2 Don't know                 15
 3 Inter-nondenominational   109
 4 Native american            23
 5 Christian                 689
 6 Orthodox-christian         95
 7 Moslem/islam              104
 8 Other eastern              32
 9 Hinduism                   71
10 Buddhism                  147
11 Other                     224
12 None                     3523
13 Jewish                    388
14 Catholic                 5124
15 Protestant              10846
16 Not applicable              0
> fct_count(fct_lump(gss_cat$relig))
# A tibble: 2 × 2
  f              n
  <fct>      <int>
1 Protestant 10846
2 Other      10637
> 
> 
> 
> cleanEx()
> nameEx("lvls")
> ### * lvls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvls
> ### Title: Low-level functions for manipulating levels
> ### Aliases: lvls lvls_reorder lvls_revalue lvls_expand
> 
> ### ** Examples
> 
> f <- factor(c("a", "b", "c"))
> lvls_reorder(f, 3:1)
[1] a b c
Levels: c b a
> lvls_revalue(f, c("apple", "banana", "carrot"))
[1] apple  banana carrot
Levels: apple banana carrot
> lvls_expand(f, c("a", "b", "c", "d"))
[1] a b c
Levels: a b c d
> 
> 
> 
> cleanEx()
> nameEx("lvls_union")
> ### * lvls_union
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvls_union
> ### Title: Find all levels in a list of factors
> ### Aliases: lvls_union
> 
> ### ** Examples
> 
> fs <- list(factor("a"), factor("b"), factor(c("a", "b")))
> lvls_union(fs)
[1] "a" "b"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.528 0.413 1.5 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
