
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a          b           c           d           e           f
A  0.17685570  2.0473005  2.06514342  0.15943941  0.86081354  0.99979300
B -0.59242818 -0.3459255 -0.74296484  0.42086636 -0.32930621 -0.26437656
C  0.43831368 -1.3364807  0.83464404 -0.93494979  0.94021870  0.59162529
D  0.54063630  0.8746835 -0.45978581 -0.30870750  0.26724396  1.54908209
E  1.75608191 -0.1424972  0.12663630  0.85189876  0.07753981 -0.55351399
F -0.68033809  1.0992499 -0.14228640 -1.89234562 -0.43601509  0.22446021
G  1.90389608 -0.4690479 -0.05325728 -0.29756085 -0.79880754  1.06419596
H  1.14338868 -1.4074811 -0.58250071  0.38583214  0.56153126  0.04486065
I  0.93596033  0.5917014 -0.26204803 -0.80179731  1.90713625 -1.62326675
J  0.71625868 -0.4689309 -0.25134277 -0.04501562  0.42106278  1.21889850
K  1.01109348 -0.5283147 -0.07028072 -0.88440046 -0.51355154  0.52736800
L -0.10109115  1.4911402  1.07516778 -1.66711741 -2.85314076  0.55330790
M -0.11854597 -0.4897502 -0.26075344  1.27728164 -0.59860844  0.93816964
N -0.53316168 -2.6290967 -0.45117231  0.37915012  0.09440798  0.38585529
O -0.39177319  0.9907321 -1.16996633  0.06392922 -0.95259818  0.05234830
P -0.45441971 -1.0233362  0.98043065  0.38125078  0.50838868 -0.15914043
Q -0.41899251  0.1414053 -2.20369142  0.05865472  0.32218065 -1.23134112
R  1.19830842 -1.4174796  0.10890899  0.31534227 -0.50200138  0.67184849
S  0.23986630 -0.1581576  0.92761543  0.69360099 -1.26644758  0.77496363
T  0.04266839 -1.7209807 -0.73886245  0.11203097  1.02859769 -0.03058445
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2           s3
A  1.11207812  1.11229142  0.930303269
B -0.46917683 -0.16104924 -0.296841383
C -0.44908349 -0.05015287  0.765921996
D  0.70765992 -0.38424666  0.908163026
E  0.80679238  0.48926753 -0.237987092
F  0.20945591 -1.01731601 -0.105777437
G  0.71742411 -0.17540907  0.132694206
H -0.13204619 -0.09833429  0.303195956
I  0.76383085 -0.53192267  0.141934751
J  0.12366391 -0.14817920  0.819980643
K  0.24138940 -0.47734059  0.006908225
L  0.69502450 -0.29597481 -1.149916431
M -0.30414807  0.50826410  0.169780598
N -1.58112919 -0.03601110  0.240131636
O  0.29947948 -0.55301856 -0.450124938
P -0.73887795  0.68084072  0.174624127
Q -0.13879362 -1.07251835 -0.454580236
R -0.10958560  0.21212563  0.084923552
S  0.04085437  0.81060821 -0.245741974
T -0.83915617 -0.31341574  0.499006618
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b          c          d          e          f
s1  0.1408444  0.3098945  0.4242592 -0.1658379  0.4347425 0.71903096
s2  1.0307571 -0.2299440 -0.1628520 -0.2380439 -0.1489379 0.19500071
s3  0.6405553  0.2713990  0.1228741 -0.8495827 -0.2596233 0.16907691
s4 -0.3744751 -0.7878627 -0.2253654  0.5254029 -0.2371025 0.30430820
s5  0.2654627 -0.7888032 -0.4765074  0.2949072 -0.1044177 0.04622164
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  1.05155760
B -0.30902249
C  0.08889521
D  0.41052543
E  0.35269094
F -0.30454585
G  0.22490308
H  0.02427183
I  0.12461431
J  0.26515512
K -0.07634766
L -0.25028892
M  0.12463221
N -0.45900288
O -0.23455467
P  0.03886230
Q -0.55529740
R  0.06248786
S  0.20190687
T -0.21785510
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a          b           c           d           e         f
s1 0.3406289 -0.2450633 -0.06351829 -0.08663086 -0.06306777 0.2867277
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2           s3
A  1.11207812  1.11229142  0.930303269
B -0.46917683 -0.16104924 -0.296841383
C -0.44908349 -0.05015287  0.765921996
D  0.70765992 -0.38424666  0.908163026
E  0.80679238  0.48926753 -0.237987092
F  0.20945591 -1.01731601 -0.105777437
G  0.71742411 -0.17540907  0.132694206
H -0.13204619 -0.09833429  0.303195956
I  0.76383085 -0.53192267  0.141934751
J  0.12366391 -0.14817920  0.819980643
K  0.24138940 -0.47734059  0.006908225
L  0.69502450 -0.29597481 -1.149916431
M -0.30414807  0.50826410  0.169780598
N -1.58112919 -0.03601110  0.240131636
O  0.29947948 -0.55301856 -0.450124938
P -0.73887795  0.68084072  0.174624127
Q -0.13879362 -1.07251835 -0.454580236
R -0.10958560  0.21212563  0.084923552
S  0.04085437  0.81060821 -0.245741974
T -0.83915617 -0.31341574  0.499006618
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b            c          d          e          f
s1 -0.2077862  0.8506875  0.661089289  0.2901529  0.2657537  0.3677082
s2  0.4894750 -0.2308986  0.187429117 -0.6218286  0.6037313  1.0703537
s3  0.5378719  0.4783764 -0.007825051 -0.5202234 -0.1792376 -0.1645269
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
