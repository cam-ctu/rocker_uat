
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b           c          d          e           f
A  0.04994881  0.86983279  1.51658852 -0.8775770 -1.9042682 -0.15262765
B  0.36147283 -1.01361796 -0.74805578 -1.2484191 -0.6405621  0.83887891
C  0.33167201  1.31912582 -1.94533536 -0.4037212 -0.7793910  2.42128965
D  0.58106530 -0.46930425  0.07864916  0.6374629  0.8399602 -0.83302489
E  0.14645705  0.76597470 -0.84899112 -1.5626091  1.6712457 -2.13081713
F  1.43965548 -0.94599769  0.57138873  1.6932512  0.5215741 -0.84066153
G  2.29963442 -0.04219834  0.08898912 -0.6453869 -0.2184403 -0.22012898
H -1.39058377 -1.51334085  1.08174832  0.7207902  0.1220681 -1.54296947
I -0.51535346  2.16630563 -1.39545391 -0.2000417  1.1743939  0.17627441
J -1.23184796 -0.60186733 -0.34044649 -2.4014174  0.2625006 -0.04251181
K -2.40388381  1.19705239 -0.91127991  0.6756301  0.2072095 -1.09908535
L  0.63952279  0.01446827  0.28856126 -0.9066479 -0.3055204 -0.06445797
M -1.25133069  0.10345156  1.05270917  0.6866286 -0.8580422 -0.65013672
N  0.47185662 -1.59448296  0.19749815 -0.4734675 -0.2638926  0.29460945
O -0.90103695  1.37089339  1.10391540  2.0456598  0.6742688  0.54363184
P -1.01083757 -1.35261012 -1.10962585  0.9785656  0.2739870  0.28693139
Q  1.03610729  0.98519620 -0.79240553 -0.3309712  0.5002474 -0.22032084
R  0.46595860  1.03596464  1.00490509  0.7423739 -2.8291943 -2.17897287
S -2.16684803 -0.75389144  0.80905446  0.9947429 -0.3398520 -0.12391474
T  0.69788158  0.70370568 -1.16823793  0.1673370  0.2948992  0.38096764
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2           s3
A  0.45989080  0.31950577 -1.028447951
B -0.32607257 -0.99823744  0.099158412
C  0.82539892 -1.17452830  0.820949316
D  0.05588053  0.35805601  0.003467679
E  0.45621588 -1.20580009 -0.229785710
F  0.24682889  1.13231998 -0.159543703
G  1.12871804 -0.27819887 -0.219284666
H -1.45196231  0.90126928 -0.710450680
I  0.82547609 -0.79774778  0.675334132
J -0.91685765 -1.37093194  0.109994384
K -0.60341571 -0.11782490 -0.445937941
L  0.32699553 -0.30904335 -0.184989180
M -0.57393956  0.86966889 -0.754089457
N -0.56131317 -0.13798468  0.015358402
O  0.23492822  1.57478759  0.608950297
P -1.18172385 -0.06553014  0.280459184
Q  1.01065174 -0.56168838  0.139963300
R  0.75096162  0.87363948 -2.504083596
S -1.46036974  0.90189870 -0.231883367
T  0.70079363 -0.50045047  0.337933443
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b           c           d           e          f
s1  0.33103974  0.1765091 -0.27453836 -0.47306361 -0.62106528  0.5686290
s2  0.62379079 -0.4338905  0.22328376  0.05151139  0.52411190 -1.1836443
s3 -0.87789061  0.6939897 -0.58965476 -0.70811922  0.33464588 -0.2574452
s4 -0.67283715 -0.3681870  0.31112422  0.80934661 -0.04341978  0.1187590
s5  0.00827486  0.4927438 -0.03667098  0.39337065 -0.59347491 -0.5355602
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.08301713
B -0.40838386
C  0.15727331
D  0.13913474
E -0.32645664
F  0.40653506
G  0.21041150
H -0.42038124
I  0.23435415
J -0.72593173
K -0.38905951
L -0.05567900
M -0.15278671
N -0.22797982
O  0.80622204
P -0.32226493
Q  0.19630889
R -0.29316083
S -0.26345147
T  0.17942554
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a        b           c          d           e          f
s1 -0.1175245 0.112233 -0.07329123 0.01460916 -0.07984044 -0.2578523
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2           s3
A  0.45989080  0.31950577 -1.028447951
B -0.32607257 -0.99823744  0.099158412
C  0.82539892 -1.17452830  0.820949316
D  0.05588053  0.35805601  0.003467679
E  0.45621588 -1.20580009 -0.229785710
F  0.24682889  1.13231998 -0.159543703
G  1.12871804 -0.27819887 -0.219284666
H -1.45196231  0.90126928 -0.710450680
I  0.82547609 -0.79774778  0.675334132
J -0.91685765 -1.37093194  0.109994384
K -0.60341571 -0.11782490 -0.445937941
L  0.32699553 -0.30904335 -0.184989180
M -0.57393956  0.86966889 -0.754089457
N -0.56131317 -0.13798468  0.015358402
O  0.23492822  1.57478759  0.608950297
P -1.18172385 -0.06553014  0.280459184
Q  1.01065174 -0.56168838  0.139963300
R  0.75096162  0.87363948 -2.504083596
S -1.46036974  0.90189870 -0.231883367
T  0.70079363 -0.50045047  0.337933443
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
           a           b          c           d           e          f
s1 0.2057108 -0.07189259  0.3842664 -1.06299804 -1.27241517  0.3431256
s2 0.4563687  0.42491079 -0.9333431  0.11687081  0.03028461  0.7941324
s3 0.7930563 -0.09001150 -0.1388012  0.06532109  1.09640992 -1.4857393
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
