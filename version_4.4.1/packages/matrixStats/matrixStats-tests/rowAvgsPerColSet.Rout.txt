
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a            b           c           d           e           f
A -0.44137633  0.850747045 -0.49492548  0.47684628  0.24757137 -1.37720764
B -0.04492984 -0.256820103  0.65680424  0.30227885 -0.89742206 -2.13828222
C -0.83128501  0.840793992  0.37587599 -0.35408264 -0.65598708 -0.55941800
D  0.44422967 -0.127145501 -0.47305624 -0.51852066 -0.48379637 -0.63197237
E  1.47913193 -0.744631397  1.75548641  0.06634955 -0.01607918 -0.01427024
F  0.58744118 -0.951219508 -0.71476398  0.07497624  0.45311689 -0.11271981
G  0.42215434 -1.107806869 -1.15352007 -2.10055506 -1.33688081 -0.36116597
H  0.13559995 -1.213988003 -0.43725084  0.55870213 -0.14178275 -0.22811488
I  2.18854332 -0.793573457 -0.99758145  0.23725874 -1.48581835  1.62841414
J -0.27044485 -1.425185631 -0.17238924  0.83076611  0.35456226 -0.38887070
K  0.60434890  0.479648244 -1.07199373  0.42171277  1.46320134  1.49990872
L  0.27413810 -2.661751413  1.52189110 -0.11212546  1.82383685 -0.07669535
M  0.43097269  1.835049605  0.39018563  0.16248590  0.39742905 -0.68546729
N  2.46060017  0.051457600 -0.82094253 -0.21830424 -0.76724504 -0.20083204
O  0.38772904  0.947761076  0.28232429  0.68438667  1.56054866  1.68478464
P  0.51094140  1.697883878 -0.09758809  0.06867923  0.01211792  1.04382965
Q  0.17180175 -0.149576299 -0.98844264 -0.65774789 -0.01950698 -0.37017575
R -0.18775120 -0.405026694  1.41370288  1.19839448 -0.52851287 -0.02903725
S -1.05927395 -0.002378369 -0.24194555 -0.52238522  0.44514874  0.72436096
T  0.02350110 -0.998884272  1.43975819  0.05145381  2.52367493 -0.51829507
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1           s2          s3
A  0.204685357 -0.009039596 -0.56481814
B -0.150874971  0.479541543 -1.51785214
C  0.004754492  0.010896676 -0.60770254
D  0.158542085 -0.495788446 -0.55788437
E  0.367250266  0.910917978 -0.01517471
F -0.181889164 -0.319893870  0.17019854
G -0.342826266 -1.627037566 -0.84902339
H -0.539194028  0.060725643 -0.18494881
I  0.697484931 -0.380161354  0.07129790
J -0.847815240  0.329188435 -0.01715422
K  0.541998574 -0.325140478  1.48155503
L -1.193806655  0.704882816  0.87357075
M  1.133011150  0.276335766 -0.14401912
N  1.256028886 -0.519623383 -0.48403854
O  0.667745057  0.483355482  1.62266665
P  1.104412640 -0.014454430  0.52797379
Q  0.011112724 -0.823095264 -0.19484136
R -0.296388947  1.306048683 -0.27877506
S -0.530826161 -0.382165381  0.58475485
T -0.487691588  0.745606001  1.00268993
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b           c           d          e           f
s1 -0.2183404  0.3268939  0.01617463 -0.02336954 -0.4474085 -1.17672006
s2  0.6560818 -1.0044114 -0.13751212 -0.35013178 -0.2604065 -0.17906772
s3  0.6991464 -1.1002156 -0.18001833  0.34440304  0.5389455  0.66568920
s4  0.9475608  1.1330380 -0.06150518  0.17431189  0.3007127  0.46057874
s5 -0.2629306 -0.3889664  0.40576822  0.01742880  0.6052010 -0.04828678
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.12305746
B -0.39639519
C -0.19735046
D -0.29837691
E  0.42099784
F -0.11052816
G -0.93962907
H -0.22113907
I  0.12954049
J -0.17859367
K  0.56613771
L  0.12821564
M  0.42177593
N  0.08412232
O  0.92458906
P  0.53931067
Q -0.33560797
R  0.24362823
S -0.10941223
T  0.42020145
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a          b           c          d         e           f
s1 0.3643036 -0.2067323 0.008581445 0.03252848 0.1474088 -0.05556132
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1           s2          s3
A  0.204685357 -0.009039596 -0.56481814
B -0.150874971  0.479541543 -1.51785214
C  0.004754492  0.010896676 -0.60770254
D  0.158542085 -0.495788446 -0.55788437
E  0.367250266  0.910917978 -0.01517471
F -0.181889164 -0.319893870  0.17019854
G -0.342826266 -1.627037566 -0.84902339
H -0.539194028  0.060725643 -0.18494881
I  0.697484931 -0.380161354  0.07129790
J -0.847815240  0.329188435 -0.01715422
K  0.541998574 -0.325140478  1.48155503
L -1.193806655  0.704882816  0.87357075
M  1.133011150  0.276335766 -0.14401912
N  1.256028886 -0.519623383 -0.48403854
O  0.667745057  0.483355482  1.62266665
P  1.104412640 -0.014454430  0.52797379
Q  0.011112724 -0.823095264 -0.19484136
R -0.296388947  1.306048683 -0.27877506
S -0.530826161 -0.382165381  0.58475485
T -0.487691588  0.745606001  1.00268993
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b           c          d          e           f
s1 -0.2431531  0.2969635  0.08093938  0.3895626 -0.3249253 -1.75774493
s2 -0.1935277  0.3568242 -0.04859012 -0.4363016 -0.5698917 -0.59569519
s3  1.0332866 -0.8479255  0.52036121  0.0706629  0.2185189 -0.06349502
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
