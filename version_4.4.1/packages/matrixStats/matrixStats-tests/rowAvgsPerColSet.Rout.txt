
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d          e          f
A -2.8031705  0.70350443 -0.94096128 -0.62780376  1.3111527 -1.2183342
B  0.4858199  0.70503536 -0.86719085 -0.54792621  1.2719250 -0.8619862
C -2.1899583  1.39794589 -2.57875201  0.41391143 -1.7803056  1.0086022
D -1.2223644 -0.57549805 -0.85747241 -0.51807660 -0.4272234 -0.9316318
E -0.7716591 -0.37170421  0.43834443 -0.01182655 -1.8241804 -1.1469796
F  0.7212067 -0.27050300 -0.57736679 -0.78845532  1.2564081  0.4086586
G -0.9914686  0.06014527 -0.51061010 -1.42085431 -1.4513969  0.5263362
H -0.7860614  0.02341969 -2.08775030  0.93115954  1.1671179  0.6447683
I  0.1860031  0.20112209 -0.21194137  0.47168783 -0.2122388 -0.1579280
J -0.9162021 -2.35537630 -0.06636117 -2.94516864 -0.7690540  0.3461244
K  1.0000979 -0.98548974 -0.38278527  0.37157690 -0.7517537  1.1135126
L -0.3400772 -0.75855952  0.76099159  0.03598720  0.1360571  0.4939071
M  0.6579696  0.36052053  0.20857373 -0.92676391  0.3143080  0.8996415
N  0.9340929 -0.61886323 -1.14774446 -0.33155957  1.7674278  0.6677647
O  0.4079452 -0.85628676  0.37486672  0.20973657 -0.3573262 -0.7430838
P  0.3862369  1.60522409 -0.02597727  0.16771171  1.2532652 -0.9860840
Q  0.2799226 -3.71299029  2.56502217  1.45093746 -0.6325034 -0.6640775
R -0.2568424 -0.65669059 -1.04081147 -1.95363097  0.3643850  0.7665748
S  1.0113175 -1.64289909  0.80187717 -1.36183072  0.8768485 -0.5981260
T  2.1078701 -1.06015985  0.76426783  1.36626858 -0.9001345  1.8546476
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1           s2          s3
A -1.04983305 -0.784382522  0.04640924
B  0.59542760 -0.707558530  0.20496939
C -0.39600622 -1.082420294 -0.38585171
D -0.89893124 -0.687774508 -0.67942761
E -0.57168165  0.213258938 -1.48557999
F  0.22535184 -0.682911056  0.83253334
G -0.46566165 -0.965732205 -0.46253031
H -0.38132086 -0.578295380  0.90594311
I  0.19356260  0.129873228 -0.18508339
J -1.63578918 -1.505764907 -0.21146479
K  0.00730406 -0.005604184  0.18087945
L -0.54931838  0.398489392  0.31498212
M  0.50924508 -0.359095088  0.60697473
N  0.15761483 -0.739652016  1.21759625
O -0.22417080  0.292301642 -0.55020502
P  0.99573051  0.070867222  0.13359058
Q -1.71653384  2.007979810 -0.64829047
R -0.45676649 -1.497221220  0.56547990
S -0.31579078 -0.279976778  0.13936126
T  0.52385515  1.065268203  0.47725654
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b           c          d           e           f
s1 -1.43241836  0.5577469 -1.31109414 -0.3199738  0.09388717 -0.50083751
s2 -0.45699559 -0.1396606 -0.68434569 -0.3224942 -0.21301280  0.10819587
s3 -0.01754458 -0.9745759  0.02497594 -0.5164792 -0.39924734  0.44890403
s4  0.59656115  0.1226487 -0.14757032 -0.2202188  0.74441869 -0.04044042
s5  0.78556697 -1.7681850  0.77258892 -0.1245639 -0.07285111  0.33975472
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.59593545
B  0.03094615
C -0.62142607
D -0.75537779
E -0.61466757
F  0.12499138
G -0.63130806
H -0.01789104
I  0.04611748
J -1.11767296
K  0.06085978
L  0.05471771
M  0.25237491
N  0.21185302
O -0.16069139
P  0.40006277
Q -0.11894817
R -0.46283594
S -0.15213543
T  0.68879330
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b          c         d          e          f
s1 -0.1049661 -0.4404052 -0.2690891 -0.300746 0.03063892 0.07111534
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1           s2          s3
A -1.04983305 -0.784382522  0.04640924
B  0.59542760 -0.707558530  0.20496939
C -0.39600622 -1.082420294 -0.38585171
D -0.89893124 -0.687774508 -0.67942761
E -0.57168165  0.213258938 -1.48557999
F  0.22535184 -0.682911056  0.83253334
G -0.46566165 -0.965732205 -0.46253031
H -0.38132086 -0.578295380  0.90594311
I  0.19356260  0.129873228 -0.18508339
J -1.63578918 -1.505764907 -0.21146479
K  0.00730406 -0.005604184  0.18087945
L -0.54931838  0.398489392  0.31498212
M  0.50924508 -0.359095088  0.60697473
N  0.15761483 -0.739652016  1.21759625
O -0.22417080  0.292301642 -0.55020502
P  0.99573051  0.070867222  0.13359058
Q -1.71653384  2.007979810 -0.64829047
R -0.45676649 -1.497221220  0.56547990
S -0.31579078 -0.279976778  0.13936126
T  0.52385515  1.065268203  0.47725654
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b           c           d          e           f
s1 -1.1586753  0.7042699 -0.90407607 -0.58786498  1.2915388 -1.04016022
s2 -1.7061614  0.4112239 -1.71811221 -0.05208259 -1.1037645  0.03848519
s3 -0.0252262 -0.3211036 -0.06951118 -0.40014094 -0.2838861 -0.36916052
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
