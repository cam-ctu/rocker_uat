
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b          c           d           e           f
A -1.05502557  1.01738468 -0.3965435 -1.46006883 -0.30300125 -0.07421443
B -0.75971064  0.78630297  0.8458679  0.25081204  0.54819375 -0.02719801
C  0.42036533  0.26513108  1.0956366  1.55304584  0.60740881 -1.57216738
D -0.99139809  0.20632933 -0.2005455  1.43463326  0.78149352  0.18398771
E -0.31107574  1.21715420  3.9065526 -1.30032743 -0.41122918  0.72512824
F  0.78872544  1.16243407  0.9932220  0.93785610 -1.20892779  0.88418498
G -0.63662247 -0.59789593 -1.2361727 -0.82577575  0.28115269  0.53553692
H  0.70670519 -1.43231956  1.6659675 -1.81011829  0.85281200  1.27468681
I -1.05695932  0.39141538  0.8889316 -1.49106483 -0.31102100  0.15145695
J -0.20442597  0.08761685 -1.5108708  0.39940247  0.13952826  0.33642297
K -1.70557681  1.77401658  0.1018667  0.69590993 -0.83257270  1.30803190
L  0.20748763  1.06169428 -0.8627379 -0.74996284  0.42827083 -1.22729026
M  0.45326094 -1.01141005  0.8001358  0.47103666 -0.07472047 -0.85832989
N  0.07826426  0.63783129  2.1219280  0.07056253 -0.58789528  2.21238242
O  1.11625860  0.05825311 -0.1236602 -0.34063903  0.53604539 -0.79189968
P -0.22746574  1.48357654 -0.2588867 -0.26908316 -0.19216418  0.05839040
Q -0.30853942  0.32828006 -1.7360508 -0.33829496 -0.53748083 -0.92076323
R  0.26279449 -0.09603181 -0.6117835  0.42081049  1.41717828 -0.73874862
S  0.07416821  0.38704671 -1.4422549  0.81733129  0.68271860  0.87184574
T  0.26286633 -2.16553856 -1.0508177 -0.65078906  1.32354680 -0.55460164
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1          s2          s3
A -0.018820448 -0.92830617 -0.18860784
B  0.013296169  0.54833996  0.26049787
C  0.342748203  1.32434124 -0.48237928
D -0.392534379  0.61704389  0.48274062
E  0.453039231  1.30311257  0.15694953
F  0.975579754  0.96553903 -0.16237140
G -0.617259200 -1.03097420  0.40834480
H -0.362807183 -0.07207537  1.06374941
I -0.332771969 -0.30106663 -0.07978202
J -0.058404559 -0.55573418  0.23797561
K  0.034219885  0.39888830  0.23772960
L  0.634590953 -0.80635037 -0.39950971
M -0.279074555  0.63558621 -0.46652518
N  0.358047773  1.09624528  0.81224357
O  0.587255852 -0.23214962 -0.12792714
P  0.628055400 -0.26398494 -0.06688689
Q  0.009870319 -1.03717288 -0.72912203
R  0.083381340 -0.09548651  0.33921483
S  0.230607459 -0.31246182  0.77728217
T -0.951336118 -0.85080338  0.38447258
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b          c           d           e          f
s1 -0.5964422  0.5687870  0.3361039  0.44460558  0.40852371 -0.3723980
s2  0.1369331  0.0873432  1.3323924 -0.74959134 -0.12154807  0.8548842
s3 -0.6898686  0.8286858 -0.3457026 -0.28642882 -0.14394865  0.1421554
s4  0.3550795  0.2920627  0.6348792 -0.01703075 -0.07968363  0.1551358
s5  0.0728224 -0.3865609 -1.2102267  0.06226444  0.72149071 -0.3355669
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.37857815
B  0.27404467
C  0.39490339
D  0.23575004
E  0.63770044
F  0.59291579
G -0.41329620
H  0.20962228
I -0.23787354
J -0.12538771
K  0.22361260
L -0.19042304
M -0.03667117
N  0.75551221
O  0.07572636
P  0.09906119
Q -0.58547486
R  0.10903655
S  0.23180927
T -0.47255564
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a         b         c          d         e         f
s1 -0.1442952 0.2780636 0.1494892 -0.1092362 0.1569668 0.0888421
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1          s2          s3
A -0.018820448 -0.92830617 -0.18860784
B  0.013296169  0.54833996  0.26049787
C  0.342748203  1.32434124 -0.48237928
D -0.392534379  0.61704389  0.48274062
E  0.453039231  1.30311257  0.15694953
F  0.975579754  0.96553903 -0.16237140
G -0.617259200 -1.03097420  0.40834480
H -0.362807183 -0.07207537  1.06374941
I -0.332771969 -0.30106663 -0.07978202
J -0.058404559 -0.55573418  0.23797561
K  0.034219885  0.39888830  0.23772960
L  0.634590953 -0.80635037 -0.39950971
M -0.279074555  0.63558621 -0.46652518
N  0.358047773  1.09624528  0.81224357
O  0.587255852 -0.23214962 -0.12792714
P  0.628055400 -0.26398494 -0.06688689
Q  0.009870319 -1.03717288 -0.72912203
R  0.083381340 -0.09548651  0.33921483
S  0.230607459 -0.31246182  0.77728217
T -0.951336118 -0.85080338  0.38447258
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a         b         c          d          e           f
s1 -0.9073681 0.9018438 0.2246622 -0.6046284  0.1225962 -0.05070622
s2 -0.2855164 0.2357302 0.4475456  1.4938396  0.6944512 -0.69408983
s3  0.2388249 1.1897941 2.4498873 -0.1812357 -0.8100785  0.80465661
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
