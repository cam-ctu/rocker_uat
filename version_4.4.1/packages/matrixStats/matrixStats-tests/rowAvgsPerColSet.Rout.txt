
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d            e           f
A -1.5562211  0.39920615  2.19573653 -2.24114291 -1.231267196  0.22260613
B  1.0950551 -0.20537573  1.15746158  0.07810982  1.374913650 -1.77017219
C  1.6928975 -1.17228521  0.21059853  2.01074234 -0.874897347  1.22667283
D -0.8925590 -1.05500816  0.45483908  0.39621429 -1.047746025  0.86613283
E  1.5226154  0.07039823 -0.62274711 -0.66794209  0.539028373  1.39739437
F  0.1226188 -0.04911555 -0.31807483 -0.27599985  1.500229727 -1.02042543
G  0.7284785  0.63462461  0.42982358 -0.21878969  1.803671050  0.09412864
H -0.7245666 -0.10718908 -0.28166161  0.41518907 -1.682876654 -0.19402001
I -0.1578419 -1.10539438  0.50505068  0.97216477 -1.639342221  1.02060927
J -1.1999058 -0.70290481  0.80224047  1.07711233  0.104983443  0.60860591
K -0.3729967  0.31548750  1.68108618  0.69200549  0.182162542 -1.55592803
L -0.3465172 -2.03579030  0.75032375 -0.95762833  0.948924788 -0.54285456
M -0.4102941 -0.45494807 -0.62188868  0.76736814  2.429689777  1.73302680
N -0.3327975  0.67255636  0.91694594 -0.13700665  0.446874621  0.80436300
O -0.8964608 -0.95199021  0.43879380 -1.63073927  0.415375105  0.26132570
P  0.9571115 -0.10023486  0.76886741 -0.04982368 -1.416657400 -0.12411849
Q  0.7393571 -0.86245149 -0.07048663 -0.45786030 -0.007504232  0.08080781
R  0.2299182  1.87739267  0.89229582  0.11068832  1.441997556 -0.21752442
S -1.9444132 -0.29303661  0.23770458 -0.12209363  0.429312784  0.43893662
T  1.0110535 -0.33571743  0.81563441  0.86419425  0.288635033 -0.26919520
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2           s3
A -0.57850748 -0.02270319 -0.504330535
B  0.44483968  0.61778570 -0.197629271
C  0.26030614  1.11067043  0.175887742
D -0.97378358  0.42552668 -0.090806598
E  0.79650682 -0.64534460  0.968211373
F  0.03675165 -0.29703734  0.239902147
G  0.68155157  0.10551695  0.948899844
H -0.41587782  0.06676373 -0.938448332
I -0.63161812  0.73860772 -0.309366473
J -0.95140529  0.93967640  0.356794675
K -0.02875462  1.18654584 -0.686882741
L -1.19115373 -0.10365229  0.203035116
M -0.43262107  0.07273973  2.081358288
N  0.16987941  0.38996965  0.625618811
O -0.92422549 -0.59597273  0.338350402
P  0.42843833  0.35952187 -0.770387943
Q -0.06154720 -0.26417346  0.036651788
R  1.05365545  0.50149207  0.612236570
S -1.11872489  0.05780547  0.434124700
T  0.33766801  0.83991433  0.009719915
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
              a           b          c           d          e            f
s1  0.084793121 -0.50836574  1.0046589  0.06098088 -0.4447492  0.136309898
s2  0.412286555  0.13717955 -0.1981650 -0.18688564  0.5400131  0.069269392
s3 -0.519315378 -0.88215050  0.9346753  0.44591356 -0.1008179 -0.117391850
s4 -0.170610213 -0.20865420  0.3756796 -0.26255036  0.4688205  0.668649253
s5  0.008978899  0.09654679  0.4687870  0.09873216  0.5381103  0.008256201
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
            s1
A -0.368513734
B  0.288332037
C  0.515621440
D -0.213021165
E  0.373124529
F -0.006794515
G  0.578656121
H -0.429187475
I -0.067458956
J  0.115021929
K  0.156969491
L -0.363923634
M  0.573825649
N  0.395155956
O -0.393949273
P  0.005857419
Q -0.096356293
R  0.722461362
S -0.208931570
T  0.395767420
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b         c          d         e         f
s1 -0.0367734 -0.2730888 0.5171272 0.03123812 0.2002754 0.1530186
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2           s3
A -0.57850748 -0.02270319 -0.504330535
B  0.44483968  0.61778570 -0.197629271
C  0.26030614  1.11067043  0.175887742
D -0.97378358  0.42552668 -0.090806598
E  0.79650682 -0.64534460  0.968211373
F  0.03675165 -0.29703734  0.239902147
G  0.68155157  0.10551695  0.948899844
H -0.41587782  0.06676373 -0.938448332
I -0.63161812  0.73860772 -0.309366473
J -0.95140529  0.93967640  0.356794675
K -0.02875462  1.18654584 -0.686882741
L -1.19115373 -0.10365229  0.203035116
M -0.43262107  0.07273973  2.081358288
N  0.16987941  0.38996965  0.625618811
O -0.92422549 -0.59597273  0.338350402
P  0.42843833  0.35952187 -0.770387943
Q -0.06154720 -0.26417346  0.036651788
R  1.05365545  0.50149207  0.612236570
S -1.11872489  0.05780547  0.434124700
T  0.33766801  0.83991433  0.009719915
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a           b          c         d           e          f
s1 -0.2305830  0.09691521  1.6765991 -1.081517  0.07182323 -0.7737830
s2  0.4001692 -1.11364668  0.3327188  1.203478 -0.96132169  1.0464028
s3  0.8226171  0.01064134 -0.4704110 -0.471971  1.01962905  0.1884845
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
