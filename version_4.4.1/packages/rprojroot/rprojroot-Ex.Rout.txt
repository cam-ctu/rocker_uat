
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rprojroot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rprojroot')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("find_root")
> ### * find_root
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find_root
> ### Title: Find the root of a directory hierarchy
> ### Aliases: find_root get_root_desc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D find_root(glob2rx("DESCRIPTION"), "^Package: ")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("find_root_file")
> ### * find_root_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find_root_file
> ### Title: File paths relative to the root of a directory hierarchy
> ### Aliases: find_root_file find_rstudio_root_file find_package_root_file
> ###   find_remake_root_file find_testthat_root_file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D find_package_root_file("tests", "testthat.R")
> ##D has_file("DESCRIPTION", "^Package: ")$find_file
> ##D has_file("DESCRIPTION", "^Package: ")$make_fix_file(".")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("root_criterion")
> ### * root_criterion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: root_criterion
> ### Title: Is a directory the project root?
> ### Aliases: root_criterion is_root_criterion as_root_criterion
> ###   as_root_criterion.character as_root_criterion.root_criterion
> ###   |.root_criterion has_file has_dir has_file_pattern has_basename
> 
> ### ** Examples
> 
> root_criterion(function(path) file.exists(file.path(path, "somefile")), "has somefile")
Root criterion: has somefile
> has_file("DESCRIPTION")
Root criterion: contains a file "DESCRIPTION"
> is_r_package
Root criterion: contains a file "DESCRIPTION" with contents matching "^Package: "
> ## Not run: 
> ##D is_r_package$find_file
> ##D is_r_package$make_fix_file(".")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rprojroot-package")
> ### * rprojroot-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rprojroot-package
> ### Title: rprojroot: Finding Files in Project Subdirectories
> ### Aliases: rprojroot rprojroot-package
> 
> ### ** Examples
> 
> criteria
$is_rstudio_project
Root criterion: contains a file matching "[.]Rproj$" with contents matching "^Version: " in the first line

$is_r_package
Root criterion: contains a file "DESCRIPTION" with contents matching "^Package: "

$is_remake_project
Root criterion: contains a file "remake.yml"

$is_pkgdown_project
Root criterion: one of
- contains a file "_pkgdown.yml"
- contains a file "_pkgdown.yaml"
- contains a file "pkgdown/_pkgdown.yml"
- contains a file "inst/_pkgdown.yml"

$is_renv_project
Root criterion: contains a file "renv.lock" with contents matching ""Packages":\s*\{"

$is_projectile_project
Root criterion: contains a file ".projectile"

$is_quarto_project
Root criterion: contains a file "_quarto.yml"

$is_git_root
Root criterion: one of
- contains a directory ".git"
- contains a file ".git" with contents matching "^gitdir: "

$is_svn_root
Root criterion: contains a directory ".svn"

$is_vcs_root
Root criterion: one of
- contains a directory ".git"
- contains a file ".git" with contents matching "^gitdir: "
- contains a directory ".svn"

$is_testthat
Root criterion: directory name is "testthat" (also look in subdirectories: `tests/testthat`, `testthat`)

$from_wd
Root criterion: from current working directory

attr(,"class")
[1] "root_criteria"
> ## Not run: 
> ##D is_r_package$find_file("NAMESPACE")
> ##D root_fun <- is_r_package$make_fix_file()
> ##D root_fun("NAMESPACE")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("thisfile")
> ### * thisfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thisfile
> ### Title: Determines the path of the currently running script
> ### Aliases: thisfile thisfile_source thisfile_r thisfile_rscript
> ###   thisfile_knit
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D thisfile()
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.068 0.001 0.069 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
