{
  "hash": "dc83b1e84c1a9b7992f512ba2205cbe2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"processx\"\nlisting:\n  contents:\n    - \"processx/*.Rout\"\n    - \"processx/**/*.Rout\"\n  type: table\n  fields: \n    - filename\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"test_pkg.R\")\nsource(\"edit_log.R\")\n# to ensure that the lsiting doesn't fail.\n\n\ndl <- download.packages(\"processx\", destdir=\"packages\",type=\"source\",\n                        method=\"wget\")# wget was what solved this.. was getting binary versions\n\n\nunlink(\"packages/processx\")\nuntar(dl[,2], exdir = \"packages\", restore_times=FALSE)\nwriteLines(\"empty placeholder file\",\"packages/processx/empty_output.Rout\")\nout <- test_pkg(\"processx\", outDir=\"packages/processx\", test_path=\"tests\",\n                   types=c(\"examples\",\"tests\")\n                   )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTesting examples for package 'processx'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  comparing 'processx-Ex.Rout' to 'processx-Ex.Rout.prev' ... NOTE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  200c200\n  < [1] \"DESCRIPTION\\nempty_output.Rout\\ninst\\nLICENSE\\nman\\nMD5\\nNAMESPACE\\nNEWS.md\\nprocessx-Ex.pdf\\nprocessx-Ex.R\\nprocessx-Ex.Rout.fail\\nprocessx-Ex.Rout.prev\\nprocessx-tests\\nR\\nREADME.md\\nsrc\\ntests\\n\"\n  ---\n  > [1] \"DESCRIPTION\\nempty_output.Rout\\ninst\\nLICENSE\\nman\\nMD5\\nNAMESPACE\\nNEWS.md\\nprocessx-Ex.pdf\\nprocessx-Ex.R\\nprocessx-Ex.Rout.fail\\nR\\nREADME.md\\nsrc\\ntests\\n\"\n  210c210\n  <   0.008   0.005   0.666 \n  ---\n  >   0.007   0.008   0.671 \n  214c214\n  <   0.007   0.010   1.665 \n  ---\n  >   0.008   0.008   1.669 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nchecks for tests\nDOing the tests\nRunning specific tests for package 'processx'\n  Running 'testthat.R'\nError: running the tests in 'testthat.R' failed\n```\n\n\n:::\n\n```{.r .cell-code}\nedit_log(\"processx\", out)\n```\n:::\n\n\n# Output Files\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}