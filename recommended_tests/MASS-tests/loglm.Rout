
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###  Tests to exercise more of loglm()
> ## Added for 7.3-60
> library(MASS)
> 
> minn38_tab <- xtabs(f ~ ., minn38)
> 
> mod_llm <- loglm(~ hs*phs*fol + sex, minn38_tab)      ## log-linear
> mod_glm <- glm(f ~ hs*phs*fol + sex, poisson, minn38) ## surrogate Poisson
> 
> ## deviance check
> all.equal(deviance(mod_llm), deviance(mod_glm))
[1] TRUE
> 
> ## residuals check
> minn38_res <- within(minn38, {
+   res_glm_d <- resid(mod_glm)
+   res_glm_p <- resid(mod_glm, type = "pearson")
+   res_glm_r <- resid(mod_glm, type = "response")
+ })
> 
> .tmp <- capture.output({
+   .tmp_d <- as.table(resid(mod_llm))                          ## array to table
+   .tmp_d <- as.data.frame(.tmp_d, responseName = "res_llm_d") ## table to data frame
+ 
+   .tmp_p <- as.table(resid(mod_llm, type = "pearson"))        ## array to table
+   .tmp_p <- as.data.frame(.tmp_p, responseName = "res_llm_p") ## table to data frame
+ 
+   .tmp_r <- as.table(resid(mod_llm, type = "response"))       ## array to table
+   .tmp_r <- as.data.frame(.tmp_r, responseName = "res_llm_r") ## table to data frame
+ })
> 
> minn38_res <- merge(merge(merge(minn38_res, .tmp_d), .tmp_p), .tmp_r)
> 
> with(minn38_res, c(
+      "deviance OK" = isTRUE(all.equal(res_llm_d, res_glm_d)),
+      "pearson OK"  = isTRUE(all.equal(res_llm_p, res_glm_p)),
+      "resoibse OK" = isTRUE(all.equal(res_llm_r, res_glm_r))))
deviance OK  pearson OK resoibse OK 
       TRUE        TRUE        TRUE 
> 
> cat(.tmp, sep = "\n")                         ## need to allow this to be quiet
Re-fitting to get frequencies and fitted values
Re-fitting to get frequencies and fitted values
Re-fitting to get frequencies and fitted values
> 
> ## update and anova check
> 
> mod_llm_2 <- update(mod_llm, . ~ . - sex + sex*hs)
> mod_glm_2 <- update(mod_glm, . ~ . - sex + sex*hs)
> 
> anova(mod_llm, mod_llm_2, test = "LR")     ### check visually ("LR" could not be "LRT")
LR tests for hierarchical log-linear models

Model 1:
 ~hs * phs * fol + sex 
Model 2:
 . ~ hs + phs + fol + sex + hs:phs + hs:fol + phs:fol + hs:sex + hs:phs:fol 

           Deviance df Delta(Dev) Delta(df) P(> Delta(Dev)
Model 1   1013.0065 83                                    
Model 2    591.7199 81   421.2866         2              0
Saturated    0.0000  0   591.7199        81              0
> anova(mod_glm, mod_glm_2, test = "LR")     ### check visually ("LR" could     be "LRT")
Analysis of Deviance Table

Model 1: f ~ hs * phs * fol + sex
Model 2: f ~ hs + phs + fol + sex + hs:phs + hs:fol + phs:fol + hs:sex + 
    hs:phs:fol
  Resid. Df Resid. Dev Df Deviance  Pr(>Chi)    
1        83    1013.01                          
2        81     591.72  2   421.29 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## extractAIC check
> 
> daic_llm <- extractAIC(mod_llm_2) - extractAIC(mod_llm)
> daic_glm <- extractAIC(mod_glm_2) - extractAIC(mod_glm)
> 
> all.equal(daic_llm, daic_glm)
[1] TRUE
> 
> ## Alternative check
> d_llm <- dropterm(mod_llm_2, test = "Chisq")
> d_glm <- dropterm(mod_glm_2, test = "Chisq")
> 
> all.equal(diff(d_llm$AIC), diff(d_glm$AIC))
[1] TRUE
> 
> # rm(.tmp, .tmp_d, .tmp_p, .tmp_r)
> # rm(list = c("d_glm", "d_llm", "daic_glm", "daic_llm", "minn38_res",
> #             "minn38_tab", "mod_glm", "mod_glm_2", "mod_llm", "mod_llm_2"))
> 
> 
