
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "googlesheets4"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('googlesheets4')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cell-specification")
> ### * cell-specification
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cell-specification
> ### Title: Specify cells
> ### Aliases: cell-specification cell_limits cell_rows cell_cols anchored
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token() && rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss <- gs4_example("mini-gap")
+ 
+ # Specify only the rows or only the columns
+ read_sheet(ss, range = cell_rows(1:3))
+ read_sheet(ss, range = cell_cols("C:D"))
+ read_sheet(ss, range = cell_cols(1))
+ 
+ # Specify upper or lower bound on row or column
+ read_sheet(ss, range = cell_rows(c(NA, 4)))
+ read_sheet(ss, range = cell_cols(c(NA, "D")))
+ read_sheet(ss, range = cell_rows(c(3, NA)))
+ read_sheet(ss, range = cell_cols(c(2, NA)))
+ read_sheet(ss, range = cell_cols(c("C", NA)))
+ 
+ # Specify a partially open rectangle
+ read_sheet(ss, range = cell_limits(c(2, 3), c(NA, NA)), col_names = FALSE)
+ read_sheet(ss, range = cell_limits(c(1, 2), c(NA, 4)))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("googlesheets4-configuration")
> ### * googlesheets4-configuration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: googlesheets4-configuration
> ### Title: googlesheets4 configuration
> ### Aliases: googlesheets4-configuration local_gs4_quiet with_gs4_quiet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # message: "Creating new Sheet ..."
+ (ss <- gs4_create("gs4-quiet-demo", sheets = "alpha"))
+ 
+ # message: "Editing ..., Writing ..."
+ range_write(ss, data = data.frame(x = 1, y = "a"))
+ 
+ # suppress messages for a small amount of code
+ with_gs4_quiet(
+   ss %>% sheet_append(data.frame(x = 2, y = "b"))
+ )
+ 
+ # message: "Writing ..., Appending ..."
+ ss %>% sheet_append(data.frame(x = 3, y = "c"))
+ 
+ # suppress messages until end of current scope
+ local_gs4_quiet()
+ ss %>% sheet_append(data.frame(x = 4, y = "d"))
+ 
+ # see that all the data was, in fact, written
+ read_sheet(ss)
+ 
+ # clean up
+ gs4_find("gs4-quiet-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_auth")
> ### * gs4_auth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_auth
> ### Title: Authorize googlesheets4
> ### Aliases: gs4_auth
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # load/refresh existing credentials, if available
+ # otherwise, go to browser for authentication and authorization
+ gs4_auth()
+ 
+ # indicate the specific identity you want to auth as
+ gs4_auth(email = "jenny@example.com")
+ 
+ # force a new browser dance, i.e. don't even try to use existing user
+ # credentials
+ gs4_auth(email = NA)
+ 
+ # use a 'read only' scope, so it's impossible to edit or delete Sheets
+ gs4_auth(scopes = "spreadsheets.readonly")
+ 
+ # use a service account token
+ gs4_auth(path = "foofy-83ee9e7c9c48.json")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_auth_configure")
> ### * gs4_auth_configure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_auth_configure
> ### Title: Edit and view auth configuration
> ### Aliases: gs4_auth_configure gs4_api_key gs4_oauth_client
> 
> ### ** Examples
> 
> # see and store the current user-configured OAuth client (probably `NULL`)
> (original_client <- gs4_oauth_client())
NULL
> 
> # see and store the current user-configured API key (probably `NULL`)
> (original_api_key <- gs4_api_key())
NULL
> 
> # the preferred way to configure your own client is via a JSON file
> # downloaded from Google Developers Console
> # this example JSON is indicative, but fake
> path_to_json <- system.file(
+   "extdata", "client_secret_installed.googleusercontent.com.json",
+   package = "gargle"
+ )
> gs4_auth_configure(path = path_to_json)
> 
> # this is also obviously a fake API key
> gs4_auth_configure(api_key = "the_key_I_got_for_a_google_API")
> 
> # confirm the changes
> gs4_oauth_client()
<gargle_oauth_client>
name: a_project_d1c5a8066d2cbe48e8d94514dd286163
id: abc.apps.googleusercontent.com
secret: <REDACTED>
type: installed
redirect_uris: http://localhost
> gs4_api_key()
[1] "the_key_I_got_for_a_google_API"
> 
> # restore original auth config
> gs4_auth_configure(client = original_client, api_key = original_api_key)
> 
> 
> 
> cleanEx()
> nameEx("gs4_browse")
> ### * gs4_browse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_browse
> ### Title: Visit a Sheet in a web browser
> ### Aliases: gs4_browse
> 
> ### ** Examples
> 
> gs4_example("mini-gap") %>% gs4_browse()
> 
> 
> 
> cleanEx()
> nameEx("gs4_create")
> ### * gs4_create
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_create
> ### Title: Create a new Sheet
> ### Aliases: gs4_create
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gs4_create("gs4-create-demo-1")
+ 
+ gs4_create("gs4-create-demo-2", locale = "en_CA")
+ 
+ gs4_create(
+   "gs4-create-demo-3",
+   locale = "fr_FR",
+   timeZone = "Europe/Paris"
+ )
+ 
+ gs4_create(
+   "gs4-create-demo-4",
+   sheets = c("alpha", "beta")
+ )
+ 
+ my_data <- data.frame(x = 1)
+ gs4_create(
+   "gs4-create-demo-5",
+   sheets = my_data
+ )
+ 
+ gs4_create(
+   "gs4-create-demo-6",
+   sheets = list(chickwts = head(chickwts), mtcars = head(mtcars))
+ )
+ 
+ # Clean up
+ gs4_find("gs4-create-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_deauth")
> ### * gs4_deauth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_deauth
> ### Title: Suspend authorization
> ### Aliases: gs4_deauth
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gs4_deauth()
+ gs4_user()
+ 
+ # get metadata on the public 'deaths' spreadsheet
+ gs4_example("deaths") %>%
+   gs4_get()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_endpoints")
> ### * gs4_endpoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_endpoints
> ### Title: List Sheets endpoints
> ### Aliases: gs4_endpoints
> 
> ### ** Examples
> 
> str(gs4_endpoints(), max.level = 2)
List of 17
 $ sheets.spreadsheets.getByDataFilter               :List of 9
  ..$ id            : chr "sheets.spreadsheets.getByDataFilter"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}:getByDataFilter"
  ..$ parameters    :List of 14
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from G"| __truncated__
  ..$ request       : chr "GetSpreadsheetByDataFilterRequest"
  ..$ response      : chr "Spreadsheet"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.batchUpdate                   :List of 9
  ..$ id            : chr "sheets.spreadsheets.batchUpdate"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}:batchUpdate"
  ..$ parameters    :List of 16
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request "| __truncated__
  ..$ request       : chr "BatchUpdateSpreadsheetRequest"
  ..$ response      : chr "BatchUpdateSpreadsheetResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.create                        :List of 9
  ..$ id            : chr "sheets.spreadsheets.create"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets"
  ..$ parameters    :List of 19
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Creates a spreadsheet, returning the newly created spreadsheet."
  ..$ request       : chr "Spreadsheet"
  ..$ response      : chr "Spreadsheet"
  ..$ parameterOrder: list()
 $ sheets.spreadsheets.get                           :List of 8
  ..$ id            : chr "sheets.spreadsheets.get"
  ..$ httpMethod    : chr "GET"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}"
  ..$ parameters    :List of 14
  ..$ scopes        : chr "drive, drive.file, drive.readonly, spreadsheets, spreadsheets.readonly"
  ..$ description   : chr "Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within gr"| __truncated__
  ..$ response      : chr "Spreadsheet"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.values.batchUpdate            :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.batchUpdate"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values:batchUpdate"
  ..$ parameters    :List of 17
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOpt"| __truncated__
  ..$ request       : chr "BatchUpdateValuesRequest"
  ..$ response      : chr "BatchUpdateValuesResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.values.batchGetByDataFilter   :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.batchGetByDataFilter"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter"
  ..$ parameters    :List of 16
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Returns one or more ranges of values that match the specified data filters. The caller must specify the spreads"| __truncated__
  ..$ request       : chr "BatchGetValuesByDataFilterRequest"
  ..$ response      : chr "BatchGetValuesByDataFilterResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.values.get                    :List of 8
  ..$ id            : chr "sheets.spreadsheets.values.get"
  ..$ httpMethod    : chr "GET"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values/{range}"
  ..$ parameters    :List of 16
  ..$ scopes        : chr "drive, drive.file, drive.readonly, spreadsheets, spreadsheets.readonly"
  ..$ description   : chr "Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range."
  ..$ response      : chr "ValueRange"
  ..$ parameterOrder: chr [1:2] "spreadsheetId" "range"
 $ sheets.spreadsheets.values.clear                  :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.clear"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values/{range}:clear"
  ..$ parameters    :List of 13
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared"| __truncated__
  ..$ request       : chr "ClearValuesRequest"
  ..$ response      : chr "ClearValuesResponse"
  ..$ parameterOrder: chr [1:2] "spreadsheetId" "range"
 $ sheets.spreadsheets.values.batchUpdateByDataFilter:List of 9
  ..$ id            : chr "sheets.spreadsheets.values.batchUpdateByDataFilter"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter"
  ..$ parameters    :List of 17
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOpt"| __truncated__
  ..$ request       : chr "BatchUpdateValuesByDataFilterRequest"
  ..$ response      : chr "BatchUpdateValuesByDataFilterResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.values.update                 :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.update"
  ..$ httpMethod    : chr "PUT"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values/{range}"
  ..$ parameters    :List of 20
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption."
  ..$ request       : chr "ValueRange"
  ..$ response      : chr "UpdateValuesResponse"
  ..$ parameterOrder: chr [1:2] "spreadsheetId" "range"
 $ sheets.spreadsheets.values.append                 :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.append"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values/{range}:append"
  ..$ parameters    :List of 21
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" withi"| __truncated__
  ..$ request       : chr "ValueRange"
  ..$ response      : chr "AppendValuesResponse"
  ..$ parameterOrder: chr [1:2] "spreadsheetId" "range"
 $ sheets.spreadsheets.values.batchClearByDataFilter :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.batchClearByDataFilter"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter"
  ..$ parameters    :List of 13
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or m"| __truncated__
  ..$ request       : chr "BatchClearValuesByDataFilterRequest"
  ..$ response      : chr "BatchClearValuesByDataFilterResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.values.batchGet               :List of 8
  ..$ id            : chr "sheets.spreadsheets.values.batchGet"
  ..$ httpMethod    : chr "GET"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values:batchGet"
  ..$ parameters    :List of 16
  ..$ scopes        : chr "drive, drive.file, drive.readonly, spreadsheets, spreadsheets.readonly"
  ..$ description   : chr "Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges."
  ..$ response      : chr "BatchGetValuesResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.values.batchClear             :List of 9
  ..$ id            : chr "sheets.spreadsheets.values.batchClear"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/values:batchClear"
  ..$ parameters    :List of 13
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or m"| __truncated__
  ..$ request       : chr "BatchClearValuesRequest"
  ..$ response      : chr "BatchClearValuesResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.sheets.copyTo                 :List of 9
  ..$ id            : chr "sheets.spreadsheets.sheets.copyTo"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo"
  ..$ parameters    :List of 14
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet."
  ..$ request       : chr "CopySheetToAnotherSpreadsheetRequest"
  ..$ response      : chr "SheetProperties"
  ..$ parameterOrder: chr [1:2] "spreadsheetId" "sheetId"
 $ sheets.spreadsheets.developerMetadata.search      :List of 9
  ..$ id            : chr "sheets.spreadsheets.developerMetadata.search"
  ..$ httpMethod    : chr "POST"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/developerMetadata:search"
  ..$ parameters    :List of 13
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a Devel"| __truncated__
  ..$ request       : chr "SearchDeveloperMetadataRequest"
  ..$ response      : chr "SearchDeveloperMetadataResponse"
  ..$ parameterOrder: chr "spreadsheetId"
 $ sheets.spreadsheets.developerMetadata.get         :List of 8
  ..$ id            : chr "sheets.spreadsheets.developerMetadata.get"
  ..$ httpMethod    : chr "GET"
  ..$ path          : 'fs_path' chr "/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}"
  ..$ parameters    :List of 13
  ..$ scopes        : chr "drive, drive.file, spreadsheets"
  ..$ description   : chr "Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the develo"| __truncated__
  ..$ response      : chr "DeveloperMetadata"
  ..$ parameterOrder: chr [1:2] "spreadsheetId" "metadataId"
> gs4_endpoints("sheets.spreadsheets.values.get")
$sheets.spreadsheets.values.get
$sheets.spreadsheets.values.get$id
[1] "sheets.spreadsheets.values.get"

$sheets.spreadsheets.values.get$httpMethod
[1] "GET"

$sheets.spreadsheets.values.get$path
/v4/spreadsheets/{spreadsheetId}/values/{range}

$sheets.spreadsheets.values.get$parameters
$sheets.spreadsheets.values.get$parameters$majorDimension
$sheets.spreadsheets.values.get$parameters$majorDimension$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$majorDimension$enum
[1] "DIMENSION_UNSPECIFIED" "ROWS"                  "COLUMNS"              

$sheets.spreadsheets.values.get$parameters$majorDimension$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$majorDimension$description
[1] "The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns `[[1,3],[2,4]]`."

$sheets.spreadsheets.values.get$parameters$majorDimension$enumDescriptions
[1] "The default value, do not use."      "Operates on the rows of a sheet."   
[3] "Operates on the columns of a sheet."


$sheets.spreadsheets.values.get$parameters$dateTimeRenderOption
$sheets.spreadsheets.values.get$parameters$dateTimeRenderOption$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$dateTimeRenderOption$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$dateTimeRenderOption$description
[1] "How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER."

$sheets.spreadsheets.values.get$parameters$dateTimeRenderOption$enum
[1] "SERIAL_NUMBER"    "FORMATTED_STRING"

$sheets.spreadsheets.values.get$parameters$dateTimeRenderOption$enumDescriptions
[1] "Instructs date, time, datetime, and duration fields to be output as doubles in \"serial number\" format, as popularized by Lotus 1-2-3. The whole number portion of the value (left of the decimal) counts the days since December 30th 1899. The fractional portion (right of the decimal) counts the time as a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2 because it's 2 days after December 30th 1899, and .5 because noon is half a day. February 1st 1900 at 3pm would be 33.625. This correctly treats the year 1900 as not a leap year."
[2] "Instructs date, time, datetime, and duration fields to be output as strings in their given number format (which depends on the spreadsheet locale)."                                                                                                                                                                                                                                                                                                                                                                                                                           


$sheets.spreadsheets.values.get$parameters$valueRenderOption
$sheets.spreadsheets.values.get$parameters$valueRenderOption$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$valueRenderOption$enumDescriptions
[1] "Values will be calculated & formatted in the reply according to the cell's formatting. Formatting is based on the spreadsheet's locale, not the requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return `\"$1.23\"`."
[2] "Values will be calculated, but not formatted in the reply. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return the number `1.23`."                                                                                                         
[3] "Values will not be calculated. The reply will include the formulas. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would return `\"=A1\"`."                                                                                                          

$sheets.spreadsheets.values.get$parameters$valueRenderOption$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$valueRenderOption$description
[1] "How values should be represented in the output. The default render option is FORMATTED_VALUE."

$sheets.spreadsheets.values.get$parameters$valueRenderOption$enum
[1] "FORMATTED_VALUE"   "UNFORMATTED_VALUE" "FORMULA"          


$sheets.spreadsheets.values.get$parameters$spreadsheetId
$sheets.spreadsheets.values.get$parameters$spreadsheetId$required
[1] TRUE

$sheets.spreadsheets.values.get$parameters$spreadsheetId$location
[1] "path"

$sheets.spreadsheets.values.get$parameters$spreadsheetId$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$spreadsheetId$description
[1] "The ID of the spreadsheet to retrieve data from."


$sheets.spreadsheets.values.get$parameters$range
$sheets.spreadsheets.values.get$parameters$range$required
[1] TRUE

$sheets.spreadsheets.values.get$parameters$range$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$range$location
[1] "path"

$sheets.spreadsheets.values.get$parameters$range$description
[1] "The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from."


$sheets.spreadsheets.values.get$parameters$uploadType
$sheets.spreadsheets.values.get$parameters$uploadType$description
[1] "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."

$sheets.spreadsheets.values.get$parameters$uploadType$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$uploadType$type
[1] "string"


$sheets.spreadsheets.values.get$parameters$callback
$sheets.spreadsheets.values.get$parameters$callback$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$callback$description
[1] "JSONP"

$sheets.spreadsheets.values.get$parameters$callback$type
[1] "string"


$sheets.spreadsheets.values.get$parameters$fields
$sheets.spreadsheets.values.get$parameters$fields$description
[1] "Selector specifying which fields to include in a partial response."

$sheets.spreadsheets.values.get$parameters$fields$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$fields$location
[1] "query"


$sheets.spreadsheets.values.get$parameters$`$.xgafv`
$sheets.spreadsheets.values.get$parameters$`$.xgafv`$description
[1] "V1 error format."

$sheets.spreadsheets.values.get$parameters$`$.xgafv`$enumDescriptions
[1] "v1 error format" "v2 error format"

$sheets.spreadsheets.values.get$parameters$`$.xgafv`$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$`$.xgafv`$enum
[1] "1" "2"

$sheets.spreadsheets.values.get$parameters$`$.xgafv`$location
[1] "query"


$sheets.spreadsheets.values.get$parameters$upload_protocol
$sheets.spreadsheets.values.get$parameters$upload_protocol$description
[1] "Upload protocol for media (e.g. \"raw\", \"multipart\")."

$sheets.spreadsheets.values.get$parameters$upload_protocol$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$upload_protocol$location
[1] "query"


$sheets.spreadsheets.values.get$parameters$prettyPrint
$sheets.spreadsheets.values.get$parameters$prettyPrint$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$prettyPrint$description
[1] "Returns response with indentations and line breaks."

$sheets.spreadsheets.values.get$parameters$prettyPrint$type
[1] "boolean"

$sheets.spreadsheets.values.get$parameters$prettyPrint$default
[1] "true"


$sheets.spreadsheets.values.get$parameters$quotaUser
$sheets.spreadsheets.values.get$parameters$quotaUser$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$quotaUser$description
[1] "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."

$sheets.spreadsheets.values.get$parameters$quotaUser$location
[1] "query"


$sheets.spreadsheets.values.get$parameters$alt
$sheets.spreadsheets.values.get$parameters$alt$description
[1] "Data format for response."

$sheets.spreadsheets.values.get$parameters$alt$enumDescriptions
[1] "Responses with Content-Type of application/json"      
[2] "Media download with context-dependent Content-Type"   
[3] "Responses with Content-Type of application/x-protobuf"

$sheets.spreadsheets.values.get$parameters$alt$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$alt$default
[1] "json"

$sheets.spreadsheets.values.get$parameters$alt$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$alt$enum
[1] "json"  "media" "proto"


$sheets.spreadsheets.values.get$parameters$oauth_token
$sheets.spreadsheets.values.get$parameters$oauth_token$description
[1] "OAuth 2.0 token for the current user."

$sheets.spreadsheets.values.get$parameters$oauth_token$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$oauth_token$type
[1] "string"


$sheets.spreadsheets.values.get$parameters$key
$sheets.spreadsheets.values.get$parameters$key$description
[1] "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."

$sheets.spreadsheets.values.get$parameters$key$type
[1] "string"

$sheets.spreadsheets.values.get$parameters$key$location
[1] "query"


$sheets.spreadsheets.values.get$parameters$access_token
$sheets.spreadsheets.values.get$parameters$access_token$location
[1] "query"

$sheets.spreadsheets.values.get$parameters$access_token$description
[1] "OAuth access token."

$sheets.spreadsheets.values.get$parameters$access_token$type
[1] "string"



$sheets.spreadsheets.values.get$scopes
[1] "drive, drive.file, drive.readonly, spreadsheets, spreadsheets.readonly"

$sheets.spreadsheets.values.get$description
[1] "Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range."

$sheets.spreadsheets.values.get$response
[1] "ValueRange"

$sheets.spreadsheets.values.get$parameterOrder
[1] "spreadsheetId" "range"        


> gs4_endpoints(4)
$sheets.spreadsheets.get
$sheets.spreadsheets.get$id
[1] "sheets.spreadsheets.get"

$sheets.spreadsheets.get$httpMethod
[1] "GET"

$sheets.spreadsheets.get$path
/v4/spreadsheets/{spreadsheetId}

$sheets.spreadsheets.get$parameters
$sheets.spreadsheets.get$parameters$ranges
$sheets.spreadsheets.get$parameters$ranges$type
[1] "string"

$sheets.spreadsheets.get$parameters$ranges$location
[1] "query"

$sheets.spreadsheets.get$parameters$ranges$description
[1] "The ranges to retrieve from the spreadsheet."

$sheets.spreadsheets.get$parameters$ranges$repeated
[1] TRUE


$sheets.spreadsheets.get$parameters$includeGridData
$sheets.spreadsheets.get$parameters$includeGridData$location
[1] "query"

$sheets.spreadsheets.get$parameters$includeGridData$description
[1] "True if grid data should be returned. This parameter is ignored if a field mask was set in the request."

$sheets.spreadsheets.get$parameters$includeGridData$type
[1] "boolean"


$sheets.spreadsheets.get$parameters$spreadsheetId
$sheets.spreadsheets.get$parameters$spreadsheetId$required
[1] TRUE

$sheets.spreadsheets.get$parameters$spreadsheetId$description
[1] "The spreadsheet to request."

$sheets.spreadsheets.get$parameters$spreadsheetId$location
[1] "path"

$sheets.spreadsheets.get$parameters$spreadsheetId$type
[1] "string"


$sheets.spreadsheets.get$parameters$uploadType
$sheets.spreadsheets.get$parameters$uploadType$description
[1] "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."

$sheets.spreadsheets.get$parameters$uploadType$location
[1] "query"

$sheets.spreadsheets.get$parameters$uploadType$type
[1] "string"


$sheets.spreadsheets.get$parameters$callback
$sheets.spreadsheets.get$parameters$callback$location
[1] "query"

$sheets.spreadsheets.get$parameters$callback$description
[1] "JSONP"

$sheets.spreadsheets.get$parameters$callback$type
[1] "string"


$sheets.spreadsheets.get$parameters$fields
$sheets.spreadsheets.get$parameters$fields$description
[1] "Selector specifying which fields to include in a partial response."

$sheets.spreadsheets.get$parameters$fields$type
[1] "string"

$sheets.spreadsheets.get$parameters$fields$location
[1] "query"


$sheets.spreadsheets.get$parameters$`$.xgafv`
$sheets.spreadsheets.get$parameters$`$.xgafv`$description
[1] "V1 error format."

$sheets.spreadsheets.get$parameters$`$.xgafv`$enumDescriptions
[1] "v1 error format" "v2 error format"

$sheets.spreadsheets.get$parameters$`$.xgafv`$type
[1] "string"

$sheets.spreadsheets.get$parameters$`$.xgafv`$enum
[1] "1" "2"

$sheets.spreadsheets.get$parameters$`$.xgafv`$location
[1] "query"


$sheets.spreadsheets.get$parameters$upload_protocol
$sheets.spreadsheets.get$parameters$upload_protocol$description
[1] "Upload protocol for media (e.g. \"raw\", \"multipart\")."

$sheets.spreadsheets.get$parameters$upload_protocol$type
[1] "string"

$sheets.spreadsheets.get$parameters$upload_protocol$location
[1] "query"


$sheets.spreadsheets.get$parameters$prettyPrint
$sheets.spreadsheets.get$parameters$prettyPrint$location
[1] "query"

$sheets.spreadsheets.get$parameters$prettyPrint$description
[1] "Returns response with indentations and line breaks."

$sheets.spreadsheets.get$parameters$prettyPrint$type
[1] "boolean"

$sheets.spreadsheets.get$parameters$prettyPrint$default
[1] "true"


$sheets.spreadsheets.get$parameters$quotaUser
$sheets.spreadsheets.get$parameters$quotaUser$type
[1] "string"

$sheets.spreadsheets.get$parameters$quotaUser$description
[1] "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."

$sheets.spreadsheets.get$parameters$quotaUser$location
[1] "query"


$sheets.spreadsheets.get$parameters$alt
$sheets.spreadsheets.get$parameters$alt$description
[1] "Data format for response."

$sheets.spreadsheets.get$parameters$alt$enumDescriptions
[1] "Responses with Content-Type of application/json"      
[2] "Media download with context-dependent Content-Type"   
[3] "Responses with Content-Type of application/x-protobuf"

$sheets.spreadsheets.get$parameters$alt$type
[1] "string"

$sheets.spreadsheets.get$parameters$alt$default
[1] "json"

$sheets.spreadsheets.get$parameters$alt$location
[1] "query"

$sheets.spreadsheets.get$parameters$alt$enum
[1] "json"  "media" "proto"


$sheets.spreadsheets.get$parameters$oauth_token
$sheets.spreadsheets.get$parameters$oauth_token$description
[1] "OAuth 2.0 token for the current user."

$sheets.spreadsheets.get$parameters$oauth_token$location
[1] "query"

$sheets.spreadsheets.get$parameters$oauth_token$type
[1] "string"


$sheets.spreadsheets.get$parameters$key
$sheets.spreadsheets.get$parameters$key$description
[1] "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."

$sheets.spreadsheets.get$parameters$key$type
[1] "string"

$sheets.spreadsheets.get$parameters$key$location
[1] "query"


$sheets.spreadsheets.get$parameters$access_token
$sheets.spreadsheets.get$parameters$access_token$location
[1] "query"

$sheets.spreadsheets.get$parameters$access_token$description
[1] "OAuth access token."

$sheets.spreadsheets.get$parameters$access_token$type
[1] "string"



$sheets.spreadsheets.get$scopes
[1] "drive, drive.file, drive.readonly, spreadsheets, spreadsheets.readonly"

$sheets.spreadsheets.get$description
[1] "Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges."

$sheets.spreadsheets.get$response
[1] "Spreadsheet"

$sheets.spreadsheets.get$parameterOrder
[1] "spreadsheetId"


> 
> 
> 
> cleanEx()
> nameEx("gs4_examples")
> ### * gs4_examples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_examples
> ### Title: Example Sheets
> ### Aliases: gs4_examples gs4_example
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gs4_examples()
+ gs4_examples("gap")
+ 
+ gs4_example("gapminder")
+ gs4_example("deaths")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_find")
> ### * gs4_find
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_find
> ### Title: Find Google Sheets
> ### Aliases: gs4_find
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # see all your Sheets
+ gs4_find()
+ 
+ # see 5 Sheets, prioritized by creation time
+ x <- gs4_find(order_by = "createdTime desc", n_max = 5)
+ x
+ 
+ # hoist the creation date, using other packages in the tidyverse
+ # x %>%
+ #   tidyr::hoist(drive_resource, created_on = "createdTime") %>%
+ #   dplyr::mutate(created_on = as.Date(created_on))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_fodder")
> ### * gs4_fodder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_fodder
> ### Title: Create useful spreadsheet filler
> ### Aliases: gs4_fodder
> 
> ### ** Examples
> 
> gs4_fodder()
     A   B   C   D   E   F   G   H   I   J
1   A2  B2  C2  D2  E2  F2  G2  H2  I2  J2
2   A3  B3  C3  D3  E3  F3  G3  H3  I3  J3
3   A4  B4  C4  D4  E4  F4  G4  H4  I4  J4
4   A5  B5  C5  D5  E5  F5  G5  H5  I5  J5
5   A6  B6  C6  D6  E6  F6  G6  H6  I6  J6
6   A7  B7  C7  D7  E7  F7  G7  H7  I7  J7
7   A8  B8  C8  D8  E8  F8  G8  H8  I8  J8
8   A9  B9  C9  D9  E9  F9  G9  H9  I9  J9
9  A10 B10 C10 D10 E10 F10 G10 H10 I10 J10
10 A11 B11 C11 D11 E11 F11 G11 H11 I11 J11
> gs4_fodder(5, 3)
   A  B  C
1 A2 B2 C2
2 A3 B3 C3
3 A4 B4 C4
4 A5 B5 C5
5 A6 B6 C6
> 
> 
> 
> cleanEx()
> nameEx("gs4_formula")
> ### * gs4_formula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_formula
> ### Title: Class for Google Sheets formulas
> ### Aliases: gs4_formula
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ dat <- data.frame(x = c(1, 5, 3, 2, 4, 6))
+ 
+ ss <- gs4_create("gs4-formula-demo", sheets = dat)
+ ss
+ 
+ summaries <- tibble::tribble(
+   ~desc, ~summaries,
+   "max", "=max(A:A)",
+   "sum", "=sum(A:A)",
+   "min", "=min(A:A)",
+   "sparkline", "=SPARKLINE(A:A, {\"color\", \"blue\"})"
+ )
+ 
+ # explicitly declare a column as `googlesheets4_formula`
+ summaries$summaries <- gs4_formula(summaries$summaries)
+ summaries
+ 
+ range_write(ss, data = summaries, range = "C1", reformat = FALSE)
+ 
+ miscellany <- tibble::tribble(
+   ~desc, ~example,
+   "hyperlink", "=HYPERLINK(\"http://www.google.com/\",\"Google\")",
+   "image", "=IMAGE(\"https://www.google.com/images/srpr/logo3w.png\")"
+ )
+ miscellany$example <- gs4_formula(miscellany$example)
+ miscellany
+ 
+ sheet_write(miscellany, ss = ss)
+ 
+ # clean up
+ gs4_find("gs4-formula-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_get")
> ### * gs4_get
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_get
> ### Title: Get Sheet metadata
> ### Aliases: gs4_get
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gs4_get(gs4_example("mini-gap"))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_has_token")
> ### * gs4_has_token
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_has_token
> ### Title: Is there a token on hand?
> ### Aliases: gs4_has_token
> 
> ### ** Examples
> 
> gs4_has_token()
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("gs4_random")
> ### * gs4_random
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_random
> ### Title: Generate a random Sheet name
> ### Aliases: gs4_random
> 
> ### ** Examples
> 
> gs4_random()
[1] "comfy-midge"
> 
> 
> 
> cleanEx()
> nameEx("gs4_scopes")
> ### * gs4_scopes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_scopes
> ### Title: Produce scopes specific to the Sheets API
> ### Aliases: gs4_scopes
> 
> ### ** Examples
> 
> gs4_scopes("spreadsheets")
[1] "https://www.googleapis.com/auth/spreadsheets"
> gs4_scopes("spreadsheets.readonly")
[1] "https://www.googleapis.com/auth/spreadsheets.readonly"
> gs4_scopes("drive")
[1] "https://www.googleapis.com/auth/drive"
> gs4_scopes()
                                           spreadsheets 
         "https://www.googleapis.com/auth/spreadsheets" 
                                  spreadsheets.readonly 
"https://www.googleapis.com/auth/spreadsheets.readonly" 
                                                  drive 
                "https://www.googleapis.com/auth/drive" 
                                         drive.readonly 
       "https://www.googleapis.com/auth/drive.readonly" 
                                             drive.file 
           "https://www.googleapis.com/auth/drive.file" 
> 
> 
> 
> cleanEx()
> nameEx("gs4_token")
> ### * gs4_token
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_token
> ### Title: Produce configured token
> ### Aliases: gs4_token
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ req <- request_generate(
+   "sheets.spreadsheets.get",
+   list(spreadsheetId = "abc"),
+   token = gs4_token()
+ )
+ req
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gs4_user")
> ### * gs4_user
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gs4_user
> ### Title: Get info on current user
> ### Aliases: gs4_user
> 
> ### ** Examples
> 
> gs4_user()
ℹ Not logged in as any specific Google user.
> 
> 
> 
> cleanEx()
> nameEx("range_autofit")
> ### * range_autofit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_autofit
> ### Title: Auto-fit columns or rows to the data
> ### Aliases: range_autofit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ dat <- tibble::tibble(
+   fruit = c("date", "lime", "pear", "plum")
+ )
+ 
+ ss <- gs4_create("range-autofit-demo", sheets = dat)
+ ss
+ 
+ # open in the browser
+ gs4_browse(ss)
+ 
+ # shrink column A to fit the short fruit names
+ range_autofit(ss)
+ # in the browser, notice how the column width shrank
+ 
+ # send some longer fruit names
+ dat2 <- tibble::tibble(
+   fruit = c("cucumber", "honeydew")
+ )
+ ss %>% sheet_append(dat2)
+ # in the browser, see that column A is now too narrow to show the data
+ 
+ range_autofit(ss)
+ # in the browser, see the column A reveals all the data now
+ 
+ # clean up
+ gs4_find("range-autofit-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("range_delete")
> ### * range_delete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_delete
> ### Title: Delete cells
> ### Aliases: range_delete
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # create a data frame to use as initial data
+ df <- gs4_fodder(10)
+ 
+ # create Sheet
+ ss <- gs4_create("range-delete-example", sheets = list(df))
+ 
+ # delete some rows
+ range_delete(ss, range = "2:4")
+ 
+ # delete a column
+ range_delete(ss, range = "C")
+ 
+ # delete a rectangle and specify how to shift remaining cells
+ range_delete(ss, range = "B3:F4", shift = "left")
+ 
+ # clean up
+ gs4_find("range-delete-example") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("range_flood")
> ### * range_flood
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_flood
> ### Title: Flood or clear a range of cells
> ### Aliases: range_flood range_clear
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # create a data frame to use as initial data
+ df <- gs4_fodder(10)
+ 
+ # create Sheet
+ ss <- gs4_create("range-flood-demo", sheets = list(df))
+ 
+ # default behavior (`cell = NULL`): clear value and format
+ range_flood(ss, range = "A1:B3")
+ 
+ # clear value but preserve format
+ range_flood(ss, range = "C1:D3", reformat = FALSE)
+ 
+ # send new value
+ range_flood(ss, range = "4:5", cell = ";-)")
+ 
+ # send formatting
+ # WARNING: use these unexported, internal functions at your own risk!
+ # This not (yet) officially supported, but it's possible.
+ blue_background <- googlesheets4:::CellData(
+   userEnteredFormat = googlesheets4:::new(
+     "CellFormat",
+     backgroundColor = googlesheets4:::new(
+       "Color",
+       red = 159 / 255, green = 183 / 255, blue = 196 / 255
+     )
+   )
+ )
+ range_flood(ss, range = "I:J", cell = blue_background)
+ 
+ # range_clear() is a shortcut where `cell = NULL` always
+ range_clear(ss, range = "9:9")
+ range_clear(ss, range = "10:10", reformat = FALSE)
+ 
+ # clean up
+ gs4_find("range-flood-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("range_read")
> ### * range_read
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_read
> ### Title: Read a Sheet into a data frame
> ### Aliases: range_read read_sheet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss <- gs4_example("deaths")
+ read_sheet(ss, range = "A5:F15")
+ read_sheet(ss, range = "other!A5:F15", col_types = "ccilDD")
+ read_sheet(ss, range = "arts_data", col_types = "ccilDD")
+ 
+ read_sheet(gs4_example("mini-gap"))
+ read_sheet(
+   gs4_example("mini-gap"),
+   sheet = "Europe",
+   range = "A:D",
+   col_types = "ccid"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("range_read_cells")
> ### * range_read_cells
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_read_cells
> ### Title: Read cells from a Sheet
> ### Aliases: range_read_cells
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ range_read_cells(gs4_example("deaths"), range = "arts_data")
+ 
+ # if you want detailed and exhaustive cell data, do this
+ range_read_cells(
+   gs4_example("formulas-and-formats"),
+   cell_data = "full",
+   discard_empty = FALSE
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("range_speedread")
> ### * range_speedread
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_speedread
> ### Title: Read Sheet as CSV
> ### Aliases: range_speedread
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ if (require("readr")) {
+   # since cell type is not available, use readr's col type specification
+   range_speedread(
+     gs4_example("deaths"),
+     sheet = "other",
+     range = "A5:F15",
+     col_types = cols(
+       Age = col_integer(),
+       `Date of birth` = col_date("%m/%d/%Y"),
+       `Date of death` = col_date("%m/%d/%Y")
+     )
+   )
+ }
+ 
+ # write a Sheet that, by default, is NOT world-readable
+ (ss <- sheet_write(chickwts))
+ 
+ # demo that range_speedread() sends a token, which is why we can read this
+ range_speedread(ss)
+ 
+ # clean up
+ googledrive::drive_trash(ss)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("range_write")
> ### * range_write
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: range_write
> ### Title: (Over)write new data into a range
> ### Aliases: range_write
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # create a Sheet with some initial, empty (work)sheets
+ (ss <- gs4_create("range-write-demo", sheets = c("alpha", "beta")))
+ 
+ df <- data.frame(
+   x = 1:3,
+   y = letters[1:3]
+ )
+ 
+ #  write df somewhere other than the "upper left corner"
+ range_write(ss, data = df, range = "D6")
+ 
+ # view your magnificent creation in the browser
+ gs4_browse(ss)
+ 
+ # send data of disparate types to a 1-row rectangle
+ dat <- tibble::tibble(
+   string = "string",
+   logical = TRUE,
+   datetime = Sys.time()
+ )
+ range_write(ss, data = dat, sheet = "beta", col_names = FALSE)
+ 
+ # send data of disparate types to a 1-column rectangle
+ dat <- tibble::tibble(
+   x = list(Sys.time(), FALSE, "string")
+ )
+ range_write(ss, data = dat, range = "beta!C5", col_names = FALSE)
+ 
+ # clean up
+ gs4_find("range-write-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("request_generate")
> ### * request_generate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: request_generate
> ### Title: Generate a Google Sheets API request
> ### Aliases: request_generate
> 
> ### ** Examples
> 
> req <- request_generate(
+   "sheets.spreadsheets.get",
+   list(spreadsheetId = gs4_example("deaths")),
+   key = "PRETEND_I_AM_AN_API_KEY",
+   token = NULL
+ )
> req
$method
[1] "GET"

$url
[1] "https://sheets.googleapis.com/v4/spreadsheets/1VTJjWoP1nshbyxmL9JqXgdVsimaYty21LGxxs018H2Y?key=PRETEND_I_AM_AN_API_KEY"

$body
named list()

$token
NULL

> 
> 
> 
> cleanEx()
> nameEx("sheet_add")
> ### * sheet_add
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_add
> ### Title: Add one or more (work)sheets
> ### Aliases: sheet_add
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss <- gs4_create("add-sheets-to-me")
+ 
+ # the only required argument is the target spreadsheet
+ ss %>% sheet_add()
+ 
+ # but you CAN specify sheet name and/or position
+ ss %>% sheet_add("apple", .after = 1)
+ ss %>% sheet_add("banana", .after = "apple")
+ 
+ # add multiple sheets at once
+ ss %>% sheet_add(c("coconut", "dragonfruit"))
+ 
+ # keeners can even specify additional sheet properties
+ ss %>%
+   sheet_add(
+     sheet = "eggplant",
+     .before = 1,
+     gridProperties = list(
+       rowCount = 3, columnCount = 6, frozenRowCount = 1
+     )
+   )
+ 
+ # get an overview of the sheets
+ sheet_properties(ss)
+ 
+ # clean up
+ gs4_find("add-sheets-to-me") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_append")
> ### * sheet_append
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_append
> ### Title: Append rows to a sheet
> ### Aliases: sheet_append
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # we will recreate the table of "other" deaths from this example Sheet
+ (deaths <- gs4_example("deaths") %>%
+   range_read(range = "other_data", col_types = "????DD"))
+ 
+ # split the data into 3 pieces, which we will send separately
+ deaths_one <- deaths[1:5, ]
+ deaths_two <- deaths[6, ]
+ deaths_three <- deaths[7:10, ]
+ 
+ # create a Sheet and send the first chunk of data
+ ss <- gs4_create("sheet-append-demo", sheets = list(deaths = deaths_one))
+ 
+ # append a single row
+ ss %>% sheet_append(deaths_two)
+ 
+ # append remaining rows
+ ss %>% sheet_append(deaths_three)
+ 
+ # read and check against the original
+ deaths_replica <- range_read(ss, col_types = "????DD")
+ identical(deaths, deaths_replica)
+ 
+ # clean up
+ gs4_find("sheet-append-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_copy")
> ### * sheet_copy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_copy
> ### Title: Copy a (work)sheet
> ### Aliases: sheet_copy
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss_aaa <- gs4_create(
+   "sheet-copy-demo-aaa",
+   sheets = list(mtcars = head(mtcars), chickwts = head(chickwts))
+ )
+ 
+ # copy 'mtcars' sheet within existing Sheet, accept autogenerated name
+ ss_aaa %>%
+   sheet_copy()
+ 
+ # copy 'mtcars' sheet within existing Sheet
+ # specify new sheet's name and location
+ ss_aaa %>%
+   sheet_copy(to_sheet = "mtcars-the-sequel", .after = 1)
+ 
+ # make a second Sheet
+ ss_bbb <- gs4_create("sheet-copy-demo-bbb")
+ 
+ # copy 'chickwts' sheet from first Sheet to second
+ # accept auto-generated name and default location
+ ss_aaa %>%
+   sheet_copy("chickwts", to_ss = ss_bbb)
+ 
+ # copy 'chickwts' sheet from first Sheet to second,
+ # WITH a specific name and into a specific location
+ ss_aaa %>%
+   sheet_copy(
+     "chickwts",
+     to_ss = ss_bbb, to_sheet = "chicks-two", .before = 1
+   )
+ 
+ # clean up
+ gs4_find("sheet-copy-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_delete")
> ### * sheet_delete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_delete
> ### Title: Delete one or more (work)sheets
> ### Aliases: sheet_delete
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss <- gs4_create("delete-sheets-from-me")
+ sheet_add(ss, c("alpha", "beta", "gamma", "delta"))
+ 
+ # get an overview of the sheets
+ sheet_properties(ss)
+ 
+ # delete sheets
+ sheet_delete(ss, 1)
+ sheet_delete(ss, "gamma")
+ sheet_delete(ss, list("alpha", 2))
+ 
+ # get an overview of the sheets
+ sheet_properties(ss)
+ 
+ # clean up
+ gs4_find("delete-sheets-from-me") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_properties")
> ### * sheet_properties
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_properties
> ### Title: Get data about (work)sheets
> ### Aliases: sheet_properties sheet_names
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss <- gs4_example("gapminder")
+ sheet_properties(ss)
+ sheet_names(ss)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_relocate")
> ### * sheet_relocate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_relocate
> ### Title: Relocate one or more (work)sheets
> ### Aliases: sheet_relocate
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ sheet_names <- c("alfa", "bravo", "charlie", "delta", "echo", "foxtrot")
+ ss <- gs4_create("sheet-relocate-demo", sheets = sheet_names)
+ sheet_names(ss)
+ 
+ # move one sheet, forwards then backwards
+ ss %>%
+   sheet_relocate("echo", .before = "bravo") %>%
+   sheet_names()
+ ss %>%
+   sheet_relocate("echo", .after = "delta") %>%
+   sheet_names()
+ 
+ # reorder and move multiple sheets to the front
+ ss %>%
+   sheet_relocate(list("foxtrot", 4)) %>%
+   sheet_names()
+ 
+ # put the sheets back in the original order
+ ss %>%
+   sheet_relocate(sheet_names) %>%
+   sheet_names()
+ 
+ # reorder and move multiple sheets to the back
+ ss %>%
+   sheet_relocate(c("bravo", "alfa", "echo"), .after = 10) %>%
+   sheet_names()
+ 
+ # clean up
+ gs4_find("sheet-relocate-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_rename")
> ### * sheet_rename
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_rename
> ### Title: Rename a (work)sheet
> ### Aliases: sheet_rename
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ss <- gs4_create(
+   "sheet-rename-demo",
+   sheets = list(cars = head(cars), chickwts = head(chickwts))
+ )
+ sheet_names(ss)
+ 
+ ss %>%
+   sheet_rename(1, new_name = "automobiles") %>%
+   sheet_rename("chickwts", new_name = "poultry")
+ 
+ # clean up
+ gs4_find("sheet-rename-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_resize")
> ### * sheet_resize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_resize
> ### Title: Change the size of a (work)sheet
> ### Aliases: sheet_resize
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # create a Sheet with the default initial worksheet
+ (ss <- gs4_create("sheet-resize-demo"))
+ 
+ # see (work)sheet dims
+ sheet_properties(ss)
+ 
+ # no resize occurs
+ sheet_resize(ss, nrow = 2, ncol = 6)
+ 
+ # reduce sheet size
+ sheet_resize(ss, nrow = 5, ncol = 7, exact = TRUE)
+ 
+ # add rows
+ sheet_resize(ss, nrow = 7)
+ 
+ # add columns
+ sheet_resize(ss, ncol = 10)
+ 
+ # add rows and columns
+ sheet_resize(ss, nrow = 9, ncol = 12)
+ 
+ # re-inspect (work)sheet dims
+ sheet_properties(ss)
+ 
+ # clean up
+ gs4_find("sheet-resize-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheet_write")
> ### * sheet_write
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheet_write
> ### Title: (Over)write new data into a Sheet
> ### Aliases: sheet_write write_sheet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ df <- data.frame(
+   x = 1:3,
+   y = letters[1:3]
+ )
+ 
+ # specify only a data frame, get a new Sheet, with a random name
+ ss <- write_sheet(df)
+ read_sheet(ss)
+ 
+ # clean up
+ googledrive::drive_trash(ss)
+ 
+ # create a Sheet with some initial, placeholder data
+ ss <- gs4_create(
+   "sheet-write-demo",
+   sheets = list(alpha = data.frame(x = 1), omega = data.frame(x = 1))
+ )
+ 
+ # write df into its own, new sheet
+ sheet_write(df, ss = ss)
+ 
+ # write mtcars into the sheet named "omega"
+ sheet_write(mtcars, ss = ss, sheet = "omega")
+ 
+ # get an overview of the sheets
+ sheet_properties(ss)
+ 
+ # view your magnificent creation in the browser
+ gs4_browse(ss)
+ 
+ # clean up
+ gs4_find("sheet-write-demo") %>%
+   googledrive::drive_trash()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sheets_id")
> ### * sheets_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sheets_id
> ### Title: 'sheets_id' class
> ### Aliases: sheets_id as_sheets_id
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mini_gap_id <- gs4_example("mini-gap")
+ class(mini_gap_id)
+ mini_gap_id
+ 
+ as_sheets_id("abc")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("spread_sheet")
> ### * spread_sheet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spread_sheet
> ### Title: Spread a data frame of cells into spreadsheet shape
> ### Aliases: spread_sheet
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gs4_has_token()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ df <- gs4_example("mini-gap") %>%
+   range_read_cells()
+ spread_sheet(df)
+ 
+ # ^^ gets same result as ...
+ read_sheet(gs4_example("mini-gap"))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.663 0.046 1.186 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
