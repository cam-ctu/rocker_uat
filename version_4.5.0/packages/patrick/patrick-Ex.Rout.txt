
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "patrick"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('patrick')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("patrick-package")
> ### * patrick-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: patrick-package
> ### Title: Parameterized Unit Testing
> ### Aliases: patrick patrick-package
> ### Keywords: internal
> 
> ### ** Examples
> 
> with_parameters_test_that("trigonometric functions match identities:",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   expr = c(sin(pi / 4), cos(pi / 4), tan(pi / 4)),
+   numeric_value = c(1 / sqrt(2), 1 / sqrt(2), 1),
+   .test_name = c("sin", "cos", "tan")
+ )
Test passed ðŸ˜€
Test passed ðŸŒˆ
Test passed ðŸŽŠ
> 
> # Run the same test with the cases() constructor
> with_parameters_test_that(
+   "trigonometric functions match identities",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   cases(
+     sin = list(expr = sin(pi / 4), numeric_value = 1 / sqrt(2)),
+     cos = list(expr = cos(pi / 4), numeric_value = 1 / sqrt(2)),
+     tan = list(expr = tan(pi / 4), numeric_value = 1)
+   )
+ )
Test passed ðŸ˜€
Test passed ðŸ¥³
Test passed ðŸ¥‡
> 
> # If names aren't provided, they are automatically generated.
> with_parameters_test_that(
+   "trigonometric functions match identities",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   cases(
+     list(expr = sin(pi / 4), numeric_value = 1 / sqrt(2)),
+     list(expr = cos(pi / 4), numeric_value = 1 / sqrt(2)),
+     list(expr = tan(pi / 4), numeric_value = 1)
+   )
+ )
Test passed ðŸŽŠ
Test passed ðŸ˜¸
Test passed ðŸŽ‰
> # The first test case is named "expr=0.7071068, numeric_value="0.7071068"
> # and so on.
> 
> # Or, pass a data frame of cases, perhaps using a helper function
> make_cases <- function() {
+   tibble::tribble(
+     ~.test_name, ~expr, ~numeric_value,
+     "sin", sin(pi / 4), 1 / sqrt(2),
+     "cos", cos(pi / 4), 1 / sqrt(2),
+     "tan", tan(pi / 4), 1
+   )
+ }
> 
> with_parameters_test_that(
+   "trigonometric functions match identities",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   .cases = make_cases()
+ )
Test passed ðŸ¥³
Test passed ðŸ˜¸
Test passed ðŸ˜¸
> 
> 
> 
> cleanEx()
> nameEx("with_parameters_test_that")
> ### * with_parameters_test_that
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_parameters_test_that
> ### Title: Execute a test with parameters.
> ### Aliases: with_parameters_test_that cases
> 
> ### ** Examples
> 
> with_parameters_test_that("trigonometric functions match identities:",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   expr = c(sin(pi / 4), cos(pi / 4), tan(pi / 4)),
+   numeric_value = c(1 / sqrt(2), 1 / sqrt(2), 1),
+   .test_name = c("sin", "cos", "tan")
+ )
Test passed ðŸ˜€
Test passed ðŸŒˆ
Test passed ðŸŽŠ
> 
> # Run the same test with the cases() constructor
> with_parameters_test_that(
+   "trigonometric functions match identities",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   cases(
+     sin = list(expr = sin(pi / 4), numeric_value = 1 / sqrt(2)),
+     cos = list(expr = cos(pi / 4), numeric_value = 1 / sqrt(2)),
+     tan = list(expr = tan(pi / 4), numeric_value = 1)
+   )
+ )
Test passed ðŸ˜€
Test passed ðŸ¥³
Test passed ðŸ¥‡
> 
> # If names aren't provided, they are automatically generated.
> with_parameters_test_that(
+   "trigonometric functions match identities",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   cases(
+     list(expr = sin(pi / 4), numeric_value = 1 / sqrt(2)),
+     list(expr = cos(pi / 4), numeric_value = 1 / sqrt(2)),
+     list(expr = tan(pi / 4), numeric_value = 1)
+   )
+ )
Test passed ðŸŽŠ
Test passed ðŸ˜¸
Test passed ðŸŽ‰
> # The first test case is named "expr=0.7071068, numeric_value="0.7071068"
> # and so on.
> 
> # Or, pass a data frame of cases, perhaps using a helper function
> make_cases <- function() {
+   tibble::tribble(
+     ~.test_name, ~expr, ~numeric_value,
+     "sin", sin(pi / 4), 1 / sqrt(2),
+     "cos", cos(pi / 4), 1 / sqrt(2),
+     "tan", tan(pi / 4), 1
+   )
+ }
> 
> with_parameters_test_that(
+   "trigonometric functions match identities",
+   {
+     testthat::expect_equal(expr, numeric_value)
+   },
+   .cases = make_cases()
+ )
Test passed ðŸ¥³
Test passed ðŸ˜¸
Test passed ðŸ˜¸
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.009 0.059 1.068 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
