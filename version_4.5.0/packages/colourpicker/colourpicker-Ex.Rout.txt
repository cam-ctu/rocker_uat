
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "colourpicker"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('colourpicker')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("colourInput")
> ### * colourInput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colourInput
> ### Title: Create a colour input control
> ### Aliases: colourInput
> 
> ### ** Examples
> 
> if (interactive()) {
+   # Example 1
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       colourInput("col", "Choose colour", "red"),
+       plotOutput("plot")
+     ),
+     server = function(input, output, session) {
+       output$plot <- renderPlot({
+         plot(1:10, col = input$col)
+       })
+     }
+   )
+ 
+   # Example 2
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       strong("Selected colour:", textOutput("value", inline = TRUE)),
+       colourInput("col", "Choose colour", "red"),
+       h3("Update colour input"),
+       textInput("text", "New colour: (colour name or HEX value)"),
+       selectInput("showColour", "Show colour",
+         c("both", "text", "background")),
+       selectInput("palette", "Colour palette",
+         c("square", "limited")),
+       checkboxInput("allowTransparent", "Allow transparent", FALSE),
+       checkboxInput("returnName", "Return R colour name", FALSE),
+       actionButton("btn", "Update")
+     ),
+     server = function(input, output, session) {
+       observeEvent(input$btn, {
+         updateColourInput(session, "col",
+           value = input$text, showColour = input$showColour,
+           allowTransparent = input$allowTransparent,
+           palette = input$palette,
+           returnName = input$returnName)
+       })
+       output$value <- renderText(input$col)
+     }
+   )
+ }
> 
> 
> 
> cleanEx()
> nameEx("colourPicker")
> ### * colourPicker
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colourPicker
> ### Title: Colour picker gadget
> ### Aliases: colourPicker
> 
> ### ** Examples
> 
> if (interactive()) {
+   cols <- colourPicker(5)
+ }
> 
> 
> 
> cleanEx()
> nameEx("colourWidget")
> ### * colourWidget
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colourWidget
> ### Title: Create a colour picker htmlwidget
> ### Aliases: colourWidget
> 
> ### ** Examples
> 
> colourWidget()
> colourWidget("red", palette = "limited", allowedCols = c("yellow", "red", "#123ABC"))
> 
> 
> 
> 
> cleanEx()
> nameEx("plotHelper")
> ### * plotHelper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotHelper
> ### Title: Plot colour helper
> ### Aliases: plotHelper
> 
> ### ** Examples
> 
> if (interactive()) {
+   cols <- plotHelper()
+   cols <- plotHelper(colours = c("red", "blue"))
+   cols <- plotHelper(colours = 5)
+ 
+   library(ggplot2)
+   cols <- plotHelper(ggplot(mtcars, aes(mpg,wt)) +
+                      geom_point(aes(col = as.factor(cyl)))+
+                      scale_colour_manual(values = CPCOLS))
+ }
> 
> 
> 
> cleanEx()
> nameEx("runExample")
> ### * runExample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runExample
> ### Title: Run a colourpicker example
> ### Aliases: runExample
> 
> ### ** Examples
> 
> ## Only run this example in interactive R sessions
> if (interactive()) {
+   runExample()
+ }
> 
> 
> 
> cleanEx()
> nameEx("updateColourInput")
> ### * updateColourInput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateColourInput
> ### Title: Change the value of a colour input
> ### Aliases: updateColourInput
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(shiny)
+   shinyApp(
+     ui = fluidPage(
+       div("Selected colour:", textOutput("value", inline = TRUE)),
+       colourInput("col", "Choose colour", "red"),
+       h3("Update colour input"),
+       textInput("text", "New colour: (colour name or HEX value)"),
+       selectInput("showColour", "Show colour",
+         c("both", "text", "background")),
+       checkboxInput("allowTransparent", "Allow transparent", FALSE),
+       checkboxInput("returnName", "Return R colour name", FALSE),
+       actionButton("btn", "Update")
+     ),
+     server = function(input, output, session) {
+       observeEvent(input$btn, {
+         updateColourInput(session, "col",
+           value = input$text, showColour = input$showColour,
+           allowTransparent = input$allowTransparent,
+           returnName = input$returnName)
+       })
+       output$value <- renderText(input$col)
+     }
+   )
+ }
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.39 0.057 0.467 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
