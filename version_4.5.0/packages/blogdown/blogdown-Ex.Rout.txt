
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "blogdown"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('blogdown')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("blogdown")
> ### * blogdown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: blogdown
> ### Title: The 'blogdown' package
> ### Aliases: blogdown blogdown-package
> 
> ### ** Examples
> 
> if (interactive()) blogdown::new_site()
> 
> 
> 
> cleanEx()
> nameEx("bundle_site")
> ### * bundle_site
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bundle_site
> ### Title: Convert post files to leaf bundles
> ### Aliases: bundle_site
> 
> ### ** Examples
> 
> ## Not run: 
> ##D blogdown::bundle_site(".", "../new-site/")
> ##D blogdown::bundle_site(".", ".")  # move files within the current working directory
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("config_netlify")
> ### * config_netlify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: config_netlify
> ### Title: Create the configuration (file) for Netlify
> ### Aliases: config_netlify
> 
> ### ** Examples
> 
> blogdown::config_netlify(output = NULL)  # default data
[build]
command = 'hugo'
publish = 'public'

[build.environment]
HUGO_VERSION = '0.123.7'

[context]
[context.branch-deploy]
command = 'hugo -F -b $DEPLOY_PRIME_URL'

[context.deploy-preview]
command = 'hugo -F -b $DEPLOY_PRIME_URL'

[context.production]
[context.production.environment]
HUGO_ENV = 'production'
> 
> # change the publish dir to 'docs/'
> blogdown::config_netlify(NULL, list(build = list(publish = "docs")))
[build]
command = 'hugo'
publish = 'docs'

[build.environment]
HUGO_VERSION = '0.123.7'

[context]
[context.branch-deploy]
command = 'hugo -F -b $DEPLOY_PRIME_URL'

[context.deploy-preview]
command = 'hugo -F -b $DEPLOY_PRIME_URL'

[context.production]
[context.production.environment]
HUGO_ENV = 'production'
> 
> 
> 
> cleanEx()
> nameEx("find_yaml")
> ### * find_yaml
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find_yaml
> ### Title: Find posts containing the specified metadata
> ### Aliases: find_yaml find_tags find_categories count_yaml
> 
> ### ** Examples
> 
> library(blogdown)
> find_tags(c("time-series", "support vector machine"))
NULL
> find_categories("Statistics")
NULL
> 
> count_yaml(sort_by_count = FALSE)
list()
> 
> 
> 
> cleanEx()
> nameEx("hugo_cmd")
> ### * hugo_cmd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hugo_cmd
> ### Title: Run Hugo commands
> ### Aliases: hugo_cmd hugo_version hugo_available hugo_build new_site
> ###   new_content new_post hugo_convert hugo_server
> 
> ### ** Examples
> 
> blogdown::hugo_available("1.2.3")
[1] FALSE
> if (interactive()) blogdown::new_site()
> 
> 
> 
> cleanEx()
> nameEx("hugo_installers")
> ### * hugo_installers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hugo_installers
> ### Title: Available Hugo installers of a version
> ### Aliases: hugo_installers
> 
> ### ** Examples
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ blogdown::hugo_installers()
+ blogdown::hugo_installers("0.89.0")
+ blogdown::hugo_installers("0.17")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("read_toml")
> ### * read_toml
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_toml
> ### Title: Read and write TOML data (Tom's Obvious Markup Language)
> ### Aliases: read_toml write_toml toml2yaml yaml2toml
> 
> ### ** Examples
> 
> ## Not run: 
> ##D v = blogdown::read_toml(x = c("a = 1", "b = true", "c = \"Hello\"", "d = [1, 2]"))
> ##D v
> ##D blogdown::write_toml(v)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("shortcode")
> ### * shortcode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shortcode
> ### Title: Helper functions to write Hugo shortcodes using the R syntax
> ### Aliases: shortcode shortcode_html shortcodes shortcode_open
> ###   shortcode_close
> 
> ### ** Examples
> 
> library(blogdown)
> 
> shortcode("tweet", user = "SanDiegoZoo", id = "1453110110599868418")
{{% tweet user="SanDiegoZoo" id="1453110110599868418" %}}
> # multiple tweets (id's are fake)
> shortcodes("tweet", user = "SanDiegoZoo", id = as.character(1:5))
{{% tweet user="SanDiegoZoo" id="1" %}}
{{% tweet user="SanDiegoZoo" id="2" %}}
{{% tweet user="SanDiegoZoo" id="3" %}}
{{% tweet user="SanDiegoZoo" id="4" %}}
{{% tweet user="SanDiegoZoo" id="5" %}}
> shortcode("figure", src = "/images/foo.png", alt = "A nice figure")
{{% figure src="/images/foo.png" alt="A nice figure" %}}
> shortcode("highlight", "bash", .content = "echo hello world;")
{{% highlight "bash" %}}
echo hello world;
{{% /highlight %}}
> 
> shortcode_html("myshortcode", .content = "My <strong>shortcode</strong>.")
{{< myshortcode >}}
My <strong>shortcode</strong>.
{{< /myshortcode >}}
> 
> shortcode_open("figure", src = "/images/foo.png")
{{% figure src="/images/foo.png" %}}
> # This inner text will be *processed* by Pandoc, @Smith2006
> shortcode_close("figure")
{{% /figure %}}
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.202 0.016 0.341 0.108 0.053 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
