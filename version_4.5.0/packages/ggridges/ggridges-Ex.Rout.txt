
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ggridges"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ggridges')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Aus_athletes")
> ### * Aus_athletes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Aus_athletes
> ### Title: Australian athletes
> ### Aliases: Aus_athletes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # none yet
> 
> 
> 
> cleanEx()
> nameEx("geom_density_line")
> ### * geom_density_line
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_density_line
> ### Title: Smoothed density estimates drawn with a ridgeline rather than
> ###   area
> ### Aliases: geom_density_line GeomDensityLine
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> ggplot(diamonds, aes(carat)) +
+   geom_density_line()
> 
> ggplot(diamonds, aes(carat)) +
+   geom_density_line(adjust = 1/5)
> ggplot(diamonds, aes(carat)) +
+   geom_density_line(adjust = 5)
> 
> ggplot(diamonds, aes(depth, colour = cut)) +
+   geom_density_line(alpha = 0.5) +
+   xlim(55, 70)
Warning: Removed 45 rows containing non-finite outside the scale range
(`stat_density()`).
> ggplot(diamonds, aes(depth, fill = cut, colour = cut)) +
+   geom_density_line(alpha = 0.1) +
+   xlim(55, 70)
Warning: Removed 45 rows containing non-finite outside the scale range
(`stat_density()`).
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("geom_density_ridges")
> ### * geom_density_ridges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_density_ridges
> ### Title: Create ridgeline plot
> ### Aliases: geom_density_ridges GeomDensityRidges geom_density_ridges2
> ###   GeomDensityRidges2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # set the `rel_min_height` argument to remove tails
> ggplot(iris, aes(x = Sepal.Length, y = Species)) +
+   geom_density_ridges(rel_min_height = 0.005) +
+   scale_y_discrete(expand = c(0.01, 0)) +
+   scale_x_continuous(expand = c(0.01, 0)) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> # set the `scale` to determine how much overlap there is among the plots
> ggplot(diamonds, aes(x = price, y = cut)) +
+   geom_density_ridges(scale = 4) +
+   scale_y_discrete(expand = c(0.01, 0)) +
+   scale_x_continuous(expand = c(0.01, 0)) +
+   theme_ridges()
Picking joint bandwidth of 458
> 
> # the same figure with colors, and using the ggplot2 density stat
> ggplot(diamonds, aes(x = price, y = cut, fill = cut, height = after_stat(density))) +
+   geom_density_ridges(scale = 4, stat = "density") +
+   scale_y_discrete(expand = c(0.01, 0)) +
+   scale_x_continuous(expand = c(0.01, 0)) +
+   scale_fill_brewer(palette = 4) +
+   theme_ridges() + theme(legend.position = "none")
> 
> # use geom_density_ridges2() instead of geom_density_ridges() for solid polygons
> ggplot(iris, aes(x = Sepal.Length, y = Species)) +
+   geom_density_ridges2() +
+   scale_y_discrete(expand = c(0.01, 0)) +
+   scale_x_continuous(expand = c(0.01, 0)) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("geom_ridgeline")
> ### * geom_ridgeline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_ridgeline
> ### Title: Plot a ridgeline (line with filled area underneath)
> ### Aliases: geom_ridgeline GeomRidgeline
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> d <- data.frame(x = rep(1:5, 3), y = c(rep(0, 5), rep(1, 5), rep(3, 5)),
+                 height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1))
> ggplot(d, aes(x, y, height = height, group = y)) + geom_ridgeline(fill="lightblue")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("geom_ridgeline_gradient")
> ### * geom_ridgeline_gradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_ridgeline_gradient
> ### Title: Plot ridgelines and ridgeline plots with fill gradients along
> ###   the x axis
> ### Aliases: geom_ridgeline_gradient GeomRidgelineGradient
> ###   geom_density_ridges_gradient GeomDensityRidgesGradient
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Example for `geom_ridgeline_gradient()`
> d <- data.frame(
+   x = rep(1:5, 3) + c(rep(0, 5), rep(0.3, 5), rep(0.6, 5)),
+   y = c(rep(0, 5), rep(1, 5), rep(3, 5)),
+   height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1)
+ )
> ggplot(d, aes(x, y, height = height, group = y, fill = factor(x+y))) +
+   geom_ridgeline_gradient() +
+   scale_fill_viridis_d(direction = -1) +
+   theme(legend.position = 'none')
> 
> # Example for `geom_density_ridges_gradient()`
> ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = stat(x))) +
+   geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
+   scale_x_continuous(expand = c(0, 0)) +
+   scale_y_discrete(expand = c(0, 0)) +
+   scale_fill_viridis_c(name = "Temp. [F]", option = "C") +
+   coord_cartesian(clip = "off") +
+   labs(title = 'Temperatures in Lincoln NE in 2016') +
+   theme_ridges(font_size = 13, grid = TRUE) +
+   theme(axis.title.y = element_blank())
Warning: `stat(x)` was deprecated in ggplot2 3.4.0.
ℹ Please use `after_stat(x)` instead.
Picking joint bandwidth of 3.37
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("geom_vridgeline")
> ### * geom_vridgeline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_vridgeline
> ### Title: Plot a vertical ridgeline (ridgeline rotated 90 degrees)
> ### Aliases: geom_vridgeline GeomVRidgeline
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> d <- data.frame(y = rep(1:5, 3), x = c(rep(0, 5), rep(1, 5), rep(3, 5)),
+                 width = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1))
> ggplot(d, aes(x, y, width = width, group = x)) + geom_vridgeline(fill="lightblue")
> 
> ggplot(iris, aes(x=Species, y=Sepal.Width, width = after_stat(density), fill=Species)) +
+   geom_vridgeline(stat="ydensity", trim=FALSE, alpha = 0.85, scale = 2)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("position_points_jitter")
> ### * position_points_jitter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: position_points_jitter
> ### Title: Randomly jitter the points in a ridgeline plot
> ### Aliases: position_points_jitter PositionPointsJitter
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # default jittered points
> ggplot(iris, aes(x = Sepal.Length, y = Species)) +
+   geom_density_ridges(jittered_points = TRUE, position = "points_jitter", alpha = 0.7)
Picking joint bandwidth of 0.181
> 
> # simulating a rug
> ggplot(iris, aes(x = Sepal.Length, y = Species)) +
+   geom_density_ridges(jittered_points = TRUE, point_shape = '|', alpha = 0.7, point_size = 2,
+                       position = position_points_jitter(width = 0.02, height = 0))
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("position_points_sina")
> ### * position_points_sina
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: position_points_sina
> ### Title: Randomly distribute points in a ridgeline plot between baseline
> ###   and ridgeline
> ### Aliases: position_points_sina PositionPointsSina
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(iris, aes(x = Sepal.Length, y = Species)) +
+   geom_density_ridges(jittered_points = TRUE, position = "points_sina", alpha = 0.7)
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("position_raincloud")
> ### * position_raincloud
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: position_raincloud
> ### Title: Create a cloud of randomly jittered points below a ridgeline
> ###   plot
> ### Aliases: position_raincloud PositionRaincloud
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(iris, aes(x = Sepal.Length, y = Species)) +
+   geom_density_ridges(jittered_points = TRUE, position = "raincloud", alpha = 0.7)
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("scale_cyclical")
> ### * scale_cyclical
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_cyclical
> ### Title: Create a discrete scale that cycles between values
> ### Aliases: scale_colour_cyclical scale_color_cyclical scale_fill_cyclical
> ###   scale_alpha_cyclical scale_linetype_cyclical scale_size_cyclical
> ###   cyclical_scale ScaleCyclical
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # By default, scale_cyclical sets `guide = "none"`, i.e., no legend
> # is drawn
> ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
+   geom_density_ridges(scale = 4) +
+   scale_fill_cyclical(values = c("#3030D0", "#9090F0"))
Picking joint bandwidth of 458
> 
> # However, legends can be turned on by setting `guide = "legend"`
> ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
+   geom_density_ridges(scale = 4) +
+   scale_fill_cyclical(values = c("#3030D0", "#9090F0"),
+                       guide = "legend", name = "Fill colors",
+                       labels = c("dark blue", "light blue"))
Picking joint bandwidth of 458
> 
> # Cyclical scales are also available for the various other aesthetics
> ggplot(diamonds, aes(x = price, y = cut, fill = cut,
+                      color = cut, size = cut,
+                      alpha = cut, linetype = cut)) +
+   geom_density_ridges(scale = 4, fill = "blue") +
+   scale_fill_cyclical(values = c("blue", "green")) +
+   scale_color_cyclical(values = c("black", "white")) +
+   scale_size_cyclical(values = c(2, 1)) +
+   scale_alpha_cyclical(values = c(0.4, 0.8)) +
+   scale_linetype_cyclical(values = c(1, 2))
Picking joint bandwidth of 458
Warning:   Use of the `size` aesthetic is deprecated, please use `linewidth` instead of `size`
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("scale_point")
> ### * scale_point
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_point
> ### Title: Scales for point aesthetics
> ### Aliases: scale_point_shape scale_point_size_continuous
> ###   scale_point_colour_hue scale_point_color_hue scale_point_fill_hue
> ###   scale_point_colour_gradient scale_point_color_gradient
> ###   scale_point_fill_gradient scale_point_shape_discrete
> ###   scale_point_color_discrete scale_point_colour_discrete
> ###   scale_point_fill_discrete scale_point_color_continuous
> ###   scale_point_colour_continuous scale_point_fill_continuous
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # default scales
> ggplot(iris, aes(x=Sepal.Length, y=Species, fill = Species)) +
+   geom_density_ridges(
+     aes(
+       point_color = Species, point_fill = Species,
+       point_shape = Species
+     ),
+     alpha = .4, jittered_points = TRUE
+   ) +
+   theme_ridges()
Warning: The `scale_name` argument of `discrete_scale()` is deprecated as of ggplot2
3.5.0.
Picking joint bandwidth of 0.181
> 
> # modified scales
> ggplot(iris, aes(x=Sepal.Length, y=Species, fill = Species)) +
+   geom_density_ridges(
+     aes(
+       point_color = Species, point_fill = Species,
+       point_shape = Species
+     ),
+     alpha = .4, point_alpha = 1,
+     jittered_points = TRUE
+   ) +
+   scale_fill_hue(l = 50) +
+   scale_point_color_hue(l = 20) +
+   scale_point_fill_hue(l = 70) +
+   scale_discrete_manual("point_shape", values = c(21, 22, 23)) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("scale_vline")
> ### * scale_vline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_vline
> ### Title: Scales for vline aesthetics
> ### Aliases: scale_vline_linetype scale_vline_width_continuous
> ###   scale_vline_colour_hue scale_vline_color_hue
> ###   scale_vline_colour_gradient scale_vline_color_gradient
> ###   scale_vline_linetype_discrete scale_vline_color_discrete
> ###   scale_vline_colour_discrete scale_vline_color_continuous
> ###   scale_vline_colour_continuous
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # default scales
> ggplot(iris, aes(x=Sepal.Length, y=Species, fill = Species, color = Species)) +
+   geom_density_ridges(
+     aes(vline_color = Species, vline_linetype = Species),
+     alpha = .4, quantile_lines = TRUE
+   ) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> # modified scales
> ggplot(iris, aes(x=Sepal.Length, y=Species, fill = Species, color = Species)) +
+   geom_density_ridges(
+     aes(vline_color = Species),
+     alpha = .4, quantile_lines = TRUE
+   ) +
+   scale_fill_hue(l = 50) +
+   scale_vline_color_hue(l = 30) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("stat_binline")
> ### * stat_binline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_binline
> ### Title: Stat for histogram ridgeline plots
> ### Aliases: stat_binline StatBinline
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(iris, aes(x = Sepal.Length, y = Species, group = Species, fill = Species)) +
+   geom_density_ridges(stat = "binline", bins = 20, scale = 2.2) +
+   scale_y_discrete(expand = c(0, 0)) +
+   scale_x_continuous(expand = c(0, 0)) +
+   coord_cartesian(clip = "off") +
+   theme_ridges()
> 
> ggplot(iris, aes(x = Sepal.Length, y = Species, group = Species, fill = Species)) +
+   stat_binline(bins = 20, scale = 2.2, draw_baseline = FALSE) +
+   scale_y_discrete(expand = c(0, 0)) +
+   scale_x_continuous(expand = c(0, 0)) +
+   scale_fill_grey() +
+   coord_cartesian(clip = "off") +
+   theme_ridges() +
+   theme(legend.position = 'none')
> 
> library(ggplot2movies)
> ggplot(movies[movies$year>1989,], aes(x = length, y = year, fill = factor(year))) +
+    stat_binline(scale = 1.9, bins = 40) +
+    scale_x_continuous(limits = c(1, 180), expand = c(0, 0)) +
+    scale_y_reverse(expand = c(0, 0)) +
+    scale_fill_viridis_d(begin = 0.3, option = "B") +
+    coord_cartesian(clip = "off") +
+    labs(title = "Movie lengths 1990 - 2005") +
+    theme_ridges() +
+    theme(legend.position = "none")
Warning: Removed 118 rows containing non-finite outside the scale range
(`stat_binline()`).
> 
> count_data <- data.frame(
+   group = rep(letters[1:5], each = 10),
+   mean = rep(1:5, each = 10)
+ )
> count_data$group <- factor(count_data$group, levels = letters[5:1])
> count_data$count <- rpois(nrow(count_data), count_data$mean)
> 
> ggplot(count_data, aes(x = count, y = group, group = group)) +
+   geom_density_ridges2(
+     stat = "binline",
+     aes(fill = group),
+     binwidth = 1,
+     scale = 0.95
+   ) +
+   geom_text(
+     stat = "bin",
+     aes(y = group + 0.9*stat(count/max(count)),
+     label = ifelse(stat(count) > 0, stat(count), "")),
+     vjust = 1.2, size = 3, color = "white", binwidth = 1
+   ) +
+   scale_x_continuous(breaks = c(0:12), limits = c(-.5, 13), expand = c(0, 0)) +
+   scale_y_discrete(expand = c(0, 0)) +
+   scale_fill_cyclical(values = c("#0000B0", "#7070D0")) +
+   guides(y = "none") +
+   coord_cartesian(clip = "off") +
+   theme_ridges(grid = FALSE)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2movies’, ‘package:ggplot2’

> nameEx("stat_density_ridges")
> ### * stat_density_ridges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stat_density_ridges
> ### Title: Stat for density ridgeline plots
> ### Aliases: stat_density_ridges StatDensityRidges
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Examples of coloring by ecdf or quantiles
> ggplot(iris, aes(x = Sepal.Length, y = Species, fill = factor(stat(quantile)))) +
+   stat_density_ridges(
+     geom = "density_ridges_gradient",
+     calc_ecdf = TRUE,
+     quantiles = 5
+   ) +
+   scale_fill_viridis_d(name = "Quintiles") +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> ggplot(iris,
+   aes(
+     x = Sepal.Length, y = Species, fill = 0.5 - abs(0.5-stat(ecdf))
+   )) +
+   stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE) +
+   scale_fill_viridis_c(name = "Tail probability", direction = -1) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> ggplot(iris,
+   aes(
+     x = Sepal.Length, y = Species, fill = factor(stat(quantile))
+   )) +
+   stat_density_ridges(
+     geom = "density_ridges_gradient",
+     calc_ecdf = TRUE, quantiles = c(0.025, 0.975)
+   ) +
+   scale_fill_manual(
+     name = "Probability",
+     values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
+     labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
+   ) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("theme_ridges")
> ### * theme_ridges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_ridges
> ### Title: A custom theme specifically for use with ridgeline plots
> ### Aliases: theme_ridges
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Example with background grid
> ggplot(iris, aes(x = Sepal.Length, y = Species, group = Species)) +
+   geom_density_ridges(rel_min_height = 0.005) +
+   scale_y_discrete(expand = c(0.01, 0)) +
+   scale_x_continuous(expand = c(0.01, 0)) +
+   theme_ridges()
Picking joint bandwidth of 0.181
> 
> # Example without background grid
> ggplot(iris, aes(x = Sepal.Length, y = Species, group = Species)) +
+   geom_density_ridges() +
+   scale_y_discrete(expand = c(0.01, 0)) +
+   scale_x_continuous(expand = c(0.01, 0)) +
+   theme_ridges(grid = FALSE)
Picking joint bandwidth of 0.181
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ggplot2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.851 1.485 5.768 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
