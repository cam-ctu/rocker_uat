
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "xmlparsedata"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('xmlparsedata')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("xml_parse_data")
> ### * xml_parse_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xml_parse_data
> ### Title: Convert R parse data to XML
> ### Aliases: xml_parse_data
> 
> ### ** Examples
> 
> code <- "function(a = 1, b = 2) {\n  a + b\n}\n"
> expr <- parse(text = code, keep.source = TRUE)
> 
> # The base R way:
> getParseData(expr)
   line1 col1 line2 col2 id parent          token terminal     text
33     1    1     3    1 33      0           expr    FALSE         
1      1    1     1    8  1     33       FUNCTION     TRUE function
2      1    9     1    9  2     33            '('     TRUE        (
3      1   10     1   10  3     33 SYMBOL_FORMALS     TRUE        a
4      1   12     1   12  4     33     EQ_FORMALS     TRUE        =
5      1   14     1   14  5      6      NUM_CONST     TRUE        1
6      1   14     1   14  6     33           expr    FALSE         
7      1   15     1   15  7     33            ','     TRUE        ,
10     1   17     1   17 10     33 SYMBOL_FORMALS     TRUE        b
11     1   19     1   19 11     33     EQ_FORMALS     TRUE        =
12     1   21     1   21 12     13      NUM_CONST     TRUE        2
13     1   21     1   21 13     33           expr    FALSE         
14     1   22     1   22 14     33            ')'     TRUE        )
30     1   24     3    1 30     33           expr    FALSE         
17     1   24     1   24 17     30            '{'     TRUE        {
25     2    3     2    7 25     30           expr    FALSE         
19     2    3     2    3 19     21         SYMBOL     TRUE        a
21     2    3     2    3 21     25           expr    FALSE         
20     2    5     2    5 20     25            '+'     TRUE        +
22     2    7     2    7 22     24         SYMBOL     TRUE        b
24     2    7     2    7 24     25           expr    FALSE         
28     3    1     3    1 28     30            '}'     TRUE        }
> 
> cat(xml_parse_data(expr, pretty = TRUE))
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<exprlist>
  <expr line1="1" col1="1" line2="3" col2="1" start="26" end="76">
    <FUNCTION line1="1" col1="1" line2="1" col2="8" start="26" end="33">function</FUNCTION>
    <OP-LEFT-PAREN line1="1" col1="9" line2="1" col2="9" start="34" end="34">(</OP-LEFT-PAREN>
    <SYMBOL_FORMALS line1="1" col1="10" line2="1" col2="10" start="35" end="35">a</SYMBOL_FORMALS>
    <EQ_FORMALS line1="1" col1="12" line2="1" col2="12" start="37" end="37">=</EQ_FORMALS>
    <expr line1="1" col1="14" line2="1" col2="14" start="39" end="39">
      <NUM_CONST line1="1" col1="14" line2="1" col2="14" start="39" end="39">1</NUM_CONST>
    </expr>
    <OP-COMMA line1="1" col1="15" line2="1" col2="15" start="40" end="40">,</OP-COMMA>
    <SYMBOL_FORMALS line1="1" col1="17" line2="1" col2="17" start="42" end="42">b</SYMBOL_FORMALS>
    <EQ_FORMALS line1="1" col1="19" line2="1" col2="19" start="44" end="44">=</EQ_FORMALS>
    <expr line1="1" col1="21" line2="1" col2="21" start="46" end="46">
      <NUM_CONST line1="1" col1="21" line2="1" col2="21" start="46" end="46">2</NUM_CONST>
    </expr>
    <OP-RIGHT-PAREN line1="1" col1="22" line2="1" col2="22" start="47" end="47">)</OP-RIGHT-PAREN>
    <expr line1="1" col1="24" line2="3" col2="1" start="49" end="76">
      <OP-LEFT-BRACE line1="1" col1="24" line2="1" col2="24" start="49" end="49">{</OP-LEFT-BRACE>
      <expr line1="2" col1="3" line2="2" col2="7" start="53" end="57">
        <expr line1="2" col1="3" line2="2" col2="3" start="53" end="53">
          <SYMBOL line1="2" col1="3" line2="2" col2="3" start="53" end="53">a</SYMBOL>
        </expr>
        <OP-PLUS line1="2" col1="5" line2="2" col2="5" start="55" end="55">+</OP-PLUS>
        <expr line1="2" col1="7" line2="2" col2="7" start="57" end="57">
          <SYMBOL line1="2" col1="7" line2="2" col2="7" start="57" end="57">b</SYMBOL>
        </expr>
      </expr>
      <OP-RIGHT-BRACE line1="3" col1="1" line2="3" col2="1" start="76" end="76">}</OP-RIGHT-BRACE>
    </expr>
  </expr>
</exprlist>
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.067 0.008 0.075 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
