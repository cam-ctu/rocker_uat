
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ggrepel"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ggrepel')
Loading required package: ggplot2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("geom_text_repel")
> ### * geom_text_repel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geom_label_repel
> ### Title: Repulsive textual annotations.
> ### Aliases: geom_label_repel geom_text_repel
> 
> ### ** Examples
> 
> 
> p <- ggplot(mtcars,
+   aes(wt, mpg, label = rownames(mtcars), colour = factor(cyl))) +
+   geom_point()
> 
> # Avoid overlaps by repelling text labels
> p + geom_text_repel()
> # Labels with background
> p + geom_label_repel()
Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider increasing max.overlaps
> 
> ## Not run: 
> ##D p + geom_text_repel(family = "Times New Roman",
> ##D   box.padding = 0.5)
> ##D 
> ##D # Add aesthetic mappings
> ##D p + geom_text_repel(aes(alpha=wt, size=mpg))
> ##D p + geom_label_repel(aes(fill=factor(cyl)), colour="white", segment.colour="black")
> ##D 
> ##D # Draw all line segments
> ##D p + geom_text_repel(min.segment.length = 0)
> ##D 
> ##D # Omit short line segments (default behavior)
> ##D p + geom_text_repel(min.segment.length = 0.5)
> ##D 
> ##D # Omit all line segments
> ##D p + geom_text_repel(segment.colour = NA)
> ##D 
> ##D # Repel just the labels and totally ignore the data points
> ##D p + geom_text_repel(point.size = NA)
> ##D 
> ##D # Hide some of the labels, but repel from all data points
> ##D mtcars$label <- rownames(mtcars)
> ##D mtcars$label[1:15] <- ""
> ##D p + geom_text_repel(data = mtcars, aes(wt, mpg, label = label))
> ##D 
> ##D # Nudge the starting positions
> ##D p + geom_text_repel(nudge_x = ifelse(mtcars$cyl == 6, 1, 0),
> ##D                     nudge_y = ifelse(mtcars$cyl == 6, 8, 0))
> ##D 
> ##D # Change the text size
> ##D p + geom_text_repel(aes(size = wt))
> ##D # Scale height of text, rather than sqrt(height)
> ##D p + geom_text_repel(aes(size = wt)) + scale_radius(range = c(3,6))
> ##D 
> ##D # You can display expressions by setting parse = TRUE.  The
> ##D # details of the display are described in ?plotmath, but note that
> ##D # geom_text_repel uses strings, not expressions.
> ##D p + geom_text_repel(aes(label = paste(wt, "^(", cyl, ")", sep = "")),
> ##D   parse = TRUE)
> ##D 
> ##D # Add a text annotation
> ##D p +
> ##D   geom_text_repel() +
> ##D   annotate(
> ##D     "text", label = "plot mpg vs. wt",
> ##D     x = 2, y = 15, size = 8, colour = "red"
> ##D   )
> ##D 
> ##D # Add arrows
> ##D p +
> ##D   geom_point(colour = "red") +
> ##D   geom_text_repel(
> ##D     arrow = arrow(length = unit(0.02, "npc")),
> ##D     box.padding = 1
> ##D   )
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("position_nudge_repel")
> ### * position_nudge_repel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: position_nudge_repel
> ### Title: Nudge labels a fixed distance from points
> ### Aliases: position_nudge_repel
> 
> ### ** Examples
> 
> 
> df <- data.frame(
+   x = c(1,3,2,5),
+   y = c("a","c","d","c")
+ )
> 
> ggplot(df, aes(x, y)) +
+   geom_point() +
+   geom_text_repel(aes(label = y))
> 
> ggplot(df, aes(x, y)) +
+   geom_point() +
+   geom_text_repel(
+     aes(label = y),
+     min.segment.length = 0,
+     position = position_nudge_repel(x = 0.1, y = 0.15)
+   )
> 
> # The values for x and y can be vectors
> ggplot(df, aes(x, y)) +
+   geom_point() +
+   geom_text_repel(
+     aes(label = y),
+     min.segment.length = 0,
+     position = position_nudge_repel(
+       x = c(0.1, 0, -0.1, 0),
+       y = c(0.1, 0.2, -0.1, -0.2)
+     )
+   )
> 
> # We can also use geom_text_repel() with arguments nudge_x, nudge_y
> ggplot(df, aes(x, y)) +
+   geom_point() +
+   geom_text_repel(
+     aes(label = y),
+     min.segment.length = 0,
+     nudge_x = 0.1,
+     nudge_y = 0.15
+   )
> 
> # The arguments nudge_x, nudge_y also accept vectors
> ggplot(df, aes(x, y)) +
+   geom_point() +
+   geom_text_repel(
+     aes(label = y),
+     min.segment.length = 0,
+     nudge_x = c(0.1, 0, -0.1, 0),
+     nudge_y = c(0.1, 0.2, -0.1, -0.2)
+   )
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.248 0.054 2.305 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
