
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "conflicted"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('conflicted')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("conflict_prefer")
> ### * conflict_prefer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conflict_prefer
> ### Title: Persistently prefer one function over another
> ### Aliases: conflict_prefer conflict_prefer_matching conflict_prefer_all
> 
> ### ** Examples
> 
> # Prefer over all other packages
> conflict_prefer("filter", "dplyr")
[conflicted] Will prefer dplyr::filter over any other package.
> 
> # Prefer over specified package or packages
> conflict_prefer("filter", "dplyr", "base")
[conflicted] Removing existing preference.
[conflicted] Will prefer dplyr::filter over base::filter.
> conflict_prefer("filter", "dplyr", c("base", "filtration"))
[conflicted] Removing existing preference.
[conflicted] Will prefer dplyr::filter over base::filter and
filtration::filter.
> 
> # Prefer many functions that match a pattern
> ## Not run: 
> ##D # Prefer col_* from vroom
> ##D conflict_prefer_matching("^col_", "vroom")
> ## End(Not run)
> # Or all functions from a package:
> ## Not run: 
> ##D # Prefer all tidylog functions over dtplyr functions
> ##D conflict_prefer_all("tidylog", "dtplyr")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("conflict_scout")
> ### * conflict_scout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conflict_scout
> ### Title: Find conflicts amongst a set of packages
> ### Aliases: conflict_scout
> 
> ### ** Examples
> 
> conflict_scout()
0 conflicts
> 
> 
> 
> cleanEx()
> nameEx("conflicts_prefer")
> ### * conflicts_prefer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conflicts_prefer
> ### Title: Declare many preferences at once
> ### Aliases: conflicts_prefer
> 
> ### ** Examples
> 
> conflicts_prefer(
+   dplyr::filter(),
+   dplyr::lag(),
+ )
[conflicted] Removing existing preference.
[conflicted] Will prefer dplyr::filter over any other package.
[conflicted] Will prefer dplyr::lag over any other package.
> 
> # or
> conflicts_prefer(
+   dplyr::filter,
+   dplyr::lag,
+ )
[conflicted] Removing existing preference.
[conflicted] Will prefer dplyr::filter over any other package.
[conflicted] Removing existing preference.
[conflicted] Will prefer dplyr::lag over any other package.
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.311 0.015 0.327 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
