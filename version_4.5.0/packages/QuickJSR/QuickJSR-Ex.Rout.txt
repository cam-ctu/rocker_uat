
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "QuickJSR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('QuickJSR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("JSContext-method-assign")
> ### * JSContext-method-assign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSContext-method-assign
> ### Title: Assign a value to a variable in the current context
> ### Aliases: JSContext-method-assign assign
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ctx <- JSContext$new()
> ##D ctx$assign("a", 1)
> ##D ctx$get("a")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("JSContext-method-call")
> ### * JSContext-method-call
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSContext-method-call
> ### Title: Call a JS function in the current context
> ### Aliases: JSContext-method-call call
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ctx <- JSContext$new()
> ##D ctx$source(code = "function add(a, b) { return a + b; }")
> ##D ctx$call("add", 1, 2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("JSContext-method-get")
> ### * JSContext-method-get
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSContext-method-get
> ### Title: Get a variable from the current context
> ### Aliases: JSContext-method-get get
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ctx <- JSContext$new()
> ##D ctx$source(code = "var a = 1;")
> ##D ctx$get("a")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("JSContext-method-source")
> ### * JSContext-method-source
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSContext-method-source
> ### Title: Evaluate JS string or file in the current context
> ### Aliases: JSContext-method-source source
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ctx <- JSContext$new()
> ##D ctx$source(file = "path/to/file.js")
> ##D ctx$source(code = "1 + 2")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("JSContext-method-validate")
> ### * JSContext-method-validate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JSContext-method-validate
> ### Title: Assess validity of JS code without evaluating
> ### Aliases: JSContext-method-validate validate
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ctx <- JSContext$new()
> ##D ctx$validate("1 + 2")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("qjs_eval")
> ### * qjs_eval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qjs_eval
> ### Title: qjs_eval
> ### Aliases: qjs_eval
> 
> ### ** Examples
> 
> # Return the sum of two numbers:
> qjs_eval("1 + 2")
[1] 3
> 
> # Concatenate strings:
> qjs_eval("'1' + '2'")
[1] "12"
> 
> # Create lists from objects:
> qjs_eval("var t = {'a' : 1, 'b' : 2}; t")
$a
[1] 1

$b
[1] 2

> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.064 0.005 0.069 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
