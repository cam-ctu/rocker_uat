
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "R.cache"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('R.cache')
R.cache v0.17.0 (2025-05-02 22:20:02 UTC) successfully loaded. See ?R.cache for help.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("evalWithMemoization")
> ### * evalWithMemoization
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evalWithMemoization
> ### Title: Evaluates an R expression with memoization
> ### Aliases: evalWithMemoization
> ### Keywords: programming IO
> 
> ### ** Examples
> 
> for (kk in 1:5) {
+   cat(sprintf("Iteration #%d:\n", kk))
+   res <- evalWithMemoization({
+     cat("Evaluating expression...")
+     a <- 1
+     b <- 2
+     c <- 4
+     Sys.sleep(1)
+     cat("done\n")
+     b
+   })
+   print(res)
+ 
+   # Sanity checks
+   stopifnot(a == 1 && b == 2 && c == 4)
+ 
+   # Clean up
+   rm(a, b, c)
+ } # for (kk ...)
Iteration #1:
Evaluating expression...done
[1] 2
Iteration #2:
[1] 2
Iteration #3:
[1] 2
Iteration #4:
[1] 2
Iteration #5:
[1] 2
> 
> 
> ## OUTPUTS:
> ## Iteration #1:
> ## Evaluating expression...done
> ## [1] 2
> ## Iteration #2:
> ## [1] 2
> ## Iteration #3:
> ## [1] 2
> ## Iteration #4:
> ## [1] 2
> ## Iteration #5:
> ## [1] 2
> 
> 
> ############################################################
> # WARNING
> ############################################################
> # If the expression being evaluated depends on
> # "input" objects, then these must be be specified
> # explicitly as "key" objects.
> for (ii in 1:2) {
+   for (kk in 1:3) {
+     cat(sprintf("Iteration #%d:\n", kk))
+     res <- evalWithMemoization({
+       cat("Evaluating expression...")
+       a <- kk
+       Sys.sleep(1)
+       cat("done\n")
+       a
+     }, key=list(kk=kk))
+     print(res)
+ 
+     # Sanity checks
+     stopifnot(a == kk)
+ 
+     # Clean up
+     rm(a)
+   } # for (kk ...)
+ } # for (ii ...)
Iteration #1:
Evaluating expression...done
[1] 1
Iteration #2:
Evaluating expression...done
[1] 2
Iteration #3:
Evaluating expression...done
[1] 3
Iteration #1:
[1] 1
Iteration #2:
[1] 2
Iteration #3:
[1] 3
> 
> ## OUTPUTS:
> ## Iteration #1:
> ## Evaluating expression...done
> ## [1] 1
> ## Iteration #2:
> ## Evaluating expression...done
> ## [1] 2
> ## Iteration #3:
> ## Evaluating expression...done
> ## [1] 3
> ## Iteration #1:
> ## [1] 1
> ## Iteration #2:
> ## [1] 2
> ## Iteration #3:
> ## [1] 3
> 
> 
> 
> cleanEx()
> nameEx("getCacheRootPath")
> ### * getCacheRootPath
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCacheRootPath
> ### Title: Gets the root path to the file cache directory
> ### Aliases: getCacheRootPath.default getCacheRootPath
> ### Keywords: programming IO
> 
> ### ** Examples
> 
>   print(getCacheRootPath())
[1] "/tmp/RtmpZuO7uS/.cache/R/R.cache"
> 
> 
> 
> cleanEx()
> nameEx("loadCache")
> ### * loadCache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadCache
> ### Title: Loads data from file cache
> ### Aliases: loadCache.default loadCache
> ### Keywords: programming IO
> 
> ### ** Examples
> 
> simulate <- function(mean, sd) {
+   # 1. Try to load cached data, if already generated
+   key <- list(mean, sd)
+   data <- loadCache(key)
+   if (!is.null(data)) {
+     cat("Loaded cached data\n")
+     return(data);
+   }
+ 
+   # 2. If not available, generate it.
+   cat("Generating data from scratch...")
+   data <- rnorm(1000, mean=mean, sd=sd)
+   Sys.sleep(1)             # Emulate slow algorithm
+   cat("ok\n")
+   saveCache(data, key=key, comment="simulate()")
+ 
+   data;
+ }
> 
> data <- simulate(2.3, 3.0)
Generating data from scratch...ok
> data <- simulate(2.3, 3.5)
Generating data from scratch...ok
> data <- simulate(2.3, 3.0) # Will load cached data
Loaded cached data
> 
> # Clean up
> file.remove(findCache(key=list(2.3,3.0)))
[1] TRUE
> file.remove(findCache(key=list(2.3,3.5)))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("readCacheHeader")
> ### * readCacheHeader
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readCacheHeader
> ### Title: Loads data from file cache
> ### Aliases: readCacheHeader.default readCacheHeader
> ### Keywords: programming IO internal
> 
> ### ** Examples
> 
> 
> data <- 1:120
> key <- list(some=1, vari=2, ables=3)
> 
> saveCache(key=key, data, comment="A simple example of a cached object.")
> 
> header <- readCacheHeader(findCache(key=key))
> print(header)
$identifier
[1] "Rcache v0.1.7 (R package R.cache by Henrik Bengtsson)           "

$version
[1] "0.1.7"

$comment
[1] "A simple example of a cached object."

$timestamp
[1] "2025-06-17 07:17:03 UTC"

> 
> # Clean up
> file.remove(findCache(key=key))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("saveCache")
> ### * saveCache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saveCache
> ### Title: Saves data to file cache
> ### Aliases: saveCache.default saveCache
> ### Keywords: programming IO
> 
> ### ** Examples
> ## Not run: For an example, see ?loadCache
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.152 0.02 6.179 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
