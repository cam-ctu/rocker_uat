
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "pbkrtest"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('pbkrtest')
Loading required package: lme4
Loading required package: Matrix
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("anovax")
> ### * anovax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anovax
> ### Title: anova like function
> ### Aliases: anovax anovax.lmerMod anovax.default print.anovax
> 
> ### ** Examples
> 
> lmm1 <- lmer(sugpct ~ block + sow + harvest + (1|block:harvest), data=beets)
> lmm0 <- update(lmm1, .~. - sow)
boundary (singular) fit: see help('isSingular')
> anovax(lmm1, .~. - harvest, test="KR")
[1] "kr"
$nsim
[1] 1000

$cl
NULL

anovax_worker dots:
[[1]]
. ~ . - harvest

       stat   ndf   ddf p.value
Ftest 15.21  1.00  2.00  0.0599
> anovax(lmm1, .~. - harvest, test="SAT")
[1] "sat"
$nsim
[1] 1000

$cl
NULL

anovax_worker dots:
[[1]]
. ~ . - harvest

     statistic   ndf   ddf p.value
[1,]     15.21  1.00  2.00  0.0599
> ## anovax(lmm1, .~. - harvest, test="PB", control=list(nsim=50, cl=1))
> 
> anovax(lmm1, test="KR")
[1] "kr"
$nsim
[1] 1000

$cl
NULL

anovax_worker dots:
list()
             stat       ndf       ddf p.value
block     0.37725   2.00000   3.00000  0.7143
sow     101.00000   4.00000  20.00000  0.0000
harvest  15.21053   1.00000   2.00000  0.0599
> anovax(lmm1, test="SAT")
[1] "sat"
$nsim
[1] 1000

$cl
NULL

anovax_worker dots:
list()
        statistic       ndf       ddf p.value
block     0.37725   2.00000  27.00000  0.6893
sow     101.00000   4.00000  20.00000  0.0000
harvest  15.21053   1.00000   2.00000  0.0599
> anovax(lmm1, test="PB", control=list(nsim=50, cl=1))
[1] "pb"
$nsim
[1] 50

$cl
[1] 1

anovax_worker dots:
list()
            stat df p.value
block    0.82682 NA  0.6078
sow     74.86841 NA  0.0196
harvest 12.91424 NA  0.0196
> 
> 
> 
> 
> cleanEx()
> nameEx("comodex")
> ### * comodex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comodex
> ### Title: Model comparison
> ### Aliases: comodex comodex.lmerMod comodex.default
> 
> ### ** Examples
> 
> (lmm0 <- lmer(Reaction ~ (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1769.845
Random effects:
 Groups   Name        Std.Dev. Corr 
 Subject  (Intercept) 25.53         
          Days        11.93    -0.18
 Residual             25.59         
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)  
      257.8  
> (lmm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1743.628
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.741       
          Days         5.922   0.07
 Residual             25.592       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> (lmm2 <- lmer(Reaction ~ Days + I(Days^2) + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + I(Days^2) + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1742.816
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.761       
          Days         5.925   0.06
 Residual             25.534       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days    I(Days^2)  
    255.449        7.434        0.337  
> 
> lm1 <- lm(dist ~ speed + I(speed^2), data=cars)
> lm0 <- lm(dist ~ speed, data=cars)
> 
> comodex(lmm2, lmm1, test="x2")
Reaction ~ Days + I(Days^2) + (Days | Subject)
Reaction ~ Days + (Days | Subject)
      stat df ddf p.value
LRT 1.6578  1     0.19791
> comodex(lmm2, lmm1, test="kr")
          stat ndf ddf  p.value
Ftest 1.655752   1 143 0.200257
> comodex(lmm2, lmm1, test="sat")
  statistic ndf      ddf  p.value
1  1.655752   1 143.0001 0.200257
> comodex(lmm2, lmm1, test="PB", control=list(nsim=50, cl=1))
          stat df  p.value
PBtest 1.65775 NA 0.254902
> comodex(lmm2, .~. - I(Days^2))
Reaction ~ Days + I(Days^2) + (Days | Subject)
Reaction ~ Days + (Days | Subject)
      stat df ddf p.value
LRT 1.6578  1     0.19791
> 
> comodex(lm1, lm0)
dist ~ speed + I(speed^2)
dist ~ speed
      stat df ddf p.value
LRT 2.3848  1     0.12252
> comodex(lm1, lm0, test="pb", control=list(nsim=50, cl=1))
           stat df   p.value
PBtest 2.384795 NA 0.1960784
> 
> 
> 
> 
> cleanEx()
> nameEx("compare_column_space")
> ### * compare_column_space
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_column_space
> ### Title: Compare column spaces
> ### Aliases: compare_column_space
> 
> ### ** Examples
> 
> 
> A1 <- matrix(c(1,1,1,1,2,3), nrow=3)
> A2 <- A1[, 1, drop=FALSE]
> 
> compare_column_space(A1, A2)
[1] 1
> compare_column_space(A2, A1)
[1] 0
> compare_column_space(A1, A1)
[1] -1
> 
> 
> 
> 
> cleanEx()
> nameEx("data-beets")
> ### * data-beets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data-beets
> ### Title: Sugar beets data
> ### Aliases: data-beets beets
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(beets)
> 
> beets$bh <- with(beets, interaction(block, harvest))
> summary(aov(yield ~ block + sow + harvest + Error(bh), beets))

Error: bh
          Df Sum Sq Mean Sq  F value   Pr(>F)    
block      2   11.3     5.7    4.018 0.199292    
harvest    1 1725.2  1725.2 1225.000 0.000815 ***
Residuals  2    2.8     1.4                      
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Error: Within
          Df Sum Sq Mean Sq F value   Pr(>F)    
sow        4   8369  2092.3   119.7 1.13e-13 ***
Residuals 20    349    17.5                     
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> summary(aov(sugpct ~ block + sow + harvest + Error(bh), beets))

Error: bh
          Df  Sum Sq Mean Sq F value Pr(>F)  
block      2 0.03267 0.01633   2.579 0.2794  
harvest    1 0.09633 0.09633  15.211 0.0599 .
Residuals  2 0.01267 0.00633                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Error: Within
          Df Sum Sq Mean Sq F value   Pr(>F)    
sow        4   1.01  0.2525     101 5.74e-13 ***
Residuals 20   0.05  0.0025                     
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> 
> cleanEx()
> nameEx("data-budworm")
> ### * data-budworm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data-budworm
> ### Title: Budworm data
> ### Aliases: data-budworm budworm
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(budworm)
> 
> ## function to caclulate the empirical logits
> empirical.logit<- function(nevent,ntotal) {
+    y <- log((nevent + 0.5) / (ntotal - nevent + 0.5))
+    y
+ }
> 
> 
> # plot the empirical logits against log-dose
> 
> log.dose <- log(budworm$dose)
> emp.logit <- empirical.logit(budworm$ndead, budworm$ntotal)
> plot(log.dose, emp.logit, type='n', xlab='log-dose',ylab='emprirical logit')
> title('budworm: emprirical logits of probability to die ')
> male <- budworm$sex=='male'
> female <- budworm$sex=='female'
> lines(log.dose[male], emp.logit[male], type='b', lty=1, col=1)
> lines(log.dose[female], emp.logit[female], type='b', lty=2, col=2)
> legend(0.5, 2, legend=c('male', 'female'), lty=c(1,2), col=c(1,2))
> 
> ## Not run: 
> ##D * SAS example;
> ##D data budworm;
> ##D infile 'budworm.txt' firstobs=2;
> ##D input sex dose ndead ntotal;
> ##D run;
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("get_ddf_Lb")
> ### * get_ddf_Lb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_ddf_Lb
> ### Title: Adjusted denominator degrees of freedom for linear estimate for
> ###   linear mixed model.
> ### Aliases: get_ddf_Lb get_Lb_ddf get_Lb_ddf.lmerMod Lb_ddf
> ###   get_ddf_Lb.lmerMod ddf_Lb
> ### Keywords: inference models
> 
> ### ** Examples
> 
> 
> (fmLarge <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1743.628
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.741       
          Days         5.922   0.07
 Residual             25.592       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> ## removing Days
> (fmSmall <- lmer(Reaction ~ 1 + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ 1 + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1769.845
Random effects:
 Groups   Name        Std.Dev. Corr 
 Subject  (Intercept) 25.53         
          Days        11.93    -0.18
 Residual             25.59         
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)  
      257.8  
> anova(fmLarge, fmSmall)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fmSmall: Reaction ~ 1 + (Days | Subject)
fmLarge: Reaction ~ Days + (Days | Subject)
        npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)    
fmSmall    5 1785.5 1801.4 -887.74    1775.5                         
fmLarge    6 1763.9 1783.1 -875.97    1751.9 23.537  1  1.226e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> KRmodcomp(fmLarge, fmSmall)  ## 17 denominator df's
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ 1 + (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 45.853  1.000 17.000         1 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> get_Lb_ddf(fmLarge, c(0, 1)) ## 17 denominator df's
[1] 17
> 
> # Notice: The restriction matrix L corresponding to the test above
> # can be found with
> L <- model2restriction_matrix(fmLarge, fmSmall)
> L
     [,1] [,2]
[1,]    0    1
> 
> 
> 
> 
> cleanEx()
> nameEx("get_modcomp")
> ### * get_modcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_modcomp
> ### Title: Extract (or "get") components from a 'KRmodcomp' object.
> ### Aliases: get_modcomp getKR getSAT
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> data(beets, package='pbkrtest')
> lg <- lmer(sugpct ~ block + sow + harvest + (1|block:harvest), 
+               data=beets, REML=FALSE)
> sm <- update(lg, .~. - harvest)
> modcomp <- KRmodcomp(lg, sm)
> getKR(modcomp, "ddf") # get denominator degrees of freedom.
[1] 2
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("kr-vcovAdj")
> ### * kr-vcovAdj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kr-vcovAdj
> ### Title: Adjusted covariance matrix for linear mixed models according to
> ###   Kenward and Roger
> ### Aliases: kr-vcovAdj vcovAdj vcovAdj.lmerMod vcovAdj_internal vcovAdj0
> ###   vcovAdj2 vcovAdj.mer LMM_Sigma_G get_SigmaG get_SigmaG.lmerMod
> ###   get_SigmaG.mer
> ### Keywords: inference models
> 
> ### ** Examples
> 
> 
> fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy)
> class(fm1)
[1] "lmerMod"
attr(,"package")
[1] "lme4"
> 
> ## Here the adjusted and unadjusted covariance matrices are identical,
> ## but that is not generally the case:
> 
> v1 <- vcov(fm1)
> v2 <- vcovAdj(fm1, details=0)
> v2 / v1
2 x 2 Matrix of class "dgeMatrix"
            (Intercept) Days
(Intercept)           1    1
Days                  1    1
> 
> ## For comparison, an alternative estimate of the variance-covariance
> ## matrix is based on parametric bootstrap (and this is easily
> ## parallelized): 
> 
> ## Not run: 
> ##D nsim <- 100
> ##D sim <- simulate(fm.ml, nsim)
> ##D B <- lapply(sim, function(newy) try(fixef(refit(fm.ml, newresp=newy))))
> ##D B <- do.call(rbind, B)
> ##D v3 <- cov.wt(B)$cov
> ##D v2/v1
> ##D v3/v1
> ## End(Not run)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("kr__modcomp")
> ### * kr__modcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kr__modcomp
> ### Title: F-test and degrees of freedom based on Kenward-Roger
> ###   approximation
> ### Aliases: kr__modcomp KRmodcomp KRmodcomp.lmerMod KRmodcomp_internal
> ###   KRmodcomp.mer
> ### Keywords: inference models
> 
> ### ** Examples
> 
> 
> (fm0 <- lmer(Reaction ~ (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1769.845
Random effects:
 Groups   Name        Std.Dev. Corr 
 Subject  (Intercept) 25.53         
          Days        11.93    -0.18
 Residual             25.59         
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)  
      257.8  
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1743.628
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.741       
          Days         5.922   0.07
 Residual             25.592       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> (fm2 <- lmer(Reaction ~ Days + I(Days^2) + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + I(Days^2) + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1742.816
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.761       
          Days         5.925   0.06
 Residual             25.534       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days    I(Days^2)  
    255.449        7.434        0.337  
> 
> ## Test for no effect of Days in fm1, i.e. test fm0 under fm1
> KRmodcomp(fm1, "Days")
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 45.853  1.000 17.000         1 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> KRmodcomp(fm1, ~.-Days)
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 45.853  1.000 17.000         1 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> L1 <- cbind(0, 1) 
> KRmodcomp(fm1, L1)
large : Reaction ~ Days + (Days | Subject)
L = 
     [,1] [,2]
[1,]    0    1
        stat    ndf    ddf F.scaling   p.value    
Ftest 45.853  1.000 17.000         1 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> KRmodcomp(fm1, fm0)
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 45.853  1.000 17.000         1 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> anova(fm1, fm0)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fm0: Reaction ~ (Days | Subject)
fm1: Reaction ~ Days + (Days | Subject)
    npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)    
fm0    5 1785.5 1801.4 -887.74    1775.5                         
fm1    6 1763.9 1783.1 -875.97    1751.9 23.537  1  1.226e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## Test for no effect of Days and Days-squared in fm2, i.e. test fm0 under fm2
> KRmodcomp(fm2, "(Days+I(Days^2))")
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 23.364  2.000 39.817   0.98359 1.938e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> KRmodcomp(fm2, ~. - Days - I(Days^2))
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 23.364  2.000 39.817   0.98359 1.938e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> L2 <- rbind(c(0, 1, 0), c(0, 0, 1))
> KRmodcomp(fm2, L2)
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
L = 
     [,1] [,2] [,3]
[1,]    0    1    0
[2,]    0    0    1
        stat    ndf    ddf F.scaling   p.value    
Ftest 23.364  2.000 39.817   0.98359 1.938e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> KRmodcomp(fm2, fm0)
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ (Days | Subject)
        stat    ndf    ddf F.scaling   p.value    
Ftest 23.364  2.000 39.817   0.98359 1.938e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> anova(fm2, fm0)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fm0: Reaction ~ (Days | Subject)
fm2: Reaction ~ Days + I(Days^2) + (Days | Subject)
    npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)    
fm0    5 1785.5 1801.4 -887.74    1775.5                         
fm2    7 1764.3 1786.6 -875.14    1750.3 25.194  2  3.382e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## Test for no effect of Days-squared in fm2, i.e. test fm1 under fm2
> KRmodcomp(fm2, "I(Days^2)")
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ Days + (Days | Subject)
          stat      ndf      ddf F.scaling p.value
Ftest   1.6558   1.0000 143.0000         1  0.2003
> KRmodcomp(fm2, ~. - I(Days^2))
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ Days + (Days | Subject)
          stat      ndf      ddf F.scaling p.value
Ftest   1.6558   1.0000 143.0000         1  0.2003
> L3 <- rbind(c(0, 0, 1))
> KRmodcomp(fm2, L3)
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
L = 
     [,1] [,2] [,3]
[1,]    0    0    1
          stat      ndf      ddf F.scaling p.value
Ftest   1.6558   1.0000 143.0000         1  0.2003
> KRmodcomp(fm2, fm1)
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ Days + (Days | Subject)
          stat      ndf      ddf F.scaling p.value
Ftest   1.6558   1.0000 143.0000         1  0.2003
> anova(fm2, fm1)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fm1: Reaction ~ Days + (Days | Subject)
fm2: Reaction ~ Days + I(Days^2) + (Days | Subject)
    npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)
fm1    6 1763.9 1783.1 -875.97    1751.9                     
fm2    7 1764.3 1786.6 -875.14    1750.3 1.6577  1     0.1979
> 
> 
> 
> cleanEx()
> nameEx("model-coerce")
> ### * model-coerce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model-coerce
> ### Title: Conversion between a model object and a restriction matrix
> ### Aliases: model-coerce model2restriction_matrix restriction_matrix2model
> ###   make_model_matrix make_restriction_matrix
> ### Keywords: utilities
> 
> ### ** Examples
> 
> library(pbkrtest)
> data("beets", package = "pbkrtest")
> sug <- lm(sugpct ~ block + sow + harvest, data=beets)
> sug.h <- update(sug, .~. - harvest)
> sug.s <- update(sug, .~. - sow)
> 
> ## Construct restriction matrices from models
> L.h <- model2restriction_matrix(sug, sug.h); L.h
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    0    0    0    0    0    0    0    1
> L.s <- model2restriction_matrix(sug, sug.s); L.s
     [,1] [,2] [,3]       [,4]       [,5]       [,6]       [,7] [,8]
[1,]    0    0    0  0.9176629 -0.2294157 -0.2294157 -0.2294157    0
[2,]    0    0    0  0.0636285  0.8907987 -0.3181424 -0.3181424    0
[3,]    0    0    0  0.1048285  0.1048285  0.8386279 -0.5241424    0
[4,]    0    0    0 -0.3779645 -0.3779645 -0.3779645 -0.7559289    0
> 
> ## Construct submodels from restriction matrices
> mod.h <- restriction_matrix2model(sug, L.h); mod.h

Call:
lm(formula = sugpct ~ .X1 + .X2 + .X3 + .X4 + .X5 + .X6 + .X7 - 
    1, data = structure(list(.X1 = c(0, 0, 0, 0, 0, 1, 1, 1, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
0), .X2 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1), .X3 = c(0, 0, 0, 1, 0, 
0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
0, 0, 1, 0), .X4 = c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 
0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0), .X5 = c(0, 1, 
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 
0, 0, 0, 1, 0, 0, 0), .X6 = c(0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), .X7 = c(-1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1), sugpct = c(17.1, 
16.9, 16.6, 17, 17, 17, 17, 16.7, 16.4, 16.8, 16.6, 16.9, 17.1, 
16.8, 16.9, 17, 16.8, 16.5, 16.7, 17, 16.8, 16.9, 17, 17, 16.5, 
16.7, 16.6, 16.9, 16.9, 16.4), block = structure(c(1L, 1L, 1L, 
1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 
1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L), levels = c("block1", 
"block2", "block3"), class = "factor"), sow = structure(c(3L, 
4L, 5L, 2L, 1L, 3L, 2L, 4L, 5L, 1L, 5L, 2L, 3L, 4L, 1L, 2L, 1L, 
5L, 4L, 3L, 4L, 1L, 3L, 2L, 5L, 1L, 4L, 3L, 2L, 5L), levels = c("sow1", 
"sow2", "sow3", "sow4", "sow5"), class = "factor"), harvest = structure(c(1L, 
1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 
2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L), levels = c("harv1", 
"harv2"), class = "factor")), class = "data.frame", row.names = c(NA, 
30L)))

Coefficients:
     .X1       .X2       .X3       .X4       .X5       .X6       .X7  
 -0.0500   -0.0800    0.1167    0.1667   -0.1000   -0.3500  -16.8933  

> mod.s <- restriction_matrix2model(sug, L.s); mod.s

Call:
lm(formula = sugpct ~ .X1 + .X2 + .X3 + .X4 - 1, data = structure(list(
    .X1 = c(0.481123223875107, 0.481123223875107, 0.481123223875107, 
    0.481123223875107, 0.481123223875107, -0.392222671930744, 
    -0.392222671930744, -0.392222671930744, -0.392222671930744, 
    -0.392222671930744, 0.405048328363511, 0.405048328363511, 
    0.405048328363511, 0.405048328363511, 0.405048328363511, 
    0.481123223875107, 0.481123223875107, 0.481123223875107, 
    0.481123223875107, 0.481123223875107, -0.392222671930744, 
    -0.392222671930744, -0.392222671930744, -0.392222671930744, 
    -0.392222671930744, 0.405048328363511, 0.405048328363511, 
    0.405048328363511, 0.405048328363511, 0.405048328363511), 
    .X2 = c(0.481123205404825, 0.481123205404825, 0.481123205404825, 
    0.481123205404825, 0.481123205404825, 0.816718357972269, 
    0.816718357972269, 0.816718357972269, 0.816718357972269, 
    0.816718357972269, -0.328751077922051, -0.32875107792205, 
    -0.328751077922051, -0.328751077922051, -0.328751077922051, 
    0.481123205404825, 0.481123205404825, 0.481123205404825, 
    0.481123205404825, 0.481123205404825, 0.816718357972269, 
    0.816718357972269, 0.816718357972269, 0.816718357972269, 
    0.816718357972269, -0.328751077922051, -0.328751077922051, 
    -0.328751077922051, -0.32875107792205, -0.328751077922051
    ), .X3 = c(0.732830747627998, 0.732830747627998, 0.732830747627998, 
    0.732830747627998, 0.732830747627998, 1.08587867617639, 1.08587867617639, 
    1.08587867617639, 1.08587867617639, 1.08587867617639, 1.31448034616536, 
    1.31448034616536, 1.31448034616536, 1.31448034616536, 1.31448034616536, 
    0.732830747627998, 0.732830747627998, 0.732830747627998, 
    0.732830747627998, 0.732830747627998, 1.08587867617639, 1.08587867617639, 
    1.08587867617639, 1.08587867617639, 1.08587867617639, 1.31448034616536, 
    1.31448034616536, 1.31448034616536, 1.31448034616536, 1.31448034616536
    ), .X4 = c(0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 
    1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1), sugpct = c(17.1, 
    16.9, 16.6, 17, 17, 17, 17, 16.7, 16.4, 16.8, 16.6, 16.9, 
    17.1, 16.8, 16.9, 17, 16.8, 16.5, 16.7, 17, 16.8, 16.9, 17, 
    17, 16.5, 16.7, 16.6, 16.9, 16.9, 16.4), block = structure(c(1L, 
    1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 
    1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L), levels = c("block1", 
    "block2", "block3"), class = "factor"), sow = structure(c(3L, 
    4L, 5L, 2L, 1L, 3L, 2L, 4L, 5L, 1L, 5L, 2L, 3L, 4L, 1L, 2L, 
    1L, 5L, 4L, 3L, 4L, 1L, 3L, 2L, 5L, 1L, 4L, 3L, 2L, 5L), levels = c("sow1", 
    "sow2", "sow3", "sow4", "sow5"), class = "factor"), harvest = structure(c(1L, 
    1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 
    2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L), levels = c("harv1", 
    "harv2"), class = "factor")), class = "data.frame", row.names = c(NA, 
30L)))

Coefficients:
    .X1      .X2      .X3      .X4  
 8.1888   8.1870  12.3329  -0.1133  

> 
> ## Sanity check: The models have the same fitted values and log likelihood
> plot(fitted(mod.h), fitted(sug.h))
> plot(fitted(mod.s), fitted(sug.s))
> logLik(mod.h)
'log Lik.' 36.03257 (df=8)
> logLik(sug.h)
'log Lik.' 36.03257 (df=8)
> logLik(mod.s)
'log Lik.' 7.397588 (df=5)
> logLik(sug.s)
'log Lik.' 7.397588 (df=5)
> 
> 
> 
> cleanEx()
> nameEx("pb-refdist")
> ### * pb-refdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pb-refdist
> ### Title: Calculate reference distribution using parametric bootstrap
> ### Aliases: pb-refdist PBrefdist PBrefdist.merMod PBrefdist.lm
> ###   PBrefdist.gls
> ### Keywords: inference models
> 
> ### ** Examples
> 
> 
> data(beets)
> head(beets)
  harvest  block  sow yield sugpct
1   harv1 block1 sow3 128.0   17.1
2   harv1 block1 sow4 118.0   16.9
3   harv1 block1 sow5  95.0   16.6
4   harv1 block1 sow2 131.0   17.0
5   harv1 block1 sow1 136.5   17.0
6   harv2 block2 sow3 136.5   17.0
> beet0 <- lmer(sugpct ~ block + sow + harvest + (1|block:harvest), data=beets, REML=FALSE)
> beet_no.harv <- update(beet0, . ~ . -harvest)
> rd <- PBrefdist(beet0, beet_no.harv, nsim=20, cl=1)
> rd
 [1] 0.86051095 1.13491918 0.40496885 0.71527981 4.02449945 0.59058809
 [7] 1.10309559 0.08734952 0.66081574 2.66828296 4.82282420 1.84465055
[13] 0.11272254 1.28623213 6.34752883 0.01360985 0.54594002 6.41115301
[19] 0.03063532 1.10948394
attr(,"cl")
[1] 1
attr(,"ctime")
elapsed 
  0.349 
attr(,"stat")
        tobs           df      p.value 
1.291424e+01 1.000000e+00 3.260911e-04 
attr(,"samples")
       nsim        npos   n.extreme         pPB 
20.00000000 20.00000000  0.00000000  0.04761905 
attr(,"class")
[1] "refdist"
> ## Not run: 
> ##D ## Note: Many more simulations must be made in practice.
> ##D 
> ##D # Computations can be made in parallel using several processors:
> ##D 
> ##D # 1: On OSs that fork processes (that is, not on windows):
> ##D # --------------------------------------------------------
> ##D 
> ##D if (Sys.info()["sysname"] != "Windows"){
> ##D   N <- 2 ## Or N <- parallel::detectCores()
> ##D 
> ##D # N cores used in all calls to function in a session
> ##D   options("mc.cores"=N)
> ##D   rd <- PBrefdist(beet0, beet_no.harv, nsim=20)
> ##D 
> ##D # N cores used just in one specific call (when cl is set,
> ##D # options("mc.cores") is ignored):
> ##D   rd <- PBrefdist(beet0, beet_no.harv, nsim=20, cl=N)
> ##D }
> ##D 
> ##D # In fact, on Windows, the approach above also work but only when setting the
> ##D # number of cores to 1 (so there is to parallel computing)
> ##D 
> ##D # In all calls:
> ##D # options("mc.cores"=1)
> ##D # rd <- PBrefdist(beet0, beet_no.harv, nsim=20)
> ##D # Just once
> ##D # rd <- PBrefdist(beet0, beet_no.harv, nsim=20, cl=1)
> ##D 
> ##D # 2. On all platforms (also on Windows) one can do
> ##D # ------------------------------------------------
> ##D library(parallel)
> ##D N <- 2 ## Or N  <- detectCores()
> ##D clus <- makeCluster(rep("localhost", N))
> ##D 
> ##D # In all calls in a session
> ##D options("pb.cl"=clus)
> ##D rd <- PBrefdist(beet0, beet_no.harv, nsim=20)
> ##D 
> ##D # Just once:
> ##D rd <- PBrefdist(beet0, beet_no.harv, nsim=20, cl=clus)
> ##D stopCluster(clus)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pb__modcomp")
> ### * pb__modcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pb__modcomp
> ### Title: Model comparison using parametric bootstrap methods.
> ### Aliases: pb__modcomp PBmodcomp PBmodcomp.lm PBmodcomp.merMod getLRT
> ###   getLRT.lm getLRT.merMod plot.XXmodcomp PBmodcomp.mer getLRT.mer
> ###   seqPBmodcomp
> ### Keywords: inference models
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D  
> ##D (fm0 <- lmer(Reaction ~ (Days|Subject), sleepstudy))
> ##D (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
> ##D (fm2 <- lmer(Reaction ~ Days + I(Days^2) + (Days|Subject), sleepstudy))
> ##D 
> ##D NSIM <- 50 ## Simulations in parametric bootstrap; default is 1000.
> ##D 
> ##D ## Test for no effect of Days in fm1, i.e. test fm0 under fm1
> ##D PBmodcomp(fm1, "Days", cl=1, nsim=NSIM)
> ##D PBmodcomp(fm1, ~.-Days, cl=1, nsim=NSIM)
> ##D L1 <- cbind(0, 1) 
> ##D PBmodcomp(fm1, L1, cl=1, nsim=NSIM) ## FIXME
> ##D PBmodcomp(fm1, fm0, cl=1, nsim=NSIM)
> ##D anova(fm1, fm0)
> ##D 
> ##D ## Test for no effect of Days and Days-squared in fm2, i.e. test fm0 under fm2
> ##D PBmodcomp(fm2, "(Days+I(Days^2))", cl=1, nsim=NSIM)
> ##D PBmodcomp(fm2, ~. - Days - I(Days^2), cl=1, nsim=NSIM)
> ##D L2 <- rbind(c(0, 1, 0), c(0, 0, 1))
> ##D PBmodcomp(fm2, L2, cl=1, nsim=NSIM) ## FIXME
> ##D PBmodcomp(fm2, fm0, cl=1, nsim=NSIM)
> ##D anova(fm2, fm0)
> ##D 
> ##D ## Test for no effect of Days-squared in fm2, i.e. test fm1 under fm2
> ##D PBmodcomp(fm2, "I(Days^2)", cl=1, nsim=NSIM)
> ##D PBmodcomp(fm2, ~. - I(Days^2), cl=1, nsim=NSIM)
> ##D L3 <- rbind(c(0, 0, 1))
> ##D ## PBmodcomp(fm2, L3, cl=1, nsim=NSIM) ## FIXME
> ##D PBmodcomp(fm2, fm1, cl=1, nsim=NSIM)
> ##D anova(fm2, fm1)
> ##D 
> ##D ## Linear normal model:
> ##D sug <- lm(sugpct ~ block + sow + harvest, data=beets)
> ##D sug.h <- update(sug, .~. -harvest)
> ##D sug.s <- update(sug, .~. -sow)
> ##D 
> ##D PBmodcomp(sug, "harvest", nsim=NSIM, cl=1)
> ##D PBmodcomp(sug, ~. - harvest, nsim=NSIM, cl=1)
> ##D PBmodcomp(sug, sug.h, nsim=NSIM, cl=1)
> ##D anova(sug, sug.h)
> ##D 
> ##D ## Generalized linear model
> ##D mm <- glm(ndead/ntotal ~ sex + log(dose), family=binomial, weight=ntotal, data=budworm)
> ##D mm0 <- update(mm, .~. -sex)
> ##D 
> ##D ### Test for no effect of sex
> ##D PBmodcomp(mm, "sex", cl=1, nsim=NSIM)
> ##D PBmodcomp(mm, ~.-sex, cl=1, nsim=NSIM)
> ##D ## PBmodcomp(mm, cbind(0, 1, 0), nsim=NSIM): FIXME
> ##D PBmodcomp(mm, mm0, cl=1, nsim=NSIM)
> ##D anova(mm, mm0, test="Chisq")
> ## End(Not run)
> 
> ## Generalized linear mixed model (it takes a while to fit these)
> 
> ## Not run: 
> ##D (gm1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
> ##D               data = cbpp, family = binomial))
> ##D (gm2 <- update(gm1, .~.-period))
> ##D 
> ##D PBmodcomp(gm1, "period", nsim=NSIM)
> ##D PBmodcomp(gm1, ~. -period, nsim=NSIM)
> ##D PBmodcomp(gm1, gm2, nsim=NSIM)
> ##D anova(gm1, gm2)
> ## End(Not run)
> 
> ## Not run: 
> ##D ## Linear mixed effects model:
> ##D sug   <- lmer(sugpct ~ block + sow + harvest + (1|block:harvest),
> ##D               data=beets, REML=FALSE)
> ##D sug.h <- update(sug, .~. -harvest)
> ##D sug.s <- update(sug, .~. -sow)
> ##D 
> ##D anova(sug, sug.h)
> ##D PBmodcomp(sug, sug.h, nsim=NSIM, cl=1)
> ##D PBmodcomp(sug, "harvest", nsim=NSIM, cl=1)
> ##D 
> ##D anova(sug, sug.s)
> ##D PBmodcomp(sug, sug.s, nsim=NSIM, cl=1)
> ##D PBmodcomp(sug, "sow", nsim=NSIM, cl=1)
> ##D 
> ##D ## Simulate reference distribution separately:
> ##D refdist <- PBrefdist(sug, sug.h, nsim=1000, cl=1)
> ##D refdist <- PBrefdist(sug, "harvest", nsim=1000, cl=1)
> ##D refdist <- PBrefdist(sug, ~.-harvest, nsim=1000, cl=1)
> ##D 
> ##D ## Do computations with multiple processors:
> ##D ## Number of cores:
> ##D 
> ##D (nc <- detectCores())
> ##D ## Create clusters
> ##D cl <- makeCluster(rep("localhost", nc))
> ##D 
> ##D ## Then do:
> ##D refdist <- PBrefdist(sug, sug.h, nsim=1000, cl=cl)
> ##D 
> ##D ## It is recommended to stop the clusters before quitting R:
> ##D stopCluster(cl)
> ## End(Not run)
> 
> 
> lm1 <- lm(dist~speed+I(speed^2), data=cars)
> PBmodcomp(lm1, .~.-speed, cl=2)
Bootstrap test; time: 0.70 sec; samples: 1000; extremes: 640;
large : dist ~ speed + I(speed^2)
        stat df p.value
LRT    0.214  1  0.6437
PBtest 0.214     0.6404
> PBmodcomp(lm1, .~.-I(speed^2), cl=2)
Bootstrap test; time: 0.69 sec; samples: 1000; extremes: 122;
large : dist ~ speed + I(speed^2)
         stat df p.value
LRT    2.3848  1  0.1225
PBtest 2.3848     0.1229
> 
> 
> 
> 
> cleanEx()
> nameEx("sat__modcomp")
> ### * sat__modcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sat__modcomp
> ### Title: F-test and degrees of freedom based on Satterthwaite
> ###   approximation
> ### Aliases: sat__modcomp SATmodcomp SATmodcomp.lmerMod
> ### Keywords: inference models
> 
> ### ** Examples
> 
> 
> (fm0 <- lmer(Reaction ~ (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1769.845
Random effects:
 Groups   Name        Std.Dev. Corr 
 Subject  (Intercept) 25.53         
          Days        11.93    -0.18
 Residual             25.59         
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)  
      257.8  
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1743.628
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.741       
          Days         5.922   0.07
 Residual             25.592       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> (fm2 <- lmer(Reaction ~ Days + I(Days^2) + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + I(Days^2) + (Days | Subject)
   Data: sleepstudy
REML criterion at convergence: 1742.816
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.761       
          Days         5.925   0.06
 Residual             25.534       
Number of obs: 180, groups:  Subject, 18
Fixed Effects:
(Intercept)         Days    I(Days^2)  
    255.449        7.434        0.337  
> 
> ## Test for no effect of Days in fm1, i.e. test fm0 under fm1
> SATmodcomp(fm1, "Days")
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ (Days | Subject)
     statistic    ndf ddf   p.value    
[1,]    45.853  1.000  17 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> SATmodcomp(fm1, ~.-Days)
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ (Days | Subject)
     statistic    ndf ddf   p.value    
[1,]    45.853  1.000  17 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> L1 <- cbind(0, 1) 
> ## SATmodcomp(fm1, L1) ## FIXME
> SATmodcomp(fm1, fm0)
large : Reaction ~ Days + (Days | Subject)
small : Reaction ~ (Days | Subject)
     statistic    ndf ddf   p.value    
[1,]    45.853  1.000  17 3.264e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> anova(fm1, fm0)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fm0: Reaction ~ (Days | Subject)
fm1: Reaction ~ Days + (Days | Subject)
    npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)    
fm0    5 1785.5 1801.4 -887.74    1775.5                         
fm1    6 1763.9 1783.1 -875.97    1751.9 23.537  1  1.226e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## Test for no effect of Days and Days-squared in fm2, i.e. test fm0 under fm2
> SATmodcomp(fm2, "(Days+I(Days^2))")
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ (Days | Subject)
     statistic    ndf    ddf   p.value    
[1,]    23.754  2.000 51.563 4.876e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> SATmodcomp(fm2, ~. - Days - I(Days^2))
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ (Days | Subject)
     statistic    ndf    ddf   p.value    
[1,]    23.754  2.000 51.563 4.876e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> L2 <- rbind(c(0, 1, 0), c(0, 0, 1))
> ## SATmodcomp(fm2, L2) ## FIXME
> SATmodcomp(fm2, fm0)
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ (Days | Subject)
     statistic    ndf    ddf   p.value    
[1,]    23.754  2.000 51.563 4.876e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> anova(fm2, fm0)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fm0: Reaction ~ (Days | Subject)
fm2: Reaction ~ Days + I(Days^2) + (Days | Subject)
    npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)    
fm0    5 1785.5 1801.4 -887.74    1775.5                         
fm2    7 1764.3 1786.6 -875.14    1750.3 25.194  2  3.382e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> ## Test for no effect of Days-squared in fm2, i.e. test fm1 under fm2
> SATmodcomp(fm2, "I(Days^2)")
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ Days + (Days | Subject)
     statistic    ndf ddf p.value
[1,]    1.6558 1.0000 143  0.2003
> SATmodcomp(fm2, ~. - I(Days^2))
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ Days + (Days | Subject)
     statistic    ndf ddf p.value
[1,]    1.6558 1.0000 143  0.2003
> L3 <- rbind(c(0, 0, 1))
> ## SATmodcomp(fm2, L3) ## FIXME
> SATmodcomp(fm2, fm1)
large : Reaction ~ Days + I(Days^2) + (Days | Subject)
small : Reaction ~ Days + (Days | Subject)
     statistic    ndf ddf p.value
[1,]    1.6558 1.0000 143  0.2003
> anova(fm2, fm1)
refitting model(s) with ML (instead of REML)
Data: sleepstudy
Models:
fm1: Reaction ~ Days + (Days | Subject)
fm2: Reaction ~ Days + I(Days^2) + (Days | Subject)
    npar    AIC    BIC  logLik -2*log(L)  Chisq Df Pr(>Chisq)
fm1    6 1763.9 1783.1 -875.97    1751.9                     
fm2    7 1764.3 1786.6 -875.14    1750.3 1.6577  1     0.1979
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.614 2.994 10.786 2.385 0.403 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
