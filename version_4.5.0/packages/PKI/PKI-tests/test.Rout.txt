
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEAw1rL6azX0D0RBSLSciH4aJBmjrDDECne4RLjk0mR0L5dOvtX"
 [3] "BRKePndHS8+GedRKdbyYmmTtu486MoyPC9Qxs0XyeKthaFb+hWc72FbHs7uGDqt9"
 [4] "rbKdZOdp1jvWwPHSQX/S08PW9Q6hQrXOO2Ao1+hj9m10G/I5PAhFhamrAFCQsXh7"
 [5] "n/6YUlOvj406VzYXfYD+dvuAWXn8lbh4Ue6iF/5nVFHYCX1kqMhHs01Xti4OvtcE"
 [6] "N7Bl2PiFVWzHef2CmIvWPNjgNLNV7ZsBoNIpo0NlnwDBO2Q1Zc2ox4rFSxn8Yk5D"
 [7] "7FibNqltwiNfsKJPioRQhKQ835uJhMgKwbLAqwIDAQABAoIBAAW3vRslnhrFXB+r"
 [8] "MWn6GOQFQfMwNO1erwbQajfFN07a8NiemEvuNmfRTuq8SWJ8dld0LH/sWfxGM2ey"
 [9] "WdIjT6HAd4R/o6C4Vx0UH0TJjsZxw86Jx2po6BbBd9q3h/rADoLbQ7zt+6HS3/Zs"
[10] "uCYLE6Gfds7fd5QFJsFdOUexu8RiX30m6HWjpIf9AAwyknqEIyAIuW2Ekkz3Hq1z"
[11] "Nmv7cLSPwesoTRZ8mN913tiKAsQsJAZSFpqcxJNZaaiIOlctveGqUxUhn97oX0UX"
[12] "XU/dikTNyzY+9ScbBpBAJavH3hcXFNdOlPao1WLkq8XZSUja8D/nCe59yDovvZ5i"
[13] "7vSMfGECgYEA76vbvuTxRofUvJdKLgQNCBG78tP/ZEZzHDjdWv1K7ew0nBtLNVQl"
[14] "qel0w+PJ287eW7L69T05L1wLKOnL9kP+Lw7GP59FiRoUb9NC0h3R5crCfVa/S9fr"
[15] "BcdNJkyCA9ZSpHjd3Td/i8j66VW0rBWUxpIddrrZvx60QCEz02eZGCECgYEA0KoB"
[16] "VFuojl1dgyuEYDzVsfQNoYZ4AfpTMmjWaoL9srPmpXFFxjcKuBe71x/al9bRr6Xy"
[17] "fW9T4yusYwi6CTuAtWCYC44nyvdEArZ/dU2i75BWYDECyj0rJ9dwe4zeSbP4wVxb"
[18] "7GEx8GQK6qyTHlr78t7T6QsRuuetl0TDyzqWz0sCgYBXAD2+qADlp30UEJ8+4P2S"
[19] "Bk4Bse8tiV1Ty1ifJP9EKtBWMpo0e51IdpSKX2/xOMEC7I+o4laV2IW8jlIZzUjB"
[20] "8E0K31gwkqUEit3gxC5jihzbvtemQnTwHg7lbjRsDCrnxXBUU0cbiRN8DD6PkS32"
[21] "fyfu55kPhafM98CGZz7twQKBgQDKz+KY7rnnHeJtQtfYfmiqHW8+RyfPrFI/Fd0K"
[22] "C6WwkuEkfvN1lDwr8I2Xq5NYr+iBFAecWZ+slt9oJqxDmv0fzfIakSImSa1mAaHj"
[23] "DwHGXYFG33w5u7h9cg4XWDUaZ/3pWu7R0yqp32Mo83HPOFnYlzJbOXITO2njNGgl"
[24] "2R2J/wKBgDtlxZXWu/Vi6pwS3feXo/4+o0dsFHcqpapUTsJ6NyWPLTKr7865ZQcL"
[25] "k6ygpXPBtSFb9rEu80Hm92qOBoT0WvQtWP7ZS8hn6QFzu2+hvHdh1myneYTWI5Gh"
[26] "PeqJJN8UWXzshOGAX2blikqNYAgsKpcwCED1r/gCexhut+oi96iS"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 c3 5a cb e9 ac d7 d0 3d 11 05 22 d2
  [25] 72 21 f8 68 90 66 8e b0 c3 10 29 de e1 12 e3 93 49 91 d0 be 5d 3a fb 57
  [49] 05 12 9e 3e 77 47 4b cf 86 79 d4 4a 75 bc 98 9a 64 ed bb 8f 3a 32 8c 8f
  [73] 0b d4 31 b3 45 f2 78 ab 61 68 56 fe 85 67 3b d8 56 c7 b3 bb 86 0e ab 7d
  [97] ad b2 9d 64 e7 69 d6 3b d6 c0 f1 d2 41 7f d2 d3 c3 d6 f5 0e a1 42 b5 ce
 [121] 3b 60 28 d7 e8 63 f6 6d 74 1b f2 39 3c 08 45 85 a9 ab 00 50 90 b1 78 7b
 [145] 9f fe 98 52 53 af 8f 8d 3a 57 36 17 7d 80 fe 76 fb 80 59 79 fc 95 b8 78
 [169] 51 ee a2 17 fe 67 54 51 d8 09 7d 64 a8 c8 47 b3 4d 57 b6 2e 0e be d7 04
 [193] 37 b0 65 d8 f8 85 55 6c c7 79 fd 82 98 8b d6 3c d8 e0 34 b3 55 ed 9b 01
 [217] a0 d2 29 a3 43 65 9f 00 c1 3b 64 35 65 cd a8 c7 8a c5 4b 19 fc 62 4e 43
 [241] ec 58 9b 36 a9 6d c2 23 5f b0 a2 4f 8a 84 50 84 a4 3c df 9b 89 84 c8 0a
 [265] c1 b2 c0 ab 02 03 01 00 01 02 82 01 00 05 b7 bd 1b 25 9e 1a c5 5c 1f ab
 [289] 31 69 fa 18 e4 05 41 f3 30 34 ed 5e af 06 d0 6a 37 c5 37 4e da f0 d8 9e
 [313] 98 4b ee 36 67 d1 4e ea bc 49 62 7c 76 57 74 2c 7f ec 59 fc 46 33 67 b2
 [337] 59 d2 23 4f a1 c0 77 84 7f a3 a0 b8 57 1d 14 1f 44 c9 8e c6 71 c3 ce 89
 [361] c7 6a 68 e8 16 c1 77 da b7 87 fa c0 0e 82 db 43 bc ed fb a1 d2 df f6 6c
 [385] b8 26 0b 13 a1 9f 76 ce df 77 94 05 26 c1 5d 39 47 b1 bb c4 62 5f 7d 26
 [409] e8 75 a3 a4 87 fd 00 0c 32 92 7a 84 23 20 08 b9 6d 84 92 4c f7 1e ad 73
 [433] 36 6b fb 70 b4 8f c1 eb 28 4d 16 7c 98 df 75 de d8 8a 02 c4 2c 24 06 52
 [457] 16 9a 9c c4 93 59 69 a8 88 3a 57 2d bd e1 aa 53 15 21 9f de e8 5f 45 17
 [481] 5d 4f dd 8a 44 cd cb 36 3e f5 27 1b 06 90 40 25 ab c7 de 17 17 14 d7 4e
 [505] 94 f6 a8 d5 62 e4 ab c5 d9 49 48 da f0 3f e7 09 ee 7d c8 3a 2f bd 9e 62
 [529] ee f4 8c 7c 61 02 81 81 00 ef ab db be e4 f1 46 87 d4 bc 97 4a 2e 04 0d
 [553] 08 11 bb f2 d3 ff 64 46 73 1c 38 dd 5a fd 4a ed ec 34 9c 1b 4b 35 54 25
 [577] a9 e9 74 c3 e3 c9 db ce de 5b b2 fa f5 3d 39 2f 5c 0b 28 e9 cb f6 43 fe
 [601] 2f 0e c6 3f 9f 45 89 1a 14 6f d3 42 d2 1d d1 e5 ca c2 7d 56 bf 4b d7 eb
 [625] 05 c7 4d 26 4c 82 03 d6 52 a4 78 dd dd 37 7f 8b c8 fa e9 55 b4 ac 15 94
 [649] c6 92 1d 76 ba d9 bf 1e b4 40 21 33 d3 67 99 18 21 02 81 81 00 d0 aa 01
 [673] 54 5b a8 8e 5d 5d 83 2b 84 60 3c d5 b1 f4 0d a1 86 78 01 fa 53 32 68 d6
 [697] 6a 82 fd b2 b3 e6 a5 71 45 c6 37 0a b8 17 bb d7 1f da 97 d6 d1 af a5 f2
 [721] 7d 6f 53 e3 2b ac 63 08 ba 09 3b 80 b5 60 98 0b 8e 27 ca f7 44 02 b6 7f
 [745] 75 4d a2 ef 90 56 60 31 02 ca 3d 2b 27 d7 70 7b 8c de 49 b3 f8 c1 5c 5b
 [769] ec 61 31 f0 64 0a ea ac 93 1e 5a fb f2 de d3 e9 0b 11 ba e7 ad 97 44 c3
 [793] cb 3a 96 cf 4b 02 81 80 57 00 3d be a8 00 e5 a7 7d 14 10 9f 3e e0 fd 92
 [817] 06 4e 01 b1 ef 2d 89 5d 53 cb 58 9f 24 ff 44 2a d0 56 32 9a 34 7b 9d 48
 [841] 76 94 8a 5f 6f f1 38 c1 02 ec 8f a8 e2 56 95 d8 85 bc 8e 52 19 cd 48 c1
 [865] f0 4d 0a df 58 30 92 a5 04 8a dd e0 c4 2e 63 8a 1c db be d7 a6 42 74 f0
 [889] 1e 0e e5 6e 34 6c 0c 2a e7 c5 70 54 53 47 1b 89 13 7c 0c 3e 8f 91 2d f6
 [913] 7f 27 ee e7 99 0f 85 a7 cc f7 c0 86 67 3e ed c1 02 81 81 00 ca cf e2 98
 [937] ee b9 e7 1d e2 6d 42 d7 d8 7e 68 aa 1d 6f 3e 47 27 cf ac 52 3f 15 dd 0a
 [961] 0b a5 b0 92 e1 24 7e f3 75 94 3c 2b f0 8d 97 ab 93 58 af e8 81 14 07 9c
 [985] 59 9f ac 96 df 68 26 ac 43 9a fd 1f cd f2 1a 91 22 26 49 ad 66 01 a1 e3
[1009] 0f 01 c6 5d 81 46 df 7c 39 bb b8 7d 72 0e 17 58 35 1a 67 fd e9 5a ee d1
[1033] d3 2a a9 df 63 28 f3 71 cf 38 59 d8 97 32 5b 39 72 13 3b 69 e3 34 68 25
[1057] d9 1d 89 ff 02 81 80 3b 65 c5 95 d6 bb f5 62 ea 9c 12 dd f7 97 a3 fe 3e
[1081] a3 47 6c 14 77 2a a5 aa 54 4e c2 7a 37 25 8f 2d 32 ab ef ce b9 65 07 0b
[1105] 93 ac a0 a5 73 c1 b5 21 5b f6 b1 2e f3 41 e6 f7 6a 8e 06 84 f4 5a f4 2d
[1129] 58 fe d9 4b c8 67 e9 01 73 bb 6f a1 bc 77 61 d6 6c a7 79 84 d6 23 91 a1
[1153] 3d ea 89 24 df 14 59 7c ec 84 e1 80 5f 66 e5 8a 4a 8d 60 08 2c 2a 97 30
[1177] 08 40 f5 af f8 02 7b 18 6e b7 ea 22 f7 a8 92
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5616bef91d60>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5616bef8b6a0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw1rL6azX0D0RBSLSciH4"
[3] "aJBmjrDDECne4RLjk0mR0L5dOvtXBRKePndHS8+GedRKdbyYmmTtu486MoyPC9Qx"
[4] "s0XyeKthaFb+hWc72FbHs7uGDqt9rbKdZOdp1jvWwPHSQX/S08PW9Q6hQrXOO2Ao"
[5] "1+hj9m10G/I5PAhFhamrAFCQsXh7n/6YUlOvj406VzYXfYD+dvuAWXn8lbh4Ue6i"
[6] "F/5nVFHYCX1kqMhHs01Xti4OvtcEN7Bl2PiFVWzHef2CmIvWPNjgNLNV7ZsBoNIp"
[7] "o0NlnwDBO2Q1Zc2ox4rFSxn8Yk5D7FibNqltwiNfsKJPioRQhKQ835uJhMgKwbLA"
[8] "qwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 c3 5a cb e9 ac d7 d0 3d 11 05 22 d2 72 21 f8 68 90
 [51] 66 8e b0 c3 10 29 de e1 12 e3 93 49 91 d0 be 5d 3a fb 57 05 12 9e 3e 77 47
 [76] 4b cf 86 79 d4 4a 75 bc 98 9a 64 ed bb 8f 3a 32 8c 8f 0b d4 31 b3 45 f2 78
[101] ab 61 68 56 fe 85 67 3b d8 56 c7 b3 bb 86 0e ab 7d ad b2 9d 64 e7 69 d6 3b
[126] d6 c0 f1 d2 41 7f d2 d3 c3 d6 f5 0e a1 42 b5 ce 3b 60 28 d7 e8 63 f6 6d 74
[151] 1b f2 39 3c 08 45 85 a9 ab 00 50 90 b1 78 7b 9f fe 98 52 53 af 8f 8d 3a 57
[176] 36 17 7d 80 fe 76 fb 80 59 79 fc 95 b8 78 51 ee a2 17 fe 67 54 51 d8 09 7d
[201] 64 a8 c8 47 b3 4d 57 b6 2e 0e be d7 04 37 b0 65 d8 f8 85 55 6c c7 79 fd 82
[226] 98 8b d6 3c d8 e0 34 b3 55 ed 9b 01 a0 d2 29 a3 43 65 9f 00 c1 3b 64 35 65
[251] cd a8 c7 8a c5 4b 19 fc 62 4e 43 ec 58 9b 36 a9 6d c2 23 5f b0 a2 4f 8a 84
[276] 50 84 a4 3c df 9b 89 84 c8 0a c1 b2 c0 ab 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5616beef8370>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5616beef9d80>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
