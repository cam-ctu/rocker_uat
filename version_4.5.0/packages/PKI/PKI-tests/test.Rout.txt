
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEAsEAxRRptmkZORQ4D94kRmC9wcFCzUxeYZZ31S3hgne9o8gs1"
 [3] "BbHS38e1Jvhx10uOxB2JS4e/NJHTKYs/o0s4TMnUeiJhW8okYaQtU6oADC5ze7/9"
 [4] "UTjEWU0nn7eH+OJnSg8J/G10hlyPoZ1OyJvS7uX3zR8OaeT6nUJd9f4sDOKN/Ort"
 [5] "shIR2eMKhHMay/nU5tRv3vqUAb09QymRPMmzN4K/gvIbhdPT9bE3qp6caRHQIQaA"
 [6] "2K0El6DuVB0Xqu+AnHyXfL4m/ix4mECoa1x30Et2pjUDQx9VvcwIU62csACmZX9I"
 [7] "Lgl/0y4puy0HpiYe4PyhP6dPlyj8TN2KBrTQ2QIDAQABAoIBABzQ8f1FW+QcWJGr"
 [8] "v/RJwcmq/+wtFZShR/ZdRAypysonqXXhZTLgJwUVZsXPWvWDUf04gwkJUbarnOWu"
 [9] "8aGmG7daTFYHpvlV7GrWZ97E7asQMStrcWRFLr0XA0J2xFFp2s9d9BkEYEfTfFxF"
[10] "FutvpqYOjVxJFpczq9HoVupwOw2D+4TAEmvRnriYuGVeZ0PzFE/SRP59YhmIVeL4"
[11] "UjrldaH7DJQWt2h4IHk+yxe9/7v1k/BtVAbZi8OISou1TXJc0xecplS40EIuOGdp"
[12] "vep3gSOTms9ksknz+05hRO+SJUiMtXMZxlzuS/GPJSP4HM5JyTxT5PGC+d7j5KWs"
[13] "6h6jyn0CgYEA3UA8AFpzfzlcDvWfuQnd5H3XlG/bquLzyCJxi9s4FXHnwG0ewOxo"
[14] "DYFkVvpCQibN7KSPgant4m4icFOwvEJ2bvh7aWCp6DS8XvPzxD0JtwQ0j7U4Tmyt"
[15] "hrIKkdgGBKYDqRBQhamEJsjqcUlfY6YaJ0VITehakbdcoFMZOZH8dVcCgYEAy+6m"
[16] "lbXAfHNKJ4pc3RpVReWqMjbxNy01CDK0UCIYi1EkDMu68tVBzH1xyEhbmb19x94C"
[17] "J8U6HQwhPalFE0l0eIgtSR9TLTPjVwdHxUiwj77cDCor/ukS21duVf574CCvgjkg"
[18] "3h6heK0bx9oby78YSGhJSLkvqAQ3BedtsA60XU8CgYBRm3jGNJa3TYPsLKMOUFpd"
[19] "BiG3KY8ft/htUG8LQ/+qwUnXCyi1xj0XBivpfQNlfQSljYk1LWWGCFOBlQzyU511"
[20] "jweONc5VzOXSLC80qcLkk5ODkjdDjghvT0pgwwptOoLNICxjMMSCvcbjpEmf6sto"
[21] "wsBJpDOL3dM3e48pUfSJnwKBgG5sFKtvtIAudPKgCtR108J7LwLtmQMFaXe87MGP"
[22] "FLcrAlgjYGDodC5jpl6KP38piZfVcFlUg7kCvmUC6LIezgANzGeRnJoXRHv1Jzl9"
[23] "uIy9Da1QkG4AigNWfhn2J+EeEapzgIaFE22iXi6CvRY/rMhYH4ZPL6zMS3bY7x2r"
[24] "eKIlAoGAV0EZSQAHNN+cfMIHG3u6cayM8UJWSRscRde78xIldlnJGo7v4jjca1aN"
[25] "f6xFZL4+LaV2U9tuL6TIQceEB7qg9RDrbtqxKhghV3eepr0qFGK8uqymif3LJ+nj"
[26] "ICJI8rZF+snWNU2Q98rBm9xHwW4b/AS2XPu8flNokYOKzHmt428="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 b0 40 31 45 1a 6d 9a 46 4e 45 0e 03
  [25] f7 89 11 98 2f 70 70 50 b3 53 17 98 65 9d f5 4b 78 60 9d ef 68 f2 0b 35
  [49] 05 b1 d2 df c7 b5 26 f8 71 d7 4b 8e c4 1d 89 4b 87 bf 34 91 d3 29 8b 3f
  [73] a3 4b 38 4c c9 d4 7a 22 61 5b ca 24 61 a4 2d 53 aa 00 0c 2e 73 7b bf fd
  [97] 51 38 c4 59 4d 27 9f b7 87 f8 e2 67 4a 0f 09 fc 6d 74 86 5c 8f a1 9d 4e
 [121] c8 9b d2 ee e5 f7 cd 1f 0e 69 e4 fa 9d 42 5d f5 fe 2c 0c e2 8d fc ea ed
 [145] b2 12 11 d9 e3 0a 84 73 1a cb f9 d4 e6 d4 6f de fa 94 01 bd 3d 43 29 91
 [169] 3c c9 b3 37 82 bf 82 f2 1b 85 d3 d3 f5 b1 37 aa 9e 9c 69 11 d0 21 06 80
 [193] d8 ad 04 97 a0 ee 54 1d 17 aa ef 80 9c 7c 97 7c be 26 fe 2c 78 98 40 a8
 [217] 6b 5c 77 d0 4b 76 a6 35 03 43 1f 55 bd cc 08 53 ad 9c b0 00 a6 65 7f 48
 [241] 2e 09 7f d3 2e 29 bb 2d 07 a6 26 1e e0 fc a1 3f a7 4f 97 28 fc 4c dd 8a
 [265] 06 b4 d0 d9 02 03 01 00 01 02 82 01 00 1c d0 f1 fd 45 5b e4 1c 58 91 ab
 [289] bf f4 49 c1 c9 aa ff ec 2d 15 94 a1 47 f6 5d 44 0c a9 ca ca 27 a9 75 e1
 [313] 65 32 e0 27 05 15 66 c5 cf 5a f5 83 51 fd 38 83 09 09 51 b6 ab 9c e5 ae
 [337] f1 a1 a6 1b b7 5a 4c 56 07 a6 f9 55 ec 6a d6 67 de c4 ed ab 10 31 2b 6b
 [361] 71 64 45 2e bd 17 03 42 76 c4 51 69 da cf 5d f4 19 04 60 47 d3 7c 5c 45
 [385] 16 eb 6f a6 a6 0e 8d 5c 49 16 97 33 ab d1 e8 56 ea 70 3b 0d 83 fb 84 c0
 [409] 12 6b d1 9e b8 98 b8 65 5e 67 43 f3 14 4f d2 44 fe 7d 62 19 88 55 e2 f8
 [433] 52 3a e5 75 a1 fb 0c 94 16 b7 68 78 20 79 3e cb 17 bd ff bb f5 93 f0 6d
 [457] 54 06 d9 8b c3 88 4a 8b b5 4d 72 5c d3 17 9c a6 54 b8 d0 42 2e 38 67 69
 [481] bd ea 77 81 23 93 9a cf 64 b2 49 f3 fb 4e 61 44 ef 92 25 48 8c b5 73 19
 [505] c6 5c ee 4b f1 8f 25 23 f8 1c ce 49 c9 3c 53 e4 f1 82 f9 de e3 e4 a5 ac
 [529] ea 1e a3 ca 7d 02 81 81 00 dd 40 3c 00 5a 73 7f 39 5c 0e f5 9f b9 09 dd
 [553] e4 7d d7 94 6f db aa e2 f3 c8 22 71 8b db 38 15 71 e7 c0 6d 1e c0 ec 68
 [577] 0d 81 64 56 fa 42 42 26 cd ec a4 8f 81 a9 ed e2 6e 22 70 53 b0 bc 42 76
 [601] 6e f8 7b 69 60 a9 e8 34 bc 5e f3 f3 c4 3d 09 b7 04 34 8f b5 38 4e 6c ad
 [625] 86 b2 0a 91 d8 06 04 a6 03 a9 10 50 85 a9 84 26 c8 ea 71 49 5f 63 a6 1a
 [649] 27 45 48 4d e8 5a 91 b7 5c a0 53 19 39 91 fc 75 57 02 81 81 00 cb ee a6
 [673] 95 b5 c0 7c 73 4a 27 8a 5c dd 1a 55 45 e5 aa 32 36 f1 37 2d 35 08 32 b4
 [697] 50 22 18 8b 51 24 0c cb ba f2 d5 41 cc 7d 71 c8 48 5b 99 bd 7d c7 de 02
 [721] 27 c5 3a 1d 0c 21 3d a9 45 13 49 74 78 88 2d 49 1f 53 2d 33 e3 57 07 47
 [745] c5 48 b0 8f be dc 0c 2a 2b fe e9 12 db 57 6e 55 fe 7b e0 20 af 82 39 20
 [769] de 1e a1 78 ad 1b c7 da 1b cb bf 18 48 68 49 48 b9 2f a8 04 37 05 e7 6d
 [793] b0 0e b4 5d 4f 02 81 80 51 9b 78 c6 34 96 b7 4d 83 ec 2c a3 0e 50 5a 5d
 [817] 06 21 b7 29 8f 1f b7 f8 6d 50 6f 0b 43 ff aa c1 49 d7 0b 28 b5 c6 3d 17
 [841] 06 2b e9 7d 03 65 7d 04 a5 8d 89 35 2d 65 86 08 53 81 95 0c f2 53 9d 75
 [865] 8f 07 8e 35 ce 55 cc e5 d2 2c 2f 34 a9 c2 e4 93 93 83 92 37 43 8e 08 6f
 [889] 4f 4a 60 c3 0a 6d 3a 82 cd 20 2c 63 30 c4 82 bd c6 e3 a4 49 9f ea cb 68
 [913] c2 c0 49 a4 33 8b dd d3 37 7b 8f 29 51 f4 89 9f 02 81 80 6e 6c 14 ab 6f
 [937] b4 80 2e 74 f2 a0 0a d4 75 d3 c2 7b 2f 02 ed 99 03 05 69 77 bc ec c1 8f
 [961] 14 b7 2b 02 58 23 60 60 e8 74 2e 63 a6 5e 8a 3f 7f 29 89 97 d5 70 59 54
 [985] 83 b9 02 be 65 02 e8 b2 1e ce 00 0d cc 67 91 9c 9a 17 44 7b f5 27 39 7d
[1009] b8 8c bd 0d ad 50 90 6e 00 8a 03 56 7e 19 f6 27 e1 1e 11 aa 73 80 86 85
[1033] 13 6d a2 5e 2e 82 bd 16 3f ac c8 58 1f 86 4f 2f ac cc 4b 76 d8 ef 1d ab
[1057] 78 a2 25 02 81 80 57 41 19 49 00 07 34 df 9c 7c c2 07 1b 7b ba 71 ac 8c
[1081] f1 42 56 49 1b 1c 45 d7 bb f3 12 25 76 59 c9 1a 8e ef e2 38 dc 6b 56 8d
[1105] 7f ac 45 64 be 3e 2d a5 76 53 db 6e 2f a4 c8 41 c7 84 07 ba a0 f5 10 eb
[1129] 6e da b1 2a 18 21 57 77 9e a6 bd 2a 14 62 bc ba ac a6 89 fd cb 27 e9 e3
[1153] 20 22 48 f2 b6 45 fa c9 d6 35 4d 90 f7 ca c1 9b dc 47 c1 6e 1b fc 04 b6
[1177] 5c fb bc 7e 53 68 91 83 8a cc 79 ad e3 6f
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5565e4ff6d60>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5565e4ff06a0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsEAxRRptmkZORQ4D94kR"
[3] "mC9wcFCzUxeYZZ31S3hgne9o8gs1BbHS38e1Jvhx10uOxB2JS4e/NJHTKYs/o0s4"
[4] "TMnUeiJhW8okYaQtU6oADC5ze7/9UTjEWU0nn7eH+OJnSg8J/G10hlyPoZ1OyJvS"
[5] "7uX3zR8OaeT6nUJd9f4sDOKN/OrtshIR2eMKhHMay/nU5tRv3vqUAb09QymRPMmz"
[6] "N4K/gvIbhdPT9bE3qp6caRHQIQaA2K0El6DuVB0Xqu+AnHyXfL4m/ix4mECoa1x3"
[7] "0Et2pjUDQx9VvcwIU62csACmZX9ILgl/0y4puy0HpiYe4PyhP6dPlyj8TN2KBrTQ"
[8] "2QIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 b0 40 31 45 1a 6d 9a 46 4e 45 0e 03 f7 89 11 98 2f
 [51] 70 70 50 b3 53 17 98 65 9d f5 4b 78 60 9d ef 68 f2 0b 35 05 b1 d2 df c7 b5
 [76] 26 f8 71 d7 4b 8e c4 1d 89 4b 87 bf 34 91 d3 29 8b 3f a3 4b 38 4c c9 d4 7a
[101] 22 61 5b ca 24 61 a4 2d 53 aa 00 0c 2e 73 7b bf fd 51 38 c4 59 4d 27 9f b7
[126] 87 f8 e2 67 4a 0f 09 fc 6d 74 86 5c 8f a1 9d 4e c8 9b d2 ee e5 f7 cd 1f 0e
[151] 69 e4 fa 9d 42 5d f5 fe 2c 0c e2 8d fc ea ed b2 12 11 d9 e3 0a 84 73 1a cb
[176] f9 d4 e6 d4 6f de fa 94 01 bd 3d 43 29 91 3c c9 b3 37 82 bf 82 f2 1b 85 d3
[201] d3 f5 b1 37 aa 9e 9c 69 11 d0 21 06 80 d8 ad 04 97 a0 ee 54 1d 17 aa ef 80
[226] 9c 7c 97 7c be 26 fe 2c 78 98 40 a8 6b 5c 77 d0 4b 76 a6 35 03 43 1f 55 bd
[251] cc 08 53 ad 9c b0 00 a6 65 7f 48 2e 09 7f d3 2e 29 bb 2d 07 a6 26 1e e0 fc
[276] a1 3f a7 4f 97 28 fc 4c dd 8a 06 b4 d0 d9 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5565e4f5d370>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5565e4f5ed80>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
