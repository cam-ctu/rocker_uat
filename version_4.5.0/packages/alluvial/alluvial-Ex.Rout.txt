
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "alluvial"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('alluvial')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("alluvial")
> ### * alluvial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial
> ### Title: Alluvial diagram
> ### Aliases: alluvial
> 
> ### ** Examples
> 
> # Titanic data
> tit <- as.data.frame(Titanic)
> 
> # 2d
> tit2d <- aggregate( Freq ~ Class + Survived, data=tit, sum)
> alluvial( tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8,
+          gap.width=0.1, col= "steelblue", border="white",
+          layer = tit2d$Survived != "Yes" )
> 
> alluvial( tit2d[,1:2], freq=tit2d$Freq, 
+          hide=tit2d$Freq < 150,
+          xw=0.0, alpha=0.8,
+          gap.width=0.1, col= "steelblue", border="white",
+          layer = tit2d$Survived != "Yes" )
> 
> # 3d
> tit3d <- aggregate( Freq ~ Class + Sex + Survived, data=tit, sum)
> 
> alluvial(tit3d[,1:3], freq=tit3d$Freq, alpha=1, xw=0.2,
+          col=ifelse( tit3d$Survived == "No", "red", "gray"),
+          layer = tit3d$Sex != "Female",
+          border="white")
> 
> 
> # 4d
> alluvial( tit[,1:4], freq=tit$Freq, border=NA,
+          hide = tit$Freq < quantile(tit$Freq, .50),
+          col=ifelse( tit$Class == "3rd" & tit$Sex == "Male", "red", "gray") )
> 
> # 3d example with custom ordering
> # Reorder "Sex" axis according to survival status
> ord <- list(NULL, with(tit3d, order(Sex, Survived)), NULL)
> alluvial(tit3d[,1:3], freq=tit3d$Freq, alpha=1, xw=0.2,
+          col=ifelse( tit3d$Survived == "No", "red", "gray"),
+          layer = tit3d$Sex != "Female",
+          border="white", ordering=ord)
> 
> # Possible blocks options
> for (blocks in c(TRUE, FALSE, "bookends")) {
+     
+     # Elaborate alluvial diagram from main examples file
+     alluvial( tit[, 1:4], freq = tit$Freq, border = NA,
+               hide = tit$Freq < quantile(tit$Freq, .50),
+               col = ifelse( tit$Class == "3rd" & tit$Sex == "Male",
+                             "red", "gray" ),
+               blocks = blocks )
+ }
> 
> 
> # Data returned
> x <- alluvial( tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8,
+           gap.width=0.1, col= "steelblue", border="white",
+           layer = tit2d$Survived != "Yes" )
> points( rep(1, 16), x$endpoints[[1]], col="green")
> points( rep(2, 16), x$endpoints[[2]], col="blue")
> 
> 
> 
> cleanEx()
> nameEx("alluvial_ts")
> ### * alluvial_ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alluvial_ts
> ### Title: Alluvial diagram for multiple time series data
> ### Aliases: alluvial_ts
> 
> ### ** Examples
> 
> if( require(reshape2) )
+ {
+ data(Refugees)
+ reshape2::dcast(Refugees, country ~ year, value.var = 'refugees')
+ d <- Refugees
+ 
+ set.seed(39) # for nice colours
+ cols <- hsv(h = sample(1:10/10), s = sample(3:12)/15, v = sample(3:12)/15)
+ 
+ alluvial_ts(d)
+ alluvial_ts(d, wave = .2, ygap = 5, lwd = 3)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, rankup = TRUE)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, plotdir = 'down')
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, plotdir = 'centred', grid=TRUE,
+             grid.lwd = 5)
+ alluvial_ts(d, wave =  0, ygap = 0, col = cols, alpha = .9, border = 'white',
+             grid = TRUE, grid.lwd = 5)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, xmargin = 0.4)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, xmargin = 0.3, lab.cex = .7)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, xmargin = 0.3, lab.cex=.7,
+             leg.cex=.7, leg.col = 'white')
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, leg.mode = FALSE, leg.x = .1,
+             leg.y = .7, leg.max = 3e6)
+ alluvial_ts(d, wave = .3, ygap = 5, col = cols, plotdir = 'centred', alpha=.9,
+             grid = TRUE, grid.lwd = 5, xmargin = 0.2, lab.cex = .7, xlab = '',
+             ylab = '', border = NA, axis.cex = .8, leg.cex = .7,
+             leg.col='white', 
+          title = "UNHCR-recognised refugees\nTop 10 countries (2003-13)\n")
+ 
+ # non time-series example - Virginia deaths dataset
+ d <- reshape2::melt(data.frame(age=row.names(VADeaths), VADeaths), id.vars='age')[,c(2,1,3)]
+ names(d) = c('pop_group','age_group','deaths')
+ alluvial_ts(d)
+ }
Loading required package: reshape2
[1] "Error: time variable must be numeric, factor, or ordered"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:reshape2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.96 0.062 1.022 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
