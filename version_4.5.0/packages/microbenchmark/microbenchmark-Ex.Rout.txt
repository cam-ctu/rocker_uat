
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "microbenchmark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('microbenchmark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autoplot.microbenchmark")
> ### * autoplot.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.microbenchmark
> ### Title: Autoplot method for microbenchmark objects: Prettier graphs for
> ###   microbenchmark using ggplot2
> ### Aliases: autoplot.microbenchmark
> 
> ### ** Examples
> 
> if (requireNamespace("ggplot2", quietly = TRUE)) {
+     tm <- microbenchmark(rchisq(100, 0),
+                          rchisq(100, 1),
+                          rchisq(100, 2),
+                          rchisq(100, 3),
+                          rchisq(100, 5), times=1000L)
+     ggplot2::autoplot(tm)
+ 
+     # add a custom title
+     ggplot2::autoplot(tm) + ggplot2::ggtitle("my timings")
+ }
> 
> 
> 
> cleanEx()
> nameEx("microbenchmark")
> ### * microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: microbenchmark
> ### Title: Sub-millisecond accurate timing of expression evaluation.
> ### Aliases: microbenchmark
> 
> ### ** Examples
> 
> ## Measure the time it takes to dispatch a simple function call
> ## compared to simply evaluating the constant \code{NULL}
> f <- function() NULL
> res <- microbenchmark(NULL, f(), times=1000L)
> 
> ## Print results:
> print(res)
Unit: nanoseconds
 expr min  lq    mean median  uq    max neval cld
 NULL   0  10  10.165     10  10     70  1000   a
  f() 120 130 749.422    140 141 605419  1000   a
> 
> ## Plot results:
> boxplot(res)
> 
> ## Pretty plot:
> if (requireNamespace("ggplot2")) {
+   ggplot2::autoplot(res)
+ }
Warning in ggplot2::scale_y_log10(name = y_label) :
  log-10 transformation introduced infinite values.
Warning: Removed 12 rows containing non-finite outside the scale range
(`stat_ydensity()`).
> 
> ## Example check usage
> my_check <- function(values) {
+   all(sapply(values[-1], function(x) identical(values[[1]], x)))
+ }
> 
> f <- function(a, b)
+   2 + 2
> 
> a <- 2
> ## Check passes
> microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
Unit: nanoseconds
    expr min  lq   mean median  uq  max neval cld
   2 + 2  69  80 102.26     90 100 1182   100  a 
   2 + a  80 100 122.12    110 120  741   100  a 
 f(2, a) 310 340 378.83    350 360 3116   100   b
 f(2, 2) 320 340 360.94    341 360  761   100   b
> ## Not run: 
> ##D a <- 3
> ##D ## Check fails
> ##D microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
> ## End(Not run)
> ## Example setup usage
> set.seed(21)
> x <- rnorm(10)
> microbenchmark(x, rnorm(10), check=my_check, setup=set.seed(21))
Unit: nanoseconds
      expr  min   lq    mean median   uq   max neval cld
         x   20   30   45.11   41.0   50   471   100  a 
 rnorm(10) 1673 1694 1844.02 1718.5 1763 11893   100   b
> ## Will fail without setup
> ## Not run: 
> ##D microbenchmark(x, rnorm(10), check=my_check)
> ## End(Not run)
> ## using check
> a <- 2
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='identical')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  70  80 103.28     90  91 1042   100  a 
     2 + a  80 100 113.45    110 111  531   100  a 
 sum(2, a) 250 260 327.66    261 271 4538   100   b
 sum(2, 2) 220 240 256.67    250 260  541   100   b
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  61  80  96.89   90.0 100  320   100  a 
     2 + a  70 100 121.73  101.0 110 1532   100  a 
 sum(2, a) 240 260 279.65  265.5 280  631   100   b
 sum(2, 2) 220 240 278.19  241.0 251 2976   100   b
> attr(a, 'abc') <- 123
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equivalent')
Unit: nanoseconds
      expr min  lq   mean median    uq  max neval cld
     2 + 2  70 100 117.04  101.0 110.0  772   100  a 
     2 + a 200 240 286.62  241.0 251.0 3797   100  ab
 sum(2, a) 280 300 358.10  310.0 321.0 4398   100   b
 sum(2, 2) 240 281 379.36  290.5 300.5 8015   100   b
> ## check='equal' will fail due to difference in attribute
> ## Not run: 
> ##D microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.microbenchmark")
> ### * print.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.microbenchmark
> ### Title: Print 'microbenchmark' timings.
> ### Aliases: print.microbenchmark
> 
> ### ** Examples
> 
> a1 <- a2 <- a3 <- a4 <- numeric(0)
> 
> res <- microbenchmark(a1 <- c(a1, 1),
+                       a2 <- append(a2, 1),
+                       a3[length(a3) + 1] <- 1,
+                       a4[[length(a4) + 1]] <- 1,
+                       times=100L)
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  280  441.0  538.77  511.5  601  1563   100 a  
       a2 <- append(a2, 1) 1132 1337.5 1494.05 1413.0 1523  6161   100  b 
   a3[length(a3) + 1] <- 1  782  861.5 1020.86  931.5 1057  4789   100   c
 a4[[length(a4) + 1]] <- 1  761  821.5 1080.15  877.0 1032 14918   100   c
> ## Change default unit to relative runtime
> options(microbenchmark.unit="relative")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  280  441.0  538.77  511.5  601  1563   100 a  
       a2 <- append(a2, 1) 1132 1337.5 1494.05 1413.0 1523  6161   100  b 
   a3[length(a3) + 1] <- 1  782  861.5 1020.86  931.5 1057  4789   100   c
 a4[[length(a4) + 1]] <- 1  761  821.5 1080.15  877.0 1032 14918   100   c
> ## Change default unit to evaluations per second
> options(microbenchmark.unit="eps")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  280  441.0  538.77  511.5  601  1563   100 a  
       a2 <- append(a2, 1) 1132 1337.5 1494.05 1413.0 1523  6161   100  b 
   a3[length(a3) + 1] <- 1  782  861.5 1020.86  931.5 1057  4789   100   c
 a4[[length(a4) + 1]] <- 1  761  821.5 1080.15  877.0 1032 14918   100   c
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.1 0.092 4.192 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
