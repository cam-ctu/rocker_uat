
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "microbenchmark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('microbenchmark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autoplot.microbenchmark")
> ### * autoplot.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.microbenchmark
> ### Title: Autoplot method for microbenchmark objects: Prettier graphs for
> ###   microbenchmark using ggplot2
> ### Aliases: autoplot.microbenchmark
> 
> ### ** Examples
> 
> if (requireNamespace("ggplot2", quietly = TRUE)) {
+     tm <- microbenchmark(rchisq(100, 0),
+                          rchisq(100, 1),
+                          rchisq(100, 2),
+                          rchisq(100, 3),
+                          rchisq(100, 5), times=1000L)
+     ggplot2::autoplot(tm)
+ 
+     # add a custom title
+     ggplot2::autoplot(tm) + ggplot2::ggtitle("my timings")
+ }
> 
> 
> 
> cleanEx()
> nameEx("microbenchmark")
> ### * microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: microbenchmark
> ### Title: Sub-millisecond accurate timing of expression evaluation.
> ### Aliases: microbenchmark
> 
> ### ** Examples
> 
> ## Measure the time it takes to dispatch a simple function call
> ## compared to simply evaluating the constant \code{NULL}
> f <- function() NULL
> res <- microbenchmark(NULL, f(), times=1000L)
> 
> ## Print results:
> print(res)
Unit: nanoseconds
 expr min  lq    mean median  uq    max neval cld
 NULL   0  10   9.976     10  10     49  1000   a
  f() 110 120 666.484    130 140 534748  1000   a
> 
> ## Plot results:
> boxplot(res)
> 
> ## Pretty plot:
> if (requireNamespace("ggplot2")) {
+   ggplot2::autoplot(res)
+ }
Warning in ggplot2::scale_y_log10(name = y_label) :
  log-10 transformation introduced infinite values.
Warning: Removed 15 rows containing non-finite outside the scale range
(`stat_ydensity()`).
> 
> ## Example check usage
> my_check <- function(values) {
+   all(sapply(values[-1], function(x) identical(values[[1]], x)))
+ }
> 
> f <- function(a, b)
+   2 + 2
> 
> a <- 2
> ## Check passes
> microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
Unit: nanoseconds
    expr min  lq   mean median  uq  max neval cld
   2 + 2  50  70  83.80   70.5  80  902   100  a 
   2 + a  70  80  92.78   90.0  90  551   100  a 
 f(2, a) 270 290 330.06  291.0 310 2825   100   b
 f(2, 2) 271 290 309.86  291.0 301  811   100   b
> ## Not run: 
> ##D a <- 3
> ##D ## Check fails
> ##D microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
> ## End(Not run)
> ## Example setup usage
> set.seed(21)
> x <- rnorm(10)
> microbenchmark(x, rnorm(10), check=my_check, setup=set.seed(21))
Unit: nanoseconds
      expr  min     lq    mean median     uq   max neval cld
         x   20   30.0   45.43     40   50.0   682   100  a 
 rnorm(10) 1573 1612.5 1793.00   1643 1708.5 13155   100   b
> ## Will fail without setup
> ## Not run: 
> ##D microbenchmark(x, rnorm(10), check=my_check)
> ## End(Not run)
> ## using check
> a <- 2
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='identical')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  50  70  92.95     70  80 1463   100  a 
     2 + a  70  80  92.95     90 100  211   100  a 
 sum(2, a) 210 221 275.44    231 241 2996   100   b
 sum(2, 2) 191 211 235.76    221 231  471   100   b
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
Unit: nanoseconds
      expr min    lq   mean median  uq  max neval cld
     2 + 2  50  70.0  83.73     80  81  361   100  a 
     2 + a  60  80.0 107.20     90 100 2004   100  a 
 sum(2, a) 200 215.5 246.84    221 231  702   100   b
 sum(2, 2) 190 210.0 262.30    220 230 3456   100   b
> attr(a, 'abc') <- 123
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equivalent')
Unit: nanoseconds
      expr min  lq   mean median    uq  max neval cld
     2 + 2  60  70  84.76     80  80.0  501   100  a 
     2 + a 150 171 227.26    181 200.0 3196   100   b
 sum(2, a) 200 220 271.86    230 240.5 3367   100   b
 sum(2, 2) 190 210 226.76    211 230.0  490   100   b
> ## check='equal' will fail due to difference in attribute
> ## Not run: 
> ##D microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.microbenchmark")
> ### * print.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.microbenchmark
> ### Title: Print 'microbenchmark' timings.
> ### Aliases: print.microbenchmark
> 
> ### ** Examples
> 
> a1 <- a2 <- a3 <- a4 <- numeric(0)
> 
> res <- microbenchmark(a1 <- c(a1, 1),
+                       a2 <- append(a2, 1),
+                       a3[length(a3) + 1] <- 1,
+                       a4[[length(a4) + 1]] <- 1,
+                       times=100L)
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median     uq   max neval cld
            a1 <- c(a1, 1)  220  411.0  482.29  491.0  556.0  1402   100 a  
       a2 <- append(a2, 1) 1082 1292.0 1520.56 1362.0 1478.0  9347   100  b 
   a3[length(a3) + 1] <- 1  661  731.5  928.29  856.5  971.5  4779   100   c
 a4[[length(a4) + 1]] <- 1  652  732.0  991.09  797.0  936.5 15228   100   c
> ## Change default unit to relative runtime
> options(microbenchmark.unit="relative")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median     uq   max neval cld
            a1 <- c(a1, 1)  220  411.0  482.29  491.0  556.0  1402   100 a  
       a2 <- append(a2, 1) 1082 1292.0 1520.56 1362.0 1478.0  9347   100  b 
   a3[length(a3) + 1] <- 1  661  731.5  928.29  856.5  971.5  4779   100   c
 a4[[length(a4) + 1]] <- 1  652  732.0  991.09  797.0  936.5 15228   100   c
> ## Change default unit to evaluations per second
> options(microbenchmark.unit="eps")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median     uq   max neval cld
            a1 <- c(a1, 1)  220  411.0  482.29  491.0  556.0  1402   100 a  
       a2 <- append(a2, 1) 1082 1292.0 1520.56 1362.0 1478.0  9347   100  b 
   a3[length(a3) + 1] <- 1  661  731.5  928.29  856.5  971.5  4779   100   c
 a4[[length(a4) + 1]] <- 1  652  732.0  991.09  797.0  936.5 15228   100   c
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.085 0.102 4.187 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
