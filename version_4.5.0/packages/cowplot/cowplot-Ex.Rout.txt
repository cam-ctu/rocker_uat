
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cowplot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cowplot')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_sub")
> ### * add_sub
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_sub
> ### Title: Add annotation underneath a plot
> ### Aliases: add_sub
> 
> ### ** Examples
> 
> library(ggplot2)
> theme_set(theme_half_open())
> p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + background_grid(minor='none')
> ggdraw(add_sub(p1, "This is an annotation.\nAnnotations can span multiple lines."))
> 
> # You can also do this repeatedly.
> p2 <- add_sub(p1, "This formula has no relevance here:", y  = 0, vjust = 0)
> p3 <- add_sub(p2, expression(paste(a^2+b^2, " = ", c^2)))
> ggdraw(p3)
> 
> #This code also works with faceted plots:
> plot.iris <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
+   geom_point() + facet_grid(. ~ Species) + stat_smooth(method = "lm") +
+   background_grid(major = 'y', minor = "none") + # add thin horizontal lines
+   panel_border() # and a border around each panel
> p2 <- add_sub(plot.iris, "Annotation underneath a faceted plot, left justified.", x = 0, hjust = 0)
`geom_smooth()` using formula = 'y ~ x'
> ggdraw(p2)
> 
> # Finally, it is possible to move the annotation inside of the plot if desired.
> ggdraw(add_sub(p1, "Annotation inside plot", vpadding=grid::unit(0, "lines"),
+        y = 6, x = 0.03, hjust = 0))
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("align_margin")
> ### * align_margin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: align_margin
> ### Title: Align multiple plots along a specified margin
> ### Aliases: align_margin
> ### Keywords: internal
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Example for how to utilize, though align_plots() does this internally and automatically
> df <- data.frame(
+   x = 1:10, y1 = 1:10, y2 = (1:10)^2, y3 = (1:10)^3
+ )
> 
> p1 <- ggplot(df, aes(x, y1)) + geom_point()
> p2 <- ggplot(df, aes(x, y2)) + geom_point()
> p3 <- ggplot(df, aes(x, y3)) + geom_point()
> plots <- list(p1, p2, p3)
> grobs <- lapply(plots, as_grob)
> plot_widths <- lapply(grobs, function(x) {x$widths})
> # Aligning the left margins of all plots
> aligned_widths <- align_margin(plot_widths, "first")
> # Aligning the right margins of all plots as well
> aligned_widths <- align_margin(aligned_widths, "last")
> # Setting the dimensions of plots to the aligned dimensions
> for (i in seq_along(plots)) {
+   grobs[[i]]$widths <- aligned_widths[[i]]
+ }
> # Draw aligned plots
> plot_grid(plotlist = grobs, ncol = 1)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("align_plots")
> ### * align_plots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: align_plots
> ### Title: Align multiple plots vertically and/or horizontally
> ### Aliases: align_plots
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mpg, aes(manufacturer, hwy)) + stat_summary(fun.y="median", geom = "bar") +
+   theme_half_open() +
+   theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust= 1))
Warning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.
ℹ Please use the `fun` argument instead.
> p2 <- ggplot(mpg, aes(manufacturer, displ)) + geom_point(color="red") +
+   scale_y_continuous(position = "right") +
+   theme_half_open() + theme(axis.text.x = element_blank())
> 
> # manually align and plot on top of each other
> aligned_plots <- align_plots(p1, p2, align="hv", axis="tblr")
> 
> # Note: In most cases two y-axes should not be used, but this example
> # illustrates how one could accomplish it.
> ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("as_grob")
> ### * as_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_grob
> ### Title: Convert a base plot or a ggplot2 plot into a grob
> ### Aliases: as_grob
> 
> ### ** Examples
> 
> library(grid)
> x <- 1:10
> y <- (1:10)^2
> 
> p <- ~plot(x, y)
> grid.newpage()
> grid.draw(as_grob(p))
> 
> 
> 
> cleanEx()

detaching ‘package:grid’

> nameEx("axis_canvas")
> ### * axis_canvas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: axis_canvas
> ### Title: Generates a canvas onto which one can draw axis-like objects.
> ### Aliases: axis_canvas
> 
> ### ** Examples
> 
> # annotate line graphs with labels on the right
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(ggplot2)
> theme_set(theme_half_open())
> x <- seq(0, 10, .1)
> d <- data.frame(x,
+                 linear = x,
+                 squared = x*x/5,
+                 cubed = x*x*x/25) %>%
+   gather(fun, y, -x)
> 
> pmain <- ggplot(d, aes(x, y, group = fun)) + geom_line()  +
+   scale_x_continuous(expand = c(0, 0))
> 
> paxis <- axis_canvas(pmain, axis = "y") +
+   geom_text(data = filter(d, x == max(x)), aes(y = y, label = paste0(" ", fun)),
+             x = 0, hjust = 0, vjust = 0.5)
> ggdraw(insert_yaxis_grob(pmain, paxis, grid::unit(.25, "null")))
> 
> # discrete scale with integrated color legend
> pmain <- ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
+   geom_violin(trim = FALSE) + guides(fill = "none") +
+   scale_x_discrete(labels = NULL) +
+   theme_minimal()
> 
> label_data <- data.frame(x = 1:nlevels(iris$Species),
+                          Species = levels(iris$Species))
> paxis <- axis_canvas(pmain, axis = "x", data = label_data, mapping = aes(x = x)) +
+   geom_tile(aes(fill = Species, y = 0.5), width = 0.9, height = 0.3) +
+   geom_text(aes(label = Species, y = 0.5), hjust = 0.5, vjust = 0.5, size = 11/.pt)
> ggdraw(insert_xaxis_grob(pmain, paxis, grid::unit(.07, "null"),
+                          position = "bottom"))
> 
> # add marginal density distributions to plot
> pmain <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point()
> 
> xdens <- axis_canvas(pmain, axis = "x") +
+   geom_density(data=iris, aes(x=Sepal.Length, fill=Species), alpha=0.7, size=.2)
Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead.
> 
> # need to set `coord_flip = TRUE` if you plan to use `coord_flip()`
> ydens <- axis_canvas(pmain, axis = "y", coord_flip = TRUE) +
+   geom_density(data=iris, aes(x=Sepal.Width, fill=Species), alpha=0.7, size=.2) +
+   coord_flip()
> 
> p1 <- insert_xaxis_grob(pmain, xdens, grid::unit(.2, "null"), position = "top")
> p2 <- insert_yaxis_grob(p1, ydens, grid::unit(.2, "null"), position = "right")
> ggdraw(p2)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:tidyr’, ‘package:dplyr’

> nameEx("background_grid")
> ### * background_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: background_grid
> ### Title: Add/modify/remove the background grid in a ggplot2 plot
> ### Aliases: background_grid
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
+  geom_point() +
+  theme_half_open() +
+  background_grid()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("draw_figure_label")
> ### * draw_figure_label
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_figure_label
> ### Title: Add a label to a figure
> ### Aliases: draw_figure_label
> 
> ### ** Examples
> 
> library(ggplot2)
> df <- data.frame(
+   x = 1:10, y1 = 1:10, y2 = (1:10)^2, y3 = (1:10)^3, y4 = (1:10)^4
+ )
> 
> p1 <- ggplot(df, aes(x, y1)) + geom_point()
> p2 <- ggplot(df, aes(x, y2)) + geom_point()
> p3 <- ggplot(df, aes(x, y3)) + geom_point()
> p4 <- ggplot(df, aes(x, y4)) + geom_point()
> 
> # Create a simple grid
> p <- plot_grid(p1, p2, p3, p4, align = 'hv')
> 
> # Default font size and position
> p + draw_figure_label(label = "Figure 1")
> 
> # Different position and font size
> p + draw_figure_label(label = "Figure 1", position = "bottom.right", size = 10)
> 
> # Using bold font face
> p + draw_figure_label(label = "Figure 1", fontface = "bold")
> 
> # Making the label red and slanted
> p + draw_figure_label(label = "Figure 1", angle = -45, colour = "red")
> 
> # Labeling an individual plot
> ggdraw(p2) + draw_figure_label(label = "Figure 1", position = "bottom.right", size = 10)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("draw_grob")
> ### * draw_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_grob
> ### Title: Draw a grob.
> ### Aliases: draw_grob GeomDrawGrob
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # A grid grob (here a blue circle)
> g <- grid::circleGrob(gp = grid::gpar(fill = "blue"))
> # place into the middle of the plotting area, at a scale of 50%
> ggdraw() + draw_grob(g, scale = 0.5)
> 
> 
> 
> cleanEx()
> nameEx("draw_image")
> ### * draw_image
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_image
> ### Title: Draw an image
> ### Aliases: draw_image
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # Use image as plot background
> p <- ggplot(iris, aes(x = Sepal.Length, fill = Species)) +
+   geom_density(alpha = 0.7) +
+   scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
+   theme_half_open(12)
> 
> logo_file <- system.file("extdata", "logo.png", package = "cowplot")
> ggdraw() +
+   draw_image(
+     logo_file, scale = .7
+   ) +
+   draw_plot(p)
> 
> # Place in lower right corner
> ggdraw() +
+   draw_image(
+     logo_file, scale = .3, x = 1,
+     hjust = 1, halign = 1, valign = 0
+   ) +
+   draw_plot(p)
> 
> ## Not run: 
> ##D 
> ##D # Make grid with plot and image
> ##D cow_file <- system.file("extdata", "cow.jpg", package = "cowplot")
> ##D p2 <- ggdraw() + draw_image(cow_file, scale = 0.9)
> ##D plot_grid(
> ##D   p + theme(legend.position = c(1, 1), legend.justification = c(1, 1)),
> ##D   p2,
> ##D   labels = "AUTO"
> ##D )
> ##D 
> ##D # Manipulate images and draw in plot coordinates
> ##D if (requireNamespace("magick", quietly = TRUE)){
> ##D   img <- magick::image_transparent(
> ##D     magick::image_read(logo_file),
> ##D     color = "white"
> ##D   )
> ##D   img2 <- magick::image_negate(img)
> ##D   ggplot(data.frame(x = 1:3, y = 1:3), aes(x, y)) +
> ##D     geom_point(size = 3) +
> ##D     geom_abline(slope = 1, intercept = 0, linetype = 2, color = "blue") +
> ##D     draw_image(img , x = 1, y = 1, scale = .9) +
> ##D     draw_image(img2, x = 2, y = 2, scale = .9)
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("draw_label")
> ### * draw_label
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_label
> ### Title: Draw a text label or mathematical expression.
> ### Aliases: draw_label
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # setup plot and a label (regression description)
> p <- ggplot(mtcars, aes(disp, mpg)) +
+   geom_line(color = "blue") +
+   theme_half_open() +
+   background_grid(minor = 'none')
> out <- cor.test(mtcars$disp, mtcars$mpg, method = 'sp', exact = FALSE)
> label <- substitute(
+   paste("Spearman ", rho, " = ", estimate, ", P = ", pvalue),
+   list(estimate = signif(out$estimate, 2), pvalue = signif(out$p.value, 2))
+ )
> 
> # Add label to plot, centered on {x,y} (in data coordinates)
> p + draw_label(label, x = 300, y = 32)
> # Add label to plot in data coordinates, flush-left at x, baseline at y.
> p + draw_label(label, x = 100, y = 30, hjust = 0, vjust = 0)
> 
> # Add labels via ggdraw. Uses ggdraw coordinates.
> # ggdraw coordinates default to xlim = c(0, 1), ylim = c(0, 1).
> ggdraw(p) +
+   draw_label("centered on 70% of x range,\n90% of y range", x = 0.7, y = 0.9)
> 
> ggdraw(p) +
+   draw_label("bottom left at (0, 0)", x = 0, y = 0, hjust = 0, vjust = 0) +
+   draw_label("top right at (1, 1)", x = 1, y = 1, hjust = 1, vjust = 1) +
+   draw_label("centered on (0.5, 0.5)", x = 0.5, y = 0.5, hjust = 0.5, vjust = 0.5)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("draw_line")
> ### * draw_line
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_line
> ### Title: Draw a line from connected points
> ### Aliases: draw_line
> 
> ### ** Examples
> 
> ggdraw() +
+   draw_line(
+     x = c(0.2, 0.7, 0.7, 0.3),
+     y = c(0.1, 0.3, 0.9, 0.8),
+     color = "blue", size = 2
+   )
> 
> 
> 
> cleanEx()
> nameEx("draw_plot")
> ### * draw_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_plot
> ### Title: Draw a (sub)plot.
> ### Aliases: draw_plot
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # make a plot
> p <- ggplot(data.frame(x = 1:3, y = 1:3), aes(x, y)) +
+     geom_point()
> # draw into the top-right corner of a larger plot area
> ggdraw() + draw_plot(p, .6, .6, .4, .4)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("draw_text")
> ### * draw_text
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw_text
> ### Title: Draw multiple text-strings in one go.
> ### Aliases: draw_text
> 
> ### ** Examples
> 
> # Draw onto a 1*1 drawing surface
> ggdraw() + draw_text("Hello World!", x = 0.5, y = 0.5)
> #
> # Adorn a plot from the Anscombe data set of "identical" data.
> library(ggplot2)
> 
> p <- ggplot(anscombe, aes(x1, y1)) + geom_point() + geom_smooth()
> three_strings <- c("Hello World!", "to be or not to be", "over and out")
> p + draw_text(three_strings, x = 8:10, y = 5:7, hjust = 0)
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("get_legend")
> ### * get_legend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_legend
> ### Title: Retrieve the legend of a plot
> ### Aliases: get_legend
> 
> ### ** Examples
> 
> library(ggplot2)
> theme_set(theme_half_open())
> 
> p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line()
> plot.mpg <- ggplot(mpg, aes(x = cty, y = hwy, colour = factor(cyl))) + geom_point(size=2.5)
> # Note that these cannot be aligned vertically due to the legend in the plot.mpg
> ggdraw(plot_grid(p1, plot.mpg, ncol=1, align='v'))
> 
> legend <- get_legend(plot.mpg)
Warning in get_plot_component(plot, "guide-box") :
  Multiple components found; returning the first one. To return all, use `return_all = TRUE`.
> plot.mpg <- plot.mpg + theme(legend.position='none')
> # Now plots are aligned vertically with the legend to the right
> ggdraw(plot_grid(plot_grid(p1, plot.mpg, ncol=1, align='v'),
+                  plot_grid(NULL, legend, ncol=1),
+                  rel_widths=c(1, 0.2)))
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("get_panel")
> ### * get_panel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_panel
> ### Title: Retrieve the panel or part of a panel of a plot
> ### Aliases: get_panel get_panel_component
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p <- ggplot(mpg, aes(displ, cty)) + geom_point()
> plot_panel <- get_panel(p)
> ggdraw(plot_panel)
> 
> ggdraw(get_panel_component(plot_panel, "geom_point"))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("get_plot_component")
> ### * get_plot_component
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_plot_component
> ### Title: Get plot components
> ### Aliases: get_plot_component plot_component_names plot_components
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p <- ggplot(mpg, aes(displ, cty)) + geom_point()
> ggdraw(get_plot_component(p, "ylab-l"))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("get_title")
> ### * get_title
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_title
> ### Title: Get plot titles
> ### Aliases: get_title get_subtitle
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p <- ggplot(mpg, aes(displ, cty)) +
+   geom_point() +
+   labs(
+     title = "Plot title",
+     subtitle = "Plot subtitle"
+   )
> ggdraw(get_title(p))
> ggdraw(get_subtitle(p))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("get_y_axis")
> ### * get_y_axis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_y_axis
> ### Title: Get plot axes
> ### Aliases: get_y_axis get_x_axis
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p <- ggplot(mpg, aes(displ, cty)) +
+   geom_point()
> 
> ggdraw(get_y_axis(p))
> p <- p + scale_x_continuous(position = "top")
> ggdraw(get_x_axis(p, position = "top"))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("ggdraw")
> ### * ggdraw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggdraw
> ### Title: Set up a drawing layer on top of a ggplot
> ### Aliases: ggdraw
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p <- ggplot(mpg, aes(displ, cty)) +
+   geom_point() +
+   theme_minimal_grid()
> ggdraw(p) + draw_label("Draft", colour = "#80404080", size = 120, angle = 45)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot_grid")
> ### * plot_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_grid
> ### Title: Arrange multiple plots into a grid
> ### Aliases: plot_grid
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> df <- data.frame(
+   x = 1:10, y1 = 1:10, y2 = (1:10)^2, y3 = (1:10)^3, y4 = (1:10)^4
+ )
> 
> p1 <- ggplot(df, aes(x, y1)) + geom_point()
> p2 <- ggplot(df, aes(x, y2)) + geom_point()
> p3 <- ggplot(df, aes(x, y3)) + geom_point()
> p4 <- ggplot(df, aes(x, y4)) + geom_point()
> p5 <- ggplot(mpg, aes(as.factor(year), hwy)) +
+         geom_boxplot() +
+         facet_wrap(~class, scales = "free_y")
> # simple grid
> plot_grid(p1, p2, p3, p4)
> 
> # simple grid with labels and aligned plots
> plot_grid(
+   p1, p2, p3, p4,
+   labels = c('A', 'B', 'C', 'D'),
+   align="hv"
+ )
> 
> # manually setting the number of rows, auto-generate upper-case labels
> plot_grid(p1, p2, p3,
+   nrow = 3,
+   labels = "AUTO",
+   label_size = 12,
+   align = "v"
+ )
> 
> # making rows and columns of different widths/heights
> plot_grid(
+   p1, p2, p3, p4,
+   align = 'hv',
+   rel_heights = c(2,1),
+   rel_widths = c(1,2)
+ )
> 
> # aligning complex plots in a grid
> plot_grid(
+   p1, p5,
+   align = "h", axis = "b", nrow = 1, rel_widths = c(1, 2)
+ )
> 
> # more examples
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("rectangle_key_glyph")
> ### * rectangle_key_glyph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rectangle_key_glyph
> ### Title: Create customizable legend key glyphs
> ### Aliases: rectangle_key_glyph circle_key_glyph
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> set.seed(1233)
> df <- data.frame(
+   x = sample(letters[1:2], 10, TRUE),
+   y = rnorm(10)
+ )
> 
> ggplot(df, aes(x, y, color = x)) +
+   geom_boxplot(
+     key_glyph = rectangle_key_glyph(fill = color, padding = margin(3, 3, 3, 3))
+   )
> 
> ggplot(df, aes(x, y, color = x)) +
+   geom_boxplot(
+     key_glyph = circle_key_glyph(
+       fill = color,
+       color = "black", linetype = 3, size = 0.3,
+       padding = margin(2, 2, 2, 2)
+     )
+   )
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("save_plot")
> ### * save_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save_plot
> ### Title: Alternative to 'ggsave()', with better support for multi-figure
> ###   plots.
> ### Aliases: save_plot
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("set_null_device")
> ### * set_null_device
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_null_device
> ### Title: Sets the null graphics device
> ### Aliases: set_null_device
> 
> ### ** Examples
> 
> set_null_device("png") # set the png null device
> 
> # create a jpeg null device
> jpeg_null_device <- function(width, height) {
+   jpeg(
+     filename = tempfile(pattern = "jpeg_null_plot", fileext = ".jpg"),
+     width = width, height = height, units = "in", res = 96
+    )
+   dev.control("enable")
+ }
> set_null_device(jpeg_null_device)
> 
> 
> 
> cleanEx()
> nameEx("stamp")
> ### * stamp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stamp
> ### Title: Stamp plots with a label, such as good, bad, or ugly.
> ### Aliases: stamp stamp_good stamp_bad stamp_wrong stamp_ugly
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
+   geom_point(aes(color = factor(Petal.Width)))
> 
> stamp_bad(p + guides(color = "none"))
> stamp_ugly(p)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("theme_cowplot")
> ### * theme_cowplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_cowplot
> ### Title: Create the default cowplot theme
> ### Aliases: theme_cowplot theme_half_open
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(mtcars, aes(disp, mpg)) +
+   geom_point() +
+   theme_cowplot(font_size = 12)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("theme_map")
> ### * theme_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_map
> ### Title: Create a theme for map plotting
> ### Aliases: theme_map
> 
> ### ** Examples
> 
> library(ggplot2)
> library(maps)
> 
> usa_data = map_data("usa")
> ggplot(usa_data, aes(long, lat, fill = region)) +
+   geom_polygon() + theme_map()
> ggplot(usa_data, aes(long, lat, fill = region)) +
+   facet_wrap(~region, scales = "free") +
+   geom_polygon() + theme_map()
> 
> 
> 
> cleanEx()

detaching ‘package:maps’, ‘package:ggplot2’

> nameEx("theme_minimal_grid")
> ### * theme_minimal_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_minimal_grid
> ### Title: Minimalistic themes with grids
> ### Aliases: theme_minimal_grid theme_minimal_vgrid theme_minimal_hgrid
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> # theme_minimal_grid()
> ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
+   geom_point() + theme_minimal_grid()
> 
> # theme_minimal_hgrid()
> ggplot(mtcars, aes(x = carb)) +
+   geom_bar(fill = "lightblue") +
+   scale_y_continuous(limits = c(0, 11.5), expand = c(0, 0)) +
+   theme_minimal_hgrid()
> 
> # theme_minimal_vgrid()
> ggplot(mtcars, aes(x = carb)) +
+   geom_bar(fill = "lightblue") +
+   scale_y_continuous(limits = c(0, 11.5), expand = c(0, 0)) +
+   coord_flip() +
+   theme_minimal_vgrid()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("theme_nothing")
> ### * theme_nothing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_nothing
> ### Title: Create a completely empty theme
> ### Aliases: theme_nothing
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> ggplot(mtcars, aes(disp, mpg, color = cyl)) +
+   geom_point() +
+   theme_nothing()
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ggplot2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.904 0.158 10.074 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
