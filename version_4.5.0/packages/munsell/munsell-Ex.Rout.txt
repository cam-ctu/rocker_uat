
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "munsell"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('munsell')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("check_mnsl")
> ### * check_mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_mnsl
> ### Title: Checks for valid Munsell colours
> ### Aliases: check_mnsl
> ### Keywords: internal
> 
> ### ** Examples
> 
> check_mnsl(c("5R 5/8","2.5R 9/28"))
[1] "5R 5/8"    "2.5R 9/28"
> 
> 
> 
> cleanEx()
> nameEx("chroma_slice")
> ### * chroma_slice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chroma_slice
> ### Title: Plot all colours with the same chroma
> ### Aliases: chroma_slice
> 
> ### ** Examples
> 
> chroma_slice(2)
> chroma_slice(18)
Warning: Removed 110 rows containing missing values or values outside the scale range
(`geom_text()`).
> # Maybe want to delete text and add axis instead
> p <- chroma_slice(18)
> p$layers[[2]] <- NULL # remove text layer
> p + ggplot2::theme(axis.text = ggplot2::element_text(), 
+    axis.text.x = ggplot2::element_text(angle = 90, hjust = 1))
> # all values 
> ## Not run: chroma_slice(seq(0, 38, by = 2))
> 
> 
> 
> cleanEx()
> nameEx("complement")
> ### * complement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complement
> ### Title: Find the complement of a munsell colour
> ### Aliases: complement
> 
> ### ** Examples
> 
> complement("5PB 2/4")
[1] "5Y 2/4"
> cols <- c("5PB 2/4", "5Y 7/8")
> plot_mnsl(c(cols, complement(cols)))
> 
> 
> 
> cleanEx()
> nameEx("complement_slice")
> ### * complement_slice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complement_slice
> ### Title: A vertical slice through the Munsell space
> ### Aliases: complement_slice
> 
> ### ** Examples
> 
> complement_slice("5PB")
Warning: Removed 41 rows containing missing values or values outside the scale range
(`geom_text()`).
> complement_slice("5R")
Warning: Removed 67 rows containing missing values or values outside the scale range
(`geom_text()`).
> complement_slice("10G")
Warning: Removed 85 rows containing missing values or values outside the scale range
(`geom_text()`).
> 
> 
> 
> cleanEx()
> nameEx("darker")
> ### * darker
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: darker
> ### Title: Make a munsell colour darker
> ### Aliases: darker
> 
> ### ** Examples
> 
> darker("5PB 3/4")
[1] "5PB 2/4"
> cols <- c("5PB 3/4", "5Y 7/8")
> p <- plot_mnsl(c(cols, darker(cols), darker(cols, 2)))
> p + ggplot2::facet_wrap(~ names, ncol = 2)
> 
> 
> 
> cleanEx()
> nameEx("desaturate")
> ### * desaturate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: desaturate
> ### Title: Make a munsell colour less saturated
> ### Aliases: desaturate
> 
> ### ** Examples
> 
> desaturate("5PB 2/4")
[1] "5PB 2/2"
> cols <- c("5PB 2/6", "5Y 7/8")
> p <- plot_mnsl(c(cols, desaturate(cols), desaturate(cols, 2)))
> p + ggplot2::facet_wrap(~ names, ncol = 2)
> 
> 
> 
> cleanEx()
> nameEx("fix_mnsl")
> ### * fix_mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_mnsl
> ### Title: Fix an undefined Munsell colour
> ### Aliases: fix_mnsl
> ### Keywords: internal
> 
> ### ** Examples
> 
> fix_mnsl(c("5R 5/8","2.5R 9/28"))
[1] "5R 5/18"  "2.5R 9/2"
> 
> 
> 
> cleanEx()
> nameEx("hue_slice")
> ### * hue_slice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hue_slice
> ### Title: Plot all colours with the same hue
> ### Aliases: hue_slice
> 
> ### ** Examples
> 
> hue_slice("5R")
Warning: Removed 19 rows containing missing values or values outside the scale range
(`geom_text()`).
> hue_slice(c("5R", "5P"))
Warning: Removed 50 rows containing missing values or values outside the scale range
(`geom_text()`).
> ## Not run: hue_slice("all")
> 
> 
> 
> cleanEx()
> nameEx("hvc2mnsl")
> ### * hvc2mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hvc2mnsl
> ### Title: Converts a hue, chroma and value to a Munsell colour
> ### Aliases: hvc2mnsl
> 
> ### ** Examples
> 
> hvc2mnsl("5PB", 5, 10)
[1] "5PB 5/10"
> # All values of 5PB with chroma 10
> hvc2mnsl("5PB", 1:9, 10) # note some are undefined
[1] "5PB 1/10" "5PB 2/10" "5PB 3/10" "5PB 4/10" "5PB 5/10" "5PB 6/10" "5PB 7/10"
[8] "5PB 8/10" "5PB 9/10"
> plot_mnsl(hvc2mnsl("5PB", 1:9, 10))
Warning in in_gamut(cols, ...) :
  some specified colours are undefined. You could try fix = TRUE
> 
> 
> 
> cleanEx()
> nameEx("in_gamut")
> ### * in_gamut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: in_gamut
> ### Title: Checks if a Munsell colour is defined in RGB space
> ### Aliases: in_gamut
> ### Keywords: internal
> 
> ### ** Examples
> 
> in_gamut(c("5R 5/8","2.5R 9/28"))
Warning in in_gamut(c("5R 5/8", "2.5R 9/28")) :
  some specified colours are undefined. You could try fix = TRUE
[1] "5R 5/8" NA      
> 
> 
> 
> cleanEx()
> nameEx("lighter")
> ### * lighter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lighter
> ### Title: Make a munsell colour lighter
> ### Aliases: lighter
> 
> ### ** Examples
> 
> lighter("5PB 2/4")
[1] "5PB 3/4"
> cols <- c("5PB 2/4", "5Y 6/8")
> p <- plot_mnsl(c(cols, lighter(cols), lighter(cols, 2)))
> p + ggplot2::facet_wrap(~ names, ncol = 2)
> # lighter and darker are usually reversible
> lighter(darker("5PB 2/4"))
[1] "5PB 2/4"
> # unless you try to pass though white or black
> lighter(darker("5PB 1/4"))
[1] "N 1/0"
> 
> 
> 
> cleanEx()
> nameEx("mnsl")
> ### * mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mnsl
> ### Title: Converts a Munsell colour to hex
> ### Aliases: mnsl mnsl2hex
> 
> ### ** Examples
> 
> mnsl2hex("5PB 5/10")
[1] "#447DBF"
> # use a munsell colour in a plot
> plot.new()
> rect(0, 0, 1 ,1 , col = mnsl("5R 5/10"))
> 
> 
> 
> cleanEx()
> nameEx("mnsl2hvc")
> ### * mnsl2hvc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mnsl2hvc
> ### Title: Converts a Munsell colour to a hue, chroma and value triplet
> ### Aliases: mnsl2hvc
> 
> ### ** Examples
> 
> mnsl2hvc("5PB 5/10")
  hue value chroma
1 5PB     5     10
> hvc2mnsl(mnsl2hvc("5PB 5/10"))
[1] "5PB 5/10"
> 
> 
> 
> cleanEx()
> nameEx("mnsl_hues")
> ### * mnsl_hues
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mnsl_hues
> ### Title: Munsell hues
> ### Aliases: mnsl_hues
> 
> ### ** Examples
> 
> mnsl_hues()
 [1] "2.5R"  "5R"    "7.5R"  "10R"   "2.5YR" "5YR"   "7.5YR" "10YR"  "2.5Y" 
[10] "5Y"    "7.5Y"  "10Y"   "2.5GY" "5GY"   "7.5GY" "10GY"  "2.5G"  "5G"   
[19] "7.5G"  "10G"   "2.5BG" "5BG"   "7.5BG" "10BG"  "2.5B"  "5B"    "7.5B" 
[28] "10B"   "2.5PB" "5PB"   "7.5PB" "10PB"  "2.5P"  "5P"    "7.5P"  "10P"  
[37] "2.5RP" "5RP"   "7.5RP" "10RP" 
> 
> 
> 
> cleanEx()
> nameEx("pbgyr")
> ### * pbgyr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pbgyr
> ### Title: Change the hue of a munsell colour
> ### Aliases: pbgyr
> 
> ### ** Examples
> 
> my_red <- "2.5R 4/8"
> pbgyr(my_red)
[1] "10RP 4/8"
> plot_mnsl(c(my_red, pbgyr(my_red, 2), pbgyr(my_red, 4)))
> 
> 
> 
> cleanEx()
> nameEx("plot_closest")
> ### * plot_closest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_closest
> ### Title: Plot closest Munsell colour to an sRGB colour
> ### Aliases: plot_closest
> 
> ### ** Examples
> 
> plot_closest(0.1, 0.1, 0.3)
> plot_closest(matrix(c(.1, .2, .4, .5, .6, .8),  ncol = 3)) 
> 
> 
> 
> cleanEx()
> nameEx("plot_hex")
> ### * plot_hex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_hex
> ### Title: Plot hex colours
> ### Aliases: plot_hex
> 
> ### ** Examples
> 
> plot_hex("#000000")
> plot_hex(c("#000000","#FFFFFF"))
> 
> 
> 
> cleanEx()
> nameEx("plot_mnsl")
> ### * plot_mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_mnsl
> ### Title: Plot a munsell colour
> ### Aliases: plot_mnsl
> 
> ### ** Examples
> 
> plot_mnsl("5R 5/6")
> plot_mnsl("5R 5/6",  back.col = "grey40")
> p <- plot_mnsl(c("5R 6/6", "5Y 6/6", "5G 6/6", "5B 6/6", "5P 6/6"),
+  back.col = "grey40")
> p
> # returned object is a ggplot object so we can alter the layout
> summary(p)
data: num, names, hex, x, y, labels [5x6]
mapping:  x = ~x, y = ~y
scales:   x, xmin, xmax, xend, xintercept, xmin_final, xmax_final, xlower, xmiddle, xupper, x0, y, ymin, ymax, yend, yintercept, ymin_final, ymax_final, lower, middle, upper, y0, fill, colour 
faceting: <ggproto object: Class FacetWrap, Facet, gg>
    compute_layout: function
    draw_back: function
    draw_front: function
    draw_labels: function
    draw_panels: function
    finish_data: function
    init_scales: function
    map_data: function
    params: list
    setup_data: function
    setup_params: function
    shrink: TRUE
    train_scales: function
    vars: function
    super:  <ggproto object: Class FacetWrap, Facet, gg>
-----------------------------------
mapping: fill = ~hex 
geom_tile: linejoin = mitre, na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity 

mapping: label = ~labels, colour = ~text_colour(as.character(names)) 
geom_text: parse = FALSE, check_overlap = FALSE, size.unit = mm, na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity 

> p + ggplot2::facet_wrap(~ num, nrow = 1)
> 
> 
> 
> cleanEx()
> nameEx("rgb2mnsl")
> ### * rgb2mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rgb2mnsl
> ### Title: Converts an sRGB colour to Munsell
> ### Aliases: rgb2mnsl
> 
> ### ** Examples
> 
> rgb2mnsl(0.1, 0.1, 0.3)
[1] "7.5PB 1/8"
> rgb2mnsl(matrix(c(.1, .2, .4, .5, .6, .8),  ncol = 3))
[1] "2.5PB 4/8" "5PB 5/12" 
> plot_closest(matrix(c(.1, .2, .4, .5, .6, .8),  ncol = 3))
> 
> 
> 
> cleanEx()
> nameEx("rygbp")
> ### * rygbp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rygbp
> ### Title: Change the hue of a munsell colour
> ### Aliases: rygbp
> 
> ### ** Examples
> 
> my_red <- "10R 4/8"
> rygbp(my_red)
[1] "2.5YR 4/8"
> plot_mnsl(c(my_red, rygbp(my_red, 2), rygbp(my_red, 4)))
> 
> 
> 
> cleanEx()
> nameEx("saturate")
> ### * saturate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: saturate
> ### Title: Make a munsell colour more saturated
> ### Aliases: saturate
> 
> ### ** Examples
> 
> saturate("5PB 2/4")
[1] "5PB 2/6"
> cols <- c("5PB 2/2", "5Y 7/6")
> p <- plot_mnsl(c(cols, saturate(cols), saturate(cols, 2)))
> p + ggplot2::facet_wrap(~ names, ncol = 2)
> 
> 
> 
> cleanEx()
> nameEx("seq_mnsl")
> ### * seq_mnsl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seq_mnsl
> ### Title: Generate a sequence of Munsell colours
> ### Aliases: seq_mnsl
> 
> ### ** Examples
> 
> seq_mnsl("5R 2/4", "5R 5/16", 4)
[1] "5R 2/4"  "5R 3/8"  "5R 4/12" "5R 5/16"
> plot_mnsl(seq_mnsl("5R 2/4", "5R 5/16", 4))
> plot_mnsl(seq_mnsl("5R 5/6", 
+   complement("5R 5/6"), 5))
> 
> 
> 
> cleanEx()
> nameEx("value_slice")
> ### * value_slice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: value_slice
> ### Title: Plot all colours with the same value
> ### Aliases: value_slice
> 
> ### ** Examples
> 
> value_slice(2)
> value_slice(c(2, 4))
> # all values 
> ## Not run: value_slice(1:10)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.686 0.052 5.741 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
