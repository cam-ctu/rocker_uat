
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:50:57.975] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:57.976] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:57.976] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:57.976] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.015] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:50:58.015] |  :  all.equal() for FutureStrategyList ...
[10:50:58.016] |  :  .  New stack:
[10:50:58.016] |  :  .  List of 1
[10:50:58.016] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.016] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.016] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.016] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.016] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.016] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:50:58.016] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.019] |  :  .  Old stack:
[10:50:58.020] |  :  .  List of 1
[10:50:58.020] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.020] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.020] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.020] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.020] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.020] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:58.020] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.022] |  :  .  Not identical
[10:50:58.022] |  :  .  all.equal() for future ...
[10:50:58.022] |  :  .  |  List of 2
[10:50:58.022] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.022] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.022] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.022] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.022] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.022] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:50:58.022] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.022] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.022] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.022] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.022] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.022] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.026] |  :  .  all.equal() for future ... done
[10:50:58.026] |  :  all.equal() for FutureStrategyList ... done
[10:50:58.026] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.026] |  :  List of future strategies:
[10:50:58.026] |  :  1. sequential:
[10:50:58.026] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.026] |  :     - tweaked: FALSE
[10:50:58.026] |  :     - call: plan(sequential)
[10:50:58.027] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:50:58.027] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:50:58.059] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.059] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:50:58.059] |  :  all.equal() for FutureStrategyList ...
[10:50:58.060] |  :  .  New stack:
[10:50:58.060] |  :  .  List of 1
[10:50:58.060] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.060] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.060] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.060] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.060] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.060] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.060] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.062] |  :  .  Old stack:
[10:50:58.062] |  :  .  List of 1
[10:50:58.062] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.062] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.062] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.062] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.062] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.062] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:58.062] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.064] |  :  .  Not identical
[10:50:58.064] |  :  .  all.equal() for future ...
[10:50:58.064] |  :  .  |  List of 2
[10:50:58.064] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.064] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.064] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.064] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.064] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.064] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.064] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.064] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.064] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.064] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.064] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.064] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.068] |  :  .  all.equal() for future ... done
[10:50:58.068] |  :  all.equal() for FutureStrategyList ... done
[10:50:58.068] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.068] |  :  List of future strategies:
[10:50:58.068] |  :  1. sequential:
[10:50:58.068] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.068] |  :     - tweaked: FALSE
[10:50:58.068] |  :     - call: plan(sequential)
[10:50:58.069] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:50:58.069] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.071] future_lapply() ...
[10:50:58.077] Generating random seeds ...
[10:50:58.077] Generating random seed streams for 5 elements ...
[10:50:58.078] Generating random seed streams for 5 elements ... DONE
[10:50:58.078] Generating random seeds ... DONE
[10:50:58.078] Will set RNG state on exit: 10403, 10, 1056879599, 557257718, -46185184, 734178019, -846206079, -1229558288, -1225345906, 1447402489, 159070603, -1795013190, 1244966076, -779517953, -296690347, -337142164, -1619887422, 50232605, 24138647, 236545790, -1956596552, -1075132773, -1670134535, 1102165576, -1042632330, 1037195441, -2012046109, -67056718, -694692860, -156772537, -110604771, 417342612, 1899185210, 468582021, -685965473, -1094934554, 2077250160, 401241491, -1028300239, -1714306848, 251541886, -553649143, -575583173, 316854794, 1451170284, 160726639, 210923941, -1749423780, 1620874546, -2113082323, 1354867431, -1676556274, -124757528, -274957333, 928900233, 211443736, -1035419834, 1572756897, 512701491, 1883904418, 1354808468, -15140073, -2055490291, 1651426340, -871853046, -60585611, -1048096561, 1363297238, 741129088, -1679142973, 694405473, -1985896496, -796010706, -1585919271, -438138645, 2048203098, 909468444, -1739180513, 1718349429, 2113858316, -1863678238, -1419760707, 1483574327, -717332770, 492370456, 409208187, -1512243943, 1920270760, -21981866, 56542673, 2070486403, 1920377874, -64155740, 468993895, 2035913917, -936328140, -374446182, -1926073371, -1600589953, 606777094, 1130260624, -1317879501, -1008470319, 1873806464, -548706978, 1219631785, -1143020197, 1101895530, 1865440780, -852011441, 109755141, -1820779588, 973475474, -219099763, -683278905, 2027929262, 348575496, 867599627, 997569513, -574749512, 1586852710, 160544769, -1674172781, -595928766, 662370036, -1843600649, 933442285, -1018393212, 1055400874, -651110123, -2139925585, -573772874, -827854368, -1624878813, 61179457, -1342936784, 948968270, -966098503, -1609589813, -967339910, -1514720900, -22429249, -1532379499, -253803348, -275370366, -1259805091, -1068742313, 533582910, 969750648, -1092000933, 501587641, 1333867272, -436926026, -2065361167, -950763229, 216716146, -1322722876, -302784121, 997759837, 1033753940, 1120753530, -660605243, 1835235359, 522608550, 1018978608, 1423080403, -329342479, 1965090592, 428847550, -421822007, -148802181, -130079926, -846027860, -2062136657, -509183899, -779175908, -1031973262, 1044277485, -513529561, -1481747122, -1324354136, -1243491925, 606644937, -1492477224, -690215034, -947733919, 1776378867, -1129515422, -1984032556, -1165338153, -443429939, -86196380, -1168905398, 1367538357, 1748732431, -234681578, 732718528, -343296637, -688587871, -102186096, 306110574, -157080039, -1166735701, 1232255642, -716134820, -1885850785, -855413451, -331326260, 1055254050, -1549526915, -1368186505, 872500894, 1665547608, 1182133435, -77196711, 1351940584, -701203434, 1170065297, -1560524733, -617681070, -979512348, 1004923431, -333012355, -1197827212, 816396122, 8597925, -1326174785, 204967494, -803791664, 171746370, -1972232800, -1001960772, -549359152, -1266481822, 702615528, -37625908, -128444676, 662313458, 1242353792, 42609908, 1708764808, -1070293190, 1928919888, -2119946644, -1284872044, 1583094098, -702990624, -483919156, 1215021216, -452572286, -766434584, -337280276, -1727017924, -1295361422, 221586544, -528417244, 1216298040, -347518950, -164644144, 122354748, -2026642284, -377668478, 145571776, 1983418684, -1233519984, -187059166, 1925190664, 39692428, 950035484, -753320302, -155908992, 898879508, -2075419352, 1071078970, 1338010832, 2083316844, 997118644, 1008050194, 704165856, -820398132, 1580944864, 1919002146, -690110168, -1100826356, -1829493188, 496931058, -696446224, 249324356, 308052568, -1808692678, -410575120, -1325886276, 1501885972, -1999382334, -1007916960, 1234498940, 494204112, 1559141410, 879592104, -1955215476, 2003825084, -1476963278, -947095744, 970033332, 78560072, 341990074, -1607133424, -1729666836, 1068856404, 1467571986, 968629152, 960077772, -124585120, -1934266174, -119011800, -31218260, -1174233284, 1702856562, -208184528, -1479581148, -1013065672, 1088718042, 2006591888, -1517172996, 2142678932, -851539134, -1733279232, 562879036, 537771600, -1361470814, -1392174264, -1733590516, -1282356004, -770983342, -333666176, 1529002836, 1512110568, 74935034, 278640464, 924630060, 1741337972, -138459502, -25732512, 1602183820, -1379124384, 884785890, 346988712, 1874051276, -1772189188, -1941598286, 1881437680, 380184004, 815652696, 1097223034, 111293872, 628931004, 1003546708, -921695294, 1824260896, -1820057668, 286419536, 971349474, 882684264, 228199756, 1297189116, -1921162510, 732780288, -933919116, 528386056, -2134623814, 722884560, -1047201300, 960843668, -2082606382, -75985312, 968090956, 333911328, 365064834, -1380210200, -127563796, 263927356, -471839118, -1220525200, -378156764, 968536632, 584573338, -786626096, 2060959164, 2010597524, 1844714626, -874879552, 1579443004, -1606749040, -214645982, -1642033656, 126889228, 690271644, -849617390, 460262272, -1655520492, 330314024, -620581830, 1638132688, -1064369556, -649709004, -58590574, 249126240, -91018932, 1280382944, 1819825570, 2067652008, -39786868, 926162364, 1116171890, 424483824, -195807676, 1015339096, -61417414, 934381680, -1095927748, -934979308, 1433731778, 1990807264, 481724540, 517992144, -747521630, 317943848, 32742156, 1771721148, -32672974, -125961536, -213433292, 1284970184, -2098408262, 1572484752, 82890476, 1149143636, -210754926, -880262880, 1220118988, -201440544, -1753827134, -989776856, -2136787028, -1928371524, -638637070, 744590896, -2089105500, -172020296, -125900966, 1791717520, 1271047036, -2040917740, -1621038782, -1205819136, -2070958660, -1551852575, -248601453, 714415796, -469843006, 1041577943, 756635681, 198569958, -720557340, -1558905323, 513205823, -796518952, 844037110, 809038851, 1091417925, 1156801378, -1510404912, -214558727, -1557406933, 663351452, 954724042, 1359509439, -501615863, 473189406, -726657588, 1902141341, 1100622375, 1672980560, 1660080366, 1203928475, -78011395, -1102823702, -305223288, 1722328881, 1024587683, -913547356, -472139182, 1026077095, 1229342193, -706260682, 591661524, 1465294693, -1471852689, -357723736, -1309718778, -2003115469, 1409859733, -107863822, 221067584, -1236384087, 1652260635, 614901996, 1060906234, -1758040785, -1152411335, 1674603342, -1340845668, -1880831219, -1167426185, -1188955776, 1707941854, 1327089835, -1250321491, 235118618, 2041591512, 1762645825, -1935865869, -2138076652, 1817564066, -1474736969, 1506010753, 1100496518, 1784579780, 1708795893, -323908001, -541120328, 1086786966, -794533981, -205769883, 1104081538, 340279280, -1407120999, 91432843, -736267652, -584712022, 1262297823, -476843927, 590178942, -1229557140, -163041603, -1303759993, 1536358256, -1640006130, -100015301, 1973428253, 2015082698, 1872602088, 2057400529, -1846088509, -877087804, 1474680946, 263891271, -872835823, 1483911318, -516385292, 1568499589, -1210870065, -884481080, 1345393254, -1180562285, 1893270517, -1020787246, 1767978528, 383817737, -1030349509, -1105784692, -1081287398, -40717425, 1010765017, -127753362, -1846037764, 1624113261, 1936231447, -929411616, 1567676862, -1889480821, 630624269, -14395334, 1998379128, 507016225, 1723107027, 1998534132, 967939714, -82365673, 207643105, -1660924122, 518298148, 1488510165, 1398623359, 880230680, 1035464758, 1466099395, 1712786181, 4157090, 310369424, 817343545, -553818901, -485771812, 61881354, -523773185, -454765751, 876439774, 160585356, 1397989981, -51224473, 2096643472, 908463534, -1911990181, -756592579, -601422166, 1775461192, -1617827983, -715616029, -849819676, -1211818222, 140198631, -451173199, -2065889546, 82252052, 1843316261, -1659313496
[10:50:58.079] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.079] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.079] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.079] Backend function: <‘NULL’>
[10:50:58.079] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.079] Number of chunks: 1
[10:50:58.080] getGlobalsAndPackagesXApply() ...
[10:50:58.080]  - future.globals: TRUE
[10:50:58.080] getGlobalsAndPackages() ...
[10:50:58.081] |  Searching for globals ...
[10:50:58.082] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.083] |  Searching for globals ... DONE
[10:50:58.083] |  Resolving globals: FALSE
[10:50:58.083] |  Search for packages associated with the globals ...
[10:50:58.083] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.083] |  :  Packages: [1] ‘base’
[10:50:58.084] |  Search for packages associated with the globals ... DONE
[10:50:58.084] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.084] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.085] |  Packages after dropping 'base': [0] 
[10:50:58.085] |  globals: [1] ‘FUN’
[10:50:58.085] |  packages: [0] 
[10:50:58.085] getGlobalsAndPackages() ... done
[10:50:58.085]  - globals found/used: [n=1] ‘FUN’
[10:50:58.085]  - needed namespaces: [n=0] 
[10:50:58.085] Finding globals ... DONE
[10:50:58.085]  - use_args: TRUE
[10:50:58.085]  - Getting '...' globals ...
[10:50:58.086] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.086] |  recursive: 0
[10:50:58.087] |  length: 1
[10:50:58.087] |  elements: ‘...’
[10:50:58.087] |  'obj' is DotDotDotList
[10:50:58.087] |  resolve(obj, ...) ...
[10:50:58.087] |  resolve(obj, ...) ... done
[10:50:58.087] |  length: 0 (resolved future 1)
[10:50:58.087] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.087]    - '...' content: [n=0] 
[10:50:58.088] List of 1
[10:50:58.088]  $ ...: list()
[10:50:58.088]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.088]  - attr(*, "where")=List of 1
[10:50:58.088]   ..$ ...:<environment: 0x564ad3d67580> 
[10:50:58.088]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.088]  - attr(*, "resolved")= logi TRUE
[10:50:58.088]  - attr(*, "total_size")= num NA
[10:50:58.090]  - Getting '...' globals ... DONE
[10:50:58.091] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.091] List of 2
[10:50:58.091]  $ ...future.FUN:function (...)  
[10:50:58.091]  $ ...          : list()
[10:50:58.091]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.091]  - attr(*, "where")=List of 2
[10:50:58.091]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.091]   ..$ ...          :<environment: 0x564ad3d67580> 
[10:50:58.091]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.091]  - attr(*, "resolved")= logi FALSE
[10:50:58.091]  - attr(*, "total_size")= num 7184
[10:50:58.093] Packages to be attached in all futures: [n=0] 
[10:50:58.094] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.094] Number of futures (= number of chunks): 1
[10:50:58.094] Launching 1 futures (chunks) ...
[10:50:58.094] Chunk #1 of 1 ...
[10:50:58.094]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.094] getGlobalsAndPackages() ...
[10:50:58.095] |  Searching for globals ...
[10:50:58.095] |  :  globals found: [0] 
[10:50:58.095] |  Searching for globals ... DONE
[10:50:58.095] |  globals: [0] <none>
[10:50:58.095] |  packages: [0] <none>
[10:50:58.095] getGlobalsAndPackages() ... done
[10:50:58.095]    + additional globals found: [n=0] 
[10:50:58.095]    + additional namespaces needed: [n=0] 
[10:50:58.095]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.096]  - seeds: [5] <seeds>
[10:50:58.096]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.096] getGlobalsAndPackages() ...
[10:50:58.096] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.096] |  Resolving globals: FALSE
[10:50:58.096] |  Tweak future expression to call with '...' arguments ...
[10:50:58.096] |  :  {
[10:50:58.096] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.096] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.096] |  :      "# as a global variable                                         "
[10:50:58.096] |  :      do.call(function(...) {
[10:50:58.096] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.096] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.096] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.096] |  :          "# anonymous function.                                          "
[10:50:58.096] |  :          "#                                                              "
[10:50:58.096] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.096] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.096] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.096] |  :          "# global environment, which is where globals are written.      "
[10:50:58.096] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.096] |  :          repeat {
[10:50:58.096] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.096] |  :                  emptyenv())) 
[10:50:58.096] |  :                  break
[10:50:58.096] |  :              penv <- env
[10:50:58.096] |  :              env <- parent.env(env)
[10:50:58.096] |  :          }
[10:50:58.096] |  :          if (identical(penv, globalenv())) {
[10:50:58.096] |  :              environment(...future.FUN) <- environment()
[10:50:58.096] |  :          }
[10:50:58.096] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.096] |  :              !isNamespace(penv)) {
[10:50:58.096] |  :              parent.env(penv) <- environment()
[10:50:58.096] |  :          }
[10:50:58.096] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.096] |  :          {
[10:50:58.096] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.096] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.096] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.096] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.096] |  :              }
[10:50:58.096] |  :              {
[10:50:58.096] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.096] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.096] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.096] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.096] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.096] |  :                  })
[10:50:58.096] |  :              }
[10:50:58.096] |  :          }
[10:50:58.096] |  :      }, args = future.call.arguments)
[10:50:58.096] |  :  }
[10:50:58.097] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.097] |  Search for packages associated with the globals ...
[10:50:58.097] |  :  Packages associated with globals: [0] 
[10:50:58.097] |  :  Packages: [0] 
[10:50:58.097] |  Search for packages associated with the globals ... DONE
[10:50:58.097] |  Packages after dropping 'base': [0] 
[10:50:58.098] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.098] |  packages: [0] 
[10:50:58.098] getGlobalsAndPackages() ... done
[10:50:58.098] run() for Future (‘Future’) ...
[10:50:58.099] |  state: ‘created’
[10:50:58.099] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.099] |  :  makeFutureBackend(<sequential>) ...
[10:50:58.099] |  :  .  Backend function: <‘NULL’>
[10:50:58.099] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.099] |  :  makeFutureBackend(<sequential>) ... done
[10:50:58.099] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.099] |  Using SequentialFutureBackend ...
[10:50:58.100] |  :  Launching futures ...
[10:50:58.100] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:50:58.100] |  :  .  |  getFutureData() ...
[10:50:58.100] |  :  .  |  :  getFutureCore() ...
[10:50:58.100] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.100] |  :  .  |  :  getFutureCore() ... done
[10:50:58.100] |  :  .  |  :  getFutureCapture() ...
[10:50:58.100] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.101] |  :  .  |  :  getFutureContext() ...
[10:50:58.101] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.101] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.101] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.101] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.101] |  :  .  |  :  getFutureContext() ... done
[10:50:58.101] |  :  .  |  getFutureData() ... done
[10:50:58.104] |  :  .  |  attachPackages() ...
[10:50:58.105] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.105] |  :  .  |  attachPackages() ... DONE
[10:50:58.105] |  :  .  |  attachPackages() ...
[10:50:58.105] |  :  .  |  :  packages: [n=0] 
[10:50:58.105] |  :  .  |  attachPackages() ... DONE
[10:50:58.105] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.105] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.106] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.106] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.106] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.106] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.106] |  :  .  |  :  .  |  New stack:
[10:50:58.107] |  :  .  |  :  .  |  List of 1
[10:50:58.107] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.107] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.107] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.107] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.107] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.107] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.107] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.109] |  :  .  |  :  .  |  Old stack:
[10:50:58.109] |  :  .  |  :  .  |  List of 1
[10:50:58.109] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.109] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.109] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.109] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.109] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.109] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.109] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.109] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.109] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.109] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.112] |  :  .  |  :  .  |  Not identical
[10:50:58.112] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.112] |  :  .  |  :  .  |  :  List of 2
[10:50:58.112] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.112] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.112] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.112] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.112] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.112] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.112] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.116] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.117] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.117] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.117] |  :  .  |  :  .  List of future strategies:
[10:50:58.117] |  :  .  |  :  .  1. sequential:
[10:50:58.117] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.117] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.117] |  :  .  |  :  .     - call: plan(sequential)
[10:50:58.117] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.117] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.118] |  :  .  |  assign_globals() ...
[10:50:58.118] |  :  .  |  List of 5
[10:50:58.118] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.118] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.118] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.118] |  :  .  |   $ ...future.elements_ii    :List of 5
[10:50:58.118] |  :  .  |    ..$ : int 0
[10:50:58.118] |  :  .  |    ..$ : int 0
[10:50:58.118] |  :  .  |    ..$ : int 0
[10:50:58.118] |  :  .  |    ..$ : int 0
[10:50:58.118] |  :  .  |    ..$ : int 0
[10:50:58.118] |  :  .  |   $ ...future.seeds_ii       :List of 5
[10:50:58.118] |  :  .  |    ..$ : int [1:7] 10407 -1017419116 -1389560 -481017384 -480267829 -453855346 -1808836469
[10:50:58.118] |  :  .  |    ..$ : int [1:7] 10407 1601425248 -1287599001 -2066402018 1548731470 -1171951644 -279463151
[10:50:58.118] |  :  .  |    ..$ : int [1:7] 10407 -1963876507 -1377941142 386834210 -1394708634 -1721975040 1479438550
[10:50:58.118] |  :  .  |    ..$ : int [1:7] 10407 1259473282 548959350 550629921 1812420389 1024720435 -670885565
[10:50:58.118] |  :  .  |    ..$ : int [1:7] 10407 -1669517849 -388913201 428181972 -1359910083 -1334013923 2035346213
[10:50:58.118] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.118] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.118] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.118] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.118] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.118] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.118] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.118] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.118] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.118] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.118] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.125] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.125] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.125] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.125] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.126] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.127] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.127] |  :  .  |  assign_globals() ... done
[10:50:58.130] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.130] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.130] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.130] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.130] |  :  .  |  :  .  |  :  New stack:
[10:50:58.130] |  :  .  |  :  .  |  :  List of 1
[10:50:58.130] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.130] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.130] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.130] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.130] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.130] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.130] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.130] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.130] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.130] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.133] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.133] |  :  .  |  :  .  |  :  List of 1
[10:50:58.133] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.133] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.133] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.133] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.133] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.133] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.133] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.133] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.133] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.133] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.136] |  :  .  |  :  .  |  :  Identical
[10:50:58.136] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.136] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.136] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.136] |  :  .  |  :  .  |  1. sequential:
[10:50:58.136] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.136] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.136] |  :  .  |  :  .  |     - call: plan(sequential)
[10:50:58.137] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.137] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.137] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.137] |  :  .  |  SequentialFuture started (and completed)
[10:50:58.138] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:50:58.138] |  :  Launching futures ... done
[10:50:58.138] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.138] |  Using SequentialFutureBackend ... done
[10:50:58.138] run() for Future (‘SequentialFuture’) ... done
[10:50:58.138] Created future:
[10:50:58.138] SequentialFuture:
[10:50:58.138] Label: ‘future_replicate-1’
[10:50:58.138] Expression:
[10:50:58.138] {
[10:50:58.138]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.138]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.138]     "# as a global variable                                         "
[10:50:58.138]     do.call(function(...) {
[10:50:58.138]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.138]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.138]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.138]         "# anonymous function.                                          "
[10:50:58.138]         "#                                                              "
[10:50:58.138]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.138]         "# function environment of FUN() to the calling environment.    "
[10:50:58.138]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.138]         "# global environment, which is where globals are written.      "
[10:50:58.138]         penv <- env <- environment(...future.FUN)
[10:50:58.138]         repeat {
[10:50:58.138]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.138]                 emptyenv())) 
[10:50:58.138]                 break
[10:50:58.138]             penv <- env
[10:50:58.138]             env <- parent.env(env)
[10:50:58.138]         }
[10:50:58.138]         if (identical(penv, globalenv())) {
[10:50:58.138]             environment(...future.FUN) <- environment()
[10:50:58.138]         }
[10:50:58.138]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.138]             !isNamespace(penv)) {
[10:50:58.138]             parent.env(penv) <- environment()
[10:50:58.138]         }
[10:50:58.138]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.138]         {
[10:50:58.138]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.138]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.138]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.138]                 on.exit(options(oopts), add = TRUE)
[10:50:58.138]             }
[10:50:58.138]             {
[10:50:58.138]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.138]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.138]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.138]                     envir = globalenv(), inherits = FALSE)
[10:50:58.138]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.138]                 })
[10:50:58.138]             }
[10:50:58.138]         }
[10:50:58.138]     }, args = future.call.arguments)
[10:50:58.138] }
[10:50:58.138] Lazy evaluation: FALSE
[10:50:58.138] Asynchronous evaluation: TRUE
[10:50:58.138] Local evaluation: TRUE
[10:50:58.138] Environment: R_GlobalEnv
[10:50:58.138] Capture standard output: TRUE
[10:50:58.138] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.138] Immediate condition classes: ‘immediateCondition’
[10:50:58.138] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.138] Packages: <none>
[10:50:58.138] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.138] Resolved: TRUE
[10:50:58.138] Value: 91 bytes of class ‘list’
[10:50:58.138] Early signaling: FALSE
[10:50:58.138] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.138] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.140] Chunk #1 of 1 ... DONE
[10:50:58.140] Launching 1 futures (chunks) ... DONE
[10:50:58.140] Resolving 1 futures (chunks) ...
[10:50:58.140] value() on list ...
[10:50:58.140] |  recursive: 0
[10:50:58.141] |  length: 1
[10:50:58.141] |  
[10:50:58.141] |  Number of remaining objects: 1
[10:50:58.141] |  checking value #1 ...
[10:50:58.141] |  :  'obj' is SequentialFuture
[10:50:58.141] |  :  resolved() for ‘SequentialFuture’ ...
[10:50:58.141] |  :  .  state: ‘finished’
[10:50:58.141] |  :  .  run: TRUE
[10:50:58.141] |  :  .  result: ‘FutureResult’
[10:50:58.141] |  :  resolved() for ‘SequentialFuture’ ... done
[10:50:58.142] |  :  SequentialFuture #1
[10:50:58.142] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.142] |  :  .  nx: 1
[10:50:58.142] |  :  .  relay: TRUE
[10:50:58.142] |  :  .  stdout: TRUE
[10:50:58.142] |  :  .  signal: TRUE
[10:50:58.142] |  :  .  resignal: FALSE
[10:50:58.142] |  :  .  force: TRUE
[10:50:58.142] |  :  .  relayed: [n=1] FALSE
[10:50:58.142] |  :  .  queued futures: [n=1] FALSE
[10:50:58.142] |  :  .  until=1
[10:50:58.142] |  :  .  relaying element #1
[10:50:58.143] |  :  .  relayed: [n=1] TRUE
[10:50:58.143] |  :  .  queued futures: [n=1] TRUE
[10:50:58.143] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.143] |  :  value(<SequentialFuture>, ...) ...
[10:50:58.143] |  :  .  value: <list>
[10:50:58.143] |  :  value(<SequentialFuture>, ...) ... done
[10:50:58.144] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.144] |  :  .  nx: 1
[10:50:58.144] |  :  .  relay: TRUE
[10:50:58.144] |  :  .  stdout: TRUE
[10:50:58.144] |  :  .  signal: TRUE
[10:50:58.144] |  :  .  resignal: FALSE
[10:50:58.144] |  :  .  force: TRUE
[10:50:58.144] |  :  .  relayed: [n=1] TRUE
[10:50:58.144] |  :  .  queued futures: [n=1] TRUE
[10:50:58.144] |  :  .  until=1
[10:50:58.144] |  :  .  relayed: [n=1] TRUE
[10:50:58.144] |  :  .  queued futures: [n=1] TRUE
[10:50:58.145] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.145] |  :  length: 0 (resolved future 1)
[10:50:58.145] |  checking value #1 ... done
[10:50:58.145] |  Relaying remaining futures ...
[10:50:58.145] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.145] |  :  .  nx: 1
[10:50:58.145] |  :  .  relay: TRUE
[10:50:58.145] |  :  .  stdout: TRUE
[10:50:58.145] |  :  .  signal: TRUE
[10:50:58.145] |  :  .  resignal: FALSE
[10:50:58.146] |  :  .  force: TRUE
[10:50:58.146] |  :  .  relayed: [n=1] TRUE
[10:50:58.146] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:50:58.146] |  :  .  relayed: [n=1] TRUE
[10:50:58.146] |  :  .  queued futures: [n=1] TRUE
[10:50:58.146] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.146] |  Relaying remaining futures ... done
[10:50:58.146] value() on list ... done
[10:50:58.146]  - Number of value chunks collected: 1
[10:50:58.146] Resolving 1 futures (chunks) ... DONE
[10:50:58.146] Reducing values from 1 chunks ...
[10:50:58.147]  - Number of values collected after concatenation: 5
[10:50:58.147]  - Number of values expected: 5
[10:50:58.147] Reducing values from 1 chunks ... DONE
[10:50:58.147] future_lapply() ... DONE
[10:50:58.147] future_lapply() ...
[10:50:58.147] Generating random seeds ...
[10:50:58.148] Generating random seed streams for 5 elements ...
[10:50:58.148] Generating random seed streams for 5 elements ... DONE
[10:50:58.148] Generating random seeds ... DONE
[10:50:58.148] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.148] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.149] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.149] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.149] Number of chunks: 1
[10:50:58.149] getGlobalsAndPackagesXApply() ...
[10:50:58.149]  - future.globals: TRUE
[10:50:58.149] getGlobalsAndPackages() ...
[10:50:58.149] |  Searching for globals ...
[10:50:58.152] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.152] |  Searching for globals ... DONE
[10:50:58.152] |  Resolving globals: FALSE
[10:50:58.152] |  Search for packages associated with the globals ...
[10:50:58.152] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.152] |  :  Packages: [1] ‘base’
[10:50:58.152] |  Search for packages associated with the globals ... DONE
[10:50:58.153] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.153] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.153] |  Packages after dropping 'base': [0] 
[10:50:58.153] |  globals: [1] ‘FUN’
[10:50:58.153] |  packages: [0] 
[10:50:58.153] getGlobalsAndPackages() ... done
[10:50:58.153]  - globals found/used: [n=1] ‘FUN’
[10:50:58.154]  - needed namespaces: [n=0] 
[10:50:58.154] Finding globals ... DONE
[10:50:58.154]  - use_args: TRUE
[10:50:58.154]  - Getting '...' globals ...
[10:50:58.154] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.154] |  recursive: 0
[10:50:58.154] |  length: 1
[10:50:58.154] |  elements: ‘...’
[10:50:58.155] |  'obj' is DotDotDotList
[10:50:58.155] |  resolve(obj, ...) ...
[10:50:58.155] |  resolve(obj, ...) ... done
[10:50:58.155] |  length: 0 (resolved future 1)
[10:50:58.155] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.155]    - '...' content: [n=0] 
[10:50:58.155] List of 1
[10:50:58.155]  $ ...: list()
[10:50:58.155]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.155]  - attr(*, "where")=List of 1
[10:50:58.155]   ..$ ...:<environment: 0x564ad4d82060> 
[10:50:58.155]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.155]  - attr(*, "resolved")= logi TRUE
[10:50:58.155]  - attr(*, "total_size")= num NA
[10:50:58.157]  - Getting '...' globals ... DONE
[10:50:58.158] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.158] List of 2
[10:50:58.158]  $ ...future.FUN:function (...)  
[10:50:58.158]  $ ...          : list()
[10:50:58.158]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.158]  - attr(*, "where")=List of 2
[10:50:58.158]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.158]   ..$ ...          :<environment: 0x564ad4d82060> 
[10:50:58.158]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.158]  - attr(*, "resolved")= logi FALSE
[10:50:58.158]  - attr(*, "total_size")= num 7184
[10:50:58.160] Packages to be attached in all futures: [n=0] 
[10:50:58.161] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.161] Number of futures (= number of chunks): 1
[10:50:58.161] Launching 1 futures (chunks) ...
[10:50:58.161] Chunk #1 of 1 ...
[10:50:58.161]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.161] getGlobalsAndPackages() ...
[10:50:58.161] |  Searching for globals ...
[10:50:58.161] |  :  globals found: [0] 
[10:50:58.162] |  Searching for globals ... DONE
[10:50:58.162] |  globals: [0] <none>
[10:50:58.162] |  packages: [0] <none>
[10:50:58.162] getGlobalsAndPackages() ... done
[10:50:58.162]    + additional globals found: [n=0] 
[10:50:58.162]    + additional namespaces needed: [n=0] 
[10:50:58.162]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.162]  - seeds: [5] <seeds>
[10:50:58.162]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.162] getGlobalsAndPackages() ...
[10:50:58.162] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.163] |  Resolving globals: FALSE
[10:50:58.163] |  Tweak future expression to call with '...' arguments ...
[10:50:58.163] |  :  {
[10:50:58.163] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.163] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.163] |  :      "# as a global variable                                         "
[10:50:58.163] |  :      do.call(function(...) {
[10:50:58.163] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.163] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.163] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.163] |  :          "# anonymous function.                                          "
[10:50:58.163] |  :          "#                                                              "
[10:50:58.163] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.163] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.163] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.163] |  :          "# global environment, which is where globals are written.      "
[10:50:58.163] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.163] |  :          repeat {
[10:50:58.163] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.163] |  :                  emptyenv())) 
[10:50:58.163] |  :                  break
[10:50:58.163] |  :              penv <- env
[10:50:58.163] |  :              env <- parent.env(env)
[10:50:58.163] |  :          }
[10:50:58.163] |  :          if (identical(penv, globalenv())) {
[10:50:58.163] |  :              environment(...future.FUN) <- environment()
[10:50:58.163] |  :          }
[10:50:58.163] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.163] |  :              !isNamespace(penv)) {
[10:50:58.163] |  :              parent.env(penv) <- environment()
[10:50:58.163] |  :          }
[10:50:58.163] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.163] |  :          {
[10:50:58.163] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.163] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.163] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.163] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.163] |  :              }
[10:50:58.163] |  :              {
[10:50:58.163] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.163] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.163] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.163] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.163] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.163] |  :                  })
[10:50:58.163] |  :              }
[10:50:58.163] |  :          }
[10:50:58.163] |  :      }, args = future.call.arguments)
[10:50:58.163] |  :  }
[10:50:58.163] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.163] |  Search for packages associated with the globals ...
[10:50:58.164] |  :  Packages associated with globals: [0] 
[10:50:58.164] |  :  Packages: [0] 
[10:50:58.164] |  Search for packages associated with the globals ... DONE
[10:50:58.164] |  Packages after dropping 'base': [0] 
[10:50:58.164] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.164] |  packages: [0] 
[10:50:58.164] getGlobalsAndPackages() ... done
[10:50:58.165] run() for Future (‘Future’) ...
[10:50:58.165] |  state: ‘created’
[10:50:58.165] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.165] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.165] |  Using SequentialFutureBackend ...
[10:50:58.165] |  :  Launching futures ...
[10:50:58.165] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:50:58.165] |  :  .  |  getFutureData() ...
[10:50:58.165] |  :  .  |  :  getFutureCore() ...
[10:50:58.166] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.166] |  :  .  |  :  getFutureCore() ... done
[10:50:58.166] |  :  .  |  :  getFutureCapture() ...
[10:50:58.166] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.166] |  :  .  |  :  getFutureContext() ...
[10:50:58.166] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.166] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.166] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.166] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.166] |  :  .  |  :  getFutureContext() ... done
[10:50:58.167] |  :  .  |  getFutureData() ... done
[10:50:58.167] |  :  .  |  attachPackages() ...
[10:50:58.167] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.167] |  :  .  |  attachPackages() ... DONE
[10:50:58.167] |  :  .  |  attachPackages() ...
[10:50:58.167] |  :  .  |  :  packages: [n=0] 
[10:50:58.167] |  :  .  |  attachPackages() ... DONE
[10:50:58.168] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.168] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.168] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.168] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.168] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.168] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.168] |  :  .  |  :  .  |  New stack:
[10:50:58.168] |  :  .  |  :  .  |  List of 1
[10:50:58.168] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.168] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.168] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.168] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.168] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.168] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.168] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.171] |  :  .  |  :  .  |  Old stack:
[10:50:58.171] |  :  .  |  :  .  |  List of 1
[10:50:58.171] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.171] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.171] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.171] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.171] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.171] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.171] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.171] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.171] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.171] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.175] |  :  .  |  :  .  |  Not identical
[10:50:58.175] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.175] |  :  .  |  :  .  |  :  List of 2
[10:50:58.175] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.175] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.175] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.175] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.175] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.175] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.175] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.179] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.179] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.179] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.180] |  :  .  |  :  .  List of future strategies:
[10:50:58.180] |  :  .  |  :  .  1. sequential:
[10:50:58.180] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.180] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.180] |  :  .  |  :  .     - call: plan(sequential)
[10:50:58.180] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.180] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.180] |  :  .  |  assign_globals() ...
[10:50:58.180] |  :  .  |  List of 5
[10:50:58.180] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.180] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.180] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.180] |  :  .  |   $ ...future.elements_ii    :List of 5
[10:50:58.180] |  :  .  |    ..$ : int 0
[10:50:58.180] |  :  .  |    ..$ : int 0
[10:50:58.180] |  :  .  |    ..$ : int 0
[10:50:58.180] |  :  .  |    ..$ : int 0
[10:50:58.180] |  :  .  |    ..$ : int 0
[10:50:58.180] |  :  .  |   $ ...future.seeds_ii       :List of 5
[10:50:58.180] |  :  .  |    ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:50:58.180] |  :  .  |    ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:50:58.180] |  :  .  |    ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:50:58.180] |  :  .  |    ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:50:58.180] |  :  .  |    ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:50:58.180] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.180] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.180] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.180] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.180] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.180] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.180] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.180] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.180] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.180] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.180] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.188] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.188] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.188] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.188] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.188] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.188] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.188] |  :  .  |  assign_globals() ... done
[10:50:58.190] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.190] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.190] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.190] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.190] |  :  .  |  :  .  |  :  New stack:
[10:50:58.190] |  :  .  |  :  .  |  :  List of 1
[10:50:58.190] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.190] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.190] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.190] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.190] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.190] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.190] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.190] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.190] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.190] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.194] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.194] |  :  .  |  :  .  |  :  List of 1
[10:50:58.194] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.194] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.194] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.194] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.194] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.194] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.194] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.194] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.194] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.194] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.197] |  :  .  |  :  .  |  :  Identical
[10:50:58.197] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.197] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.197] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.197] |  :  .  |  :  .  |  1. sequential:
[10:50:58.197] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.197] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.197] |  :  .  |  :  .  |     - call: plan(sequential)
[10:50:58.197] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.198] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.198] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.198] |  :  .  |  SequentialFuture started (and completed)
[10:50:58.198] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:50:58.198] |  :  Launching futures ... done
[10:50:58.198] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.198] |  Using SequentialFutureBackend ... done
[10:50:58.198] run() for Future (‘SequentialFuture’) ... done
[10:50:58.198] Created future:
[10:50:58.199] SequentialFuture:
[10:50:58.199] Label: ‘future_replicate-1’
[10:50:58.199] Expression:
[10:50:58.199] {
[10:50:58.199]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.199]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.199]     "# as a global variable                                         "
[10:50:58.199]     do.call(function(...) {
[10:50:58.199]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.199]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.199]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.199]         "# anonymous function.                                          "
[10:50:58.199]         "#                                                              "
[10:50:58.199]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.199]         "# function environment of FUN() to the calling environment.    "
[10:50:58.199]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.199]         "# global environment, which is where globals are written.      "
[10:50:58.199]         penv <- env <- environment(...future.FUN)
[10:50:58.199]         repeat {
[10:50:58.199]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.199]                 emptyenv())) 
[10:50:58.199]                 break
[10:50:58.199]             penv <- env
[10:50:58.199]             env <- parent.env(env)
[10:50:58.199]         }
[10:50:58.199]         if (identical(penv, globalenv())) {
[10:50:58.199]             environment(...future.FUN) <- environment()
[10:50:58.199]         }
[10:50:58.199]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.199]             !isNamespace(penv)) {
[10:50:58.199]             parent.env(penv) <- environment()
[10:50:58.199]         }
[10:50:58.199]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.199]         {
[10:50:58.199]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.199]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.199]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.199]                 on.exit(options(oopts), add = TRUE)
[10:50:58.199]             }
[10:50:58.199]             {
[10:50:58.199]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.199]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.199]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.199]                     envir = globalenv(), inherits = FALSE)
[10:50:58.199]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.199]                 })
[10:50:58.199]             }
[10:50:58.199]         }
[10:50:58.199]     }, args = future.call.arguments)
[10:50:58.199] }
[10:50:58.199] Lazy evaluation: FALSE
[10:50:58.199] Asynchronous evaluation: TRUE
[10:50:58.199] Local evaluation: TRUE
[10:50:58.199] Environment: R_GlobalEnv
[10:50:58.199] Capture standard output: TRUE
[10:50:58.199] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.199] Immediate condition classes: ‘immediateCondition’
[10:50:58.199] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.199] Packages: <none>
[10:50:58.199] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.199] Resolved: TRUE
[10:50:58.199] Value: 91 bytes of class ‘list’
[10:50:58.199] Early signaling: FALSE
[10:50:58.199] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.199] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.199] Chunk #1 of 1 ... DONE
[10:50:58.200] Launching 1 futures (chunks) ... DONE
[10:50:58.200] Resolving 1 futures (chunks) ...
[10:50:58.200] value() on list ...
[10:50:58.200] |  recursive: 0
[10:50:58.200] |  length: 1
[10:50:58.200] |  
[10:50:58.200] |  Number of remaining objects: 1
[10:50:58.200] |  checking value #1 ...
[10:50:58.200] |  :  'obj' is SequentialFuture
[10:50:58.200] |  :  resolved() for ‘SequentialFuture’ ...
[10:50:58.200] |  :  .  state: ‘finished’
[10:50:58.201] |  :  .  run: TRUE
[10:50:58.201] |  :  .  result: ‘FutureResult’
[10:50:58.201] |  :  resolved() for ‘SequentialFuture’ ... done
[10:50:58.201] |  :  SequentialFuture #1
[10:50:58.201] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.201] |  :  .  nx: 1
[10:50:58.201] |  :  .  relay: TRUE
[10:50:58.201] |  :  .  stdout: TRUE
[10:50:58.201] |  :  .  signal: TRUE
[10:50:58.201] |  :  .  resignal: FALSE
[10:50:58.201] |  :  .  force: TRUE
[10:50:58.201] |  :  .  relayed: [n=1] FALSE
[10:50:58.202] |  :  .  queued futures: [n=1] FALSE
[10:50:58.202] |  :  .  until=1
[10:50:58.202] |  :  .  relaying element #1
[10:50:58.202] |  :  .  relayed: [n=1] TRUE
[10:50:58.202] |  :  .  queued futures: [n=1] TRUE
[10:50:58.202] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.202] |  :  value(<SequentialFuture>, ...) ...
[10:50:58.202] |  :  .  value: <list>
[10:50:58.202] |  :  value(<SequentialFuture>, ...) ... done
[10:50:58.202] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.203] |  :  .  nx: 1
[10:50:58.203] |  :  .  relay: TRUE
[10:50:58.203] |  :  .  stdout: TRUE
[10:50:58.203] |  :  .  signal: TRUE
[10:50:58.203] |  :  .  resignal: FALSE
[10:50:58.203] |  :  .  force: TRUE
[10:50:58.203] |  :  .  relayed: [n=1] TRUE
[10:50:58.203] |  :  .  queued futures: [n=1] TRUE
[10:50:58.203] |  :  .  until=1
[10:50:58.203] |  :  .  relayed: [n=1] TRUE
[10:50:58.203] |  :  .  queued futures: [n=1] TRUE
[10:50:58.203] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.204] |  :  length: 0 (resolved future 1)
[10:50:58.204] |  checking value #1 ... done
[10:50:58.204] |  Relaying remaining futures ...
[10:50:58.204] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.204] |  :  .  nx: 1
[10:50:58.204] |  :  .  relay: TRUE
[10:50:58.204] |  :  .  stdout: TRUE
[10:50:58.204] |  :  .  signal: TRUE
[10:50:58.204] |  :  .  resignal: FALSE
[10:50:58.204] |  :  .  force: TRUE
[10:50:58.204] |  :  .  relayed: [n=1] TRUE
[10:50:58.204] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:50:58.205] |  :  .  relayed: [n=1] TRUE
[10:50:58.205] |  :  .  queued futures: [n=1] TRUE
[10:50:58.205] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.205] |  Relaying remaining futures ... done
[10:50:58.205] value() on list ... done
[10:50:58.205]  - Number of value chunks collected: 1
[10:50:58.205] Resolving 1 futures (chunks) ... DONE
[10:50:58.205] Reducing values from 1 chunks ...
[10:50:58.205]  - Number of values collected after concatenation: 5
[10:50:58.205]  - Number of values expected: 5
[10:50:58.205] Reducing values from 1 chunks ... DONE
[10:50:58.205] future_lapply() ... DONE
[10:50:58.206] future_lapply() ...
[10:50:58.206] Generating random seeds ...
[10:50:58.206] Generating random seed streams for 5 elements ...
[10:50:58.206] Generating random seed streams for 5 elements ... DONE
[10:50:58.206] Generating random seeds ... DONE
[10:50:58.206] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.207] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.207] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.207] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.207] Number of chunks: 1
[10:50:58.207] getGlobalsAndPackagesXApply() ...
[10:50:58.207]  - future.globals: TRUE
[10:50:58.208] getGlobalsAndPackages() ...
[10:50:58.208] |  Searching for globals ...
[10:50:58.209] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.209] |  Searching for globals ... DONE
[10:50:58.209] |  Resolving globals: FALSE
[10:50:58.209] |  Search for packages associated with the globals ...
[10:50:58.209] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.209] |  :  Packages: [1] ‘base’
[10:50:58.210] |  Search for packages associated with the globals ... DONE
[10:50:58.210] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.210] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.210] |  Packages after dropping 'base': [0] 
[10:50:58.210] |  globals: [1] ‘FUN’
[10:50:58.210] |  packages: [0] 
[10:50:58.210] getGlobalsAndPackages() ... done
[10:50:58.210]  - globals found/used: [n=1] ‘FUN’
[10:50:58.211]  - needed namespaces: [n=0] 
[10:50:58.211] Finding globals ... DONE
[10:50:58.211]  - use_args: TRUE
[10:50:58.211]  - Getting '...' globals ...
[10:50:58.212] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.212] |  recursive: 0
[10:50:58.212] |  length: 1
[10:50:58.212] |  elements: ‘...’
[10:50:58.212] |  'obj' is DotDotDotList
[10:50:58.212] |  resolve(obj, ...) ...
[10:50:58.213] |  resolve(obj, ...) ... done
[10:50:58.213] |  length: 0 (resolved future 1)
[10:50:58.213] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.213]    - '...' content: [n=0] 
[10:50:58.213] List of 1
[10:50:58.213]  $ ...: list()
[10:50:58.213]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.213]  - attr(*, "where")=List of 1
[10:50:58.213]   ..$ ...:<environment: 0x564ad4b7ad40> 
[10:50:58.213]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.213]  - attr(*, "resolved")= logi TRUE
[10:50:58.213]  - attr(*, "total_size")= num NA
[10:50:58.215]  - Getting '...' globals ... DONE
[10:50:58.215] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.215] List of 2
[10:50:58.215]  $ ...future.FUN:function (...)  
[10:50:58.215]  $ ...          : list()
[10:50:58.215]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.215]  - attr(*, "where")=List of 2
[10:50:58.215]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.215]   ..$ ...          :<environment: 0x564ad4b7ad40> 
[10:50:58.215]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.215]  - attr(*, "resolved")= logi FALSE
[10:50:58.215]  - attr(*, "total_size")= num 7184
[10:50:58.218] Packages to be attached in all futures: [n=0] 
[10:50:58.218] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.218] Number of futures (= number of chunks): 1
[10:50:58.219] Launching 1 futures (chunks) ...
[10:50:58.219] Chunk #1 of 1 ...
[10:50:58.219]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.219] getGlobalsAndPackages() ...
[10:50:58.219] |  Searching for globals ...
[10:50:58.219] |  :  globals found: [0] 
[10:50:58.219] |  Searching for globals ... DONE
[10:50:58.219] |  globals: [0] <none>
[10:50:58.219] |  packages: [0] <none>
[10:50:58.220] getGlobalsAndPackages() ... done
[10:50:58.220]    + additional globals found: [n=0] 
[10:50:58.220]    + additional namespaces needed: [n=0] 
[10:50:58.220]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.220]  - seeds: [5] <seeds>
[10:50:58.220]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.220] getGlobalsAndPackages() ...
[10:50:58.220] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.220] |  Resolving globals: FALSE
[10:50:58.220] |  Tweak future expression to call with '...' arguments ...
[10:50:58.221] |  :  {
[10:50:58.221] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.221] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.221] |  :      "# as a global variable                                         "
[10:50:58.221] |  :      do.call(function(...) {
[10:50:58.221] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.221] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.221] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.221] |  :          "# anonymous function.                                          "
[10:50:58.221] |  :          "#                                                              "
[10:50:58.221] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.221] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.221] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.221] |  :          "# global environment, which is where globals are written.      "
[10:50:58.221] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.221] |  :          repeat {
[10:50:58.221] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.221] |  :                  emptyenv())) 
[10:50:58.221] |  :                  break
[10:50:58.221] |  :              penv <- env
[10:50:58.221] |  :              env <- parent.env(env)
[10:50:58.221] |  :          }
[10:50:58.221] |  :          if (identical(penv, globalenv())) {
[10:50:58.221] |  :              environment(...future.FUN) <- environment()
[10:50:58.221] |  :          }
[10:50:58.221] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.221] |  :              !isNamespace(penv)) {
[10:50:58.221] |  :              parent.env(penv) <- environment()
[10:50:58.221] |  :          }
[10:50:58.221] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.221] |  :          {
[10:50:58.221] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.221] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.221] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.221] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.221] |  :              }
[10:50:58.221] |  :              {
[10:50:58.221] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.221] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.221] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.221] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.221] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.221] |  :                  })
[10:50:58.221] |  :              }
[10:50:58.221] |  :          }
[10:50:58.221] |  :      }, args = future.call.arguments)
[10:50:58.221] |  :  }
[10:50:58.221] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.221] |  Search for packages associated with the globals ...
[10:50:58.221] |  :  Packages associated with globals: [0] 
[10:50:58.221] |  :  Packages: [0] 
[10:50:58.222] |  Search for packages associated with the globals ... DONE
[10:50:58.222] |  Packages after dropping 'base': [0] 
[10:50:58.222] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.222] |  packages: [0] 
[10:50:58.222] getGlobalsAndPackages() ... done
[10:50:58.222] run() for Future (‘Future’) ...
[10:50:58.222] |  state: ‘created’
[10:50:58.222] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.222] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.223] |  Using SequentialFutureBackend ...
[10:50:58.223] |  :  Launching futures ...
[10:50:58.223] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:50:58.223] |  :  .  |  getFutureData() ...
[10:50:58.223] |  :  .  |  :  getFutureCore() ...
[10:50:58.223] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.223] |  :  .  |  :  getFutureCore() ... done
[10:50:58.223] |  :  .  |  :  getFutureCapture() ...
[10:50:58.223] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.223] |  :  .  |  :  getFutureContext() ...
[10:50:58.224] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.224] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.224] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.224] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.224] |  :  .  |  :  getFutureContext() ... done
[10:50:58.224] |  :  .  |  getFutureData() ... done
[10:50:58.224] |  :  .  |  attachPackages() ...
[10:50:58.224] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.224] |  :  .  |  attachPackages() ... DONE
[10:50:58.225] |  :  .  |  attachPackages() ...
[10:50:58.225] |  :  .  |  :  packages: [n=0] 
[10:50:58.225] |  :  .  |  attachPackages() ... DONE
[10:50:58.225] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.225] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.225] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.225] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.226] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.226] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.226] |  :  .  |  :  .  |  New stack:
[10:50:58.226] |  :  .  |  :  .  |  List of 1
[10:50:58.226] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.226] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.226] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.226] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.226] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.226] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.226] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.228] |  :  .  |  :  .  |  Old stack:
[10:50:58.228] |  :  .  |  :  .  |  List of 1
[10:50:58.228] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.228] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.228] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.228] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.228] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.228] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.228] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.228] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.228] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.228] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.232] |  :  .  |  :  .  |  Not identical
[10:50:58.232] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.232] |  :  .  |  :  .  |  :  List of 2
[10:50:58.232] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.232] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.232] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.232] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.232] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.232] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.232] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.236] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.236] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.237] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.237] |  :  .  |  :  .  List of future strategies:
[10:50:58.237] |  :  .  |  :  .  1. sequential:
[10:50:58.237] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.237] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.237] |  :  .  |  :  .     - call: plan(sequential)
[10:50:58.237] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.237] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.237] |  :  .  |  assign_globals() ...
[10:50:58.237] |  :  .  |  List of 5
[10:50:58.237] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.237] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.237] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.237] |  :  .  |   $ ...future.elements_ii    :List of 5
[10:50:58.237] |  :  .  |    ..$ : int 0
[10:50:58.237] |  :  .  |    ..$ : int 0
[10:50:58.237] |  :  .  |    ..$ : int 0
[10:50:58.237] |  :  .  |    ..$ : int 0
[10:50:58.237] |  :  .  |    ..$ : int 0
[10:50:58.237] |  :  .  |   $ ...future.seeds_ii       :List of 5
[10:50:58.237] |  :  .  |    ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:50:58.237] |  :  .  |    ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:50:58.237] |  :  .  |    ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:50:58.237] |  :  .  |    ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:50:58.237] |  :  .  |    ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:50:58.237] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.237] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.237] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.237] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.237] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.237] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.237] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.237] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.237] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.237] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.237] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.245] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.245] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.245] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.245] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.245] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.245] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.245] |  :  .  |  assign_globals() ... done
[10:50:58.247] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.247] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.247] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.247] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.247] |  :  .  |  :  .  |  :  New stack:
[10:50:58.247] |  :  .  |  :  .  |  :  List of 1
[10:50:58.247] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.247] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.247] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.247] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.247] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.247] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.247] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.247] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.251] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.251] |  :  .  |  :  .  |  :  List of 1
[10:50:58.251] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.251] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.251] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.251] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.251] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.251] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.251] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.251] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.251] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.251] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.254] |  :  .  |  :  .  |  :  Identical
[10:50:58.254] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.254] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.254] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.254] |  :  .  |  :  .  |  1. sequential:
[10:50:58.254] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.254] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.254] |  :  .  |  :  .  |     - call: plan(sequential)
[10:50:58.255] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.255] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.255] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.255] |  :  .  |  SequentialFuture started (and completed)
[10:50:58.255] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:50:58.255] |  :  Launching futures ... done
[10:50:58.255] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.255] |  Using SequentialFutureBackend ... done
[10:50:58.255] run() for Future (‘SequentialFuture’) ... done
[10:50:58.256] Created future:
[10:50:58.256] SequentialFuture:
[10:50:58.256] Label: ‘future_replicate-1’
[10:50:58.256] Expression:
[10:50:58.256] {
[10:50:58.256]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.256]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.256]     "# as a global variable                                         "
[10:50:58.256]     do.call(function(...) {
[10:50:58.256]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.256]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.256]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.256]         "# anonymous function.                                          "
[10:50:58.256]         "#                                                              "
[10:50:58.256]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.256]         "# function environment of FUN() to the calling environment.    "
[10:50:58.256]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.256]         "# global environment, which is where globals are written.      "
[10:50:58.256]         penv <- env <- environment(...future.FUN)
[10:50:58.256]         repeat {
[10:50:58.256]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.256]                 emptyenv())) 
[10:50:58.256]                 break
[10:50:58.256]             penv <- env
[10:50:58.256]             env <- parent.env(env)
[10:50:58.256]         }
[10:50:58.256]         if (identical(penv, globalenv())) {
[10:50:58.256]             environment(...future.FUN) <- environment()
[10:50:58.256]         }
[10:50:58.256]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.256]             !isNamespace(penv)) {
[10:50:58.256]             parent.env(penv) <- environment()
[10:50:58.256]         }
[10:50:58.256]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.256]         {
[10:50:58.256]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.256]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.256]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.256]                 on.exit(options(oopts), add = TRUE)
[10:50:58.256]             }
[10:50:58.256]             {
[10:50:58.256]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.256]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.256]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.256]                     envir = globalenv(), inherits = FALSE)
[10:50:58.256]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.256]                 })
[10:50:58.256]             }
[10:50:58.256]         }
[10:50:58.256]     }, args = future.call.arguments)
[10:50:58.256] }
[10:50:58.256] Lazy evaluation: FALSE
[10:50:58.256] Asynchronous evaluation: TRUE
[10:50:58.256] Local evaluation: TRUE
[10:50:58.256] Environment: R_GlobalEnv
[10:50:58.256] Capture standard output: TRUE
[10:50:58.256] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.256] Immediate condition classes: ‘immediateCondition’
[10:50:58.256] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.256] Packages: <none>
[10:50:58.256] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.256] Resolved: TRUE
[10:50:58.256] Value: 91 bytes of class ‘list’
[10:50:58.256] Early signaling: FALSE
[10:50:58.256] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.256] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.257] Chunk #1 of 1 ... DONE
[10:50:58.257] Launching 1 futures (chunks) ... DONE
[10:50:58.257] Resolving 1 futures (chunks) ...
[10:50:58.257] value() on list ...
[10:50:58.257] |  recursive: 0
[10:50:58.257] |  length: 1
[10:50:58.257] |  
[10:50:58.257] |  Number of remaining objects: 1
[10:50:58.257] |  checking value #1 ...
[10:50:58.257] |  :  'obj' is SequentialFuture
[10:50:58.257] |  :  resolved() for ‘SequentialFuture’ ...
[10:50:58.258] |  :  .  state: ‘finished’
[10:50:58.258] |  :  .  run: TRUE
[10:50:58.258] |  :  .  result: ‘FutureResult’
[10:50:58.258] |  :  resolved() for ‘SequentialFuture’ ... done
[10:50:58.258] |  :  SequentialFuture #1
[10:50:58.258] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.258] |  :  .  nx: 1
[10:50:58.258] |  :  .  relay: TRUE
[10:50:58.258] |  :  .  stdout: TRUE
[10:50:58.258] |  :  .  signal: TRUE
[10:50:58.258] |  :  .  resignal: FALSE
[10:50:58.258] |  :  .  force: TRUE
[10:50:58.259] |  :  .  relayed: [n=1] FALSE
[10:50:58.259] |  :  .  queued futures: [n=1] FALSE
[10:50:58.259] |  :  .  until=1
[10:50:58.259] |  :  .  relaying element #1
[10:50:58.259] |  :  .  relayed: [n=1] TRUE
[10:50:58.259] |  :  .  queued futures: [n=1] TRUE
[10:50:58.259] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.259] |  :  value(<SequentialFuture>, ...) ...
[10:50:58.259] |  :  .  value: <list>
[10:50:58.259] |  :  value(<SequentialFuture>, ...) ... done
[10:50:58.260] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.260] |  :  .  nx: 1
[10:50:58.260] |  :  .  relay: TRUE
[10:50:58.260] |  :  .  stdout: TRUE
[10:50:58.260] |  :  .  signal: TRUE
[10:50:58.260] |  :  .  resignal: FALSE
[10:50:58.260] |  :  .  force: TRUE
[10:50:58.260] |  :  .  relayed: [n=1] TRUE
[10:50:58.260] |  :  .  queued futures: [n=1] TRUE
[10:50:58.260] |  :  .  until=1
[10:50:58.260] |  :  .  relayed: [n=1] TRUE
[10:50:58.260] |  :  .  queued futures: [n=1] TRUE
[10:50:58.261] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.261] |  :  length: 0 (resolved future 1)
[10:50:58.261] |  checking value #1 ... done
[10:50:58.261] |  Relaying remaining futures ...
[10:50:58.261] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.261] |  :  .  nx: 1
[10:50:58.261] |  :  .  relay: TRUE
[10:50:58.261] |  :  .  stdout: TRUE
[10:50:58.261] |  :  .  signal: TRUE
[10:50:58.261] |  :  .  resignal: FALSE
[10:50:58.261] |  :  .  force: TRUE
[10:50:58.261] |  :  .  relayed: [n=1] TRUE
[10:50:58.262] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:50:58.262] |  :  .  relayed: [n=1] TRUE
[10:50:58.262] |  :  .  queued futures: [n=1] TRUE
[10:50:58.262] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.262] |  Relaying remaining futures ... done
[10:50:58.262] value() on list ... done
[10:50:58.262]  - Number of value chunks collected: 1
[10:50:58.262] Resolving 1 futures (chunks) ... DONE
[10:50:58.262] Reducing values from 1 chunks ...
[10:50:58.262]  - Number of values collected after concatenation: 5
[10:50:58.262]  - Number of values expected: 5
[10:50:58.263] Reducing values from 1 chunks ... DONE
[10:50:58.263] future_lapply() ... DONE
[10:50:58.263] future_lapply() ...
[10:50:58.263] Generating random seeds ...
[10:50:58.264] Generating random seed streams for 5 elements ...
[10:50:58.264] Generating random seed streams for 5 elements ... DONE
[10:50:58.264] Generating random seeds ... DONE
[10:50:58.264] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.264] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.264] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.265] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.265] Number of chunks: 1
[10:50:58.265] getGlobalsAndPackagesXApply() ...
[10:50:58.265]  - future.globals: TRUE
[10:50:58.265] getGlobalsAndPackages() ...
[10:50:58.265] |  Searching for globals ...
[10:50:58.266] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.266] |  Searching for globals ... DONE
[10:50:58.266] |  Resolving globals: FALSE
[10:50:58.266] |  Search for packages associated with the globals ...
[10:50:58.267] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.267] |  :  Packages: [1] ‘base’
[10:50:58.267] |  Search for packages associated with the globals ... DONE
[10:50:58.267] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.267] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.267] |  Packages after dropping 'base': [0] 
[10:50:58.267] |  globals: [1] ‘FUN’
[10:50:58.268] |  packages: [0] 
[10:50:58.268] getGlobalsAndPackages() ... done
[10:50:58.268]  - globals found/used: [n=1] ‘FUN’
[10:50:58.268]  - needed namespaces: [n=0] 
[10:50:58.268] Finding globals ... DONE
[10:50:58.268]  - use_args: TRUE
[10:50:58.268]  - Getting '...' globals ...
[10:50:58.268] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.269] |  recursive: 0
[10:50:58.269] |  length: 1
[10:50:58.269] |  elements: ‘...’
[10:50:58.269] |  'obj' is DotDotDotList
[10:50:58.269] |  resolve(obj, ...) ...
[10:50:58.269] |  resolve(obj, ...) ... done
[10:50:58.269] |  length: 0 (resolved future 1)
[10:50:58.269] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.269]    - '...' content: [n=0] 
[10:50:58.270] List of 1
[10:50:58.270]  $ ...: list()
[10:50:58.270]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.270]  - attr(*, "where")=List of 1
[10:50:58.270]   ..$ ...:<environment: 0x564ad47474f8> 
[10:50:58.270]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.270]  - attr(*, "resolved")= logi TRUE
[10:50:58.270]  - attr(*, "total_size")= num NA
[10:50:58.273]  - Getting '...' globals ... DONE
[10:50:58.273] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.273] List of 2
[10:50:58.273]  $ ...future.FUN:function (...)  
[10:50:58.273]  $ ...          : list()
[10:50:58.273]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.273]  - attr(*, "where")=List of 2
[10:50:58.273]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.273]   ..$ ...          :<environment: 0x564ad47474f8> 
[10:50:58.273]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.273]  - attr(*, "resolved")= logi FALSE
[10:50:58.273]  - attr(*, "total_size")= num 7184
[10:50:58.276] Packages to be attached in all futures: [n=0] 
[10:50:58.276] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.276] Number of futures (= number of chunks): 1
[10:50:58.276] Launching 1 futures (chunks) ...
[10:50:58.276] Chunk #1 of 1 ...
[10:50:58.276]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.276] getGlobalsAndPackages() ...
[10:50:58.276] |  Searching for globals ...
[10:50:58.277] |  :  globals found: [0] 
[10:50:58.277] |  Searching for globals ... DONE
[10:50:58.277] |  globals: [0] <none>
[10:50:58.277] |  packages: [0] <none>
[10:50:58.277] getGlobalsAndPackages() ... done
[10:50:58.277]    + additional globals found: [n=0] 
[10:50:58.277]    + additional namespaces needed: [n=0] 
[10:50:58.277]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.277]  - seeds: [5] <seeds>
[10:50:58.278]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.278] getGlobalsAndPackages() ...
[10:50:58.278] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.278] |  Resolving globals: FALSE
[10:50:58.278] |  Tweak future expression to call with '...' arguments ...
[10:50:58.278] |  :  {
[10:50:58.278] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.278] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.278] |  :      "# as a global variable                                         "
[10:50:58.278] |  :      do.call(function(...) {
[10:50:58.278] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.278] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.278] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.278] |  :          "# anonymous function.                                          "
[10:50:58.278] |  :          "#                                                              "
[10:50:58.278] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.278] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.278] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.278] |  :          "# global environment, which is where globals are written.      "
[10:50:58.278] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.278] |  :          repeat {
[10:50:58.278] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.278] |  :                  emptyenv())) 
[10:50:58.278] |  :                  break
[10:50:58.278] |  :              penv <- env
[10:50:58.278] |  :              env <- parent.env(env)
[10:50:58.278] |  :          }
[10:50:58.278] |  :          if (identical(penv, globalenv())) {
[10:50:58.278] |  :              environment(...future.FUN) <- environment()
[10:50:58.278] |  :          }
[10:50:58.278] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.278] |  :              !isNamespace(penv)) {
[10:50:58.278] |  :              parent.env(penv) <- environment()
[10:50:58.278] |  :          }
[10:50:58.278] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.278] |  :          {
[10:50:58.278] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.278] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.278] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.278] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.278] |  :              }
[10:50:58.278] |  :              {
[10:50:58.278] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.278] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.278] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.278] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.278] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.278] |  :                  })
[10:50:58.278] |  :              }
[10:50:58.278] |  :          }
[10:50:58.278] |  :      }, args = future.call.arguments)
[10:50:58.278] |  :  }
[10:50:58.279] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.279] |  Search for packages associated with the globals ...
[10:50:58.279] |  :  Packages associated with globals: [0] 
[10:50:58.279] |  :  Packages: [0] 
[10:50:58.279] |  Search for packages associated with the globals ... DONE
[10:50:58.279] |  Packages after dropping 'base': [0] 
[10:50:58.279] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.279] |  packages: [0] 
[10:50:58.280] getGlobalsAndPackages() ... done
[10:50:58.280] run() for Future (‘Future’) ...
[10:50:58.280] |  state: ‘created’
[10:50:58.280] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.280] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.280] |  Using SequentialFutureBackend ...
[10:50:58.280] |  :  Launching futures ...
[10:50:58.280] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:50:58.280] |  :  .  |  getFutureData() ...
[10:50:58.281] |  :  .  |  :  getFutureCore() ...
[10:50:58.281] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.281] |  :  .  |  :  getFutureCore() ... done
[10:50:58.281] |  :  .  |  :  getFutureCapture() ...
[10:50:58.281] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.281] |  :  .  |  :  getFutureContext() ...
[10:50:58.281] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.281] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.281] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.281] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.282] |  :  .  |  :  getFutureContext() ... done
[10:50:58.282] |  :  .  |  getFutureData() ... done
[10:50:58.282] |  :  .  |  attachPackages() ...
[10:50:58.282] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.282] |  :  .  |  attachPackages() ... DONE
[10:50:58.282] |  :  .  |  attachPackages() ...
[10:50:58.282] |  :  .  |  :  packages: [n=0] 
[10:50:58.282] |  :  .  |  attachPackages() ... DONE
[10:50:58.283] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.283] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.283] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.283] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.283] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.283] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.283] |  :  .  |  :  .  |  New stack:
[10:50:58.284] |  :  .  |  :  .  |  List of 1
[10:50:58.284] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.284] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.284] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.284] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.284] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.284] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.284] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.286] |  :  .  |  :  .  |  Old stack:
[10:50:58.286] |  :  .  |  :  .  |  List of 1
[10:50:58.286] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.286] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.286] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.286] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.286] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.286] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.286] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.286] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.286] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.286] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.289] |  :  .  |  :  .  |  Not identical
[10:50:58.289] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.289] |  :  .  |  :  .  |  :  List of 2
[10:50:58.289] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.289] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.289] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.289] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.294] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.294] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.294] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.294] |  :  .  |  :  .  List of future strategies:
[10:50:58.294] |  :  .  |  :  .  1. sequential:
[10:50:58.294] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.294] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.294] |  :  .  |  :  .     - call: plan(sequential)
[10:50:58.295] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.295] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.295] |  :  .  |  assign_globals() ...
[10:50:58.295] |  :  .  |  List of 5
[10:50:58.295] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.295] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.295] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.295] |  :  .  |   $ ...future.elements_ii    :List of 5
[10:50:58.295] |  :  .  |    ..$ : int 0
[10:50:58.295] |  :  .  |    ..$ : int 0
[10:50:58.295] |  :  .  |    ..$ : int 0
[10:50:58.295] |  :  .  |    ..$ : int 0
[10:50:58.295] |  :  .  |    ..$ : int 0
[10:50:58.295] |  :  .  |   $ ...future.seeds_ii       :List of 5
[10:50:58.295] |  :  .  |    ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:50:58.295] |  :  .  |    ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:50:58.295] |  :  .  |    ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:50:58.295] |  :  .  |    ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:50:58.295] |  :  .  |    ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:50:58.295] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.295] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.295] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.295] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.295] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.295] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.295] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.295] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.295] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.295] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.295] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.302] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.303] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.303] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.303] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.303] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.303] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.303] |  :  .  |  assign_globals() ... done
[10:50:58.304] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.305] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.305] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.305] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.305] |  :  .  |  :  .  |  :  New stack:
[10:50:58.305] |  :  .  |  :  .  |  :  List of 1
[10:50:58.305] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.305] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.305] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.305] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.305] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.305] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.305] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.305] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.305] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.305] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.309] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.309] |  :  .  |  :  .  |  :  List of 1
[10:50:58.309] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.309] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.309] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.309] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.309] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.309] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.309] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.309] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.309] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.309] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.312] |  :  .  |  :  .  |  :  Identical
[10:50:58.312] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.312] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.312] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.312] |  :  .  |  :  .  |  1. sequential:
[10:50:58.312] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.312] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.312] |  :  .  |  :  .  |     - call: plan(sequential)
[10:50:58.313] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.313] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.313] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.313] |  :  .  |  SequentialFuture started (and completed)
[10:50:58.313] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:50:58.313] |  :  Launching futures ... done
[10:50:58.313] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.313] |  Using SequentialFutureBackend ... done
[10:50:58.313] run() for Future (‘SequentialFuture’) ... done
[10:50:58.314] Created future:
[10:50:58.314] SequentialFuture:
[10:50:58.314] Label: ‘future_replicate-1’
[10:50:58.314] Expression:
[10:50:58.314] {
[10:50:58.314]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.314]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.314]     "# as a global variable                                         "
[10:50:58.314]     do.call(function(...) {
[10:50:58.314]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.314]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.314]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.314]         "# anonymous function.                                          "
[10:50:58.314]         "#                                                              "
[10:50:58.314]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.314]         "# function environment of FUN() to the calling environment.    "
[10:50:58.314]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.314]         "# global environment, which is where globals are written.      "
[10:50:58.314]         penv <- env <- environment(...future.FUN)
[10:50:58.314]         repeat {
[10:50:58.314]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.314]                 emptyenv())) 
[10:50:58.314]                 break
[10:50:58.314]             penv <- env
[10:50:58.314]             env <- parent.env(env)
[10:50:58.314]         }
[10:50:58.314]         if (identical(penv, globalenv())) {
[10:50:58.314]             environment(...future.FUN) <- environment()
[10:50:58.314]         }
[10:50:58.314]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.314]             !isNamespace(penv)) {
[10:50:58.314]             parent.env(penv) <- environment()
[10:50:58.314]         }
[10:50:58.314]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.314]         {
[10:50:58.314]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.314]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.314]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.314]                 on.exit(options(oopts), add = TRUE)
[10:50:58.314]             }
[10:50:58.314]             {
[10:50:58.314]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.314]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.314]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.314]                     envir = globalenv(), inherits = FALSE)
[10:50:58.314]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.314]                 })
[10:50:58.314]             }
[10:50:58.314]         }
[10:50:58.314]     }, args = future.call.arguments)
[10:50:58.314] }
[10:50:58.314] Lazy evaluation: FALSE
[10:50:58.314] Asynchronous evaluation: TRUE
[10:50:58.314] Local evaluation: TRUE
[10:50:58.314] Environment: R_GlobalEnv
[10:50:58.314] Capture standard output: TRUE
[10:50:58.314] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.314] Immediate condition classes: ‘immediateCondition’
[10:50:58.314] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.314] Packages: <none>
[10:50:58.314] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.314] Resolved: TRUE
[10:50:58.314] Value: 91 bytes of class ‘list’
[10:50:58.314] Early signaling: FALSE
[10:50:58.314] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.314] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.315] Chunk #1 of 1 ... DONE
[10:50:58.315] Launching 1 futures (chunks) ... DONE
[10:50:58.315] Resolving 1 futures (chunks) ...
[10:50:58.315] value() on list ...
[10:50:58.315] |  recursive: 0
[10:50:58.315] |  length: 1
[10:50:58.315] |  
[10:50:58.315] |  Number of remaining objects: 1
[10:50:58.315] |  checking value #1 ...
[10:50:58.315] |  :  'obj' is SequentialFuture
[10:50:58.315] |  :  resolved() for ‘SequentialFuture’ ...
[10:50:58.316] |  :  .  state: ‘finished’
[10:50:58.316] |  :  .  run: TRUE
[10:50:58.316] |  :  .  result: ‘FutureResult’
[10:50:58.316] |  :  resolved() for ‘SequentialFuture’ ... done
[10:50:58.316] |  :  SequentialFuture #1
[10:50:58.316] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.316] |  :  .  nx: 1
[10:50:58.316] |  :  .  relay: TRUE
[10:50:58.316] |  :  .  stdout: TRUE
[10:50:58.316] |  :  .  signal: TRUE
[10:50:58.316] |  :  .  resignal: FALSE
[10:50:58.316] |  :  .  force: TRUE
[10:50:58.317] |  :  .  relayed: [n=1] FALSE
[10:50:58.317] |  :  .  queued futures: [n=1] FALSE
[10:50:58.317] |  :  .  until=1
[10:50:58.317] |  :  .  relaying element #1
[10:50:58.317] |  :  .  relayed: [n=1] TRUE
[10:50:58.317] |  :  .  queued futures: [n=1] TRUE
[10:50:58.317] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.317] |  :  value(<SequentialFuture>, ...) ...
[10:50:58.317] |  :  .  value: <list>
[10:50:58.318] |  :  value(<SequentialFuture>, ...) ... done
[10:50:58.318] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.318] |  :  .  nx: 1
[10:50:58.318] |  :  .  relay: TRUE
[10:50:58.318] |  :  .  stdout: TRUE
[10:50:58.318] |  :  .  signal: TRUE
[10:50:58.318] |  :  .  resignal: FALSE
[10:50:58.318] |  :  .  force: TRUE
[10:50:58.318] |  :  .  relayed: [n=1] TRUE
[10:50:58.318] |  :  .  queued futures: [n=1] TRUE
[10:50:58.318] |  :  .  until=1
[10:50:58.318] |  :  .  relayed: [n=1] TRUE
[10:50:58.318] |  :  .  queued futures: [n=1] TRUE
[10:50:58.319] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.319] |  :  length: 0 (resolved future 1)
[10:50:58.319] |  checking value #1 ... done
[10:50:58.319] |  Relaying remaining futures ...
[10:50:58.319] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.319] |  :  .  nx: 1
[10:50:58.319] |  :  .  relay: TRUE
[10:50:58.319] |  :  .  stdout: TRUE
[10:50:58.319] |  :  .  signal: TRUE
[10:50:58.319] |  :  .  resignal: FALSE
[10:50:58.319] |  :  .  force: TRUE
[10:50:58.320] |  :  .  relayed: [n=1] TRUE
[10:50:58.320] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:50:58.320] |  :  .  relayed: [n=1] TRUE
[10:50:58.320] |  :  .  queued futures: [n=1] TRUE
[10:50:58.320] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.320] |  Relaying remaining futures ... done
[10:50:58.320] value() on list ... done
[10:50:58.320]  - Number of value chunks collected: 1
[10:50:58.320] Resolving 1 futures (chunks) ... DONE
[10:50:58.320] Reducing values from 1 chunks ...
[10:50:58.320]  - Number of values collected after concatenation: 5
[10:50:58.320]  - Number of values expected: 5
[10:50:58.321] Reducing values from 1 chunks ... DONE
[10:50:58.321] future_lapply() ... DONE
[10:50:58.321] future_lapply() ...
[10:50:58.321] Generating random seeds ...
[10:50:58.321] Generating random seed streams for 5 elements ...
[10:50:58.321] Generating random seed streams for 5 elements ... DONE
[10:50:58.322] Generating random seeds ... DONE
[10:50:58.322] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.322] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.322] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.322] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.323] Number of chunks: 1
[10:50:58.323] getGlobalsAndPackagesXApply() ...
[10:50:58.323]  - future.globals: TRUE
[10:50:58.323] getGlobalsAndPackages() ...
[10:50:58.323] |  Searching for globals ...
[10:50:58.324] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.324] |  Searching for globals ... DONE
[10:50:58.324] |  Resolving globals: FALSE
[10:50:58.324] |  Search for packages associated with the globals ...
[10:50:58.324] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.325] |  :  Packages: [1] ‘base’
[10:50:58.325] |  Search for packages associated with the globals ... DONE
[10:50:58.325] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.325] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.325] |  Packages after dropping 'base': [0] 
[10:50:58.325] |  globals: [1] ‘FUN’
[10:50:58.326] |  packages: [0] 
[10:50:58.326] getGlobalsAndPackages() ... done
[10:50:58.326]  - globals found/used: [n=1] ‘FUN’
[10:50:58.326]  - needed namespaces: [n=0] 
[10:50:58.326] Finding globals ... DONE
[10:50:58.326]  - use_args: TRUE
[10:50:58.326]  - Getting '...' globals ...
[10:50:58.326] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.326] |  recursive: 0
[10:50:58.327] |  length: 1
[10:50:58.327] |  elements: ‘...’
[10:50:58.327] |  'obj' is DotDotDotList
[10:50:58.327] |  resolve(obj, ...) ...
[10:50:58.327] |  resolve(obj, ...) ... done
[10:50:58.327] |  length: 0 (resolved future 1)
[10:50:58.328] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.328]    - '...' content: [n=0] 
[10:50:58.328] List of 1
[10:50:58.328]  $ ...: list()
[10:50:58.328]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.328]  - attr(*, "where")=List of 1
[10:50:58.328]   ..$ ...:<environment: 0x564ad4717f08> 
[10:50:58.328]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.328]  - attr(*, "resolved")= logi TRUE
[10:50:58.328]  - attr(*, "total_size")= num NA
[10:50:58.331]  - Getting '...' globals ... DONE
[10:50:58.331] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.331] List of 2
[10:50:58.331]  $ ...future.FUN:function (...)  
[10:50:58.331]  $ ...          : list()
[10:50:58.331]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.331]  - attr(*, "where")=List of 2
[10:50:58.331]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.331]   ..$ ...          :<environment: 0x564ad4717f08> 
[10:50:58.331]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.331]  - attr(*, "resolved")= logi FALSE
[10:50:58.331]  - attr(*, "total_size")= num 7184
[10:50:58.334] Packages to be attached in all futures: [n=0] 
[10:50:58.334] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.334] Number of futures (= number of chunks): 1
[10:50:58.334] Launching 1 futures (chunks) ...
[10:50:58.334] Chunk #1 of 1 ...
[10:50:58.334]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.334] getGlobalsAndPackages() ...
[10:50:58.334] |  Searching for globals ...
[10:50:58.335] |  :  globals found: [0] 
[10:50:58.335] |  Searching for globals ... DONE
[10:50:58.335] |  globals: [0] <none>
[10:50:58.335] |  packages: [0] <none>
[10:50:58.335] getGlobalsAndPackages() ... done
[10:50:58.335]    + additional globals found: [n=0] 
[10:50:58.335]    + additional namespaces needed: [n=0] 
[10:50:58.335]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.335]  - seeds: [5] <seeds>
[10:50:58.335]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.336] getGlobalsAndPackages() ...
[10:50:58.336] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.336] |  Resolving globals: FALSE
[10:50:58.336] |  Tweak future expression to call with '...' arguments ...
[10:50:58.336] |  :  {
[10:50:58.336] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.336] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.336] |  :      "# as a global variable                                         "
[10:50:58.336] |  :      do.call(function(...) {
[10:50:58.336] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.336] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.336] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.336] |  :          "# anonymous function.                                          "
[10:50:58.336] |  :          "#                                                              "
[10:50:58.336] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.336] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.336] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.336] |  :          "# global environment, which is where globals are written.      "
[10:50:58.336] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.336] |  :          repeat {
[10:50:58.336] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.336] |  :                  emptyenv())) 
[10:50:58.336] |  :                  break
[10:50:58.336] |  :              penv <- env
[10:50:58.336] |  :              env <- parent.env(env)
[10:50:58.336] |  :          }
[10:50:58.336] |  :          if (identical(penv, globalenv())) {
[10:50:58.336] |  :              environment(...future.FUN) <- environment()
[10:50:58.336] |  :          }
[10:50:58.336] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.336] |  :              !isNamespace(penv)) {
[10:50:58.336] |  :              parent.env(penv) <- environment()
[10:50:58.336] |  :          }
[10:50:58.336] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.336] |  :          {
[10:50:58.336] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.336] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.336] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.336] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.336] |  :              }
[10:50:58.336] |  :              {
[10:50:58.336] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.336] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.336] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.336] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.336] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.336] |  :                  })
[10:50:58.336] |  :              }
[10:50:58.336] |  :          }
[10:50:58.336] |  :      }, args = future.call.arguments)
[10:50:58.336] |  :  }
[10:50:58.336] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.337] |  Search for packages associated with the globals ...
[10:50:58.337] |  :  Packages associated with globals: [0] 
[10:50:58.337] |  :  Packages: [0] 
[10:50:58.337] |  Search for packages associated with the globals ... DONE
[10:50:58.337] |  Packages after dropping 'base': [0] 
[10:50:58.337] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.337] |  packages: [0] 
[10:50:58.337] getGlobalsAndPackages() ... done
[10:50:58.338] run() for Future (‘Future’) ...
[10:50:58.338] |  state: ‘created’
[10:50:58.338] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.338] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.338] |  Using SequentialFutureBackend ...
[10:50:58.338] |  :  Launching futures ...
[10:50:58.338] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:50:58.338] |  :  .  |  getFutureData() ...
[10:50:58.338] |  :  .  |  :  getFutureCore() ...
[10:50:58.339] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.339] |  :  .  |  :  getFutureCore() ... done
[10:50:58.339] |  :  .  |  :  getFutureCapture() ...
[10:50:58.339] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.339] |  :  .  |  :  getFutureContext() ...
[10:50:58.339] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.339] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.339] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.339] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.339] |  :  .  |  :  getFutureContext() ... done
[10:50:58.340] |  :  .  |  getFutureData() ... done
[10:50:58.340] |  :  .  |  attachPackages() ...
[10:50:58.340] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.340] |  :  .  |  attachPackages() ... DONE
[10:50:58.340] |  :  .  |  attachPackages() ...
[10:50:58.340] |  :  .  |  :  packages: [n=0] 
[10:50:58.340] |  :  .  |  attachPackages() ... DONE
[10:50:58.340] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.341] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.341] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.341] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.341] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.341] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.341] |  :  .  |  :  .  |  New stack:
[10:50:58.341] |  :  .  |  :  .  |  List of 1
[10:50:58.341] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.341] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.341] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.341] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.341] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.341] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.341] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.343] |  :  .  |  :  .  |  Old stack:
[10:50:58.344] |  :  .  |  :  .  |  List of 1
[10:50:58.344] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.344] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.344] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.344] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.344] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.344] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.344] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.344] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.344] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.344] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.347] |  :  .  |  :  .  |  Not identical
[10:50:58.347] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.347] |  :  .  |  :  .  |  :  List of 2
[10:50:58.347] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.347] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.347] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.347] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.347] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.347] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.347] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.352] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.352] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.352] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.352] |  :  .  |  :  .  List of future strategies:
[10:50:58.352] |  :  .  |  :  .  1. sequential:
[10:50:58.352] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.352] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.352] |  :  .  |  :  .     - call: plan(sequential)
[10:50:58.353] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.353] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.353] |  :  .  |  assign_globals() ...
[10:50:58.353] |  :  .  |  List of 5
[10:50:58.353] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.353] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.353] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.353] |  :  .  |   $ ...future.elements_ii    :List of 5
[10:50:58.353] |  :  .  |    ..$ : int 0
[10:50:58.353] |  :  .  |    ..$ : int 0
[10:50:58.353] |  :  .  |    ..$ : int 0
[10:50:58.353] |  :  .  |    ..$ : int 0
[10:50:58.353] |  :  .  |    ..$ : int 0
[10:50:58.353] |  :  .  |   $ ...future.seeds_ii       :List of 5
[10:50:58.353] |  :  .  |    ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:50:58.353] |  :  .  |    ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:50:58.353] |  :  .  |    ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:50:58.353] |  :  .  |    ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:50:58.353] |  :  .  |    ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:50:58.353] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.353] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.353] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.353] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.353] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.353] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.353] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.353] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.353] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.353] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.353] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.360] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.360] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.360] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.360] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.360] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.361] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.361] |  :  .  |  assign_globals() ... done
[10:50:58.362] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.362] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.362] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.362] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.363] |  :  .  |  :  .  |  :  New stack:
[10:50:58.363] |  :  .  |  :  .  |  :  List of 1
[10:50:58.363] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.363] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.363] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.363] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.363] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.363] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.363] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.363] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.363] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.363] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.366] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.366] |  :  .  |  :  .  |  :  List of 1
[10:50:58.366] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.366] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.366] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.366] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.366] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.366] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.366] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.366] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.366] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.366] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.369] |  :  .  |  :  .  |  :  Identical
[10:50:58.369] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.369] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.369] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.369] |  :  .  |  :  .  |  1. sequential:
[10:50:58.369] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.369] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.369] |  :  .  |  :  .  |     - call: plan(sequential)
[10:50:58.370] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.370] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.370] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.370] |  :  .  |  SequentialFuture started (and completed)
[10:50:58.370] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:50:58.370] |  :  Launching futures ... done
[10:50:58.371] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.371] |  Using SequentialFutureBackend ... done
[10:50:58.371] run() for Future (‘SequentialFuture’) ... done
[10:50:58.371] Created future:
[10:50:58.371] SequentialFuture:
[10:50:58.371] Label: ‘future_replicate-1’
[10:50:58.371] Expression:
[10:50:58.371] {
[10:50:58.371]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.371]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.371]     "# as a global variable                                         "
[10:50:58.371]     do.call(function(...) {
[10:50:58.371]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.371]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.371]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.371]         "# anonymous function.                                          "
[10:50:58.371]         "#                                                              "
[10:50:58.371]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.371]         "# function environment of FUN() to the calling environment.    "
[10:50:58.371]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.371]         "# global environment, which is where globals are written.      "
[10:50:58.371]         penv <- env <- environment(...future.FUN)
[10:50:58.371]         repeat {
[10:50:58.371]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.371]                 emptyenv())) 
[10:50:58.371]                 break
[10:50:58.371]             penv <- env
[10:50:58.371]             env <- parent.env(env)
[10:50:58.371]         }
[10:50:58.371]         if (identical(penv, globalenv())) {
[10:50:58.371]             environment(...future.FUN) <- environment()
[10:50:58.371]         }
[10:50:58.371]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.371]             !isNamespace(penv)) {
[10:50:58.371]             parent.env(penv) <- environment()
[10:50:58.371]         }
[10:50:58.371]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.371]         {
[10:50:58.371]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.371]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.371]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.371]                 on.exit(options(oopts), add = TRUE)
[10:50:58.371]             }
[10:50:58.371]             {
[10:50:58.371]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.371]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.371]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.371]                     envir = globalenv(), inherits = FALSE)
[10:50:58.371]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.371]                 })
[10:50:58.371]             }
[10:50:58.371]         }
[10:50:58.371]     }, args = future.call.arguments)
[10:50:58.371] }
[10:50:58.371] Lazy evaluation: FALSE
[10:50:58.371] Asynchronous evaluation: TRUE
[10:50:58.371] Local evaluation: TRUE
[10:50:58.371] Environment: R_GlobalEnv
[10:50:58.371] Capture standard output: TRUE
[10:50:58.371] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.371] Immediate condition classes: ‘immediateCondition’
[10:50:58.371] Globals: 5 objects totaling 558 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, list ‘...future.seeds_ii’ of 211 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.371] Packages: <none>
[10:50:58.371] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.371] Resolved: TRUE
[10:50:58.371] Value: 91 bytes of class ‘list’
[10:50:58.371] Early signaling: FALSE
[10:50:58.371] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.371] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.372] Chunk #1 of 1 ... DONE
[10:50:58.372] Launching 1 futures (chunks) ... DONE
[10:50:58.372] Resolving 1 futures (chunks) ...
[10:50:58.372] value() on list ...
[10:50:58.372] |  recursive: 0
[10:50:58.372] |  length: 1
[10:50:58.372] |  
[10:50:58.372] |  Number of remaining objects: 1
[10:50:58.373] |  checking value #1 ...
[10:50:58.373] |  :  'obj' is SequentialFuture
[10:50:58.373] |  :  resolved() for ‘SequentialFuture’ ...
[10:50:58.373] |  :  .  state: ‘finished’
[10:50:58.373] |  :  .  run: TRUE
[10:50:58.373] |  :  .  result: ‘FutureResult’
[10:50:58.373] |  :  resolved() for ‘SequentialFuture’ ... done
[10:50:58.373] |  :  SequentialFuture #1
[10:50:58.373] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.373] |  :  .  nx: 1
[10:50:58.373] |  :  .  relay: TRUE
[10:50:58.374] |  :  .  stdout: TRUE
[10:50:58.374] |  :  .  signal: TRUE
[10:50:58.374] |  :  .  resignal: FALSE
[10:50:58.374] |  :  .  force: TRUE
[10:50:58.374] |  :  .  relayed: [n=1] FALSE
[10:50:58.374] |  :  .  queued futures: [n=1] FALSE
[10:50:58.374] |  :  .  until=1
[10:50:58.374] |  :  .  relaying element #1
[10:50:58.374] |  :  .  relayed: [n=1] TRUE
[10:50:58.374] |  :  .  queued futures: [n=1] TRUE
[10:50:58.374] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.375] |  :  value(<SequentialFuture>, ...) ...
[10:50:58.375] |  :  .  value: <list>
[10:50:58.375] |  :  value(<SequentialFuture>, ...) ... done
[10:50:58.375] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.375] |  :  .  nx: 1
[10:50:58.375] |  :  .  relay: TRUE
[10:50:58.375] |  :  .  stdout: TRUE
[10:50:58.375] |  :  .  signal: TRUE
[10:50:58.375] |  :  .  resignal: FALSE
[10:50:58.375] |  :  .  force: TRUE
[10:50:58.375] |  :  .  relayed: [n=1] TRUE
[10:50:58.375] |  :  .  queued futures: [n=1] TRUE
[10:50:58.376] |  :  .  until=1
[10:50:58.376] |  :  .  relayed: [n=1] TRUE
[10:50:58.376] |  :  .  queued futures: [n=1] TRUE
[10:50:58.376] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.376] |  :  length: 0 (resolved future 1)
[10:50:58.376] |  checking value #1 ... done
[10:50:58.376] |  Relaying remaining futures ...
[10:50:58.376] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.376] |  :  .  nx: 1
[10:50:58.376] |  :  .  relay: TRUE
[10:50:58.376] |  :  .  stdout: TRUE
[10:50:58.377] |  :  .  signal: TRUE
[10:50:58.377] |  :  .  resignal: FALSE
[10:50:58.377] |  :  .  force: TRUE
[10:50:58.377] |  :  .  relayed: [n=1] TRUE
[10:50:58.377] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:50:58.377] |  :  .  relayed: [n=1] TRUE
[10:50:58.377] |  :  .  queued futures: [n=1] TRUE
[10:50:58.377] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.377] |  Relaying remaining futures ... done
[10:50:58.377] value() on list ... done
[10:50:58.377]  - Number of value chunks collected: 1
[10:50:58.377] Resolving 1 futures (chunks) ... DONE
[10:50:58.378] Reducing values from 1 chunks ...
[10:50:58.378]  - Number of values collected after concatenation: 5
[10:50:58.378]  - Number of values expected: 5
[10:50:58.378] Reducing values from 1 chunks ... DONE
[10:50:58.378] future_lapply() ... DONE
- example(replicate) ...
[10:50:58.378] future_lapply() ...
[10:50:58.379] Generating random seeds ...
[10:50:58.379] Generating random seed streams for 5 elements ...
[10:50:58.379] Generating random seed streams for 5 elements ... DONE
[10:50:58.379] Generating random seeds ... DONE
[10:50:58.379] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.380] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.380] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.380] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.380] Number of chunks: 1
[10:50:58.380] getGlobalsAndPackagesXApply() ...
[10:50:58.380]  - future.globals: TRUE
[10:50:58.380] getGlobalsAndPackages() ...
[10:50:58.380] |  Searching for globals ...
[10:50:58.382] |  :  globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:50:58.382] |  Searching for globals ... DONE
[10:50:58.382] |  Resolving globals: FALSE
[10:50:58.382] |  Search for packages associated with the globals ...
[10:50:58.382] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.383] |  :  Packages: [1] ‘base’
[10:50:58.383] |  Search for packages associated with the globals ... DONE
[10:50:58.384] |  The total size of the 3 globals is 617 bytes (617 bytes)
[10:50:58.384] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[10:50:58.384] |  Packages after dropping 'base': [0] 
[10:50:58.385] |  globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:50:58.385] |  packages: [0] 
[10:50:58.385] getGlobalsAndPackages() ... done
[10:50:58.385]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:50:58.385]  - needed namespaces: [n=0] 
[10:50:58.385] Finding globals ... DONE
[10:50:58.385]  - use_args: TRUE
[10:50:58.385]  - Getting '...' globals ...
[10:50:58.386] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.386] |  recursive: 0
[10:50:58.386] |  length: 1
[10:50:58.386] |  elements: ‘...’
[10:50:58.386] |  'obj' is DotDotDotList
[10:50:58.386] |  resolve(obj, ...) ...
[10:50:58.386] |  resolve(obj, ...) ... done
[10:50:58.386] |  length: 0 (resolved future 1)
[10:50:58.386] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.386]    - '...' content: [n=0] 
[10:50:58.386] List of 1
[10:50:58.386]  $ ...: list()
[10:50:58.386]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.386]  - attr(*, "where")=List of 1
[10:50:58.386]   ..$ ...:<environment: 0x564ad4b45708> 
[10:50:58.386]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.386]  - attr(*, "resolved")= logi TRUE
[10:50:58.386]  - attr(*, "total_size")= num NA
[10:50:58.389]  - Getting '...' globals ... DONE
[10:50:58.389] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:50:58.389] List of 4
[10:50:58.389]  $ ...future.FUN:function (...)  
[10:50:58.389]  $ foo          :function (x = 1, y = 2)  
[10:50:58.389]  $ x            : num 3
[10:50:58.389]  $ ...          : list()
[10:50:58.389]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.389]  - attr(*, "where")=List of 4
[10:50:58.389]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.389]   ..$ foo          :<environment: R_EmptyEnv> 
[10:50:58.389]   ..$ x            :<environment: R_EmptyEnv> 
[10:50:58.389]   ..$ ...          :<environment: 0x564ad4b45708> 
[10:50:58.389]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.389]  - attr(*, "resolved")= logi FALSE
[10:50:58.389]  - attr(*, "total_size")= num 7967
[10:50:58.393] Packages to be attached in all futures: [n=0] 
[10:50:58.393] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.393] Number of futures (= number of chunks): 1
[10:50:58.393] Launching 1 futures (chunks) ...
[10:50:58.393] Chunk #1 of 1 ...
[10:50:58.393]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.393] getGlobalsAndPackages() ...
[10:50:58.393] |  Searching for globals ...
[10:50:58.394] |  :  globals found: [0] 
[10:50:58.394] |  Searching for globals ... DONE
[10:50:58.394] |  globals: [0] <none>
[10:50:58.394] |  packages: [0] <none>
[10:50:58.394] getGlobalsAndPackages() ... done
[10:50:58.394]    + additional globals found: [n=0] 
[10:50:58.394]    + additional namespaces needed: [n=0] 
[10:50:58.394]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.394]  - seeds: [5] <seeds>
[10:50:58.394]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.395] getGlobalsAndPackages() ...
[10:50:58.395] |  globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.395] |  Resolving globals: FALSE
[10:50:58.395] |  Tweak future expression to call with '...' arguments ...
[10:50:58.395] |  :  {
[10:50:58.395] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.395] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.395] |  :      "# as a global variable                                         "
[10:50:58.395] |  :      do.call(function(...) {
[10:50:58.395] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.395] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.395] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.395] |  :          "# anonymous function.                                          "
[10:50:58.395] |  :          "#                                                              "
[10:50:58.395] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.395] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.395] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.395] |  :          "# global environment, which is where globals are written.      "
[10:50:58.395] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.395] |  :          repeat {
[10:50:58.395] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.395] |  :                  emptyenv())) 
[10:50:58.395] |  :                  break
[10:50:58.395] |  :              penv <- env
[10:50:58.395] |  :              env <- parent.env(env)
[10:50:58.395] |  :          }
[10:50:58.395] |  :          if (identical(penv, globalenv())) {
[10:50:58.395] |  :              environment(...future.FUN) <- environment()
[10:50:58.395] |  :          }
[10:50:58.395] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.395] |  :              !isNamespace(penv)) {
[10:50:58.395] |  :              parent.env(penv) <- environment()
[10:50:58.395] |  :          }
[10:50:58.395] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.395] |  :          {
[10:50:58.395] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.395] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.395] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.395] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.395] |  :              }
[10:50:58.395] |  :              {
[10:50:58.395] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.395] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.395] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.395] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.395] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.395] |  :                  })
[10:50:58.395] |  :              }
[10:50:58.395] |  :          }
[10:50:58.395] |  :      }, args = future.call.arguments)
[10:50:58.395] |  :  }
[10:50:58.396] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.396] |  Search for packages associated with the globals ...
[10:50:58.396] |  :  Packages associated with globals: [0] 
[10:50:58.396] |  :  Packages: [0] 
[10:50:58.396] |  Search for packages associated with the globals ... DONE
[10:50:58.396] |  Packages after dropping 'base': [0] 
[10:50:58.396] |  globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.396] |  packages: [0] 
[10:50:58.397] getGlobalsAndPackages() ... done
[10:50:58.397] run() for Future (‘Future’) ...
[10:50:58.397] |  state: ‘created’
[10:50:58.397] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.397] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.397] |  Using SequentialFutureBackend ...
[10:50:58.397] |  :  Launching futures ...
[10:50:58.397] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:50:58.398] |  :  .  |  getFutureData() ...
[10:50:58.398] |  :  .  |  :  getFutureCore() ...
[10:50:58.398] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.398] |  :  .  |  :  getFutureCore() ... done
[10:50:58.398] |  :  .  |  :  getFutureCapture() ...
[10:50:58.398] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.398] |  :  .  |  :  getFutureContext() ...
[10:50:58.398] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.398] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.398] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.398] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.399] |  :  .  |  :  getFutureContext() ... done
[10:50:58.399] |  :  .  |  getFutureData() ... done
[10:50:58.399] |  :  .  |  attachPackages() ...
[10:50:58.399] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.399] |  :  .  |  attachPackages() ... DONE
[10:50:58.399] |  :  .  |  attachPackages() ...
[10:50:58.399] |  :  .  |  :  packages: [n=0] 
[10:50:58.399] |  :  .  |  attachPackages() ... DONE
[10:50:58.400] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.400] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.400] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.400] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.400] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.400] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.400] |  :  .  |  :  .  |  New stack:
[10:50:58.401] |  :  .  |  :  .  |  List of 1
[10:50:58.401] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.401] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.401] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.401] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.401] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.401] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.401] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.404] |  :  .  |  :  .  |  Old stack:
[10:50:58.404] |  :  .  |  :  .  |  List of 1
[10:50:58.404] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.404] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.404] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.404] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.404] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.404] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.404] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.404] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.404] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.404] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.406] |  :  .  |  :  .  |  Not identical
[10:50:58.407] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.407] |  :  .  |  :  .  |  :  List of 2
[10:50:58.407] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.407] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.407] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.407] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.407] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.407] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.407] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.411] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.411] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.411] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.411] |  :  .  |  :  .  List of future strategies:
[10:50:58.411] |  :  .  |  :  .  1. sequential:
[10:50:58.411] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.411] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.411] |  :  .  |  :  .     - call: plan(sequential)
[10:50:58.412] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.412] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.412] |  :  .  |  assign_globals() ...
[10:50:58.412] |  :  .  |  List of 7
[10:50:58.412] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.412] |  :  .  |   $ foo                      :function (x = 1, y = 2)  
[10:50:58.412] |  :  .  |   $ x                        : num 3
[10:50:58.412] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.412] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.412] |  :  .  |   $ ...future.elements_ii    :List of 5
[10:50:58.412] |  :  .  |    ..$ : int 0
[10:50:58.412] |  :  .  |    ..$ : int 0
[10:50:58.412] |  :  .  |    ..$ : int 0
[10:50:58.412] |  :  .  |    ..$ : int 0
[10:50:58.412] |  :  .  |    ..$ : int 0
[10:50:58.412] |  :  .  |   $ ...future.seeds_ii       :List of 5
[10:50:58.412] |  :  .  |    ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:50:58.412] |  :  .  |    ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:50:58.412] |  :  .  |    ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:50:58.412] |  :  .  |    ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:50:58.412] |  :  .  |    ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:50:58.412] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.412] |  :  .  |   - attr(*, "where")=List of 7
[10:50:58.412] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |    ..$ foo                      :<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |    ..$ x                        :<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.412] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.412] |  :  .  |   - attr(*, "total_size")= num 7967
[10:50:58.412] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.412] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.446] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.446] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.446] |  :  .  |  - reassign environment for ‘foo’ [where=emptyenv()]
[10:50:58.446] |  :  .  |  - copied ‘foo’ to environment
[10:50:58.447] |  :  .  |  - copied ‘x’ to environment
[10:50:58.447] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.447] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.447] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.447] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.447] |  :  .  |  assign_globals() ... done
[10:50:58.449] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.450] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.450] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.450] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.450] |  :  .  |  :  .  |  :  New stack:
[10:50:58.450] |  :  .  |  :  .  |  :  List of 1
[10:50:58.450] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.450] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.450] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.450] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.450] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.450] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.450] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.450] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.450] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.450] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.453] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.453] |  :  .  |  :  .  |  :  List of 1
[10:50:58.453] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.453] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.453] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.453] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.453] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.453] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:58.453] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.453] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.453] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.453] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.456] |  :  .  |  :  .  |  :  Identical
[10:50:58.456] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.456] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.456] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.456] |  :  .  |  :  .  |  1. sequential:
[10:50:58.456] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.456] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.456] |  :  .  |  :  .  |     - call: plan(sequential)
[10:50:58.457] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.457] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.457] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.457] |  :  .  |  SequentialFuture started (and completed)
[10:50:58.457] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:50:58.457] |  :  Launching futures ... done
[10:50:58.457] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.458] |  Using SequentialFutureBackend ... done
[10:50:58.458] run() for Future (‘SequentialFuture’) ... done
[10:50:58.458] Created future:
[10:50:58.458] SequentialFuture:
[10:50:58.458] Label: ‘future_replicate-1’
[10:50:58.458] Expression:
[10:50:58.458] {
[10:50:58.458]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.458]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.458]     "# as a global variable                                         "
[10:50:58.458]     do.call(function(...) {
[10:50:58.458]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.458]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.458]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.458]         "# anonymous function.                                          "
[10:50:58.458]         "#                                                              "
[10:50:58.458]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.458]         "# function environment of FUN() to the calling environment.    "
[10:50:58.458]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.458]         "# global environment, which is where globals are written.      "
[10:50:58.458]         penv <- env <- environment(...future.FUN)
[10:50:58.458]         repeat {
[10:50:58.458]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.458]                 emptyenv())) 
[10:50:58.458]                 break
[10:50:58.458]             penv <- env
[10:50:58.458]             env <- parent.env(env)
[10:50:58.458]         }
[10:50:58.458]         if (identical(penv, globalenv())) {
[10:50:58.458]             environment(...future.FUN) <- environment()
[10:50:58.458]         }
[10:50:58.458]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.458]             !isNamespace(penv)) {
[10:50:58.458]             parent.env(penv) <- environment()
[10:50:58.458]         }
[10:50:58.458]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.458]         {
[10:50:58.458]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.458]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.458]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.458]                 on.exit(options(oopts), add = TRUE)
[10:50:58.458]             }
[10:50:58.458]             {
[10:50:58.458]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.458]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.458]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.458]                     envir = globalenv(), inherits = FALSE)
[10:50:58.458]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.458]                 })
[10:50:58.458]             }
[10:50:58.458]         }
[10:50:58.458]     }, args = future.call.arguments)
[10:50:58.458] }
[10:50:58.458] Lazy evaluation: FALSE
[10:50:58.458] Asynchronous evaluation: TRUE
[10:50:58.458] Local evaluation: TRUE
[10:50:58.458] Environment: 0x564ad4b412e0
[10:50:58.458] Capture standard output: TRUE
[10:50:58.458] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.458] Immediate condition classes: ‘immediateCondition’
[10:50:58.458] Globals: 7 objects totaling 1.02 KiB (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 91 bytes, ...)
[10:50:58.458] Packages: <none>
[10:50:58.458] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.458] Resolved: TRUE
[10:50:58.458] Value: 151 bytes of class ‘list’
[10:50:58.458] Early signaling: FALSE
[10:50:58.458] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.458] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:50:58.459] Chunk #1 of 1 ... DONE
[10:50:58.459] Launching 1 futures (chunks) ... DONE
[10:50:58.459] Resolving 1 futures (chunks) ...
[10:50:58.459] value() on list ...
[10:50:58.459] |  recursive: 0
[10:50:58.459] |  length: 1
[10:50:58.460] |  
[10:50:58.460] |  Number of remaining objects: 1
[10:50:58.460] |  checking value #1 ...
[10:50:58.460] |  :  'obj' is SequentialFuture
[10:50:58.460] |  :  resolved() for ‘SequentialFuture’ ...
[10:50:58.460] |  :  .  state: ‘finished’
[10:50:58.460] |  :  .  run: TRUE
[10:50:58.460] |  :  .  result: ‘FutureResult’
[10:50:58.460] |  :  resolved() for ‘SequentialFuture’ ... done
[10:50:58.460] |  :  SequentialFuture #1
[10:50:58.460] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.461] |  :  .  nx: 1
[10:50:58.461] |  :  .  relay: TRUE
[10:50:58.461] |  :  .  stdout: TRUE
[10:50:58.461] |  :  .  signal: TRUE
[10:50:58.461] |  :  .  resignal: FALSE
[10:50:58.461] |  :  .  force: TRUE
[10:50:58.461] |  :  .  relayed: [n=1] FALSE
[10:50:58.461] |  :  .  queued futures: [n=1] FALSE
[10:50:58.461] |  :  .  until=1
[10:50:58.461] |  :  .  relaying element #1
[10:50:58.462] |  :  .  relayed: [n=1] TRUE
[10:50:58.462] |  :  .  queued futures: [n=1] TRUE
[10:50:58.462] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.462] |  :  value(<SequentialFuture>, ...) ...
[10:50:58.462] |  :  .  value: <list>
[10:50:58.462] |  :  value(<SequentialFuture>, ...) ... done
[10:50:58.462] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:50:58.462] |  :  .  nx: 1
[10:50:58.462] |  :  .  relay: TRUE
[10:50:58.462] |  :  .  stdout: TRUE
[10:50:58.463] |  :  .  signal: TRUE
[10:50:58.463] |  :  .  resignal: FALSE
[10:50:58.463] |  :  .  force: TRUE
[10:50:58.463] |  :  .  relayed: [n=1] TRUE
[10:50:58.463] |  :  .  queued futures: [n=1] TRUE
[10:50:58.463] |  :  .  until=1
[10:50:58.463] |  :  .  relayed: [n=1] TRUE
[10:50:58.463] |  :  .  queued futures: [n=1] TRUE
[10:50:58.463] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:50:58.463] |  :  length: 0 (resolved future 1)
[10:50:58.463] |  checking value #1 ... done
[10:50:58.464] |  Relaying remaining futures ...
[10:50:58.464] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.464] |  :  .  nx: 1
[10:50:58.464] |  :  .  relay: TRUE
[10:50:58.464] |  :  .  stdout: TRUE
[10:50:58.464] |  :  .  signal: TRUE
[10:50:58.464] |  :  .  resignal: FALSE
[10:50:58.464] |  :  .  force: TRUE
[10:50:58.464] |  :  .  relayed: [n=1] TRUE
[10:50:58.464] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:50:58.464] |  :  .  relayed: [n=1] TRUE
[10:50:58.465] |  :  .  queued futures: [n=1] TRUE
[10:50:58.465] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.465] |  Relaying remaining futures ... done
[10:50:58.465] value() on list ... done
[10:50:58.465]  - Number of value chunks collected: 1
[10:50:58.465] Resolving 1 futures (chunks) ... DONE
[10:50:58.465] Reducing values from 1 chunks ...
[10:50:58.465]  - Number of values collected after concatenation: 5
[10:50:58.465]  - Number of values expected: 5
[10:50:58.465] Reducing values from 1 chunks ... DONE
[10:50:58.465] future_lapply() ... DONE
[10:50:58.467] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.467] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:50:58.467] |  :  all.equal() for FutureStrategyList ...
[10:50:58.467] |  :  .  New stack:
[10:50:58.467] |  :  .  List of 1
[10:50:58.467] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.467] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.467] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.467] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.467] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.467] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:58.467] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.470] |  :  .  Old stack:
[10:50:58.470] |  :  .  List of 1
[10:50:58.470] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.470] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.470] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.470] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.470] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.470] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:58.470] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.470] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.470] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.470] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.472] |  :  .  Not identical
[10:50:58.473] |  :  .  all.equal() for future ...
[10:50:58.473] |  :  .  |  List of 2
[10:50:58.473] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.473] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.473] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.473] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.473] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.473] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.473] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.473] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.473] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.473] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.473] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.473] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.473] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.473] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.473] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.477] |  :  .  all.equal() for future ... done
[10:50:58.477] |  :  all.equal() for FutureStrategyList ... done
[10:50:58.477] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:50:58.477] |  :  List of future strategies:
[10:50:58.477] |  :  1. sequential:
[10:50:58.477] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.477] |  :     - tweaked: FALSE
[10:50:58.477] |  :     - call: plan(sequential)
[10:50:58.478] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:50:58.478] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:50:58.478] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.478] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:50:58.479] |  :  all.equal() for FutureStrategyList ...
[10:50:58.479] |  :  .  New stack:
[10:50:58.479] |  :  .  List of 1
[10:50:58.479] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.479] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.479] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.479] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.479] |  :  .      ...)  
[10:50:58.479] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.479] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.479] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.479] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.481] |  :  .  Old stack:
[10:50:58.481] |  :  .  List of 1
[10:50:58.481] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.481] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.481] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.481] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.481] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.481] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:58.481] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.481] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.481] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.481] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.484] |  :  .  Not identical
[10:50:58.484] |  :  .  all.equal() for future ...
[10:50:58.484] |  :  .  |  List of 2
[10:50:58.484] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.484] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.484] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.484] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.484] |  :  .  |      ...)  
[10:50:58.484] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.484] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.484] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.484] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.484] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.484] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.484] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.484] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.484] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:58.484] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4e5edf8> 
[10:50:58.484] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.484] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.489] |  :  .  |  Formals differ
[10:50:58.489] |  :  .  all.equal() for future ... done
[10:50:58.489] |  :  .  Future strategies differ at level 1
[10:50:58.490] |  :  all.equal() for FutureStrategyList ... done
[10:50:58.490] |  :  plan(): Setting new future strategy stack:
[10:50:58.490] |  :  List of future strategies:
[10:50:58.490] |  :  1. multicore:
[10:50:58.490] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.490] |  :     - tweaked: FALSE
[10:50:58.490] |  :     - call: plan(strategy)
[10:50:58.490] |  :  List of 1
[10:50:58.490] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.490] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.490] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.490] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.490] |  :      ...)  
[10:50:58.490] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.490] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.490] |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.490] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.492] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:50:58.492] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.493] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.493] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.493] |  :  .  Legacy shutdown of cluster workers ...
[10:50:58.493] |  :  .  |  Stopping existing cluster ...
[10:50:58.493] |  :  .  |  :  No pre-existing cluster. Skipping
[10:50:58.493] |  :  .  |  Stopping existing cluster ... done
[10:50:58.493] |  :  .  Legacy shutdown of cluster workers ... done
[10:50:58.493] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:50:58.493] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:50:58.494] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.494] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.494] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.494] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.494] |  :  .      ...)  
[10:50:58.494] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.494] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.494] |  :  .   - attr(*, "call")= language plan(strategy)
[10:50:58.495] |  :  .  init: NULL
[10:50:58.495] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:50:58.495] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.496] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.496] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.496] |  :  Backend function: <‘NULL’>
[10:50:58.497] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.498] |  :  plan(): nbrOfWorkers() = 2
[10:50:58.498] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:50:58.498] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.498] future_lapply() ...
[10:50:58.499] Generating random seeds ...
[10:50:58.499] Generating random seed streams for 5 elements ...
[10:50:58.499] Generating random seed streams for 5 elements ... DONE
[10:50:58.499] Generating random seeds ... DONE
[10:50:58.499] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.499] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.500] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.500] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.500] Backend function: <‘NULL’>
[10:50:58.511] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.512] Number of chunks: 2
[10:50:58.513] getGlobalsAndPackagesXApply() ...
[10:50:58.513]  - future.globals: TRUE
[10:50:58.513] getGlobalsAndPackages() ...
[10:50:58.513] |  Searching for globals ...
[10:50:58.514] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.514] |  Searching for globals ... DONE
[10:50:58.514] |  Resolving globals: FALSE
[10:50:58.514] |  Search for packages associated with the globals ...
[10:50:58.514] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.515] |  :  Packages: [1] ‘base’
[10:50:58.515] |  Search for packages associated with the globals ... DONE
[10:50:58.515] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.515] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.515] |  Packages after dropping 'base': [0] 
[10:50:58.515] |  globals: [1] ‘FUN’
[10:50:58.516] |  packages: [0] 
[10:50:58.516] getGlobalsAndPackages() ... done
[10:50:58.516]  - globals found/used: [n=1] ‘FUN’
[10:50:58.516]  - needed namespaces: [n=0] 
[10:50:58.516] Finding globals ... DONE
[10:50:58.516]  - use_args: TRUE
[10:50:58.516]  - Getting '...' globals ...
[10:50:58.516] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.517] |  recursive: 0
[10:50:58.517] |  length: 1
[10:50:58.517] |  elements: ‘...’
[10:50:58.517] |  'obj' is DotDotDotList
[10:50:58.517] |  resolve(obj, ...) ...
[10:50:58.517] |  resolve(obj, ...) ... done
[10:50:58.517] |  length: 0 (resolved future 1)
[10:50:58.517] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.517]    - '...' content: [n=0] 
[10:50:58.517] List of 1
[10:50:58.517]  $ ...: list()
[10:50:58.517]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.517]  - attr(*, "where")=List of 1
[10:50:58.517]   ..$ ...:<environment: 0x564ad4298b48> 
[10:50:58.517]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.517]  - attr(*, "resolved")= logi TRUE
[10:50:58.517]  - attr(*, "total_size")= num NA
[10:50:58.520]  - Getting '...' globals ... DONE
[10:50:58.520] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.520] List of 2
[10:50:58.520]  $ ...future.FUN:function (...)  
[10:50:58.520]  $ ...          : list()
[10:50:58.520]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.520]  - attr(*, "where")=List of 2
[10:50:58.520]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.520]   ..$ ...          :<environment: 0x564ad4298b48> 
[10:50:58.520]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.520]  - attr(*, "resolved")= logi FALSE
[10:50:58.520]  - attr(*, "total_size")= num 7184
[10:50:58.523] Packages to be attached in all futures: [n=0] 
[10:50:58.523] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.523] Number of futures (= number of chunks): 2
[10:50:58.523] Launching 2 futures (chunks) ...
[10:50:58.523] Chunk #1 of 2 ...
[10:50:58.523]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.523] getGlobalsAndPackages() ...
[10:50:58.523] |  Searching for globals ...
[10:50:58.524] |  :  globals found: [0] 
[10:50:58.524] |  Searching for globals ... DONE
[10:50:58.524] |  globals: [0] <none>
[10:50:58.524] |  packages: [0] <none>
[10:50:58.524] getGlobalsAndPackages() ... done
[10:50:58.524]    + additional globals found: [n=0] 
[10:50:58.524]    + additional namespaces needed: [n=0] 
[10:50:58.524]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.524]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.524]  - seeds: [2] <seeds>
[10:50:58.525]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.525] getGlobalsAndPackages() ...
[10:50:58.525] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.525] |  Resolving globals: FALSE
[10:50:58.525] |  Tweak future expression to call with '...' arguments ...
[10:50:58.525] |  :  {
[10:50:58.525] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.525] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.525] |  :      "# as a global variable                                         "
[10:50:58.525] |  :      do.call(function(...) {
[10:50:58.525] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.525] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.525] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.525] |  :          "# anonymous function.                                          "
[10:50:58.525] |  :          "#                                                              "
[10:50:58.525] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.525] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.525] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.525] |  :          "# global environment, which is where globals are written.      "
[10:50:58.525] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.525] |  :          repeat {
[10:50:58.525] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.525] |  :                  emptyenv())) 
[10:50:58.525] |  :                  break
[10:50:58.525] |  :              penv <- env
[10:50:58.525] |  :              env <- parent.env(env)
[10:50:58.525] |  :          }
[10:50:58.525] |  :          if (identical(penv, globalenv())) {
[10:50:58.525] |  :              environment(...future.FUN) <- environment()
[10:50:58.525] |  :          }
[10:50:58.525] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.525] |  :              !isNamespace(penv)) {
[10:50:58.525] |  :              parent.env(penv) <- environment()
[10:50:58.525] |  :          }
[10:50:58.525] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.525] |  :          {
[10:50:58.525] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.525] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.525] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.525] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.525] |  :              }
[10:50:58.525] |  :              {
[10:50:58.525] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.525] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.525] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.525] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.525] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.525] |  :                  })
[10:50:58.525] |  :              }
[10:50:58.525] |  :          }
[10:50:58.525] |  :      }, args = future.call.arguments)
[10:50:58.525] |  :  }
[10:50:58.526] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.526] |  Search for packages associated with the globals ...
[10:50:58.526] |  :  Packages associated with globals: [0] 
[10:50:58.526] |  :  Packages: [0] 
[10:50:58.526] |  Search for packages associated with the globals ... DONE
[10:50:58.526] |  Packages after dropping 'base': [0] 
[10:50:58.526] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.526] |  packages: [0] 
[10:50:58.527] getGlobalsAndPackages() ... done
[10:50:58.527] run() for Future (‘Future’) ...
[10:50:58.527] |  state: ‘created’
[10:50:58.527] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.527] |  :  makeFutureBackend(<multicore>) ...
[10:50:58.527] |  :  .  Backend function: <‘NULL’>
[10:50:58.529] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.529] |  :  makeFutureBackend(<multicore>) ... done
[10:50:58.529] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.529] |  Using MulticoreFutureBackend ...
[10:50:58.529] |  :  Launching futures ...
[10:50:58.530] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.530] |  :  .  |  getFutureData() ...
[10:50:58.531] |  :  .  |  :  getFutureCore() ...
[10:50:58.531] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.531] |  :  .  |  :  getFutureCore() ... done
[10:50:58.531] |  :  .  |  :  getFutureCapture() ...
[10:50:58.531] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.531] |  :  .  |  :  getFutureContext() ...
[10:50:58.531] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.531] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.531] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.531] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.532] |  :  .  |  :  getFutureContext() ... done
[10:50:58.532] |  :  .  |  getFutureData() ... done
[10:50:58.532] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.533] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.536] |  :  .  |  MulticoreFuture started
[10:50:58.536] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.536] |  :  .  |  attachPackages() ...
[10:50:58.536] |  :  Launching futures ... done
[10:50:58.536] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.537] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.537] |  :  .  |  attachPackages() ... DONE
[10:50:58.537] |  Using MulticoreFutureBackend ... done
[10:50:58.537] |  :  .  |  attachPackages() ...
[10:50:58.537] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.537] |  :  .  |  :  packages: [n=0] 
[10:50:58.538] Created future:
[10:50:58.538] |  :  .  |  attachPackages() ... DONE
[10:50:58.539] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.539] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.540] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.540] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.541] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.541] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.541] |  :  .  |  :  .  |  New stack:
[10:50:58.541] |  :  .  |  :  .  |  List of 1
[10:50:58.541] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.541] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.541] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.541] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.541] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.541] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.541] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.546] |  :  .  |  :  .  |  Old stack:
[10:50:58.546] |  :  .  |  :  .  |  List of 1
[10:50:58.546] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.546] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.546] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.546] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.546] |  :  .  |  :  .  |      ...)  
[10:50:58.546] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.546] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.546] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.546] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.546] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.546] |  :  .  |  :  .  |      ...)  
[10:50:58.546] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.546] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.551] |  :  .  |  :  .  |  Not identical
[10:50:58.551] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.552] readImmediateCondition() ...
[10:50:58.552]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.552]  - Number of RDS files: 0
[10:50:58.553] readImmediateCondition() ... DONE
[10:50:58.538] MulticoreFuture:
[10:50:58.538] Label: ‘future_replicate-1’
[10:50:58.538] Expression:
[10:50:58.538] {
[10:50:58.538]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.538]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.538]     "# as a global variable                                         "
[10:50:58.538]     do.call(function(...) {
[10:50:58.538]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.538]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.538]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.538]         "# anonymous function.                                          "
[10:50:58.538]         "#                                                              "
[10:50:58.538]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.538]         "# function environment of FUN() to the calling environment.    "
[10:50:58.538]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.538]         "# global environment, which is where globals are written.      "
[10:50:58.538]         penv <- env <- environment(...future.FUN)
[10:50:58.538]         repeat {
[10:50:58.538]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.538]                 emptyenv())) 
[10:50:58.538]                 break
[10:50:58.538]             penv <- env
[10:50:58.538]             env <- parent.env(env)
[10:50:58.538]         }
[10:50:58.538]         if (identical(penv, globalenv())) {
[10:50:58.538]             environment(...future.FUN) <- environment()
[10:50:58.538]         }
[10:50:58.538]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.538]             !isNamespace(penv)) {
[10:50:58.538]             parent.env(penv) <- environment()
[10:50:58.538]         }
[10:50:58.538]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.538]         {
[10:50:58.538]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.538]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.538]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.538]                 on.exit(options(oopts), add = TRUE)
[10:50:58.538]             }
[10:50:58.538]             {
[10:50:58.538]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.538]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.538]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.538]                     envir = globalenv(), inherits = FALSE)
[10:50:58.538]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.538]                 })
[10:50:58.538]             }
[10:50:58.538]         }
[10:50:58.538]     }, args = future.call.arguments)
[10:50:58.538] }
[10:50:58.538] Lazy evaluation: FALSE
[10:50:58.538] Asynchronous evaluation: TRUE
[10:50:58.538] Local evaluation: TRUE
[10:50:58.538] Environment: R_GlobalEnv
[10:50:58.538] Capture standard output: TRUE
[10:50:58.538] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.538] Immediate condition classes: ‘immediateCondition’
[10:50:58.538] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.538] Packages: <none>
[10:50:58.538] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.538] Resolved: FALSE
[10:50:58.538] Value: <not collected>
[10:50:58.538] Conditions captured: <none>
[10:50:58.538] Early signaling: FALSE
[10:50:58.538] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.538] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.553] Chunk #1 of 2 ... DONE
[10:50:58.553] Chunk #2 of 2 ...
[10:50:58.554]  - Finding globals in 'X' for chunk #2 ...
[10:50:58.554] getGlobalsAndPackages() ...
[10:50:58.554] |  Searching for globals ...
[10:50:58.555] |  :  globals found: [0] 
[10:50:58.555] |  Searching for globals ... DONE
[10:50:58.555] |  globals: [0] <none>
[10:50:58.555] |  packages: [0] <none>
[10:50:58.555] getGlobalsAndPackages() ... done
[10:50:58.555]    + additional globals found: [n=0] 
[10:50:58.555]    + additional namespaces needed: [n=0] 
[10:50:58.556]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:58.556]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.556]  - seeds: [3] <seeds>
[10:50:58.556]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.556] getGlobalsAndPackages() ...
[10:50:58.556] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.556] |  Resolving globals: FALSE
[10:50:58.557] |  Tweak future expression to call with '...' arguments ...
[10:50:58.557] |  :  {
[10:50:58.557] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.557] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.557] |  :      "# as a global variable                                         "
[10:50:58.557] |  :      do.call(function(...) {
[10:50:58.557] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.557] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.557] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.557] |  :          "# anonymous function.                                          "
[10:50:58.557] |  :          "#                                                              "
[10:50:58.557] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.557] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.557] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.557] |  :          "# global environment, which is where globals are written.      "
[10:50:58.557] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.557] |  :          repeat {
[10:50:58.557] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.557] |  :                  emptyenv())) 
[10:50:58.557] |  :                  break
[10:50:58.557] |  :              penv <- env
[10:50:58.557] |  :              env <- parent.env(env)
[10:50:58.557] |  :          }
[10:50:58.557] |  :          if (identical(penv, globalenv())) {
[10:50:58.557] |  :              environment(...future.FUN) <- environment()
[10:50:58.557] |  :          }
[10:50:58.557] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.557] |  :              !isNamespace(penv)) {
[10:50:58.557] |  :              parent.env(penv) <- environment()
[10:50:58.557] |  :          }
[10:50:58.557] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.557] |  :          {
[10:50:58.557] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.557] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.557] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.557] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.557] |  :              }
[10:50:58.557] |  :              {
[10:50:58.557] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.557] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.557] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.557] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.557] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.557] |  :                  })
[10:50:58.557] |  :              }
[10:50:58.557] |  :          }
[10:50:58.557] |  :      }, args = future.call.arguments)
[10:50:58.557] |  :  }
[10:50:58.557] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.558] |  Search for packages associated with the globals ...
[10:50:58.551] |  :  .  |  :  .  |  :  List of 2
[10:50:58.551] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.551] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.551] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.551] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.551] |  :  .  |  :  .  |  :      ...)  
[10:50:58.551] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.551] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.551] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.551] |  :  .  |  :  .  |  :      ...)  
[10:50:58.551] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.558] |  :  Packages associated with globals: [0] 
[10:50:58.558] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.558] |  :  Packages: [0] 
[10:50:58.559] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.559] |  Search for packages associated with the globals ... DONE
[10:50:58.559] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.559] |  Packages after dropping 'base': [0] 
[10:50:58.559] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.559] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.559] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.559] |  packages: [0] 
[10:50:58.559] getGlobalsAndPackages() ... done
[10:50:58.560] run() for Future (‘Future’) ...
[10:50:58.559] |  :  .  |  :  .  List of future strategies:
[10:50:58.559] |  :  .  |  :  .  1. sequential:
[10:50:58.559] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.559] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.559] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.560] |  state: ‘created’
[10:50:58.560] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.560] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.560] |  Using MulticoreFutureBackend ...
[10:50:58.560] |  :  Launching futures ...
[10:50:58.561] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.561] |  :  .  |  getFutureData() ...
[10:50:58.561] |  :  .  |  :  getFutureCore() ...
[10:50:58.561] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.561] |  :  .  |  :  getFutureCore() ... done
[10:50:58.561] |  :  .  |  :  getFutureCapture() ...
[10:50:58.561] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.562] |  :  .  |  :  getFutureContext() ...
[10:50:58.562] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.562] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.562] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.562] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.562] |  :  .  |  :  getFutureContext() ... done
[10:50:58.562] |  :  .  |  getFutureData() ... done
[10:50:58.563] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.563] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.560] |  :  .  |  :  .  List of 1
[10:50:58.560] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.560] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.560] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.560] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.560] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.560] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.560] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.563] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.564] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.564] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.564] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.564] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.564] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.565] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.565] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.565] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.565] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.566] |  :  .  |  assign_globals() ...
[10:50:58.569] |  :  .  |  MulticoreFuture started
[10:50:58.570] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.570] |  :  Launching futures ... done
[10:50:58.570] |  :  .  |  attachPackages() ...
[10:50:58.570] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.571] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.571] |  Using MulticoreFutureBackend ... done
[10:50:58.571] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.571] |  :  .  |  attachPackages() ... DONE
[10:50:58.571] |  :  .  |  attachPackages() ...
[10:50:58.571] Created future:
[10:50:58.572] |  :  .  |  :  packages: [n=0] 
[10:50:58.572] |  :  .  |  attachPackages() ... DONE
[10:50:58.573] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.573] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.574] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.575] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.575] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.575] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.575] |  :  .  |  :  .  |  New stack:
[10:50:58.566] |  :  .  |  List of 5
[10:50:58.566] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.566] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.566] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.566] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:50:58.566] |  :  .  |    ..$ : int 0
[10:50:58.566] |  :  .  |    ..$ : int 0
[10:50:58.566] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:50:58.566] |  :  .  |    ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[10:50:58.566] |  :  .  |    ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[10:50:58.566] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.566] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.566] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.566] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.566] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.566] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.566] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.566] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.566] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.566] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.566] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.576] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.576] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.576] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.577] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.577] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.577] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.577] |  :  .  |  assign_globals() ... done
[10:50:58.579] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.579] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.579] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.579] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.580] |  :  .  |  :  .  |  :  New stack:
[10:50:58.576] |  :  .  |  :  .  |  List of 1
[10:50:58.576] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.576] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.576] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.576] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.576] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.576] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.576] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.580] |  :  .  |  :  .  |  Old stack:
[10:50:58.580] |  :  .  |  :  .  |  :  List of 1
[10:50:58.580] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.580] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.580] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.580] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.580] |  :  .  |  :  .  |  :      ...)  
[10:50:58.580] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.580] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.580] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.580] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.580] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.580] |  :  .  |  :  .  |  :      ...)  
[10:50:58.580] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.580] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.583] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.584] readImmediateCondition() ...
[10:50:58.585]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.583] |  :  .  |  :  .  |  :  List of 1
[10:50:58.583] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.583] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.583] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.583] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.583] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.583] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.583] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.585] |  :  .  |  :  .  |  :  Not identical
[10:50:58.585]  - Number of RDS files: 0
[10:50:58.585] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:58.585] readImmediateCondition() ... DONE
[10:50:58.572] MulticoreFuture:
[10:50:58.572] Label: ‘future_replicate-2’
[10:50:58.572] Expression:
[10:50:58.572] {
[10:50:58.572]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.572]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.572]     "# as a global variable                                         "
[10:50:58.572]     do.call(function(...) {
[10:50:58.572]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.572]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.572]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.572]         "# anonymous function.                                          "
[10:50:58.572]         "#                                                              "
[10:50:58.572]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.572]         "# function environment of FUN() to the calling environment.    "
[10:50:58.572]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.572]         "# global environment, which is where globals are written.      "
[10:50:58.572]         penv <- env <- environment(...future.FUN)
[10:50:58.572]         repeat {
[10:50:58.572]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.572]                 emptyenv())) 
[10:50:58.572]                 break
[10:50:58.572]             penv <- env
[10:50:58.572]             env <- parent.env(env)
[10:50:58.572]         }
[10:50:58.572]         if (identical(penv, globalenv())) {
[10:50:58.572]             environment(...future.FUN) <- environment()
[10:50:58.572]         }
[10:50:58.572]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.572]             !isNamespace(penv)) {
[10:50:58.572]             parent.env(penv) <- environment()
[10:50:58.572]         }
[10:50:58.572]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.572]         {
[10:50:58.572]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.572]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.572]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.572]                 on.exit(options(oopts), add = TRUE)
[10:50:58.572]             }
[10:50:58.572]             {
[10:50:58.572]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.572]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.572]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.572]                     envir = globalenv(), inherits = FALSE)
[10:50:58.572]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.572]                 })
[10:50:58.572]             }
[10:50:58.572]         }
[10:50:58.572]     }, args = future.call.arguments)
[10:50:58.572] }
[10:50:58.572] Lazy evaluation: FALSE
[10:50:58.572] Asynchronous evaluation: TRUE
[10:50:58.572] Local evaluation: TRUE
[10:50:58.572] Environment: R_GlobalEnv
[10:50:58.572] Capture standard output: TRUE
[10:50:58.572] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.572] Immediate condition classes: ‘immediateCondition’
[10:50:58.572] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.572] Packages: <none>
[10:50:58.572] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.572] Resolved: FALSE
[10:50:58.572] Value: <not collected>
[10:50:58.572] Conditions captured: <none>
[10:50:58.572] Early signaling: FALSE
[10:50:58.572] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.572] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.586] Chunk #2 of 2 ... DONE
[10:50:58.586] Launching 2 futures (chunks) ... DONE
[10:50:58.586] Resolving 2 futures (chunks) ...
[10:50:58.587] value() on list ...
[10:50:58.587] |  recursive: 0
[10:50:58.587] |  length: 2
[10:50:58.587] |  
[10:50:58.588] |  Number of remaining objects: 2
[10:50:58.588] |  checking value #1 ...
[10:50:58.588] |  :  'obj' is MulticoreFuture
[10:50:58.585] |  :  .  |  :  .  |  :  .  List of 2
[10:50:58.585] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.585] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.585] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.585] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.585] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.585] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.585] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.585] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.585] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.585] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.580] |  :  .  |  :  .  |  List of 1
[10:50:58.580] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.580] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.580] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.580] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.580] |  :  .  |  :  .  |      ...)  
[10:50:58.580] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.580] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.580] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.580] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.580] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.580] |  :  .  |  :  .  |      ...)  
[10:50:58.580] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.580] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.591] |  :  .  |  :  .  |  Not identical
[10:50:58.591] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.591] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:58.592] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:58.592] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:58.592] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.592] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:58.592] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.592] |  :  .  |  :  .  |  1. multicore:
[10:50:58.592] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.592] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.592] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:58.592] |  :  .  |  :  .  |  List of 1
[10:50:58.592] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.592] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.592] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.592] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.592] |  :  .  |  :  .  |      ...)  
[10:50:58.592] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.592] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.592] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.592] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.592] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.592] |  :  .  |  :  .  |      ...)  
[10:50:58.592] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.592] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.596] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.596] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.596] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.596] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.596] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.596] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:58.596] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.597] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.597] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.597] |  :  readImmediateCondition() ...
[10:50:58.597] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.597] |  :   - Number of RDS files: 0
[10:50:58.598] |  :  readImmediateCondition() ... DONE
[10:50:58.598] |  :  MulticoreFuture #1
[10:50:58.598] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:58.598] |  :  .  nx: 2
[10:50:58.598] |  :  .  relay: TRUE
[10:50:58.599] |  :  .  stdout: TRUE
[10:50:58.599] |  :  .  signal: TRUE
[10:50:58.599] |  :  .  resignal: FALSE
[10:50:58.599] |  :  .  force: TRUE
[10:50:58.599] |  :  .  relayed: [n=2] FALSE, FALSE
[10:50:58.591] |  :  .  |  :  .  |  :  List of 2
[10:50:58.591] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.591] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.591] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.591] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.591] |  :  .  |  :  .  |  :      ...)  
[10:50:58.591] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.591] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.591] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.591] |  :  .  |  :  .  |  :      ...)  
[10:50:58.591] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.600] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:50:58.600] |  :  .  until=1
[10:50:58.600] |  :  .  relaying element #1
[10:50:58.601] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.601] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.601] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.601] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.601] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.601] |  :  .  |  :  .  List of future strategies:
[10:50:58.601] |  :  .  |  :  .  1. sequential:
[10:50:58.601] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.601] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.601] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.602] |  :  .  result() for MulticoreFuture ...
[10:50:58.603] |  :  .  |  readImmediateCondition() ...
[10:50:58.604] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.604] |  :  .  |   - Number of RDS files: 0
[10:50:58.604] |  :  .  |  readImmediateCondition() ... DONE
[10:50:58.604] |  :  .  |  result() for MulticoreFuture ...
[10:50:58.605] |  :  .  |  result() for MulticoreFuture ... done
[10:50:58.605] |  :  .  result() for MulticoreFuture ... done
[10:50:58.605] |  :  .  result() for MulticoreFuture ...
[10:50:58.605] |  :  .  result() for MulticoreFuture ... done
[10:50:58.606] |  :  .  result() for MulticoreFuture ...
[10:50:58.606] |  :  .  result() for MulticoreFuture ... done
[10:50:58.606] |  :  .  result() for MulticoreFuture ...
[10:50:58.606] |  :  .  result() for MulticoreFuture ... done
[10:50:58.607] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.607] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.602] |  :  .  |  :  .  List of 1
[10:50:58.602] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.602] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.602] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.602] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.602] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.602] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.602] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.607] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:50:58.607] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.607] |  :  value(<MulticoreFuture>, ...) ...
[10:50:58.607] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.607] |  :  .  result() for MulticoreFuture ...
[10:50:58.607] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.608] |  :  .  result() for MulticoreFuture ... done
[10:50:58.608] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.608] |  :  .  result() for MulticoreFuture ...
[10:50:58.608] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.608] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.608] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.609] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.609] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.609] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.609] |  :  .  |  assign_globals() ...
[10:50:58.608] |  :  .  result() for MulticoreFuture ... done
[10:50:58.611] |  :  .  value: <list>
[10:50:58.612] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:58.612] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:58.612] |  :  .  nx: 2
[10:50:58.612] |  :  .  relay: TRUE
[10:50:58.613] |  :  .  stdout: TRUE
[10:50:58.613] |  :  .  signal: TRUE
[10:50:58.613] |  :  .  resignal: FALSE
[10:50:58.613] |  :  .  force: TRUE
[10:50:58.614] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.614] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.614] |  :  .  until=2
[10:50:58.614] |  :  .  relaying element #2
[10:50:58.615] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.615] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.615] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:50:58.615] |  :  length: 1 (resolved future 1)
[10:50:58.616] |  checking value #1 ... done
[10:50:58.616] |  checking value #2 ...
[10:50:58.616] |  :  'obj' is MulticoreFuture
[10:50:58.610] |  :  .  |  List of 5
[10:50:58.610] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.610] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.610] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.610] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:50:58.610] |  :  .  |    ..$ : int 0
[10:50:58.610] |  :  .  |    ..$ : int 0
[10:50:58.610] |  :  .  |    ..$ : int 0
[10:50:58.610] |  :  .  |   $ ...future.seeds_ii       :List of 3
[10:50:58.610] |  :  .  |    ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[10:50:58.610] |  :  .  |    ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[10:50:58.610] |  :  .  |    ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[10:50:58.610] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.610] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.610] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.610] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.610] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.610] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.610] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.610] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.610] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.610] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.610] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.620] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.620] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.620] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.620] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.620] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.620] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.620] |  :  .  |  assign_globals() ... done
[10:50:58.624] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.624] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.624] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.624] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.624] |  :  .  |  :  .  |  :  New stack:
[10:50:58.626] |  :  readImmediateCondition() ...
[10:50:58.626] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.627] |  :   - Number of RDS files: 0
[10:50:58.627] |  :  readImmediateCondition() ... DONE
[10:50:58.627] |  checking value #2 ... done
[10:50:58.625] |  :  .  |  :  .  |  :  List of 1
[10:50:58.625] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.625] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.625] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.625] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.625] |  :  .  |  :  .  |  :      ...)  
[10:50:58.625] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.625] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.625] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.625] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.625] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.625] |  :  .  |  :  .  |  :      ...)  
[10:50:58.625] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.625] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.628] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.628] |  :  .  |  :  .  |  :  List of 1
[10:50:58.628] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.628] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.628] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.628] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.628] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.628] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.628] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.631] |  :  .  |  :  .  |  :  Not identical
[10:50:58.631] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:58.631] |  :  .  |  :  .  |  :  .  List of 2
[10:50:58.631] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.631] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.631] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.631] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.631] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.631] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.631] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.631] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.631] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.631] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.635] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:58.636] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:58.636] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:58.636] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.636] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:58.636] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.636] |  :  .  |  :  .  |  1. multicore:
[10:50:58.636] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.636] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.636] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:58.638] |  Number of remaining objects: 1
[10:50:58.638] |  checking value #2 ...
[10:50:58.638] |  :  'obj' is MulticoreFuture
[10:50:58.636] |  :  .  |  :  .  |  List of 1
[10:50:58.636] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.636] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.636] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.636] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.636] |  :  .  |  :  .  |      ...)  
[10:50:58.636] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.636] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.636] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.636] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.636] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.636] |  :  .  |  :  .  |      ...)  
[10:50:58.636] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.636] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.640] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.640] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.640] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.640] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.640] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.640] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:58.640] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.640] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.641] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.641] |  :  readImmediateCondition() ...
[10:50:58.641] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.641] |  :   - Number of RDS files: 0
[10:50:58.641] |  :  readImmediateCondition() ... DONE
[10:50:58.641] |  :  MulticoreFuture #2
[10:50:58.641] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:58.642] |  :  .  nx: 2
[10:50:58.642] |  :  .  relay: TRUE
[10:50:58.642] |  :  .  stdout: TRUE
[10:50:58.642] |  :  .  signal: TRUE
[10:50:58.642] |  :  .  resignal: FALSE
[10:50:58.642] |  :  .  force: TRUE
[10:50:58.642] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.642] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.643] |  :  .  until=2
[10:50:58.643] |  :  .  relaying element #2
[10:50:58.643] |  :  .  result() for MulticoreFuture ...
[10:50:58.643] |  :  .  |  readImmediateCondition() ...
[10:50:58.643] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.644] |  :  .  |   - Number of RDS files: 0
[10:50:58.644] |  :  .  |  readImmediateCondition() ... DONE
[10:50:58.644] |  :  .  |  result() for MulticoreFuture ...
[10:50:58.644] |  :  .  |  result() for MulticoreFuture ... done
[10:50:58.644] |  :  .  result() for MulticoreFuture ... done
[10:50:58.645] |  :  .  result() for MulticoreFuture ...
[10:50:58.645] |  :  .  result() for MulticoreFuture ... done
[10:50:58.645] |  :  .  result() for MulticoreFuture ...
[10:50:58.645] |  :  .  result() for MulticoreFuture ... done
[10:50:58.645] |  :  .  result() for MulticoreFuture ...
[10:50:58.646] |  :  .  result() for MulticoreFuture ... done
[10:50:58.646] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.646] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.646] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:58.646] |  :  value(<MulticoreFuture>, ...) ...
[10:50:58.646] |  :  .  result() for MulticoreFuture ...
[10:50:58.647] |  :  .  result() for MulticoreFuture ... done
[10:50:58.647] |  :  .  result() for MulticoreFuture ...
[10:50:58.647] |  :  .  result() for MulticoreFuture ... done
[10:50:58.647] |  :  .  value: <list>
[10:50:58.647] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:58.647] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:58.648] |  :  .  nx: 2
[10:50:58.648] |  :  .  relay: TRUE
[10:50:58.648] |  :  .  stdout: TRUE
[10:50:58.648] |  :  .  signal: TRUE
[10:50:58.648] |  :  .  resignal: FALSE
[10:50:58.648] |  :  .  force: TRUE
[10:50:58.648] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.648] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.649] |  :  .  until=2
[10:50:58.649] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.649] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.649] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:58.649] |  :  length: 0 (resolved future 2)
[10:50:58.649] |  checking value #2 ... done
[10:50:58.649] |  Relaying remaining futures ...
[10:50:58.649] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.649] |  :  .  nx: 2
[10:50:58.650] |  :  .  relay: TRUE
[10:50:58.650] |  :  .  stdout: TRUE
[10:50:58.650] |  :  .  signal: TRUE
[10:50:58.650] |  :  .  resignal: FALSE
[10:50:58.650] |  :  .  force: TRUE
[10:50:58.650] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.650] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:50:58.650] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.650] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.651] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.651] |  Relaying remaining futures ... done
[10:50:58.651] value() on list ... done
[10:50:58.651]  - Number of value chunks collected: 2
[10:50:58.651] Resolving 2 futures (chunks) ... DONE
[10:50:58.651] Reducing values from 2 chunks ...
[10:50:58.651]  - Number of values collected after concatenation: 5
[10:50:58.651]  - Number of values expected: 5
[10:50:58.651] Reducing values from 2 chunks ... DONE
[10:50:58.652] future_lapply() ... DONE
[10:50:58.652] future_lapply() ...
[10:50:58.652] Generating random seeds ...
[10:50:58.653] Generating random seed streams for 5 elements ...
[10:50:58.653] Generating random seed streams for 5 elements ... DONE
[10:50:58.653] Generating random seeds ... DONE
[10:50:58.653] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.654] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.654] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.654] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.654] Number of chunks: 2
[10:50:58.655] getGlobalsAndPackagesXApply() ...
[10:50:58.655]  - future.globals: TRUE
[10:50:58.655] getGlobalsAndPackages() ...
[10:50:58.655] |  Searching for globals ...
[10:50:58.656] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.656] |  Searching for globals ... DONE
[10:50:58.656] |  Resolving globals: FALSE
[10:50:58.657] |  Search for packages associated with the globals ...
[10:50:58.657] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.657] |  :  Packages: [1] ‘base’
[10:50:58.657] |  Search for packages associated with the globals ... DONE
[10:50:58.657] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.658] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.658] |  Packages after dropping 'base': [0] 
[10:50:58.658] |  globals: [1] ‘FUN’
[10:50:58.658] |  packages: [0] 
[10:50:58.658] getGlobalsAndPackages() ... done
[10:50:58.658]  - globals found/used: [n=1] ‘FUN’
[10:50:58.658]  - needed namespaces: [n=0] 
[10:50:58.658] Finding globals ... DONE
[10:50:58.658]  - use_args: TRUE
[10:50:58.659]  - Getting '...' globals ...
[10:50:58.659] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.659] |  recursive: 0
[10:50:58.659] |  length: 1
[10:50:58.659] |  elements: ‘...’
[10:50:58.659] |  'obj' is DotDotDotList
[10:50:58.659] |  resolve(obj, ...) ...
[10:50:58.660] |  resolve(obj, ...) ... done
[10:50:58.660] |  length: 0 (resolved future 1)
[10:50:58.660] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.660]    - '...' content: [n=0] 
[10:50:58.660] List of 1
[10:50:58.660]  $ ...: list()
[10:50:58.660]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.660]  - attr(*, "where")=List of 1
[10:50:58.660]   ..$ ...:<environment: 0x564ad435f048> 
[10:50:58.660]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.660]  - attr(*, "resolved")= logi TRUE
[10:50:58.660]  - attr(*, "total_size")= num NA
[10:50:58.664]  - Getting '...' globals ... DONE
[10:50:58.664] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.665] List of 2
[10:50:58.665]  $ ...future.FUN:function (...)  
[10:50:58.665]  $ ...          : list()
[10:50:58.665]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.665]  - attr(*, "where")=List of 2
[10:50:58.665]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.665]   ..$ ...          :<environment: 0x564ad435f048> 
[10:50:58.665]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.665]  - attr(*, "resolved")= logi FALSE
[10:50:58.665]  - attr(*, "total_size")= num 7184
[10:50:58.668] Packages to be attached in all futures: [n=0] 
[10:50:58.668] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.668] Number of futures (= number of chunks): 2
[10:50:58.668] Launching 2 futures (chunks) ...
[10:50:58.668] Chunk #1 of 2 ...
[10:50:58.668]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.668] getGlobalsAndPackages() ...
[10:50:58.668] |  Searching for globals ...
[10:50:58.669] |  :  globals found: [0] 
[10:50:58.669] |  Searching for globals ... DONE
[10:50:58.669] |  globals: [0] <none>
[10:50:58.669] |  packages: [0] <none>
[10:50:58.669] getGlobalsAndPackages() ... done
[10:50:58.669]    + additional globals found: [n=0] 
[10:50:58.669]    + additional namespaces needed: [n=0] 
[10:50:58.669]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.669]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.669]  - seeds: [2] <seeds>
[10:50:58.670]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.670] getGlobalsAndPackages() ...
[10:50:58.670] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.670] |  Resolving globals: FALSE
[10:50:58.670] |  Tweak future expression to call with '...' arguments ...
[10:50:58.670] |  :  {
[10:50:58.670] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.670] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.670] |  :      "# as a global variable                                         "
[10:50:58.670] |  :      do.call(function(...) {
[10:50:58.670] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.670] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.670] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.670] |  :          "# anonymous function.                                          "
[10:50:58.670] |  :          "#                                                              "
[10:50:58.670] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.670] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.670] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.670] |  :          "# global environment, which is where globals are written.      "
[10:50:58.670] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.670] |  :          repeat {
[10:50:58.670] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.670] |  :                  emptyenv())) 
[10:50:58.670] |  :                  break
[10:50:58.670] |  :              penv <- env
[10:50:58.670] |  :              env <- parent.env(env)
[10:50:58.670] |  :          }
[10:50:58.670] |  :          if (identical(penv, globalenv())) {
[10:50:58.670] |  :              environment(...future.FUN) <- environment()
[10:50:58.670] |  :          }
[10:50:58.670] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.670] |  :              !isNamespace(penv)) {
[10:50:58.670] |  :              parent.env(penv) <- environment()
[10:50:58.670] |  :          }
[10:50:58.670] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.670] |  :          {
[10:50:58.670] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.670] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.670] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.670] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.670] |  :              }
[10:50:58.670] |  :              {
[10:50:58.670] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.670] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.670] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.670] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.670] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.670] |  :                  })
[10:50:58.670] |  :              }
[10:50:58.670] |  :          }
[10:50:58.670] |  :      }, args = future.call.arguments)
[10:50:58.670] |  :  }
[10:50:58.671] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.671] |  Search for packages associated with the globals ...
[10:50:58.671] |  :  Packages associated with globals: [0] 
[10:50:58.671] |  :  Packages: [0] 
[10:50:58.671] |  Search for packages associated with the globals ... DONE
[10:50:58.671] |  Packages after dropping 'base': [0] 
[10:50:58.672] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.672] |  packages: [0] 
[10:50:58.672] getGlobalsAndPackages() ... done
[10:50:58.672] run() for Future (‘Future’) ...
[10:50:58.672] |  state: ‘created’
[10:50:58.672] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.672] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.672] |  Using MulticoreFutureBackend ...
[10:50:58.673] |  :  Launching futures ...
[10:50:58.673] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.673] |  :  .  |  getFutureData() ...
[10:50:58.673] |  :  .  |  :  getFutureCore() ...
[10:50:58.673] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.673] |  :  .  |  :  getFutureCore() ... done
[10:50:58.673] |  :  .  |  :  getFutureCapture() ...
[10:50:58.673] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.673] |  :  .  |  :  getFutureContext() ...
[10:50:58.673] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.674] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.674] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.674] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.674] |  :  .  |  :  getFutureContext() ... done
[10:50:58.674] |  :  .  |  getFutureData() ... done
[10:50:58.674] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.674] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.676] |  :  .  |  MulticoreFuture started
[10:50:58.677] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.677] |  :  Launching futures ... done
[10:50:58.677] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.677] |  :  .  |  attachPackages() ...
[10:50:58.677] |  Using MulticoreFutureBackend ... done
[10:50:58.677] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.677] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.678] Created future:
[10:50:58.678] |  :  .  |  attachPackages() ... DONE
[10:50:58.678] |  :  .  |  attachPackages() ...
[10:50:58.678] |  :  .  |  :  packages: [n=0] 
[10:50:58.678] |  :  .  |  attachPackages() ... DONE
[10:50:58.679] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.679] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.680] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.680] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.681] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.681] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.681] |  :  .  |  :  .  |  New stack:
[10:50:58.681] |  :  .  |  :  .  |  List of 1
[10:50:58.681] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.681] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.681] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.681] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.681] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.681] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.681] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.685] |  :  .  |  :  .  |  Old stack:
[10:50:58.690] readImmediateCondition() ...
[10:50:58.690]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.685] |  :  .  |  :  .  |  List of 1
[10:50:58.685] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.685] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.685] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.685] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.685] |  :  .  |  :  .  |      ...)  
[10:50:58.685] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.685] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.685] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.685] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.685] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.685] |  :  .  |  :  .  |      ...)  
[10:50:58.685] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.685] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.690] |  :  .  |  :  .  |  Not identical
[10:50:58.690]  - Number of RDS files: 0
[10:50:58.690] readImmediateCondition() ... DONE
[10:50:58.690] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.678] MulticoreFuture:
[10:50:58.678] Label: ‘future_replicate-1’
[10:50:58.678] Expression:
[10:50:58.678] {
[10:50:58.678]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.678]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.678]     "# as a global variable                                         "
[10:50:58.678]     do.call(function(...) {
[10:50:58.678]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.678]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.678]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.678]         "# anonymous function.                                          "
[10:50:58.678]         "#                                                              "
[10:50:58.678]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.678]         "# function environment of FUN() to the calling environment.    "
[10:50:58.678]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.678]         "# global environment, which is where globals are written.      "
[10:50:58.678]         penv <- env <- environment(...future.FUN)
[10:50:58.678]         repeat {
[10:50:58.678]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.678]                 emptyenv())) 
[10:50:58.678]                 break
[10:50:58.678]             penv <- env
[10:50:58.678]             env <- parent.env(env)
[10:50:58.678]         }
[10:50:58.678]         if (identical(penv, globalenv())) {
[10:50:58.678]             environment(...future.FUN) <- environment()
[10:50:58.678]         }
[10:50:58.678]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.678]             !isNamespace(penv)) {
[10:50:58.678]             parent.env(penv) <- environment()
[10:50:58.678]         }
[10:50:58.678]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.678]         {
[10:50:58.678]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.678]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.678]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.678]                 on.exit(options(oopts), add = TRUE)
[10:50:58.678]             }
[10:50:58.678]             {
[10:50:58.678]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.678]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.678]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.678]                     envir = globalenv(), inherits = FALSE)
[10:50:58.678]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.678]                 })
[10:50:58.678]             }
[10:50:58.678]         }
[10:50:58.678]     }, args = future.call.arguments)
[10:50:58.678] }
[10:50:58.678] Lazy evaluation: FALSE
[10:50:58.678] Asynchronous evaluation: TRUE
[10:50:58.678] Local evaluation: TRUE
[10:50:58.678] Environment: R_GlobalEnv
[10:50:58.678] Capture standard output: TRUE
[10:50:58.678] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.678] Immediate condition classes: ‘immediateCondition’
[10:50:58.678] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.678] Packages: <none>
[10:50:58.678] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.678] Resolved: FALSE
[10:50:58.678] Value: <not collected>
[10:50:58.678] Conditions captured: <none>
[10:50:58.678] Early signaling: FALSE
[10:50:58.678] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.678] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.691] Chunk #1 of 2 ... DONE
[10:50:58.691] Chunk #2 of 2 ...
[10:50:58.691]  - Finding globals in 'X' for chunk #2 ...
[10:50:58.692] getGlobalsAndPackages() ...
[10:50:58.692] |  Searching for globals ...
[10:50:58.692] |  :  globals found: [0] 
[10:50:58.692] |  Searching for globals ... DONE
[10:50:58.693] |  globals: [0] <none>
[10:50:58.693] |  packages: [0] <none>
[10:50:58.693] getGlobalsAndPackages() ... done
[10:50:58.693]    + additional globals found: [n=0] 
[10:50:58.693]    + additional namespaces needed: [n=0] 
[10:50:58.693]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:58.693]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.693]  - seeds: [3] <seeds>
[10:50:58.694]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.694] getGlobalsAndPackages() ...
[10:50:58.694] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.694] |  Resolving globals: FALSE
[10:50:58.694] |  Tweak future expression to call with '...' arguments ...
[10:50:58.694] |  :  {
[10:50:58.694] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.694] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.694] |  :      "# as a global variable                                         "
[10:50:58.694] |  :      do.call(function(...) {
[10:50:58.694] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.694] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.694] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.694] |  :          "# anonymous function.                                          "
[10:50:58.694] |  :          "#                                                              "
[10:50:58.694] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.694] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.694] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.694] |  :          "# global environment, which is where globals are written.      "
[10:50:58.694] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.694] |  :          repeat {
[10:50:58.694] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.694] |  :                  emptyenv())) 
[10:50:58.694] |  :                  break
[10:50:58.694] |  :              penv <- env
[10:50:58.694] |  :              env <- parent.env(env)
[10:50:58.694] |  :          }
[10:50:58.694] |  :          if (identical(penv, globalenv())) {
[10:50:58.694] |  :              environment(...future.FUN) <- environment()
[10:50:58.694] |  :          }
[10:50:58.694] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.694] |  :              !isNamespace(penv)) {
[10:50:58.694] |  :              parent.env(penv) <- environment()
[10:50:58.694] |  :          }
[10:50:58.694] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.694] |  :          {
[10:50:58.694] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.694] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.694] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.694] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.694] |  :              }
[10:50:58.694] |  :              {
[10:50:58.694] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.694] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.694] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.694] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.694] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.694] |  :                  })
[10:50:58.694] |  :              }
[10:50:58.694] |  :          }
[10:50:58.694] |  :      }, args = future.call.arguments)
[10:50:58.694] |  :  }
[10:50:58.695] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.695] |  Search for packages associated with the globals ...
[10:50:58.695] |  :  Packages associated with globals: [0] 
[10:50:58.696] |  :  Packages: [0] 
[10:50:58.696] |  Search for packages associated with the globals ... DONE
[10:50:58.696] |  Packages after dropping 'base': [0] 
[10:50:58.696] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.696] |  packages: [0] 
[10:50:58.697] getGlobalsAndPackages() ... done
[10:50:58.697] run() for Future (‘Future’) ...
[10:50:58.697] |  state: ‘created’
[10:50:58.697] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.697] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.698] |  Using MulticoreFutureBackend ...
[10:50:58.698] |  :  Launching futures ...
[10:50:58.698] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.698] |  :  .  |  getFutureData() ...
[10:50:58.698] |  :  .  |  :  getFutureCore() ...
[10:50:58.698] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.698] |  :  .  |  :  getFutureCore() ... done
[10:50:58.698] |  :  .  |  :  getFutureCapture() ...
[10:50:58.699] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.699] |  :  .  |  :  getFutureContext() ...
[10:50:58.699] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.699] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.699] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.699] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.700] |  :  .  |  :  getFutureContext() ... done
[10:50:58.700] |  :  .  |  getFutureData() ... done
[10:50:58.700] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.700] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.691] |  :  .  |  :  .  |  :  List of 2
[10:50:58.691] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.691] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.691] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.691] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.691] |  :  .  |  :  .  |  :      ...)  
[10:50:58.691] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.691] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.691] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.691] |  :  .  |  :  .  |  :      ...)  
[10:50:58.691] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.702] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.702] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.702] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.702] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.703] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.702] |  :  .  |  MulticoreFuture started
[10:50:58.703] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.703] |  :  .  |  :  .  List of future strategies:
[10:50:58.703] |  :  .  |  :  .  1. sequential:
[10:50:58.703] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.703] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.703] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.703] |  :  Launching futures ... done
[10:50:58.703] |  :  .  |  attachPackages() ...
[10:50:58.703] |  :  .  |  :  .  List of 1
[10:50:58.703] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.703] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.703] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.703] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.703] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.703] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.703] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.706] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.707] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.707] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.707] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.707] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.707] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.704] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.708] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.703] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.708] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.708] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.708] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.708] |  :  .  |  assign_globals() ...
[10:50:58.708] |  Using MulticoreFutureBackend ... done
[10:50:58.708] |  :  .  |  attachPackages() ... DONE
[10:50:58.708] |  :  .  |  attachPackages() ...
[10:50:58.708] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.709] |  :  .  |  :  packages: [n=0] 
[10:50:58.709] Created future:
[10:50:58.709] |  :  .  |  attachPackages() ... DONE
[10:50:58.711] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.711] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.712] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.713] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.714] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.714] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.714] |  :  .  |  :  .  |  New stack:
[10:50:58.708] |  :  .  |  List of 5
[10:50:58.708] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.708] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.708] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.708] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:50:58.708] |  :  .  |    ..$ : int 0
[10:50:58.708] |  :  .  |    ..$ : int 0
[10:50:58.708] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:50:58.708] |  :  .  |    ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:50:58.708] |  :  .  |    ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:50:58.708] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.708] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.708] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.708] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.708] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.708] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.708] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.708] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.708] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.708] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.708] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.715] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.715] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.715] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.715] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.716] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.716] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.716] |  :  .  |  assign_globals() ... done
[10:50:58.718] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.718] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.718] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.719] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.719] |  :  .  |  :  .  |  :  New stack:
[10:50:58.715] |  :  .  |  :  .  |  List of 1
[10:50:58.715] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.715] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.715] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.715] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.715] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.715] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.715] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.719] |  :  .  |  :  .  |  Old stack:
[10:50:58.723] readImmediateCondition() ...
[10:50:58.723]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.723]  - Number of RDS files: 0
[10:50:58.719] |  :  .  |  :  .  |  :  List of 1
[10:50:58.719] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.719] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.719] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.719] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.719] |  :  .  |  :  .  |  :      ...)  
[10:50:58.719] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.719] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.719] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.719] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.719] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.719] |  :  .  |  :  .  |  :      ...)  
[10:50:58.719] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.719] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.724] readImmediateCondition() ... DONE
[10:50:58.724] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.719] |  :  .  |  :  .  |  List of 1
[10:50:58.719] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.719] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.719] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.719] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.719] |  :  .  |  :  .  |      ...)  
[10:50:58.719] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.719] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.719] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.719] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.719] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.719] |  :  .  |  :  .  |      ...)  
[10:50:58.719] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.719] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.709] MulticoreFuture:
[10:50:58.709] Label: ‘future_replicate-2’
[10:50:58.709] Expression:
[10:50:58.709] {
[10:50:58.709]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.709]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.709]     "# as a global variable                                         "
[10:50:58.709]     do.call(function(...) {
[10:50:58.709]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.709]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.709]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.709]         "# anonymous function.                                          "
[10:50:58.709]         "#                                                              "
[10:50:58.709]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.709]         "# function environment of FUN() to the calling environment.    "
[10:50:58.709]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.709]         "# global environment, which is where globals are written.      "
[10:50:58.709]         penv <- env <- environment(...future.FUN)
[10:50:58.709]         repeat {
[10:50:58.709]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.709]                 emptyenv())) 
[10:50:58.709]                 break
[10:50:58.709]             penv <- env
[10:50:58.709]             env <- parent.env(env)
[10:50:58.709]         }
[10:50:58.709]         if (identical(penv, globalenv())) {
[10:50:58.709]             environment(...future.FUN) <- environment()
[10:50:58.709]         }
[10:50:58.709]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.709]             !isNamespace(penv)) {
[10:50:58.709]             parent.env(penv) <- environment()
[10:50:58.709]         }
[10:50:58.709]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.709]         {
[10:50:58.709]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.709]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.709]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.709]                 on.exit(options(oopts), add = TRUE)
[10:50:58.709]             }
[10:50:58.709]             {
[10:50:58.709]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.709]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.709]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.709]                     envir = globalenv(), inherits = FALSE)
[10:50:58.709]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.709]                 })
[10:50:58.709]             }
[10:50:58.709]         }
[10:50:58.709]     }, args = future.call.arguments)
[10:50:58.709] }
[10:50:58.709] Lazy evaluation: FALSE
[10:50:58.709] Asynchronous evaluation: TRUE
[10:50:58.709] Local evaluation: TRUE
[10:50:58.709] Environment: R_GlobalEnv
[10:50:58.709] Capture standard output: TRUE
[10:50:58.709] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.709] Immediate condition classes: ‘immediateCondition’
[10:50:58.709] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.709] Packages: <none>
[10:50:58.709] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.709] Resolved: FALSE
[10:50:58.709] Value: <not collected>
[10:50:58.709] Conditions captured: <none>
[10:50:58.709] Early signaling: FALSE
[10:50:58.709] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.709] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.725] |  :  .  |  :  .  |  Not identical
[10:50:58.725] Chunk #2 of 2 ... DONE
[10:50:58.725] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.725] Launching 2 futures (chunks) ... DONE
[10:50:58.725] Resolving 2 futures (chunks) ...
[10:50:58.726] value() on list ...
[10:50:58.726] |  recursive: 0
[10:50:58.724] |  :  .  |  :  .  |  :  List of 1
[10:50:58.724] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.724] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.724] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.724] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.724] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.724] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.724] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.726] |  length: 2
[10:50:58.726] |  :  .  |  :  .  |  :  Not identical
[10:50:58.726] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:58.726] |  
[10:50:58.727] |  Number of remaining objects: 2
[10:50:58.727] |  checking value #1 ...
[10:50:58.727] |  :  'obj' is MulticoreFuture
[10:50:58.727] |  :  .  |  :  .  |  :  .  List of 2
[10:50:58.727] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.727] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.727] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.727] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.727] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.727] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.727] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.727] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.727] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.727] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.731] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:58.732] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:58.732] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:58.725] |  :  .  |  :  .  |  :  List of 2
[10:50:58.725] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.725] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.725] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.725] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.725] |  :  .  |  :  .  |  :      ...)  
[10:50:58.725] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.725] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.725] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.725] |  :  .  |  :  .  |  :      ...)  
[10:50:58.725] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.732] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.732] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:58.732] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.732] |  :  .  |  :  .  |  1. multicore:
[10:50:58.732] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.732] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.732] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:58.732] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.732] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.733] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.733] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.733] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.733] |  :  .  |  :  .  List of future strategies:
[10:50:58.733] |  :  .  |  :  .  1. sequential:
[10:50:58.733] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.733] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.733] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.732] |  :  .  |  :  .  |  List of 1
[10:50:58.732] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.732] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.732] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.732] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.732] |  :  .  |  :  .  |      ...)  
[10:50:58.732] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.732] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.732] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.732] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.732] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.732] |  :  .  |  :  .  |      ...)  
[10:50:58.732] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.732] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.735] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.735] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.736] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.736] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.736] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.736] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:58.736] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.736] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.734] |  :  .  |  :  .  List of 1
[10:50:58.734] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.734] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.734] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.734] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.734] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.734] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.734] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.736] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.736] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.737] |  :  readImmediateCondition() ...
[10:50:58.737] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.737] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.737] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.737] |  :   - Number of RDS files: 0
[10:50:58.737] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.737] |  :  readImmediateCondition() ... DONE
[10:50:58.737] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.738] |  :  MulticoreFuture #1
[10:50:58.738] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.738] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:58.738] |  :  .  nx: 2
[10:50:58.738] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.738] |  :  .  relay: TRUE
[10:50:58.738] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.738] |  :  .  stdout: TRUE
[10:50:58.738] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.738] |  :  .  signal: TRUE
[10:50:58.739] |  :  .  resignal: FALSE
[10:50:58.739] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.739] |  :  .  force: TRUE
[10:50:58.739] |  :  .  |  assign_globals() ...
[10:50:58.739] |  :  .  relayed: [n=2] FALSE, FALSE
[10:50:58.739] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:50:58.739] |  :  .  until=1
[10:50:58.740] |  :  .  relaying element #1
[10:50:58.740] |  :  .  result() for MulticoreFuture ...
[10:50:58.741] |  :  .  |  readImmediateCondition() ...
[10:50:58.741] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.741] |  :  .  |   - Number of RDS files: 0
[10:50:58.741] |  :  .  |  readImmediateCondition() ... DONE
[10:50:58.742] |  :  .  |  result() for MulticoreFuture ...
[10:50:58.742] |  :  .  |  result() for MulticoreFuture ... done
[10:50:58.742] |  :  .  result() for MulticoreFuture ... done
[10:50:58.742] |  :  .  result() for MulticoreFuture ...
[10:50:58.743] |  :  .  result() for MulticoreFuture ... done
[10:50:58.743] |  :  .  result() for MulticoreFuture ...
[10:50:58.743] |  :  .  result() for MulticoreFuture ... done
[10:50:58.743] |  :  .  result() for MulticoreFuture ...
[10:50:58.743] |  :  .  result() for MulticoreFuture ... done
[10:50:58.744] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.744] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.744] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:50:58.744] |  :  value(<MulticoreFuture>, ...) ...
[10:50:58.744] |  :  .  result() for MulticoreFuture ...
[10:50:58.745] |  :  .  result() for MulticoreFuture ... done
[10:50:58.745] |  :  .  result() for MulticoreFuture ...
[10:50:58.745] |  :  .  result() for MulticoreFuture ... done
[10:50:58.745] |  :  .  value: <list>
[10:50:58.745] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:58.746] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:58.746] |  :  .  nx: 2
[10:50:58.746] |  :  .  relay: TRUE
[10:50:58.746] |  :  .  stdout: TRUE
[10:50:58.746] |  :  .  signal: TRUE
[10:50:58.746] |  :  .  resignal: FALSE
[10:50:58.747] |  :  .  force: TRUE
[10:50:58.747] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.747] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.747] |  :  .  until=2
[10:50:58.747] |  :  .  relaying element #2
[10:50:58.748] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.748] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.748] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:50:58.748] |  :  length: 1 (resolved future 1)
[10:50:58.748] |  checking value #1 ... done
[10:50:58.749] |  checking value #2 ...
[10:50:58.749] |  :  'obj' is MulticoreFuture
[10:50:58.739] |  :  .  |  List of 5
[10:50:58.739] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.739] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.739] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.739] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:50:58.739] |  :  .  |    ..$ : int 0
[10:50:58.739] |  :  .  |    ..$ : int 0
[10:50:58.739] |  :  .  |    ..$ : int 0
[10:50:58.739] |  :  .  |   $ ...future.seeds_ii       :List of 3
[10:50:58.739] |  :  .  |    ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:50:58.739] |  :  .  |    ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:50:58.739] |  :  .  |    ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:50:58.739] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.739] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.739] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.739] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.739] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.739] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.739] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.739] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.739] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.739] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.739] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.751] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.752] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.752] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.752] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.752] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.752] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.752] |  :  .  |  assign_globals() ... done
[10:50:58.754] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.755] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.755] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.755] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.755] |  :  .  |  :  .  |  :  New stack:
[10:50:58.755] |  :  .  |  :  .  |  :  List of 1
[10:50:58.755] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.755] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.755] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.755] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.755] |  :  .  |  :  .  |  :      ...)  
[10:50:58.755] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.755] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.755] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.755] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.755] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.755] |  :  .  |  :  .  |  :      ...)  
[10:50:58.755] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.755] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.758] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.759] |  :  readImmediateCondition() ...
[10:50:58.759] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.759] |  :   - Number of RDS files: 0
[10:50:58.760] |  :  readImmediateCondition() ... DONE
[10:50:58.760] |  checking value #2 ... done
[10:50:58.758] |  :  .  |  :  .  |  :  List of 1
[10:50:58.758] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.758] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.758] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.758] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.758] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.758] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.758] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.761] |  :  .  |  :  .  |  :  Not identical
[10:50:58.761] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:58.761] |  :  .  |  :  .  |  :  .  List of 2
[10:50:58.761] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.761] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.761] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.761] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.761] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.761] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.761] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.761] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.761] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.761] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.767] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:58.767] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:58.768] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:58.768] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.768] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:58.768] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.768] |  :  .  |  :  .  |  1. multicore:
[10:50:58.768] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.768] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.768] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:58.770] |  Number of remaining objects: 1
[10:50:58.770] |  checking value #2 ...
[10:50:58.771] |  :  'obj' is MulticoreFuture
[10:50:58.768] |  :  .  |  :  .  |  List of 1
[10:50:58.768] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.768] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.768] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.768] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.768] |  :  .  |  :  .  |      ...)  
[10:50:58.768] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.768] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.768] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.768] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.768] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.768] |  :  .  |  :  .  |      ...)  
[10:50:58.768] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.768] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.772] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.772] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.772] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.772] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.772] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.772] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:58.772] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.773] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.773] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.773] |  :  readImmediateCondition() ...
[10:50:58.773] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.773] |  :   - Number of RDS files: 0
[10:50:58.773] |  :  readImmediateCondition() ... DONE
[10:50:58.773] |  :  MulticoreFuture #2
[10:50:58.774] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:58.774] |  :  .  nx: 2
[10:50:58.774] |  :  .  relay: TRUE
[10:50:58.774] |  :  .  stdout: TRUE
[10:50:58.774] |  :  .  signal: TRUE
[10:50:58.774] |  :  .  resignal: FALSE
[10:50:58.774] |  :  .  force: TRUE
[10:50:58.774] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.774] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.775] |  :  .  until=2
[10:50:58.775] |  :  .  relaying element #2
[10:50:58.775] |  :  .  result() for MulticoreFuture ...
[10:50:58.775] |  :  .  |  readImmediateCondition() ...
[10:50:58.775] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.776] |  :  .  |   - Number of RDS files: 0
[10:50:58.776] |  :  .  |  readImmediateCondition() ... DONE
[10:50:58.776] |  :  .  |  result() for MulticoreFuture ...
[10:50:58.776] |  :  .  |  result() for MulticoreFuture ... done
[10:50:58.776] |  :  .  result() for MulticoreFuture ... done
[10:50:58.777] |  :  .  result() for MulticoreFuture ...
[10:50:58.777] |  :  .  result() for MulticoreFuture ... done
[10:50:58.777] |  :  .  result() for MulticoreFuture ...
[10:50:58.777] |  :  .  result() for MulticoreFuture ... done
[10:50:58.777] |  :  .  result() for MulticoreFuture ...
[10:50:58.778] |  :  .  result() for MulticoreFuture ... done
[10:50:58.778] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.778] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.778] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:58.778] |  :  value(<MulticoreFuture>, ...) ...
[10:50:58.778] |  :  .  result() for MulticoreFuture ...
[10:50:58.779] |  :  .  result() for MulticoreFuture ... done
[10:50:58.779] |  :  .  result() for MulticoreFuture ...
[10:50:58.779] |  :  .  result() for MulticoreFuture ... done
[10:50:58.779] |  :  .  value: <list>
[10:50:58.779] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:58.779] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:58.780] |  :  .  nx: 2
[10:50:58.780] |  :  .  relay: TRUE
[10:50:58.780] |  :  .  stdout: TRUE
[10:50:58.780] |  :  .  signal: TRUE
[10:50:58.780] |  :  .  resignal: FALSE
[10:50:58.780] |  :  .  force: TRUE
[10:50:58.780] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.780] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.781] |  :  .  until=2
[10:50:58.781] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.781] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.781] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:58.781] |  :  length: 0 (resolved future 2)
[10:50:58.781] |  checking value #2 ... done
[10:50:58.781] |  Relaying remaining futures ...
[10:50:58.781] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.782] |  :  .  nx: 2
[10:50:58.782] |  :  .  relay: TRUE
[10:50:58.782] |  :  .  stdout: TRUE
[10:50:58.782] |  :  .  signal: TRUE
[10:50:58.782] |  :  .  resignal: FALSE
[10:50:58.782] |  :  .  force: TRUE
[10:50:58.782] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.782] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:50:58.782] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.782] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.783] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.783] |  Relaying remaining futures ... done
[10:50:58.783] value() on list ... done
[10:50:58.783]  - Number of value chunks collected: 2
[10:50:58.783] Resolving 2 futures (chunks) ... DONE
[10:50:58.783] Reducing values from 2 chunks ...
[10:50:58.783]  - Number of values collected after concatenation: 5
[10:50:58.783]  - Number of values expected: 5
[10:50:58.783] Reducing values from 2 chunks ... DONE
[10:50:58.784] future_lapply() ... DONE
[10:50:58.784] future_lapply() ...
[10:50:58.784] Generating random seeds ...
[10:50:58.785] Generating random seed streams for 5 elements ...
[10:50:58.785] Generating random seed streams for 5 elements ... DONE
[10:50:58.785] Generating random seeds ... DONE
[10:50:58.785] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.786] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.786] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.786] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.786] Number of chunks: 2
[10:50:58.787] getGlobalsAndPackagesXApply() ...
[10:50:58.788]  - future.globals: TRUE
[10:50:58.788] getGlobalsAndPackages() ...
[10:50:58.788] |  Searching for globals ...
[10:50:58.790] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.790] |  Searching for globals ... DONE
[10:50:58.790] |  Resolving globals: FALSE
[10:50:58.790] |  Search for packages associated with the globals ...
[10:50:58.790] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.791] |  :  Packages: [1] ‘base’
[10:50:58.791] |  Search for packages associated with the globals ... DONE
[10:50:58.791] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.791] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.791] |  Packages after dropping 'base': [0] 
[10:50:58.791] |  globals: [1] ‘FUN’
[10:50:58.792] |  packages: [0] 
[10:50:58.792] getGlobalsAndPackages() ... done
[10:50:58.792]  - globals found/used: [n=1] ‘FUN’
[10:50:58.792]  - needed namespaces: [n=0] 
[10:50:58.792] Finding globals ... DONE
[10:50:58.792]  - use_args: TRUE
[10:50:58.792]  - Getting '...' globals ...
[10:50:58.793] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.793] |  recursive: 0
[10:50:58.793] |  length: 1
[10:50:58.793] |  elements: ‘...’
[10:50:58.793] |  'obj' is DotDotDotList
[10:50:58.793] |  resolve(obj, ...) ...
[10:50:58.793] |  resolve(obj, ...) ... done
[10:50:58.793] |  length: 0 (resolved future 1)
[10:50:58.793] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.794]    - '...' content: [n=0] 
[10:50:58.794] List of 1
[10:50:58.794]  $ ...: list()
[10:50:58.794]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.794]  - attr(*, "where")=List of 1
[10:50:58.794]   ..$ ...:<environment: 0x564ad4cd9130> 
[10:50:58.794]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.794]  - attr(*, "resolved")= logi TRUE
[10:50:58.794]  - attr(*, "total_size")= num NA
[10:50:58.796]  - Getting '...' globals ... DONE
[10:50:58.796] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.797] List of 2
[10:50:58.797]  $ ...future.FUN:function (...)  
[10:50:58.797]  $ ...          : list()
[10:50:58.797]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.797]  - attr(*, "where")=List of 2
[10:50:58.797]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.797]   ..$ ...          :<environment: 0x564ad4cd9130> 
[10:50:58.797]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.797]  - attr(*, "resolved")= logi FALSE
[10:50:58.797]  - attr(*, "total_size")= num 7184
[10:50:58.799] Packages to be attached in all futures: [n=0] 
[10:50:58.800] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.800] Number of futures (= number of chunks): 2
[10:50:58.800] Launching 2 futures (chunks) ...
[10:50:58.800] Chunk #1 of 2 ...
[10:50:58.800]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.800] getGlobalsAndPackages() ...
[10:50:58.800] |  Searching for globals ...
[10:50:58.801] |  :  globals found: [0] 
[10:50:58.801] |  Searching for globals ... DONE
[10:50:58.801] |  globals: [0] <none>
[10:50:58.801] |  packages: [0] <none>
[10:50:58.801] getGlobalsAndPackages() ... done
[10:50:58.801]    + additional globals found: [n=0] 
[10:50:58.801]    + additional namespaces needed: [n=0] 
[10:50:58.801]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.801]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.801]  - seeds: [2] <seeds>
[10:50:58.801]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.802] getGlobalsAndPackages() ...
[10:50:58.802] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.802] |  Resolving globals: FALSE
[10:50:58.802] |  Tweak future expression to call with '...' arguments ...
[10:50:58.802] |  :  {
[10:50:58.802] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.802] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.802] |  :      "# as a global variable                                         "
[10:50:58.802] |  :      do.call(function(...) {
[10:50:58.802] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.802] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.802] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.802] |  :          "# anonymous function.                                          "
[10:50:58.802] |  :          "#                                                              "
[10:50:58.802] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.802] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.802] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.802] |  :          "# global environment, which is where globals are written.      "
[10:50:58.802] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.802] |  :          repeat {
[10:50:58.802] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.802] |  :                  emptyenv())) 
[10:50:58.802] |  :                  break
[10:50:58.802] |  :              penv <- env
[10:50:58.802] |  :              env <- parent.env(env)
[10:50:58.802] |  :          }
[10:50:58.802] |  :          if (identical(penv, globalenv())) {
[10:50:58.802] |  :              environment(...future.FUN) <- environment()
[10:50:58.802] |  :          }
[10:50:58.802] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.802] |  :              !isNamespace(penv)) {
[10:50:58.802] |  :              parent.env(penv) <- environment()
[10:50:58.802] |  :          }
[10:50:58.802] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.802] |  :          {
[10:50:58.802] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.802] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.802] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.802] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.802] |  :              }
[10:50:58.802] |  :              {
[10:50:58.802] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.802] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.802] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.802] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.802] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.802] |  :                  })
[10:50:58.802] |  :              }
[10:50:58.802] |  :          }
[10:50:58.802] |  :      }, args = future.call.arguments)
[10:50:58.802] |  :  }
[10:50:58.803] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.803] |  Search for packages associated with the globals ...
[10:50:58.803] |  :  Packages associated with globals: [0] 
[10:50:58.803] |  :  Packages: [0] 
[10:50:58.803] |  Search for packages associated with the globals ... DONE
[10:50:58.803] |  Packages after dropping 'base': [0] 
[10:50:58.803] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.804] |  packages: [0] 
[10:50:58.804] getGlobalsAndPackages() ... done
[10:50:58.804] run() for Future (‘Future’) ...
[10:50:58.804] |  state: ‘created’
[10:50:58.804] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.804] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.804] |  Using MulticoreFutureBackend ...
[10:50:58.804] |  :  Launching futures ...
[10:50:58.805] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.805] |  :  .  |  getFutureData() ...
[10:50:58.805] |  :  .  |  :  getFutureCore() ...
[10:50:58.805] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.805] |  :  .  |  :  getFutureCore() ... done
[10:50:58.805] |  :  .  |  :  getFutureCapture() ...
[10:50:58.805] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.805] |  :  .  |  :  getFutureContext() ...
[10:50:58.805] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.806] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.806] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.806] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.806] |  :  .  |  :  getFutureContext() ... done
[10:50:58.806] |  :  .  |  getFutureData() ... done
[10:50:58.806] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.806] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.808] |  :  .  |  MulticoreFuture started
[10:50:58.809] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.809] |  :  Launching futures ... done
[10:50:58.809] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.809] |  :  .  |  attachPackages() ...
[10:50:58.809] |  Using MulticoreFutureBackend ... done
[10:50:58.809] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.809] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.810] Created future:
[10:50:58.810] |  :  .  |  attachPackages() ... DONE
[10:50:58.810] |  :  .  |  attachPackages() ...
[10:50:58.810] |  :  .  |  :  packages: [n=0] 
[10:50:58.810] |  :  .  |  attachPackages() ... DONE
[10:50:58.811] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.811] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.812] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.815] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.816] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.816] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.817] |  :  .  |  :  .  |  New stack:
[10:50:58.822] readImmediateCondition() ...
[10:50:58.817] |  :  .  |  :  .  |  List of 1
[10:50:58.817] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.817] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.817] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.817] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.817] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.817] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.817] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.823] |  :  .  |  :  .  |  Old stack:
[10:50:58.822]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.824]  - Number of RDS files: 0
[10:50:58.824] readImmediateCondition() ... DONE
[10:50:58.810] MulticoreFuture:
[10:50:58.810] Label: ‘future_replicate-1’
[10:50:58.810] Expression:
[10:50:58.810] {
[10:50:58.810]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.810]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.810]     "# as a global variable                                         "
[10:50:58.810]     do.call(function(...) {
[10:50:58.810]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.810]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.810]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.810]         "# anonymous function.                                          "
[10:50:58.810]         "#                                                              "
[10:50:58.810]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.810]         "# function environment of FUN() to the calling environment.    "
[10:50:58.810]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.810]         "# global environment, which is where globals are written.      "
[10:50:58.810]         penv <- env <- environment(...future.FUN)
[10:50:58.810]         repeat {
[10:50:58.810]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.810]                 emptyenv())) 
[10:50:58.810]                 break
[10:50:58.810]             penv <- env
[10:50:58.810]             env <- parent.env(env)
[10:50:58.810]         }
[10:50:58.810]         if (identical(penv, globalenv())) {
[10:50:58.810]             environment(...future.FUN) <- environment()
[10:50:58.810]         }
[10:50:58.810]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.810]             !isNamespace(penv)) {
[10:50:58.810]             parent.env(penv) <- environment()
[10:50:58.810]         }
[10:50:58.810]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.810]         {
[10:50:58.810]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.810]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.810]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.810]                 on.exit(options(oopts), add = TRUE)
[10:50:58.810]             }
[10:50:58.810]             {
[10:50:58.810]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.810]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.810]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.810]                     envir = globalenv(), inherits = FALSE)
[10:50:58.810]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.810]                 })
[10:50:58.810]             }
[10:50:58.810]         }
[10:50:58.810]     }, args = future.call.arguments)
[10:50:58.810] }
[10:50:58.810] Lazy evaluation: FALSE
[10:50:58.810] Asynchronous evaluation: TRUE
[10:50:58.810] Local evaluation: TRUE
[10:50:58.810] Environment: R_GlobalEnv
[10:50:58.810] Capture standard output: TRUE
[10:50:58.810] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.810] Immediate condition classes: ‘immediateCondition’
[10:50:58.810] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.810] Packages: <none>
[10:50:58.810] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.810] Resolved: FALSE
[10:50:58.810] Value: <not collected>
[10:50:58.810] Conditions captured: <none>
[10:50:58.810] Early signaling: FALSE
[10:50:58.810] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.810] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.825] Chunk #1 of 2 ... DONE
[10:50:58.825] Chunk #2 of 2 ...
[10:50:58.826]  - Finding globals in 'X' for chunk #2 ...
[10:50:58.826] getGlobalsAndPackages() ...
[10:50:58.826] |  Searching for globals ...
[10:50:58.827] |  :  globals found: [0] 
[10:50:58.827] |  Searching for globals ... DONE
[10:50:58.827] |  globals: [0] <none>
[10:50:58.827] |  packages: [0] <none>
[10:50:58.827] getGlobalsAndPackages() ... done
[10:50:58.828]    + additional globals found: [n=0] 
[10:50:58.828]    + additional namespaces needed: [n=0] 
[10:50:58.823] |  :  .  |  :  .  |  List of 1
[10:50:58.823] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.823] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.823] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.823] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.823] |  :  .  |  :  .  |      ...)  
[10:50:58.823] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.823] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.823] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.823] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.823] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.823] |  :  .  |  :  .  |      ...)  
[10:50:58.823] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.823] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.828]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:58.828]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.828] |  :  .  |  :  .  |  Not identical
[10:50:58.828]  - seeds: [3] <seeds>
[10:50:58.828] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.828]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.828] getGlobalsAndPackages() ...
[10:50:58.829] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.829] |  Resolving globals: FALSE
[10:50:58.829] |  Tweak future expression to call with '...' arguments ...
[10:50:58.829] |  :  {
[10:50:58.829] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.829] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.829] |  :      "# as a global variable                                         "
[10:50:58.829] |  :      do.call(function(...) {
[10:50:58.829] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.829] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.829] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.829] |  :          "# anonymous function.                                          "
[10:50:58.829] |  :          "#                                                              "
[10:50:58.829] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.829] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.829] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.829] |  :          "# global environment, which is where globals are written.      "
[10:50:58.829] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.829] |  :          repeat {
[10:50:58.829] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.829] |  :                  emptyenv())) 
[10:50:58.829] |  :                  break
[10:50:58.829] |  :              penv <- env
[10:50:58.829] |  :              env <- parent.env(env)
[10:50:58.829] |  :          }
[10:50:58.829] |  :          if (identical(penv, globalenv())) {
[10:50:58.829] |  :              environment(...future.FUN) <- environment()
[10:50:58.829] |  :          }
[10:50:58.829] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.829] |  :              !isNamespace(penv)) {
[10:50:58.829] |  :              parent.env(penv) <- environment()
[10:50:58.829] |  :          }
[10:50:58.829] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.829] |  :          {
[10:50:58.829] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.829] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.829] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.829] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.829] |  :              }
[10:50:58.829] |  :              {
[10:50:58.829] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.829] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.829] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.829] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.829] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.829] |  :                  })
[10:50:58.829] |  :              }
[10:50:58.829] |  :          }
[10:50:58.829] |  :      }, args = future.call.arguments)
[10:50:58.829] |  :  }
[10:50:58.830] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.830] |  Search for packages associated with the globals ...
[10:50:58.830] |  :  Packages associated with globals: [0] 
[10:50:58.831] |  :  Packages: [0] 
[10:50:58.831] |  Search for packages associated with the globals ... DONE
[10:50:58.831] |  Packages after dropping 'base': [0] 
[10:50:58.831] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.831] |  packages: [0] 
[10:50:58.831] getGlobalsAndPackages() ... done
[10:50:58.832] run() for Future (‘Future’) ...
[10:50:58.832] |  state: ‘created’
[10:50:58.832] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.832] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.832] |  Using MulticoreFutureBackend ...
[10:50:58.833] |  :  Launching futures ...
[10:50:58.833] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.833] |  :  .  |  getFutureData() ...
[10:50:58.833] |  :  .  |  :  getFutureCore() ...
[10:50:58.833] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.833] |  :  .  |  :  getFutureCore() ... done
[10:50:58.833] |  :  .  |  :  getFutureCapture() ...
[10:50:58.833] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.834] |  :  .  |  :  getFutureContext() ...
[10:50:58.834] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.834] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.834] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.828] |  :  .  |  :  .  |  :  List of 2
[10:50:58.828] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequentia[10:50:58.834] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
l" "uniprocess" "future" "function"
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.828] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.828] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.828] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.828] |  :  .  |  :  .  |  :      ...)  
[10:50:58.828] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.828] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.828] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.828] |  :  .  |  :  .  |  :      ...)  
[10:50:58.828] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.834] |  :  .  |  :  getFutureContext() ... done
[10:50:58.834] |  :  .  |  getFutureData() ... done
[10:50:58.835] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.835] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.835] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.835] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.835] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.835] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.835] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.835] |  :  .  |  :  .  List of future strategies:
[10:50:58.835] |  :  .  |  :  .  1. sequential:
[10:50:58.835] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.835] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.835] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.837] |  :  .  |  MulticoreFuture started
[10:50:58.838] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.838] |  :  Launching futures ... done
[10:50:58.838] |  :  .  |  attachPackages() ...
[10:50:58.838] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.839] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.839] |  Using MulticoreFutureBackend ... done
[10:50:58.836] |  :  .  |  :  .  List of 1
[10:50:58.836] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.836] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.836] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.836] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.836] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.836] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.836] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.839] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.839] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.839] |  :  .  |  attachPackages() ... DONE
[10:50:58.839] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.839] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.839] |  :  .  |  attachPackages() ...
[10:50:58.839] Created future:
[10:50:58.840] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.840] |  :  .  |  :  packages: [n=0] 
[10:50:58.840] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.840] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.840] |  :  .  |  attachPackages() ... DONE
[10:50:58.840] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.840] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.840] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.841] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.841] |  :  .  |  assign_globals() ...
[10:50:58.841] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.841] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.842] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.842] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.843] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.843] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.843] |  :  .  |  :  .  |  New stack:
[10:50:58.843] |  :  .  |  :  .  |  List of 1
[10:50:58.843] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.843] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.843] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.843] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.843] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.843] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.843] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.848] |  :  .  |  :  .  |  Old stack:
[10:50:58.841] |  :  .  |  List of 5
[10:50:58.841] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.841] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.841] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.841] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:50:58.841] |  :  .  |    ..$ : int 0
[10:50:58.841] |  :  .  |    ..$ : int 0
[10:50:58.841] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:50:58.841] |  :  .  |    ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:50:58.841] |  :  .  |    ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:50:58.841] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.841] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.841] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.841] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.841] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.841] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.841] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.841] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.841] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.841] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.841] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.850] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.850] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.850] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.850] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.850] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.851] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.851] |  :  .  |  assign_globals() ... done
[10:50:58.852] readImmediateCondition() ...
[10:50:58.852]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.853] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.853]  - Number of RDS files: 0
[10:50:58.848] |  :  .  |  :  .  |  List of 1
[10:50:58.848] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.848] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.848] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.848] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.848] |  :  .  |  :  .  |      ...)  
[10:50:58.848] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.848] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.848] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.848] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.848] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.848] |  :  .  |  :  .  |      ...)  
[10:50:58.848] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.848] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.853] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.853] readImmediateCondition() ... DONE
[10:50:58.853] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.853] |  :  .  |  :  .  |  Not identical
[10:50:58.853] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.853] |  :  .  |  :  .  |  :  New stack:
[10:50:58.853] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.840] MulticoreFuture:
[10:50:58.840] Label: ‘future_replicate-2’
[10:50:58.840] Expression:
[10:50:58.840] {
[10:50:58.840]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.840]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.840]     "# as a global variable                                         "
[10:50:58.840]     do.call(function(...) {
[10:50:58.840]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.840]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.840]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.840]         "# anonymous function.                                          "
[10:50:58.840]         "#                                                              "
[10:50:58.840]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.840]         "# function environment of FUN() to the calling environment.    "
[10:50:58.840]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.840]         "# global environment, which is where globals are written.      "
[10:50:58.840]         penv <- env <- environment(...future.FUN)
[10:50:58.840]         repeat {
[10:50:58.840]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.840]                 emptyenv())) 
[10:50:58.840]                 break
[10:50:58.840]             penv <- env
[10:50:58.840]             env <- parent.env(env)
[10:50:58.840]         }
[10:50:58.840]         if (identical(penv, globalenv())) {
[10:50:58.840]             environment(...future.FUN) <- environment()
[10:50:58.840]         }
[10:50:58.840]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.840]             !isNamespace(penv)) {
[10:50:58.840]             parent.env(penv) <- environment()
[10:50:58.840]         }
[10:50:58.840]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.840]         {
[10:50:58.840]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.840]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.840]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.840]                 on.exit(options(oopts), add = TRUE)
[10:50:58.840]             }
[10:50:58.840]             {
[10:50:58.840]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.840]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.840]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.840]                     envir = globalenv(), inherits = FALSE)
[10:50:58.840]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.840]                 })
[10:50:58.840]             }
[10:50:58.840]         }
[10:50:58.840]     }, args = future.call.arguments)
[10:50:58.840] }
[10:50:58.840] Lazy evaluation: FALSE
[10:50:58.840] Asynchronous evaluation: TRUE
[10:50:58.840] Local evaluation: TRUE
[10:50:58.840] Environment: R_GlobalEnv
[10:50:58.840] Capture standard output: TRUE
[10:50:58.840] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.840] Immediate condition classes: ‘immediateCondition’
[10:50:58.840] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.840] Packages: <none>
[10:50:58.840] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.840] Resolved: FALSE
[10:50:58.840] Value: <not collected>
[10:50:58.840] Conditions captured: <none>
[10:50:58.840] Early signaling: FALSE
[10:50:58.840] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.840] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.854] Chunk #2 of 2 ... DONE
[10:50:58.854] Launching 2 futures (chunks) ... DONE
[10:50:58.854] Resolving 2 futures (chunks) ...
[10:50:58.855] value() on list ...
[10:50:58.855] |  recursive: 0
[10:50:58.855] |  length: 2
[10:50:58.855] |  
[10:50:58.856] |  Number of remaining objects: 2
[10:50:58.856] |  checking value #1 ...
[10:50:58.856] |  :  'obj' is MulticoreFuture
[10:50:58.854] |  :  .  |  :  .  |  :  List of 1
[10:50:58.854] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.854] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.854] |  :  .  |  :  .  |  :      ...)  
[10:50:58.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.854] |  :  .  |  :  .  |  :      ...)  
[10:50:58.854] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.854] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.857] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.857] |  :  .  |  :  .  |  :  List of 1
[10:50:58.857] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.857] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.857] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.857] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.857] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.857] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.857] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.859] |  :  .  |  :  .  |  :  Not identical
[10:50:58.859] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:58.859] |  :  .  |  :  .  |  :  .  List of 2
[10:50:58.859] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.859] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.859] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.859] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.859] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.859] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.859] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.859] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.859] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.859] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.854] |  :  .  |  :  .  |  :  List of 2
[10:50:58.854] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.854] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.854] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.854] |  :  .  |  :  .  |  :      ...)  
[10:50:58.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.854] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.854] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.854] |  :  .  |  :  .  |  :      ...)  
[10:50:58.854] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.864] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:58.864] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:58.864] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:58.864] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.865] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.865] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.866] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.866] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.865] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:58.866] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.866] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.866] |  :  .  |  :  .  |  1. multicore:
[10:50:58.866] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.866] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.866] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:58.866] |  :  readImmediateCondition() ...
[10:50:58.867] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.866] |  :  .  |  :  .  List of future strategies:
[10:50:58.866] |  :  .  |  :  .  1. sequential:
[10:50:58.866] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.866] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.866] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.867] |  :   - Number of RDS files: 0
[10:50:58.867] |  :  readImmediateCondition() ... DONE
[10:50:58.867] |  checking value #1 ... done
[10:50:58.867] |  checking value #2 ...
[10:50:58.868] |  :  'obj' is MulticoreFuture
[10:50:58.866] |  :  .  |  :  .  |  List of 1
[10:50:58.866] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.866] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.866] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.866] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.866] |  :  .  |  :  .  |      ...)  
[10:50:58.866] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.866] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.866] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.866] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.866] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.866] |  :  .  |  :  .  |      ...)  
[10:50:58.866] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.866] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.870] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.870] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.870] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.870] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.870] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.871] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:58.871] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.867] |  :  .  |  :  .  List of 1
[10:50:58.867] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.867] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.867] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.867] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.867] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.867] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.867] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.871] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.871] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.871] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.871] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.871] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.871] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.872] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.872] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.872] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.872] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.872] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.873] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.873] |  :  .  |  assign_globals() ...
[10:50:58.878] |  :  readImmediateCondition() ...
[10:50:58.878] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.879] |  :   - Number of RDS files: 0
[10:50:58.879] |  :  readImmediateCondition() ... DONE
[10:50:58.879] |  checking value #2 ... done
[10:50:58.873] |  :  .  |  List of 5
[10:50:58.873] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.873] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.873] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.873] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:50:58.873] |  :  .  |    ..$ : int 0
[10:50:58.873] |  :  .  |    ..$ : int 0
[10:50:58.873] |  :  .  |    ..$ : int 0
[10:50:58.873] |  :  .  |   $ ...future.seeds_ii       :List of 3
[10:50:58.873] |  :  .  |    ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:50:58.873] |  :  .  |    ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:50:58.873] |  :  .  |    ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:50:58.873] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.873] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.873] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.873] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.873] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.873] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.873] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.873] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.873] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.873] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.873] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.881] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.881] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.881] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.881] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.881] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.881] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.881] |  :  .  |  assign_globals() ... done
[10:50:58.883] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.884] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.884] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.884] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.884] |  :  .  |  :  .  |  :  New stack:
[10:50:58.884] |  :  .  |  :  .  |  :  List of 1
[10:50:58.884] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.884] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.884] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.884] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.884] |  :  .  |  :  .  |  :      ...)  
[10:50:58.884] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.884] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.884] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.884] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.884] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.884] |  :  .  |  :  .  |  :      ...)  
[10:50:58.884] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.884] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.888] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.889] |  Number of remaining objects: 2
[10:50:58.889] |  checking value #1 ...
[10:50:58.890] |  :  'obj' is MulticoreFuture
[10:50:58.890] |  :  readImmediateCondition() ...
[10:50:58.890] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.890] |  :   - Number of RDS files: 0
[10:50:58.891] |  :  readImmediateCondition() ... DONE
[10:50:58.891] |  :  MulticoreFuture #1
[10:50:58.891] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:58.891] |  :  .  nx: 2
[10:50:58.891] |  :  .  relay: TRUE
[10:50:58.892] |  :  .  stdout: TRUE
[10:50:58.889] |  :  .  |  :  .  |  :  List of 1
[10:50:58.889] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.889] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.889] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.889] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.889] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.889] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.889] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.892] |  :  .  signal: TRUE
[10:50:58.892] |  :  .  |  :  .  |  :  Not identical
[10:50:58.892] |  :  .  resignal: FALSE
[10:50:58.892] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:58.892] |  :  .  force: TRUE
[10:50:58.892] |  :  .  relayed: [n=2] FALSE, FALSE
[10:50:58.893] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:50:58.893] |  :  .  until=1
[10:50:58.893] |  :  .  relaying element #1
[10:50:58.893] |  :  .  result() for MulticoreFuture ...
[10:50:58.894] |  :  .  |  readImmediateCondition() ...
[10:50:58.894] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.895] |  :  .  |   - Number of RDS files: 0
[10:50:58.895] |  :  .  |  readImmediateCondition() ... DONE
[10:50:58.895] |  :  .  |  result() for MulticoreFuture ...
[10:50:58.896] |  :  .  |  result() for MulticoreFuture ... done
[10:50:58.896] |  :  .  result() for MulticoreFuture ... done
[10:50:58.896] |  :  .  result() for MulticoreFuture ...
[10:50:58.896] |  :  .  result() for MulticoreFuture ... done
[10:50:58.897] |  :  .  result() for MulticoreFuture ...
[10:50:58.897] |  :  .  result() for MulticoreFuture ... done
[10:50:58.897] |  :  .  result() for MulticoreFuture ...
[10:50:58.897] |  :  .  result() for MulticoreFuture ... done
[10:50:58.897] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.898] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.898] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:50:58.898] |  :  value(<MulticoreFuture>, ...) ...
[10:50:58.898] |  :  .  result() for MulticoreFuture ...
[10:50:58.899] |  :  .  result() for MulticoreFuture ... done
[10:50:58.899] |  :  .  result() for MulticoreFuture ...
[10:50:58.899] |  :  .  result() for MulticoreFuture ... done
[10:50:58.899] |  :  .  value: <list>
[10:50:58.892] |  :  .  |  :  .  |  :  .  List of 2
[10:50:58.892] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.892] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.892] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.892] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.892] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.892] |  :  .  |  :  .  |  :  .      ...)  
[10:50:58.892] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.892] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.892] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.892] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.899] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:58.900] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:58.900] |  :  .  nx: 2
[10:50:58.900] |  :  .  relay: TRUE
[10:50:58.900] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:58.900] |  :  .  stdout: TRUE
[10:50:58.900] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:58.900] |  :  .  signal: TRUE
[10:50:58.900] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:58.900] |  :  .  resignal: FALSE
[10:50:58.901] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:58.901] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:58.901] |  :  .  force: TRUE
[10:50:58.901] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.901] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.901] |  :  .  |  :  .  |  List of future strategies:
[10:50:58.901] |  :  .  |  :  .  |  1. multicore:
[10:50:58.901] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:58.901] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:58.901] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:58.901] |  :  .  until=2
[10:50:58.901] |  :  .  relaying element #2
[10:50:58.902] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.902] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.902] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:50:58.902] |  :  length: 1 (resolved future 1)
[10:50:58.902] |  checking value #1 ... done
[10:50:58.903] |  checking value #2 ...
[10:50:58.903] |  :  'obj' is MulticoreFuture
[10:50:58.901] |  :  .  |  :  .  |  List of 1
[10:50:58.901] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.901] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.901] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.901] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.901] |  :  .  |  :  .  |      ...)  
[10:50:58.901] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.901] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.901] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.901] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.901] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.901] |  :  .  |  :  .  |      ...)  
[10:50:58.901] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.901] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.905] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.905] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.905] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.906] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.906] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.906] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:58.906] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.906] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.906] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.906] |  :  readImmediateCondition() ...
[10:50:58.907] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.907] |  :   - Number of RDS files: 0
[10:50:58.907] |  :  readImmediateCondition() ... DONE
[10:50:58.907] |  :  MulticoreFuture #2
[10:50:58.907] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:58.907] |  :  .  nx: 2
[10:50:58.907] |  :  .  relay: TRUE
[10:50:58.908] |  :  .  stdout: TRUE
[10:50:58.908] |  :  .  signal: TRUE
[10:50:58.908] |  :  .  resignal: FALSE
[10:50:58.908] |  :  .  force: TRUE
[10:50:58.908] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:58.908] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:58.908] |  :  .  until=2
[10:50:58.908] |  :  .  relaying element #2
[10:50:58.909] |  :  .  result() for MulticoreFuture ...
[10:50:58.911] |  :  .  |  readImmediateCondition() ...
[10:50:58.911] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.911] |  :  .  |   - Number of RDS files: 0
[10:50:58.911] |  :  .  |  readImmediateCondition() ... DONE
[10:50:58.912] |  :  .  |  result() for MulticoreFuture ...
[10:50:58.912] |  :  .  |  result() for MulticoreFuture ... done
[10:50:58.912] |  :  .  result() for MulticoreFuture ... done
[10:50:58.913] |  :  .  result() for MulticoreFuture ...
[10:50:58.913] |  :  .  result() for MulticoreFuture ... done
[10:50:58.913] |  :  .  result() for MulticoreFuture ...
[10:50:58.913] |  :  .  result() for MulticoreFuture ... done
[10:50:58.913] |  :  .  result() for MulticoreFuture ...
[10:50:58.914] |  :  .  result() for MulticoreFuture ... done
[10:50:58.914] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.914] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.914] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:58.914] |  :  value(<MulticoreFuture>, ...) ...
[10:50:58.915] |  :  .  result() for MulticoreFuture ...
[10:50:58.915] |  :  .  result() for MulticoreFuture ... done
[10:50:58.915] |  :  .  result() for MulticoreFuture ...
[10:50:58.915] |  :  .  result() for MulticoreFuture ... done
[10:50:58.915] |  :  .  value: <list>
[10:50:58.915] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:58.916] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:58.916] |  :  .  nx: 2
[10:50:58.916] |  :  .  relay: TRUE
[10:50:58.916] |  :  .  stdout: TRUE
[10:50:58.916] |  :  .  signal: TRUE
[10:50:58.916] |  :  .  resignal: FALSE
[10:50:58.916] |  :  .  force: TRUE
[10:50:58.916] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.916] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.917] |  :  .  until=2
[10:50:58.917] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.917] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.917] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:58.917] |  :  length: 0 (resolved future 2)
[10:50:58.917] |  checking value #2 ... done
[10:50:58.917] |  Relaying remaining futures ...
[10:50:58.917] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:58.918] |  :  .  nx: 2
[10:50:58.918] |  :  .  relay: TRUE
[10:50:58.918] |  :  .  stdout: TRUE
[10:50:58.918] |  :  .  signal: TRUE
[10:50:58.918] |  :  .  resignal: FALSE
[10:50:58.918] |  :  .  force: TRUE
[10:50:58.918] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.918] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:50:58.918] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:58.919] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:58.919] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:58.919] |  Relaying remaining futures ... done
[10:50:58.919] value() on list ... done
[10:50:58.919]  - Number of value chunks collected: 2
[10:50:58.919] Resolving 2 futures (chunks) ... DONE
[10:50:58.919] Reducing values from 2 chunks ...
[10:50:58.919]  - Number of values collected after concatenation: 5
[10:50:58.919]  - Number of values expected: 5
[10:50:58.920] Reducing values from 2 chunks ... DONE
[10:50:58.920] future_lapply() ... DONE
[10:50:58.920] future_lapply() ...
[10:50:58.921] Generating random seeds ...
[10:50:58.921] Generating random seed streams for 5 elements ...
[10:50:58.921] Generating random seed streams for 5 elements ... DONE
[10:50:58.921] Generating random seeds ... DONE
[10:50:58.921] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:58.922] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.922] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.922] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.922] Number of chunks: 2
[10:50:58.922] getGlobalsAndPackagesXApply() ...
[10:50:58.923]  - future.globals: TRUE
[10:50:58.923] getGlobalsAndPackages() ...
[10:50:58.923] |  Searching for globals ...
[10:50:58.924] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:58.924] |  Searching for globals ... DONE
[10:50:58.924] |  Resolving globals: FALSE
[10:50:58.924] |  Search for packages associated with the globals ...
[10:50:58.925] |  :  Packages associated with globals: [1] ‘base’
[10:50:58.925] |  :  Packages: [1] ‘base’
[10:50:58.925] |  Search for packages associated with the globals ... DONE
[10:50:58.925] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:58.925] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:58.926] |  Packages after dropping 'base': [0] 
[10:50:58.926] |  globals: [1] ‘FUN’
[10:50:58.926] |  packages: [0] 
[10:50:58.926] getGlobalsAndPackages() ... done
[10:50:58.926]  - globals found/used: [n=1] ‘FUN’
[10:50:58.926]  - needed namespaces: [n=0] 
[10:50:58.926] Finding globals ... DONE
[10:50:58.926]  - use_args: TRUE
[10:50:58.926]  - Getting '...' globals ...
[10:50:58.927] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:58.927] |  recursive: 0
[10:50:58.927] |  length: 1
[10:50:58.927] |  elements: ‘...’
[10:50:58.927] |  'obj' is DotDotDotList
[10:50:58.927] |  resolve(obj, ...) ...
[10:50:58.927] |  resolve(obj, ...) ... done
[10:50:58.928] |  length: 0 (resolved future 1)
[10:50:58.928] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:58.928]    - '...' content: [n=0] 
[10:50:58.928] List of 1
[10:50:58.928]  $ ...: list()
[10:50:58.928]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.928]  - attr(*, "where")=List of 1
[10:50:58.928]   ..$ ...:<environment: 0x564ad2a3be10> 
[10:50:58.928]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.928]  - attr(*, "resolved")= logi TRUE
[10:50:58.928]  - attr(*, "total_size")= num NA
[10:50:58.931]  - Getting '...' globals ... DONE
[10:50:58.931] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:58.931] List of 2
[10:50:58.931]  $ ...future.FUN:function (...)  
[10:50:58.931]  $ ...          : list()
[10:50:58.931]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.931]  - attr(*, "where")=List of 2
[10:50:58.931]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:58.931]   ..$ ...          :<environment: 0x564ad2a3be10> 
[10:50:58.931]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.931]  - attr(*, "resolved")= logi FALSE
[10:50:58.931]  - attr(*, "total_size")= num 7184
[10:50:58.935] Packages to be attached in all futures: [n=0] 
[10:50:58.935] getGlobalsAndPackagesXApply() ... DONE
[10:50:58.935] Number of futures (= number of chunks): 2
[10:50:58.935] Launching 2 futures (chunks) ...
[10:50:58.935] Chunk #1 of 2 ...
[10:50:58.935]  - Finding globals in 'X' for chunk #1 ...
[10:50:58.935] getGlobalsAndPackages() ...
[10:50:58.936] |  Searching for globals ...
[10:50:58.936] |  :  globals found: [0] 
[10:50:58.936] |  Searching for globals ... DONE
[10:50:58.936] |  globals: [0] <none>
[10:50:58.936] |  packages: [0] <none>
[10:50:58.936] getGlobalsAndPackages() ... done
[10:50:58.936]    + additional globals found: [n=0] 
[10:50:58.936]    + additional namespaces needed: [n=0] 
[10:50:58.936]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:58.937]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.937]  - seeds: [2] <seeds>
[10:50:58.937]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.937] getGlobalsAndPackages() ...
[10:50:58.937] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.937] |  Resolving globals: FALSE
[10:50:58.937] |  Tweak future expression to call with '...' arguments ...
[10:50:58.937] |  :  {
[10:50:58.937] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.937] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.937] |  :      "# as a global variable                                         "
[10:50:58.937] |  :      do.call(function(...) {
[10:50:58.937] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.937] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.937] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.937] |  :          "# anonymous function.                                          "
[10:50:58.937] |  :          "#                                                              "
[10:50:58.937] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.937] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.937] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.937] |  :          "# global environment, which is where globals are written.      "
[10:50:58.937] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.937] |  :          repeat {
[10:50:58.937] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.937] |  :                  emptyenv())) 
[10:50:58.937] |  :                  break
[10:50:58.937] |  :              penv <- env
[10:50:58.937] |  :              env <- parent.env(env)
[10:50:58.937] |  :          }
[10:50:58.937] |  :          if (identical(penv, globalenv())) {
[10:50:58.937] |  :              environment(...future.FUN) <- environment()
[10:50:58.937] |  :          }
[10:50:58.937] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.937] |  :              !isNamespace(penv)) {
[10:50:58.937] |  :              parent.env(penv) <- environment()
[10:50:58.937] |  :          }
[10:50:58.937] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.937] |  :          {
[10:50:58.937] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.937] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.937] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.937] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.937] |  :              }
[10:50:58.937] |  :              {
[10:50:58.937] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.937] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.937] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.937] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.937] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.937] |  :                  })
[10:50:58.937] |  :              }
[10:50:58.937] |  :          }
[10:50:58.937] |  :      }, args = future.call.arguments)
[10:50:58.937] |  :  }
[10:50:58.938] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.938] |  Search for packages associated with the globals ...
[10:50:58.938] |  :  Packages associated with globals: [0] 
[10:50:58.938] |  :  Packages: [0] 
[10:50:58.939] |  Search for packages associated with the globals ... DONE
[10:50:58.939] |  Packages after dropping 'base': [0] 
[10:50:58.939] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.939] |  packages: [0] 
[10:50:58.939] getGlobalsAndPackages() ... done
[10:50:58.939] run() for Future (‘Future’) ...
[10:50:58.939] |  state: ‘created’
[10:50:58.939] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.940] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.940] |  Using MulticoreFutureBackend ...
[10:50:58.940] |  :  Launching futures ...
[10:50:58.940] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.940] |  :  .  |  getFutureData() ...
[10:50:58.940] |  :  .  |  :  getFutureCore() ...
[10:50:58.940] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.940] |  :  .  |  :  getFutureCore() ... done
[10:50:58.940] |  :  .  |  :  getFutureCapture() ...
[10:50:58.940] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.941] |  :  .  |  :  getFutureContext() ...
[10:50:58.941] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.941] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.941] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.941] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.941] |  :  .  |  :  getFutureContext() ... done
[10:50:58.941] |  :  .  |  getFutureData() ... done
[10:50:58.941] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.942] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.943] |  :  .  |  MulticoreFuture started
[10:50:58.944] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.944] |  :  Launching futures ... done
[10:50:58.944] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.944] |  :  .  |  attachPackages() ...
[10:50:58.944] |  Using MulticoreFutureBackend ... done
[10:50:58.945] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.945] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.945] Created future:
[10:50:58.945] |  :  .  |  attachPackages() ... DONE
[10:50:58.945] |  :  .  |  attachPackages() ...
[10:50:58.945] |  :  .  |  :  packages: [n=0] 
[10:50:58.946] |  :  .  |  attachPackages() ... DONE
[10:50:58.946] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.947] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.947] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.947] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.948] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.948] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.948] |  :  .  |  :  .  |  New stack:
[10:50:58.948] |  :  .  |  :  .  |  List of 1
[10:50:58.948] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.948] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.948] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.948] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.948] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.948] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.948] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.953] |  :  .  |  :  .  |  Old stack:
[10:50:58.957] readImmediateCondition() ...
[10:50:58.957]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.958]  - Number of RDS files: 0
[10:50:58.953] |  :  .  |  :  .  |  List of 1
[10:50:58.953] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.953] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.953] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.953] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.953] |  :  .  |  :  .  |      ...)  
[10:50:58.953] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.953] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.953] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.953] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.953] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.953] |  :  .  |  :  .  |      ...)  
[10:50:58.953] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.953] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.958] readImmediateCondition() ... DONE
[10:50:58.958] |  :  .  |  :  .  |  Not identical
[10:50:58.958] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.945] MulticoreFuture:
[10:50:58.945] Label: ‘future_replicate-1’
[10:50:58.945] Expression:
[10:50:58.945] {
[10:50:58.945]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.945]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.945]     "# as a global variable                                         "
[10:50:58.945]     do.call(function(...) {
[10:50:58.945]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.945]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.945]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.945]         "# anonymous function.                                          "
[10:50:58.945]         "#                                                              "
[10:50:58.945]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.945]         "# function environment of FUN() to the calling environment.    "
[10:50:58.945]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.945]         "# global environment, which is where globals are written.      "
[10:50:58.945]         penv <- env <- environment(...future.FUN)
[10:50:58.945]         repeat {
[10:50:58.945]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.945]                 emptyenv())) 
[10:50:58.945]                 break
[10:50:58.945]             penv <- env
[10:50:58.945]             env <- parent.env(env)
[10:50:58.945]         }
[10:50:58.945]         if (identical(penv, globalenv())) {
[10:50:58.945]             environment(...future.FUN) <- environment()
[10:50:58.945]         }
[10:50:58.945]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.945]             !isNamespace(penv)) {
[10:50:58.945]             parent.env(penv) <- environment()
[10:50:58.945]         }
[10:50:58.945]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.945]         {
[10:50:58.945]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.945]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.945]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.945]                 on.exit(options(oopts), add = TRUE)
[10:50:58.945]             }
[10:50:58.945]             {
[10:50:58.945]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.945]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.945]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.945]                     envir = globalenv(), inherits = FALSE)
[10:50:58.945]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.945]                 })
[10:50:58.945]             }
[10:50:58.945]         }
[10:50:58.945]     }, args = future.call.arguments)
[10:50:58.945] }
[10:50:58.945] Lazy evaluation: FALSE
[10:50:58.945] Asynchronous evaluation: TRUE
[10:50:58.945] Local evaluation: TRUE
[10:50:58.945] Environment: R_GlobalEnv
[10:50:58.945] Capture standard output: TRUE
[10:50:58.945] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.945] Immediate condition classes: ‘immediateCondition’
[10:50:58.945] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.945] Packages: <none>
[10:50:58.945] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.945] Resolved: FALSE
[10:50:58.945] Value: <not collected>
[10:50:58.945] Conditions captured: <none>
[10:50:58.945] Early signaling: FALSE
[10:50:58.945] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.945] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.958] Chunk #1 of 2 ... DONE
[10:50:58.959] Chunk #2 of 2 ...
[10:50:58.959]  - Finding globals in 'X' for chunk #2 ...
[10:50:58.959] getGlobalsAndPackages() ...
[10:50:58.959] |  Searching for globals ...
[10:50:58.960] |  :  globals found: [0] 
[10:50:58.960] |  Searching for globals ... DONE
[10:50:58.960] |  globals: [0] <none>
[10:50:58.960] |  packages: [0] <none>
[10:50:58.960] getGlobalsAndPackages() ... done
[10:50:58.960]    + additional globals found: [n=0] 
[10:50:58.960]    + additional namespaces needed: [n=0] 
[10:50:58.960]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:58.961]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:58.961]  - seeds: [3] <seeds>
[10:50:58.961]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.961] getGlobalsAndPackages() ...
[10:50:58.961] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.961] |  Resolving globals: FALSE
[10:50:58.961] |  Tweak future expression to call with '...' arguments ...
[10:50:58.962] |  :  {
[10:50:58.962] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.962] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:58.962] |  :      "# as a global variable                                         "
[10:50:58.962] |  :      do.call(function(...) {
[10:50:58.962] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.962] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:58.962] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:58.962] |  :          "# anonymous function.                                          "
[10:50:58.962] |  :          "#                                                              "
[10:50:58.962] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:58.962] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:58.962] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.962] |  :          "# global environment, which is where globals are written.      "
[10:50:58.962] |  :          penv <- env <- environment(...future.FUN)
[10:50:58.962] |  :          repeat {
[10:50:58.962] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:58.962] |  :                  emptyenv())) 
[10:50:58.962] |  :                  break
[10:50:58.962] |  :              penv <- env
[10:50:58.962] |  :              env <- parent.env(env)
[10:50:58.962] |  :          }
[10:50:58.962] |  :          if (identical(penv, globalenv())) {
[10:50:58.962] |  :              environment(...future.FUN) <- environment()
[10:50:58.962] |  :          }
[10:50:58.962] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.962] |  :              !isNamespace(penv)) {
[10:50:58.962] |  :              parent.env(penv) <- environment()
[10:50:58.962] |  :          }
[10:50:58.962] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.962] |  :          {
[10:50:58.962] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.962] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.962] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.962] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:58.962] |  :              }
[10:50:58.962] |  :              {
[10:50:58.962] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.962] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.962] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.962] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:58.962] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:58.962] |  :                  })
[10:50:58.962] |  :              }
[10:50:58.962] |  :          }
[10:50:58.962] |  :      }, args = future.call.arguments)
[10:50:58.962] |  :  }
[10:50:58.962] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:58.962] |  Search for packages associated with the globals ...
[10:50:58.963] |  :  Packages associated with globals: [0] 
[10:50:58.963] |  :  Packages: [0] 
[10:50:58.963] |  Search for packages associated with the globals ... DONE
[10:50:58.964] |  Packages after dropping 'base': [0] 
[10:50:58.964] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:58.964] |  packages: [0] 
[10:50:58.964] getGlobalsAndPackages() ... done
[10:50:58.964] run() for Future (‘Future’) ...
[10:50:58.964] |  state: ‘created’
[10:50:58.965] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.965] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.965] |  Using MulticoreFutureBackend ...
[10:50:58.965] |  :  Launching futures ...
[10:50:58.965] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.965] |  :  .  |  getFutureData() ...
[10:50:58.965] |  :  .  |  :  getFutureCore() ...
[10:50:58.966] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:58.966] |  :  .  |  :  getFutureCore() ... done
[10:50:58.966] |  :  .  |  :  getFutureCapture() ...
[10:50:58.966] |  :  .  |  :  getFutureCapture() ... done
[10:50:58.966] |  :  .  |  :  getFutureContext() ...
[10:50:58.966] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.966] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:58.966] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.967] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:58.967] |  :  .  |  :  getFutureContext() ... done
[10:50:58.967] |  :  .  |  getFutureData() ... done
[10:50:58.967] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.968] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:58.958] |  :  .  |  :  .  |  :  List of 2
[10:50:58.958] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.958] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.958] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.958] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.958] |  :  .  |  :  .  |  :      ...)  
[10:50:58.958] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.958] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.958] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.958] |  :  .  |  :  .  |  :      ...)  
[10:50:58.958] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.970] |  :  .  |  :  .  |  :  Formals differ
[10:50:58.970] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:58.970] |  :  .  |  MulticoreFuture started
[10:50:58.970] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:58.970] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:58.970] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:58.971] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:58.971] |  :  Launching futures ... done
[10:50:58.971] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.971] |  :  .  |  attachPackages() ...
[10:50:58.971] |  Using MulticoreFutureBackend ... done
[10:50:58.971] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:58.971] run() for Future (‘MulticoreFuture’) ... done
[10:50:58.971] |  :  .  |  :  .  List of future strategies:
[10:50:58.971] |  :  .  |  :  .  1. sequential:
[10:50:58.971] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:58.971] |  :  .  |  :  .     - tweaked: FALSE
[10:50:58.971] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.972] Created future:
[10:50:58.972] |  :  .  |  attachPackages() ... DONE
[10:50:58.972] |  :  .  |  attachPackages() ...
[10:50:58.972] |  :  .  |  :  packages: [n=0] 
[10:50:58.973] |  :  .  |  attachPackages() ... DONE
[10:50:58.974] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.974] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:58.975] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.975] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.976] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.976] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:58.976] |  :  .  |  :  .  |  New stack:
[10:50:58.972] |  :  .  |  :  .  List of 1
[10:50:58.972] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.972] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.972] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.972] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.972] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.972] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.972] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.977] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:58.977] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:58.977] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:58.977] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:58.978] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:58.978] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:58.978] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:58.978] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:58.979] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:58.979] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:58.979] |  :  .  |  assign_globals() ...
[10:50:58.976] |  :  .  |  :  .  |  List of 1
[10:50:58.976] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.976] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.976] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.976] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.976] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.976] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.976] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.985] |  :  .  |  :  .  |  Old stack:
[10:50:58.985] readImmediateCondition() ...
[10:50:58.985]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.986]  - Number of RDS files: 0
[10:50:58.986] readImmediateCondition() ... DONE
[10:50:58.972] MulticoreFuture:
[10:50:58.972] Label: ‘future_replicate-2’
[10:50:58.972] Expression:
[10:50:58.972] {
[10:50:58.972]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:58.972]     "# expression in do.call(), because function called uses '...'  "
[10:50:58.972]     "# as a global variable                                         "
[10:50:58.972]     do.call(function(...) {
[10:50:58.972]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:58.972]         "# without having an '...' argument. This means '...' is treated"
[10:50:58.972]         "# as a global variable. This may happen when FUN() is an       "
[10:50:58.972]         "# anonymous function.                                          "
[10:50:58.972]         "#                                                              "
[10:50:58.972]         "# If an anonymous function, we will make sure to restore the   "
[10:50:58.972]         "# function environment of FUN() to the calling environment.    "
[10:50:58.972]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:58.972]         "# global environment, which is where globals are written.      "
[10:50:58.972]         penv <- env <- environment(...future.FUN)
[10:50:58.972]         repeat {
[10:50:58.972]             if (identical(env, globalenv()) || identical(env, 
[10:50:58.972]                 emptyenv())) 
[10:50:58.972]                 break
[10:50:58.972]             penv <- env
[10:50:58.972]             env <- parent.env(env)
[10:50:58.972]         }
[10:50:58.972]         if (identical(penv, globalenv())) {
[10:50:58.972]             environment(...future.FUN) <- environment()
[10:50:58.972]         }
[10:50:58.972]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:58.972]             !isNamespace(penv)) {
[10:50:58.972]             parent.env(penv) <- environment()
[10:50:58.972]         }
[10:50:58.972]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:58.972]         {
[10:50:58.972]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:58.972]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:58.972]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:58.972]                 on.exit(options(oopts), add = TRUE)
[10:50:58.972]             }
[10:50:58.972]             {
[10:50:58.972]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:58.972]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:58.972]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:58.972]                     envir = globalenv(), inherits = FALSE)
[10:50:58.972]                   ...future.FUN(...future.X_jj, ...)
[10:50:58.972]                 })
[10:50:58.972]             }
[10:50:58.972]         }
[10:50:58.972]     }, args = future.call.arguments)
[10:50:58.972] }
[10:50:58.972] Lazy evaluation: FALSE
[10:50:58.972] Asynchronous evaluation: TRUE
[10:50:58.972] Local evaluation: TRUE
[10:50:58.972] Environment: R_GlobalEnv
[10:50:58.972] Capture standard output: TRUE
[10:50:58.972] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:58.972] Immediate condition classes: ‘immediateCondition’
[10:50:58.972] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:58.972] Packages: <none>
[10:50:58.972] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:58.972] Resolved: FALSE
[10:50:58.972] Value: <not collected>
[10:50:58.972] Conditions captured: <none>
[10:50:58.972] Early signaling: FALSE
[10:50:58.972] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:58.972] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:58.987] Chunk #2 of 2 ... DONE
[10:50:58.987] Launching 2 futures (chunks) ... DONE
[10:50:58.987] Resolving 2 futures (chunks) ...
[10:50:58.987] value() on list ...
[10:50:58.988] |  recursive: 0
[10:50:58.979] |  :  .  |  List of 5
[10:50:58.979] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:58.979] |  :  .  |   $ future.call.arguments    : list()
[10:50:58.979] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:58.979] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:50:58.979] |  :  .  |    ..$ : int 0
[10:50:58.979] |  :  .  |    ..$ : int 0
[10:50:58.979] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:50:58.979] |  :  .  |    ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:50:58.979] |  :  .  |    ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:50:58.979] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:58.979] |  :  .  |   - attr(*, "where")=List of 5
[10:50:58.979] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:58.979] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:58.979] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:58.979] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:58.979] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:58.979] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:58.979] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:58.979] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:58.979] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:58.988] |  length: 2
[10:50:58.988] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:58.988] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:58.988] |  
[10:50:58.988] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:58.988] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:58.988] |  Number of remaining objects: 2
[10:50:58.988] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:58.988] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:58.988] |  checking value #1 ...
[10:50:58.989] |  :  .  |  assign_globals() ... done
[10:50:58.989] |  :  'obj' is MulticoreFuture
[10:50:58.991] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.991] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:58.991] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:58.991] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:58.991] |  :  .  |  :  .  |  :  New stack:
[10:50:58.985] |  :  .  |  :  .  |  List of 1
[10:50:58.985] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.985] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.985] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.985] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.985] |  :  .  |  :  .  |      ...)  
[10:50:58.985] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.985] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.985] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:58.985] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.985] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.985] |  :  .  |  :  .  |      ...)  
[10:50:58.985] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.985] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.993] |  :  .  |  :  .  |  Not identical
[10:50:58.993] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:58.992] |  :  .  |  :  .  |  :  List of 1
[10:50:58.992] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.992] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.992] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.992] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.992] |  :  .  |  :  .  |  :      ...)  
[10:50:58.992] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.992] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.992] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.992] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.992] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.992] |  :  .  |  :  .  |  :      ...)  
[10:50:58.992] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.992] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.997] |  :  .  |  :  .  |  :  Old stack:
[10:50:58.993] |  :  .  |  :  .  |  :  List of 2
[10:50:58.993] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.993] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.993] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:58.993] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.993] |  :  .  |  :  .  |  :      ...)  
[10:50:58.993] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:58.993] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:58.993] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:58.993] |  :  .  |  :  .  |  :      ...)  
[10:50:58.993] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:58.999] |  :  readImmediateCondition() ...
[10:50:58.997] |  :  .  |  :  .  |  :  List of 1
[10:50:58.997] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:58.997] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:58.997] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:58.997] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.997] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:58.997] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:58.997] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:58.999] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:58.999] |  :  .  |  :  .  |  :  Not identical
[10:50:58.999] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:59.000] |  :   - Number of RDS files: 0
[10:50:59.000] |  :  readImmediateCondition() ... DONE
[10:50:59.000] |  :  .  |  :  .  |  :  Formals differ
[10:50:59.000] |  checking value #1 ... done
[10:50:59.000] |  checking value #2 ...
[10:50:59.000] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:59.000] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:59.000] |  :  'obj' is MulticoreFuture
[10:50:59.000] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:59.001] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:59.001] |  :  .  |  :  .  List of future strategies:
[10:50:59.001] |  :  .  |  :  .  1. sequential:
[10:50:59.001] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:59.001] |  :  .  |  :  .     - tweaked: FALSE
[10:50:59.001] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.000] |  :  .  |  :  .  |  :  .  List of 2
[10:50:59.000] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.000] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.000] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.000] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.000] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.000] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.000] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.000] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.000] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.000] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.001] |  :  .  |  :  .  List of 1
[10:50:59.001] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.001] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.001] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.001] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.001] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.001] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.001] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.004] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:59.004] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:59.004] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.005] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:59.005] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:59.005] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.005] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:59.005] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.005] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.005] |  :  .  |  :  .  |  List of future strategies:
[10:50:59.005] |  :  .  |  :  .  |  1. multicore:
[10:50:59.005] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.005] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:59.005] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:59.005] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.005] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:59.006] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.006] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:59.006] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.006] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.006] |  :  .  |  assign_globals() ...
[10:50:59.005] |  :  .  |  :  .  |  List of 1
[10:50:59.005] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.005] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.005] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.005] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.005] |  :  .  |  :  .  |      ...)  
[10:50:59.005] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.005] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.005] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.005] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.005] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.005] |  :  .  |  :  .  |      ...)  
[10:50:59.005] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.005] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.008] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.008] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.009] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.009] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.009] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.009] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:59.009] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.009] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.009] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.011] |  :  readImmediateCondition() ...
[10:50:59.011] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.011] |  :   - Number of RDS files: 0
[10:50:59.014] |  :  readImmediateCondition() ... DONE
[10:50:59.014] |  checking value #2 ... done
[10:50:59.006] |  :  .  |  List of 5
[10:50:59.006] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:59.006] |  :  .  |   $ future.call.arguments    : list()
[10:50:59.006] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.006] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:50:59.006] |  :  .  |    ..$ : int 0
[10:50:59.006] |  :  .  |    ..$ : int 0
[10:50:59.006] |  :  .  |    ..$ : int 0
[10:50:59.006] |  :  .  |   $ ...future.seeds_ii       :List of 3
[10:50:59.006] |  :  .  |    ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:50:59.006] |  :  .  |    ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:50:59.006] |  :  .  |    ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:50:59.006] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:59.006] |  :  .  |   - attr(*, "where")=List of 5
[10:50:59.006] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:59.006] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:59.006] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:59.006] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:59.006] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:59.006] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:59.006] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:59.006] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.006] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:59.017] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:59.017] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:59.017] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:59.017] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:59.017] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:59.017] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:59.017] |  :  .  |  assign_globals() ... done
[10:50:59.019] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.020] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.020] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.020] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:59.020] |  :  .  |  :  .  |  :  New stack:
[10:50:59.020] |  :  .  |  :  .  |  :  List of 1
[10:50:59.020] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.020] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.020] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.020] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.020] |  :  .  |  :  .  |  :      ...)  
[10:50:59.020] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.020] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.020] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.020] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.020] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.020] |  :  .  |  :  .  |  :      ...)  
[10:50:59.020] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.020] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.023] |  :  .  |  :  .  |  :  Old stack:
[10:50:59.025] |  Number of remaining objects: 2
[10:50:59.025] |  checking value #1 ...
[10:50:59.025] |  :  'obj' is MulticoreFuture
[10:50:59.026] |  :  readImmediateCondition() ...
[10:50:59.023] |  :  .  |  :  .  |  :  List of 1
[10:50:59.023] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.023] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.023] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.023] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.023] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.023] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.023] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.026] |  :  .  |  :  .  |  :  Not identical
[10:50:59.026] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.026] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:59.026] |  :   - Number of RDS files: 0
[10:50:59.027] |  :  readImmediateCondition() ... DONE
[10:50:59.027] |  :  MulticoreFuture #1
[10:50:59.027] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:59.028] |  :  .  nx: 2
[10:50:59.028] |  :  .  relay: TRUE
[10:50:59.028] |  :  .  stdout: TRUE
[10:50:59.028] |  :  .  signal: TRUE
[10:50:59.028] |  :  .  resignal: FALSE
[10:50:59.029] |  :  .  force: TRUE
[10:50:59.029] |  :  .  relayed: [n=2] FALSE, FALSE
[10:50:59.029] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:50:59.029] |  :  .  until=1
[10:50:59.030] |  :  .  relaying element #1
[10:50:59.030] |  :  .  result() for MulticoreFuture ...
[10:50:59.031] |  :  .  |  readImmediateCondition() ...
[10:50:59.031] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.031] |  :  .  |   - Number of RDS files: 0
[10:50:59.031] |  :  .  |  readImmediateCondition() ... DONE
[10:50:59.032] |  :  .  |  result() for MulticoreFuture ...
[10:50:59.032] |  :  .  |  result() for MulticoreFuture ... done
[10:50:59.032] |  :  .  result() for MulticoreFuture ... done
[10:50:59.032] |  :  .  result() for MulticoreFuture ...
[10:50:59.033] |  :  .  result() for MulticoreFuture ... done
[10:50:59.033] |  :  .  result() for MulticoreFuture ...
[10:50:59.033] |  :  .  result() for MulticoreFuture ... done
[10:50:59.033] |  :  .  result() for MulticoreFuture ...
[10:50:59.026] |  :  .  |  :  .  |  :  .  List of 2
[10:50:59.026] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.026] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, env[10:50:59.034] |  :  .  result() for MulticoreFuture ... done
ir = parent.frame())  
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.026] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.026] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.026] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.026] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.026] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.026] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.026] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.026] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.034] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.034] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.034] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:50:59.034] |  :  value(<MulticoreFuture>, ...) ...
[10:50:59.034] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:59.035] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:59.035] |  :  .  result() for MulticoreFuture ...
[10:50:59.035] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:59.035] |  :  .  result() for MulticoreFuture ... done
[10:50:59.035] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:59.035] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:59.035] |  :  .  result() for MulticoreFuture ...
[10:50:59.035] |  :  .  result() for MulticoreFuture ... done
[10:50:59.035] |  :  .  value: <list>
[10:50:59.035] |  :  .  |  :  .  |  List of future strategies:
[10:50:59.035] |  :  .  |  :  .  |  1. multicore:
[10:50:59.035] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.035] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:59.035] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:59.036] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:59.036] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:59.036] |  :  .  nx: 2
[10:50:59.036] |  :  .  relay: TRUE
[10:50:59.036] |  :  .  stdout: TRUE
[10:50:59.036] |  :  .  signal: TRUE
[10:50:59.036] |  :  .  resignal: FALSE
[10:50:59.037] |  :  .  force: TRUE
[10:50:59.037] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.037] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.037] |  :  .  until=2
[10:50:59.037] |  :  .  relaying element #2
[10:50:59.037] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.037] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.037] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:50:59.038] |  :  length: 1 (resolved future 1)
[10:50:59.038] |  checking value #1 ... done
[10:50:59.038] |  checking value #2 ...
[10:50:59.038] |  :  'obj' is MulticoreFuture
[10:50:59.036] |  :  .  |  :  .  |  List of 1
[10:50:59.036] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.036] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.036] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.036] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.036] |  :  .  |  :  .  |      ...)  
[10:50:59.036] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.036] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.036] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.036] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.036] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.036] |  :  .  |  :  .  |      ...)  
[10:50:59.036] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.036] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.041] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.041] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.041] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.041] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.041] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.041] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:59.041] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.042] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.042] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.042] |  :  readImmediateCondition() ...
[10:50:59.042] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.042] |  :   - Number of RDS files: 0
[10:50:59.042] |  :  readImmediateCondition() ... DONE
[10:50:59.042] |  :  MulticoreFuture #2
[10:50:59.043] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:59.043] |  :  .  nx: 2
[10:50:59.043] |  :  .  relay: TRUE
[10:50:59.043] |  :  .  stdout: TRUE
[10:50:59.043] |  :  .  signal: TRUE
[10:50:59.043] |  :  .  resignal: FALSE
[10:50:59.043] |  :  .  force: TRUE
[10:50:59.043] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.044] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.044] |  :  .  until=2
[10:50:59.044] |  :  .  relaying element #2
[10:50:59.044] |  :  .  result() for MulticoreFuture ...
[10:50:59.044] |  :  .  |  readImmediateCondition() ...
[10:50:59.045] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.045] |  :  .  |   - Number of RDS files: 0
[10:50:59.045] |  :  .  |  readImmediateCondition() ... DONE
[10:50:59.045] |  :  .  |  result() for MulticoreFuture ...
[10:50:59.045] |  :  .  |  result() for MulticoreFuture ... done
[10:50:59.045] |  :  .  result() for MulticoreFuture ... done
[10:50:59.045] |  :  .  result() for MulticoreFuture ...
[10:50:59.046] |  :  .  result() for MulticoreFuture ... done
[10:50:59.046] |  :  .  result() for MulticoreFuture ...
[10:50:59.046] |  :  .  result() for MulticoreFuture ... done
[10:50:59.046] |  :  .  result() for MulticoreFuture ...
[10:50:59.046] |  :  .  result() for MulticoreFuture ... done
[10:50:59.046] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.046] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.047] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:59.047] |  :  value(<MulticoreFuture>, ...) ...
[10:50:59.047] |  :  .  result() for MulticoreFuture ...
[10:50:59.047] |  :  .  result() for MulticoreFuture ... done
[10:50:59.047] |  :  .  result() for MulticoreFuture ...
[10:50:59.047] |  :  .  result() for MulticoreFuture ... done
[10:50:59.047] |  :  .  value: <list>
[10:50:59.047] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:59.047] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:59.048] |  :  .  nx: 2
[10:50:59.048] |  :  .  relay: TRUE
[10:50:59.048] |  :  .  stdout: TRUE
[10:50:59.048] |  :  .  signal: TRUE
[10:50:59.048] |  :  .  resignal: FALSE
[10:50:59.048] |  :  .  force: TRUE
[10:50:59.048] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.048] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.048] |  :  .  until=2
[10:50:59.049] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.049] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.049] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:59.049] |  :  length: 0 (resolved future 2)
[10:50:59.049] |  checking value #2 ... done
[10:50:59.049] |  Relaying remaining futures ...
[10:50:59.049] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:59.049] |  :  .  nx: 2
[10:50:59.049] |  :  .  relay: TRUE
[10:50:59.050] |  :  .  stdout: TRUE
[10:50:59.050] |  :  .  signal: TRUE
[10:50:59.050] |  :  .  resignal: FALSE
[10:50:59.050] |  :  .  force: TRUE
[10:50:59.050] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.050] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:50:59.050] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.050] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.050] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:59.051] |  Relaying remaining futures ... done
[10:50:59.051] value() on list ... done
[10:50:59.051]  - Number of value chunks collected: 2
[10:50:59.051] Resolving 2 futures (chunks) ... DONE
[10:50:59.051] Reducing values from 2 chunks ...
[10:50:59.051]  - Number of values collected after concatenation: 5
[10:50:59.051]  - Number of values expected: 5
[10:50:59.051] Reducing values from 2 chunks ... DONE
[10:50:59.051] future_lapply() ... DONE
[10:50:59.052] future_lapply() ...
[10:50:59.052] Generating random seeds ...
[10:50:59.052] Generating random seed streams for 5 elements ...
[10:50:59.053] Generating random seed streams for 5 elements ... DONE
[10:50:59.053] Generating random seeds ... DONE
[10:50:59.053] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:59.053] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.054] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.054] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.054] Number of chunks: 2
[10:50:59.054] getGlobalsAndPackagesXApply() ...
[10:50:59.054]  - future.globals: TRUE
[10:50:59.055] getGlobalsAndPackages() ...
[10:50:59.055] |  Searching for globals ...
[10:50:59.056] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:59.056] |  Searching for globals ... DONE
[10:50:59.056] |  Resolving globals: FALSE
[10:50:59.056] |  Search for packages associated with the globals ...
[10:50:59.057] |  :  Packages associated with globals: [1] ‘base’
[10:50:59.058] |  :  Packages: [1] ‘base’
[10:50:59.058] |  Search for packages associated with the globals ... DONE
[10:50:59.059] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:59.059] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:59.059] |  Packages after dropping 'base': [0] 
[10:50:59.059] |  globals: [1] ‘FUN’
[10:50:59.060] |  packages: [0] 
[10:50:59.060] getGlobalsAndPackages() ... done
[10:50:59.060]  - globals found/used: [n=1] ‘FUN’
[10:50:59.060]  - needed namespaces: [n=0] 
[10:50:59.060] Finding globals ... DONE
[10:50:59.060]  - use_args: TRUE
[10:50:59.060]  - Getting '...' globals ...
[10:50:59.061] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:59.061] |  recursive: 0
[10:50:59.061] |  length: 1
[10:50:59.061] |  elements: ‘...’
[10:50:59.061] |  'obj' is DotDotDotList
[10:50:59.061] |  resolve(obj, ...) ...
[10:50:59.061] |  resolve(obj, ...) ... done
[10:50:59.061] |  length: 0 (resolved future 1)
[10:50:59.062] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:59.062]    - '...' content: [n=0] 
[10:50:59.062] List of 1
[10:50:59.062]  $ ...: list()
[10:50:59.062]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.062]  - attr(*, "where")=List of 1
[10:50:59.062]   ..$ ...:<environment: 0x564ad4affad8> 
[10:50:59.062]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.062]  - attr(*, "resolved")= logi TRUE
[10:50:59.062]  - attr(*, "total_size")= num NA
[10:50:59.064]  - Getting '...' globals ... DONE
[10:50:59.065] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:59.065] List of 2
[10:50:59.065]  $ ...future.FUN:function (...)  
[10:50:59.065]  $ ...          : list()
[10:50:59.065]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.065]  - attr(*, "where")=List of 2
[10:50:59.065]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:59.065]   ..$ ...          :<environment: 0x564ad4affad8> 
[10:50:59.065]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.065]  - attr(*, "resolved")= logi FALSE
[10:50:59.065]  - attr(*, "total_size")= num 7184
[10:50:59.068] Packages to be attached in all futures: [n=0] 
[10:50:59.068] getGlobalsAndPackagesXApply() ... DONE
[10:50:59.068] Number of futures (= number of chunks): 2
[10:50:59.068] Launching 2 futures (chunks) ...
[10:50:59.068] Chunk #1 of 2 ...
[10:50:59.068]  - Finding globals in 'X' for chunk #1 ...
[10:50:59.068] getGlobalsAndPackages() ...
[10:50:59.069] |  Searching for globals ...
[10:50:59.069] |  :  globals found: [0] 
[10:50:59.069] |  Searching for globals ... DONE
[10:50:59.069] |  globals: [0] <none>
[10:50:59.069] |  packages: [0] <none>
[10:50:59.069] getGlobalsAndPackages() ... done
[10:50:59.069]    + additional globals found: [n=0] 
[10:50:59.069]    + additional namespaces needed: [n=0] 
[10:50:59.069]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:59.070]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:59.070]  - seeds: [2] <seeds>
[10:50:59.070]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.070] getGlobalsAndPackages() ...
[10:50:59.070] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.070] |  Resolving globals: FALSE
[10:50:59.070] |  Tweak future expression to call with '...' arguments ...
[10:50:59.070] |  :  {
[10:50:59.070] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.070] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:59.070] |  :      "# as a global variable                                         "
[10:50:59.070] |  :      do.call(function(...) {
[10:50:59.070] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.070] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:59.070] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:59.070] |  :          "# anonymous function.                                          "
[10:50:59.070] |  :          "#                                                              "
[10:50:59.070] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:59.070] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:59.070] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.070] |  :          "# global environment, which is where globals are written.      "
[10:50:59.070] |  :          penv <- env <- environment(...future.FUN)
[10:50:59.070] |  :          repeat {
[10:50:59.070] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:59.070] |  :                  emptyenv())) 
[10:50:59.070] |  :                  break
[10:50:59.070] |  :              penv <- env
[10:50:59.070] |  :              env <- parent.env(env)
[10:50:59.070] |  :          }
[10:50:59.070] |  :          if (identical(penv, globalenv())) {
[10:50:59.070] |  :              environment(...future.FUN) <- environment()
[10:50:59.070] |  :          }
[10:50:59.070] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.070] |  :              !isNamespace(penv)) {
[10:50:59.070] |  :              parent.env(penv) <- environment()
[10:50:59.070] |  :          }
[10:50:59.070] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.070] |  :          {
[10:50:59.070] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.070] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.070] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.070] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:59.070] |  :              }
[10:50:59.070] |  :              {
[10:50:59.070] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.070] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.070] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.070] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:59.070] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:59.070] |  :                  })
[10:50:59.070] |  :              }
[10:50:59.070] |  :          }
[10:50:59.070] |  :      }, args = future.call.arguments)
[10:50:59.070] |  :  }
[10:50:59.071] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:59.071] |  Search for packages associated with the globals ...
[10:50:59.071] |  :  Packages associated with globals: [0] 
[10:50:59.071] |  :  Packages: [0] 
[10:50:59.072] |  Search for packages associated with the globals ... DONE
[10:50:59.072] |  Packages after dropping 'base': [0] 
[10:50:59.072] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.072] |  packages: [0] 
[10:50:59.072] getGlobalsAndPackages() ... done
[10:50:59.072] run() for Future (‘Future’) ...
[10:50:59.072] |  state: ‘created’
[10:50:59.073] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.073] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.073] |  Using MulticoreFutureBackend ...
[10:50:59.073] |  :  Launching futures ...
[10:50:59.073] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.073] |  :  .  |  getFutureData() ...
[10:50:59.073] |  :  .  |  :  getFutureCore() ...
[10:50:59.073] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:59.073] |  :  .  |  :  getFutureCore() ... done
[10:50:59.073] |  :  .  |  :  getFutureCapture() ...
[10:50:59.074] |  :  .  |  :  getFutureCapture() ... done
[10:50:59.074] |  :  .  |  :  getFutureContext() ...
[10:50:59.074] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.074] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:59.074] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.074] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:59.074] |  :  .  |  :  getFutureContext() ... done
[10:50:59.074] |  :  .  |  getFutureData() ... done
[10:50:59.075] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.075] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.077] |  :  .  |  MulticoreFuture started
[10:50:59.077] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.077] |  :  Launching futures ... done
[10:50:59.078] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.078] |  :  .  |  attachPackages() ...
[10:50:59.078] |  Using MulticoreFutureBackend ... done
[10:50:59.078] run() for Future (‘MulticoreFuture’) ... done
[10:50:59.078] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:59.078] Created future:
[10:50:59.078] |  :  .  |  attachPackages() ... DONE
[10:50:59.079] |  :  .  |  attachPackages() ...
[10:50:59.079] |  :  .  |  :  packages: [n=0] 
[10:50:59.079] |  :  .  |  attachPackages() ... DONE
[10:50:59.080] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.080] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.080] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.081] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.081] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.081] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:59.082] |  :  .  |  :  .  |  New stack:
[10:50:59.090] readImmediateCondition() ...
[10:50:59.091]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.091]  - Number of RDS files: 0
[10:50:59.082] |  :  .  |  :  .  |  List of 1
[10:50:59.082] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.082] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.082] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.082] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.082] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.082] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.082] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.091] readImmediateCondition() ... DONE
[10:50:59.091] |  :  .  |  :  .  |  Old stack:
[10:50:59.078] MulticoreFuture:
[10:50:59.078] Label: ‘future_replicate-1’
[10:50:59.078] Expression:
[10:50:59.078] {
[10:50:59.078]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.078]     "# expression in do.call(), because function called uses '...'  "
[10:50:59.078]     "# as a global variable                                         "
[10:50:59.078]     do.call(function(...) {
[10:50:59.078]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.078]         "# without having an '...' argument. This means '...' is treated"
[10:50:59.078]         "# as a global variable. This may happen when FUN() is an       "
[10:50:59.078]         "# anonymous function.                                          "
[10:50:59.078]         "#                                                              "
[10:50:59.078]         "# If an anonymous function, we will make sure to restore the   "
[10:50:59.078]         "# function environment of FUN() to the calling environment.    "
[10:50:59.078]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.078]         "# global environment, which is where globals are written.      "
[10:50:59.078]         penv <- env <- environment(...future.FUN)
[10:50:59.078]         repeat {
[10:50:59.078]             if (identical(env, globalenv()) || identical(env, 
[10:50:59.078]                 emptyenv())) 
[10:50:59.078]                 break
[10:50:59.078]             penv <- env
[10:50:59.078]             env <- parent.env(env)
[10:50:59.078]         }
[10:50:59.078]         if (identical(penv, globalenv())) {
[10:50:59.078]             environment(...future.FUN) <- environment()
[10:50:59.078]         }
[10:50:59.078]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.078]             !isNamespace(penv)) {
[10:50:59.078]             parent.env(penv) <- environment()
[10:50:59.078]         }
[10:50:59.078]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.078]         {
[10:50:59.078]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.078]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.078]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.078]                 on.exit(options(oopts), add = TRUE)
[10:50:59.078]             }
[10:50:59.078]             {
[10:50:59.078]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.078]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.078]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.078]                     envir = globalenv(), inherits = FALSE)
[10:50:59.078]                   ...future.FUN(...future.X_jj, ...)
[10:50:59.078]                 })
[10:50:59.078]             }
[10:50:59.078]         }
[10:50:59.078]     }, args = future.call.arguments)
[10:50:59.078] }
[10:50:59.078] Lazy evaluation: FALSE
[10:50:59.078] Asynchronous evaluation: TRUE
[10:50:59.078] Local evaluation: TRUE
[10:50:59.078] Environment: R_GlobalEnv
[10:50:59.078] Capture standard output: TRUE
[10:50:59.078] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:59.078] Immediate condition classes: ‘immediateCondition’
[10:50:59.078] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:59.078] Packages: <none>
[10:50:59.078] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:59.078] Resolved: FALSE
[10:50:59.078] Value: <not collected>
[10:50:59.078] Conditions captured: <none>
[10:50:59.078] Early signaling: FALSE
[10:50:59.078] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:59.078] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.092] Chunk #1 of 2 ... DONE
[10:50:59.092] Chunk #2 of 2 ...
[10:50:59.092]  - Finding globals in 'X' for chunk #2 ...
[10:50:59.092] getGlobalsAndPackages() ...
[10:50:59.092] |  Searching for globals ...
[10:50:59.093] |  :  globals found: [0] 
[10:50:59.093] |  Searching for globals ... DONE
[10:50:59.093] |  globals: [0] <none>
[10:50:59.095] |  packages: [0] <none>
[10:50:59.095] getGlobalsAndPackages() ... done
[10:50:59.096]    + additional globals found: [n=0] 
[10:50:59.096]    + additional namespaces needed: [n=0] 
[10:50:59.096]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:59.096]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:59.097]  - seeds: [3] <seeds>
[10:50:59.091] |  :  .  |  :  .  |  List of 1
[10:50:59.091] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.091] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.091] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.091] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.091] |  :  .  |  :  .  |      ...)  
[10:50:59.091] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.091] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.091] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.091] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.091] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.091] |  :  .  |  :  .  |      ...)  
[10:50:59.091] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.091] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.097] |  :  .  |  :  .  |  Not identical
[10:50:59.097]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.097] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:59.097] getGlobalsAndPackages() ...
[10:50:59.097] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.097] |  Resolving globals: FALSE
[10:50:59.098] |  Tweak future expression to call with '...' arguments ...
[10:50:59.098] |  :  {
[10:50:59.098] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.098] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:59.098] |  :      "# as a global variable                                         "
[10:50:59.098] |  :      do.call(function(...) {
[10:50:59.098] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.098] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:59.098] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:59.098] |  :          "# anonymous function.                                          "
[10:50:59.098] |  :          "#                                                              "
[10:50:59.098] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:59.098] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:59.098] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.098] |  :          "# global environment, which is where globals are written.      "
[10:50:59.098] |  :          penv <- env <- environment(...future.FUN)
[10:50:59.098] |  :          repeat {
[10:50:59.098] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:59.098] |  :                  emptyenv())) 
[10:50:59.098] |  :                  break
[10:50:59.098] |  :              penv <- env
[10:50:59.098] |  :              env <- parent.env(env)
[10:50:59.098] |  :          }
[10:50:59.098] |  :          if (identical(penv, globalenv())) {
[10:50:59.098] |  :              environment(...future.FUN) <- environment()
[10:50:59.098] |  :          }
[10:50:59.098] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.098] |  :              !isNamespace(penv)) {
[10:50:59.098] |  :              parent.env(penv) <- environment()
[10:50:59.098] |  :          }
[10:50:59.098] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.098] |  :          {
[10:50:59.098] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.098] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.098] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.098] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:59.098] |  :              }
[10:50:59.098] |  :              {
[10:50:59.098] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.098] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.098] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.098] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:59.098] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:59.098] |  :                  })
[10:50:59.098] |  :              }
[10:50:59.098] |  :          }
[10:50:59.098] |  :      }, args = future.call.arguments)
[10:50:59.098] |  :  }
[10:50:59.099] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:59.099] |  Search for packages associated with the globals ...
[10:50:59.099] |  :  Packages associated with globals: [0] 
[10:50:59.100] |  :  Packages: [0] 
[10:50:59.100] |  Search for packages associated with the globals ... DONE
[10:50:59.100] |  Packages after dropping 'base': [0] 
[10:50:59.100] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.100] |  packages: [0] 
[10:50:59.100] getGlobalsAndPackages() ... done
[10:50:59.101] run() for Future (‘Future’) ...
[10:50:59.101] |  state: ‘created’
[10:50:59.101] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.101] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.101] |  Using MulticoreFutureBackend ...
[10:50:59.101] |  :  Launching futures ...
[10:50:59.102] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.102] |  :  .  |  getFutureData() ...
[10:50:59.102] |  :  .  |  :  getFutureCore() ...
[10:50:59.102] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:59.102] |  :  .  |  :  getFutureCore() ... done
[10:50:59.102] |  :  .  |  :  getFutureCapture() ...
[10:50:59.102] |  :  .  |  :  getFutureCapture() ... done
[10:50:59.103] |  :  .  |  :  getFutureContext() ...
[10:50:59.103] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.097] |  :  .  |  :  .  |  :  List of 2
[10:50:59.097] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, ea[10:50:59.103] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
rlySignal = FALSE, envir = parent.frame())  
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.097] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.097] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.097] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.097] |  :  .  |  :  .  |  :      ...)  
[10:50:59.097] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.097] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.097] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.097] |  :  .  |  :  .  |  :      ...)  
[10:50:59.097] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.103] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.103] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:59.103] |  :  .  |  :  getFutureContext() ... done
[10:50:59.103] |  :  .  |  getFutureData() ... done
[10:50:59.104] |  :  .  |  :  .  |  :  Formals differ
[10:50:59.104] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.104] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:59.104] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:59.104] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:59.104] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.104] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:59.104] |  :  .  |  :  .  List of future strategies:
[10:50:59.104] |  :  .  |  :  .  1. sequential:
[10:50:59.104] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:59.104] |  :  .  |  :  .     - tweaked: FALSE
[10:50:59.104] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.106] |  :  .  |  MulticoreFuture started
[10:50:59.107] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.107] |  :  Launching futures ... done
[10:50:59.107] |  :  .  |  attachPackages() ...
[10:50:59.107] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.105] |  :  .  |  :  .  List of 1
[10:50:59.105] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.105] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.105] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.105] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.105] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.105] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.105] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.108] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.108] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:59.108] |  Using MulticoreFutureBackend ... done
[10:50:59.108] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.108] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.108] run() for Future (‘MulticoreFuture’) ... done
[10:50:59.108] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.108] |  :  .  |  attachPackages() ... DONE
[10:50:59.109] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.109] |  :  .  |  attachPackages() ...
[10:50:59.109] Created future:
[10:50:59.109] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:59.109] |  :  .  |  :  packages: [n=0] 
[10:50:59.109] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.109] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:59.109] |  :  .  |  attachPackages() ... DONE
[10:50:59.109] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.109] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.110] |  :  .  |  assign_globals() ...
[10:50:59.110] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.111] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.111] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.112] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.112] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.112] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:59.113] |  :  .  |  :  .  |  New stack:
[10:50:59.113] |  :  .  |  :  .  |  List of 1
[10:50:59.113] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.113] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.113] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.113] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.113] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.113] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.113] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.117] |  :  .  |  :  .  |  Old stack:
[10:50:59.110] |  :  .  |  List of 5
[10:50:59.110] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:59.110] |  :  .  |   $ future.call.arguments    : list()
[10:50:59.110] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.110] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:50:59.110] |  :  .  |    ..$ : int 0
[10:50:59.110] |  :  .  |    ..$ : int 0
[10:50:59.110] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:50:59.110] |  :  .  |    ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:50:59.110] |  :  .  |    ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:50:59.110] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:59.110] |  :  .  |   - attr(*, "where")=List of 5
[10:50:59.110] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:59.110] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:59.110] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:59.110] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:59.110] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:59.110] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:59.110] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:59.110] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.110] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:59.118] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:59.119] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:59.119] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:59.119] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:59.119] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:59.119] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:59.119] |  :  .  |  assign_globals() ... done
[10:50:59.121] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.122] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.122] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.122] readImmediateCondition() ...
[10:50:59.122] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:59.122] |  :  .  |  :  .  |  :  New stack:
[10:50:59.117] |  :  .  |  :  .  |  List of 1
[10:50:59.117] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(co[10:50:59.122]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
nstraints = "multicore"), gc = FALSE, 
[10:50:59.117] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.117] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.117] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.117] |  :  .  |  :  .  |      ...)  
[10:50:59.117] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.117] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.117] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.117] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.117] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.117] |  :  .  |  :  .  |      ...)  
[10:50:59.117] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.117] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.122] |  :  .  |  :  .  |  Not identical
[10:50:59.122]  - Number of RDS files: 0
[10:50:59.122] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:59.123] readImmediateCondition() ... DONE
[10:50:59.109] MulticoreFuture:
[10:50:59.109] Label: ‘future_replicate-2’
[10:50:59.109] Expression:
[10:50:59.109] {
[10:50:59.109]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.109]     "# expression in do.call(), because function called uses '...'  "
[10:50:59.109]     "# as a global variable                                         "
[10:50:59.109]     do.call(function(...) {
[10:50:59.109]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.109]         "# without having an '...' argument. This means '...' is treated"
[10:50:59.109]         "# as a global variable. This may happen when FUN() is an       "
[10:50:59.109]         "# anonymous function.                                          "
[10:50:59.109]         "#                                                              "
[10:50:59.109]         "# If an anonymous function, we will make sure to restore the   "
[10:50:59.109]         "# function environment of FUN() to the calling environment.    "
[10:50:59.109]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.109]         "# global environment, which is where globals are written.      "
[10:50:59.109]         penv <- env <- environment(...future.FUN)
[10:50:59.109]         repeat {
[10:50:59.109]             if (identical(env, globalenv()) || identical(env, 
[10:50:59.109]                 emptyenv())) 
[10:50:59.109]                 break
[10:50:59.109]             penv <- env
[10:50:59.109]             env <- parent.env(env)
[10:50:59.109]         }
[10:50:59.109]         if (identical(penv, globalenv())) {
[10:50:59.109]             environment(...future.FUN) <- environment()
[10:50:59.109]         }
[10:50:59.109]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.109]             !isNamespace(penv)) {
[10:50:59.109]             parent.env(penv) <- environment()
[10:50:59.109]         }
[10:50:59.109]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.109]         {
[10:50:59.109]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.109]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.109]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.109]                 on.exit(options(oopts), add = TRUE)
[10:50:59.109]             }
[10:50:59.109]             {
[10:50:59.109]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.109]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.109]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.109]                     envir = globalenv(), inherits = FALSE)
[10:50:59.109]                   ...future.FUN(...future.X_jj, ...)
[10:50:59.109]                 })
[10:50:59.109]             }
[10:50:59.109]         }
[10:50:59.109]     }, args = future.call.arguments)
[10:50:59.109] }
[10:50:59.109] Lazy evaluation: FALSE
[10:50:59.109] Asynchronous evaluation: TRUE
[10:50:59.109] Local evaluation: TRUE
[10:50:59.109] Environment: R_GlobalEnv
[10:50:59.109] Capture standard output: TRUE
[10:50:59.109] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:59.109] Immediate condition classes: ‘immediateCondition’
[10:50:59.109] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:59.109] Packages: <none>
[10:50:59.109] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:59.109] Resolved: FALSE
[10:50:59.109] Value: <not collected>
[10:50:59.109] Conditions captured: <none>
[10:50:59.109] Early signaling: FALSE
[10:50:59.109] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:59.109] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.123] Chunk #2 of 2 ... DONE
[10:50:59.124] Launching 2 futures (chunks) ... DONE
[10:50:59.124] Resolving 2 futures (chunks) ...
[10:50:59.124] value() on list ...
[10:50:59.124] |  recursive: 0
[10:50:59.125] |  length: 2
[10:50:59.125] |  
[10:50:59.122] |  :  .  |  :  .  |  :  List of 1
[10:50:59.122] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.122] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.122] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.122] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.122] |  :  .  |  :  .  |  :      ...)  
[10:50:59.122] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.122] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.122] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.122] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.122] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.122] |  :  .  |  :  .  |  :      ...)  
[10:50:59.122] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.122] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.125] |  Number of remaining objects: 2
[10:50:59.125] |  :  .  |  :  .  |  :  Old stack:
[10:50:59.125] |  checking value #1 ...
[10:50:59.125] |  :  'obj' is MulticoreFuture
[10:50:59.125] |  :  .  |  :  .  |  :  List of 1
[10:50:59.125] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.125] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.125] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.125] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.125] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.125] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.125] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.127] |  :  .  |  :  .  |  :  Not identical
[10:50:59.128] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:59.123] |  :  .  |  :  .  |  :  List of 2
[10:50:59.123] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.123] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.123] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.123] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.123] |  :  .  |  :  .  |  :      ...)  
[10:50:59.123] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.123] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.123] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.123] |  :  .  |  :  .  |  :      ...)  
[10:50:59.123] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.128] |  :  .  |  :  .  |  :  .  List of 2
[10:50:59.128] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.128] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.128] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.128] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.128] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.128] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.128] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.128] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.128] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.128] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.132] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:59.132] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:59.133] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:59.134] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:59.134] |  :  .  |  :  .  |  :  Formals differ
[10:50:59.134] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:59.134] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:59.134] |  :  .  |  :  .  |  List of future strategies:
[10:50:59.134] |  :  .  |  :  .  |  1. multicore:
[10:50:59.134] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.134] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:59.134] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:59.135] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:59.135] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:59.135] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:59.136] |  :  readImmediateCondition() ...
[10:50:59.136] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.136] |  :   - Number of RDS files: 0
[10:50:59.135] |  :  .  |  :  .  List of future strategies:
[10:50:59.135] |  :  .  |  :  .  1. sequential:
[10:50:59.135] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:59.135] |  :  .  |  :  .     - tweaked: FALSE
[10:50:59.135] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.137] |  :  readImmediateCondition() ... DONE
[10:50:59.137] |  checking value #1 ... done
[10:50:59.137] |  checking value #2 ...
[10:50:59.137] |  :  'obj' is MulticoreFuture
[10:50:59.135] |  :  .  |  :  .  |  List of 1
[10:50:59.135] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.135] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.135] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.135] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.135] |  :  .  |  :  .  |      ...)  
[10:50:59.135] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.135] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.135] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.135] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.135] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.135] |  :  .  |  :  .  |      ...)  
[10:50:59.135] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.135] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.138] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.138] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.138] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.139] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.139] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.139] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:59.139] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.139] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.139] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.137] |  :  .  |  :  .  List of 1
[10:50:59.137] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.137] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.137] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.137] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.137] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.137] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.137] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.141] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.141] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.141] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.141] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.142] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.142] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:59.142] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.142] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:59.142] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.142] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.143] |  :  .  |  assign_globals() ...
[10:50:59.148] |  :  readImmediateCondition() ...
[10:50:59.148] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.148] |  :   - Number of RDS files: 0
[10:50:59.148] |  :  readImmediateCondition() ... DONE
[10:50:59.148] |  checking value #2 ... done
[10:50:59.143] |  :  .  |  List of 5
[10:50:59.143] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:59.143] |  :  .  |   $ future.call.arguments    : list()
[10:50:59.143] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.143] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:50:59.143] |  :  .  |    ..$ : int 0
[10:50:59.143] |  :  .  |    ..$ : int 0
[10:50:59.143] |  :  .  |    ..$ : int 0
[10:50:59.143] |  :  .  |   $ ...future.seeds_ii       :List of 3
[10:50:59.143] |  :  .  |    ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:50:59.143] |  :  .  |    ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:50:59.143] |  :  .  |    ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:50:59.143] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:59.143] |  :  .  |   - attr(*, "where")=List of 5
[10:50:59.143] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:59.143] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:59.143] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:59.143] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:59.143] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:59.143] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:59.143] |  :  .  |   - attr(*, "total_size")= num 7184
[10:50:59.143] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.143] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:59.151] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:59.151] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:59.151] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:59.151] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:59.151] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:59.151] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:59.151] |  :  .  |  assign_globals() ... done
[10:50:59.154] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.154] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.154] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.154] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:59.154] |  :  .  |  :  .  |  :  New stack:
[10:50:59.159] |  Number of remaining objects: 2
[10:50:59.159] |  checking value #1 ...
[10:50:59.154] |  :  .  |  :  .  |  :  List of 1
[10:50:59.154] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.154] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.154] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.154] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.154] |  :  .  |  :  .  |  :      ...)  
[10:50:59.154] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.154] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.154] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.154] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.154] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.154] |  :  .  |  :  .  |  :      ...)  
[10:50:59.154] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.154] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.159] |  :  .  |  :  .  |  :  Old stack:
[10:50:59.159] |  :  'obj' is MulticoreFuture
[10:50:59.159] |  :  readImmediateCondition() ...
[10:50:59.160] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.160] |  :   - Number of RDS files: 0
[10:50:59.160] |  :  readImmediateCondition() ... DONE
[10:50:59.160] |  :  MulticoreFuture #1
[10:50:59.161] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:59.161] |  :  .  nx: 2
[10:50:59.161] |  :  .  relay: TRUE
[10:50:59.161] |  :  .  stdout: TRUE
[10:50:59.161] |  :  .  signal: TRUE
[10:50:59.162] |  :  .  resignal: FALSE
[10:50:59.162] |  :  .  force: TRUE
[10:50:59.162] |  :  .  relayed: [n=2] FALSE, FALSE
[10:50:59.162] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:50:59.162] |  :  .  until=1
[10:50:59.163] |  :  .  relaying element #1
[10:50:59.163] |  :  .  result() for MulticoreFuture ...
[10:50:59.159] |  :  .  |  :  .  |  :  List of 1
[10:50:59.159] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.159] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.159] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.159] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.159] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.159] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.159] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.163] |  :  .  |  :  .  |  :  Not identical
[10:50:59.164] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:59.164] |  :  .  |  readImmediateCondition() ...
[10:50:59.164] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.164] |  :  .  |   - Number of RDS files: 0
[10:50:59.164] |  :  .  |  readImmediateCondition() ... DONE
[10:50:59.165] |  :  .  |  result() for MulticoreFuture ...
[10:50:59.165] |  :  .  |  result() for MulticoreFuture ... done
[10:50:59.165] |  :  .  result() for MulticoreFuture ... done
[10:50:59.165] |  :  .  result() for MulticoreFuture ...
[10:50:59.166] |  :  .  result() for MulticoreFuture ... done
[10:50:59.166] |  :  .  result() for MulticoreFuture ...
[10:50:59.166] |  :  .  result() for MulticoreFuture ... done
[10:50:59.166] |  :  .  result() for MulticoreFuture ...
[10:50:59.167] |  :  .  result() for MulticoreFuture ... done
[10:50:59.167] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.167] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.167] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:50:59.167] |  :  value(<MulticoreFuture>, ...) ...
[10:50:59.168] |  :  .  result() for MulticoreFuture ...
[10:50:59.168] |  :  .  result() for MulticoreFuture ... done
[10:50:59.168] |  :  .  result() for MulticoreFuture ...
[10:50:59.168] |  :  .  result() for MulticoreFuture ... done
[10:50:59.168] |  :  .  value: <list>
[10:50:59.169] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:59.169] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:59.169] |  :  .  nx: 2
[10:50:59.169] |  :  .  relay: TRUE
[10:50:59.169] |  :  .  stdout: TRUE
[10:50:59.169] |  :  .  signal: TRUE
[10:50:59.169] |  :  .  resignal: FALSE
[10:50:59.169] |  :  .  force: TRUE
[10:50:59.170] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.164] |  :  .  |  :  .  |  :  .  List of 2
[10:50:59.164] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.164] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.164] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.164] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.164] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.164] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.164] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.164] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.164] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.164] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.170] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.170] |  :  .  until=2
[10:50:59.170] |  :  .  relaying element #2
[10:50:59.170] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.170] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:59.170] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.170] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:59.170] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:50:59.170] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:59.171] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:59.171] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:59.171] |  :  length: 1 (resolved future 1)
[10:50:59.171] |  checking value #1 ... done
[10:50:59.171] |  checking value #2 ...
[10:50:59.171] |  :  .  |  :  .  |  List of future strategies:
[10:50:59.171] |  :  .  |  :  .  |  1. multicore:
[10:50:59.171] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.171] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:59.171] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:59.171] |  :  'obj' is MulticoreFuture
[10:50:59.171] |  :  .  |  :  .  |  List of 1
[10:50:59.171] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.171] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.171] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.171] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.171] |  :  .  |  :  .  |      ...)  
[10:50:59.171] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.171] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.171] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.171] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.171] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.171] |  :  .  |  :  .  |      ...)  
[10:50:59.171] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.171] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.174] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.174] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.174] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.175] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.175] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.175] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:59.175] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.175] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.175] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.175] |  :  readImmediateCondition() ...
[10:50:59.176] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.176] |  :   - Number of RDS files: 0
[10:50:59.176] |  :  readImmediateCondition() ... DONE
[10:50:59.176] |  :  MulticoreFuture #2
[10:50:59.176] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:59.176] |  :  .  nx: 2
[10:50:59.176] |  :  .  relay: TRUE
[10:50:59.177] |  :  .  stdout: TRUE
[10:50:59.177] |  :  .  signal: TRUE
[10:50:59.177] |  :  .  resignal: FALSE
[10:50:59.177] |  :  .  force: TRUE
[10:50:59.177] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.177] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.177] |  :  .  until=2
[10:50:59.177] |  :  .  relaying element #2
[10:50:59.177] |  :  .  result() for MulticoreFuture ...
[10:50:59.178] |  :  .  |  readImmediateCondition() ...
[10:50:59.178] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.178] |  :  .  |   - Number of RDS files: 0
[10:50:59.178] |  :  .  |  readImmediateCondition() ... DONE
[10:50:59.179] |  :  .  |  result() for MulticoreFuture ...
[10:50:59.179] |  :  .  |  result() for MulticoreFuture ... done
[10:50:59.179] |  :  .  result() for MulticoreFuture ... done
[10:50:59.181] |  :  .  result() for MulticoreFuture ...
[10:50:59.181] |  :  .  result() for MulticoreFuture ... done
[10:50:59.181] |  :  .  result() for MulticoreFuture ...
[10:50:59.182] |  :  .  result() for MulticoreFuture ... done
[10:50:59.182] |  :  .  result() for MulticoreFuture ...
[10:50:59.182] |  :  .  result() for MulticoreFuture ... done
[10:50:59.182] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.182] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.183] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:59.183] |  :  value(<MulticoreFuture>, ...) ...
[10:50:59.183] |  :  .  result() for MulticoreFuture ...
[10:50:59.183] |  :  .  result() for MulticoreFuture ... done
[10:50:59.183] |  :  .  result() for MulticoreFuture ...
[10:50:59.183] |  :  .  result() for MulticoreFuture ... done
[10:50:59.183] |  :  .  value: <list>
[10:50:59.184] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:59.184] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:59.184] |  :  .  nx: 2
[10:50:59.184] |  :  .  relay: TRUE
[10:50:59.184] |  :  .  stdout: TRUE
[10:50:59.184] |  :  .  signal: TRUE
[10:50:59.184] |  :  .  resignal: FALSE
[10:50:59.184] |  :  .  force: TRUE
[10:50:59.184] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.185] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.185] |  :  .  until=2
[10:50:59.185] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.185] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.185] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:59.185] |  :  length: 0 (resolved future 2)
[10:50:59.185] |  checking value #2 ... done
[10:50:59.185] |  Relaying remaining futures ...
[10:50:59.186] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:59.186] |  :  .  nx: 2
[10:50:59.186] |  :  .  relay: TRUE
[10:50:59.186] |  :  .  stdout: TRUE
[10:50:59.186] |  :  .  signal: TRUE
[10:50:59.186] |  :  .  resignal: FALSE
[10:50:59.186] |  :  .  force: TRUE
[10:50:59.186] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.186] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:50:59.187] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.187] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.187] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:59.187] |  Relaying remaining futures ... done
[10:50:59.187] value() on list ... done
[10:50:59.187]  - Number of value chunks collected: 2
[10:50:59.187] Resolving 2 futures (chunks) ... DONE
[10:50:59.187] Reducing values from 2 chunks ...
[10:50:59.188]  - Number of values collected after concatenation: 5
[10:50:59.188]  - Number of values expected: 5
[10:50:59.188] Reducing values from 2 chunks ... DONE
[10:50:59.188] future_lapply() ... DONE
- example(replicate) ...
[10:50:59.188] future_lapply() ...
[10:50:59.189] Generating random seeds ...
[10:50:59.189] Generating random seed streams for 5 elements ...
[10:50:59.189] Generating random seed streams for 5 elements ... DONE
[10:50:59.189] Generating random seeds ... DONE
[10:50:59.189] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:59.190] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.190] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.190] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.191] Number of chunks: 2
[10:50:59.191] getGlobalsAndPackagesXApply() ...
[10:50:59.191]  - future.globals: TRUE
[10:50:59.191] getGlobalsAndPackages() ...
[10:50:59.191] |  Searching for globals ...
[10:50:59.193] |  :  globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:50:59.193] |  Searching for globals ... DONE
[10:50:59.193] |  Resolving globals: FALSE
[10:50:59.194] |  Search for packages associated with the globals ...
[10:50:59.194] |  :  Packages associated with globals: [1] ‘base’
[10:50:59.194] |  :  Packages: [1] ‘base’
[10:50:59.194] |  Search for packages associated with the globals ... DONE
[10:50:59.194] |  The total size of the 3 globals is 617 bytes (617 bytes)
[10:50:59.195] |  The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[10:50:59.195] |  Packages after dropping 'base': [0] 
[10:50:59.195] |  globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:50:59.195] |  packages: [0] 
[10:50:59.195] getGlobalsAndPackages() ... done
[10:50:59.195]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:50:59.195]  - needed namespaces: [n=0] 
[10:50:59.195] Finding globals ... DONE
[10:50:59.196]  - use_args: TRUE
[10:50:59.196]  - Getting '...' globals ...
[10:50:59.196] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:59.196] |  recursive: 0
[10:50:59.196] |  length: 1
[10:50:59.196] |  elements: ‘...’
[10:50:59.196] |  'obj' is DotDotDotList
[10:50:59.197] |  resolve(obj, ...) ...
[10:50:59.197] |  resolve(obj, ...) ... done
[10:50:59.197] |  length: 0 (resolved future 1)
[10:50:59.197] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:59.197]    - '...' content: [n=0] 
[10:50:59.197] List of 1
[10:50:59.197]  $ ...: list()
[10:50:59.197]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.197]  - attr(*, "where")=List of 1
[10:50:59.197]   ..$ ...:<environment: 0x564ad2a77340> 
[10:50:59.197]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.197]  - attr(*, "resolved")= logi TRUE
[10:50:59.197]  - attr(*, "total_size")= num NA
[10:50:59.200]  - Getting '...' globals ... DONE
[10:50:59.200] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:50:59.200] List of 4
[10:50:59.200]  $ ...future.FUN:function (...)  
[10:50:59.200]  $ foo          :function (x = 1, y = 2)  
[10:50:59.200]  $ x            : num 3
[10:50:59.200]  $ ...          : list()
[10:50:59.200]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.200]  - attr(*, "where")=List of 4
[10:50:59.200]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:59.200]   ..$ foo          :<environment: R_EmptyEnv> 
[10:50:59.200]   ..$ x            :<environment: R_EmptyEnv> 
[10:50:59.200]   ..$ ...          :<environment: 0x564ad2a77340> 
[10:50:59.200]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.200]  - attr(*, "resolved")= logi FALSE
[10:50:59.200]  - attr(*, "total_size")= num 7967
[10:50:59.205] Packages to be attached in all futures: [n=0] 
[10:50:59.205] getGlobalsAndPackagesXApply() ... DONE
[10:50:59.206] Number of futures (= number of chunks): 2
[10:50:59.206] Launching 2 futures (chunks) ...
[10:50:59.206] Chunk #1 of 2 ...
[10:50:59.206]  - Finding globals in 'X' for chunk #1 ...
[10:50:59.206] getGlobalsAndPackages() ...
[10:50:59.206] |  Searching for globals ...
[10:50:59.206] |  :  globals found: [0] 
[10:50:59.206] |  Searching for globals ... DONE
[10:50:59.207] |  globals: [0] <none>
[10:50:59.207] |  packages: [0] <none>
[10:50:59.207] getGlobalsAndPackages() ... done
[10:50:59.207]    + additional globals found: [n=0] 
[10:50:59.207]    + additional namespaces needed: [n=0] 
[10:50:59.207]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:59.207]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:59.207]  - seeds: [2] <seeds>
[10:50:59.207]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.207] getGlobalsAndPackages() ...
[10:50:59.207] |  globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.208] |  Resolving globals: FALSE
[10:50:59.208] |  Tweak future expression to call with '...' arguments ...
[10:50:59.208] |  :  {
[10:50:59.208] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.208] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:59.208] |  :      "# as a global variable                                         "
[10:50:59.208] |  :      do.call(function(...) {
[10:50:59.208] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.208] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:59.208] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:59.208] |  :          "# anonymous function.                                          "
[10:50:59.208] |  :          "#                                                              "
[10:50:59.208] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:59.208] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:59.208] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.208] |  :          "# global environment, which is where globals are written.      "
[10:50:59.208] |  :          penv <- env <- environment(...future.FUN)
[10:50:59.208] |  :          repeat {
[10:50:59.208] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:59.208] |  :                  emptyenv())) 
[10:50:59.208] |  :                  break
[10:50:59.208] |  :              penv <- env
[10:50:59.208] |  :              env <- parent.env(env)
[10:50:59.208] |  :          }
[10:50:59.208] |  :          if (identical(penv, globalenv())) {
[10:50:59.208] |  :              environment(...future.FUN) <- environment()
[10:50:59.208] |  :          }
[10:50:59.208] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.208] |  :              !isNamespace(penv)) {
[10:50:59.208] |  :              parent.env(penv) <- environment()
[10:50:59.208] |  :          }
[10:50:59.208] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.208] |  :          {
[10:50:59.208] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.208] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.208] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.208] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:59.208] |  :              }
[10:50:59.208] |  :              {
[10:50:59.208] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.208] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.208] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.208] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:59.208] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:59.208] |  :                  })
[10:50:59.208] |  :              }
[10:50:59.208] |  :          }
[10:50:59.208] |  :      }, args = future.call.arguments)
[10:50:59.208] |  :  }
[10:50:59.208] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:59.208] |  Search for packages associated with the globals ...
[10:50:59.209] |  :  Packages associated with globals: [0] 
[10:50:59.209] |  :  Packages: [0] 
[10:50:59.209] |  Search for packages associated with the globals ... DONE
[10:50:59.209] |  Packages after dropping 'base': [0] 
[10:50:59.209] |  globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.209] |  packages: [0] 
[10:50:59.209] getGlobalsAndPackages() ... done
[10:50:59.210] run() for Future (‘Future’) ...
[10:50:59.210] |  state: ‘created’
[10:50:59.210] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.210] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.210] |  Using MulticoreFutureBackend ...
[10:50:59.210] |  :  Launching futures ...
[10:50:59.210] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.210] |  :  .  |  getFutureData() ...
[10:50:59.211] |  :  .  |  :  getFutureCore() ...
[10:50:59.211] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:59.211] |  :  .  |  :  getFutureCore() ... done
[10:50:59.211] |  :  .  |  :  getFutureCapture() ...
[10:50:59.211] |  :  .  |  :  getFutureCapture() ... done
[10:50:59.211] |  :  .  |  :  getFutureContext() ...
[10:50:59.211] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.211] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:59.211] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.211] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:59.212] |  :  .  |  :  getFutureContext() ... done
[10:50:59.212] |  :  .  |  getFutureData() ... done
[10:50:59.212] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.212] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.214] |  :  .  |  MulticoreFuture started
[10:50:59.215] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.215] |  :  Launching futures ... done
[10:50:59.215] |  :  .  |  attachPackages() ...
[10:50:59.215] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:59.215] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.215] |  Using MulticoreFutureBackend ... done
[10:50:59.216] |  :  .  |  attachPackages() ... DONE
[10:50:59.216] |  :  .  |  attachPackages() ...
[10:50:59.216] run() for Future (‘MulticoreFuture’) ... done
[10:50:59.216] |  :  .  |  :  packages: [n=0] 
[10:50:59.216] Created future:
[10:50:59.216] |  :  .  |  attachPackages() ... DONE
[10:50:59.217] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.217] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.217] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.218] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.218] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.219] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:59.219] |  :  .  |  :  .  |  New stack:
[10:50:59.219] |  :  .  |  :  .  |  List of 1
[10:50:59.219] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.219] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.219] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.219] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.219] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.219] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.219] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.223] |  :  .  |  :  .  |  Old stack:
[10:50:59.223] |  :  .  |  :  .  |  List of 1
[10:50:59.223] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.223] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.223] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.223] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.223] |  :  .  |  :  .  |      ...)  
[10:50:59.223] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.223] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.223] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.223] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.223] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.223] |  :  .  |  :  .  |      ...)  
[10:50:59.223] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.223] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.228] |  :  .  |  :  .  |  Not identical
[10:50:59.228] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:59.229] readImmediateCondition() ...
[10:50:59.229]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.229]  - Number of RDS files: 0
[10:50:59.229] readImmediateCondition() ... DONE
[10:50:59.216] MulticoreFuture:
[10:50:59.216] Label: ‘future_replicate-1’
[10:50:59.216] Expression:
[10:50:59.216] {
[10:50:59.216]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.216]     "# expression in do.call(), because function called uses '...'  "
[10:50:59.216]     "# as a global variable                                         "
[10:50:59.216]     do.call(function(...) {
[10:50:59.216]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.216]         "# without having an '...' argument. This means '...' is treated"
[10:50:59.216]         "# as a global variable. This may happen when FUN() is an       "
[10:50:59.216]         "# anonymous function.                                          "
[10:50:59.216]         "#                                                              "
[10:50:59.216]         "# If an anonymous function, we will make sure to restore the   "
[10:50:59.216]         "# function environment of FUN() to the calling environment.    "
[10:50:59.216]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.216]         "# global environment, which is where globals are written.      "
[10:50:59.216]         penv <- env <- environment(...future.FUN)
[10:50:59.216]         repeat {
[10:50:59.216]             if (identical(env, globalenv()) || identical(env, 
[10:50:59.216]                 emptyenv())) 
[10:50:59.216]                 break
[10:50:59.216]             penv <- env
[10:50:59.216]             env <- parent.env(env)
[10:50:59.216]         }
[10:50:59.216]         if (identical(penv, globalenv())) {
[10:50:59.216]             environment(...future.FUN) <- environment()
[10:50:59.216]         }
[10:50:59.216]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.216]             !isNamespace(penv)) {
[10:50:59.216]             parent.env(penv) <- environment()
[10:50:59.216]         }
[10:50:59.216]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.216]         {
[10:50:59.216]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.216]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.216]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.216]                 on.exit(options(oopts), add = TRUE)
[10:50:59.216]             }
[10:50:59.216]             {
[10:50:59.216]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.216]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.216]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.216]                     envir = globalenv(), inherits = FALSE)
[10:50:59.216]                   ...future.FUN(...future.X_jj, ...)
[10:50:59.216]                 })
[10:50:59.216]             }
[10:50:59.216]         }
[10:50:59.216]     }, args = future.call.arguments)
[10:50:59.216] }
[10:50:59.216] Lazy evaluation: FALSE
[10:50:59.216] Asynchronous evaluation: TRUE
[10:50:59.216] Local evaluation: TRUE
[10:50:59.216] Environment: 0x564ad2a78d80
[10:50:59.216] Capture standard output: TRUE
[10:50:59.216] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:59.216] Immediate condition classes: ‘immediateCondition’
[10:50:59.216] Globals: 7 objects totaling 899 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, ...)
[10:50:59.216] Packages: <none>
[10:50:59.216] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:59.216] Resolved: FALSE
[10:50:59.216] Value: <not collected>
[10:50:59.216] Conditions captured: <none>
[10:50:59.216] Early signaling: FALSE
[10:50:59.216] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:59.216] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.230] Chunk #1 of 2 ... DONE
[10:50:59.230] Chunk #2 of 2 ...
[10:50:59.230]  - Finding globals in 'X' for chunk #2 ...
[10:50:59.231] getGlobalsAndPackages() ...
[10:50:59.231] |  Searching for globals ...
[10:50:59.231] |  :  globals found: [0] 
[10:50:59.231] |  Searching for globals ... DONE
[10:50:59.232] |  globals: [0] <none>
[10:50:59.232] |  packages: [0] <none>
[10:50:59.232] getGlobalsAndPackages() ... done
[10:50:59.232]    + additional globals found: [n=0] 
[10:50:59.232]    + additional namespaces needed: [n=0] 
[10:50:59.232]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:59.232]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:59.232]  - seeds: [3] <seeds>
[10:50:59.233]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.233] getGlobalsAndPackages() ...
[10:50:59.233] |  globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.233] |  Resolving globals: FALSE
[10:50:59.233] |  Tweak future expression to call with '...' arguments ...
[10:50:59.234] |  :  {
[10:50:59.234] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.234] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:59.234] |  :      "# as a global variable                                         "
[10:50:59.234] |  :      do.call(function(...) {
[10:50:59.234] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.234] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:59.234] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:59.234] |  :          "# anonymous function.                                          "
[10:50:59.234] |  :          "#                                                              "
[10:50:59.234] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:59.234] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:59.234] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.234] |  :          "# global environment, which is where globals are written.      "
[10:50:59.234] |  :          penv <- env <- environment(...future.FUN)
[10:50:59.234] |  :          repeat {
[10:50:59.234] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:59.234] |  :                  emptyenv())) 
[10:50:59.234] |  :                  break
[10:50:59.234] |  :              penv <- env
[10:50:59.234] |  :              env <- parent.env(env)
[10:50:59.234] |  :          }
[10:50:59.234] |  :          if (identical(penv, globalenv())) {
[10:50:59.234] |  :              environment(...future.FUN) <- environment()
[10:50:59.234] |  :          }
[10:50:59.234] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.234] |  :              !isNamespace(penv)) {
[10:50:59.234] |  :              parent.env(penv) <- environment()
[10:50:59.234] |  :          }
[10:50:59.234] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.234] |  :          {
[10:50:59.234] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.234] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.234] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.234] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:59.234] |  :              }
[10:50:59.234] |  :              {
[10:50:59.234] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.234] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.234] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.234] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:59.234] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:59.234] |  :                  })
[10:50:59.234] |  :              }
[10:50:59.234] |  :          }
[10:50:59.234] |  :      }, args = future.call.arguments)
[10:50:59.234] |  :  }
[10:50:59.234] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:59.234] |  Search for packages associated with the globals ...
[10:50:59.235] |  :  Packages associated with globals: [0] 
[10:50:59.235] |  :  Packages: [0] 
[10:50:59.235] |  Search for packages associated with the globals ... DONE
[10:50:59.235] |  Packages after dropping 'base': [0] 
[10:50:59.236] |  globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.236] |  packages: [0] 
[10:50:59.236] getGlobalsAndPackages() ... done
[10:50:59.236] run() for Future (‘Future’) ...
[10:50:59.236] |  state: ‘created’
[10:50:59.237] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.237] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.237] |  Using MulticoreFutureBackend ...
[10:50:59.237] |  :  Launching futures ...
[10:50:59.237] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.237] |  :  .  |  getFutureData() ...
[10:50:59.237] |  :  .  |  :  getFutureCore() ...
[10:50:59.238] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:50:59.238] |  :  .  |  :  getFutureCore() ... done
[10:50:59.238] |  :  .  |  :  getFutureCapture() ...
[10:50:59.238] |  :  .  |  :  getFutureCapture() ... done
[10:50:59.238] |  :  .  |  :  getFutureContext() ...
[10:50:59.238] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.238] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:50:59.238] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.239] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:50:59.239] |  :  .  |  :  getFutureContext() ... done
[10:50:59.239] |  :  .  |  getFutureData() ... done
[10:50:59.239] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.240] |  :  .  |  requestCore(..., workers = 2) ...
[10:50:59.228] |  :  .  |  :  .  |  :  List of 2
[10:50:59.228] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.228] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.228] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.228] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.228] |  :  .  |  :  .  |  :      ...)  
[10:50:59.228] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.228] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.228] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.228] |  :  .  |  :  .  |  :      ...)  
[10:50:59.228] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.240] |  :  .  |  :  .  |  :  Formals differ
[10:50:59.240] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:59.241] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:59.241] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:59.241] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:59.241] |  :  .  |  :  .  List of future strategies:
[10:50:59.241] |  :  .  |  :  .  1. sequential:
[10:50:59.241] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:59.241] |  :  .  |  :  .     - tweaked: FALSE
[10:50:59.241] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.242] |  :  .  |  MulticoreFuture started
[10:50:59.242] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:50:59.242] |  :  Launching futures ... done
[10:50:59.243] |  :  .  |  attachPackages() ...
[10:50:59.243] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.243] |  :  .  |  :  packages: [n=1] ‘future’
[10:50:59.243] |  Using MulticoreFutureBackend ... done
[10:50:59.243] run() for Future (‘MulticoreFuture’) ... done
[10:50:59.244] |  :  .  |  attachPackages() ... DONE
[10:50:59.244] |  :  .  |  attachPackages() ...
[10:50:59.242] |  :  .  |  :  .  List of 1
[10:50:59.242] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.242] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.242] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.242] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.242] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.242] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.242] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.245] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.245] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.245] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.246] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.246] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.246] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:59.246] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.246] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:59.246] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.247] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.247] |  :  .  |  assign_globals() ...
[10:50:59.244] Created future:
[10:50:59.244] |  :  .  |  :  packages: [n=0] 
[10:50:59.247] |  :  .  |  attachPackages() ... DONE
[10:50:59.249] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.250] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.251] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.252] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.252] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.253] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:50:59.253] |  :  .  |  :  .  |  New stack:
[10:50:59.247] |  :  .  |  List of 7
[10:50:59.247] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:59.247] |  :  .  |   $ foo                      :function (x = 1, y = 2)  
[10:50:59.247] |  :  .  |   $ x                        : num 3
[10:50:59.247] |  :  .  |   $ future.call.arguments    : list()
[10:50:59.247] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.247] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:50:59.247] |  :  .  |    ..$ : int 0
[10:50:59.247] |  :  .  |    ..$ : int 0
[10:50:59.247] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:50:59.247] |  :  .  |    ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:50:59.247] |  :  .  |    ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:50:59.247] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:59.247] |  :  .  |   - attr(*, "where")=List of 7
[10:50:59.247] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |    ..$ foo                      :<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |    ..$ x                        :<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:59.247] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:59.247] |  :  .  |   - attr(*, "total_size")= num 7967
[10:50:59.247] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.247] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:59.254] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:59.255] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:59.255] |  :  .  |  - reassign environment for ‘foo’ [where=emptyenv()]
[10:50:59.255] |  :  .  |  - copied ‘foo’ to environment
[10:50:59.255] |  :  .  |  - copied ‘x’ to environment
[10:50:59.255] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:59.255] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:59.255] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:59.255] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:59.257] |  :  .  |  assign_globals() ... done
[10:50:59.253] |  :  .  |  :  .  |  List of 1
[10:50:59.253] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.253] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.253] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.253] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.253] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.253] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.253] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.258] |  :  .  |  :  .  |  Old stack:
[10:50:59.260] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.260] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.260] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.260] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:59.260] |  :  .  |  :  .  |  :  New stack:
[10:50:59.262] readImmediateCondition() ...
[10:50:59.262]   - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.263]  - Number of RDS files: 0
[10:50:59.263] readImmediateCondition() ... DONE
[10:50:59.260] |  :  .  |  :  .  |  :  List of 1
[10:50:59.260] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.260] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.260] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.260] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.260] |  :  .  |  :  .  |  :      ...)  
[10:50:59.260] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.260] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.260] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.260] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.260] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.260] |  :  .  |  :  .  |  :      ...)  
[10:50:59.260] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.260] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.264] |  :  .  |  :  .  |  :  Old stack:
[10:50:59.247] MulticoreFuture:
[10:50:59.247] Label: ‘future_replicate-2’
[10:50:59.247] Expression:
[10:50:59.247] {
[10:50:59.247]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.247]     "# expression in do.call(), because function called uses '...'  "
[10:50:59.247]     "# as a global variable                                         "
[10:50:59.247]     do.call(function(...) {
[10:50:59.247]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.247]         "# without having an '...' argument. This means '...' is treated"
[10:50:59.247]         "# as a global var[10:50:59.258] |  :  .  |  :  .  |  List of 1
[10:50:59.258] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(coiable. This may happen when FUN() is an       "
[10:50:59.247]         "# anonymous function.                                   nstraints = "multicore"), gc = FALSE, 
[10:50:59.258] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[1       "
[10:50:59.247]         "#                                                              "
[10:50:59.247]         "# If a0:50:59.258] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.258n anonymous function, we will make sure to restore the   "
[10:50:59.247]         "# function environment of FUN() to the callin] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects g environment.    "
[10:50:59.247]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.247]     = +Inf, 
[10:50:59.258] |  :  .  |  :  .  |      ...)  
[10:50:59.258] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [    "# global environment, which is where globals are written.      "
[10:50:59.247]         penv <- env <- environment(...futur1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.258] |  :  .  |  :  .  |    ..- attr(*, "tweakable.FUN)
[10:50:59.247]         repeat {
[10:50:59.247]             if (identical(env, globalenv()) || identical(env, 
[10:50:59.2e")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.258] |  :  .  |  :  .  |    ..- attr(*,47]                 emptyenv())) 
[10:50:59.247]                 break
[10:50:59.247]             penv <- env
[10:50:59.247]     "call")= language plan(strategy)
[10:50:59.258] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend',         env <- parent.env(env)
[10:50:59.247]         }
[10:50:59.247]         if (identical(penv, globalenv())) {
[10:50:59.24 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.258] |  :  .  |  :  .  |  7]             environment(...future.FUN) <- environment()
[10:50:59.247]         }
[10:50:59.247]         else if (!identical(p  .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.2env, emptyenv()) && !is.null(penv) && 
[10:50:59.247]             !isNamespace(penv)) {
[10:50:59.247]             parent.env(pe58] |  :  .  |  :  .  |      ...)  
[10:50:59.258] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "mnv) <- environment()
[10:50:59.247]         }
[10:50:59.247]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.247axSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.258] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureSt]         {
[10:50:59.247]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.247]      rategyList" "list"
       if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.247]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.247]                 on.exit(options(oopts), add = TRUE)
[10:50:59.247]             }
[10:50:59.247]             {
[10:50:59.247]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.247]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.247]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.247]                     envir = globalenv(), inherits = FALSE)
[10:50:59.247]                   ...future.FUN(...future.X_jj, ...)
[10:50:59.247]                 })
[10:50:59.247]             }
[10:50:59.247]         }
[10:50:59.247]     }, args = future.call.arguments)
[10:50:59.247] }
[10:50:59.247] Lazy evaluation: FALSE
[10:50:59.247] Asynchronous evaluation: TRUE
[10:50:59.247] Local evaluation: TRUE
[10:50:59.247] Environment: 0x564ad2a78d80
[10:50:59.247] Capture standard output: TRUE
[10:50:59.247] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:59.247] Immediate condition classes: ‘immediateCondition’
[10:50:59.247] Globals: 7 objects totaling 947 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, ...)
[10:50:59.247] Packages: <none>
[10:50:59.247] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:59.247] Resolved: FALSE
[10:50:59.247] Value: <not collected>
[10:50:59.247] Conditions captured: <none>
[10:50:59.247] Early signaling: FALSE
[10:50:59.247] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:59.247] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.264] |  :  .  |  :  .  |  Not identical
[10:50:59.264] Chunk #2 of 2 ... DONE
[10:50:59.264] |  :  .  |  :  .  |  all.equal() for future ...
[10:50:59.264] Launching 2 futures (chunks) ... DONE
[10:50:59.264] Resolving 2 futures (chunks) ...
[10:50:59.265] value() on list ...
[10:50:59.265] |  recursive: 0
[10:50:59.265] |  length: 2
[10:50:59.266] |  
[10:50:59.264] |  :  .  |  :  .  |  :  List of 1
[10:50:59.264] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.264] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.266] |  Number of remaining objects: 2
[10:50:59.266] |  :  .  |  :  .  |  :  Not identical
[10:50:59.266] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:59.266] |  checking value #1 ...
[10:50:59.266] |  :  'obj' is MulticoreFuture
[10:50:59.266] |  :  .  |  :  .  |  :  .  List of 2
[10:50:59.266] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.266] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.266] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.266] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.266] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.266] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.266] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.266] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.266] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.266] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.271] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:59.264] |  :  .  |  :  .  |  :  List of 2
[10:50:59.264] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, ea[10:50:59.271] |  :  .  |  :  .  |  :  all.equal() for future ... done
rlySignal = FALSE, envir = parent.frame())  
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.264] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.264] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.264] |  :  .  |  :  .  |  :      ...)  
[10:50:59.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.264] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.264] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.264] |  :  .  |  :  .  |  :      ...)  
[10:50:59.264] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.271] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:59.271] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:59.271] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:59.271] |  :  .  |  :  .  |  List of future strategies:
[10:50:59.271] |  :  .  |  :  .  |  1. multicore:
[10:50:59.271] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.271] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:59.271] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:59.271] |  :  .  |  :  .  |  :  Formals differ
[10:50:59.272] |  :  .  |  :  .  |  all.equal() for future ... done
[10:50:59.272] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:50:59.272] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:50:59.272] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:50:59.272] |  :  .  |  :  .  List of future strategies:
[10:50:59.272] |  :  .  |  :  .  1. sequential:
[10:50:59.272] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:59.272] |  :  .  |  :  .     - tweaked: FALSE
[10:50:59.272] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.272] |  :  .  |  :  .  |  List of 1
[10:50:59.272] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.272] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.272] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.272] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.272] |  :  .  |  :  .  |      ...)  
[10:50:59.272] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.272] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.272] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.272] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.272] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.272] |  :  .  |  :  .  |      ...)  
[10:50:59.272] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.272] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.275] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.273] |  :  .  |  :  .  List of 1
[10:50:59.273] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.273] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.273] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.273] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.273] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.273] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.273] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.276] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.276] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.276] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.276] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.276] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.276] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.276] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.276] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.277] |  :  readImmediateCondition() ...
[10:50:59.277] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.277] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:50:59.277] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:59.277] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.277] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.277] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.277] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.277] |  :   - Number of RDS files: 0
[10:50:59.277] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.277] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:50:59.277] |  :  readImmediateCondition() ... DONE
[10:50:59.277] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.278] |  checking value #1 ... done
[10:50:59.278] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.278] |  checking value #2 ...
[10:50:59.278] |  :  'obj' is MulticoreFuture
[10:50:59.278] |  :  .  |  assign_globals() ...
[10:50:59.278] |  :  .  |  List of 7
[10:50:59.278] |  :  .  |   $ ...future.FUN            :function (...)  
[10:50:59.278] |  :  .  |   $ foo                      :function (x = 1, y = 2)  
[10:50:59.278] |  :  .  |   $ x                        : num 3
[10:50:59.278] |  :  .  |   $ future.call.arguments    : list()
[10:50:59.278] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.278] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:50:59.278] |  :  .  |    ..$ : int 0
[10:50:59.278] |  :  .  |    ..$ : int 0
[10:50:59.278] |  :  .  |    ..$ : int 0
[10:50:59.278] |  :  .  |   $ ...future.seeds_ii       :List of 3
[10:50:59.278] |  :  .  |    ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:50:59.278] |  :  .  |    ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:50:59.278] |  :  .  |    ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:50:59.278] |  :  .  |   $ ...future.globals.maxSize: NULL
[10:50:59.278] |  :  .  |   - attr(*, "where")=List of 7
[10:50:59.278] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |    ..$ foo                      :<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |    ..$ x                        :<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:50:59.278] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:50:59.278] |  :  .  |   - attr(*, "total_size")= num 7967
[10:50:59.278] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.278] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:50:59.288] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:50:59.288] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:50:59.288] |  :  .  |  - reassign environment for ‘foo’ [where=emptyenv()]
[10:50:59.288] |  :  .  |  - copied ‘foo’ to environment
[10:50:59.288] |  :  .  |  - copied ‘x’ to environment
[10:50:59.288] |  :  readImmediateCondition() ...
[10:50:59.288] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:50:59.288] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.289] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:50:59.289] |  :   - Number of RDS files: 0
[10:50:59.289] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:50:59.289] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:50:59.289] |  :  readImmediateCondition() ... DONE
[10:50:59.289] |  :  .  |  assign_globals() ... done
[10:50:59.289] |  checking value #2 ... done
[10:50:59.291] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.291] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:50:59.292] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:50:59.292] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:50:59.292] |  :  .  |  :  .  |  :  New stack:
[10:50:59.292] |  :  .  |  :  .  |  :  List of 1
[10:50:59.292] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.292] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.292] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.292] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.292] |  :  .  |  :  .  |  :      ...)  
[10:50:59.292] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.292] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.292] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.292] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.292] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.292] |  :  .  |  :  .  |  :      ...)  
[10:50:59.292] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.292] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.295] |  :  .  |  :  .  |  :  Old stack:
[10:50:59.295] |  :  .  |  :  .  |  :  List of 1
[10:50:59.295] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.295] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.295] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.295] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.295] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.295] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.295] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.297] |  :  .  |  :  .  |  :  Not identical
[10:50:59.297] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:50:59.299] |  Number of remaining objects: 2
[10:50:59.300] |  checking value #1 ...
[10:50:59.300] |  :  'obj' is MulticoreFuture
[10:50:59.300] |  :  readImmediateCondition() ...
[10:50:59.300] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.301] |  :   - Number of RDS files: 0
[10:50:59.301] |  :  readImmediateCondition() ... DONE
[10:50:59.301] |  :  MulticoreFuture #1
[10:50:59.301] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:59.301] |  :  .  nx: 2
[10:50:59.302] |  :  .  relay: TRUE
[10:50:59.302] |  :  .  stdout: TRUE
[10:50:59.302] |  :  .  signal: TRUE
[10:50:59.302] |  :  .  resignal: FALSE
[10:50:59.302] |  :  .  force: TRUE
[10:50:59.302] |  :  .  relayed: [n=2] FALSE, FALSE
[10:50:59.303] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:50:59.303] |  :  .  until=1
[10:50:59.303] |  :  .  relaying element #1
[10:50:59.303] |  :  .  result() for MulticoreFuture ...
[10:50:59.304] |  :  .  |  readImmediateCondition() ...
[10:50:59.304] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.305] |  :  .  |   - Number of RDS files: 0
[10:50:59.305] |  :  .  |  readImmediateCondition() ... DONE
[10:50:59.305] |  :  .  |  result() for MulticoreFuture ...
[10:50:59.297] |  :  .  |  :  .  |  :  .  List of 2
[10:50:59.297] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.297] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.297] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.297] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.297] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availab[10:50:59.305] |  :  .  |  result() for MulticoreFuture ... done
leCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.297] |  :  .  |  :  .  |  :  .      ...)  
[10:50:59.297] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.297] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.297] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.297] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:50:59.306] |  :  .  result() for MulticoreFuture ... done
[10:50:59.306] |  :  .  result() for MulticoreFuture ...
[10:50:59.306] |  :  .  result() for MulticoreFuture ... done
[10:50:59.306] |  :  .  |  :  .  |  :  .  Formals differ
[10:50:59.306] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:50:59.306] |  :  .  result() for MulticoreFuture ...
[10:50:59.307] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:50:59.307] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:50:59.307] |  :  .  result() for MulticoreFuture ... done
[10:50:59.307] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:50:59.307] |  :  .  result() for MulticoreFuture ...
[10:50:59.307] |  :  .  result() for MulticoreFuture ... done
[10:50:59.307] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.307] |  :  .  |  :  .  |  List of future strategies:
[10:50:59.307] |  :  .  |  :  .  |  1. multicore:
[10:50:59.307] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.307] |  :  .  |  :  .  |     - tweaked: FALSE
[10:50:59.307] |  :  .  |  :  .  |     - call: plan(strategy)
[10:50:59.307] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.308] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:50:59.308] |  :  value(<MulticoreFuture>, ...) ...
[10:50:59.308] |  :  .  result() for MulticoreFuture ...
[10:50:59.308] |  :  .  result() for MulticoreFuture ... done
[10:50:59.308] |  :  .  result() for MulticoreFuture ...
[10:50:59.309] |  :  .  result() for MulticoreFuture ... done
[10:50:59.309] |  :  .  value: <list>
[10:50:59.309] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:59.309] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:50:59.309] |  :  .  nx: 2
[10:50:59.310] |  :  .  relay: TRUE
[10:50:59.310] |  :  .  stdout: TRUE
[10:50:59.310] |  :  .  signal: TRUE
[10:50:59.310] |  :  .  resignal: FALSE
[10:50:59.310] |  :  .  force: TRUE
[10:50:59.310] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.311] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.311] |  :  .  until=2
[10:50:59.311] |  :  .  relaying element #2
[10:50:59.311] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.311] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.311] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:50:59.312] |  :  length: 1 (resolved future 1)
[10:50:59.312] |  checking value #1 ... done
[10:50:59.312] |  checking value #2 ...
[10:50:59.312] |  :  'obj' is MulticoreFuture
[10:50:59.308] |  :  .  |  :  .  |  List of 1
[10:50:59.308] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.308] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.308] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.308] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.308] |  :  .  |  :  .  |      ...)  
[10:50:59.308] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.308] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.308] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.308] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.308] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.308] |  :  .  |  :  .  |      ...)  
[10:50:59.308] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.308] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.313] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:50:59.313] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:50:59.313] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.313] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.313] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.313] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:50:59.313] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:50:59.314] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.314] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:50:59.314] |  :  readImmediateCondition() ...
[10:50:59.314] |  :    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.314] |  :   - Number of RDS files: 0
[10:50:59.314] |  :  readImmediateCondition() ... DONE
[10:50:59.314] |  :  MulticoreFuture #2
[10:50:59.315] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:59.315] |  :  .  nx: 2
[10:50:59.315] |  :  .  relay: TRUE
[10:50:59.315] |  :  .  stdout: TRUE
[10:50:59.315] |  :  .  signal: TRUE
[10:50:59.315] |  :  .  resignal: FALSE
[10:50:59.315] |  :  .  force: TRUE
[10:50:59.315] |  :  .  relayed: [n=2] TRUE, FALSE
[10:50:59.315] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:50:59.316] |  :  .  until=2
[10:50:59.316] |  :  .  relaying element #2
[10:50:59.316] |  :  .  result() for MulticoreFuture ...
[10:50:59.316] |  :  .  |  readImmediateCondition() ...
[10:50:59.316] |  :  .  |    - path: ‘/tmp/RtmpZ6odx5/.future/immediateConditions’
[10:50:59.317] |  :  .  |   - Number of RDS files: 0
[10:50:59.317] |  :  .  |  readImmediateCondition() ... DONE
[10:50:59.317] |  :  .  |  result() for MulticoreFuture ...
[10:50:59.317] |  :  .  |  result() for MulticoreFuture ... done
[10:50:59.317] |  :  .  result() for MulticoreFuture ... done
[10:50:59.318] |  :  .  result() for MulticoreFuture ...
[10:50:59.318] |  :  .  result() for MulticoreFuture ... done
[10:50:59.318] |  :  .  result() for MulticoreFuture ...
[10:50:59.318] |  :  .  result() for MulticoreFuture ... done
[10:50:59.318] |  :  .  result() for MulticoreFuture ...
[10:50:59.319] |  :  .  result() for MulticoreFuture ... done
[10:50:59.319] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.319] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.319] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:59.319] |  :  value(<MulticoreFuture>, ...) ...
[10:50:59.319] |  :  .  result() for MulticoreFuture ...
[10:50:59.319] |  :  .  result() for MulticoreFuture ... done
[10:50:59.320] |  :  .  result() for MulticoreFuture ...
[10:50:59.320] |  :  .  result() for MulticoreFuture ... done
[10:50:59.320] |  :  .  value: <list>
[10:50:59.320] |  :  value(<MulticoreFuture>, ...) ... done
[10:50:59.320] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:50:59.320] |  :  .  nx: 2
[10:50:59.321] |  :  .  relay: TRUE
[10:50:59.321] |  :  .  stdout: TRUE
[10:50:59.321] |  :  .  signal: TRUE
[10:50:59.321] |  :  .  resignal: FALSE
[10:50:59.321] |  :  .  force: TRUE
[10:50:59.321] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.321] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.321] |  :  .  until=2
[10:50:59.321] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.322] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.322] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:50:59.322] |  :  length: 0 (resolved future 2)
[10:50:59.322] |  checking value #2 ... done
[10:50:59.322] |  Relaying remaining futures ...
[10:50:59.322] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:50:59.322] |  :  .  nx: 2
[10:50:59.322] |  :  .  relay: TRUE
[10:50:59.322] |  :  .  stdout: TRUE
[10:50:59.323] |  :  .  signal: TRUE
[10:50:59.323] |  :  .  resignal: FALSE
[10:50:59.323] |  :  .  force: TRUE
[10:50:59.323] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.323] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:50:59.323] |  :  .  relayed: [n=2] TRUE, TRUE
[10:50:59.323] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:50:59.323] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:50:59.323] |  Relaying remaining futures ... done
[10:50:59.324] value() on list ... done
[10:50:59.324]  - Number of value chunks collected: 2
[10:50:59.324] Resolving 2 futures (chunks) ... DONE
[10:50:59.324] Reducing values from 2 chunks ...
[10:50:59.324]  - Number of values collected after concatenation: 5
[10:50:59.324]  - Number of values expected: 5
[10:50:59.324] Reducing values from 2 chunks ... DONE
[10:50:59.324] future_lapply() ... DONE
[10:50:59.326] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.326] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:50:59.327] |  :  all.equal() for FutureStrategyList ...
[10:50:59.327] |  :  .  New stack:
[10:50:59.327] |  :  .  List of 1
[10:50:59.327] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.327] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.327] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.327] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.327] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.327] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:59.327] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.329] |  :  .  Old stack:
[10:50:59.330] |  :  .  List of 1
[10:50:59.330] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.330] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.330] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.330] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.330] |  :  .      ...)  
[10:50:59.330] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.330] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.330] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.330] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.330] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.330] |  :  .      ...)  
[10:50:59.330] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.330] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.333] |  :  .  Not identical
[10:50:59.333] |  :  .  all.equal() for future ...
[10:50:59.333] |  :  .  |  List of 2
[10:50:59.333] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.333] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.333] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.333] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.333] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.333] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:59.333] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:50:59.333] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:50:59.333] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:50:59.333] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.333] |  :  .  |      ...)  
[10:50:59.333] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.333] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.333] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.333] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4f08f18> 
[10:50:59.333] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:50:59.333] |  :  .  |      ...)  
[10:50:59.333] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:50:59.338] |  :  .  |  Formals differ
[10:50:59.338] |  :  .  all.equal() for future ... done
[10:50:59.338] |  :  .  Future strategies differ at level 1
[10:50:59.338] |  :  all.equal() for FutureStrategyList ... done
[10:50:59.338] |  :  plan(): Setting new future strategy stack:
[10:50:59.338] |  :  List of future strategies:
[10:50:59.338] |  :  1. sequential:
[10:50:59.338] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:50:59.338] |  :     - tweaked: FALSE
[10:50:59.338] |  :     - call: plan(sequential)
[10:50:59.338] |  :  List of 1
[10:50:59.338] |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.338] |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.338] |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.338] |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.338] |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.338] |  :    ..- attr(*, "call")= language plan(sequential)
[10:50:59.338] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.341] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:50:59.341] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.341] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.341] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.342] |  :  .  Legacy shutdown of cluster workers ...
[10:50:59.342] |  :  .  |  Stopping existing cluster ...
[10:50:59.342] |  :  .  |  :  No pre-existing cluster. Skipping
[10:50:59.342] |  :  .  |  Stopping existing cluster ... done
[10:50:59.343] |  :  .  Legacy shutdown of cluster workers ... done
[10:50:59.343] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:50:59.343] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:50:59.343] |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.343] |  :  .   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.343] |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.343] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.343] |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.343] |  :  .   - attr(*, "call")= language plan(sequential)
[10:50:59.346] |  :  .  init: NULL
[10:50:59.346] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:50:59.346] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.346] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.346] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.346] |  :  Backend function: <‘NULL’>
[10:50:59.347] |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.347] |  :  plan(): nbrOfWorkers() = 1
[10:50:59.347] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:50:59.347] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:50:59.347] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.347] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:50:59.347] |  :  all.equal() for FutureStrategyList ...
[10:50:59.348] |  :  .  New stack:
[10:50:59.348] |  :  .  List of 1
[10:50:59.348] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:50:59.348] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.348] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:50:59.348] |  :  .    ..- attr(*, "init")= logi TRUE
[10:50:59.348] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:50:59.348] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.348] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.348] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:50:59.348] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:50:59.348] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.350] |  :  .  Old stack:
[10:50:59.350] |  :  .  List of 1
[10:50:59.350] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.350] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.350] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.350] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.350] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.350] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:50:59.350] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.353] |  :  .  Not identical
[10:50:59.353] |  :  .  all.equal() for future ...
[10:50:59.353] |  :  .  |  List of 2
[10:50:59.353] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:50:59.353] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.353] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:50:59.353] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:50:59.353] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:50:59.353] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.353] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.353] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:50:59.353] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:50:59.353] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.353] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:50:59.353] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:50:59.353] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.353] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:50:59.353] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:50:59.357] |  :  .  |  Formals differ
[10:50:59.357] |  :  .  all.equal() for future ... done
[10:50:59.357] |  :  .  Future strategies differ at level 1
[10:50:59.357] |  :  all.equal() for FutureStrategyList ... done
[10:50:59.357] |  :  plan(): Setting new future strategy stack:
[10:50:59.357] |  :  List of future strategies:
[10:50:59.357] |  :  1. multisession:
[10:50:59.357] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:50:59.357] |  :     - tweaked: FALSE
[10:50:59.357] |  :     - call: plan(strategy)
[10:50:59.358] |  :  List of 1
[10:50:59.358] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:50:59.358] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.358] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:50:59.358] |  :    ..- attr(*, "init")= logi TRUE
[10:50:59.358] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:50:59.358] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.358] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.358] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:50:59.358] |  :    ..- attr(*, "call")= language plan(strategy)
[10:50:59.358] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:50:59.361] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:50:59.361] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.361] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:50:59.361] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.362] |  :  .  Legacy shutdown of cluster workers ...
[10:50:59.362] |  :  .  |  Stopping existing cluster ...
[10:50:59.362] |  :  .  |  :  No pre-existing cluster. Skipping
[10:50:59.362] |  :  .  |  Stopping existing cluster ... done
[10:50:59.362] |  :  .  Legacy shutdown of cluster workers ... done
[10:50:59.362] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:50:59.362] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:50:59.362] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:50:59.362] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:50:59.362] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:50:59.362] |  :  .   - attr(*, "init")= logi TRUE
[10:50:59.362] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:50:59.362] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.362] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:50:59.362] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:50:59.362] |  :  .   - attr(*, "call")= language plan(strategy)
[10:50:59.364] |  :  .  init: TRUE
[10:50:59.365] |  :  .  makeFutureBackend(<multisession>) ...
[10:50:59.365] |  :  .  |  Backend function: <‘NULL’>
[10:50:59.366] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:50:59.367] |  :  .  |  :  workers: 2
[10:50:59.367] |  :  .  |  :  getCluster() ...
[10:50:59.367] |  :  .  |  :  getCluster() ... done
[10:50:59.367] |  :  .  |  :  Stopping existing cluster ...
[10:50:59.367] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:50:59.367] |  :  .  |  :  Stopping existing cluster ... done
[10:50:59.367] |  :  .  |  :  Starting new cluster ...
[10:50:59.367] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:50:59.367] |  :  .  |  :  .  |  Arguments:
[10:50:59.367] |  :  .  |  :  .  |  List of 2
[10:50:59.367] |  :  .  |  :  .  |   $             : int 2
[10:50:59.367] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:50:59.864] |  :  .  |  :  .  |  Generated cluster UUID
[10:50:59.864] |  :  .  |  :  .  |  Cluster UUID: ‘06f347c5dd2da1449ce001255c0e1dad’
[10:50:59.864] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:50:59.867] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:50:59.867] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:50:59.868] |  :  .  |  :  Starting new cluster ... done
[10:50:59.868] |  :  .  |  :  Number of workers: 2
[10:50:59.869] |  :  .  |  :  Workers UUID: ‘06f347c5dd2da1449ce001255c0e1dad’
[10:50:59.869] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:50:59.869] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:50:59.869] |  :  .  makeFutureBackend(<multisession>) ... done
[10:50:59.869] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:50:59.869] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.869] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.869] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.870] |  :  plan(): nbrOfWorkers() = 2
[10:50:59.870] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:50:59.870] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.870] future_lapply() ...
[10:50:59.871] Generating random seeds ...
[10:50:59.871] Generating random seed streams for 5 elements ...
[10:50:59.871] Generating random seed streams for 5 elements ... DONE
[10:50:59.871] Generating random seeds ... DONE
[10:50:59.871] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:50:59.872] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.872] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:50:59.872] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.872] Number of chunks: 2
[10:50:59.872] getGlobalsAndPackagesXApply() ...
[10:50:59.872]  - future.globals: TRUE
[10:50:59.873] getGlobalsAndPackages() ...
[10:50:59.873] |  Searching for globals ...
[10:50:59.874] |  :  globals found: [2] ‘FUN’, ‘sample’
[10:50:59.874] |  Searching for globals ... DONE
[10:50:59.874] |  Resolving globals: FALSE
[10:50:59.874] |  Search for packages associated with the globals ...
[10:50:59.874] |  :  Packages associated with globals: [1] ‘base’
[10:50:59.875] |  :  Packages: [1] ‘base’
[10:50:59.875] |  Search for packages associated with the globals ... DONE
[10:50:59.875] |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:50:59.875] |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:50:59.875] |  Packages after dropping 'base': [0] 
[10:50:59.875] |  globals: [1] ‘FUN’
[10:50:59.875] |  packages: [0] 
[10:50:59.876] getGlobalsAndPackages() ... done
[10:50:59.876]  - globals found/used: [n=1] ‘FUN’
[10:50:59.876]  - needed namespaces: [n=0] 
[10:50:59.876] Finding globals ... DONE
[10:50:59.876]  - use_args: TRUE
[10:50:59.876]  - Getting '...' globals ...
[10:50:59.876] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:50:59.877] |  recursive: 0
[10:50:59.877] |  length: 1
[10:50:59.877] |  elements: ‘...’
[10:50:59.877] |  'obj' is DotDotDotList
[10:50:59.877] |  resolve(obj, ...) ...
[10:50:59.877] |  resolve(obj, ...) ... done
[10:50:59.877] |  length: 0 (resolved future 1)
[10:50:59.877] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:50:59.877]    - '...' content: [n=0] 
[10:50:59.877] List of 1
[10:50:59.877]  $ ...: list()
[10:50:59.877]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.877]  - attr(*, "where")=List of 1
[10:50:59.877]   ..$ ...:<environment: 0x564ad476ebb0> 
[10:50:59.877]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.877]  - attr(*, "resolved")= logi TRUE
[10:50:59.877]  - attr(*, "total_size")= num NA
[10:50:59.880]  - Getting '...' globals ... DONE
[10:50:59.880] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:50:59.880] List of 2
[10:50:59.880]  $ ...future.FUN:function (...)  
[10:50:59.880]  $ ...          : list()
[10:50:59.880]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:50:59.880]  - attr(*, "where")=List of 2
[10:50:59.880]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:50:59.880]   ..$ ...          :<environment: 0x564ad476ebb0> 
[10:50:59.880]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:50:59.880]  - attr(*, "resolved")= logi FALSE
[10:50:59.880]  - attr(*, "total_size")= num 7184
[10:50:59.883] Packages to be attached in all futures: [n=0] 
[10:50:59.883] getGlobalsAndPackagesXApply() ... DONE
[10:50:59.884] Number of futures (= number of chunks): 2
[10:50:59.884] Launching 2 futures (chunks) ...
[10:50:59.884] Chunk #1 of 2 ...
[10:50:59.884]  - Finding globals in 'X' for chunk #1 ...
[10:50:59.884] getGlobalsAndPackages() ...
[10:50:59.884] |  Searching for globals ...
[10:50:59.885] |  :  globals found: [0] 
[10:50:59.885] |  Searching for globals ... DONE
[10:50:59.885] |  globals: [0] <none>
[10:50:59.885] |  packages: [0] <none>
[10:50:59.885] getGlobalsAndPackages() ... done
[10:50:59.885]    + additional globals found: [n=0] 
[10:50:59.885]    + additional namespaces needed: [n=0] 
[10:50:59.885]  - Finding globals in 'X' for chunk #1 ... DONE
[10:50:59.886]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:59.886]  - seeds: [2] <seeds>
[10:50:59.886]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.886] getGlobalsAndPackages() ...
[10:50:59.886] |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.886] |  Resolving globals: FALSE
[10:50:59.886] |  Tweak future expression to call with '...' arguments ...
[10:50:59.887] |  :  {
[10:50:59.887] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.887] |  :      "# expression in do.call(), because function called uses '...'  "
[10:50:59.887] |  :      "# as a global variable                                         "
[10:50:59.887] |  :      do.call(function(...) {
[10:50:59.887] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.887] |  :          "# without having an '...' argument. This means '...' is treated"
[10:50:59.887] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:50:59.887] |  :          "# anonymous function.                                          "
[10:50:59.887] |  :          "#                                                              "
[10:50:59.887] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:50:59.887] |  :          "# function environment of FUN() to the calling environment.    "
[10:50:59.887] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.887] |  :          "# global environment, which is where globals are written.      "
[10:50:59.887] |  :          penv <- env <- environment(...future.FUN)
[10:50:59.887] |  :          repeat {
[10:50:59.887] |  :              if (identical(env, globalenv()) || identical(env, 
[10:50:59.887] |  :                  emptyenv())) 
[10:50:59.887] |  :                  break
[10:50:59.887] |  :              penv <- env
[10:50:59.887] |  :              env <- parent.env(env)
[10:50:59.887] |  :          }
[10:50:59.887] |  :          if (identical(penv, globalenv())) {
[10:50:59.887] |  :              environment(...future.FUN) <- environment()
[10:50:59.887] |  :          }
[10:50:59.887] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.887] |  :              !isNamespace(penv)) {
[10:50:59.887] |  :              parent.env(penv) <- environment()
[10:50:59.887] |  :          }
[10:50:59.887] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.887] |  :          {
[10:50:59.887] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.887] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.887] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.887] |  :                  on.exit(options(oopts), add = TRUE)
[10:50:59.887] |  :              }
[10:50:59.887] |  :              {
[10:50:59.887] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.887] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.887] |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.887] |  :                      envir = globalenv(), inherits = FALSE)
[10:50:59.887] |  :                    ...future.FUN(...future.X_jj, ...)
[10:50:59.887] |  :                  })
[10:50:59.887] |  :              }
[10:50:59.887] |  :          }
[10:50:59.887] |  :      }, args = future.call.arguments)
[10:50:59.887] |  :  }
[10:50:59.887] |  Tweak future expression to call with '...' arguments ... DONE
[10:50:59.887] |  Search for packages associated with the globals ...
[10:50:59.887] |  :  Packages associated with globals: [0] 
[10:50:59.888] |  :  Packages: [0] 
[10:50:59.888] |  Search for packages associated with the globals ... DONE
[10:50:59.888] |  Packages after dropping 'base': [0] 
[10:50:59.888] |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.888] |  packages: [0] 
[10:50:59.888] getGlobalsAndPackages() ... done
[10:50:59.889] run() for Future (‘Future’) ...
[10:50:59.889] |  state: ‘created’
[10:50:59.889] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.889] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.889] |  Using MultisessionFutureBackend ...
[10:50:59.889] |  :  Launching futures ...
[10:50:59.890] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:50:59.890] |  :  .  |  Workers: [n=2]
[10:50:59.890] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:50:59.892] |  :  .  |  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:50:59.892] |  :  .  |  requestWorker() ...
[10:50:59.893] |  :  .  |  :  requestNode() ...
[10:50:59.893] |  :  .  |  :  .  Number of workers: 2
[10:50:59.893] |  :  .  |  :  .  Polling for a free worker ...
[10:50:59.893] |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:50:59.893] |  :  .  |  :  .  |  :  Created empty registry ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:50:59.893] |  :  .  |  :  .  |  :  Listing all futures
[10:50:59.894] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:50:59.894] |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:50:59.894] |  :  .  |  :  .  |  Total time: 0
[10:50:59.894] |  :  .  |  :  .  Polling for a free worker ... done
[10:50:59.894] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:50:59.894] |  :  .  |  :  .  |  Listing all futures
[10:50:59.894] |  :  .  |  :  .  |  Number of registered futures: 0
[10:50:59.894] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:50:59.894] |  :  .  |  :  .  Index of first available worker: 1
[10:50:59.895] |  :  .  |  :  .  Validate that the worker is functional ...
[10:50:59.958] |  :  .  |  :  .  |  Worker is functional
[10:50:59.958] |  :  .  |  :  .  requestNode() ... done
[10:50:59.958] |  :  .  |  :  .  cluster node index: 1
[10:50:59.958] |  :  .  |  :  requestWorker() ... done
[10:50:59.958] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:50:59.960] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:50:59.960] |  :  .  |  :  launchFuture() ...
[10:50:59.960] |  :  .  |  :  .  cluster node index: 1
[10:50:59.960] |  :  .  |  :  .  getFutureData() ...
[10:50:59.960] |  :  .  |  :  .  |  getFutureCore() ...
[10:50:59.961] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:50:59.961] |  :  .  |  :  .  |  getFutureCore() ... done
[10:50:59.961] |  :  .  |  :  .  |  getFutureCapture() ...
[10:50:59.961] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:50:59.961] |  :  .  |  :  .  |  getFutureContext() ...
[10:50:59.961] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.961] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:50:59.962] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.962] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:50:59.962] |  :  .  |  :  .  |  getFutureContext() ... done
[10:50:59.962] |  :  .  |  :  .  getFutureData() ... done
[10:50:59.963] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:50:59.963] |  :  .  |  :  .  |  Appended future to position #1
[10:50:59.963] |  :  .  |  :  .  |  Number of registered futures: 1
[10:50:59.963] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:50:59.963] |  :  .  |  :  launchFuture() ... done
[10:50:59.963] |  :  .  |  :  MultisessionFuture started
[10:50:59.963] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:50:59.963] |  :  .  Launching futures ... done
[10:50:59.964] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.964] |  :  Using MultisessionFutureBackend ... done
[10:50:59.964] |  run() for Future (‘MultisessionFuture’) ... done
[10:50:59.964] Created future:
[10:50:59.965] |  isFutureResolved() ...
[10:50:59.966] |  :  assertValidConnection() ...
[10:50:59.966] |  :  .  cluster node index: 1
[10:50:59.966] |  :  assertValidConnection() ... done
[10:50:59.977] |  isFutureResolved() ... done
[10:50:59.964] MultisessionFuture:
[10:50:59.964] Label: ‘future_replicate-1’
[10:50:59.964] Expression:
[10:50:59.964] {
[10:50:59.964]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.964]     "# expression in do.call(), because function called uses '...'  "
[10:50:59.964]     "# as a global variable                                         "
[10:50:59.964]     do.call(function(...) {
[10:50:59.964]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.964]         "# without having an '...' argument. This means '...' is treated"
[10:50:59.964]         "# as a global variable. This may happen when FUN() is an       "
[10:50:59.964]         "# anonymous function.                                          "
[10:50:59.964]         "#                                                              "
[10:50:59.964]         "# If an anonymous function, we will make sure to restore the   "
[10:50:59.964]         "# function environment of FUN() to the calling environment.    "
[10:50:59.964]         "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.964]         "# global environment, which is where globals are written.      "
[10:50:59.964]         penv <- env <- environment(...future.FUN)
[10:50:59.964]         repeat {
[10:50:59.964]             if (identical(env, globalenv()) || identical(env, 
[10:50:59.964]                 emptyenv())) 
[10:50:59.964]                 break
[10:50:59.964]             penv <- env
[10:50:59.964]             env <- parent.env(env)
[10:50:59.964]         }
[10:50:59.964]         if (identical(penv, globalenv())) {
[10:50:59.964]             environment(...future.FUN) <- environment()
[10:50:59.964]         }
[10:50:59.964]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.964]             !isNamespace(penv)) {
[10:50:59.964]             parent.env(penv) <- environment()
[10:50:59.964]         }
[10:50:59.964]         rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.964]         {
[10:50:59.964]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.964]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.964]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.964]                 on.exit(options(oopts), add = TRUE)
[10:50:59.964]             }
[10:50:59.964]             {
[10:50:59.964]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.964]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.964]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.964]                     envir = globalenv(), inherits = FALSE)
[10:50:59.964]                   ...future.FUN(...future.X_jj, ...)
[10:50:59.964]                 })
[10:50:59.964]             }
[10:50:59.964]         }
[10:50:59.964]     }, args = future.call.arguments)
[10:50:59.964] }
[10:50:59.964] Lazy evaluation: FALSE
[10:50:59.964] Asynchronous evaluation: TRUE
[10:50:59.964] Local evaluation: TRUE
[10:50:59.964] Environment: R_GlobalEnv
[10:50:59.964] Capture standard output: TRUE
[10:50:59.964] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:50:59.964] Immediate condition classes: ‘immediateCondition’
[10:50:59.964] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:50:59.964] Packages: <none>
[10:50:59.964] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:50:59.964] Resolved: FALSE
[10:50:59.964] Value: <not collected>
[10:50:59.964] Conditions captured: <none>
[10:50:59.964] Early signaling: FALSE
[10:50:59.964] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:50:59.964] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:50:59.978] Chunk #1 of 2 ... DONE
[10:50:59.978] Chunk #2 of 2 ...
[10:50:59.978]  - Finding globals in 'X' for chunk #2 ...
[10:50:59.978] |  getGlobalsAndPackages() ...
[10:50:59.978] |  :  Searching for globals ...
[10:50:59.979] |  :  .  globals found: [0] 
[10:50:59.979] |  :  Searching for globals ... DONE
[10:50:59.979] |  :  globals: [0] <none>
[10:50:59.979] |  :  packages: [0] <none>
[10:50:59.979] |  getGlobalsAndPackages() ... done
[10:50:59.979]    + additional globals found: [n=0] 
[10:50:59.979]    + additional namespaces needed: [n=0] 
[10:50:59.979]  - Finding globals in 'X' for chunk #2 ... DONE
[10:50:59.980]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:50:59.980]  - seeds: [3] <seeds>
[10:50:59.980]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.980] |  getGlobalsAndPackages() ...
[10:50:59.980] |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.980] |  :  Resolving globals: FALSE
[10:50:59.980] |  :  Tweak future expression to call with '...' arguments ...
[10:50:59.981] |  :  .  {
[10:50:59.981] |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:50:59.981] |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:50:59.981] |  :  .      "# as a global variable                                         "
[10:50:59.981] |  :  .      do.call(function(...) {
[10:50:59.981] |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:50:59.981] |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:50:59.981] |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:50:59.981] |  :  .          "# anonymous function.                                          "
[10:50:59.981] |  :  .          "#                                                              "
[10:50:59.981] |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:50:59.981] |  :  .          "# function environment of FUN() to the calling environment.    "
[10:50:59.981] |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:50:59.981] |  :  .          "# global environment, which is where globals are written.      "
[10:50:59.981] |  :  .          penv <- env <- environment(...future.FUN)
[10:50:59.981] |  :  .          repeat {
[10:50:59.981] |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:50:59.981] |  :  .                  emptyenv())) 
[10:50:59.981] |  :  .                  break
[10:50:59.981] |  :  .              penv <- env
[10:50:59.981] |  :  .              env <- parent.env(env)
[10:50:59.981] |  :  .          }
[10:50:59.981] |  :  .          if (identical(penv, globalenv())) {
[10:50:59.981] |  :  .              environment(...future.FUN) <- environment()
[10:50:59.981] |  :  .          }
[10:50:59.981] |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:50:59.981] |  :  .              !isNamespace(penv)) {
[10:50:59.981] |  :  .              parent.env(penv) <- environment()
[10:50:59.981] |  :  .          }
[10:50:59.981] |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:50:59.981] |  :  .          {
[10:50:59.981] |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:50:59.981] |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:50:59.981] |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:50:59.981] |  :  .                  on.exit(options(oopts), add = TRUE)
[10:50:59.981] |  :  .              }
[10:50:59.981] |  :  .              {
[10:50:59.981] |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:50:59.981] |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:50:59.981] |  :  .                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:50:59.981] |  :  .                      envir = globalenv(), inherits = FALSE)
[10:50:59.981] |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:50:59.981] |  :  .                  })
[10:50:59.981] |  :  .              }
[10:50:59.981] |  :  .          }
[10:50:59.981] |  :  .      }, args = future.call.arguments)
[10:50:59.981] |  :  .  }
[10:50:59.981] |  :  Tweak future expression to call with '...' arguments ... DONE
[10:50:59.981] |  :  Search for packages associated with the globals ...
[10:50:59.981] |  :  .  Packages associated with globals: [0] 
[10:50:59.982] |  :  .  Packages: [0] 
[10:50:59.982] |  :  Search for packages associated with the globals ... DONE
[10:50:59.982] |  :  Packages after dropping 'base': [0] 
[10:50:59.982] |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:50:59.982] |  :  packages: [0] 
[10:50:59.983] |  getGlobalsAndPackages() ... done
[10:50:59.983] |  run() for Future (‘Future’) ...
[10:50:59.983] |  :  state: ‘created’
[10:50:59.983] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:50:59.983] |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:50:59.983] |  :  Using MultisessionFutureBackend ...
[10:50:59.984] |  :  .  Launching futures ...
[10:50:59.984] |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:50:59.984] |  :  .  |  :  Workers: [n=2]
[10:50:59.984] |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:50:59.986] |  :  .  |  :  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:50:59.986] |  :  .  |  :  requestWorker() ...
[10:50:59.986] |  :  .  |  :  .  requestNode() ...
[10:50:59.987] |  :  .  |  :  .  |  Number of workers: 2
[10:50:59.987] |  :  .  |  :  .  |  Polling for a free worker ...
[10:50:59.987] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:50:59.987] |  :  .  |  :  .  |  :  .  Listing all futures
[10:50:59.987] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:50:59.987] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:50:59.988] |  :  .  |  :  .  |  :  Total time: 0
[10:50:59.988] |  :  .  |  :  .  |  Polling for a free worker ... done
[10:50:59.988] |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:50:59.988] |  :  .  |  :  .  |  :  Listing all futures
[10:50:59.988] |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:50:59.988] |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:50:59.989] |  :  .  |  :  .  |  Index of first available worker: 2
[10:50:59.989] |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:00.066] |  :  .  |  :  .  |  :  Worker is functional
[10:51:00.067] |  :  .  |  :  .  |  requestNode() ... done
[10:51:00.067] |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.067] |  :  .  |  :  .  requestWorker() ... done
[10:51:00.067] |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:00.068] |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:00.068] |  :  .  |  :  .  launchFuture() ...
[10:51:00.069] |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.069] |  :  .  |  :  .  |  getFutureData() ...
[10:51:00.069] |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:00.069] |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:00.070] |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:00.070] |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:00.070] |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:00.070] |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:00.070] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.071] |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:00.071] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.071] |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:00.071] |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:00.072] |  :  .  |  :  .  |  getFutureData() ... done
[10:51:00.072] |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.072] |  :  .  |  :  .  |  :  Appended future to position #2
[10:51:00.073] |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:51:00.073] |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.073] |  :  .  |  :  .  launchFuture() ... done
[10:51:00.073] |  :  .  |  :  .  MultisessionFuture started
[10:51:00.073] |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:00.074] |  :  .  |  Launching futures ... done
[10:51:00.074] |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.074] |  :  .  Using MultisessionFutureBackend ... done
[10:51:00.074] |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.075] Created future:
[10:51:00.076] |  :  isFutureResolved() ...
[10:51:00.077] |  :  .  assertValidConnection() ...
[10:51:00.077] |  :  .  |  cluster node index: 2
[10:51:00.077] |  :  .  assertValidConnection() ... done
[10:51:00.088] |  :  isFutureResolved() ... done
[10:51:00.075] MultisessionFuture:
[10:51:00.075] Label: ‘future_replicate-2’
[10:51:00.075] Expression:
[10:51:00.075] {
[10:51:00.075]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.075]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.075]     "# as a global variable                                         "
[10:51:00.075]     do.call(function(...) {
[10:51:00.075]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.075]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.075]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.075]         "# anonymous function.                                          "
[10:51:00.075]         "#                                                              "
[10:51:00.075]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.075]         "# function environment of FUN() to the calling environment.    "
[10:51:00.075]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.075]         "# global environment, which is where globals are written.      "
[10:51:00.075]         penv <- env <- environment(...future.FUN)
[10:51:00.075]         repeat {
[10:51:00.075]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.075]                 emptyenv())) 
[10:51:00.075]                 break
[10:51:00.075]             penv <- env
[10:51:00.075]             env <- parent.env(env)
[10:51:00.075]         }
[10:51:00.075]         if (identical(penv, globalenv())) {
[10:51:00.075]             environment(...future.FUN) <- environment()
[10:51:00.075]         }
[10:51:00.075]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.075]             !isNamespace(penv)) {
[10:51:00.075]             parent.env(penv) <- environment()
[10:51:00.075]         }
[10:51:00.075]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.075]         {
[10:51:00.075]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.075]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.075]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.075]                 on.exit(options(oopts), add = TRUE)
[10:51:00.075]             }
[10:51:00.075]             {
[10:51:00.075]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.075]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.075]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.075]                     envir = globalenv(), inherits = FALSE)
[10:51:00.075]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.075]                 })
[10:51:00.075]             }
[10:51:00.075]         }
[10:51:00.075]     }, args = future.call.arguments)
[10:51:00.075] }
[10:51:00.075] Lazy evaluation: FALSE
[10:51:00.075] Asynchronous evaluation: TRUE
[10:51:00.075] Local evaluation: TRUE
[10:51:00.075] Environment: R_GlobalEnv
[10:51:00.075] Capture standard output: TRUE
[10:51:00.075] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.075] Immediate condition classes: ‘immediateCondition’
[10:51:00.075] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.075] Packages: <none>
[10:51:00.075] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.075] Resolved: FALSE
[10:51:00.075] Value: <not collected>
[10:51:00.075] Conditions captured: <none>
[10:51:00.075] Early signaling: FALSE
[10:51:00.075] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.075] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.088] Chunk #2 of 2 ... DONE
[10:51:00.088] Launching 2 futures (chunks) ... DONE
[10:51:00.088] Resolving 2 futures (chunks) ...
[10:51:00.089] |  :  value() on list ...
[10:51:00.089] |  :  .  recursive: 0
[10:51:00.089] |  :  .  length: 2
[10:51:00.089] |  :  .  
[10:51:00.089] |  :  .  Number of remaining objects: 2
[10:51:00.089] |  :  .  checking value #1 ...
[10:51:00.089] |  :  .  |  'obj' is MultisessionFuture
[10:51:00.090] |  :  .  |  isFutureResolved() ...
[10:51:00.090] |  :  .  |  :  assertValidConnection() ...
[10:51:00.090] |  :  .  |  :  .  cluster node index: 1
[10:51:00.090] |  :  .  |  :  assertValidConnection() ... done
[10:51:00.091] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.091] |  :  .  |  :  .  cluster node index: 1
[10:51:00.091] |  :  .  |  :  .  [1] TRUE
[10:51:00.091] |  :  .  |  :  .  received data:
[10:51:00.092] |  :  .  |  :  .  List of 5
[10:51:00.092] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:00.092] |  :  .  |  :  .   $ value  :List of 13
[10:51:00.092] |  :  .  |  :  .    ..$ value            :List of 2
[10:51:00.092] |  :  .  |  :  .    .. ..$ : int 2
[10:51:00.092] |  :  .  |  :  .    .. ..$ : int 3
[10:51:00.092] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:00.092] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:00.092] |  :  .  |  :  .    ..$ conditions       : list()
[10:51:00.092] |  :  .  |  :  .    ..$ rng              : logi TRUE
[10:51:00.092] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:00.092] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:00.092] |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:00.092] |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:00.092] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:00.092] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:00.092] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.092] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.092] |  :  .  |  :  .    ..$ session_uuid     : chr "eade8d52350bb8983725bb037746accc"
[10:51:00.092] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:00.092] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.092] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.092] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.092] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.092] |  :  .  |  :  .    .. .. ..$ pid   : int 65904
[10:51:00.092] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:50:59"
[10:51:00.092] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:00.092] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:00.092] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.092] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.092] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:00.092] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:00.092] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:00.092] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:00.092] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.092] |  :  .  |  :  .   $ success: logi TRUE
[10:51:00.092] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.07 0.002 0.073 0 0
[10:51:00.092] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.092] |  :  .  |  :  .   $ tag    : NULL
[10:51:00.106] |  :  .  |  :  .  Received FutureResult
[10:51:00.106] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.106] |  :  .  |  :  .  |  Removed future from position #1
[10:51:00.106] |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:00.106] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.106] |  :  .  |  :  .  Erased future from future backend
[10:51:00.107] |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.107] |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.107] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.107] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.107] |  :  .  |  isFutureResolved() ... done
[10:51:00.107] |  :  .  |  MultisessionFuture #1
[10:51:00.107] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.108] |  :  .  |  :  nx: 2
[10:51:00.108] |  :  .  |  :  relay: TRUE
[10:51:00.108] |  :  .  |  :  stdout: TRUE
[10:51:00.108] |  :  .  |  :  signal: TRUE
[10:51:00.108] |  :  .  |  :  resignal: FALSE
[10:51:00.108] |  :  .  |  :  force: TRUE
[10:51:00.108] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:00.108] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:00.108] |  :  .  |  :  until=1
[10:51:00.109] |  :  .  |  :  relaying element #1
[10:51:00.109] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.109] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.109] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.109] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.109] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.109] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.110] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.110] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.110] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.110] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.110] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.110] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.110] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.110] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.113] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:00.113] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:00.113] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.113] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.113] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.113] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.113] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.113] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.114] |  :  .  |  :  value: <list>
[10:51:00.114] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:00.114] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.114] |  :  .  |  :  nx: 2
[10:51:00.114] |  :  .  |  :  relay: TRUE
[10:51:00.114] |  :  .  |  :  stdout: TRUE
[10:51:00.114] |  :  .  |  :  signal: TRUE
[10:51:00.114] |  :  .  |  :  resignal: FALSE
[10:51:00.114] |  :  .  |  :  force: TRUE
[10:51:00.114] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.115] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.115] |  :  .  |  :  until=2
[10:51:00.115] |  :  .  |  :  relaying element #2
[10:51:00.115] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.115] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.115] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:00.115] |  :  .  |  length: 1 (resolved future 1)
[10:51:00.115] |  :  .  checking value #1 ... done
[10:51:00.115] |  :  .  checking value #2 ...
[10:51:00.115] |  :  .  |  'obj' is MultisessionFuture
[10:51:00.116] |  :  .  |  isFutureResolved() ...
[10:51:00.116] |  :  .  |  :  assertValidConnection() ...
[10:51:00.116] |  :  .  |  :  .  cluster node index: 2
[10:51:00.116] |  :  .  |  :  assertValidConnection() ... done
[10:51:00.127] |  :  .  |  isFutureResolved() ... done
[10:51:00.127] |  :  .  checking value #2 ... done
[10:51:00.137] |  :  .  Number of remaining objects: 1
[10:51:00.137] |  :  .  checking value #2 ...
[10:51:00.137] |  :  .  |  'obj' is MultisessionFuture
[10:51:00.137] |  :  .  |  isFutureResolved() ...
[10:51:00.138] |  :  .  |  :  assertValidConnection() ...
[10:51:00.138] |  :  .  |  :  .  cluster node index: 2
[10:51:00.138] |  :  .  |  :  assertValidConnection() ... done
[10:51:00.148] |  :  .  |  isFutureResolved() ... done
[10:51:00.148] |  :  .  checking value #2 ... done
[10:51:00.159] |  :  .  Number of remaining objects: 1
[10:51:00.159] |  :  .  checking value #2 ...
[10:51:00.159] |  :  .  |  'obj' is MultisessionFuture
[10:51:00.159] |  :  .  |  isFutureResolved() ...
[10:51:00.159] |  :  .  |  :  assertValidConnection() ...
[10:51:00.159] |  :  .  |  :  .  cluster node index: 2
[10:51:00.160] |  :  .  |  :  assertValidConnection() ... done
[10:51:00.162] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.162] |  :  .  |  :  .  cluster node index: 2
[10:51:00.163] |  :  .  |  :  .  [1] TRUE
[10:51:00.163] |  :  .  |  :  .  received data:
[10:51:00.163] |  :  .  |  :  .  List of 5
[10:51:00.163] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:00.163] |  :  .  |  :  .   $ value  :List of 13
[10:51:00.163] |  :  .  |  :  .    ..$ value            :List of 3
[10:51:00.163] |  :  .  |  :  .    .. ..$ : int 3
[10:51:00.163] |  :  .  |  :  .    .. ..$ : int 3
[10:51:00.163] |  :  .  |  :  .    .. ..$ : int 1
[10:51:00.163] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:00.163] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:00.163] |  :  .  |  :  .    ..$ conditions       : list()
[10:51:00.163] |  :  .  |  :  .    ..$ rng              : logi TRUE
[10:51:00.163] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:00.163] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:00.163] |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:00.163] |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:00.163] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:00.163] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:00.163] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.163] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.163] |  :  .  |  :  .    ..$ session_uuid     : chr "0bbd526ee799addd90bb5c3a6fa4329b"
[10:51:00.163] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:00.163] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.163] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.163] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.163] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.163] |  :  .  |  :  .    .. .. ..$ pid   : int 65905
[10:51:00.163] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.163] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:00.163] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:00.163] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.163] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.163] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:00.163] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:00.163] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:00.163] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:00.163] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.163] |  :  .  |  :  .   $ success: logi TRUE
[10:51:00.163] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.047 0.002 0.049 0 0
[10:51:00.163] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.163] |  :  .  |  :  .   $ tag    : NULL
[10:51:00.174] |  :  .  |  :  .  Received FutureResult
[10:51:00.174] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.174] |  :  .  |  :  .  |  Removed future from position #1
[10:51:00.174] |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:00.174] |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.175] |  :  .  |  :  .  Erased future from future backend
[10:51:00.175] |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.175] |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.175] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.175] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.175] |  :  .  |  isFutureResolved() ... done
[10:51:00.175] |  :  .  |  MultisessionFuture #2
[10:51:00.175] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.175] |  :  .  |  :  nx: 2
[10:51:00.175] |  :  .  |  :  relay: TRUE
[10:51:00.175] |  :  .  |  :  stdout: TRUE
[10:51:00.176] |  :  .  |  :  signal: TRUE
[10:51:00.176] |  :  .  |  :  resignal: FALSE
[10:51:00.176] |  :  .  |  :  force: TRUE
[10:51:00.176] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.176] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.176] |  :  .  |  :  until=2
[10:51:00.176] |  :  .  |  :  relaying element #2
[10:51:00.176] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.176] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.177] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.177] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.177] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.177] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.177] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.177] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.177] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.177] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.177] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.178] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.178] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.178] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.178] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.178] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:00.178] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.178] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.178] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.178] |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.178] |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.178] |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.179] |  :  .  |  :  value: <list>
[10:51:00.179] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:00.179] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.179] |  :  .  |  :  nx: 2
[10:51:00.179] |  :  .  |  :  relay: TRUE
[10:51:00.179] |  :  .  |  :  stdout: TRUE
[10:51:00.179] |  :  .  |  :  signal: TRUE
[10:51:00.179] |  :  .  |  :  resignal: FALSE
[10:51:00.179] |  :  .  |  :  force: TRUE
[10:51:00.179] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.179] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.180] |  :  .  |  :  until=2
[10:51:00.180] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.180] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.180] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.180] |  :  .  |  length: 0 (resolved future 2)
[10:51:00.180] |  :  .  checking value #2 ... done
[10:51:00.180] |  :  .  Relaying remaining futures ...
[10:51:00.180] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:00.180] |  :  .  |  :  nx: 2
[10:51:00.180] |  :  .  |  :  relay: TRUE
[10:51:00.180] |  :  .  |  :  stdout: TRUE
[10:51:00.181] |  :  .  |  :  signal: TRUE
[10:51:00.181] |  :  .  |  :  resignal: FALSE
[10:51:00.181] |  :  .  |  :  force: TRUE
[10:51:00.181] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.181] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:00.181] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.181] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.181] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:00.181] |  :  .  Relaying remaining futures ... done
[10:51:00.181] |  :  value() on list ... done
[10:51:00.182]  - Number of value chunks collected: 2
[10:51:00.182] Resolving 2 futures (chunks) ... DONE
[10:51:00.182] Reducing values from 2 chunks ...
[10:51:00.182]  - Number of values collected after concatenation: 5
[10:51:00.182]  - Number of values expected: 5
[10:51:00.182] Reducing values from 2 chunks ... DONE
[10:51:00.182] future_lapply() ... DONE
[10:51:00.182] future_lapply() ...
[10:51:00.183] Generating random seeds ...
[10:51:00.183] Generating random seed streams for 5 elements ...
[10:51:00.183] Generating random seed streams for 5 elements ... DONE
[10:51:00.183] Generating random seeds ... DONE
[10:51:00.183] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:51:00.184] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.184] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:00.184] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.184] Number of chunks: 2
[10:51:00.184] getGlobalsAndPackagesXApply() ...
[10:51:00.185]  - future.globals: TRUE
[10:51:00.185] |  :  getGlobalsAndPackages() ...
[10:51:00.185] |  :  .  Searching for globals ...
[10:51:00.186] |  :  .  |  globals found: [2] ‘FUN’, ‘sample’
[10:51:00.186] |  :  .  Searching for globals ... DONE
[10:51:00.186] |  :  .  Resolving globals: FALSE
[10:51:00.186] |  :  .  Search for packages associated with the globals ...
[10:51:00.186] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:51:00.187] |  :  .  |  Packages: [1] ‘base’
[10:51:00.187] |  :  .  Search for packages associated with the globals ... DONE
[10:51:00.187] |  :  .  The total size of the 1 globals is 132 bytes (132 bytes)
[10:51:00.187] |  :  .  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:51:00.187] |  :  .  Packages after dropping 'base': [0] 
[10:51:00.188] |  :  .  globals: [1] ‘FUN’
[10:51:00.188] |  :  .  packages: [0] 
[10:51:00.188] |  :  getGlobalsAndPackages() ... done
[10:51:00.188]  - globals found/used: [n=1] ‘FUN’
[10:51:00.188]  - needed namespaces: [n=0] 
[10:51:00.188] Finding globals ... DONE
[10:51:00.188]  - use_args: TRUE
[10:51:00.188]  - Getting '...' globals ...
[10:51:00.189] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:00.189] |  :  .  recursive: 0
[10:51:00.189] |  :  .  length: 1
[10:51:00.189] |  :  .  elements: ‘...’
[10:51:00.189] |  :  .  'obj' is DotDotDotList
[10:51:00.189] |  :  .  resolve(obj, ...) ...
[10:51:00.189] |  :  .  resolve(obj, ...) ... done
[10:51:00.189] |  :  .  length: 0 (resolved future 1)
[10:51:00.189] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:00.190]    - '...' content: [n=0] 
[10:51:00.190] List of 1
[10:51:00.190]  $ ...: list()
[10:51:00.190]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.190]  - attr(*, "where")=List of 1
[10:51:00.190]   ..$ ...:<environment: 0x564ad5ce81c0> 
[10:51:00.190]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.190]  - attr(*, "resolved")= logi TRUE
[10:51:00.190]  - attr(*, "total_size")= num NA
[10:51:00.192]  - Getting '...' globals ... DONE
[10:51:00.192] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:00.192] List of 2
[10:51:00.192]  $ ...future.FUN:function (...)  
[10:51:00.192]  $ ...          : list()
[10:51:00.192]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.192]  - attr(*, "where")=List of 2
[10:51:00.192]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:00.192]   ..$ ...          :<environment: 0x564ad5ce81c0> 
[10:51:00.192]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.192]  - attr(*, "resolved")= logi FALSE
[10:51:00.192]  - attr(*, "total_size")= num 7184
[10:51:00.195] Packages to be attached in all futures: [n=0] 
[10:51:00.195] getGlobalsAndPackagesXApply() ... DONE
[10:51:00.195] Number of futures (= number of chunks): 2
[10:51:00.195] Launching 2 futures (chunks) ...
[10:51:00.196] Chunk #1 of 2 ...
[10:51:00.196]  - Finding globals in 'X' for chunk #1 ...
[10:51:00.196] |  :  getGlobalsAndPackages() ...
[10:51:00.196] |  :  .  Searching for globals ...
[10:51:00.196] |  :  .  |  globals found: [0] 
[10:51:00.196] |  :  .  Searching for globals ... DONE
[10:51:00.196] |  :  .  globals: [0] <none>
[10:51:00.196] |  :  .  packages: [0] <none>
[10:51:00.197] |  :  getGlobalsAndPackages() ... done
[10:51:00.197]    + additional globals found: [n=0] 
[10:51:00.197]    + additional namespaces needed: [n=0] 
[10:51:00.197]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:00.197]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.197]  - seeds: [2] <seeds>
[10:51:00.197]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.197] |  :  getGlobalsAndPackages() ...
[10:51:00.197] |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.197] |  :  .  Resolving globals: FALSE
[10:51:00.198] |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:00.198] |  :  .  |  {
[10:51:00.198] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.198] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:00.198] |  :  .  |      "# as a global variable                                         "
[10:51:00.198] |  :  .  |      do.call(function(...) {
[10:51:00.198] |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.198] |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:00.198] |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.198] |  :  .  |          "# anonymous function.                                          "
[10:51:00.198] |  :  .  |          "#                                                              "
[10:51:00.198] |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.198] |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:00.198] |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.198] |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:00.198] |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:00.198] |  :  .  |          repeat {
[10:51:00.198] |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:00.198] |  :  .  |                  emptyenv())) 
[10:51:00.198] |  :  .  |                  break
[10:51:00.198] |  :  .  |              penv <- env
[10:51:00.198] |  :  .  |              env <- parent.env(env)
[10:51:00.198] |  :  .  |          }
[10:51:00.198] |  :  .  |          if (identical(penv, globalenv())) {
[10:51:00.198] |  :  .  |              environment(...future.FUN) <- environment()
[10:51:00.198] |  :  .  |          }
[10:51:00.198] |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.198] |  :  .  |              !isNamespace(penv)) {
[10:51:00.198] |  :  .  |              parent.env(penv) <- environment()
[10:51:00.198] |  :  .  |          }
[10:51:00.198] |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.198] |  :  .  |          {
[10:51:00.198] |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.198] |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.198] |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.198] |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:00.198] |  :  .  |              }
[10:51:00.198] |  :  .  |              {
[10:51:00.198] |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.198] |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.198] |  :  .  |                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.198] |  :  .  |                      envir = globalenv(), inherits = FALSE)
[10:51:00.198] |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:00.198] |  :  .  |                  })
[10:51:00.198] |  :  .  |              }
[10:51:00.198] |  :  .  |          }
[10:51:00.198] |  :  .  |      }, args = future.call.arguments)
[10:51:00.198] |  :  .  |  }
[10:51:00.198] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.198] |  :  .  Search for packages associated with the globals ...
[10:51:00.198] |  :  .  |  Packages associated with globals: [0] 
[10:51:00.199] |  :  .  |  Packages: [0] 
[10:51:00.199] |  :  .  Search for packages associated with the globals ... DONE
[10:51:00.199] |  :  .  Packages after dropping 'base': [0] 
[10:51:00.199] |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.199] |  :  .  packages: [0] 
[10:51:00.199] |  :  getGlobalsAndPackages() ... done
[10:51:00.199] |  :  run() for Future (‘Future’) ...
[10:51:00.200] |  :  .  state: ‘created’
[10:51:00.200] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.200] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.200] |  :  .  Using MultisessionFutureBackend ...
[10:51:00.200] |  :  .  |  Launching futures ...
[10:51:00.200] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:00.200] |  :  .  |  :  .  Workers: [n=2]
[10:51:00.200] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.202] |  :  .  |  :  .  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.202] |  :  .  |  :  .  requestWorker() ...
[10:51:00.202] |  :  .  |  :  .  |  requestNode() ...
[10:51:00.202] |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:00.203] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:00.203] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.203] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:00.203] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:00.203] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.203] |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:00.203] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:00.203] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.203] |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:00.203] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:00.204] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.204] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:51:00.204] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:00.244] |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:00.244] |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:00.244] |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:00.245] |  :  .  |  :  .  |  requestWorker() ... done
[10:51:00.245] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:00.245] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:00.245] |  :  .  |  :  .  |  launchFuture() ...
[10:51:00.245] |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:00.245] |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:00.245] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:00.245] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:51:00.246] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:00.246] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:00.246] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:00.246] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:00.246] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.246] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:00.246] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.246] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:00.247] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:00.247] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:00.247] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.247] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:51:00.247] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:00.247] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.247] |  :  .  |  :  .  |  launchFuture() ... done
[10:51:00.247] |  :  .  |  :  .  |  MultisessionFuture started
[10:51:00.248] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:00.248] |  :  .  |  :  Launching futures ... done
[10:51:00.248] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.248] |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:00.248] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.248] Created future:
[10:51:00.249] |  :  .  isFutureResolved() ...
[10:51:00.249] |  :  .  |  assertValidConnection() ...
[10:51:00.249] |  :  .  |  :  cluster node index: 1
[10:51:00.250] |  :  .  |  assertValidConnection() ... done
[10:51:00.260] |  :  .  isFutureResolved() ... done
[10:51:00.248] MultisessionFuture:
[10:51:00.248] Label: ‘future_replicate-1’
[10:51:00.248] Expression:
[10:51:00.248] {
[10:51:00.248]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.248]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.248]     "# as a global variable                                         "
[10:51:00.248]     do.call(function(...) {
[10:51:00.248]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.248]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.248]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.248]         "# anonymous function.                                          "
[10:51:00.248]         "#                                                              "
[10:51:00.248]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.248]         "# function environment of FUN() to the calling environment.    "
[10:51:00.248]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.248]         "# global environment, which is where globals are written.      "
[10:51:00.248]         penv <- env <- environment(...future.FUN)
[10:51:00.248]         repeat {
[10:51:00.248]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.248]                 emptyenv())) 
[10:51:00.248]                 break
[10:51:00.248]             penv <- env
[10:51:00.248]             env <- parent.env(env)
[10:51:00.248]         }
[10:51:00.248]         if (identical(penv, globalenv())) {
[10:51:00.248]             environment(...future.FUN) <- environment()
[10:51:00.248]         }
[10:51:00.248]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.248]             !isNamespace(penv)) {
[10:51:00.248]             parent.env(penv) <- environment()
[10:51:00.248]         }
[10:51:00.248]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.248]         {
[10:51:00.248]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.248]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.248]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.248]                 on.exit(options(oopts), add = TRUE)
[10:51:00.248]             }
[10:51:00.248]             {
[10:51:00.248]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.248]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.248]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.248]                     envir = globalenv(), inherits = FALSE)
[10:51:00.248]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.248]                 })
[10:51:00.248]             }
[10:51:00.248]         }
[10:51:00.248]     }, args = future.call.arguments)
[10:51:00.248] }
[10:51:00.248] Lazy evaluation: FALSE
[10:51:00.248] Asynchronous evaluation: TRUE
[10:51:00.248] Local evaluation: TRUE
[10:51:00.248] Environment: R_GlobalEnv
[10:51:00.248] Capture standard output: TRUE
[10:51:00.248] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.248] Immediate condition classes: ‘immediateCondition’
[10:51:00.248] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.248] Packages: <none>
[10:51:00.248] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.248] Resolved: FALSE
[10:51:00.248] Value: <not collected>
[10:51:00.248] Conditions captured: <none>
[10:51:00.248] Early signaling: FALSE
[10:51:00.248] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.248] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.261] Chunk #1 of 2 ... DONE
[10:51:00.261] Chunk #2 of 2 ...
[10:51:00.261]  - Finding globals in 'X' for chunk #2 ...
[10:51:00.261] |  :  .  getGlobalsAndPackages() ...
[10:51:00.261] |  :  .  |  Searching for globals ...
[10:51:00.261] |  :  .  |  :  globals found: [0] 
[10:51:00.261] |  :  .  |  Searching for globals ... DONE
[10:51:00.262] |  :  .  |  globals: [0] <none>
[10:51:00.262] |  :  .  |  packages: [0] <none>
[10:51:00.262] |  :  .  getGlobalsAndPackages() ... done
[10:51:00.262]    + additional globals found: [n=0] 
[10:51:00.262]    + additional namespaces needed: [n=0] 
[10:51:00.262]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:00.262]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.262]  - seeds: [3] <seeds>
[10:51:00.262]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.262] |  :  .  getGlobalsAndPackages() ...
[10:51:00.263] |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.263] |  :  .  |  Resolving globals: FALSE
[10:51:00.263] |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:00.263] |  :  .  |  :  {
[10:51:00.263] |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.263] |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:00.263] |  :  .  |  :      "# as a global variable                                         "
[10:51:00.263] |  :  .  |  :      do.call(function(...) {
[10:51:00.263] |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.263] |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:00.263] |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.263] |  :  .  |  :          "# anonymous function.                                          "
[10:51:00.263] |  :  .  |  :          "#                                                              "
[10:51:00.263] |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.263] |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:00.263] |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.263] |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:00.263] |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:00.263] |  :  .  |  :          repeat {
[10:51:00.263] |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:00.263] |  :  .  |  :                  emptyenv())) 
[10:51:00.263] |  :  .  |  :                  break
[10:51:00.263] |  :  .  |  :              penv <- env
[10:51:00.263] |  :  .  |  :              env <- parent.env(env)
[10:51:00.263] |  :  .  |  :          }
[10:51:00.263] |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:00.263] |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:00.263] |  :  .  |  :          }
[10:51:00.263] |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.263] |  :  .  |  :              !isNamespace(penv)) {
[10:51:00.263] |  :  .  |  :              parent.env(penv) <- environment()
[10:51:00.263] |  :  .  |  :          }
[10:51:00.263] |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.263] |  :  .  |  :          {
[10:51:00.263] |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.263] |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.263] |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.263] |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:00.263] |  :  .  |  :              }
[10:51:00.263] |  :  .  |  :              {
[10:51:00.263] |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.263] |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.263] |  :  .  |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.263] |  :  .  |  :                      envir = globalenv(), inherits = FALSE)
[10:51:00.263] |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:00.263] |  :  .  |  :                  })
[10:51:00.263] |  :  .  |  :              }
[10:51:00.263] |  :  .  |  :          }
[10:51:00.263] |  :  .  |  :      }, args = future.call.arguments)
[10:51:00.263] |  :  .  |  :  }
[10:51:00.263] |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.263] |  :  .  |  Search for packages associated with the globals ...
[10:51:00.264] |  :  .  |  :  Packages associated with globals: [0] 
[10:51:00.264] |  :  .  |  :  Packages: [0] 
[10:51:00.264] |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:00.264] |  :  .  |  Packages after dropping 'base': [0] 
[10:51:00.264] |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.264] |  :  .  |  packages: [0] 
[10:51:00.264] |  :  .  getGlobalsAndPackages() ... done
[10:51:00.265] |  :  .  run() for Future (‘Future’) ...
[10:51:00.265] |  :  .  |  state: ‘created’
[10:51:00.265] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.265] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.265] |  :  .  |  Using MultisessionFutureBackend ...
[10:51:00.265] |  :  .  |  :  Launching futures ...
[10:51:00.265] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:00.265] |  :  .  |  :  .  |  Workers: [n=2]
[10:51:00.266] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.267] |  :  .  |  :  .  |  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.267] |  :  .  |  :  .  |  requestWorker() ...
[10:51:00.267] |  :  .  |  :  .  |  :  requestNode() ...
[10:51:00.267] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:00.268] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:00.268] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:00.268] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:00.268] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:00.268] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.269] |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:51:00.269] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:00.307] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:00.307] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:00.307] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:00.307] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:00.307] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:00.307] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:00.308] |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:00.308] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:00.308] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:00.308] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:00.308] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:51:00.308] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:00.308] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:00.308] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:00.308] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:00.309] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.309] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:00.309] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.309] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:00.309] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:00.309] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:00.309] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.310] |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:51:00.310] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:51:00.310] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.310] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:00.310] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:00.310] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:00.310] |  :  .  |  :  .  Launching futures ... done
[10:51:00.310] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.310] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:00.310] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.311] Created future:
[10:51:00.311] |  :  .  |  isFutureResolved() ...
[10:51:00.312] |  :  .  |  :  assertValidConnection() ...
[10:51:00.312] |  :  .  |  :  .  cluster node index: 2
[10:51:00.312] |  :  .  |  :  assertValidConnection() ... done
[10:51:00.323] |  :  .  |  isFutureResolved() ... done
[10:51:00.311] MultisessionFuture:
[10:51:00.311] Label: ‘future_replicate-2’
[10:51:00.311] Expression:
[10:51:00.311] {
[10:51:00.311]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.311]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.311]     "# as a global variable                                         "
[10:51:00.311]     do.call(function(...) {
[10:51:00.311]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.311]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.311]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.311]         "# anonymous function.                                          "
[10:51:00.311]         "#                                                              "
[10:51:00.311]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.311]         "# function environment of FUN() to the calling environment.    "
[10:51:00.311]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.311]         "# global environment, which is where globals are written.      "
[10:51:00.311]         penv <- env <- environment(...future.FUN)
[10:51:00.311]         repeat {
[10:51:00.311]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.311]                 emptyenv())) 
[10:51:00.311]                 break
[10:51:00.311]             penv <- env
[10:51:00.311]             env <- parent.env(env)
[10:51:00.311]         }
[10:51:00.311]         if (identical(penv, globalenv())) {
[10:51:00.311]             environment(...future.FUN) <- environment()
[10:51:00.311]         }
[10:51:00.311]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.311]             !isNamespace(penv)) {
[10:51:00.311]             parent.env(penv) <- environment()
[10:51:00.311]         }
[10:51:00.311]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.311]         {
[10:51:00.311]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.311]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.311]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.311]                 on.exit(options(oopts), add = TRUE)
[10:51:00.311]             }
[10:51:00.311]             {
[10:51:00.311]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.311]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.311]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.311]                     envir = globalenv(), inherits = FALSE)
[10:51:00.311]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.311]                 })
[10:51:00.311]             }
[10:51:00.311]         }
[10:51:00.311]     }, args = future.call.arguments)
[10:51:00.311] }
[10:51:00.311] Lazy evaluation: FALSE
[10:51:00.311] Asynchronous evaluation: TRUE
[10:51:00.311] Local evaluation: TRUE
[10:51:00.311] Environment: R_GlobalEnv
[10:51:00.311] Capture standard output: TRUE
[10:51:00.311] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.311] Immediate condition classes: ‘immediateCondition’
[10:51:00.311] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.311] Packages: <none>
[10:51:00.311] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.311] Resolved: FALSE
[10:51:00.311] Value: <not collected>
[10:51:00.311] Conditions captured: <none>
[10:51:00.311] Early signaling: FALSE
[10:51:00.311] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.311] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.323] Chunk #2 of 2 ... DONE
[10:51:00.323] Launching 2 futures (chunks) ... DONE
[10:51:00.323] Resolving 2 futures (chunks) ...
[10:51:00.323] |  :  .  |  value() on list ...
[10:51:00.323] |  :  .  |  :  recursive: 0
[10:51:00.324] |  :  .  |  :  length: 2
[10:51:00.324] |  :  .  |  :  
[10:51:00.324] |  :  .  |  :  Number of remaining objects: 2
[10:51:00.324] |  :  .  |  :  checking value #1 ...
[10:51:00.324] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:00.324] |  :  .  |  :  .  isFutureResolved() ...
[10:51:00.324] |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:00.324] |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:00.325] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:00.325] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.325] |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:00.327] |  :  .  |  :  .  |  :  [1] TRUE
[10:51:00.327] |  :  .  |  :  .  |  :  received data:
[10:51:00.327] |  :  .  |  :  .  |  :  List of 5
[10:51:00.327] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:00.327] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ value            :List of 2
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ : int 6
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ : int 8
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ rng              : logi TRUE
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "eade8d52350bb8983725bb037746accc"
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 65904
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:50:59"
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.327] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:00.327] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:00.327] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:00.327] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.327] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:00.327] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:00.327] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.327] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:00.338] |  :  .  |  :  .  |  :  Received FutureResult
[10:51:00.338] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.338] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:00.338] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:00.338] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.338] |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:00.338] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.338] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.338] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.339] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.339] |  :  .  |  :  .  isFutureResolved() ... done
[10:51:00.339] |  :  .  |  :  .  MultisessionFuture #1
[10:51:00.339] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.339] |  :  .  |  :  .  |  nx: 2
[10:51:00.339] |  :  .  |  :  .  |  relay: TRUE
[10:51:00.339] |  :  .  |  :  .  |  stdout: TRUE
[10:51:00.339] |  :  .  |  :  .  |  signal: TRUE
[10:51:00.339] |  :  .  |  :  .  |  resignal: FALSE
[10:51:00.339] |  :  .  |  :  .  |  force: TRUE
[10:51:00.339] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:51:00.340] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:51:00.340] |  :  .  |  :  .  |  until=1
[10:51:00.340] |  :  .  |  :  .  |  relaying element #1
[10:51:00.340] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.340] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.340] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.340] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.340] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.340] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.340] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.341] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.341] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.341] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.341] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.341] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.341] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:00.341] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:00.341] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:00.341] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:00.341] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.342] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.342] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.342] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.342] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.342] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.342] |  :  .  |  :  .  |  value: <list>
[10:51:00.342] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:00.342] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.342] |  :  .  |  :  .  |  nx: 2
[10:51:00.342] |  :  .  |  :  .  |  relay: TRUE
[10:51:00.342] |  :  .  |  :  .  |  stdout: TRUE
[10:51:00.343] |  :  .  |  :  .  |  signal: TRUE
[10:51:00.343] |  :  .  |  :  .  |  resignal: FALSE
[10:51:00.343] |  :  .  |  :  .  |  force: TRUE
[10:51:00.343] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:00.343] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:00.343] |  :  .  |  :  .  |  until=2
[10:51:00.343] |  :  .  |  :  .  |  relaying element #2
[10:51:00.343] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:00.343] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:00.343] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:51:00.343] |  :  .  |  :  .  length: 1 (resolved future 1)
[10:51:00.344] |  :  .  |  :  checking value #1 ... done
[10:51:00.344] |  :  .  |  :  checking value #2 ...
[10:51:00.344] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:00.344] |  :  .  |  :  .  isFutureResolved() ...
[10:51:00.344] |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:00.344] |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:00.344] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:00.353] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.354] |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:00.354] |  :  .  |  :  .  |  :  [1] TRUE
[10:51:00.354] |  :  .  |  :  .  |  :  received data:
[10:51:00.354] |  :  .  |  :  .  |  :  List of 5
[10:51:00.354] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:00.354] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ value            :List of 3
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ : int 2
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ : int 8
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ : int 9
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ rng              : logi TRUE
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "0bbd526ee799addd90bb5c3a6fa4329b"
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 65905
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.354] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:00.354] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:00.354] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:00.354] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.354] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:00.354] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:51:00.354] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.354] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:00.365] |  :  .  |  :  .  |  :  Received FutureResult
[10:51:00.365] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.365] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:00.365] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:00.365] |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.366] |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:00.366] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.366] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.366] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.366] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.366] |  :  .  |  :  .  isFutureResolved() ... done
[10:51:00.366] |  :  .  |  :  .  MultisessionFuture #2
[10:51:00.366] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.366] |  :  .  |  :  .  |  nx: 2
[10:51:00.366] |  :  .  |  :  .  |  relay: TRUE
[10:51:00.366] |  :  .  |  :  .  |  stdout: TRUE
[10:51:00.367] |  :  .  |  :  .  |  signal: TRUE
[10:51:00.367] |  :  .  |  :  .  |  resignal: FALSE
[10:51:00.367] |  :  .  |  :  .  |  force: TRUE
[10:51:00.367] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:00.367] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:00.367] |  :  .  |  :  .  |  until=2
[10:51:00.367] |  :  .  |  :  .  |  relaying element #2
[10:51:00.367] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.367] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.367] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.367] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.368] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.368] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.368] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.368] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.368] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.368] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.368] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.368] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.368] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:00.368] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:00.369] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.369] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:00.369] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.369] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.369] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.369] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.369] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.369] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.369] |  :  .  |  :  .  |  value: <list>
[10:51:00.369] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:00.370] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.370] |  :  .  |  :  .  |  nx: 2
[10:51:00.370] |  :  .  |  :  .  |  relay: TRUE
[10:51:00.370] |  :  .  |  :  .  |  stdout: TRUE
[10:51:00.370] |  :  .  |  :  .  |  signal: TRUE
[10:51:00.370] |  :  .  |  :  .  |  resignal: FALSE
[10:51:00.370] |  :  .  |  :  .  |  force: TRUE
[10:51:00.370] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:00.370] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:00.370] |  :  .  |  :  .  |  until=2
[10:51:00.370] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:00.370] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:00.371] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.371] |  :  .  |  :  .  length: 0 (resolved future 2)
[10:51:00.371] |  :  .  |  :  checking value #2 ... done
[10:51:00.371] |  :  .  |  :  Relaying remaining futures ...
[10:51:00.371] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:51:00.371] |  :  .  |  :  .  |  nx: 2
[10:51:00.371] |  :  .  |  :  .  |  relay: TRUE
[10:51:00.371] |  :  .  |  :  .  |  stdout: TRUE
[10:51:00.371] |  :  .  |  :  .  |  signal: TRUE
[10:51:00.371] |  :  .  |  :  .  |  resignal: FALSE
[10:51:00.371] |  :  .  |  :  .  |  force: TRUE
[10:51:00.372] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:00.372] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:00.372] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:00.372] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:00.372] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:51:00.372] |  :  .  |  :  Relaying remaining futures ... done
[10:51:00.372] |  :  .  |  value() on list ... done
[10:51:00.372]  - Number of value chunks collected: 2
[10:51:00.372] Resolving 2 futures (chunks) ... DONE
[10:51:00.372] Reducing values from 2 chunks ...
[10:51:00.372]  - Number of values collected after concatenation: 5
[10:51:00.373]  - Number of values expected: 5
[10:51:00.373] Reducing values from 2 chunks ... DONE
[10:51:00.373] future_lapply() ... DONE
[10:51:00.373] future_lapply() ...
[10:51:00.373] Generating random seeds ...
[10:51:00.374] Generating random seed streams for 5 elements ...
[10:51:00.374] Generating random seed streams for 5 elements ... DONE
[10:51:00.374] Generating random seeds ... DONE
[10:51:00.374] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:51:00.374] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.374] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:00.375] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.375] Number of chunks: 2
[10:51:00.375] getGlobalsAndPackagesXApply() ...
[10:51:00.375]  - future.globals: TRUE
[10:51:00.375] |  :  .  |  getGlobalsAndPackages() ...
[10:51:00.375] |  :  .  |  :  Searching for globals ...
[10:51:00.376] |  :  .  |  :  .  globals found: [2] ‘FUN’, ‘sample’
[10:51:00.377] |  :  .  |  :  Searching for globals ... DONE
[10:51:00.377] |  :  .  |  :  Resolving globals: FALSE
[10:51:00.377] |  :  .  |  :  Search for packages associated with the globals ...
[10:51:00.377] |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:51:00.377] |  :  .  |  :  .  Packages: [1] ‘base’
[10:51:00.377] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:00.378] |  :  .  |  :  The total size of the 1 globals is 132 bytes (132 bytes)
[10:51:00.378] |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:51:00.378] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:51:00.378] |  :  .  |  :  globals: [1] ‘FUN’
[10:51:00.378] |  :  .  |  :  packages: [0] 
[10:51:00.378] |  :  .  |  getGlobalsAndPackages() ... done
[10:51:00.378]  - globals found/used: [n=1] ‘FUN’
[10:51:00.378]  - needed namespaces: [n=0] 
[10:51:00.379] Finding globals ... DONE
[10:51:00.379]  - use_args: TRUE
[10:51:00.379]  - Getting '...' globals ...
[10:51:00.379] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:00.379] |  :  .  |  :  recursive: 0
[10:51:00.379] |  :  .  |  :  length: 1
[10:51:00.379] |  :  .  |  :  elements: ‘...’
[10:51:00.380] |  :  .  |  :  'obj' is DotDotDotList
[10:51:00.380] |  :  .  |  :  resolve(obj, ...) ...
[10:51:00.380] |  :  .  |  :  resolve(obj, ...) ... done
[10:51:00.380] |  :  .  |  :  length: 0 (resolved future 1)
[10:51:00.380] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:00.380]    - '...' content: [n=0] 
[10:51:00.380] List of 1
[10:51:00.380]  $ ...: list()
[10:51:00.380]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.380]  - attr(*, "where")=List of 1
[10:51:00.380]   ..$ ...:<environment: 0x564ad64a6308> 
[10:51:00.380]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.380]  - attr(*, "resolved")= logi TRUE
[10:51:00.380]  - attr(*, "total_size")= num NA
[10:51:00.383]  - Getting '...' globals ... DONE
[10:51:00.383] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:00.383] List of 2
[10:51:00.383]  $ ...future.FUN:function (...)  
[10:51:00.383]  $ ...          : list()
[10:51:00.383]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.383]  - attr(*, "where")=List of 2
[10:51:00.383]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:00.383]   ..$ ...          :<environment: 0x564ad64a6308> 
[10:51:00.383]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.383]  - attr(*, "resolved")= logi FALSE
[10:51:00.383]  - attr(*, "total_size")= num 7184
[10:51:00.386] Packages to be attached in all futures: [n=0] 
[10:51:00.386] getGlobalsAndPackagesXApply() ... DONE
[10:51:00.386] Number of futures (= number of chunks): 2
[10:51:00.386] Launching 2 futures (chunks) ...
[10:51:00.386] Chunk #1 of 2 ...
[10:51:00.386]  - Finding globals in 'X' for chunk #1 ...
[10:51:00.386] |  :  .  |  getGlobalsAndPackages() ...
[10:51:00.386] |  :  .  |  :  Searching for globals ...
[10:51:00.387] |  :  .  |  :  .  globals found: [0] 
[10:51:00.387] |  :  .  |  :  Searching for globals ... DONE
[10:51:00.387] |  :  .  |  :  globals: [0] <none>
[10:51:00.387] |  :  .  |  :  packages: [0] <none>
[10:51:00.387] |  :  .  |  getGlobalsAndPackages() ... done
[10:51:00.387]    + additional globals found: [n=0] 
[10:51:00.387]    + additional namespaces needed: [n=0] 
[10:51:00.387]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:00.387]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.388]  - seeds: [2] <seeds>
[10:51:00.388]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.388] |  :  .  |  getGlobalsAndPackages() ...
[10:51:00.388] |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.388] |  :  .  |  :  Resolving globals: FALSE
[10:51:00.388] |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:00.388] |  :  .  |  :  .  {
[10:51:00.388] |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.388] |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:00.388] |  :  .  |  :  .      "# as a global variable                                         "
[10:51:00.388] |  :  .  |  :  .      do.call(function(...) {
[10:51:00.388] |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.388] |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:00.388] |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.388] |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:00.388] |  :  .  |  :  .          "#                                                              "
[10:51:00.388] |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.388] |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:00.388] |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.388] |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:00.388] |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:00.388] |  :  .  |  :  .          repeat {
[10:51:00.388] |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:00.388] |  :  .  |  :  .                  emptyenv())) 
[10:51:00.388] |  :  .  |  :  .                  break
[10:51:00.388] |  :  .  |  :  .              penv <- env
[10:51:00.388] |  :  .  |  :  .              env <- parent.env(env)
[10:51:00.388] |  :  .  |  :  .          }
[10:51:00.388] |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:00.388] |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:00.388] |  :  .  |  :  .          }
[10:51:00.388] |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.388] |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:00.388] |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:00.388] |  :  .  |  :  .          }
[10:51:00.388] |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.388] |  :  .  |  :  .          {
[10:51:00.388] |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.388] |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.388] |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.388] |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:00.388] |  :  .  |  :  .              }
[10:51:00.388] |  :  .  |  :  .              {
[10:51:00.388] |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.388] |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.388] |  :  .  |  :  .                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.388] |  :  .  |  :  .                      envir = globalenv(), inherits = FALSE)
[10:51:00.388] |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:00.388] |  :  .  |  :  .                  })
[10:51:00.388] |  :  .  |  :  .              }
[10:51:00.388] |  :  .  |  :  .          }
[10:51:00.388] |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:00.388] |  :  .  |  :  .  }
[10:51:00.389] |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.389] |  :  .  |  :  Search for packages associated with the globals ...
[10:51:00.389] |  :  .  |  :  .  Packages associated with globals: [0] 
[10:51:00.389] |  :  .  |  :  .  Packages: [0] 
[10:51:00.389] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:00.390] |  :  .  |  :  Packages after dropping 'base': [0] 
[10:51:00.390] |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.390] |  :  .  |  :  packages: [0] 
[10:51:00.390] |  :  .  |  getGlobalsAndPackages() ... done
[10:51:00.390] |  :  .  |  run() for Future (‘Future’) ...
[10:51:00.390] |  :  .  |  :  state: ‘created’
[10:51:00.390] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.390] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.390] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:00.391] |  :  .  |  :  .  Launching futures ...
[10:51:00.391] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:00.391] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:00.391] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.392] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.393] |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:00.393] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:00.393] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:00.394] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.394] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:00.394] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:00.394] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.394] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:51:00.394] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:00.472] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:00.472] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:00.473] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:00.473] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:00.473] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:00.473] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:00.473] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:00.473] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.474] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:51:00.475] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:00.476] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.476] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:00.476] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:00.476] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:00.476] |  :  .  |  :  .  |  Launching futures ... done
[10:51:00.476] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.476] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:00.476] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.476] Created future:
[10:51:00.477] |  :  .  |  :  isFutureResolved() ...
[10:51:00.478] |  :  .  |  :  .  assertValidConnection() ...
[10:51:00.478] |  :  .  |  :  .  |  cluster node index: 1
[10:51:00.478] |  :  .  |  :  .  assertValidConnection() ... done
[10:51:00.488] |  :  .  |  :  isFutureResolved() ... done
[10:51:00.476] MultisessionFuture:
[10:51:00.476] Label: ‘future_replicate-1’
[10:51:00.476] Expression:
[10:51:00.476] {
[10:51:00.476]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.476]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.476]     "# as a global variable                                         "
[10:51:00.476]     do.call(function(...) {
[10:51:00.476]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.476]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.476]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.476]         "# anonymous function.                                          "
[10:51:00.476]         "#                                                              "
[10:51:00.476]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.476]         "# function environment of FUN() to the calling environment.    "
[10:51:00.476]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.476]         "# global environment, which is where globals are written.      "
[10:51:00.476]         penv <- env <- environment(...future.FUN)
[10:51:00.476]         repeat {
[10:51:00.476]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.476]                 emptyenv())) 
[10:51:00.476]                 break
[10:51:00.476]             penv <- env
[10:51:00.476]             env <- parent.env(env)
[10:51:00.476]         }
[10:51:00.476]         if (identical(penv, globalenv())) {
[10:51:00.476]             environment(...future.FUN) <- environment()
[10:51:00.476]         }
[10:51:00.476]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.476]             !isNamespace(penv)) {
[10:51:00.476]             parent.env(penv) <- environment()
[10:51:00.476]         }
[10:51:00.476]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.476]         {
[10:51:00.476]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.476]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.476]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.476]                 on.exit(options(oopts), add = TRUE)
[10:51:00.476]             }
[10:51:00.476]             {
[10:51:00.476]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.476]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.476]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.476]                     envir = globalenv(), inherits = FALSE)
[10:51:00.476]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.476]                 })
[10:51:00.476]             }
[10:51:00.476]         }
[10:51:00.476]     }, args = future.call.arguments)
[10:51:00.476] }
[10:51:00.476] Lazy evaluation: FALSE
[10:51:00.476] Asynchronous evaluation: TRUE
[10:51:00.476] Local evaluation: TRUE
[10:51:00.476] Environment: R_GlobalEnv
[10:51:00.476] Capture standard output: TRUE
[10:51:00.476] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.476] Immediate condition classes: ‘immediateCondition’
[10:51:00.476] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.476] Packages: <none>
[10:51:00.476] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.476] Resolved: FALSE
[10:51:00.476] Value: <not collected>
[10:51:00.476] Conditions captured: <none>
[10:51:00.476] Early signaling: FALSE
[10:51:00.476] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.476] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.489] Chunk #1 of 2 ... DONE
[10:51:00.489] Chunk #2 of 2 ...
[10:51:00.489]  - Finding globals in 'X' for chunk #2 ...
[10:51:00.489] |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:00.489] |  :  .  |  :  .  Searching for globals ...
[10:51:00.490] |  :  .  |  :  .  |  globals found: [0] 
[10:51:00.490] |  :  .  |  :  .  Searching for globals ... DONE
[10:51:00.490] |  :  .  |  :  .  globals: [0] <none>
[10:51:00.490] |  :  .  |  :  .  packages: [0] <none>
[10:51:00.490] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:00.490]    + additional globals found: [n=0] 
[10:51:00.490]    + additional namespaces needed: [n=0] 
[10:51:00.490]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:00.490]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.490]  - seeds: [3] <seeds>
[10:51:00.491]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.491] |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:00.491] |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.491] |  :  .  |  :  .  Resolving globals: FALSE
[10:51:00.491] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:00.491] |  :  .  |  :  .  |  {
[10:51:00.491] |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.491] |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:00.491] |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:00.491] |  :  .  |  :  .  |      do.call(function(...) {
[10:51:00.491] |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.491] |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:00.491] |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.491] |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:00.491] |  :  .  |  :  .  |          "#                                                              "
[10:51:00.491] |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.491] |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:00.491] |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.491] |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:00.491] |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:00.491] |  :  .  |  :  .  |          repeat {
[10:51:00.491] |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:00.491] |  :  .  |  :  .  |                  emptyenv())) 
[10:51:00.491] |  :  .  |  :  .  |                  break
[10:51:00.491] |  :  .  |  :  .  |              penv <- env
[10:51:00.491] |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:00.491] |  :  .  |  :  .  |          }
[10:51:00.491] |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:00.491] |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:00.491] |  :  .  |  :  .  |          }
[10:51:00.491] |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.491] |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:00.491] |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:00.491] |  :  .  |  :  .  |          }
[10:51:00.491] |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.491] |  :  .  |  :  .  |          {
[10:51:00.491] |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.491] |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.491] |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.491] |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:00.491] |  :  .  |  :  .  |              }
[10:51:00.491] |  :  .  |  :  .  |              {
[10:51:00.491] |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.491] |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.491] |  :  .  |  :  .  |                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.491] |  :  .  |  :  .  |                      envir = globalenv(), inherits = FALSE)
[10:51:00.491] |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:00.491] |  :  .  |  :  .  |                  })
[10:51:00.491] |  :  .  |  :  .  |              }
[10:51:00.491] |  :  .  |  :  .  |          }
[10:51:00.491] |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:00.491] |  :  .  |  :  .  |  }
[10:51:00.492] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.492] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:00.492] |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:51:00.492] |  :  .  |  :  .  |  Packages: [0] 
[10:51:00.492] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:00.492] |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:51:00.493] |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.493] |  :  .  |  :  .  packages: [0] 
[10:51:00.493] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:00.493] |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:00.493] |  :  .  |  :  .  state: ‘created’
[10:51:00.493] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.493] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.493] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:00.494] |  :  .  |  :  .  |  Launching futures ...
[10:51:00.494] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:00.494] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:00.494] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.497] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.497] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:00.497] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:00.497] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:00.497] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.498] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:51:00.499] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:00.577] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:00.577] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:00.578] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:00.578] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:00.578] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:00.578] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:00.578] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.579] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:51:00.580] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:51:00.581] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.581] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:00.581] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:00.581] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:00.581] |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:00.581] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.581] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:00.581] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.581] Created future:
[10:51:00.582] |  :  .  |  :  .  isFutureResolved() ...
[10:51:00.583] |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:00.583] |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:00.583] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:00.593] |  :  .  |  :  .  isFutureResolved() ... done
[10:51:00.581] MultisessionFuture:
[10:51:00.581] Label: ‘future_replicate-2’
[10:51:00.581] Expression:
[10:51:00.581] {
[10:51:00.581]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.581]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.581]     "# as a global variable                                         "
[10:51:00.581]     do.call(function(...) {
[10:51:00.581]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.581]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.581]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.581]         "# anonymous function.                                          "
[10:51:00.581]         "#                                                              "
[10:51:00.581]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.581]         "# function environment of FUN() to the calling environment.    "
[10:51:00.581]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.581]         "# global environment, which is where globals are written.      "
[10:51:00.581]         penv <- env <- environment(...future.FUN)
[10:51:00.581]         repeat {
[10:51:00.581]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.581]                 emptyenv())) 
[10:51:00.581]                 break
[10:51:00.581]             penv <- env
[10:51:00.581]             env <- parent.env(env)
[10:51:00.581]         }
[10:51:00.581]         if (identical(penv, globalenv())) {
[10:51:00.581]             environment(...future.FUN) <- environment()
[10:51:00.581]         }
[10:51:00.581]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.581]             !isNamespace(penv)) {
[10:51:00.581]             parent.env(penv) <- environment()
[10:51:00.581]         }
[10:51:00.581]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.581]         {
[10:51:00.581]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.581]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.581]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.581]                 on.exit(options(oopts), add = TRUE)
[10:51:00.581]             }
[10:51:00.581]             {
[10:51:00.581]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.581]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.581]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.581]                     envir = globalenv(), inherits = FALSE)
[10:51:00.581]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.581]                 })
[10:51:00.581]             }
[10:51:00.581]         }
[10:51:00.581]     }, args = future.call.arguments)
[10:51:00.581] }
[10:51:00.581] Lazy evaluation: FALSE
[10:51:00.581] Asynchronous evaluation: TRUE
[10:51:00.581] Local evaluation: TRUE
[10:51:00.581] Environment: R_GlobalEnv
[10:51:00.581] Capture standard output: TRUE
[10:51:00.581] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.581] Immediate condition classes: ‘immediateCondition’
[10:51:00.581] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.581] Packages: <none>
[10:51:00.581] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.581] Resolved: FALSE
[10:51:00.581] Value: <not collected>
[10:51:00.581] Conditions captured: <none>
[10:51:00.581] Early signaling: FALSE
[10:51:00.581] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.581] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.594] Chunk #2 of 2 ... DONE
[10:51:00.594] Launching 2 futures (chunks) ... DONE
[10:51:00.594] Resolving 2 futures (chunks) ...
[10:51:00.594] |  :  .  |  :  .  value() on list ...
[10:51:00.594] |  :  .  |  :  .  |  recursive: 0
[10:51:00.594] |  :  .  |  :  .  |  length: 2
[10:51:00.594] |  :  .  |  :  .  |  
[10:51:00.595] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:51:00.595] |  :  .  |  :  .  |  checking value #1 ...
[10:51:00.595] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:00.595] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:00.595] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:00.595] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:00.595] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:00.596] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.596] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:00.596] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:00.596] |  :  .  |  :  .  |  :  .  |  received data:
[10:51:00.596] |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:00.596] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 2
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 6
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 8
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi TRUE
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "eade8d52350bb8983725bb037746accc"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 65904
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:50:59"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.596] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:00.596] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:51:00.596] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.596] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:00.607] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:00.607] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.607] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:00.607] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:00.607] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.607] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:00.608] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.608] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.608] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.608] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.608] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:00.608] |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:51:00.608] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.608] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:00.608] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:00.608] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:00.608] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:00.608] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:00.609] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:00.609] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:51:00.609] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:51:00.609] |  :  .  |  :  .  |  :  .  until=1
[10:51:00.609] |  :  .  |  :  .  |  :  .  relaying element #1
[10:51:00.609] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.609] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.609] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.609] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.609] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.610] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.610] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.610] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.610] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.610] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.610] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.610] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.610] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:00.610] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:00.610] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:00.611] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:00.611] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.611] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.611] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.611] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.611] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.611] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.611] |  :  .  |  :  .  |  :  .  value: <list>
[10:51:00.611] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:00.611] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.611] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:00.612] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:00.612] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:00.612] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:00.612] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:00.612] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:00.612] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:00.612] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:00.612] |  :  .  |  :  .  |  :  .  until=2
[10:51:00.612] |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:00.612] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:00.612] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:00.613] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:51:00.613] |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:51:00.613] |  :  .  |  :  .  |  checking value #1 ... done
[10:51:00.613] |  :  .  |  :  .  |  checking value #2 ...
[10:51:00.613] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:00.613] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:00.613] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:00.613] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.614] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:00.624] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:00.624] |  :  .  |  :  .  |  checking value #2 ... done
[10:51:00.634] |  :  .  |  :  .  |  Number of remaining objects: 1
[10:51:00.634] |  :  .  |  :  .  |  checking value #2 ...
[10:51:00.634] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:00.635] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:00.635] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:00.635] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.635] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:00.636] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.636] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.636] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:00.636] |  :  .  |  :  .  |  :  .  |  received data:
[10:51:00.636] |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:00.636] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 3
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 2
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 8
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ : int 9
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi TRUE
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "0bbd526ee799addd90bb5c3a6fa4329b"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 65905
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.636] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:00.636] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:51:00.636] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.636] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:00.647] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:00.647] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.647] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:00.647] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:00.647] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.647] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:00.648] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:00.648] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:00.648] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:00.648] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.648] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:00.648] |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:51:00.648] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.648] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:00.648] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:00.648] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:00.648] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:00.649] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:00.649] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:00.649] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:00.649] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:00.649] |  :  .  |  :  .  |  :  .  until=2
[10:51:00.649] |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:00.649] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.649] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.649] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.649] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.649] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.650] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.650] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.650] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.650] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.650] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.650] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.650] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.650] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:00.650] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:00.650] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.651] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:00.651] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.651] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.651] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.651] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.651] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.651] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.651] |  :  .  |  :  .  |  :  .  value: <list>
[10:51:00.651] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:00.651] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.652] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:00.652] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:00.652] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  until=2
[10:51:00.652] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:00.652] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:00.653] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.653] |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:51:00.653] |  :  .  |  :  .  |  checking value #2 ... done
[10:51:00.653] |  :  .  |  :  .  |  Relaying remaining futures ...
[10:51:00.653] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:00.653] |  :  .  |  :  .  |  :  .  nx: 2
[10:51:00.653] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:00.653] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:00.653] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:00.653] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:00.653] |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:00.654] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:00.654] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:00.654] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:00.654] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:00.654] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:00.654] |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:51:00.654] |  :  .  |  :  .  value() on list ... done
[10:51:00.654]  - Number of value chunks collected: 2
[10:51:00.654] Resolving 2 futures (chunks) ... DONE
[10:51:00.654] Reducing values from 2 chunks ...
[10:51:00.655]  - Number of values collected after concatenation: 5
[10:51:00.655]  - Number of values expected: 5
[10:51:00.655] Reducing values from 2 chunks ... DONE
[10:51:00.655] future_lapply() ... DONE
[10:51:00.655] future_lapply() ...
[10:51:00.655] Generating random seeds ...
[10:51:00.656] Generating random seed streams for 5 elements ...
[10:51:00.656] Generating random seed streams for 5 elements ... DONE
[10:51:00.656] Generating random seeds ... DONE
[10:51:00.656] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:51:00.656] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.657] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:00.657] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.657] Number of chunks: 2
[10:51:00.657] getGlobalsAndPackagesXApply() ...
[10:51:00.657]  - future.globals: TRUE
[10:51:00.657] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:00.658] |  :  .  |  :  .  |  Searching for globals ...
[10:51:00.659] |  :  .  |  :  .  |  :  globals found: [2] ‘FUN’, ‘sample’
[10:51:00.659] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:00.659] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:00.659] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:00.659] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:51:00.659] |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:51:00.660] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:00.660] |  :  .  |  :  .  |  The total size of the 1 globals is 132 bytes (132 bytes)
[10:51:00.660] |  :  .  |  :  .  |  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:51:00.660] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:51:00.660] |  :  .  |  :  .  |  globals: [1] ‘FUN’
[10:51:00.660] |  :  .  |  :  .  |  packages: [0] 
[10:51:00.660] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:00.661]  - globals found/used: [n=1] ‘FUN’
[10:51:00.661]  - needed namespaces: [n=0] 
[10:51:00.661] Finding globals ... DONE
[10:51:00.661]  - use_args: TRUE
[10:51:00.661]  - Getting '...' globals ...
[10:51:00.661] |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:00.661] |  :  .  |  :  .  |  recursive: 0
[10:51:00.661] |  :  .  |  :  .  |  length: 1
[10:51:00.662] |  :  .  |  :  .  |  elements: ‘...’
[10:51:00.662] |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:51:00.662] |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:51:00.662] |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:51:00.662] |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:51:00.662] |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:00.662]    - '...' content: [n=0] 
[10:51:00.662] List of 1
[10:51:00.662]  $ ...: list()
[10:51:00.662]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.662]  - attr(*, "where")=List of 1
[10:51:00.662]   ..$ ...:<environment: 0x564ad6c6de58> 
[10:51:00.662]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.662]  - attr(*, "resolved")= logi TRUE
[10:51:00.662]  - attr(*, "total_size")= num NA
[10:51:00.665]  - Getting '...' globals ... DONE
[10:51:00.665] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:00.665] List of 2
[10:51:00.665]  $ ...future.FUN:function (...)  
[10:51:00.665]  $ ...          : list()
[10:51:00.665]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.665]  - attr(*, "where")=List of 2
[10:51:00.665]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:00.665]   ..$ ...          :<environment: 0x564ad6c6de58> 
[10:51:00.665]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.665]  - attr(*, "resolved")= logi FALSE
[10:51:00.665]  - attr(*, "total_size")= num 7184
[10:51:00.668] Packages to be attached in all futures: [n=0] 
[10:51:00.668] getGlobalsAndPackagesXApply() ... DONE
[10:51:00.668] Number of futures (= number of chunks): 2
[10:51:00.668] Launching 2 futures (chunks) ...
[10:51:00.668] Chunk #1 of 2 ...
[10:51:00.669]  - Finding globals in 'X' for chunk #1 ...
[10:51:00.669] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:00.669] |  :  .  |  :  .  |  Searching for globals ...
[10:51:00.669] |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:00.669] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:00.669] |  :  .  |  :  .  |  globals: [0] <none>
[10:51:00.669] |  :  .  |  :  .  |  packages: [0] <none>
[10:51:00.669] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:00.669]    + additional globals found: [n=0] 
[10:51:00.670]    + additional namespaces needed: [n=0] 
[10:51:00.670]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:00.670]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.670]  - seeds: [2] <seeds>
[10:51:00.670]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.670] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:00.670] |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.670] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:00.670] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:00.671] |  :  .  |  :  .  |  :  {
[10:51:00.671] |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.671] |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:00.671] |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:00.671] |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:00.671] |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.671] |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:00.671] |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.671] |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:00.671] |  :  .  |  :  .  |  :          "#                                                              "
[10:51:00.671] |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.671] |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:00.671] |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.671] |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:00.671] |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:00.671] |  :  .  |  :  .  |  :          repeat {
[10:51:00.671] |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:00.671] |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:00.671] |  :  .  |  :  .  |  :                  break
[10:51:00.671] |  :  .  |  :  .  |  :              penv <- env
[10:51:00.671] |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:00.671] |  :  .  |  :  .  |  :          }
[10:51:00.671] |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:00.671] |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:00.671] |  :  .  |  :  .  |  :          }
[10:51:00.671] |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.671] |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:00.671] |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:00.671] |  :  .  |  :  .  |  :          }
[10:51:00.671] |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.671] |  :  .  |  :  .  |  :          {
[10:51:00.671] |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.671] |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.671] |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.671] |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:00.671] |  :  .  |  :  .  |  :              }
[10:51:00.671] |  :  .  |  :  .  |  :              {
[10:51:00.671] |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.671] |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.671] |  :  .  |  :  .  |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.671] |  :  .  |  :  .  |  :                      envir = globalenv(), inherits = FALSE)
[10:51:00.671] |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:00.671] |  :  .  |  :  .  |  :                  })
[10:51:00.671] |  :  .  |  :  .  |  :              }
[10:51:00.671] |  :  .  |  :  .  |  :          }
[10:51:00.671] |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:00.671] |  :  .  |  :  .  |  :  }
[10:51:00.671] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.671] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:00.671] |  :  .  |  :  .  |  :  Packages associated with globals: [0] 
[10:51:00.672] |  :  .  |  :  .  |  :  Packages: [0] 
[10:51:00.672] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:00.672] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:51:00.672] |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.672] |  :  .  |  :  .  |  packages: [0] 
[10:51:00.672] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:00.672] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:00.672] |  :  .  |  :  .  |  state: ‘created’
[10:51:00.673] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.673] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.673] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:00.673] |  :  .  |  :  .  |  :  Launching futures ...
[10:51:00.673] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:00.673] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:00.673] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:00.675] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:00.676] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.676] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:00.676] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:00.678] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.678] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:00.678] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:00.678] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.678] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:51:00.678] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:00.756] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:00.756] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:00.757] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:00.757] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:00.757] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:00.757] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:00.757] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.758] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:00.759] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.760] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:00.760] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:00.760] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:00.760] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:00.760] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.760] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:00.760] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.760] Created future:
[10:51:00.761] |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:00.762] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:00.762] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:00.762] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:00.772] |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:00.760] MultisessionFuture:
[10:51:00.760] Label: ‘future_replicate-1’
[10:51:00.760] Expression:
[10:51:00.760] {
[10:51:00.760]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.760]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.760]     "# as a global variable                                         "
[10:51:00.760]     do.call(function(...) {
[10:51:00.760]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.760]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.760]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.760]         "# anonymous function.                                          "
[10:51:00.760]         "#                                                              "
[10:51:00.760]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.760]         "# function environment of FUN() to the calling environment.    "
[10:51:00.760]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.760]         "# global environment, which is where globals are written.      "
[10:51:00.760]         penv <- env <- environment(...future.FUN)
[10:51:00.760]         repeat {
[10:51:00.760]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.760]                 emptyenv())) 
[10:51:00.760]                 break
[10:51:00.760]             penv <- env
[10:51:00.760]             env <- parent.env(env)
[10:51:00.760]         }
[10:51:00.760]         if (identical(penv, globalenv())) {
[10:51:00.760]             environment(...future.FUN) <- environment()
[10:51:00.760]         }
[10:51:00.760]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.760]             !isNamespace(penv)) {
[10:51:00.760]             parent.env(penv) <- environment()
[10:51:00.760]         }
[10:51:00.760]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.760]         {
[10:51:00.760]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.760]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.760]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.760]                 on.exit(options(oopts), add = TRUE)
[10:51:00.760]             }
[10:51:00.760]             {
[10:51:00.760]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.760]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.760]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.760]                     envir = globalenv(), inherits = FALSE)
[10:51:00.760]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.760]                 })
[10:51:00.760]             }
[10:51:00.760]         }
[10:51:00.760]     }, args = future.call.arguments)
[10:51:00.760] }
[10:51:00.760] Lazy evaluation: FALSE
[10:51:00.760] Asynchronous evaluation: TRUE
[10:51:00.760] Local evaluation: TRUE
[10:51:00.760] Environment: R_GlobalEnv
[10:51:00.760] Capture standard output: TRUE
[10:51:00.760] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.760] Immediate condition classes: ‘immediateCondition’
[10:51:00.760] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.760] Packages: <none>
[10:51:00.760] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.760] Resolved: FALSE
[10:51:00.760] Value: <not collected>
[10:51:00.760] Conditions captured: <none>
[10:51:00.760] Early signaling: FALSE
[10:51:00.760] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.760] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.773] Chunk #1 of 2 ... DONE
[10:51:00.773] Chunk #2 of 2 ...
[10:51:00.773]  - Finding globals in 'X' for chunk #2 ...
[10:51:00.773] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:00.773] |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:00.774] |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:00.774] |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:00.774] |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:00.774] |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:00.774] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:00.774]    + additional globals found: [n=0] 
[10:51:00.774]    + additional namespaces needed: [n=0] 
[10:51:00.774]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:00.774]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.774]  - seeds: [3] <seeds>
[10:51:00.775]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.775] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:00.775] |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.775] |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:00.775] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:00.775] |  :  .  |  :  .  |  :  .  {
[10:51:00.775] |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.775] |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:00.775] |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:00.775] |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.775] |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:00.775] |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:00.775] |  :  .  |  :  .  |  :  .          repeat {
[10:51:00.775] |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:00.775] |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:00.775] |  :  .  |  :  .  |  :  .                  break
[10:51:00.775] |  :  .  |  :  .  |  :  .              penv <- env
[10:51:00.775] |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:00.775] |  :  .  |  :  .  |  :  .          }
[10:51:00.775] |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:00.775] |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:00.775] |  :  .  |  :  .  |  :  .          }
[10:51:00.775] |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.775] |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:00.775] |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:00.775] |  :  .  |  :  .  |  :  .          }
[10:51:00.775] |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.775] |  :  .  |  :  .  |  :  .          {
[10:51:00.775] |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.775] |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.775] |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.775] |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:00.775] |  :  .  |  :  .  |  :  .              }
[10:51:00.775] |  :  .  |  :  .  |  :  .              {
[10:51:00.775] |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.775] |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.775] |  :  .  |  :  .  |  :  .                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.775] |  :  .  |  :  .  |  :  .                      envir = globalenv(), inherits = FALSE)
[10:51:00.775] |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:00.775] |  :  .  |  :  .  |  :  .                  })
[10:51:00.775] |  :  .  |  :  .  |  :  .              }
[10:51:00.775] |  :  .  |  :  .  |  :  .          }
[10:51:00.775] |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:00.775] |  :  .  |  :  .  |  :  .  }
[10:51:00.776] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.776] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:00.776] |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:51:00.776] |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:51:00.776] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:00.776] |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:51:00.777] |  :  .  |  :  .  |  :  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.777] |  :  .  |  :  .  |  :  packages: [0] 
[10:51:00.777] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:00.777] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:00.777] |  :  .  |  :  .  |  :  state: ‘created’
[10:51:00.777] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.777] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.777] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:00.777] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:00.778] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:00.778] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:00.778] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.779] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.779] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:00.780] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:00.781] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:00.781] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.781] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:51:00.781] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:00.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:00.863] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.864] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.865] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:51:00.866] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:00.867] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:00.867] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:00.867] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:00.867] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:00.867] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.867] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:00.867] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:00.867] Created future:
[10:51:00.868] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:00.869] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:00.869] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:00.869] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:00.879] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:00.867] MultisessionFuture:
[10:51:00.867] Label: ‘future_replicate-2’
[10:51:00.867] Expression:
[10:51:00.867] {
[10:51:00.867]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.867]     "# expression in do.call(), because function called uses '...'  "
[10:51:00.867]     "# as a global variable                                         "
[10:51:00.867]     do.call(function(...) {
[10:51:00.867]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.867]         "# without having an '...' argument. This means '...' is treated"
[10:51:00.867]         "# as a global variable. This may happen when FUN() is an       "
[10:51:00.867]         "# anonymous function.                                          "
[10:51:00.867]         "#                                                              "
[10:51:00.867]         "# If an anonymous function, we will make sure to restore the   "
[10:51:00.867]         "# function environment of FUN() to the calling environment.    "
[10:51:00.867]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.867]         "# global environment, which is where globals are written.      "
[10:51:00.867]         penv <- env <- environment(...future.FUN)
[10:51:00.867]         repeat {
[10:51:00.867]             if (identical(env, globalenv()) || identical(env, 
[10:51:00.867]                 emptyenv())) 
[10:51:00.867]                 break
[10:51:00.867]             penv <- env
[10:51:00.867]             env <- parent.env(env)
[10:51:00.867]         }
[10:51:00.867]         if (identical(penv, globalenv())) {
[10:51:00.867]             environment(...future.FUN) <- environment()
[10:51:00.867]         }
[10:51:00.867]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.867]             !isNamespace(penv)) {
[10:51:00.867]             parent.env(penv) <- environment()
[10:51:00.867]         }
[10:51:00.867]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.867]         {
[10:51:00.867]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.867]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.867]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.867]                 on.exit(options(oopts), add = TRUE)
[10:51:00.867]             }
[10:51:00.867]             {
[10:51:00.867]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.867]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.867]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.867]                     envir = globalenv(), inherits = FALSE)
[10:51:00.867]                   ...future.FUN(...future.X_jj, ...)
[10:51:00.867]                 })
[10:51:00.867]             }
[10:51:00.867]         }
[10:51:00.867]     }, args = future.call.arguments)
[10:51:00.867] }
[10:51:00.867] Lazy evaluation: FALSE
[10:51:00.867] Asynchronous evaluation: TRUE
[10:51:00.867] Local evaluation: TRUE
[10:51:00.867] Environment: R_GlobalEnv
[10:51:00.867] Capture standard output: TRUE
[10:51:00.867] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:00.867] Immediate condition classes: ‘immediateCondition’
[10:51:00.867] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:00.867] Packages: <none>
[10:51:00.867] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:00.867] Resolved: FALSE
[10:51:00.867] Value: <not collected>
[10:51:00.867] Conditions captured: <none>
[10:51:00.867] Early signaling: FALSE
[10:51:00.867] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:00.867] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:00.880] Chunk #2 of 2 ... DONE
[10:51:00.880] Launching 2 futures (chunks) ... DONE
[10:51:00.880] Resolving 2 futures (chunks) ...
[10:51:00.880] |  :  .  |  :  .  |  :  value() on list ...
[10:51:00.880] |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:00.880] |  :  .  |  :  .  |  :  .  length: 2
[10:51:00.880] |  :  .  |  :  .  |  :  .  
[10:51:00.880] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:51:00.881] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:51:00.881] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:00.881] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:00.881] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:00.881] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:00.881] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 2
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 4
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 7
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi TRUE
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "eade8d52350bb8983725bb037746accc"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 65904
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:50:59"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.882] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:00.893] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:00.893] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.893] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:00.893] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:00.893] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:00.894] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.895] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.896] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:00.897] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:00.898] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.899] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.899] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:51:00.899] |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:51:00.899] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:51:00.899] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:00.899] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:00.899] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:00.899] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:00.900] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:00.900] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:00.910] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:00.910] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:00.920] |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:51:00.921] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:51:00.921] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:51:00.921] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:00.921] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:00.921] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 3
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 8
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 3
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 2
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi TRUE
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "0bbd526ee799addd90bb5c3a6fa4329b"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 65905
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:00.922] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:51:00.933] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:51:00.933] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:00.933] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:51:00.933] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:00.933] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:00.934] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.935] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.936] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:51:00.937] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.938] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:51:00.939] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:51:00.939] |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:51:00.939] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:51:00.940] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:51:00.940] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.940] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:00.940] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:51:00.940] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:51:00.940] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:51:00.940] |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:51:00.940] |  :  .  |  :  .  |  :  value() on list ... done
[10:51:00.940]  - Number of value chunks collected: 2
[10:51:00.940] Resolving 2 futures (chunks) ... DONE
[10:51:00.940] Reducing values from 2 chunks ...
[10:51:00.941]  - Number of values collected after concatenation: 5
[10:51:00.941]  - Number of values expected: 5
[10:51:00.941] Reducing values from 2 chunks ... DONE
[10:51:00.941] future_lapply() ... DONE
[10:51:00.941] future_lapply() ...
[10:51:00.941] Generating random seeds ...
[10:51:00.942] Generating random seed streams for 5 elements ...
[10:51:00.942] Generating random seed streams for 5 elements ... DONE
[10:51:00.942] Generating random seeds ... DONE
[10:51:00.942] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:51:00.942] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.943] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:00.943] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.943] Number of chunks: 2
[10:51:00.943] getGlobalsAndPackagesXApply() ...
[10:51:00.943]  - future.globals: TRUE
[10:51:00.943] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:00.943] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:00.945] |  :  .  |  :  .  |  :  .  |  globals found: [2] ‘FUN’, ‘sample’
[10:51:00.945] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:00.945] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:00.945] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:00.945] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:51:00.945] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:51:00.946] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:00.946] |  :  .  |  :  .  |  :  .  The total size of the 1 globals is 132 bytes (132 bytes)
[10:51:00.946] |  :  .  |  :  .  |  :  .  The total size of the 1 globals exported for future expression (‘FUN()’) is 132 bytes There is one global: ‘FUN’ (132 bytes of class ‘function’)
[10:51:00.946] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:51:00.948] |  :  .  |  :  .  |  :  .  globals: [1] ‘FUN’
[10:51:00.948] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:51:00.948] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:00.948]  - globals found/used: [n=1] ‘FUN’
[10:51:00.948]  - needed namespaces: [n=0] 
[10:51:00.948] Finding globals ... DONE
[10:51:00.949]  - use_args: TRUE
[10:51:00.949]  - Getting '...' globals ...
[10:51:00.949] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:00.949] |  :  .  |  :  .  |  :  .  recursive: 0
[10:51:00.949] |  :  .  |  :  .  |  :  .  length: 1
[10:51:00.949] |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:51:00.949] |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:51:00.949] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:51:00.950] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:51:00.950] |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:51:00.950] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:00.950]    - '...' content: [n=0] 
[10:51:00.950] List of 1
[10:51:00.950]  $ ...: list()
[10:51:00.950]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.950]  - attr(*, "where")=List of 1
[10:51:00.950]   ..$ ...:<environment: 0x564ad73a1338> 
[10:51:00.950]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.950]  - attr(*, "resolved")= logi TRUE
[10:51:00.950]  - attr(*, "total_size")= num NA
[10:51:00.952]  - Getting '...' globals ... DONE
[10:51:00.953] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:51:00.953] List of 2
[10:51:00.953]  $ ...future.FUN:function (...)  
[10:51:00.953]  $ ...          : list()
[10:51:00.953]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:00.953]  - attr(*, "where")=List of 2
[10:51:00.953]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:00.953]   ..$ ...          :<environment: 0x564ad73a1338> 
[10:51:00.953]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:00.953]  - attr(*, "resolved")= logi FALSE
[10:51:00.953]  - attr(*, "total_size")= num 7184
[10:51:00.955] Packages to be attached in all futures: [n=0] 
[10:51:00.956] getGlobalsAndPackagesXApply() ... DONE
[10:51:00.956] Number of futures (= number of chunks): 2
[10:51:00.956] Launching 2 futures (chunks) ...
[10:51:00.956] Chunk #1 of 2 ...
[10:51:00.956]  - Finding globals in 'X' for chunk #1 ...
[10:51:00.956] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:00.956] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:00.957] |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:00.957] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:00.957] |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:00.957] |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:00.957] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:00.957]    + additional globals found: [n=0] 
[10:51:00.957]    + additional namespaces needed: [n=0] 
[10:51:00.957]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:00.957]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:00.957]  - seeds: [2] <seeds>
[10:51:00.957]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.958] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:00.958] |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.958] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:00.958] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:00.958] |  :  .  |  :  .  |  :  .  |  {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:00.958] |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                  break
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          }
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          }
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          }
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              }
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                      envir = globalenv(), inherits = FALSE)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |                  })
[10:51:00.958] |  :  .  |  :  .  |  :  .  |              }
[10:51:00.958] |  :  .  |  :  .  |  :  .  |          }
[10:51:00.958] |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:00.958] |  :  .  |  :  .  |  :  .  |  }
[10:51:00.959] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:00.959] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:00.959] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:51:00.959] |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:51:00.959] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:00.959] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:51:00.959] |  :  .  |  :  .  |  :  .  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:00.960] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:51:00.960] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:00.960] |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:00.960] |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:00.960] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:00.960] |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:00.960] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:00.960] |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:00.961] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:00.961] |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:00.961] |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:00.962] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:00.962] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:00.962] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:00.963] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:00.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:00.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:51:00.964] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:01.045] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:01.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:01.046] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:01.046] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:01.046] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:01.047] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:01.048] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:01.049] |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:01.050] |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.050] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:01.050] |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:01.050] Created future:
[10:51:01.051] |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:01.051] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:01.051] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:01.052] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:01.062] |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:01.050] MultisessionFuture:
[10:51:01.050] Label: ‘future_replicate-1’
[10:51:01.050] Expression:
[10:51:01.050] {
[10:51:01.050]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.050]     "# expression in do.call(), because function called uses '...'  "
[10:51:01.050]     "# as a global variable                                         "
[10:51:01.050]     do.call(function(...) {
[10:51:01.050]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.050]         "# without having an '...' argument. This means '...' is treated"
[10:51:01.050]         "# as a global variable. This may happen when FUN() is an       "
[10:51:01.050]         "# anonymous function.                                          "
[10:51:01.050]         "#                                                              "
[10:51:01.050]         "# If an anonymous function, we will make sure to restore the   "
[10:51:01.050]         "# function environment of FUN() to the calling environment.    "
[10:51:01.050]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.050]         "# global environment, which is where globals are written.      "
[10:51:01.050]         penv <- env <- environment(...future.FUN)
[10:51:01.050]         repeat {
[10:51:01.050]             if (identical(env, globalenv()) || identical(env, 
[10:51:01.050]                 emptyenv())) 
[10:51:01.050]                 break
[10:51:01.050]             penv <- env
[10:51:01.050]             env <- parent.env(env)
[10:51:01.050]         }
[10:51:01.050]         if (identical(penv, globalenv())) {
[10:51:01.050]             environment(...future.FUN) <- environment()
[10:51:01.050]         }
[10:51:01.050]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.050]             !isNamespace(penv)) {
[10:51:01.050]             parent.env(penv) <- environment()
[10:51:01.050]         }
[10:51:01.050]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.050]         {
[10:51:01.050]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.050]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.050]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.050]                 on.exit(options(oopts), add = TRUE)
[10:51:01.050]             }
[10:51:01.050]             {
[10:51:01.050]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.050]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.050]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.050]                     envir = globalenv(), inherits = FALSE)
[10:51:01.050]                   ...future.FUN(...future.X_jj, ...)
[10:51:01.050]                 })
[10:51:01.050]             }
[10:51:01.050]         }
[10:51:01.050]     }, args = future.call.arguments)
[10:51:01.050] }
[10:51:01.050] Lazy evaluation: FALSE
[10:51:01.050] Asynchronous evaluation: TRUE
[10:51:01.050] Local evaluation: TRUE
[10:51:01.050] Environment: R_GlobalEnv
[10:51:01.050] Capture standard output: TRUE
[10:51:01.050] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:01.050] Immediate condition classes: ‘immediateCondition’
[10:51:01.050] Globals: 5 objects totaling 414 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, list ‘...future.seeds_ii’ of 103 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:01.050] Packages: <none>
[10:51:01.050] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:01.050] Resolved: FALSE
[10:51:01.050] Value: <not collected>
[10:51:01.050] Conditions captured: <none>
[10:51:01.050] Early signaling: FALSE
[10:51:01.050] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:01.050] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.062] Chunk #1 of 2 ... DONE
[10:51:01.063] Chunk #2 of 2 ...
[10:51:01.063]  - Finding globals in 'X' for chunk #2 ...
[10:51:01.063] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:01.063] |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:51:01.063] |  :  .  |  :  .  |  :  .  |  :  globals found: [0] 
[10:51:01.063] |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:51:01.064] |  :  .  |  :  .  |  :  .  |  globals: [0] <none>
[10:51:01.064] |  :  .  |  :  .  |  :  .  |  packages: [0] <none>
[10:51:01.064] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:01.064]    + additional globals found: [n=0] 
[10:51:01.064]    + additional namespaces needed: [n=0] 
[10:51:01.064]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:01.064]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:01.064]  - seeds: [3] <seeds>
[10:51:01.064]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.065] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :  {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# without having an '...' argument. This means '...' is treated"
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# as a global variable. This may happen when FUN() is an       "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# anonymous function.                                          "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "#                                                              "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# If an anonymous function, we will make sure to restore the   "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# function environment of FUN() to the calling environment.    "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          "# global environment, which is where globals are written.      "
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          penv <- env <- environment(...future.FUN)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          repeat {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              if (identical(env, globalenv()) || identical(env, 
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                  emptyenv())) 
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                  break
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              penv <- env
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              env <- parent.env(env)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          if (identical(penv, globalenv())) {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              environment(...future.FUN) <- environment()
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              !isNamespace(penv)) {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              parent.env(penv) <- environment()
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                  on.exit(options(oopts), add = TRUE)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                      envir = globalenv(), inherits = FALSE)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                    ...future.FUN(...future.X_jj, ...)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :                  })
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :              }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :          }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  :  }
[10:51:01.065] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:51:01.066] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:51:01.066] |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [0] 
[10:51:01.066] |  :  .  |  :  .  |  :  .  |  :  Packages: [0] 
[10:51:01.066] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:51:01.066] |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:51:01.066] |  :  .  |  :  .  |  :  .  |  globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.067] |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:51:01.067] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:51:01.067] |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:51:01.067] |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:51:01.067] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.067] |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.067] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:51:01.067] |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:51:01.068] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:51:01.068] |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:51:01.068] |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:01.069] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:01.069] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:51:01.070] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:01.071] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:01.071] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:01.071] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:01.071] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:51:01.071] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:51:01.149] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:51:01.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:51:01.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:01.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:51:01.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:51:01.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:51:01.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:51:01.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:51:01.153] |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:51:01.154] Created future:
[10:51:01.155] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:51:01.155] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:51:01.155] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:51:01.155] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:51:01.166] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:51:01.154] MultisessionFuture:
[10:51:01.154] Label: ‘future_replicate-2’
[10:51:01.154] Expression:
[10:51:01.154] {
[10:51:01.154]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.154]     "# expression in do.call(), because function called uses '...'  "
[10:51:01.154]     "# as a global variable                                         "
[10:51:01.154]     do.call(function(...) {
[10:51:01.154]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.154]         "# without having an '...' argument. This means '...' is treated"
[10:51:01.154]         "# as a global variable. This may happen when FUN() is an       "
[10:51:01.154]         "# anonymous function.                                          "
[10:51:01.154]         "#                                                              "
[10:51:01.154]         "# If an anonymous function, we will make sure to restore the   "
[10:51:01.154]         "# function environment of FUN() to the calling environment.    "
[10:51:01.154]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.154]         "# global environment, which is where globals are written.      "
[10:51:01.154]         penv <- env <- environment(...future.FUN)
[10:51:01.154]         repeat {
[10:51:01.154]             if (identical(env, globalenv()) || identical(env, 
[10:51:01.154]                 emptyenv())) 
[10:51:01.154]                 break
[10:51:01.154]             penv <- env
[10:51:01.154]             env <- parent.env(env)
[10:51:01.154]         }
[10:51:01.154]         if (identical(penv, globalenv())) {
[10:51:01.154]             environment(...future.FUN) <- environment()
[10:51:01.154]         }
[10:51:01.154]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.154]             !isNamespace(penv)) {
[10:51:01.154]             parent.env(penv) <- environment()
[10:51:01.154]         }
[10:51:01.154]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.154]         {
[10:51:01.154]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.154]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.154]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.154]                 on.exit(options(oopts), add = TRUE)
[10:51:01.154]             }
[10:51:01.154]             {
[10:51:01.154]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.154]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.154]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.154]                     envir = globalenv(), inherits = FALSE)
[10:51:01.154]                   ...future.FUN(...future.X_jj, ...)
[10:51:01.154]                 })
[10:51:01.154]             }
[10:51:01.154]         }
[10:51:01.154]     }, args = future.call.arguments)
[10:51:01.154] }
[10:51:01.154] Lazy evaluation: FALSE
[10:51:01.154] Asynchronous evaluation: TRUE
[10:51:01.154] Local evaluation: TRUE
[10:51:01.154] Environment: R_GlobalEnv
[10:51:01.154] Capture standard output: TRUE
[10:51:01.154] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:01.154] Immediate condition classes: ‘immediateCondition’
[10:51:01.154] Globals: 5 objects totaling 462 bytes (function ‘...future.FUN’ of 132 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, list ‘...future.seeds_ii’ of 139 bytes, NULL ‘...future.globals.maxSize’ of 27 bytes)
[10:51:01.154] Packages: <none>
[10:51:01.154] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:01.154] Resolved: FALSE
[10:51:01.154] Value: <not collected>
[10:51:01.154] Conditions captured: <none>
[10:51:01.154] Early signaling: FALSE
[10:51:01.154] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:01.154] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.166] Chunk #2 of 2 ... DONE
[10:51:01.166] Launching 2 futures (chunks) ... DONE
[10:51:01.166] Resolving 2 futures (chunks) ...
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:01.167] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:01.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 2
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int 4
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int 7
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi TRUE
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "eade8d52350bb8983725bb037746accc"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 65904
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:50:59"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:01.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:01.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:01.179] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:01.180] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:51:01.181] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.182] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.183] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:01.184] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:51:01.185] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:51:01.186] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:51:01.186] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:01.186] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:01.186] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:01.186] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:01.196] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 3
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int 8
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int 3
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int 2
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi TRUE
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "0bbd526ee799addd90bb5c3a6fa4329b"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 65905
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:01.197] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:51:01.210] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:01.211] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.212] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:51:01.213] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:01.214] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:01.215] |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:01.216] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:51:01.217] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:51:01.217] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:51:01.217] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:51:01.217] |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:51:01.217]  - Number of value chunks collected: 2
[10:51:01.217] Resolving 2 futures (chunks) ... DONE
[10:51:01.217] Reducing values from 2 chunks ...
[10:51:01.217]  - Number of values collected after concatenation: 5
[10:51:01.217]  - Number of values expected: 5
[10:51:01.217] Reducing values from 2 chunks ... DONE
[10:51:01.217] future_lapply() ... DONE
- example(replicate) ...
[10:51:01.218] future_lapply() ...
[10:51:01.218] Generating random seeds ...
[10:51:01.218] Generating random seed streams for 5 elements ...
[10:51:01.219] Generating random seed streams for 5 elements ... DONE
[10:51:01.219] Generating random seeds ... DONE
[10:51:01.219] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:51:01.219] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.219] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:01.220] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.220] Number of chunks: 2
[10:51:01.220] getGlobalsAndPackagesXApply() ...
[10:51:01.220]  - future.globals: TRUE
[10:51:01.220] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:01.220] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:01.222] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:51:01.222] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:01.222] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:01.223] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:01.223] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:51:01.223] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:51:01.223] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:01.223] |  :  .  |  :  .  |  :  .  |  :  The total size of the 3 globals is 617 bytes (617 bytes)
[10:51:01.224] |  :  .  |  :  .  |  :  .  |  :  The total size of the 3 globals exported for future expression (‘FUN()’) is 617 bytes There are three globals: ‘foo’ (399 bytes of class ‘function’), ‘FUN’ (179 bytes of class ‘function’) and ‘x’ (39 bytes of class ‘numeric’)
[10:51:01.224] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:51:01.224] |  :  .  |  :  .  |  :  .  |  :  globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:51:01.224] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:51:01.224] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:01.224]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:51:01.224]  - needed namespaces: [n=0] 
[10:51:01.224] Finding globals ... DONE
[10:51:01.224]  - use_args: TRUE
[10:51:01.225]  - Getting '...' globals ...
[10:51:01.225] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:51:01.225] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:51:01.225] |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:51:01.225] |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:51:01.225] |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:51:01.225] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:51:01.226] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:51:01.226] |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:51:01.226] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:51:01.226]    - '...' content: [n=0] 
[10:51:01.226] List of 1
[10:51:01.226]  $ ...: list()
[10:51:01.226]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:01.226]  - attr(*, "where")=List of 1
[10:51:01.226]   ..$ ...:<environment: 0x564ad4b140c8> 
[10:51:01.226]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:01.226]  - attr(*, "resolved")= logi TRUE
[10:51:01.226]  - attr(*, "total_size")= num NA
[10:51:01.228]  - Getting '...' globals ... DONE
[10:51:01.229] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:51:01.229] List of 4
[10:51:01.229]  $ ...future.FUN:function (...)  
[10:51:01.229]  $ foo          :function (x = 1, y = 2)  
[10:51:01.229]  $ x            : num 3
[10:51:01.229]  $ ...          : list()
[10:51:01.229]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:51:01.229]  - attr(*, "where")=List of 4
[10:51:01.229]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:51:01.229]   ..$ foo          :<environment: R_EmptyEnv> 
[10:51:01.229]   ..$ x            :<environment: R_EmptyEnv> 
[10:51:01.229]   ..$ ...          :<environment: 0x564ad4b140c8> 
[10:51:01.229]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:51:01.229]  - attr(*, "resolved")= logi FALSE
[10:51:01.229]  - attr(*, "total_size")= num 7967
[10:51:01.233] Packages to be attached in all futures: [n=0] 
[10:51:01.233] getGlobalsAndPackagesXApply() ... DONE
[10:51:01.233] Number of futures (= number of chunks): 2
[10:51:01.233] Launching 2 futures (chunks) ...
[10:51:01.233] Chunk #1 of 2 ...
[10:51:01.233]  - Finding globals in 'X' for chunk #1 ...
[10:51:01.233] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:01.233] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:51:01.234] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [0] 
[10:51:01.234] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:51:01.234] |  :  .  |  :  .  |  :  .  |  :  globals: [0] <none>
[10:51:01.234] |  :  .  |  :  .  |  :  .  |  :  packages: [0] <none>
[10:51:01.234] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:01.234]    + additional globals found: [n=0] 
[10:51:01.234]    + additional namespaces needed: [n=0] 
[10:51:01.234]  - Finding globals in 'X' for chunk #1 ... DONE
[10:51:01.234]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:01.234]  - seeds: [2] <seeds>
[10:51:01.235]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .  {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                      envir = globalenv(), inherits = FALSE)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .              }
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:51:01.235] |  :  .  |  :  .  |  :  .  |  :  .  }
[10:51:01.236] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:51:01.236] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:51:01.236] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:51:01.236] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:51:01.236] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:51:01.236] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  :  globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.237] |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.238] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:51:01.238] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:51:01.238] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:51:01.238] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:51:01.238] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:01.239] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:01.240] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:51:01.241] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:51:01.319] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:51:01.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:51:01.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:01.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:51:01.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:51:01.320] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:51:01.321] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:51:01.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:51:01.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:51:01.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:51:01.322] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.323] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:51:01.324] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:51:01.324] Created future:
[10:51:01.325] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:01.325] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:01.325] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:01.326] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:01.336] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:01.324] MultisessionFuture:
[10:51:01.324] Label: ‘future_replicate-1’
[10:51:01.324] Expression:
[10:51:01.324] {
[10:51:01.324]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.324]     "# expression in do.call(), because function called uses '...'  "
[10:51:01.324]     "# as a global variable                                         "
[10:51:01.324]     do.call(function(...) {
[10:51:01.324]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.324]         "# without having an '...' argument. This means '...' is treated"
[10:51:01.324]         "# as a global variable. This may happen when FUN() is an       "
[10:51:01.324]         "# anonymous function.                                          "
[10:51:01.324]         "#                                                              "
[10:51:01.324]         "# If an anonymous function, we will make sure to restore the   "
[10:51:01.324]         "# function environment of FUN() to the calling environment.    "
[10:51:01.324]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.324]         "# global environment, which is where globals are written.      "
[10:51:01.324]         penv <- env <- environment(...future.FUN)
[10:51:01.324]         repeat {
[10:51:01.324]             if (identical(env, globalenv()) || identical(env, 
[10:51:01.324]                 emptyenv())) 
[10:51:01.324]                 break
[10:51:01.324]             penv <- env
[10:51:01.324]             env <- parent.env(env)
[10:51:01.324]         }
[10:51:01.324]         if (identical(penv, globalenv())) {
[10:51:01.324]             environment(...future.FUN) <- environment()
[10:51:01.324]         }
[10:51:01.324]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.324]             !isNamespace(penv)) {
[10:51:01.324]             parent.env(penv) <- environment()
[10:51:01.324]         }
[10:51:01.324]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.324]         {
[10:51:01.324]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.324]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.324]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.324]                 on.exit(options(oopts), add = TRUE)
[10:51:01.324]             }
[10:51:01.324]             {
[10:51:01.324]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.324]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.324]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.324]                     envir = globalenv(), inherits = FALSE)
[10:51:01.324]                   ...future.FUN(...future.X_jj, ...)
[10:51:01.324]                 })
[10:51:01.324]             }
[10:51:01.324]         }
[10:51:01.324]     }, args = future.call.arguments)
[10:51:01.324] }
[10:51:01.324] Lazy evaluation: FALSE
[10:51:01.324] Asynchronous evaluation: TRUE
[10:51:01.324] Local evaluation: TRUE
[10:51:01.324] Environment: 0x564ad4b166b0
[10:51:01.324] Capture standard output: TRUE
[10:51:01.324] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:01.324] Immediate condition classes: ‘immediateCondition’
[10:51:01.324] Globals: 7 objects totaling 899 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 55 bytes, ...)
[10:51:01.324] Packages: <none>
[10:51:01.324] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:01.324] Resolved: FALSE
[10:51:01.324] Value: <not collected>
[10:51:01.324] Conditions captured: <none>
[10:51:01.324] Early signaling: FALSE
[10:51:01.324] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:01.324] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.336] Chunk #1 of 2 ... DONE
[10:51:01.337] Chunk #2 of 2 ...
[10:51:01.337]  - Finding globals in 'X' for chunk #2 ...
[10:51:01.337] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:01.337] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:51:01.337] |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [0] 
[10:51:01.337] |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:51:01.337] |  :  .  |  :  .  |  :  .  |  :  .  globals: [0] <none>
[10:51:01.338] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] <none>
[10:51:01.338] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:01.338]    + additional globals found: [n=0] 
[10:51:01.338]    + additional namespaces needed: [n=0] 
[10:51:01.338]  - Finding globals in 'X' for chunk #2 ... DONE
[10:51:01.338]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:51:01.338]  - seeds: [3] <seeds>
[10:51:01.338]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.338] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:51:01.338] |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                    assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                      envir = globalenv(), inherits = FALSE)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:51:01.339] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  .  globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:51:01.340] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:51:01.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:51:01.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:51:01.342] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:01.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-06f347c5dd2da1449ce001255c0e1dad’
[10:51:01.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:51:01.343] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ...
[10:51:01.344] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:51:01.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:51:01.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'list', earlySignal = 0) ... done
[10:51:01.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:51:01.345] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:51:01.424] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:51:01.425] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:51:01.425] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:01.425] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:51:01.425] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:51:01.426] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:51:01.427] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.427] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:51:01.427] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.427] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:51:01.427] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:51:01.427] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ...
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'add', earlySignal = 0) ... done
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:51:01.428] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.429] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:51:01.429] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:51:01.429] Created future:
[10:51:01.430] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:51:01.430] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:51:01.430] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:51:01.431] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:51:01.441] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:51:01.429] MultisessionFuture:
[10:51:01.429] Label: ‘future_replicate-2’
[10:51:01.429] Expression:
[10:51:01.429] {
[10:51:01.429]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:51:01.429]     "# expression in do.call(), because function called uses '...'  "
[10:51:01.429]     "# as a global variable                                         "
[10:51:01.429]     do.call(function(...) {
[10:51:01.429]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:51:01.429]         "# without having an '...' argument. This means '...' is treated"
[10:51:01.429]         "# as a global variable. This may happen when FUN() is an       "
[10:51:01.429]         "# anonymous function.                                          "
[10:51:01.429]         "#                                                              "
[10:51:01.429]         "# If an anonymous function, we will make sure to restore the   "
[10:51:01.429]         "# function environment of FUN() to the calling environment.    "
[10:51:01.429]         "# We assume FUN() an anonymous function if it lives in the     "
[10:51:01.429]         "# global environment, which is where globals are written.      "
[10:51:01.429]         penv <- env <- environment(...future.FUN)
[10:51:01.429]         repeat {
[10:51:01.429]             if (identical(env, globalenv()) || identical(env, 
[10:51:01.429]                 emptyenv())) 
[10:51:01.429]                 break
[10:51:01.429]             penv <- env
[10:51:01.429]             env <- parent.env(env)
[10:51:01.429]         }
[10:51:01.429]         if (identical(penv, globalenv())) {
[10:51:01.429]             environment(...future.FUN) <- environment()
[10:51:01.429]         }
[10:51:01.429]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:51:01.429]             !isNamespace(penv)) {
[10:51:01.429]             parent.env(penv) <- environment()
[10:51:01.429]         }
[10:51:01.429]         rm(list = c("env", "penv"), inherits = FALSE)
[10:51:01.429]         {
[10:51:01.429]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:51:01.429]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:51:01.429]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:51:01.429]                 on.exit(options(oopts), add = TRUE)
[10:51:01.429]             }
[10:51:01.429]             {
[10:51:01.429]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:51:01.429]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:51:01.429]                   assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:51:01.429]                     envir = globalenv(), inherits = FALSE)
[10:51:01.429]                   ...future.FUN(...future.X_jj, ...)
[10:51:01.429]                 })
[10:51:01.429]             }
[10:51:01.429]         }
[10:51:01.429]     }, args = future.call.arguments)
[10:51:01.429] }
[10:51:01.429] Lazy evaluation: FALSE
[10:51:01.429] Asynchronous evaluation: TRUE
[10:51:01.429] Local evaluation: TRUE
[10:51:01.429] Environment: 0x564ad4b166b0
[10:51:01.429] Capture standard output: TRUE
[10:51:01.429] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:51:01.429] Immediate condition classes: ‘immediateCondition’
[10:51:01.429] Globals: 7 objects totaling 947 bytes (function ‘...future.FUN’ of 179 bytes, function ‘foo’ of 399 bytes, numeric ‘x’ of 39 bytes, DotDotDotList ‘future.call.arguments’ of 97 bytes, list ‘...future.elements_ii’ of 67 bytes, ...)
[10:51:01.429] Packages: <none>
[10:51:01.429] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:51:01.429] Resolved: FALSE
[10:51:01.429] Value: <not collected>
[10:51:01.429] Conditions captured: <none>
[10:51:01.429] Early signaling: FALSE
[10:51:01.429] Owner process: 5dba91387a354e9fdff4c5c40be3489b
[10:51:01.429] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:51:01.442] Chunk #2 of 2 ... DONE
[10:51:01.442] Launching 2 futures (chunks) ... DONE
[10:51:01.442] Resolving 2 futures (chunks) ...
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:51:01.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:01.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:01.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:01.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:01.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:01.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:01.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 2
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:2] 3 2
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:2] 3 2
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi TRUE
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "eade8d52350bb8983725bb037746accc"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 65904
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:50:59"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.006 0 0.007 0 0
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:01.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:01.455] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:01.455] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:01.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:01.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:51:01.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:01.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:01.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.456] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:01.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:01.458] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:51:01.459] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:01.462] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:51:01.463] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:51:01.464] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:51:01.464] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:01.464] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 3
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:2] 3 2
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:2] 3 2
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : num [1:2] 3 2
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi TRUE
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:51:01"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "0bbd526ee799addd90bb5c3a6fa4329b"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 65905
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:51:00"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:51:01.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ...
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-06f347c5dd2da1449ce001255c0e1dad', action = 'remove', earlySignal = 0) ... done
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:51:01.485] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:51:01.486] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.487] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.488] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:01.489] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:51:01.490] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:51:01.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:51:01.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:51:01.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:51:01.492] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:51:01.492] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:51:01.492]  - Number of value chunks collected: 2
[10:51:01.492] Resolving 2 futures (chunks) ... DONE
[10:51:01.492] Reducing values from 2 chunks ...
[10:51:01.492]  - Number of values collected after concatenation: 5
[10:51:01.492]  - Number of values expected: 5
[10:51:01.492] Reducing values from 2 chunks ... DONE
[10:51:01.492] future_lapply() ... DONE
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  New stack:
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:01.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Old stack:
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4b47510> 
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:01.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Not identical
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "init")= chr "done"
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564ad4b47510> 
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:51:01.499] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:51:01.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Formals differ
[10:51:01.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:01.504] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future strategies differ at level 1
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): Setting new future strategy stack:
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of future strategies:
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  1. sequential:
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:51:01.505] |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:01.507] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:51:01.508] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.508] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:51:01.508] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.508] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stopWorkers() for MultisessionFutureBackend ...
[10:51:01.508] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Interrupt active futures ...
[10:51:01.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of futures: 0
[10:51:01.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Interrupt active futures ... done
[10:51:01.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Clear future registry ...
[10:51:01.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Clear future registry ... done
[10:51:01.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stop cluster workers ...
[10:51:01.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopping existing cluster ...
[10:51:01.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Cluster to shut down:
[10:51:01.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:51:01.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stopped cluster: ‘NULL’
[10:51:01.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopping existing cluster ... done
[10:51:01.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stop cluster workers ... done
[10:51:01.521] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stopWorkers() for MultisessionFutureBackend ... done
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Legacy shutdown of cluster workers ...
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ...
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  No pre-existing cluster. Skipping
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ... done
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Legacy shutdown of cluster workers ... done
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "call")= language plan(sequential)
[10:51:01.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  init: NULL
[10:51:01.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:51:01.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:01.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:01.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Backend function: <‘NULL’>
[10:51:01.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:51:01.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): nbrOfWorkers() = 1
[10:51:01.525] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:01.526] |  :  .  |  :  .  |  :  .  |  :  .  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[10:51:01.526] |  :  .  |  :  .  |  :  .  |  :  .  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:01.526] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ...
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  New stack:
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:01.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Old stack:
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 1
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:01.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:01.531] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Not identical
[10:51:01.531] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ...
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 2
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:01.532] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:01.535] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  all.equal() for future ... done
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for FutureStrategyList ... done
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of future strategies:
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :  1. sequential:
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - tweaked: FALSE
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  :     - call: plan(sequential)
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:01.536] |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
