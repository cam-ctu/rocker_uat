
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[10:51:50.528] Future-specific environment variables:
[10:51:50.529] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:51:50.529] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:51:50.529] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:51:50.529] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:51:50.529] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:51:50.529] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_PLAN’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:51:50.530] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:51:50.531] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_WAIT_INTERVAL’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[10:51:50.532] Environment variable ‘R_FUTURE_CONNECTIONS_ONMISUSE’ not set
[10:51:50.533] Environment variable ‘R_FUTURE_DEVICES_ONMISUSE’ not set
[10:51:50.533] R process uuid: cd3056cddfa421e93e4193154af785f5
[10:51:50.533] Setting plan('default')
[10:51:50.534] plan(<character>, .skip = FALSE, .cleanup = NA, .init = FALSE) ...
[10:51:50.534] |  Created default stack
[10:51:50.534] |  Getting default stack: ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:50.534] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = FALSE) ...
[10:51:50.534] |  :  all.equal() for FutureStrategyList ...
[10:51:50.534] |  :  .  New stack:
[10:51:50.535] |  :  .  List of 1
[10:51:50.535] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.535] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.535] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.535] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.535] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.535] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.538] |  :  .  Old stack:
[10:51:50.538] |  :  .  List of 1
[10:51:50.538] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.538] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.538] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.538] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.538] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.538] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:50.538] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.541] |  :  .  Not identical
[10:51:50.541] |  :  .  all.equal() for future ...
[10:51:50.541] |  :  .  |  List of 2
[10:51:50.541] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.541] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.541] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.541] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.541] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.541] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.541] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.541] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.541] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.541] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.541] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:50.545] |  :  .  all.equal() for future ... done
[10:51:50.545] |  :  all.equal() for FutureStrategyList ... done
[10:51:50.545] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:50.545] |  :  List of future strategies:
[10:51:50.545] |  :  1. sequential:
[10:51:50.545] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:50.545] |  :     - tweaked: FALSE
[10:51:50.545] |  :     - call: plan(sequential)
[10:51:50.546] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = FALSE) ... done
[10:51:50.546] plan(<list>, .skip = FALSE, .cleanup = NA, .init = FALSE) ... done
[10:51:50.546] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:50.546] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:51:50.547] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:51:50.547] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:50.586] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:50.586] |  :  all.equal() for FutureStrategyList ...
[10:51:50.586] |  :  .  New stack:
[10:51:50.586] |  :  .  List of 1
[10:51:50.586] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.586] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.586] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.586] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.586] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.586] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:51:50.586] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.589] |  :  .  Old stack:
[10:51:50.589] |  :  .  List of 1
[10:51:50.589] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.589] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.589] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.589] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.589] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.589] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:50.589] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.591] |  :  .  Not identical
[10:51:50.591] |  :  .  all.equal() for future ...
[10:51:50.591] |  :  .  |  List of 2
[10:51:50.591] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.591] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.591] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.591] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.591] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.591] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:51:50.591] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.591] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.591] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.591] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.591] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.591] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:50.596] |  :  .  all.equal() for future ... done
[10:51:50.596] |  :  all.equal() for FutureStrategyList ... done
[10:51:50.597] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:50.597] |  :  List of future strategies:
[10:51:50.597] |  :  1. sequential:
[10:51:50.597] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:50.597] |  :     - tweaked: FALSE
[10:51:50.597] |  :     - call: plan(sequential)
[10:51:50.597] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:50.597] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> message("*** RNG ...")
*** RNG ...
> 
> set_random_seed(seed = NULL)
Warning in rm(list = ".Random.seed", envir = env, inherits = FALSE) :
  object '.Random.seed' not found
> seed <- get_random_seed()
> stopifnot(is.null(seed))
> 
> set_random_seed(seed = 42L)
> seed <- get_random_seed()
> stopifnot(identical(seed, 42L))
> 
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = FALSE)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be TRUE if logical: FALSE>
> stopifnot(inherits(res, "error"))
> 
> seed <- as_lecyer_cmrg_seed(seed = 42L)
Warning in RNGkind("L'Ecuyer-CMRG") :
  '.Random.seed[1]' is not a valid RNG kind so ignored
> str(seed)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(is_lecyer_cmrg_seed(seed))
> set_random_seed(seed = seed)
> stopifnot(identical(get_random_seed(), seed))
> 
> seed2 <- as_lecyer_cmrg_seed(seed = TRUE)
> str(seed2)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(identical(seed2, seed))
> 
> seed3 <- as_lecyer_cmrg_seed(seed = seed)
> str(seed3)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(identical(seed3, seed))
> 
> ## A random seed
> seed4 <- as_lecyer_cmrg_seed(seed = NA)
> str(seed4)
 int [1:7] 10407 1279540750 -941988041 -2007404020 745992093 -1794778694 2071448563
> stopifnot(is_lecyer_cmrg_seed(seed4))
> 
> 
> message(" - make_rng_seeds ...")
 - make_rng_seeds ...
> 
> seeds <- make_rng_seeds(2L, seed = NULL)
> stopifnot(is.null(seeds))
> 
> seeds <- make_rng_seeds(2L, seed = FALSE)
> stopifnot(is.null(seeds))
> 
> seeds <- make_rng_seeds(0L, seed = 42L)
[10:51:50.617] Generating random seeds ...
[10:51:50.617] Generating random seed streams for 0 elements ...
[10:51:50.618] Generating random seed streams for 0 elements ... DONE
[10:51:50.618] Generating random seeds ... DONE
> stopifnot(length(seeds) == 0L, identical(seeds, list()))
> 
> seeds <- make_rng_seeds(2L, seed = TRUE)
[10:51:50.618] Generating random seeds ...
[10:51:50.618] Generating random seed streams for 2 elements ...
[10:51:50.618] Generating random seed streams for 2 elements ... DONE
[10:51:50.618] Generating random seeds ... DONE
> stopifnot(length(seeds) == 2L, all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> seeds <- make_rng_seeds(3L, seed = 42L)
[10:51:50.618] Generating random seeds ...
[10:51:50.618] Generating random seed streams for 3 elements ...
[10:51:50.619] Generating random seed streams for 3 elements ... DONE
[10:51:50.619] Generating random seeds ... DONE
> stopifnot(length(seeds) == 3L, all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> seeds <- make_rng_seeds(1L, seed = 42L)
[10:51:50.619] Generating random seeds ...
[10:51:50.619] Generating random seed streams for 1 elements ...
[10:51:50.619] Generating random seed streams for 1 elements ... DONE
[10:51:50.619] Generating random seeds ... DONE
> stopifnot(length(seeds) == 1L, all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> seeds0 <- lapply(1:3, FUN = as_lecyer_cmrg_seed)
> seeds <- make_rng_seeds(length(seeds0), seed = seeds0)
[10:51:50.619] Generating random seeds ...
[10:51:50.619] Using a pre-define stream of 3 random seeds ...
[10:51:50.620] Using a pre-define stream of 3 random seeds ... DONE
[10:51:50.620] Generating random seeds ... DONE
> stopifnot(length(seeds) == length(seeds0),
+           all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> 
> message(" - exceptions ...")
 - exceptions ...
> 
> ## Invalid L'Ecuyer seed
> seed_invalid <- seed + 1L
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = seed_invalid)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:7] 10408 -2133391686 507561767 1260545904 1362917093 -1772566378 -1344458669>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = 1:2)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:2] 1 2>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid length
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> res <- tryCatch({
+   seeds <- make_rng_seeds(1L, seed = seeds0)
+ }, error = identity)
[10:51:50.621] Generating random seeds ...
[10:51:50.621] Using a pre-define stream of 1 random seeds ...
> print(res)
<simpleError: Argument 'seed' is a list, which specifies the sequence of seeds to be used for each element iterated over, but length(seed) != number of elements: 2 != 1>
> stopifnot(inherits(res, "error"))
> 
> ## Seeds of different kinds
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> seeds0[[1]] <- seeds0[[1]][-1]
> res <- tryCatch({
+   seeds <- make_rng_seeds(2L, seed = seeds0)
+ }, error = identity)
[10:51:50.621] Generating random seeds ...
[10:51:50.621] Using a pre-define stream of 2 random seeds ...
> print(res)
<simpleError: The elements of the list specified in argument 'seed' are not all of the same lengths (did you really pass RNG seeds?): 6, 7>
> stopifnot(inherits(res, "error"))
> 
> ## List of scalar seeds?
> res <- tryCatch({
+   seeds <- make_rng_seeds(1L, seed = list(42L))
+ }, error = identity)
[10:51:50.622] Generating random seeds ...
[10:51:50.622] Using a pre-define stream of 1 random seeds ...
> print(res)
<simpleError in make_rng_seeds(1L, seed = list(42L)): Argument 'seed' is invalid. Pre-generated random seeds must be valid .Random.seed seeds, which means they should be all integers and consists of two or more elements, not just one.>
> stopifnot(inherits(res, "error"))
> 
> ## Not seeds at all?
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> seeds0[[1]] <- letters[1:7]
> res <- tryCatch({
+   seeds <- make_rng_seeds(2L, seed = seeds0)
+ }, error = identity)
[10:51:50.622] Generating random seeds ...
[10:51:50.622] Using a pre-define stream of 2 random seeds ...
> print(res)
<simpleError: The elements of the list specified in argument 'seed' are not all integers (did you really pass RNG seeds?): character, integer>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seeds?
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> seeds0 <- lapply(seeds0, FUN = rev)
> res <- tryCatch({
+   seeds <- make_rng_seeds(2L, seed = seeds0)
+ }, error = identity)
[10:51:50.622] Generating random seeds ...
[10:51:50.623] Using a pre-define stream of 2 random seeds ...
> print(res)
<simpleError: The list in argument 'seed' does not seem to hold elements that are valid .Random.seed values:  int [1:7] 1489374793 -222347416 -603558397 -442010614 -169270483 1280795612 10407>
> stopifnot(inherits(res, "error"))
> 
> 
> message(" - replicated RNG draws")
 - replicated RNG draws
> library(future.apply)
Loading required package: future
[10:51:50.627] Option 'future.startup.script': TRUE
[10:51:50.627] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:51:50.627] Future startup scripts found: <none>
> 
> seed_org <- next_random_seed()
> set.seed(42)
> 
> ## Draw two random number from 1:100 one after the other
> seed_before <- get_random_seed()
> kind_before <- RNGkind()
> x <- sample.int(100L, size = 5L)
> y <- sample.int(100L, size = 5L)
> seed_after <- get_random_seed()
> kind_after <- RNGkind()
> print(c(x, y))
 [1]  2  4 63 76 97  9 85 10 66 23
> 
> ## Draw two random number from 1:100 at once
> set_random_seed(seed_before)
> kind_before2 <- RNGkind()
> z <- sample.int(100L, size = 10L)
> seed_after2 <- get_random_seed()
> kind_after2 <- RNGkind()
> print(z)
 [1]  2  4 63 76 97  9 85 10 66 23
> 
> ## The RNG state is the same after the second ...
> ## run as after the first, two-step, approach
> stopifnot(identical(seed_after2, seed_after))
> stopifnot(identical(kind_before2, kind_before))
> stopifnot(identical(kind_after2, kind_after))
> 
> ## .... and the exact same set of random numbers where
> ## drawn [only true in R (>= 4.0.0)]
> if (getRversion() >= "4.0.0") {
+   stopifnot(identical(z, c(x, y)))
+ } else {
+   stopifnot(identical(z[seq_along(x)], x))
+ }
> 
> set_random_seed(seed_org)
> stopifnot(identical(get_random_seed(), seed_org))
> 
> message("*** RNG ... DONE")
*** RNG ... DONE
> 
> source("incl/end.R")
[10:51:50.630] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:51:50.630] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:51:50.630] |  :  all.equal() for FutureStrategyList ...
[10:51:50.630] |  :  .  New stack:
[10:51:50.630] |  :  .  List of 1
[10:51:50.630] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.630] |  :  .    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:51:50.630] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.630] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.630] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.630] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:50.630] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.632] |  :  .  Old stack:
[10:51:50.633] |  :  .  List of 1
[10:51:50.633] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.633] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.633] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.633] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.633] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.633] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:51:50.633] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:51:50.635] |  :  .  Not identical
[10:51:50.635] |  :  .  all.equal() for future ...
[10:51:50.635] |  :  .  |  List of 2
[10:51:50.635] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.635] |  :  .  |    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:51:50.635] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.635] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.635] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.635] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:50.635] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:51:50.635] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:51:50.635] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:51:50.635] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.635] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:51:50.635] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:51:50.639] |  :  .  all.equal() for future ... done
[10:51:50.639] |  :  all.equal() for FutureStrategyList ... done
[10:51:50.639] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:51:50.639] |  :  List of future strategies:
[10:51:50.639] |  :  1. sequential:
[10:51:50.639] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:51:50.639] |  :     - tweaked: FALSE
[10:51:50.639] |  :     - call: plan(sequential)
[10:51:50.639] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:51:50.639] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
