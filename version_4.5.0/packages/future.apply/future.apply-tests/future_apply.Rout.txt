
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:49:29.914] plan(<NULL>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:29.915] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:29.915] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:29.915] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:29.953] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:29.953] |  :  all.equal() for FutureStrategyList ...
[10:49:29.954] |  :  .  New stack:
[10:49:29.954] |  :  .  List of 1
[10:49:29.954] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:29.954] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:29.954] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:29.954] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.954] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.954] |  :  .    ..- attr(*, "call")= language future::plan("sequential")
[10:49:29.954] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:29.957] |  :  .  Old stack:
[10:49:29.958] |  :  .  List of 1
[10:49:29.958] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:29.958] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:29.958] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:29.958] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.958] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.958] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:29.958] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:29.960] |  :  .  Not identical
[10:49:29.960] |  :  .  all.equal() for future ...
[10:49:29.960] |  :  .  |  List of 2
[10:49:29.960] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:29.960] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:29.960] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:29.960] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.960] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.960] |  :  .  |    ..- attr(*, "call")= language future::plan("sequential")
[10:49:29.960] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:29.960] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:29.960] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:29.960] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.960] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:29.960] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:29.964] |  :  .  all.equal() for future ... done
[10:49:29.964] |  :  all.equal() for FutureStrategyList ... done
[10:49:29.964] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:29.964] |  :  List of future strategies:
[10:49:29.964] |  :  1. sequential:
[10:49:29.964] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:29.964] |  :     - tweaked: FALSE
[10:49:29.964] |  :     - call: plan(sequential)
[10:49:29.965] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:29.965] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
> message("*** future_apply() ...")
*** future_apply() ...
> 
> z0 <- NULL
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+ 
+   message("- From example(apply) ...")
+   X <- matrix(c(1:4, 1, 6:8), nrow = 2L)
+   
+   Y0 <- apply(X, MARGIN = 1L, FUN = table)
+   Y1 <- future_apply(X, MARGIN = 1L, FUN = table)
+   print(Y1)
+   stopifnot(all.equal(Y1, Y0, check.attributes = FALSE)) ## FIXME
+ 
+   Y2 <- future_apply(X, MARGIN = 1L, FUN = "table")
+   print(Y2)
+   stopifnot(identical(Y2, Y1))
+ 
+   Y0 <- apply(X, MARGIN = 1L, FUN = stats::quantile)
+   Y1 <- future_apply(X, MARGIN = 1L, FUN = stats::quantile)
+   print(Y1)
+   stopifnot(all.equal(Y1, Y0))
+ 
+   x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
+   names(dimnames(x)) <- c("row", "col")
+   x3 <- array(x, dim = c(dim(x), 3),
+               dimnames = c(dimnames(x), list(C = paste0("cop.", 1:3))))
+   
+   y0 <- apply(x, MARGIN = 2L, FUN = identity)
+   stopifnot(identical(y0, x))
+   y1 <- future_apply(x, MARGIN = 2L, FUN = identity)
+   print(y1)
+   stopifnot(identical(y1, y0))
+   
+   y0 <- apply(x3, MARGIN = 2:3, FUN = identity)
+   stopifnot(identical(y0, x3))
+   y1 <- future_apply(x3, MARGIN = 2:3, FUN = identity)
+   print(y1)
+   stopifnot(identical(y1, y0))
+ 
+   z <- array(1:24, dim = 2:4)
+   y0 <- apply(z, MARGIN = 1:2, FUN = function(x) seq_len(max(x)))
+   y1 <- future_apply(z, MARGIN = 1:2, FUN = function(x) seq_len(max(x)))
+   print(y1)
+   stopifnot(identical(y1, y0))
+ 
+   message("- apply(X, MARGIN = <character>, ...) ...")
+   X <- matrix(1:2, nrow = 2L, ncol = 1L, dimnames = list(rows = c("a", "b")))
+   y0 <- apply(X, MARGIN = "rows", FUN = identity)
+   y1 <- future_apply(X, MARGIN = "rows", FUN = identity)
+   print(y1)
+   stopifnot(identical(y1, y0))
+ 
+   message("- apply(X, ...) - dim(X) > 2 ...")
+   X <- array(1:12, dim = c(2, 2, 3))
+   y0 <- apply(X, MARGIN = 1L, FUN = identity)
+   y1 <- future_apply(X, MARGIN = 1L, FUN = identity)
+   print(y1)
+   stopifnot(identical(y1, y0))
+ 
+   message("- apply(X, ...) - not all same names ...")
+   FUN <- function(x) {
+     if (x[1] == 1L) names(x) <- letters[seq_along(x)]
+     x
+   }
+   X <- matrix(1:4, nrow = 2L, ncol = 2L)
+   y0 <- apply(X, MARGIN = 1L, FUN = FUN)
+   y1 <- future_apply(X, MARGIN = 1L, FUN = FUN)
+   print(y1)
+   stopifnot(identical(y1, y0))
+ 
+   message("- example(future_apply) - reproducible RNG ...")
+   z1 <- future_apply(X, MARGIN = 1L, FUN = sample,
+           future.seed = 0xBEEF,
+           ## Test also all other 'future.*' arguments
+           future.stdout     = TRUE,
+           future.conditions = NULL,
+           future.globals    = TRUE,
+           future.packages   = NULL,
+           future.scheduling = 1.0,
+           future.chunk.size = NULL,
+           future.label      = "future_apply-%d"
+         )
+   print(z1)
+   if (is.null(z0)) {
+     z0 <- z1
+   } else {
+     stopifnot(identical(z1, z0))
+   }
+ 
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:49:30.028] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.028] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:30.028] |  :  all.equal() for FutureStrategyList ...
[10:49:30.028] |  :  .  New stack:
[10:49:30.028] |  :  .  List of 1
[10:49:30.028] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.028] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.028] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.028] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.028] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.028] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:30.028] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.030] |  :  .  Old stack:
[10:49:30.031] |  :  .  List of 1
[10:49:30.031] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.031] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.031] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.031] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.031] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.031] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:30.031] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.034] |  :  .  Not identical
[10:49:30.034] |  :  .  all.equal() for future ...
[10:49:30.034] |  :  .  |  List of 2
[10:49:30.034] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.034] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.034] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.034] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.034] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.034] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:30.034] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.034] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.034] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.034] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.034] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.034] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.038] |  :  .  all.equal() for future ... done
[10:49:30.038] |  :  all.equal() for FutureStrategyList ... done
[10:49:30.038] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.038] |  :  List of future strategies:
[10:49:30.038] |  :  1. sequential:
[10:49:30.038] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.038] |  :     - tweaked: FALSE
[10:49:30.038] |  :     - call: plan(sequential)
[10:49:30.039] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:30.039] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
- From example(apply) ...
[10:49:30.040] getGlobalsAndPackagesXApply() ...
[10:49:30.040]  - future.globals: TRUE
[10:49:30.040] getGlobalsAndPackages() ...
[10:49:30.041] |  Searching for globals ...
[10:49:30.085] |  :  globals found: [59] ‘FUN’, ‘if’, ‘==’, ‘c’, ‘list.names’, ‘{’, ‘<-’, ‘[’, ‘as.list’, ‘substitute’, ‘-’, ‘&&’, ‘length’, ‘is.list’, ‘!’, ‘is.null’, ‘names’, ‘return’, ‘seq_along’, ‘vapply’, ‘switch’, ‘+’, ‘is.symbol’, ‘as.character’, ‘deparse’, ‘[<-’, ‘missing’, ‘match’, ‘match.arg’, ‘!=’, ‘warning’, ‘list’, ‘[[’, ‘paste’, ‘stop’, ‘integer’, ‘for’, ‘is.factor’, ‘anyNA’, ‘options’, ‘on.exit’, ‘factor’, ‘(’, ‘||’, ‘levels’, ‘as.integer’, ‘which’, ‘is.na’, ‘is.na<-’, ‘>’, ‘prod’, ‘$’, ‘.Machine’, ‘*’, ‘names<-’, ‘array’, ‘tabulate’, ‘class’, ‘class<-’
[10:49:30.085] |  Searching for globals ... DONE
[10:49:30.085] |  Resolving globals: FALSE
[10:49:30.086] |  Search for packages associated with the globals ...
[10:49:30.086] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.087] |  :  Packages: [1] ‘base’
[10:49:30.087] |  Search for packages associated with the globals ... DONE
[10:49:30.088] |  The total size of the 1 globals is 31.30 KiB (32048 bytes)
[10:49:30.089] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 31.30 KiB There is one global: ‘FUN’ (31.30 KiB of class ‘function’)
[10:49:30.089] |  Packages after dropping 'base': [0] 
[10:49:30.089] |  globals: [1] ‘FUN’
[10:49:30.089] |  packages: [0] 
[10:49:30.089] getGlobalsAndPackages() ... done
[10:49:30.089]  - globals found/used: [n=1] ‘FUN’
[10:49:30.089]  - needed namespaces: [n=0] 
[10:49:30.089] Finding globals ... DONE
[10:49:30.090]  - use_args: TRUE
[10:49:30.090]  - Getting '...' globals ...
[10:49:30.090] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.090] |  recursive: 0
[10:49:30.091] |  length: 1
[10:49:30.091] |  elements: ‘...’
[10:49:30.091] |  'obj' is DotDotDotList
[10:49:30.091] |  resolve(obj, ...) ...
[10:49:30.091] |  resolve(obj, ...) ... done
[10:49:30.091] |  length: 0 (resolved future 1)
[10:49:30.092] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.092]    - '...' content: [n=0] 
[10:49:30.092] List of 1
[10:49:30.092]  $ ...: list()
[10:49:30.092]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.092]  - attr(*, "where")=List of 1
[10:49:30.092]   ..$ ...:<environment: 0x564d596ae6a0> 
[10:49:30.092]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.092]  - attr(*, "resolved")= logi TRUE
[10:49:30.092]  - attr(*, "total_size")= num NA
[10:49:30.095]  - Getting '...' globals ... DONE
[10:49:30.095] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.095] List of 2
[10:49:30.095]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.095]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.095]  $ ...          : list()
[10:49:30.095]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.095]  - attr(*, "where")=List of 2
[10:49:30.095]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.095]   ..$ ...          :<environment: 0x564d596ae6a0> 
[10:49:30.095]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.095]  - attr(*, "resolved")= logi FALSE
[10:49:30.095]  - attr(*, "total_size")= num 65963
[10:49:30.098] Packages to be attached in all futures: [n=0] 
[10:49:30.098] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.098] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.098] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.099] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.099] Backend function: <‘NULL’>
[10:49:30.099] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.099] future_lapply() ...
[10:49:30.134] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.135] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.135] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.135] Backend function: <‘NULL’>
[10:49:30.135] Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.135] Number of chunks: 1
[10:49:30.135] getGlobalsAndPackagesXApply() ...
[10:49:30.135]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.136]  - use_args: TRUE
[10:49:30.136] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.136] List of 2
[10:49:30.136]  $ ...          : list()
[10:49:30.136]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.136]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.136]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.136]  - attr(*, "where")=List of 2
[10:49:30.136]   ..$ ...          :<environment: 0x564d596ae6a0> 
[10:49:30.136]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.136]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.136]  - attr(*, "resolved")= logi FALSE
[10:49:30.136]  - attr(*, "total_size")= num NA
[10:49:30.139] Packages to be attached in all futures: [n=0] 
[10:49:30.139] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.139] Number of futures (= number of chunks): 1
[10:49:30.140] Launching 1 futures (chunks) ...
[10:49:30.140] Chunk #1 of 1 ...
[10:49:30.140]  - seeds: <none>
[10:49:30.140]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.140] getGlobalsAndPackages() ...
[10:49:30.140] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.140] |  Resolving globals: FALSE
[10:49:30.141] |  Tweak future expression to call with '...' arguments ...
[10:49:30.141] |  :  {
[10:49:30.141] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.141] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.141] |  :      "# as a global variable                                         "
[10:49:30.141] |  :      do.call(function(...) {
[10:49:30.141] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.141] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.141] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.141] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.141] |  :          }
[10:49:30.141] |  :          {
[10:49:30.141] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.141] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.141] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.141] |  :              })
[10:49:30.141] |  :          }
[10:49:30.141] |  :      }, args = future.call.arguments)
[10:49:30.141] |  :  }
[10:49:30.141] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.141] |  Search for packages associated with the globals ...
[10:49:30.141] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.142] |  :  Packages: [1] ‘base’
[10:49:30.142] |  Search for packages associated with the globals ... DONE
[10:49:30.142] |  Packages after dropping 'base': [0] 
[10:49:30.142] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.142] |  packages: [0] 
[10:49:30.142] getGlobalsAndPackages() ... done
[10:49:30.143] run() for Future (‘Future’) ...
[10:49:30.143] |  state: ‘created’
[10:49:30.143] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.143] |  :  makeFutureBackend(<sequential>) ...
[10:49:30.143] |  :  .  Backend function: <‘NULL’>
[10:49:30.143] |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.143] |  :  makeFutureBackend(<sequential>) ... done
[10:49:30.144] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.144] |  Using SequentialFutureBackend ...
[10:49:30.144] |  :  Launching futures ...
[10:49:30.144] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.144] |  :  .  |  getFutureData() ...
[10:49:30.144] |  :  .  |  :  getFutureCore() ...
[10:49:30.144] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.144] |  :  .  |  :  getFutureCore() ... done
[10:49:30.145] |  :  .  |  :  getFutureCapture() ...
[10:49:30.145] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.145] |  :  .  |  :  getFutureContext() ...
[10:49:30.145] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.145] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.145] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.145] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.146] |  :  .  |  :  getFutureContext() ... done
[10:49:30.146] |  :  .  |  getFutureData() ... done
[10:49:30.148] |  :  .  |  attachPackages() ...
[10:49:30.148] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.148] |  :  .  |  attachPackages() ... DONE
[10:49:30.148] |  :  .  |  attachPackages() ...
[10:49:30.148] |  :  .  |  :  packages: [n=0] 
[10:49:30.148] |  :  .  |  attachPackages() ... DONE
[10:49:30.148] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.149] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.149] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.149] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.149] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.149] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.150] |  :  .  |  :  .  |  New stack:
[10:49:30.150] |  :  .  |  :  .  |  List of 1
[10:49:30.150] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.150] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.150] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.150] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.150] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.150] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.150] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.152] |  :  .  |  :  .  |  Old stack:
[10:49:30.152] |  :  .  |  :  .  |  List of 1
[10:49:30.152] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.152] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.152] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.152] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.152] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.152] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.152] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.152] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.152] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.152] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.155] |  :  .  |  :  .  |  Not identical
[10:49:30.155] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.155] |  :  .  |  :  .  |  :  List of 2
[10:49:30.155] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.155] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.155] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.155] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.155] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.155] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.155] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.159] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.160] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.160] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.160] |  :  .  |  :  .  List of future strategies:
[10:49:30.160] |  :  .  |  :  .  1. sequential:
[10:49:30.160] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.160] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.160] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.160] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.160] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.161] |  :  .  |  assign_globals() ...
[10:49:30.161] |  :  .  |  List of 5
[10:49:30.161] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.161] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.161] |  :  .  |   $ ...future.FUN            :function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.161] |  :  .  |      "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.161] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.161] |  :  .  |    ..$ : num [1:4] 1 3 1 7
[10:49:30.161] |  :  .  |    ..$ : num [1:4] 2 4 6 8
[10:49:30.161] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.161] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.161] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.161] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.161] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.161] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.161] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.161] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.161] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.161] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.161] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.161] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.166] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.166] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.166] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.166] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.166] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.166] |  :  .  |  assign_globals() ... done
[10:49:30.171] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.171] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.171] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.171] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.171] |  :  .  |  :  .  |  :  New stack:
[10:49:30.171] |  :  .  |  :  .  |  :  List of 1
[10:49:30.171] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.171] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.171] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.171] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.171] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.171] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.171] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.171] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.171] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.171] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.174] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.174] |  :  .  |  :  .  |  :  List of 1
[10:49:30.174] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.174] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.174] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.174] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.174] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.174] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.174] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.174] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.174] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.174] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.177] |  :  .  |  :  .  |  :  Identical
[10:49:30.177] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.177] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.177] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.177] |  :  .  |  :  .  |  1. sequential:
[10:49:30.177] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.177] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.177] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.178] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.178] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.178] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.178] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.179] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.179] |  :  Launching futures ... done
[10:49:30.179] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.179] |  Using SequentialFutureBackend ... done
[10:49:30.179] run() for Future (‘SequentialFuture’) ... done
[10:49:30.179] Created future:
[10:49:30.179] SequentialFuture:
[10:49:30.179] Label: ‘future_apply-1’
[10:49:30.179] Expression:
[10:49:30.179] {
[10:49:30.179]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.179]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.179]     "# as a global variable                                         "
[10:49:30.179]     do.call(function(...) {
[10:49:30.179]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.179]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.179]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.179]             on.exit(options(oopts), add = TRUE)
[10:49:30.179]         }
[10:49:30.179]         {
[10:49:30.179]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.179]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.179]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.179]             })
[10:49:30.179]         }
[10:49:30.179]     }, args = future.call.arguments)
[10:49:30.179] }
[10:49:30.179] Lazy evaluation: FALSE
[10:49:30.179] Asynchronous evaluation: TRUE
[10:49:30.179] Local evaluation: TRUE
[10:49:30.179] Environment: R_GlobalEnv
[10:49:30.179] Capture standard output: TRUE
[10:49:30.179] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.179] Immediate condition classes: ‘immediateCondition’
[10:49:30.179] Globals: 5 objects totaling 31.56 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 111 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.179] Packages: <none>
[10:49:30.179] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.179] Resolved: TRUE
[10:49:30.179] Value: 429 bytes of class ‘list’
[10:49:30.179] Early signaling: FALSE
[10:49:30.179] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.179] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.181] Chunk #1 of 1 ... DONE
[10:49:30.181] Launching 1 futures (chunks) ... DONE
[10:49:30.181] Resolving 1 futures (chunks) ...
[10:49:30.181] value() on list ...
[10:49:30.182] |  recursive: 0
[10:49:30.182] |  length: 1
[10:49:30.182] |  
[10:49:30.182] |  Number of remaining objects: 1
[10:49:30.182] |  checking value #1 ...
[10:49:30.182] |  :  'obj' is SequentialFuture
[10:49:30.182] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.182] |  :  .  state: ‘finished’
[10:49:30.182] |  :  .  run: TRUE
[10:49:30.182] |  :  .  result: ‘FutureResult’
[10:49:30.183] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.183] |  :  SequentialFuture #1
[10:49:30.183] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.183] |  :  .  nx: 1
[10:49:30.183] |  :  .  relay: TRUE
[10:49:30.183] |  :  .  stdout: TRUE
[10:49:30.183] |  :  .  signal: TRUE
[10:49:30.183] |  :  .  resignal: FALSE
[10:49:30.183] |  :  .  force: TRUE
[10:49:30.183] |  :  .  relayed: [n=1] FALSE
[10:49:30.183] |  :  .  queued futures: [n=1] FALSE
[10:49:30.184] |  :  .  until=1
[10:49:30.184] |  :  .  relaying element #1
[10:49:30.184] |  :  .  relayed: [n=1] TRUE
[10:49:30.184] |  :  .  queued futures: [n=1] TRUE
[10:49:30.184] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.184] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.184] |  :  .  value: <list>
[10:49:30.185] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.185] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.185] |  :  .  nx: 1
[10:49:30.185] |  :  .  relay: TRUE
[10:49:30.185] |  :  .  stdout: TRUE
[10:49:30.185] |  :  .  signal: TRUE
[10:49:30.185] |  :  .  resignal: FALSE
[10:49:30.185] |  :  .  force: TRUE
[10:49:30.185] |  :  .  relayed: [n=1] TRUE
[10:49:30.185] |  :  .  queued futures: [n=1] TRUE
[10:49:30.185] |  :  .  until=1
[10:49:30.185] |  :  .  relayed: [n=1] TRUE
[10:49:30.186] |  :  .  queued futures: [n=1] TRUE
[10:49:30.186] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.186] |  :  length: 0 (resolved future 1)
[10:49:30.186] |  checking value #1 ... done
[10:49:30.186] |  Relaying remaining futures ...
[10:49:30.186] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.186] |  :  .  nx: 1
[10:49:30.186] |  :  .  relay: TRUE
[10:49:30.186] |  :  .  stdout: TRUE
[10:49:30.187] |  :  .  signal: TRUE
[10:49:30.187] |  :  .  resignal: FALSE
[10:49:30.187] |  :  .  force: TRUE
[10:49:30.187] |  :  .  relayed: [n=1] TRUE
[10:49:30.187] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.187] |  :  .  relayed: [n=1] TRUE
[10:49:30.187] |  :  .  queued futures: [n=1] TRUE
[10:49:30.187] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.187] |  Relaying remaining futures ... done
[10:49:30.187] value() on list ... done
[10:49:30.187]  - Number of value chunks collected: 1
[10:49:30.188] Resolving 1 futures (chunks) ... DONE
[10:49:30.188] Reducing values from 1 chunks ...
[10:49:30.188]  - Number of values collected after concatenation: 2
[10:49:30.188]  - Number of values expected: 2
[10:49:30.188] Reducing values from 1 chunks ... DONE
[10:49:30.188] future_lapply() ... DONE
[[1]]
...future.X_jj
1 3 7 
2 1 1 

[[2]]
...future.X_jj
2 4 6 8 
1 1 1 1 

[10:49:30.189] getGlobalsAndPackagesXApply() ...
[10:49:30.189]  - future.globals: TRUE
[10:49:30.189] getGlobalsAndPackages() ...
[10:49:30.189] |  Searching for globals ...
[10:49:30.226] |  :  globals found: [59] ‘FUN’, ‘if’, ‘==’, ‘c’, ‘list.names’, ‘{’, ‘<-’, ‘[’, ‘as.list’, ‘substitute’, ‘-’, ‘&&’, ‘length’, ‘is.list’, ‘!’, ‘is.null’, ‘names’, ‘return’, ‘seq_along’, ‘vapply’, ‘switch’, ‘+’, ‘is.symbol’, ‘as.character’, ‘deparse’, ‘[<-’, ‘missing’, ‘match’, ‘match.arg’, ‘!=’, ‘warning’, ‘list’, ‘[[’, ‘paste’, ‘stop’, ‘integer’, ‘for’, ‘is.factor’, ‘anyNA’, ‘options’, ‘on.exit’, ‘factor’, ‘(’, ‘||’, ‘levels’, ‘as.integer’, ‘which’, ‘is.na’, ‘is.na<-’, ‘>’, ‘prod’, ‘$’, ‘.Machine’, ‘*’, ‘names<-’, ‘array’, ‘tabulate’, ‘class’, ‘class<-’
[10:49:30.226] |  Searching for globals ... DONE
[10:49:30.226] |  Resolving globals: FALSE
[10:49:30.226] |  Search for packages associated with the globals ...
[10:49:30.227] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.228] |  :  Packages: [1] ‘base’
[10:49:30.228] |  Search for packages associated with the globals ... DONE
[10:49:30.228] |  The total size of the 1 globals is 31.30 KiB (32048 bytes)
[10:49:30.228] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 31.30 KiB There is one global: ‘FUN’ (31.30 KiB of class ‘function’)
[10:49:30.229] |  Packages after dropping 'base': [0] 
[10:49:30.229] |  globals: [1] ‘FUN’
[10:49:30.229] |  packages: [0] 
[10:49:30.229] getGlobalsAndPackages() ... done
[10:49:30.229]  - globals found/used: [n=1] ‘FUN’
[10:49:30.229]  - needed namespaces: [n=0] 
[10:49:30.229] Finding globals ... DONE
[10:49:30.229]  - use_args: TRUE
[10:49:30.229]  - Getting '...' globals ...
[10:49:30.230] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.230] |  recursive: 0
[10:49:30.230] |  length: 1
[10:49:30.230] |  elements: ‘...’
[10:49:30.230] |  'obj' is DotDotDotList
[10:49:30.230] |  resolve(obj, ...) ...
[10:49:30.230] |  resolve(obj, ...) ... done
[10:49:30.230] |  length: 0 (resolved future 1)
[10:49:30.230] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.230]    - '...' content: [n=0] 
[10:49:30.231] List of 1
[10:49:30.231]  $ ...: list()
[10:49:30.231]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.231]  - attr(*, "where")=List of 1
[10:49:30.231]   ..$ ...:<environment: 0x564d5bf3f2e0> 
[10:49:30.231]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.231]  - attr(*, "resolved")= logi TRUE
[10:49:30.231]  - attr(*, "total_size")= num NA
[10:49:30.233]  - Getting '...' globals ... DONE
[10:49:30.233] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.234] List of 2
[10:49:30.234]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.234]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.234]  $ ...          : list()
[10:49:30.234]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.234]  - attr(*, "where")=List of 2
[10:49:30.234]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.234]   ..$ ...          :<environment: 0x564d5bf3f2e0> 
[10:49:30.234]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.234]  - attr(*, "resolved")= logi FALSE
[10:49:30.234]  - attr(*, "total_size")= num 65967
[10:49:30.236] Packages to be attached in all futures: [n=0] 
[10:49:30.236] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.236] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.237] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.237] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.237] future_lapply() ...
[10:49:30.272] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.272] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.272] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.272] Number of chunks: 1
[10:49:30.272] getGlobalsAndPackagesXApply() ...
[10:49:30.272]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.273]  - use_args: TRUE
[10:49:30.273] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.273] List of 2
[10:49:30.273]  $ ...          : list()
[10:49:30.273]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.273]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.273]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.273]  - attr(*, "where")=List of 2
[10:49:30.273]   ..$ ...          :<environment: 0x564d5bf3f2e0> 
[10:49:30.273]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.273]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.273]  - attr(*, "resolved")= logi FALSE
[10:49:30.273]  - attr(*, "total_size")= num NA
[10:49:30.276] Packages to be attached in all futures: [n=0] 
[10:49:30.276] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.276] Number of futures (= number of chunks): 1
[10:49:30.276] Launching 1 futures (chunks) ...
[10:49:30.277] Chunk #1 of 1 ...
[10:49:30.277]  - seeds: <none>
[10:49:30.277]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.277] getGlobalsAndPackages() ...
[10:49:30.277] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.277] |  Resolving globals: FALSE
[10:49:30.277] |  Tweak future expression to call with '...' arguments ...
[10:49:30.277] |  :  {
[10:49:30.277] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.277] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.277] |  :      "# as a global variable                                         "
[10:49:30.277] |  :      do.call(function(...) {
[10:49:30.277] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.277] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.277] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.277] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.277] |  :          }
[10:49:30.277] |  :          {
[10:49:30.277] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.277] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.277] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.277] |  :              })
[10:49:30.277] |  :          }
[10:49:30.277] |  :      }, args = future.call.arguments)
[10:49:30.277] |  :  }
[10:49:30.278] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.278] |  Search for packages associated with the globals ...
[10:49:30.278] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.278] |  :  Packages: [1] ‘base’
[10:49:30.278] |  Search for packages associated with the globals ... DONE
[10:49:30.278] |  Packages after dropping 'base': [0] 
[10:49:30.278] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.279] |  packages: [0] 
[10:49:30.279] getGlobalsAndPackages() ... done
[10:49:30.279] run() for Future (‘Future’) ...
[10:49:30.279] |  state: ‘created’
[10:49:30.279] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.279] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.279] |  Using SequentialFutureBackend ...
[10:49:30.279] |  :  Launching futures ...
[10:49:30.280] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.280] |  :  .  |  getFutureData() ...
[10:49:30.280] |  :  .  |  :  getFutureCore() ...
[10:49:30.280] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.280] |  :  .  |  :  getFutureCore() ... done
[10:49:30.280] |  :  .  |  :  getFutureCapture() ...
[10:49:30.280] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.280] |  :  .  |  :  getFutureContext() ...
[10:49:30.280] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.280] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.280] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.281] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.281] |  :  .  |  :  getFutureContext() ... done
[10:49:30.281] |  :  .  |  getFutureData() ... done
[10:49:30.281] |  :  .  |  attachPackages() ...
[10:49:30.281] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.281] |  :  .  |  attachPackages() ... DONE
[10:49:30.281] |  :  .  |  attachPackages() ...
[10:49:30.281] |  :  .  |  :  packages: [n=0] 
[10:49:30.281] |  :  .  |  attachPackages() ... DONE
[10:49:30.282] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.282] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.282] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.282] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.282] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.283] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.283] |  :  .  |  :  .  |  New stack:
[10:49:30.283] |  :  .  |  :  .  |  List of 1
[10:49:30.283] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.283] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.283] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.283] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.283] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.283] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.283] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.285] |  :  .  |  :  .  |  Old stack:
[10:49:30.285] |  :  .  |  :  .  |  List of 1
[10:49:30.285] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.285] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.285] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.285] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.285] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.285] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.285] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.285] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.285] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.285] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.289] |  :  .  |  :  .  |  Not identical
[10:49:30.289] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.289] |  :  .  |  :  .  |  :  List of 2
[10:49:30.289] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.289] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.289] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.289] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.293] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.293] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.293] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.293] |  :  .  |  :  .  List of future strategies:
[10:49:30.293] |  :  .  |  :  .  1. sequential:
[10:49:30.293] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.293] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.293] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.294] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.294] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.294] |  :  .  |  assign_globals() ...
[10:49:30.294] |  :  .  |  List of 5
[10:49:30.294] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.294] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.294] |  :  .  |   $ ...future.FUN            :function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.294] |  :  .  |      "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.294] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.294] |  :  .  |    ..$ : num [1:4] 1 3 1 7
[10:49:30.294] |  :  .  |    ..$ : num [1:4] 2 4 6 8
[10:49:30.294] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.294] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.294] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.294] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.294] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.294] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.294] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.294] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.294] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.294] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.294] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.294] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.299] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.299] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.299] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.300] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.300] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.300] |  :  .  |  assign_globals() ... done
[10:49:30.301] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.301] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.302] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.302] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.302] |  :  .  |  :  .  |  :  New stack:
[10:49:30.302] |  :  .  |  :  .  |  :  List of 1
[10:49:30.302] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.302] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.302] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.302] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.302] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.302] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.302] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.302] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.302] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.302] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.306] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.306] |  :  .  |  :  .  |  :  List of 1
[10:49:30.306] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.306] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.306] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.306] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.306] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.306] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.306] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.306] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.306] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.306] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.309] |  :  .  |  :  .  |  :  Identical
[10:49:30.309] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.309] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.309] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.309] |  :  .  |  :  .  |  1. sequential:
[10:49:30.309] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.309] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.309] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.309] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.309] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.309] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.310] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.310] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.310] |  :  Launching futures ... done
[10:49:30.310] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.310] |  Using SequentialFutureBackend ... done
[10:49:30.310] run() for Future (‘SequentialFuture’) ... done
[10:49:30.310] Created future:
[10:49:30.310] SequentialFuture:
[10:49:30.310] Label: ‘future_apply-1’
[10:49:30.310] Expression:
[10:49:30.310] {
[10:49:30.310]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.310]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.310]     "# as a global variable                                         "
[10:49:30.310]     do.call(function(...) {
[10:49:30.310]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.310]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.310]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.310]             on.exit(options(oopts), add = TRUE)
[10:49:30.310]         }
[10:49:30.310]         {
[10:49:30.310]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.310]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.310]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.310]             })
[10:49:30.310]         }
[10:49:30.310]     }, args = future.call.arguments)
[10:49:30.310] }
[10:49:30.310] Lazy evaluation: FALSE
[10:49:30.310] Asynchronous evaluation: TRUE
[10:49:30.310] Local evaluation: TRUE
[10:49:30.310] Environment: R_GlobalEnv
[10:49:30.310] Capture standard output: TRUE
[10:49:30.310] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.310] Immediate condition classes: ‘immediateCondition’
[10:49:30.310] Globals: 5 objects totaling 31.56 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 111 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.310] Packages: <none>
[10:49:30.310] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.310] Resolved: TRUE
[10:49:30.310] Value: 429 bytes of class ‘list’
[10:49:30.310] Early signaling: FALSE
[10:49:30.310] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.310] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.312] Chunk #1 of 1 ... DONE
[10:49:30.312] Launching 1 futures (chunks) ... DONE
[10:49:30.312] Resolving 1 futures (chunks) ...
[10:49:30.312] value() on list ...
[10:49:30.312] |  recursive: 0
[10:49:30.312] |  length: 1
[10:49:30.312] |  
[10:49:30.312] |  Number of remaining objects: 1
[10:49:30.312] |  checking value #1 ...
[10:49:30.312] |  :  'obj' is SequentialFuture
[10:49:30.312] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.313] |  :  .  state: ‘finished’
[10:49:30.313] |  :  .  run: TRUE
[10:49:30.313] |  :  .  result: ‘FutureResult’
[10:49:30.313] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.313] |  :  SequentialFuture #1
[10:49:30.313] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.313] |  :  .  nx: 1
[10:49:30.313] |  :  .  relay: TRUE
[10:49:30.313] |  :  .  stdout: TRUE
[10:49:30.313] |  :  .  signal: TRUE
[10:49:30.313] |  :  .  resignal: FALSE
[10:49:30.313] |  :  .  force: TRUE
[10:49:30.314] |  :  .  relayed: [n=1] FALSE
[10:49:30.314] |  :  .  queued futures: [n=1] FALSE
[10:49:30.314] |  :  .  until=1
[10:49:30.314] |  :  .  relaying element #1
[10:49:30.314] |  :  .  relayed: [n=1] TRUE
[10:49:30.314] |  :  .  queued futures: [n=1] TRUE
[10:49:30.314] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.314] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.314] |  :  .  value: <list>
[10:49:30.314] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.315] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.315] |  :  .  nx: 1
[10:49:30.315] |  :  .  relay: TRUE
[10:49:30.315] |  :  .  stdout: TRUE
[10:49:30.315] |  :  .  signal: TRUE
[10:49:30.315] |  :  .  resignal: FALSE
[10:49:30.315] |  :  .  force: TRUE
[10:49:30.315] |  :  .  relayed: [n=1] TRUE
[10:49:30.315] |  :  .  queued futures: [n=1] TRUE
[10:49:30.315] |  :  .  until=1
[10:49:30.315] |  :  .  relayed: [n=1] TRUE
[10:49:30.315] |  :  .  queued futures: [n=1] TRUE
[10:49:30.316] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.316] |  :  length: 0 (resolved future 1)
[10:49:30.316] |  checking value #1 ... done
[10:49:30.316] |  Relaying remaining futures ...
[10:49:30.316] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.316] |  :  .  nx: 1
[10:49:30.316] |  :  .  relay: TRUE
[10:49:30.316] |  :  .  stdout: TRUE
[10:49:30.316] |  :  .  signal: TRUE
[10:49:30.316] |  :  .  resignal: FALSE
[10:49:30.316] |  :  .  force: TRUE
[10:49:30.317] |  :  .  relayed: [n=1] TRUE
[10:49:30.317] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.317] |  :  .  relayed: [n=1] TRUE
[10:49:30.317] |  :  .  queued futures: [n=1] TRUE
[10:49:30.317] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.317] |  Relaying remaining futures ... done
[10:49:30.317] value() on list ... done
[10:49:30.317]  - Number of value chunks collected: 1
[10:49:30.317] Resolving 1 futures (chunks) ... DONE
[10:49:30.317] Reducing values from 1 chunks ...
[10:49:30.317]  - Number of values collected after concatenation: 2
[10:49:30.317]  - Number of values expected: 2
[10:49:30.318] Reducing values from 1 chunks ... DONE
[10:49:30.318] future_lapply() ... DONE
[[1]]
...future.X_jj
1 3 7 
2 1 1 

[[2]]
...future.X_jj
2 4 6 8 
1 1 1 1 

[10:49:30.320] getGlobalsAndPackagesXApply() ...
[10:49:30.320]  - future.globals: TRUE
[10:49:30.320] getGlobalsAndPackages() ...
[10:49:30.320] |  Searching for globals ...
[10:49:30.321] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:30.321] |  Searching for globals ... DONE
[10:49:30.321] |  Resolving globals: FALSE
[10:49:30.322] |  Search for packages associated with the globals ...
[10:49:30.322] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:30.322] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:30.322] |  Search for packages associated with the globals ... DONE
[10:49:30.322] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:30.323] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:30.323] |  Packages after dropping 'base': [1] ‘stats’
[10:49:30.323] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:30.323] |  globals: [1] ‘FUN’
[10:49:30.323] |  packages: [1] ‘stats’
[10:49:30.323] getGlobalsAndPackages() ... done
[10:49:30.323]  - globals found/used: [n=1] ‘FUN’
[10:49:30.323]  - needed namespaces: [n=1] ‘stats’
[10:49:30.323] Finding globals ... DONE
[10:49:30.324]  - use_args: TRUE
[10:49:30.324]  - Getting '...' globals ...
[10:49:30.324] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.324] |  recursive: 0
[10:49:30.324] |  length: 1
[10:49:30.324] |  elements: ‘...’
[10:49:30.324] |  'obj' is DotDotDotList
[10:49:30.324] |  resolve(obj, ...) ...
[10:49:30.326] |  resolve(obj, ...) ... done
[10:49:30.326] |  length: 0 (resolved future 1)
[10:49:30.326] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.326]    - '...' content: [n=0] 
[10:49:30.326] List of 1
[10:49:30.326]  $ ...: list()
[10:49:30.326]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.326]  - attr(*, "where")=List of 1
[10:49:30.326]   ..$ ...:<environment: 0x564d5bc81ad0> 
[10:49:30.326]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.326]  - attr(*, "resolved")= logi TRUE
[10:49:30.326]  - attr(*, "total_size")= num NA
[10:49:30.329]  - Getting '...' globals ... DONE
[10:49:30.329] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.329] List of 2
[10:49:30.329]  $ ...future.FUN:function (x, ...)  
[10:49:30.329]  $ ...          : list()
[10:49:30.329]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.329]  - attr(*, "where")=List of 2
[10:49:30.329]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.329]   ..$ ...          :<environment: 0x564d5bc81ad0> 
[10:49:30.329]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.329]  - attr(*, "resolved")= logi FALSE
[10:49:30.329]  - attr(*, "total_size")= num 2586
[10:49:30.332] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:30.332] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.332] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.332] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.332] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.332] future_lapply() ...
[10:49:30.333] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.333] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.333] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.333] Number of chunks: 1
[10:49:30.333] getGlobalsAndPackagesXApply() ...
[10:49:30.334]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.334]  - use_args: TRUE
[10:49:30.334] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.334] List of 2
[10:49:30.334]  $ ...          : list()
[10:49:30.334]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.334]  $ ...future.FUN:function (x, ...)  
[10:49:30.334]  - attr(*, "where")=List of 2
[10:49:30.334]   ..$ ...          :<environment: 0x564d5bc81ad0> 
[10:49:30.334]   ..$ ...future.FUN:<environment: namespace:stats> 
[10:49:30.334]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.334]  - attr(*, "resolved")= logi FALSE
[10:49:30.334]  - attr(*, "total_size")= num NA
[10:49:30.337] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:30.337] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.337] Number of futures (= number of chunks): 1
[10:49:30.337] Launching 1 futures (chunks) ...
[10:49:30.337] Chunk #1 of 1 ...
[10:49:30.337]  - seeds: <none>
[10:49:30.337]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.338] getGlobalsAndPackages() ...
[10:49:30.338] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.338] |  Resolving globals: FALSE
[10:49:30.338] |  Tweak future expression to call with '...' arguments ...
[10:49:30.338] |  :  {
[10:49:30.338] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.338] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.338] |  :      "# as a global variable                                         "
[10:49:30.338] |  :      do.call(function(...) {
[10:49:30.338] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.338] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.338] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.338] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.338] |  :          }
[10:49:30.338] |  :          {
[10:49:30.338] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.338] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.338] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.338] |  :              })
[10:49:30.338] |  :          }
[10:49:30.338] |  :      }, args = future.call.arguments)
[10:49:30.338] |  :  }
[10:49:30.338] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.338] |  Search for packages associated with the globals ...
[10:49:30.339] |  :  Packages associated with globals: [1] ‘stats’
[10:49:30.339] |  :  Packages: [1] ‘stats’
[10:49:30.339] |  Search for packages associated with the globals ... DONE
[10:49:30.339] |  Packages after dropping 'base': [1] ‘stats’
[10:49:30.339] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:30.339] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.339] |  packages: [1] ‘stats’
[10:49:30.340] getGlobalsAndPackages() ... done
[10:49:30.340] run() for Future (‘Future’) ...
[10:49:30.340] |  state: ‘created’
[10:49:30.340] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.340] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.340] |  Using SequentialFutureBackend ...
[10:49:30.340] |  :  Launching futures ...
[10:49:30.340] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.341] |  :  .  |  getFutureData() ...
[10:49:30.341] |  :  .  |  :  getFutureCore() ...
[10:49:30.341] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:30.341] |  :  .  |  :  getFutureCore() ... done
[10:49:30.341] |  :  .  |  :  getFutureCapture() ...
[10:49:30.341] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.341] |  :  .  |  :  getFutureContext() ...
[10:49:30.341] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.341] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.341] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.342] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.342] |  :  .  |  :  getFutureContext() ... done
[10:49:30.342] |  :  .  |  getFutureData() ... done
[10:49:30.342] |  :  .  |  attachPackages() ...
[10:49:30.342] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.342] |  :  .  |  attachPackages() ... DONE
[10:49:30.342] |  :  .  |  attachPackages() ...
[10:49:30.342] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:30.342] |  :  .  |  attachPackages() ... DONE
[10:49:30.343] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.343] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.343] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.343] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.343] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.368] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.369] |  :  .  |  :  .  |  New stack:
[10:49:30.369] |  :  .  |  :  .  |  List of 1
[10:49:30.369] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.369] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.369] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.369] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.369] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.369] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.369] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.371] |  :  .  |  :  .  |  Old stack:
[10:49:30.371] |  :  .  |  :  .  |  List of 1
[10:49:30.371] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.371] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.371] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.371] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.371] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.371] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.371] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.371] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.371] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.371] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.374] |  :  .  |  :  .  |  Not identical
[10:49:30.374] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.374] |  :  .  |  :  .  |  :  List of 2
[10:49:30.374] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.374] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.374] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.374] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.374] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.374] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.374] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.379] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.379] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.379] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.379] |  :  .  |  :  .  List of future strategies:
[10:49:30.379] |  :  .  |  :  .  1. sequential:
[10:49:30.379] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.379] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.379] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.380] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.380] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.380] |  :  .  |  assign_globals() ...
[10:49:30.380] |  :  .  |  List of 5
[10:49:30.380] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.380] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.380] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:30.380] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.380] |  :  .  |    ..$ : num [1:4] 1 3 1 7
[10:49:30.380] |  :  .  |    ..$ : num [1:4] 2 4 6 8
[10:49:30.380] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.380] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.380] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.380] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.380] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.380] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.380] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.380] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.380] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.380] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.380] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.380] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.385] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.386] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.386] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.386] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.386] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.386] |  :  .  |  assign_globals() ... done
[10:49:30.388] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.389] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.389] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.389] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.389] |  :  .  |  :  .  |  :  New stack:
[10:49:30.389] |  :  .  |  :  .  |  :  List of 1
[10:49:30.389] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.389] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.389] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.389] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.389] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.389] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.389] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.389] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.389] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.389] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.392] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.392] |  :  .  |  :  .  |  :  List of 1
[10:49:30.392] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.392] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.392] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.392] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.392] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.392] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.392] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.392] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.392] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.392] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.395] |  :  .  |  :  .  |  :  Identical
[10:49:30.395] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.395] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.395] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.395] |  :  .  |  :  .  |  1. sequential:
[10:49:30.395] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.395] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.395] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.396] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.396] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.396] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.396] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.396] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.396] |  :  Launching futures ... done
[10:49:30.396] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.396] |  Using SequentialFutureBackend ... done
[10:49:30.396] run() for Future (‘SequentialFuture’) ... done
[10:49:30.397] Created future:
[10:49:30.397] SequentialFuture:
[10:49:30.397] Label: ‘future_apply-1’
[10:49:30.397] Expression:
[10:49:30.397] {
[10:49:30.397]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.397]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.397]     "# as a global variable                                         "
[10:49:30.397]     do.call(function(...) {
[10:49:30.397]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.397]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.397]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.397]             on.exit(options(oopts), add = TRUE)
[10:49:30.397]         }
[10:49:30.397]         {
[10:49:30.397]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.397]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.397]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.397]             })
[10:49:30.397]         }
[10:49:30.397]     }, args = future.call.arguments)
[10:49:30.397] }
[10:49:30.397] Lazy evaluation: FALSE
[10:49:30.397] Asynchronous evaluation: TRUE
[10:49:30.397] Local evaluation: TRUE
[10:49:30.397] Environment: R_GlobalEnv
[10:49:30.397] Capture standard output: TRUE
[10:49:30.397] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.397] Immediate condition classes: ‘immediateCondition’
[10:49:30.397] Globals: 5 objects totaling 585 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 311 bytes, list ‘...future.elements_ii’ of 111 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.397] Packages: 1 packages (‘stats’)
[10:49:30.397] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.397] Resolved: TRUE
[10:49:30.397] Value: 290 bytes of class ‘list’
[10:49:30.397] Early signaling: FALSE
[10:49:30.397] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.397] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.397] Chunk #1 of 1 ... DONE
[10:49:30.398] Launching 1 futures (chunks) ... DONE
[10:49:30.398] Resolving 1 futures (chunks) ...
[10:49:30.398] value() on list ...
[10:49:30.398] |  recursive: 0
[10:49:30.398] |  length: 1
[10:49:30.398] |  
[10:49:30.398] |  Number of remaining objects: 1
[10:49:30.398] |  checking value #1 ...
[10:49:30.398] |  :  'obj' is SequentialFuture
[10:49:30.398] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.398] |  :  .  state: ‘finished’
[10:49:30.399] |  :  .  run: TRUE
[10:49:30.399] |  :  .  result: ‘FutureResult’
[10:49:30.399] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.399] |  :  SequentialFuture #1
[10:49:30.399] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.399] |  :  .  nx: 1
[10:49:30.399] |  :  .  relay: TRUE
[10:49:30.399] |  :  .  stdout: TRUE
[10:49:30.399] |  :  .  signal: TRUE
[10:49:30.399] |  :  .  resignal: FALSE
[10:49:30.399] |  :  .  force: TRUE
[10:49:30.399] |  :  .  relayed: [n=1] FALSE
[10:49:30.400] |  :  .  queued futures: [n=1] FALSE
[10:49:30.400] |  :  .  until=1
[10:49:30.400] |  :  .  relaying element #1
[10:49:30.400] |  :  .  relayed: [n=1] TRUE
[10:49:30.400] |  :  .  queued futures: [n=1] TRUE
[10:49:30.400] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.400] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.400] |  :  .  value: <list>
[10:49:30.400] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.401] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.401] |  :  .  nx: 1
[10:49:30.401] |  :  .  relay: TRUE
[10:49:30.401] |  :  .  stdout: TRUE
[10:49:30.401] |  :  .  signal: TRUE
[10:49:30.401] |  :  .  resignal: FALSE
[10:49:30.401] |  :  .  force: TRUE
[10:49:30.401] |  :  .  relayed: [n=1] TRUE
[10:49:30.401] |  :  .  queued futures: [n=1] TRUE
[10:49:30.401] |  :  .  until=1
[10:49:30.401] |  :  .  relayed: [n=1] TRUE
[10:49:30.401] |  :  .  queued futures: [n=1] TRUE
[10:49:30.402] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.402] |  :  length: 0 (resolved future 1)
[10:49:30.402] |  checking value #1 ... done
[10:49:30.402] |  Relaying remaining futures ...
[10:49:30.402] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.402] |  :  .  nx: 1
[10:49:30.402] |  :  .  relay: TRUE
[10:49:30.402] |  :  .  stdout: TRUE
[10:49:30.402] |  :  .  signal: TRUE
[10:49:30.402] |  :  .  resignal: FALSE
[10:49:30.402] |  :  .  force: TRUE
[10:49:30.402] |  :  .  relayed: [n=1] TRUE
[10:49:30.403] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.403] |  :  .  relayed: [n=1] TRUE
[10:49:30.403] |  :  .  queued futures: [n=1] TRUE
[10:49:30.403] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.403] |  Relaying remaining futures ... done
[10:49:30.403] value() on list ... done
[10:49:30.403]  - Number of value chunks collected: 1
[10:49:30.403] Resolving 1 futures (chunks) ... DONE
[10:49:30.403] Reducing values from 1 chunks ...
[10:49:30.403]  - Number of values collected after concatenation: 2
[10:49:30.403]  - Number of values expected: 2
[10:49:30.404] Reducing values from 1 chunks ... DONE
[10:49:30.404] future_lapply() ... DONE
     [,1] [,2]
0%      1  2.0
25%     1  3.5
50%     2  5.0
75%     4  6.5
100%    7  8.0
[10:49:30.404] getGlobalsAndPackagesXApply() ...
[10:49:30.404]  - future.globals: TRUE
[10:49:30.404] getGlobalsAndPackages() ...
[10:49:30.404] |  Searching for globals ...
[10:49:30.405] |  :  globals found: [1] ‘FUN’
[10:49:30.406] |  Searching for globals ... DONE
[10:49:30.406] |  Resolving globals: FALSE
[10:49:30.406] |  Search for packages associated with the globals ...
[10:49:30.406] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.406] |  :  Packages: [1] ‘base’
[10:49:30.406] |  Search for packages associated with the globals ... DONE
[10:49:30.406] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:30.407] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3,; 4, 5), dim = c(8L, 2L), dimnames = list(row = NULL, col = c("x1",; "x2"))))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:30.407] |  Packages after dropping 'base': [0] 
[10:49:30.407] |  globals: [1] ‘FUN’
[10:49:30.407] |  packages: [0] 
[10:49:30.408] getGlobalsAndPackages() ... done
[10:49:30.408]  - globals found/used: [n=1] ‘FUN’
[10:49:30.408]  - needed namespaces: [n=0] 
[10:49:30.408] Finding globals ... DONE
[10:49:30.408]  - use_args: TRUE
[10:49:30.408]  - Getting '...' globals ...
[10:49:30.409] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.409] |  recursive: 0
[10:49:30.409] |  length: 1
[10:49:30.409] |  elements: ‘...’
[10:49:30.409] |  'obj' is DotDotDotList
[10:49:30.409] |  resolve(obj, ...) ...
[10:49:30.409] |  resolve(obj, ...) ... done
[10:49:30.410] |  length: 0 (resolved future 1)
[10:49:30.410] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.410]    - '...' content: [n=0] 
[10:49:30.410] List of 1
[10:49:30.410]  $ ...: list()
[10:49:30.410]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.410]  - attr(*, "where")=List of 1
[10:49:30.410]   ..$ ...:<environment: 0x564d5be2c188> 
[10:49:30.410]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.410]  - attr(*, "resolved")= logi TRUE
[10:49:30.410]  - attr(*, "total_size")= num NA
[10:49:30.412]  - Getting '...' globals ... DONE
[10:49:30.412] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.412] List of 2
[10:49:30.412]  $ ...future.FUN:function (x)  
[10:49:30.412]  $ ...          : list()
[10:49:30.412]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.412]  - attr(*, "where")=List of 2
[10:49:30.412]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.412]   ..$ ...          :<environment: 0x564d5be2c188> 
[10:49:30.412]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.412]  - attr(*, "resolved")= logi FALSE
[10:49:30.412]  - attr(*, "total_size")= num 2624
[10:49:30.415] Packages to be attached in all futures: [n=0] 
[10:49:30.415] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.415] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.415] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.415] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.416] future_lapply() ...
[10:49:30.416] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.416] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.416] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.416] Number of chunks: 1
[10:49:30.417] getGlobalsAndPackagesXApply() ...
[10:49:30.417]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.417]  - use_args: TRUE
[10:49:30.417] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.417] List of 2
[10:49:30.417]  $ ...          : list()
[10:49:30.417]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.417]  $ ...future.FUN:function (x)  
[10:49:30.417]  - attr(*, "where")=List of 2
[10:49:30.417]   ..$ ...          :<environment: 0x564d5be2c188> 
[10:49:30.417]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.417]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.417]  - attr(*, "resolved")= logi FALSE
[10:49:30.417]  - attr(*, "total_size")= num NA
[10:49:30.420] Packages to be attached in all futures: [n=0] 
[10:49:30.420] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.420] Number of futures (= number of chunks): 1
[10:49:30.420] Launching 1 futures (chunks) ...
[10:49:30.421] Chunk #1 of 1 ...
[10:49:30.421]  - seeds: <none>
[10:49:30.421]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.421] getGlobalsAndPackages() ...
[10:49:30.421] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.421] |  Resolving globals: FALSE
[10:49:30.421] |  Tweak future expression to call with '...' arguments ...
[10:49:30.421] |  :  {
[10:49:30.421] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.421] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.421] |  :      "# as a global variable                                         "
[10:49:30.421] |  :      do.call(function(...) {
[10:49:30.421] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.421] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.421] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.421] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.421] |  :          }
[10:49:30.421] |  :          {
[10:49:30.421] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.421] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.421] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.421] |  :              })
[10:49:30.421] |  :          }
[10:49:30.421] |  :      }, args = future.call.arguments)
[10:49:30.421] |  :  }
[10:49:30.422] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.422] |  Search for packages associated with the globals ...
[10:49:30.422] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.422] |  :  Packages: [1] ‘base’
[10:49:30.422] |  Search for packages associated with the globals ... DONE
[10:49:30.422] |  Packages after dropping 'base': [0] 
[10:49:30.423] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.423] |  packages: [0] 
[10:49:30.423] getGlobalsAndPackages() ... done
[10:49:30.423] run() for Future (‘Future’) ...
[10:49:30.423] |  state: ‘created’
[10:49:30.423] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.423] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.423] |  Using SequentialFutureBackend ...
[10:49:30.423] |  :  Launching futures ...
[10:49:30.424] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.424] |  :  .  |  getFutureData() ...
[10:49:30.424] |  :  .  |  :  getFutureCore() ...
[10:49:30.424] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.424] |  :  .  |  :  getFutureCore() ... done
[10:49:30.424] |  :  .  |  :  getFutureCapture() ...
[10:49:30.424] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.424] |  :  .  |  :  getFutureContext() ...
[10:49:30.424] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.424] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.424] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.425] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.425] |  :  .  |  :  getFutureContext() ... done
[10:49:30.425] |  :  .  |  getFutureData() ... done
[10:49:30.425] |  :  .  |  attachPackages() ...
[10:49:30.425] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.425] |  :  .  |  attachPackages() ... DONE
[10:49:30.425] |  :  .  |  attachPackages() ...
[10:49:30.425] |  :  .  |  :  packages: [n=0] 
[10:49:30.425] |  :  .  |  attachPackages() ... DONE
[10:49:30.426] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.426] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.426] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.426] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.426] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.427] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.427] |  :  .  |  :  .  |  New stack:
[10:49:30.427] |  :  .  |  :  .  |  List of 1
[10:49:30.427] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.427] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.427] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.427] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.427] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.427] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.427] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.430] |  :  .  |  :  .  |  Old stack:
[10:49:30.430] |  :  .  |  :  .  |  List of 1
[10:49:30.430] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.430] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.430] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.430] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.430] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.430] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.430] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.430] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.430] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.430] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.432] |  :  .  |  :  .  |  Not identical
[10:49:30.433] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.433] |  :  .  |  :  .  |  :  List of 2
[10:49:30.433] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.433] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.433] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.433] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.433] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.433] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.433] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.437] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.437] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.437] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.437] |  :  .  |  :  .  List of future strategies:
[10:49:30.437] |  :  .  |  :  .  1. sequential:
[10:49:30.437] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.437] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.437] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.438] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.438] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.438] |  :  .  |  assign_globals() ...
[10:49:30.438] |  :  .  |  List of 5
[10:49:30.438] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.438] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.438] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:30.438] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.438] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:30.438] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:30.438] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.438] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.438] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.438] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.438] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.438] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.438] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.438] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.438] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.438] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.438] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.438] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.443] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.443] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.443] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.444] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.444] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.444] |  :  .  |  assign_globals() ... done
[10:49:30.445] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.445] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.446] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.446] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.446] |  :  .  |  :  .  |  :  New stack:
[10:49:30.446] |  :  .  |  :  .  |  :  List of 1
[10:49:30.446] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.446] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.446] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.446] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.446] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.446] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.446] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.446] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.446] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.446] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.449] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.449] |  :  .  |  :  .  |  :  List of 1
[10:49:30.449] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.449] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.449] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.449] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.449] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.449] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.449] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.449] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.449] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.449] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.452] |  :  .  |  :  .  |  :  Identical
[10:49:30.452] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.452] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.452] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.452] |  :  .  |  :  .  |  1. sequential:
[10:49:30.452] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.452] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.452] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.453] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.453] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.453] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.453] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.453] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.453] |  :  Launching futures ... done
[10:49:30.453] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.454] |  Using SequentialFutureBackend ... done
[10:49:30.454] run() for Future (‘SequentialFuture’) ... done
[10:49:30.454] Created future:
[10:49:30.454] SequentialFuture:
[10:49:30.454] Label: ‘future_apply-1’
[10:49:30.454] Expression:
[10:49:30.454] {
[10:49:30.454]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.454]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.454]     "# as a global variable                                         "
[10:49:30.454]     do.call(function(...) {
[10:49:30.454]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.454]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.454]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.454]             on.exit(options(oopts), add = TRUE)
[10:49:30.454]         }
[10:49:30.454]         {
[10:49:30.454]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.454]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.454]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.454]             })
[10:49:30.454]         }
[10:49:30.454]     }, args = future.call.arguments)
[10:49:30.454] }
[10:49:30.454] Lazy evaluation: FALSE
[10:49:30.454] Asynchronous evaluation: TRUE
[10:49:30.454] Local evaluation: TRUE
[10:49:30.454] Environment: R_GlobalEnv
[10:49:30.454] Capture standard output: TRUE
[10:49:30.454] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.454] Immediate condition classes: ‘immediateCondition’
[10:49:30.454] Globals: 5 objects totaling 523 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 175 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.454] Packages: <none>
[10:49:30.454] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.454] Resolved: TRUE
[10:49:30.454] Value: 175 bytes of class ‘list’
[10:49:30.454] Early signaling: FALSE
[10:49:30.454] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.454] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.455] Chunk #1 of 1 ... DONE
[10:49:30.455] Launching 1 futures (chunks) ... DONE
[10:49:30.455] Resolving 1 futures (chunks) ...
[10:49:30.455] value() on list ...
[10:49:30.455] |  recursive: 0
[10:49:30.455] |  length: 1
[10:49:30.455] |  
[10:49:30.455] |  Number of remaining objects: 1
[10:49:30.455] |  checking value #1 ...
[10:49:30.455] |  :  'obj' is SequentialFuture
[10:49:30.456] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.456] |  :  .  state: ‘finished’
[10:49:30.456] |  :  .  run: TRUE
[10:49:30.456] |  :  .  result: ‘FutureResult’
[10:49:30.456] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.456] |  :  SequentialFuture #1
[10:49:30.456] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.456] |  :  .  nx: 1
[10:49:30.456] |  :  .  relay: TRUE
[10:49:30.456] |  :  .  stdout: TRUE
[10:49:30.456] |  :  .  signal: TRUE
[10:49:30.457] |  :  .  resignal: FALSE
[10:49:30.457] |  :  .  force: TRUE
[10:49:30.457] |  :  .  relayed: [n=1] FALSE
[10:49:30.457] |  :  .  queued futures: [n=1] FALSE
[10:49:30.457] |  :  .  until=1
[10:49:30.457] |  :  .  relaying element #1
[10:49:30.457] |  :  .  relayed: [n=1] TRUE
[10:49:30.457] |  :  .  queued futures: [n=1] TRUE
[10:49:30.457] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.457] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.458] |  :  .  value: <list>
[10:49:30.458] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.458] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.458] |  :  .  nx: 1
[10:49:30.458] |  :  .  relay: TRUE
[10:49:30.458] |  :  .  stdout: TRUE
[10:49:30.458] |  :  .  signal: TRUE
[10:49:30.458] |  :  .  resignal: FALSE
[10:49:30.458] |  :  .  force: TRUE
[10:49:30.458] |  :  .  relayed: [n=1] TRUE
[10:49:30.458] |  :  .  queued futures: [n=1] TRUE
[10:49:30.458] |  :  .  until=1
[10:49:30.459] |  :  .  relayed: [n=1] TRUE
[10:49:30.459] |  :  .  queued futures: [n=1] TRUE
[10:49:30.459] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.459] |  :  length: 0 (resolved future 1)
[10:49:30.459] |  checking value #1 ... done
[10:49:30.459] |  Relaying remaining futures ...
[10:49:30.459] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.459] |  :  .  nx: 1
[10:49:30.459] |  :  .  relay: TRUE
[10:49:30.459] |  :  .  stdout: TRUE
[10:49:30.459] |  :  .  signal: TRUE
[10:49:30.459] |  :  .  resignal: FALSE
[10:49:30.460] |  :  .  force: TRUE
[10:49:30.460] |  :  .  relayed: [n=1] TRUE
[10:49:30.460] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.460] |  :  .  relayed: [n=1] TRUE
[10:49:30.460] |  :  .  queued futures: [n=1] TRUE
[10:49:30.460] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.460] |  Relaying remaining futures ... done
[10:49:30.460] value() on list ... done
[10:49:30.460]  - Number of value chunks collected: 1
[10:49:30.460] Resolving 1 futures (chunks) ... DONE
[10:49:30.461] Reducing values from 1 chunks ...
[10:49:30.461]  - Number of values collected after concatenation: 2
[10:49:30.461]  - Number of values expected: 2
[10:49:30.461] Reducing values from 1 chunks ... DONE
[10:49:30.461] future_lapply() ... DONE
      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5
[10:49:30.461] getGlobalsAndPackagesXApply() ...
[10:49:30.461]  - future.globals: TRUE
[10:49:30.461] getGlobalsAndPackages() ...
[10:49:30.461] |  Searching for globals ...
[10:49:30.462] |  :  globals found: [1] ‘FUN’
[10:49:30.463] |  Searching for globals ... DONE
[10:49:30.463] |  Resolving globals: FALSE
[10:49:30.463] |  Search for packages associated with the globals ...
[10:49:30.463] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.463] |  :  Packages: [1] ‘base’
[10:49:30.463] |  Search for packages associated with the globals ... DONE
[10:49:30.463] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:30.464] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3,; 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 3, 3, 3,; 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5), dim = c(8L, 2L, 3L), dimnames = list(; row = NULL, col = c("x1", "x2"), C = c("cop.1", "cop.2",; "cop.3"))))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:30.464] |  Packages after dropping 'base': [0] 
[10:49:30.464] |  globals: [1] ‘FUN’
[10:49:30.464] |  packages: [0] 
[10:49:30.464] getGlobalsAndPackages() ... done
[10:49:30.464]  - globals found/used: [n=1] ‘FUN’
[10:49:30.464]  - needed namespaces: [n=0] 
[10:49:30.464] Finding globals ... DONE
[10:49:30.465]  - use_args: TRUE
[10:49:30.465]  - Getting '...' globals ...
[10:49:30.466] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.466] |  recursive: 0
[10:49:30.466] |  length: 1
[10:49:30.466] |  elements: ‘...’
[10:49:30.467] |  'obj' is DotDotDotList
[10:49:30.467] |  resolve(obj, ...) ...
[10:49:30.467] |  resolve(obj, ...) ... done
[10:49:30.467] |  length: 0 (resolved future 1)
[10:49:30.467] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.467]    - '...' content: [n=0] 
[10:49:30.467] List of 1
[10:49:30.467]  $ ...: list()
[10:49:30.467]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.467]  - attr(*, "where")=List of 1
[10:49:30.467]   ..$ ...:<environment: 0x564d5bd39960> 
[10:49:30.467]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.467]  - attr(*, "resolved")= logi TRUE
[10:49:30.467]  - attr(*, "total_size")= num NA
[10:49:30.470]  - Getting '...' globals ... DONE
[10:49:30.470] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.470] List of 2
[10:49:30.470]  $ ...future.FUN:function (x)  
[10:49:30.470]  $ ...          : list()
[10:49:30.470]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.470]  - attr(*, "where")=List of 2
[10:49:30.470]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.470]   ..$ ...          :<environment: 0x564d5bd39960> 
[10:49:30.470]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.470]  - attr(*, "resolved")= logi FALSE
[10:49:30.470]  - attr(*, "total_size")= num 3563
[10:49:30.473] Packages to be attached in all futures: [n=0] 
[10:49:30.473] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.473] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.473] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.473] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.473] future_lapply() ...
[10:49:30.474] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.474] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.474] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.474] Number of chunks: 1
[10:49:30.474] getGlobalsAndPackagesXApply() ...
[10:49:30.474]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.475]  - use_args: TRUE
[10:49:30.475] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.475] List of 2
[10:49:30.475]  $ ...          : list()
[10:49:30.475]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.475]  $ ...future.FUN:function (x)  
[10:49:30.475]  - attr(*, "where")=List of 2
[10:49:30.475]   ..$ ...          :<environment: 0x564d5bd39960> 
[10:49:30.475]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.475]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.475]  - attr(*, "resolved")= logi FALSE
[10:49:30.475]  - attr(*, "total_size")= num NA
[10:49:30.478] Packages to be attached in all futures: [n=0] 
[10:49:30.478] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.478] Number of futures (= number of chunks): 1
[10:49:30.478] Launching 1 futures (chunks) ...
[10:49:30.479] Chunk #1 of 1 ...
[10:49:30.479]  - seeds: <none>
[10:49:30.479]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.479] getGlobalsAndPackages() ...
[10:49:30.479] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.479] |  Resolving globals: FALSE
[10:49:30.479] |  Tweak future expression to call with '...' arguments ...
[10:49:30.479] |  :  {
[10:49:30.479] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.479] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.479] |  :      "# as a global variable                                         "
[10:49:30.479] |  :      do.call(function(...) {
[10:49:30.479] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.479] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.479] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.479] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.479] |  :          }
[10:49:30.479] |  :          {
[10:49:30.479] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.479] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.479] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.479] |  :              })
[10:49:30.479] |  :          }
[10:49:30.479] |  :      }, args = future.call.arguments)
[10:49:30.479] |  :  }
[10:49:30.480] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.480] |  Search for packages associated with the globals ...
[10:49:30.480] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.480] |  :  Packages: [1] ‘base’
[10:49:30.480] |  Search for packages associated with the globals ... DONE
[10:49:30.480] |  Packages after dropping 'base': [0] 
[10:49:30.481] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.481] |  packages: [0] 
[10:49:30.481] getGlobalsAndPackages() ... done
[10:49:30.481] run() for Future (‘Future’) ...
[10:49:30.481] |  state: ‘created’
[10:49:30.481] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.481] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.481] |  Using SequentialFutureBackend ...
[10:49:30.481] |  :  Launching futures ...
[10:49:30.482] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.482] |  :  .  |  getFutureData() ...
[10:49:30.482] |  :  .  |  :  getFutureCore() ...
[10:49:30.482] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.482] |  :  .  |  :  getFutureCore() ... done
[10:49:30.482] |  :  .  |  :  getFutureCapture() ...
[10:49:30.482] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.482] |  :  .  |  :  getFutureContext() ...
[10:49:30.482] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.482] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.483] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.483] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.483] |  :  .  |  :  getFutureContext() ... done
[10:49:30.483] |  :  .  |  getFutureData() ... done
[10:49:30.483] |  :  .  |  attachPackages() ...
[10:49:30.483] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.483] |  :  .  |  attachPackages() ... DONE
[10:49:30.483] |  :  .  |  attachPackages() ...
[10:49:30.483] |  :  .  |  :  packages: [n=0] 
[10:49:30.484] |  :  .  |  attachPackages() ... DONE
[10:49:30.484] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.484] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.484] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.484] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.485] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.485] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.485] |  :  .  |  :  .  |  New stack:
[10:49:30.485] |  :  .  |  :  .  |  List of 1
[10:49:30.485] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.485] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.485] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.485] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.485] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.485] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.485] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.488] |  :  .  |  :  .  |  Old stack:
[10:49:30.488] |  :  .  |  :  .  |  List of 1
[10:49:30.488] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.488] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.488] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.488] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.488] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.488] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.488] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.488] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.488] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.488] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.491] |  :  .  |  :  .  |  Not identical
[10:49:30.491] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.491] |  :  .  |  :  .  |  :  List of 2
[10:49:30.491] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.491] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.491] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.491] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.491] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.491] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.491] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.496] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.496] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.496] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.496] |  :  .  |  :  .  List of future strategies:
[10:49:30.496] |  :  .  |  :  .  1. sequential:
[10:49:30.496] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.496] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.496] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.497] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.497] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.497] |  :  .  |  assign_globals() ...
[10:49:30.497] |  :  .  |  List of 5
[10:49:30.497] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.497] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.497] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:30.497] |  :  .  |   $ ...future.elements_ii    :List of 6
[10:49:30.497] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:30.497] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:30.497] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:30.497] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:30.497] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:30.497] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:30.497] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.497] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.497] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.497] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.497] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.497] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.497] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.497] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.497] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.497] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.497] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.497] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.504] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.504] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.504] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.504] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.504] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.504] |  :  .  |  assign_globals() ... done
[10:49:30.507] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.507] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.507] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.508] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.508] |  :  .  |  :  .  |  :  New stack:
[10:49:30.508] |  :  .  |  :  .  |  :  List of 1
[10:49:30.508] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.508] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.508] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.508] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.508] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.508] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.508] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.508] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.508] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.508] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.511] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.511] |  :  .  |  :  .  |  :  List of 1
[10:49:30.511] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.511] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.511] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.511] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.511] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.511] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.511] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.511] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.511] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.511] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.514] |  :  .  |  :  .  |  :  Identical
[10:49:30.514] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.514] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.514] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.514] |  :  .  |  :  .  |  1. sequential:
[10:49:30.514] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.514] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.514] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.515] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.515] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.515] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.515] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.515] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.515] |  :  Launching futures ... done
[10:49:30.515] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.516] |  Using SequentialFutureBackend ... done
[10:49:30.516] run() for Future (‘SequentialFuture’) ... done
[10:49:30.516] Created future:
[10:49:30.516] SequentialFuture:
[10:49:30.516] Label: ‘future_apply-1’
[10:49:30.516] Expression:
[10:49:30.516] {
[10:49:30.516]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.516]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.516]     "# as a global variable                                         "
[10:49:30.516]     do.call(function(...) {
[10:49:30.516]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.516]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.516]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.516]             on.exit(options(oopts), add = TRUE)
[10:49:30.516]         }
[10:49:30.516]         {
[10:49:30.516]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.516]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.516]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.516]             })
[10:49:30.516]         }
[10:49:30.516]     }, args = future.call.arguments)
[10:49:30.516] }
[10:49:30.516] Lazy evaluation: FALSE
[10:49:30.516] Asynchronous evaluation: TRUE
[10:49:30.516] Local evaluation: TRUE
[10:49:30.516] Environment: R_GlobalEnv
[10:49:30.516] Capture standard output: TRUE
[10:49:30.516] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.516] Immediate condition classes: ‘immediateCondition’
[10:49:30.516] Globals: 5 objects totaling 811 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 463 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.516] Packages: <none>
[10:49:30.516] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.516] Resolved: TRUE
[10:49:30.516] Value: 463 bytes of class ‘list’
[10:49:30.516] Early signaling: FALSE
[10:49:30.516] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.516] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.517] Chunk #1 of 1 ... DONE
[10:49:30.517] Launching 1 futures (chunks) ... DONE
[10:49:30.517] Resolving 1 futures (chunks) ...
[10:49:30.517] value() on list ...
[10:49:30.517] |  recursive: 0
[10:49:30.517] |  length: 1
[10:49:30.517] |  
[10:49:30.517] |  Number of remaining objects: 1
[10:49:30.517] |  checking value #1 ...
[10:49:30.518] |  :  'obj' is SequentialFuture
[10:49:30.518] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.518] |  :  .  state: ‘finished’
[10:49:30.518] |  :  .  run: TRUE
[10:49:30.518] |  :  .  result: ‘FutureResult’
[10:49:30.518] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.518] |  :  SequentialFuture #1
[10:49:30.518] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.518] |  :  .  nx: 1
[10:49:30.518] |  :  .  relay: TRUE
[10:49:30.518] |  :  .  stdout: TRUE
[10:49:30.519] |  :  .  signal: TRUE
[10:49:30.519] |  :  .  resignal: FALSE
[10:49:30.519] |  :  .  force: TRUE
[10:49:30.519] |  :  .  relayed: [n=1] FALSE
[10:49:30.519] |  :  .  queued futures: [n=1] FALSE
[10:49:30.519] |  :  .  until=1
[10:49:30.519] |  :  .  relaying element #1
[10:49:30.519] |  :  .  relayed: [n=1] TRUE
[10:49:30.519] |  :  .  queued futures: [n=1] TRUE
[10:49:30.519] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.520] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.520] |  :  .  value: <list>
[10:49:30.520] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.520] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.520] |  :  .  nx: 1
[10:49:30.520] |  :  .  relay: TRUE
[10:49:30.520] |  :  .  stdout: TRUE
[10:49:30.520] |  :  .  signal: TRUE
[10:49:30.520] |  :  .  resignal: FALSE
[10:49:30.520] |  :  .  force: TRUE
[10:49:30.520] |  :  .  relayed: [n=1] TRUE
[10:49:30.521] |  :  .  queued futures: [n=1] TRUE
[10:49:30.521] |  :  .  until=1
[10:49:30.521] |  :  .  relayed: [n=1] TRUE
[10:49:30.521] |  :  .  queued futures: [n=1] TRUE
[10:49:30.521] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.521] |  :  length: 0 (resolved future 1)
[10:49:30.521] |  checking value #1 ... done
[10:49:30.521] |  Relaying remaining futures ...
[10:49:30.521] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.521] |  :  .  nx: 1
[10:49:30.522] |  :  .  relay: TRUE
[10:49:30.522] |  :  .  stdout: TRUE
[10:49:30.522] |  :  .  signal: TRUE
[10:49:30.522] |  :  .  resignal: FALSE
[10:49:30.522] |  :  .  force: TRUE
[10:49:30.522] |  :  .  relayed: [n=1] TRUE
[10:49:30.522] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.522] |  :  .  relayed: [n=1] TRUE
[10:49:30.522] |  :  .  queued futures: [n=1] TRUE
[10:49:30.522] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.522] |  Relaying remaining futures ... done
[10:49:30.523] value() on list ... done
[10:49:30.523]  - Number of value chunks collected: 1
[10:49:30.523] Resolving 1 futures (chunks) ... DONE
[10:49:30.523] Reducing values from 1 chunks ...
[10:49:30.523]  - Number of values collected after concatenation: 6
[10:49:30.523]  - Number of values expected: 6
[10:49:30.523] Reducing values from 1 chunks ... DONE
[10:49:30.523] future_lapply() ... DONE
, , C = cop.1

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

, , C = cop.2

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

, , C = cop.3

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

[10:49:30.523] getGlobalsAndPackagesXApply() ...
[10:49:30.524]  - future.globals: TRUE
[10:49:30.524] getGlobalsAndPackages() ...
[10:49:30.524] |  Searching for globals ...
[10:49:30.526] |  :  globals found: [3] ‘FUN’, ‘seq_len’, ‘max’
[10:49:30.526] |  Searching for globals ... DONE
[10:49:30.526] |  Resolving globals: FALSE
[10:49:30.527] |  Search for packages associated with the globals ...
[10:49:30.527] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.527] |  :  Packages: [1] ‘base’
[10:49:30.527] |  Search for packages associated with the globals ... DONE
[10:49:30.527] |  The total size of the 1 globals is 411 bytes (411 bytes)
[10:49:30.528] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:24, dim = 2:4))’) is 411 bytes There is one global: ‘FUN’ (411 bytes of class ‘function’)
[10:49:30.528] |  Packages after dropping 'base': [0] 
[10:49:30.528] |  globals: [1] ‘FUN’
[10:49:30.528] |  packages: [0] 
[10:49:30.528] getGlobalsAndPackages() ... done
[10:49:30.528]  - globals found/used: [n=1] ‘FUN’
[10:49:30.528]  - needed namespaces: [n=0] 
[10:49:30.529] Finding globals ... DONE
[10:49:30.529]  - use_args: TRUE
[10:49:30.529]  - Getting '...' globals ...
[10:49:30.529] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.529] |  recursive: 0
[10:49:30.529] |  length: 1
[10:49:30.529] |  elements: ‘...’
[10:49:30.529] |  'obj' is DotDotDotList
[10:49:30.530] |  resolve(obj, ...) ...
[10:49:30.530] |  resolve(obj, ...) ... done
[10:49:30.530] |  length: 0 (resolved future 1)
[10:49:30.530] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.530]    - '...' content: [n=0] 
[10:49:30.530] List of 1
[10:49:30.530]  $ ...: list()
[10:49:30.530]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.530]  - attr(*, "where")=List of 1
[10:49:30.530]   ..$ ...:<environment: 0x564d5bebfca0> 
[10:49:30.530]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.530]  - attr(*, "resolved")= logi TRUE
[10:49:30.530]  - attr(*, "total_size")= num NA
[10:49:30.532]  - Getting '...' globals ... DONE
[10:49:30.533] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.533] List of 2
[10:49:30.533]  $ ...future.FUN:function (x)  
[10:49:30.533]  $ ...          : list()
[10:49:30.533]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.533]  - attr(*, "where")=List of 2
[10:49:30.533]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.533]   ..$ ...          :<environment: 0x564d5bebfca0> 
[10:49:30.533]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.533]  - attr(*, "resolved")= logi FALSE
[10:49:30.533]  - attr(*, "total_size")= num 3672
[10:49:30.536] Packages to be attached in all futures: [n=0] 
[10:49:30.536] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.536] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.536] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.536] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.536] future_lapply() ...
[10:49:30.537] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.537] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.537] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.537] Number of chunks: 1
[10:49:30.537] getGlobalsAndPackagesXApply() ...
[10:49:30.537]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.537]  - use_args: TRUE
[10:49:30.538] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.538] List of 2
[10:49:30.538]  $ ...          : list()
[10:49:30.538]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.538]  $ ...future.FUN:function (x)  
[10:49:30.538]  - attr(*, "where")=List of 2
[10:49:30.538]   ..$ ...          :<environment: 0x564d5bebfca0> 
[10:49:30.538]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:49:30.538]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.538]  - attr(*, "resolved")= logi FALSE
[10:49:30.538]  - attr(*, "total_size")= num NA
[10:49:30.540] Packages to be attached in all futures: [n=0] 
[10:49:30.541] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.541] Number of futures (= number of chunks): 1
[10:49:30.541] Launching 1 futures (chunks) ...
[10:49:30.541] Chunk #1 of 1 ...
[10:49:30.541]  - seeds: <none>
[10:49:30.541]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.541] getGlobalsAndPackages() ...
[10:49:30.541] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.541] |  Resolving globals: FALSE
[10:49:30.542] |  Tweak future expression to call with '...' arguments ...
[10:49:30.542] |  :  {
[10:49:30.542] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.542] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.542] |  :      "# as a global variable                                         "
[10:49:30.542] |  :      do.call(function(...) {
[10:49:30.542] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:30.542] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:30.542] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:30.542] |  :          "# anonymous function.                                          "
[10:49:30.542] |  :          "#                                                              "
[10:49:30.542] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:30.542] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:30.542] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:30.542] |  :          "# global environment, which is where globals are written.      "
[10:49:30.542] |  :          penv <- env <- environment(...future.FUN)
[10:49:30.542] |  :          repeat {
[10:49:30.542] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:30.542] |  :                  emptyenv())) 
[10:49:30.542] |  :                  break
[10:49:30.542] |  :              penv <- env
[10:49:30.542] |  :              env <- parent.env(env)
[10:49:30.542] |  :          }
[10:49:30.542] |  :          if (identical(penv, globalenv())) {
[10:49:30.542] |  :              environment(...future.FUN) <- environment()
[10:49:30.542] |  :          }
[10:49:30.542] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:30.542] |  :              !isNamespace(penv)) {
[10:49:30.542] |  :              parent.env(penv) <- environment()
[10:49:30.542] |  :          }
[10:49:30.542] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:30.542] |  :          {
[10:49:30.542] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.542] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.542] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.542] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:30.542] |  :              }
[10:49:30.542] |  :              {
[10:49:30.542] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.542] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.542] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:30.542] |  :                  })
[10:49:30.542] |  :              }
[10:49:30.542] |  :          }
[10:49:30.542] |  :      }, args = future.call.arguments)
[10:49:30.542] |  :  }
[10:49:30.542] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.542] |  Search for packages associated with the globals ...
[10:49:30.542] |  :  Packages associated with globals: [0] 
[10:49:30.543] |  :  Packages: [0] 
[10:49:30.543] |  Search for packages associated with the globals ... DONE
[10:49:30.543] |  Packages after dropping 'base': [0] 
[10:49:30.543] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.543] |  packages: [0] 
[10:49:30.543] getGlobalsAndPackages() ... done
[10:49:30.543] run() for Future (‘Future’) ...
[10:49:30.544] |  state: ‘created’
[10:49:30.544] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.544] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.544] |  Using SequentialFutureBackend ...
[10:49:30.544] |  :  Launching futures ...
[10:49:30.544] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.544] |  :  .  |  getFutureData() ...
[10:49:30.544] |  :  .  |  :  getFutureCore() ...
[10:49:30.544] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.545] |  :  .  |  :  getFutureCore() ... done
[10:49:30.545] |  :  .  |  :  getFutureCapture() ...
[10:49:30.545] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.545] |  :  .  |  :  getFutureContext() ...
[10:49:30.545] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.545] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.545] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.545] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.545] |  :  .  |  :  getFutureContext() ... done
[10:49:30.545] |  :  .  |  getFutureData() ... done
[10:49:30.546] |  :  .  |  attachPackages() ...
[10:49:30.547] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.547] |  :  .  |  attachPackages() ... DONE
[10:49:30.547] |  :  .  |  attachPackages() ...
[10:49:30.547] |  :  .  |  :  packages: [n=0] 
[10:49:30.547] |  :  .  |  attachPackages() ... DONE
[10:49:30.547] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.547] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.548] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.548] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.548] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.548] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.548] |  :  .  |  :  .  |  New stack:
[10:49:30.548] |  :  .  |  :  .  |  List of 1
[10:49:30.548] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.548] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.548] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.548] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.548] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.548] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.548] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.550] |  :  .  |  :  .  |  Old stack:
[10:49:30.551] |  :  .  |  :  .  |  List of 1
[10:49:30.551] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.551] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.551] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.551] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.551] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.551] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.551] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.551] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.551] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.551] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.553] |  :  .  |  :  .  |  Not identical
[10:49:30.553] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.554] |  :  .  |  :  .  |  :  List of 2
[10:49:30.554] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.554] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.554] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.554] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.554] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.554] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.554] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.558] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.558] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.558] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.558] |  :  .  |  :  .  List of future strategies:
[10:49:30.558] |  :  .  |  :  .  1. sequential:
[10:49:30.558] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.558] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.558] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.559] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.559] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.559] |  :  .  |  assign_globals() ...
[10:49:30.559] |  :  .  |  List of 5
[10:49:30.559] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.559] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.559] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:30.559] |  :  .  |   $ ...future.elements_ii    :List of 6
[10:49:30.559] |  :  .  |    ..$ : int [1:4] 1 7 13 19
[10:49:30.559] |  :  .  |    ..$ : int [1:4] 2 8 14 20
[10:49:30.559] |  :  .  |    ..$ : int [1:4] 3 9 15 21
[10:49:30.559] |  :  .  |    ..$ : int [1:4] 4 10 16 22
[10:49:30.559] |  :  .  |    ..$ : int [1:4] 5 11 17 23
[10:49:30.559] |  :  .  |    ..$ : int [1:4] 6 12 18 24
[10:49:30.559] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.559] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.559] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.559] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.559] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.559] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.559] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.559] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.559] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.559] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.559] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.559] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.566] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.566] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:30.567] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.567] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.567] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.567] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.567] |  :  .  |  assign_globals() ... done
[10:49:30.568] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.568] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.569] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.569] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.569] |  :  .  |  :  .  |  :  New stack:
[10:49:30.569] |  :  .  |  :  .  |  :  List of 1
[10:49:30.569] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.569] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.569] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.569] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.569] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.569] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.569] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.569] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.569] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.569] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.572] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.572] |  :  .  |  :  .  |  :  List of 1
[10:49:30.572] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.572] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.572] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.572] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.572] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.572] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.572] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.572] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.572] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.572] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.575] |  :  .  |  :  .  |  :  Identical
[10:49:30.575] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.575] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.575] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.575] |  :  .  |  :  .  |  1. sequential:
[10:49:30.575] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.575] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.575] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.575] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.575] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.576] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.576] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.576] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.576] |  :  Launching futures ... done
[10:49:30.576] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.576] |  Using SequentialFutureBackend ... done
[10:49:30.576] run() for Future (‘SequentialFuture’) ... done
[10:49:30.576] Created future:
[10:49:30.576] SequentialFuture:
[10:49:30.576] Label: ‘future_apply-1’
[10:49:30.576] Expression:
[10:49:30.576] {
[10:49:30.576]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.576]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.576]     "# as a global variable                                         "
[10:49:30.576]     do.call(function(...) {
[10:49:30.576]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:30.576]         "# without having an '...' argument. This means '...' is treated"
[10:49:30.576]         "# as a global variable. This may happen when FUN() is an       "
[10:49:30.576]         "# anonymous function.                                          "
[10:49:30.576]         "#                                                              "
[10:49:30.576]         "# If an anonymous function, we will make sure to restore the   "
[10:49:30.576]         "# function environment of FUN() to the calling environment.    "
[10:49:30.576]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:30.576]         "# global environment, which is where globals are written.      "
[10:49:30.576]         penv <- env <- environment(...future.FUN)
[10:49:30.576]         repeat {
[10:49:30.576]             if (identical(env, globalenv()) || identical(env, 
[10:49:30.576]                 emptyenv())) 
[10:49:30.576]                 break
[10:49:30.576]             penv <- env
[10:49:30.576]             env <- parent.env(env)
[10:49:30.576]         }
[10:49:30.576]         if (identical(penv, globalenv())) {
[10:49:30.576]             environment(...future.FUN) <- environment()
[10:49:30.576]         }
[10:49:30.576]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:30.576]             !isNamespace(penv)) {
[10:49:30.576]             parent.env(penv) <- environment()
[10:49:30.576]         }
[10:49:30.576]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:30.576]         {
[10:49:30.576]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.576]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.576]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.576]                 on.exit(options(oopts), add = TRUE)
[10:49:30.576]             }
[10:49:30.576]             {
[10:49:30.576]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.576]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.576]                   ...future.FUN(...future.X_jj, ...)
[10:49:30.576]                 })
[10:49:30.576]             }
[10:49:30.576]         }
[10:49:30.576]     }, args = future.call.arguments)
[10:49:30.576] }
[10:49:30.576] Lazy evaluation: FALSE
[10:49:30.576] Asynchronous evaluation: TRUE
[10:49:30.576] Local evaluation: TRUE
[10:49:30.576] Environment: R_GlobalEnv
[10:49:30.576] Capture standard output: TRUE
[10:49:30.576] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.576] Immediate condition classes: ‘immediateCondition’
[10:49:30.576] Globals: 5 objects totaling 749 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 411 bytes, list ‘...future.elements_ii’ of 175 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.576] Packages: <none>
[10:49:30.576] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.576] Resolved: TRUE
[10:49:30.576] Value: 521 bytes of class ‘list’
[10:49:30.576] Early signaling: FALSE
[10:49:30.576] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.576] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.577] Chunk #1 of 1 ... DONE
[10:49:30.578] Launching 1 futures (chunks) ... DONE
[10:49:30.578] Resolving 1 futures (chunks) ...
[10:49:30.578] value() on list ...
[10:49:30.578] |  recursive: 0
[10:49:30.578] |  length: 1
[10:49:30.578] |  
[10:49:30.578] |  Number of remaining objects: 1
[10:49:30.578] |  checking value #1 ...
[10:49:30.578] |  :  'obj' is SequentialFuture
[10:49:30.578] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.578] |  :  .  state: ‘finished’
[10:49:30.579] |  :  .  run: TRUE
[10:49:30.579] |  :  .  result: ‘FutureResult’
[10:49:30.579] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.579] |  :  SequentialFuture #1
[10:49:30.579] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.579] |  :  .  nx: 1
[10:49:30.579] |  :  .  relay: TRUE
[10:49:30.579] |  :  .  stdout: TRUE
[10:49:30.579] |  :  .  signal: TRUE
[10:49:30.579] |  :  .  resignal: FALSE
[10:49:30.579] |  :  .  force: TRUE
[10:49:30.579] |  :  .  relayed: [n=1] FALSE
[10:49:30.580] |  :  .  queued futures: [n=1] FALSE
[10:49:30.580] |  :  .  until=1
[10:49:30.580] |  :  .  relaying element #1
[10:49:30.580] |  :  .  relayed: [n=1] TRUE
[10:49:30.580] |  :  .  queued futures: [n=1] TRUE
[10:49:30.580] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.580] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.580] |  :  .  value: <list>
[10:49:30.580] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.581] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.581] |  :  .  nx: 1
[10:49:30.581] |  :  .  relay: TRUE
[10:49:30.581] |  :  .  stdout: TRUE
[10:49:30.581] |  :  .  signal: TRUE
[10:49:30.581] |  :  .  resignal: FALSE
[10:49:30.581] |  :  .  force: TRUE
[10:49:30.581] |  :  .  relayed: [n=1] TRUE
[10:49:30.581] |  :  .  queued futures: [n=1] TRUE
[10:49:30.581] |  :  .  until=1
[10:49:30.581] |  :  .  relayed: [n=1] TRUE
[10:49:30.581] |  :  .  queued futures: [n=1] TRUE
[10:49:30.582] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.582] |  :  length: 0 (resolved future 1)
[10:49:30.582] |  checking value #1 ... done
[10:49:30.582] |  Relaying remaining futures ...
[10:49:30.582] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.582] |  :  .  nx: 1
[10:49:30.582] |  :  .  relay: TRUE
[10:49:30.582] |  :  .  stdout: TRUE
[10:49:30.582] |  :  .  signal: TRUE
[10:49:30.582] |  :  .  resignal: FALSE
[10:49:30.583] |  :  .  force: TRUE
[10:49:30.584] |  :  .  relayed: [n=1] TRUE
[10:49:30.584] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.584] |  :  .  relayed: [n=1] TRUE
[10:49:30.584] |  :  .  queued futures: [n=1] TRUE
[10:49:30.584] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.584] |  Relaying remaining futures ... done
[10:49:30.584] value() on list ... done
[10:49:30.584]  - Number of value chunks collected: 1
[10:49:30.584] Resolving 1 futures (chunks) ... DONE
[10:49:30.585] Reducing values from 1 chunks ...
[10:49:30.585]  - Number of values collected after concatenation: 6
[10:49:30.585]  - Number of values expected: 6
[10:49:30.585] Reducing values from 1 chunks ... DONE
[10:49:30.585] future_lapply() ... DONE
     [,1]       [,2]       [,3]      
[1,] integer,19 integer,21 integer,23
[2,] integer,20 integer,22 integer,24
- apply(X, MARGIN = <character>, ...) ...
[10:49:30.585] getGlobalsAndPackagesXApply() ...
[10:49:30.585]  - future.globals: TRUE
[10:49:30.585] getGlobalsAndPackages() ...
[10:49:30.585] |  Searching for globals ...
[10:49:30.587] |  :  globals found: [1] ‘FUN’
[10:49:30.587] |  Searching for globals ... DONE
[10:49:30.587] |  Resolving globals: FALSE
[10:49:30.587] |  Search for packages associated with the globals ...
[10:49:30.587] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.587] |  :  Packages: [1] ‘base’
[10:49:30.587] |  Search for packages associated with the globals ... DONE
[10:49:30.587] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:30.588] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:2, dim = 2:1, dimnames = list(rows = c("a",; "b"), NULL)))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:30.588] |  Packages after dropping 'base': [0] 
[10:49:30.588] |  globals: [1] ‘FUN’
[10:49:30.588] |  packages: [0] 
[10:49:30.588] getGlobalsAndPackages() ... done
[10:49:30.588]  - globals found/used: [n=1] ‘FUN’
[10:49:30.588]  - needed namespaces: [n=0] 
[10:49:30.588] Finding globals ... DONE
[10:49:30.589]  - use_args: TRUE
[10:49:30.589]  - Getting '...' globals ...
[10:49:30.589] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.589] |  recursive: 0
[10:49:30.589] |  length: 1
[10:49:30.589] |  elements: ‘...’
[10:49:30.589] |  'obj' is DotDotDotList
[10:49:30.589] |  resolve(obj, ...) ...
[10:49:30.590] |  resolve(obj, ...) ... done
[10:49:30.590] |  length: 0 (resolved future 1)
[10:49:30.590] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.590]    - '...' content: [n=0] 
[10:49:30.590] List of 1
[10:49:30.590]  $ ...: list()
[10:49:30.590]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.590]  - attr(*, "where")=List of 1
[10:49:30.590]   ..$ ...:<environment: 0x564d5c3ab148> 
[10:49:30.590]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.590]  - attr(*, "resolved")= logi TRUE
[10:49:30.590]  - attr(*, "total_size")= num NA
[10:49:30.592]  - Getting '...' globals ... DONE
[10:49:30.592] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.593] List of 2
[10:49:30.593]  $ ...future.FUN:function (x)  
[10:49:30.593]  $ ...          : list()
[10:49:30.593]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.593]  - attr(*, "where")=List of 2
[10:49:30.593]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.593]   ..$ ...          :<environment: 0x564d5c3ab148> 
[10:49:30.593]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.593]  - attr(*, "resolved")= logi FALSE
[10:49:30.593]  - attr(*, "total_size")= num 2547
[10:49:30.595] Packages to be attached in all futures: [n=0] 
[10:49:30.595] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.596] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.596] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.596] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.596] future_lapply() ...
[10:49:30.596] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.596] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.597] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.597] Number of chunks: 1
[10:49:30.597] getGlobalsAndPackagesXApply() ...
[10:49:30.597]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.597]  - use_args: TRUE
[10:49:30.597] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.597] List of 2
[10:49:30.597]  $ ...          : list()
[10:49:30.597]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.597]  $ ...future.FUN:function (x)  
[10:49:30.597]  - attr(*, "where")=List of 2
[10:49:30.597]   ..$ ...          :<environment: 0x564d5c3ab148> 
[10:49:30.597]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.597]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.597]  - attr(*, "resolved")= logi FALSE
[10:49:30.597]  - attr(*, "total_size")= num NA
[10:49:30.601] Packages to be attached in all futures: [n=0] 
[10:49:30.601] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.601] Number of futures (= number of chunks): 1
[10:49:30.601] Launching 1 futures (chunks) ...
[10:49:30.601] Chunk #1 of 1 ...
[10:49:30.601]  - seeds: <none>
[10:49:30.601]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.601] getGlobalsAndPackages() ...
[10:49:30.601] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.602] |  Resolving globals: FALSE
[10:49:30.602] |  Tweak future expression to call with '...' arguments ...
[10:49:30.602] |  :  {
[10:49:30.602] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.602] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.602] |  :      "# as a global variable                                         "
[10:49:30.602] |  :      do.call(function(...) {
[10:49:30.602] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.602] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.602] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.602] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.602] |  :          }
[10:49:30.602] |  :          {
[10:49:30.602] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.602] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.602] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.602] |  :              })
[10:49:30.602] |  :          }
[10:49:30.602] |  :      }, args = future.call.arguments)
[10:49:30.602] |  :  }
[10:49:30.602] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.602] |  Search for packages associated with the globals ...
[10:49:30.603] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.603] |  :  Packages: [1] ‘base’
[10:49:30.604] |  Search for packages associated with the globals ... DONE
[10:49:30.604] |  Packages after dropping 'base': [0] 
[10:49:30.604] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.604] |  packages: [0] 
[10:49:30.604] getGlobalsAndPackages() ... done
[10:49:30.604] run() for Future (‘Future’) ...
[10:49:30.604] |  state: ‘created’
[10:49:30.605] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.605] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.605] |  Using SequentialFutureBackend ...
[10:49:30.605] |  :  Launching futures ...
[10:49:30.605] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.605] |  :  .  |  getFutureData() ...
[10:49:30.605] |  :  .  |  :  getFutureCore() ...
[10:49:30.605] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.605] |  :  .  |  :  getFutureCore() ... done
[10:49:30.605] |  :  .  |  :  getFutureCapture() ...
[10:49:30.606] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.606] |  :  .  |  :  getFutureContext() ...
[10:49:30.606] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.606] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.606] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.606] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.606] |  :  .  |  :  getFutureContext() ... done
[10:49:30.606] |  :  .  |  getFutureData() ... done
[10:49:30.606] |  :  .  |  attachPackages() ...
[10:49:30.607] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.607] |  :  .  |  attachPackages() ... DONE
[10:49:30.607] |  :  .  |  attachPackages() ...
[10:49:30.607] |  :  .  |  :  packages: [n=0] 
[10:49:30.607] |  :  .  |  attachPackages() ... DONE
[10:49:30.607] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.607] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.607] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.608] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.608] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.608] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.608] |  :  .  |  :  .  |  New stack:
[10:49:30.608] |  :  .  |  :  .  |  List of 1
[10:49:30.608] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.608] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.608] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.608] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.608] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.608] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.608] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.610] |  :  .  |  :  .  |  Old stack:
[10:49:30.610] |  :  .  |  :  .  |  List of 1
[10:49:30.610] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.610] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.610] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.610] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.610] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.610] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.610] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.610] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.610] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.610] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.613] |  :  .  |  :  .  |  Not identical
[10:49:30.613] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.613] |  :  .  |  :  .  |  :  List of 2
[10:49:30.613] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.613] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.613] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.613] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.613] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.613] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.613] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.618] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.618] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.618] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.618] |  :  .  |  :  .  List of future strategies:
[10:49:30.618] |  :  .  |  :  .  1. sequential:
[10:49:30.618] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.618] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.618] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.619] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.619] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.619] |  :  .  |  assign_globals() ...
[10:49:30.619] |  :  .  |  List of 5
[10:49:30.619] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.619] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.619] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:30.619] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.619] |  :  .  |    ..$ : int 1
[10:49:30.619] |  :  .  |    ..$ : int 2
[10:49:30.619] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.619] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.619] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.619] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.619] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.619] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.619] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.619] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.619] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.619] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.619] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.619] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.626] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.626] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.626] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.626] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.626] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.626] |  :  .  |  assign_globals() ... done
[10:49:30.628] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.628] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.628] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.628] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.628] |  :  .  |  :  .  |  :  New stack:
[10:49:30.628] |  :  .  |  :  .  |  :  List of 1
[10:49:30.628] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.628] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.628] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.628] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.628] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.628] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.628] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.628] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.628] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.628] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.632] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.632] |  :  .  |  :  .  |  :  List of 1
[10:49:30.632] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.632] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.632] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.632] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.632] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.632] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.632] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.632] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.632] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.632] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.636] |  :  .  |  :  .  |  :  Identical
[10:49:30.636] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.636] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.636] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.636] |  :  .  |  :  .  |  1. sequential:
[10:49:30.636] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.636] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.636] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.637] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.637] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.637] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.637] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.638] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.638] |  :  Launching futures ... done
[10:49:30.638] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.638] |  Using SequentialFutureBackend ... done
[10:49:30.638] run() for Future (‘SequentialFuture’) ... done
[10:49:30.638] Created future:
[10:49:30.639] SequentialFuture:
[10:49:30.639] Label: ‘future_apply-1’
[10:49:30.639] Expression:
[10:49:30.639] {
[10:49:30.639]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.639]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.639]     "# as a global variable                                         "
[10:49:30.639]     do.call(function(...) {
[10:49:30.639]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.639]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.639]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.639]             on.exit(options(oopts), add = TRUE)
[10:49:30.639]         }
[10:49:30.639]         {
[10:49:30.639]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.639]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.639]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.639]             })
[10:49:30.639]         }
[10:49:30.639]     }, args = future.call.arguments)
[10:49:30.639] }
[10:49:30.639] Lazy evaluation: FALSE
[10:49:30.639] Asynchronous evaluation: TRUE
[10:49:30.639] Local evaluation: TRUE
[10:49:30.639] Environment: R_GlobalEnv
[10:49:30.639] Capture standard output: TRUE
[10:49:30.639] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.639] Immediate condition classes: ‘immediateCondition’
[10:49:30.639] Globals: 5 objects totaling 403 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 55 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.639] Packages: <none>
[10:49:30.639] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.639] Resolved: TRUE
[10:49:30.639] Value: 55 bytes of class ‘list’
[10:49:30.639] Early signaling: FALSE
[10:49:30.639] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.639] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.640] Chunk #1 of 1 ... DONE
[10:49:30.640] Launching 1 futures (chunks) ... DONE
[10:49:30.640] Resolving 1 futures (chunks) ...
[10:49:30.640] value() on list ...
[10:49:30.640] |  recursive: 0
[10:49:30.640] |  length: 1
[10:49:30.641] |  
[10:49:30.641] |  Number of remaining objects: 1
[10:49:30.641] |  checking value #1 ...
[10:49:30.641] |  :  'obj' is SequentialFuture
[10:49:30.641] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.641] |  :  .  state: ‘finished’
[10:49:30.641] |  :  .  run: TRUE
[10:49:30.641] |  :  .  result: ‘FutureResult’
[10:49:30.642] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.642] |  :  SequentialFuture #1
[10:49:30.642] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.642] |  :  .  nx: 1
[10:49:30.642] |  :  .  relay: TRUE
[10:49:30.642] |  :  .  stdout: TRUE
[10:49:30.642] |  :  .  signal: TRUE
[10:49:30.642] |  :  .  resignal: FALSE
[10:49:30.643] |  :  .  force: TRUE
[10:49:30.643] |  :  .  relayed: [n=1] FALSE
[10:49:30.643] |  :  .  queued futures: [n=1] FALSE
[10:49:30.643] |  :  .  until=1
[10:49:30.643] |  :  .  relaying element #1
[10:49:30.643] |  :  .  relayed: [n=1] TRUE
[10:49:30.643] |  :  .  queued futures: [n=1] TRUE
[10:49:30.643] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.644] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.644] |  :  .  value: <list>
[10:49:30.645] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.645] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.645] |  :  .  nx: 1
[10:49:30.645] |  :  .  relay: TRUE
[10:49:30.645] |  :  .  stdout: TRUE
[10:49:30.646] |  :  .  signal: TRUE
[10:49:30.646] |  :  .  resignal: FALSE
[10:49:30.646] |  :  .  force: TRUE
[10:49:30.646] |  :  .  relayed: [n=1] TRUE
[10:49:30.646] |  :  .  queued futures: [n=1] TRUE
[10:49:30.646] |  :  .  until=1
[10:49:30.646] |  :  .  relayed: [n=1] TRUE
[10:49:30.646] |  :  .  queued futures: [n=1] TRUE
[10:49:30.646] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.647] |  :  length: 0 (resolved future 1)
[10:49:30.647] |  checking value #1 ... done
[10:49:30.647] |  Relaying remaining futures ...
[10:49:30.647] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.647] |  :  .  nx: 1
[10:49:30.647] |  :  .  relay: TRUE
[10:49:30.647] |  :  .  stdout: TRUE
[10:49:30.647] |  :  .  signal: TRUE
[10:49:30.647] |  :  .  resignal: FALSE
[10:49:30.647] |  :  .  force: TRUE
[10:49:30.647] |  :  .  relayed: [n=1] TRUE
[10:49:30.647] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.648] |  :  .  relayed: [n=1] TRUE
[10:49:30.648] |  :  .  queued futures: [n=1] TRUE
[10:49:30.648] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.648] |  Relaying remaining futures ... done
[10:49:30.648] value() on list ... done
[10:49:30.648]  - Number of value chunks collected: 1
[10:49:30.648] Resolving 1 futures (chunks) ... DONE
[10:49:30.648] Reducing values from 1 chunks ...
[10:49:30.648]  - Number of values collected after concatenation: 2
[10:49:30.648]  - Number of values expected: 2
[10:49:30.649] Reducing values from 1 chunks ... DONE
[10:49:30.649] future_lapply() ... DONE
a b 
1 2 
- apply(X, ...) - dim(X) > 2 ...
[10:49:30.649] getGlobalsAndPackagesXApply() ...
[10:49:30.649]  - future.globals: TRUE
[10:49:30.649] getGlobalsAndPackages() ...
[10:49:30.649] |  Searching for globals ...
[10:49:30.650] |  :  globals found: [1] ‘FUN’
[10:49:30.650] |  Searching for globals ... DONE
[10:49:30.650] |  Resolving globals: FALSE
[10:49:30.651] |  Search for packages associated with the globals ...
[10:49:30.651] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.651] |  :  Packages: [1] ‘base’
[10:49:30.651] |  Search for packages associated with the globals ... DONE
[10:49:30.651] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:30.651] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:12, dim = c(2L, 2L, 3L)))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:30.652] |  Packages after dropping 'base': [0] 
[10:49:30.652] |  globals: [1] ‘FUN’
[10:49:30.652] |  packages: [0] 
[10:49:30.652] getGlobalsAndPackages() ... done
[10:49:30.652]  - globals found/used: [n=1] ‘FUN’
[10:49:30.652]  - needed namespaces: [n=0] 
[10:49:30.652] Finding globals ... DONE
[10:49:30.652]  - use_args: TRUE
[10:49:30.652]  - Getting '...' globals ...
[10:49:30.653] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.653] |  recursive: 0
[10:49:30.653] |  length: 1
[10:49:30.653] |  elements: ‘...’
[10:49:30.653] |  'obj' is DotDotDotList
[10:49:30.653] |  resolve(obj, ...) ...
[10:49:30.653] |  resolve(obj, ...) ... done
[10:49:30.653] |  length: 0 (resolved future 1)
[10:49:30.654] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.654]    - '...' content: [n=0] 
[10:49:30.654] List of 1
[10:49:30.654]  $ ...: list()
[10:49:30.654]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.654]  - attr(*, "where")=List of 1
[10:49:30.654]   ..$ ...:<environment: 0x564d5a00a208> 
[10:49:30.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.654]  - attr(*, "resolved")= logi TRUE
[10:49:30.654]  - attr(*, "total_size")= num NA
[10:49:30.656]  - Getting '...' globals ... DONE
[10:49:30.656] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.656] List of 2
[10:49:30.656]  $ ...future.FUN:function (x)  
[10:49:30.656]  $ ...          : list()
[10:49:30.656]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.656]  - attr(*, "where")=List of 2
[10:49:30.656]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.656]   ..$ ...          :<environment: 0x564d5a00a208> 
[10:49:30.656]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.656]  - attr(*, "resolved")= logi FALSE
[10:49:30.656]  - attr(*, "total_size")= num 2274
[10:49:30.659] Packages to be attached in all futures: [n=0] 
[10:49:30.659] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.659] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.659] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.660] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.660] future_lapply() ...
[10:49:30.660] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.660] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.660] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.661] Number of chunks: 1
[10:49:30.661] getGlobalsAndPackagesXApply() ...
[10:49:30.661]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.661]  - use_args: TRUE
[10:49:30.661] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.661] List of 2
[10:49:30.661]  $ ...          : list()
[10:49:30.661]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.661]  $ ...future.FUN:function (x)  
[10:49:30.661]  - attr(*, "where")=List of 2
[10:49:30.661]   ..$ ...          :<environment: 0x564d5a00a208> 
[10:49:30.661]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.661]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.661]  - attr(*, "resolved")= logi FALSE
[10:49:30.661]  - attr(*, "total_size")= num NA
[10:49:30.665] Packages to be attached in all futures: [n=0] 
[10:49:30.666] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.666] Number of futures (= number of chunks): 1
[10:49:30.666] Launching 1 futures (chunks) ...
[10:49:30.666] Chunk #1 of 1 ...
[10:49:30.666]  - seeds: <none>
[10:49:30.666]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.666] getGlobalsAndPackages() ...
[10:49:30.666] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.667] |  Resolving globals: FALSE
[10:49:30.667] |  Tweak future expression to call with '...' arguments ...
[10:49:30.667] |  :  {
[10:49:30.667] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.667] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.667] |  :      "# as a global variable                                         "
[10:49:30.667] |  :      do.call(function(...) {
[10:49:30.667] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.667] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.667] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.667] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.667] |  :          }
[10:49:30.667] |  :          {
[10:49:30.667] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.667] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.667] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.667] |  :              })
[10:49:30.667] |  :          }
[10:49:30.667] |  :      }, args = future.call.arguments)
[10:49:30.667] |  :  }
[10:49:30.667] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.667] |  Search for packages associated with the globals ...
[10:49:30.667] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.668] |  :  Packages: [1] ‘base’
[10:49:30.668] |  Search for packages associated with the globals ... DONE
[10:49:30.668] |  Packages after dropping 'base': [0] 
[10:49:30.668] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.668] |  packages: [0] 
[10:49:30.668] getGlobalsAndPackages() ... done
[10:49:30.668] run() for Future (‘Future’) ...
[10:49:30.669] |  state: ‘created’
[10:49:30.669] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.669] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.669] |  Using SequentialFutureBackend ...
[10:49:30.669] |  :  Launching futures ...
[10:49:30.669] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.669] |  :  .  |  getFutureData() ...
[10:49:30.669] |  :  .  |  :  getFutureCore() ...
[10:49:30.669] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.669] |  :  .  |  :  getFutureCore() ... done
[10:49:30.670] |  :  .  |  :  getFutureCapture() ...
[10:49:30.670] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.670] |  :  .  |  :  getFutureContext() ...
[10:49:30.670] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.670] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.670] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.670] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.670] |  :  .  |  :  getFutureContext() ... done
[10:49:30.670] |  :  .  |  getFutureData() ... done
[10:49:30.671] |  :  .  |  attachPackages() ...
[10:49:30.671] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.671] |  :  .  |  attachPackages() ... DONE
[10:49:30.671] |  :  .  |  attachPackages() ...
[10:49:30.671] |  :  .  |  :  packages: [n=0] 
[10:49:30.671] |  :  .  |  attachPackages() ... DONE
[10:49:30.671] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.671] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.672] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.672] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.672] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.672] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.672] |  :  .  |  :  .  |  New stack:
[10:49:30.672] |  :  .  |  :  .  |  List of 1
[10:49:30.672] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.672] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.672] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.672] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.672] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.672] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.672] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.674] |  :  .  |  :  .  |  Old stack:
[10:49:30.675] |  :  .  |  :  .  |  List of 1
[10:49:30.675] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.675] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.675] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.675] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.675] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.675] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.675] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.675] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.675] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.675] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.677] |  :  .  |  :  .  |  Not identical
[10:49:30.677] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.678] |  :  .  |  :  .  |  :  List of 2
[10:49:30.678] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.678] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.678] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.678] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.678] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.678] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.678] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.682] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.683] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.683] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.683] |  :  .  |  :  .  List of future strategies:
[10:49:30.683] |  :  .  |  :  .  1. sequential:
[10:49:30.683] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.683] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.683] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.684] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.684] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.684] |  :  .  |  assign_globals() ...
[10:49:30.684] |  :  .  |  List of 5
[10:49:30.684] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.684] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.684] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:30.684] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.684] |  :  .  |    ..$ : int [1:2, 1:3] 1 3 5 7 9 11
[10:49:30.684] |  :  .  |    ..$ : int [1:2, 1:3] 2 4 6 8 10 12
[10:49:30.684] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.684] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.684] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.684] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.684] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.684] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.684] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.684] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.684] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.684] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.684] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.684] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.689] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.689] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.689] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.690] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.690] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.690] |  :  .  |  assign_globals() ... done
[10:49:30.691] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.691] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.691] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.691] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.692] |  :  .  |  :  .  |  :  New stack:
[10:49:30.692] |  :  .  |  :  .  |  :  List of 1
[10:49:30.692] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.692] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.692] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.692] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.692] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.692] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.692] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.692] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.692] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.694] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.694] |  :  .  |  :  .  |  :  List of 1
[10:49:30.694] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.694] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.694] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.694] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.694] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.694] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.694] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.694] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.694] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.694] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.697] |  :  .  |  :  .  |  :  Identical
[10:49:30.697] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.697] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.698] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.698] |  :  .  |  :  .  |  1. sequential:
[10:49:30.698] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.698] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.698] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.698] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.698] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.698] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.698] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.698] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.699] |  :  Launching futures ... done
[10:49:30.699] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.699] |  Using SequentialFutureBackend ... done
[10:49:30.699] run() for Future (‘SequentialFuture’) ... done
[10:49:30.699] Created future:
[10:49:30.699] SequentialFuture:
[10:49:30.699] Label: ‘future_apply-1’
[10:49:30.699] Expression:
[10:49:30.699] {
[10:49:30.699]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.699]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.699]     "# as a global variable                                         "
[10:49:30.699]     do.call(function(...) {
[10:49:30.699]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.699]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.699]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.699]             on.exit(options(oopts), add = TRUE)
[10:49:30.699]         }
[10:49:30.699]         {
[10:49:30.699]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.699]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.699]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.699]             })
[10:49:30.699]         }
[10:49:30.699]     }, args = future.call.arguments)
[10:49:30.699] }
[10:49:30.699] Lazy evaluation: FALSE
[10:49:30.699] Asynchronous evaluation: TRUE
[10:49:30.699] Local evaluation: TRUE
[10:49:30.699] Environment: R_GlobalEnv
[10:49:30.699] Capture standard output: TRUE
[10:49:30.699] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.699] Immediate condition classes: ‘immediateCondition’
[10:49:30.699] Globals: 5 objects totaling 510 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 162 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.699] Packages: <none>
[10:49:30.699] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.699] Resolved: TRUE
[10:49:30.699] Value: 162 bytes of class ‘list’
[10:49:30.699] Early signaling: FALSE
[10:49:30.699] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.699] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.701] Chunk #1 of 1 ... DONE
[10:49:30.701] Launching 1 futures (chunks) ... DONE
[10:49:30.701] Resolving 1 futures (chunks) ...
[10:49:30.701] value() on list ...
[10:49:30.701] |  recursive: 0
[10:49:30.701] |  length: 1
[10:49:30.701] |  
[10:49:30.701] |  Number of remaining objects: 1
[10:49:30.701] |  checking value #1 ...
[10:49:30.702] |  :  'obj' is SequentialFuture
[10:49:30.702] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.702] |  :  .  state: ‘finished’
[10:49:30.702] |  :  .  run: TRUE
[10:49:30.702] |  :  .  result: ‘FutureResult’
[10:49:30.702] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.702] |  :  SequentialFuture #1
[10:49:30.702] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.702] |  :  .  nx: 1
[10:49:30.702] |  :  .  relay: TRUE
[10:49:30.703] |  :  .  stdout: TRUE
[10:49:30.703] |  :  .  signal: TRUE
[10:49:30.703] |  :  .  resignal: FALSE
[10:49:30.703] |  :  .  force: TRUE
[10:49:30.703] |  :  .  relayed: [n=1] FALSE
[10:49:30.703] |  :  .  queued futures: [n=1] FALSE
[10:49:30.703] |  :  .  until=1
[10:49:30.703] |  :  .  relaying element #1
[10:49:30.703] |  :  .  relayed: [n=1] TRUE
[10:49:30.703] |  :  .  queued futures: [n=1] TRUE
[10:49:30.703] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.704] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.704] |  :  .  value: <list>
[10:49:30.704] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.704] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.704] |  :  .  nx: 1
[10:49:30.704] |  :  .  relay: TRUE
[10:49:30.704] |  :  .  stdout: TRUE
[10:49:30.704] |  :  .  signal: TRUE
[10:49:30.704] |  :  .  resignal: FALSE
[10:49:30.704] |  :  .  force: TRUE
[10:49:30.704] |  :  .  relayed: [n=1] TRUE
[10:49:30.705] |  :  .  queued futures: [n=1] TRUE
[10:49:30.705] |  :  .  until=1
[10:49:30.705] |  :  .  relayed: [n=1] TRUE
[10:49:30.705] |  :  .  queued futures: [n=1] TRUE
[10:49:30.705] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.705] |  :  length: 0 (resolved future 1)
[10:49:30.705] |  checking value #1 ... done
[10:49:30.705] |  Relaying remaining futures ...
[10:49:30.705] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.705] |  :  .  nx: 1
[10:49:30.705] |  :  .  relay: TRUE
[10:49:30.706] |  :  .  stdout: TRUE
[10:49:30.706] |  :  .  signal: TRUE
[10:49:30.706] |  :  .  resignal: FALSE
[10:49:30.706] |  :  .  force: TRUE
[10:49:30.706] |  :  .  relayed: [n=1] TRUE
[10:49:30.706] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.706] |  :  .  relayed: [n=1] TRUE
[10:49:30.706] |  :  .  queued futures: [n=1] TRUE
[10:49:30.706] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.706] |  Relaying remaining futures ... done
[10:49:30.706] value() on list ... done
[10:49:30.706]  - Number of value chunks collected: 1
[10:49:30.707] Resolving 1 futures (chunks) ... DONE
[10:49:30.707] Reducing values from 1 chunks ...
[10:49:30.707]  - Number of values collected after concatenation: 2
[10:49:30.707]  - Number of values expected: 2
[10:49:30.707] Reducing values from 1 chunks ... DONE
[10:49:30.707] future_lapply() ... DONE
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
[4,]    7    8
[5,]    9   10
[6,]   11   12
- apply(X, ...) - not all same names ...
[10:49:30.707] getGlobalsAndPackagesXApply() ...
[10:49:30.707]  - future.globals: TRUE
[10:49:30.707] getGlobalsAndPackages() ...
[10:49:30.708] |  Searching for globals ...
[10:49:30.710] |  :  globals found: [10] ‘FUN’, ‘{’, ‘if’, ‘==’, ‘[’, ‘<-’, ‘names’, ‘names<-’, ‘letters’, ‘seq_along’
[10:49:30.710] |  Searching for globals ... DONE
[10:49:30.710] |  Resolving globals: FALSE
[10:49:30.710] |  Search for packages associated with the globals ...
[10:49:30.711] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.711] |  :  Packages: [1] ‘base’
[10:49:30.711] |  Search for packages associated with the globals ... DONE
[10:49:30.711] |  The total size of the 1 globals is 1.28 KiB (1311 bytes)
[10:49:30.712] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:4, dim = c(2L, 2L)))’) is 1.28 KiB There is one global: ‘FUN’ (1.28 KiB of class ‘function’)
[10:49:30.712] |  Packages after dropping 'base': [0] 
[10:49:30.712] |  globals: [1] ‘FUN’
[10:49:30.712] |  packages: [0] 
[10:49:30.712] getGlobalsAndPackages() ... done
[10:49:30.712]  - globals found/used: [n=1] ‘FUN’
[10:49:30.712]  - needed namespaces: [n=0] 
[10:49:30.712] Finding globals ... DONE
[10:49:30.712]  - use_args: TRUE
[10:49:30.712]  - Getting '...' globals ...
[10:49:30.713] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.713] |  recursive: 0
[10:49:30.713] |  length: 1
[10:49:30.713] |  elements: ‘...’
[10:49:30.713] |  'obj' is DotDotDotList
[10:49:30.713] |  resolve(obj, ...) ...
[10:49:30.713] |  resolve(obj, ...) ... done
[10:49:30.713] |  length: 0 (resolved future 1)
[10:49:30.714] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.714]    - '...' content: [n=0] 
[10:49:30.714] List of 1
[10:49:30.714]  $ ...: list()
[10:49:30.714]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.714]  - attr(*, "where")=List of 1
[10:49:30.714]   ..$ ...:<environment: 0x564d59b9c530> 
[10:49:30.714]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.714]  - attr(*, "resolved")= logi TRUE
[10:49:30.714]  - attr(*, "total_size")= num NA
[10:49:30.716]  - Getting '...' globals ... DONE
[10:49:30.716] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.716] List of 2
[10:49:30.716]  $ ...future.FUN:function (x)  
[10:49:30.716]  $ ...          : list()
[10:49:30.716]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.716]  - attr(*, "where")=List of 2
[10:49:30.716]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.716]   ..$ ...          :<environment: 0x564d59b9c530> 
[10:49:30.716]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.716]  - attr(*, "resolved")= logi FALSE
[10:49:30.716]  - attr(*, "total_size")= num 4449
[10:49:30.720] Packages to be attached in all futures: [n=0] 
[10:49:30.720] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.720] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.720] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.720] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.721] future_lapply() ...
[10:49:30.722] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.722] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.722] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.722] Number of chunks: 1
[10:49:30.722] getGlobalsAndPackagesXApply() ...
[10:49:30.723]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.723]  - use_args: TRUE
[10:49:30.723] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.723] List of 2
[10:49:30.723]  $ ...          : list()
[10:49:30.723]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.723]  $ ...future.FUN:function (x)  
[10:49:30.723]  - attr(*, "where")=List of 2
[10:49:30.723]   ..$ ...          :<environment: 0x564d59b9c530> 
[10:49:30.723]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:49:30.723]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.723]  - attr(*, "resolved")= logi FALSE
[10:49:30.723]  - attr(*, "total_size")= num NA
[10:49:30.726] Packages to be attached in all futures: [n=0] 
[10:49:30.726] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.726] Number of futures (= number of chunks): 1
[10:49:30.726] Launching 1 futures (chunks) ...
[10:49:30.726] Chunk #1 of 1 ...
[10:49:30.726]  - seeds: <none>
[10:49:30.726]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.726] getGlobalsAndPackages() ...
[10:49:30.727] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.727] |  Resolving globals: FALSE
[10:49:30.727] |  Tweak future expression to call with '...' arguments ...
[10:49:30.727] |  :  {
[10:49:30.727] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.727] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.727] |  :      "# as a global variable                                         "
[10:49:30.727] |  :      do.call(function(...) {
[10:49:30.727] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:30.727] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:30.727] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:30.727] |  :          "# anonymous function.                                          "
[10:49:30.727] |  :          "#                                                              "
[10:49:30.727] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:30.727] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:30.727] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:30.727] |  :          "# global environment, which is where globals are written.      "
[10:49:30.727] |  :          penv <- env <- environment(...future.FUN)
[10:49:30.727] |  :          repeat {
[10:49:30.727] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:30.727] |  :                  emptyenv())) 
[10:49:30.727] |  :                  break
[10:49:30.727] |  :              penv <- env
[10:49:30.727] |  :              env <- parent.env(env)
[10:49:30.727] |  :          }
[10:49:30.727] |  :          if (identical(penv, globalenv())) {
[10:49:30.727] |  :              environment(...future.FUN) <- environment()
[10:49:30.727] |  :          }
[10:49:30.727] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:30.727] |  :              !isNamespace(penv)) {
[10:49:30.727] |  :              parent.env(penv) <- environment()
[10:49:30.727] |  :          }
[10:49:30.727] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:30.727] |  :          {
[10:49:30.727] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.727] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.727] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.727] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:30.727] |  :              }
[10:49:30.727] |  :              {
[10:49:30.727] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.727] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.727] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:30.727] |  :                  })
[10:49:30.727] |  :              }
[10:49:30.727] |  :          }
[10:49:30.727] |  :      }, args = future.call.arguments)
[10:49:30.727] |  :  }
[10:49:30.727] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.727] |  Search for packages associated with the globals ...
[10:49:30.728] |  :  Packages associated with globals: [0] 
[10:49:30.728] |  :  Packages: [0] 
[10:49:30.728] |  Search for packages associated with the globals ... DONE
[10:49:30.728] |  Packages after dropping 'base': [0] 
[10:49:30.728] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.728] |  packages: [0] 
[10:49:30.728] getGlobalsAndPackages() ... done
[10:49:30.729] run() for Future (‘Future’) ...
[10:49:30.729] |  state: ‘created’
[10:49:30.729] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.729] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.729] |  Using SequentialFutureBackend ...
[10:49:30.729] |  :  Launching futures ...
[10:49:30.729] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.729] |  :  .  |  getFutureData() ...
[10:49:30.729] |  :  .  |  :  getFutureCore() ...
[10:49:30.729] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.730] |  :  .  |  :  getFutureCore() ... done
[10:49:30.730] |  :  .  |  :  getFutureCapture() ...
[10:49:30.730] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.730] |  :  .  |  :  getFutureContext() ...
[10:49:30.730] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.730] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.730] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.730] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.730] |  :  .  |  :  getFutureContext() ... done
[10:49:30.730] |  :  .  |  getFutureData() ... done
[10:49:30.731] |  :  .  |  attachPackages() ...
[10:49:30.731] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.731] |  :  .  |  attachPackages() ... DONE
[10:49:30.731] |  :  .  |  attachPackages() ...
[10:49:30.731] |  :  .  |  :  packages: [n=0] 
[10:49:30.731] |  :  .  |  attachPackages() ... DONE
[10:49:30.731] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.731] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.732] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.732] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.732] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.732] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.732] |  :  .  |  :  .  |  New stack:
[10:49:30.732] |  :  .  |  :  .  |  List of 1
[10:49:30.732] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.732] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.732] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.732] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.732] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.732] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.732] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.734] |  :  .  |  :  .  |  Old stack:
[10:49:30.735] |  :  .  |  :  .  |  List of 1
[10:49:30.735] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.735] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.735] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.735] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.735] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.735] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.735] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.735] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.735] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.735] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.738] |  :  .  |  :  .  |  Not identical
[10:49:30.738] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.738] |  :  .  |  :  .  |  :  List of 2
[10:49:30.738] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.738] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.738] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.738] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.738] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.738] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.738] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.743] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.743] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.743] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.743] |  :  .  |  :  .  List of future strategies:
[10:49:30.743] |  :  .  |  :  .  1. sequential:
[10:49:30.743] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.743] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.743] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.744] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.744] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.744] |  :  .  |  assign_globals() ...
[10:49:30.744] |  :  .  |  List of 5
[10:49:30.744] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.744] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.744] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:30.744] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.744] |  :  .  |    ..$ : int [1:2] 1 3
[10:49:30.744] |  :  .  |    ..$ : int [1:2] 2 4
[10:49:30.744] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:30.744] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.744] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.744] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.744] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.744] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.744] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.744] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.744] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.744] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.744] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.744] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.749] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.749] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:30.749] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.749] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.749] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.749] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.749] |  :  .  |  assign_globals() ... done
[10:49:30.751] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.751] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.751] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.751] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.751] |  :  .  |  :  .  |  :  New stack:
[10:49:30.751] |  :  .  |  :  .  |  :  List of 1
[10:49:30.751] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.751] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.751] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.751] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.751] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.751] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.751] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.751] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.751] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.751] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.755] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.755] |  :  .  |  :  .  |  :  List of 1
[10:49:30.755] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.755] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.755] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.755] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.755] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.755] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.755] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.755] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.755] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.755] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.758] |  :  .  |  :  .  |  :  Identical
[10:49:30.758] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.758] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.758] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.758] |  :  .  |  :  .  |  1. sequential:
[10:49:30.758] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.758] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.758] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.759] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.759] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.759] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.759] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.759] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.759] |  :  Launching futures ... done
[10:49:30.759] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.760] |  Using SequentialFutureBackend ... done
[10:49:30.760] run() for Future (‘SequentialFuture’) ... done
[10:49:30.760] Created future:
[10:49:30.760] SequentialFuture:
[10:49:30.760] Label: ‘future_apply-1’
[10:49:30.760] Expression:
[10:49:30.760] {
[10:49:30.760]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.760]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.760]     "# as a global variable                                         "
[10:49:30.760]     do.call(function(...) {
[10:49:30.760]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:30.760]         "# without having an '...' argument. This means '...' is treated"
[10:49:30.760]         "# as a global variable. This may happen when FUN() is an       "
[10:49:30.760]         "# anonymous function.                                          "
[10:49:30.760]         "#                                                              "
[10:49:30.760]         "# If an anonymous function, we will make sure to restore the   "
[10:49:30.760]         "# function environment of FUN() to the calling environment.    "
[10:49:30.760]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:30.760]         "# global environment, which is where globals are written.      "
[10:49:30.760]         penv <- env <- environment(...future.FUN)
[10:49:30.760]         repeat {
[10:49:30.760]             if (identical(env, globalenv()) || identical(env, 
[10:49:30.760]                 emptyenv())) 
[10:49:30.760]                 break
[10:49:30.760]             penv <- env
[10:49:30.760]             env <- parent.env(env)
[10:49:30.760]         }
[10:49:30.760]         if (identical(penv, globalenv())) {
[10:49:30.760]             environment(...future.FUN) <- environment()
[10:49:30.760]         }
[10:49:30.760]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:30.760]             !isNamespace(penv)) {
[10:49:30.760]             parent.env(penv) <- environment()
[10:49:30.760]         }
[10:49:30.760]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:30.760]         {
[10:49:30.760]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.760]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.760]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.760]                 on.exit(options(oopts), add = TRUE)
[10:49:30.760]             }
[10:49:30.760]             {
[10:49:30.760]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.760]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.760]                   ...future.FUN(...future.X_jj, ...)
[10:49:30.760]                 })
[10:49:30.760]             }
[10:49:30.760]         }
[10:49:30.760]     }, args = future.call.arguments)
[10:49:30.760] }
[10:49:30.760] Lazy evaluation: FALSE
[10:49:30.760] Asynchronous evaluation: TRUE
[10:49:30.760] Local evaluation: TRUE
[10:49:30.760] Environment: R_GlobalEnv
[10:49:30.760] Capture standard output: TRUE
[10:49:30.760] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.760] Immediate condition classes: ‘immediateCondition’
[10:49:30.760] Globals: 5 objects totaling 1.50 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 1.28 KiB, list ‘...future.elements_ii’ of 63 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.760] Packages: <none>
[10:49:30.760] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.760] Resolved: TRUE
[10:49:30.760] Value: 114 bytes of class ‘list’
[10:49:30.760] Early signaling: FALSE
[10:49:30.760] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.760] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.761] Chunk #1 of 1 ... DONE
[10:49:30.761] Launching 1 futures (chunks) ... DONE
[10:49:30.761] Resolving 1 futures (chunks) ...
[10:49:30.761] value() on list ...
[10:49:30.761] |  recursive: 0
[10:49:30.761] |  length: 1
[10:49:30.761] |  
[10:49:30.761] |  Number of remaining objects: 1
[10:49:30.761] |  checking value #1 ...
[10:49:30.762] |  :  'obj' is SequentialFuture
[10:49:30.762] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.762] |  :  .  state: ‘finished’
[10:49:30.762] |  :  .  run: TRUE
[10:49:30.762] |  :  .  result: ‘FutureResult’
[10:49:30.762] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.762] |  :  SequentialFuture #1
[10:49:30.762] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.762] |  :  .  nx: 1
[10:49:30.762] |  :  .  relay: TRUE
[10:49:30.762] |  :  .  stdout: TRUE
[10:49:30.763] |  :  .  signal: TRUE
[10:49:30.763] |  :  .  resignal: FALSE
[10:49:30.763] |  :  .  force: TRUE
[10:49:30.763] |  :  .  relayed: [n=1] FALSE
[10:49:30.763] |  :  .  queued futures: [n=1] FALSE
[10:49:30.763] |  :  .  until=1
[10:49:30.763] |  :  .  relaying element #1
[10:49:30.763] |  :  .  relayed: [n=1] TRUE
[10:49:30.763] |  :  .  queued futures: [n=1] TRUE
[10:49:30.763] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.763] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.764] |  :  .  value: <list>
[10:49:30.764] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.764] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.764] |  :  .  nx: 1
[10:49:30.764] |  :  .  relay: TRUE
[10:49:30.764] |  :  .  stdout: TRUE
[10:49:30.764] |  :  .  signal: TRUE
[10:49:30.764] |  :  .  resignal: FALSE
[10:49:30.764] |  :  .  force: TRUE
[10:49:30.764] |  :  .  relayed: [n=1] TRUE
[10:49:30.764] |  :  .  queued futures: [n=1] TRUE
[10:49:30.765] |  :  .  until=1
[10:49:30.765] |  :  .  relayed: [n=1] TRUE
[10:49:30.765] |  :  .  queued futures: [n=1] TRUE
[10:49:30.765] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.765] |  :  length: 0 (resolved future 1)
[10:49:30.765] |  checking value #1 ... done
[10:49:30.765] |  Relaying remaining futures ...
[10:49:30.765] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.765] |  :  .  nx: 1
[10:49:30.765] |  :  .  relay: TRUE
[10:49:30.765] |  :  .  stdout: TRUE
[10:49:30.765] |  :  .  signal: TRUE
[10:49:30.766] |  :  .  resignal: FALSE
[10:49:30.766] |  :  .  force: TRUE
[10:49:30.766] |  :  .  relayed: [n=1] TRUE
[10:49:30.766] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.766] |  :  .  relayed: [n=1] TRUE
[10:49:30.766] |  :  .  queued futures: [n=1] TRUE
[10:49:30.766] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.766] |  Relaying remaining futures ... done
[10:49:30.766] value() on list ... done
[10:49:30.766]  - Number of value chunks collected: 1
[10:49:30.766] Resolving 1 futures (chunks) ... DONE
[10:49:30.767] Reducing values from 1 chunks ...
[10:49:30.767]  - Number of values collected after concatenation: 2
[10:49:30.767]  - Number of values expected: 2
[10:49:30.767] Reducing values from 1 chunks ... DONE
[10:49:30.767] future_lapply() ... DONE
     [,1] [,2]
[1,]    1    2
[2,]    3    4
- example(future_apply) - reproducible RNG ...
[10:49:30.767] getGlobalsAndPackagesXApply() ...
[10:49:30.767]  - future.globals: TRUE
[10:49:30.767] getGlobalsAndPackages() ...
[10:49:30.767] |  Searching for globals ...
[10:49:30.772] |  :  globals found: [13] ‘FUN’, ‘{’, ‘if’, ‘&&’, ‘==’, ‘length’, ‘is.numeric’, ‘is.finite’, ‘>=’, ‘missing’, ‘<-’, ‘sample.int’, ‘[’
[10:49:30.773] |  Searching for globals ... DONE
[10:49:30.773] |  Resolving globals: FALSE
[10:49:30.773] |  Search for packages associated with the globals ...
[10:49:30.773] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.773] |  :  Packages: [1] ‘base’
[10:49:30.774] |  Search for packages associated with the globals ... DONE
[10:49:30.774] |  The total size of the 1 globals is 3.66 KiB (3746 bytes)
[10:49:30.774] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:4, dim = c(2L, 2L)))’) is 3.66 KiB There is one global: ‘FUN’ (3.66 KiB of class ‘function’)
[10:49:30.774] |  Packages after dropping 'base': [0] 
[10:49:30.774] |  globals: [1] ‘FUN’
[10:49:30.774] |  packages: [0] 
[10:49:30.774] getGlobalsAndPackages() ... done
[10:49:30.775]  - globals found/used: [n=1] ‘FUN’
[10:49:30.775]  - needed namespaces: [n=0] 
[10:49:30.775] Finding globals ... DONE
[10:49:30.775]  - use_args: TRUE
[10:49:30.775]  - Getting '...' globals ...
[10:49:30.775] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.775] |  recursive: 0
[10:49:30.775] |  length: 1
[10:49:30.776] |  elements: ‘...’
[10:49:30.776] |  'obj' is DotDotDotList
[10:49:30.776] |  resolve(obj, ...) ...
[10:49:30.776] |  resolve(obj, ...) ... done
[10:49:30.776] |  length: 0 (resolved future 1)
[10:49:30.776] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.776]    - '...' content: [n=0] 
[10:49:30.776] List of 1
[10:49:30.776]  $ ...: list()
[10:49:30.776]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.776]  - attr(*, "where")=List of 1
[10:49:30.776]   ..$ ...:<environment: 0x564d5bcf2048> 
[10:49:30.776]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.776]  - attr(*, "resolved")= logi TRUE
[10:49:30.776]  - attr(*, "total_size")= num NA
[10:49:30.779]  - Getting '...' globals ... DONE
[10:49:30.779] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.779] List of 2
[10:49:30.779]  $ ...future.FUN:function (x, size, replace = FALSE, prob = NULL)  
[10:49:30.779]  $ ...          : list()
[10:49:30.779]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.779]  - attr(*, "where")=List of 2
[10:49:30.779]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.779]   ..$ ...          :<environment: 0x564d5bcf2048> 
[10:49:30.779]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.779]  - attr(*, "resolved")= logi FALSE
[10:49:30.779]  - attr(*, "total_size")= num 9424
[10:49:30.782] Packages to be attached in all futures: [n=0] 
[10:49:30.782] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.782] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.782] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.782] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.782] future_lapply() ...
[10:49:30.785] Generating random seeds ...
[10:49:30.785] Generating random seed streams for 2 elements ...
[10:49:30.785] Generating random seed streams for 2 elements ... DONE
[10:49:30.785] Generating random seeds ... DONE
[10:49:30.785] Will set RNG state on exit: 10407, -705062337, -121614730, 923661366, 715253602, -1943614814, -2030175701
[10:49:30.785] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.785] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.786] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.786] Number of chunks: 1
[10:49:30.786] getGlobalsAndPackagesXApply() ...
[10:49:30.786]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.786]  - use_args: TRUE
[10:49:30.786] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.786] List of 2
[10:49:30.786]  $ ...          : list()
[10:49:30.786]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.786]  $ ...future.FUN:function (x, size, replace = FALSE, prob = NULL)  
[10:49:30.786]  - attr(*, "where")=List of 2
[10:49:30.786]   ..$ ...          :<environment: 0x564d5bcf2048> 
[10:49:30.786]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.786]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.786]  - attr(*, "resolved")= logi FALSE
[10:49:30.786]  - attr(*, "total_size")= num NA
[10:49:30.790] Packages to be attached in all futures: [n=0] 
[10:49:30.790] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.791] Number of futures (= number of chunks): 1
[10:49:30.791] Launching 1 futures (chunks) ...
[10:49:30.791] Chunk #1 of 1 ...
[10:49:30.791]  - seeds: [2] <seeds>
[10:49:30.791]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.791] getGlobalsAndPackages() ...
[10:49:30.791] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.791] |  Resolving globals: FALSE
[10:49:30.791] |  Tweak future expression to call with '...' arguments ...
[10:49:30.792] |  :  {
[10:49:30.792] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.792] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.792] |  :      "# as a global variable                                         "
[10:49:30.792] |  :      do.call(function(...) {
[10:49:30.792] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.792] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.792] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.792] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.792] |  :          }
[10:49:30.792] |  :          {
[10:49:30.792] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.792] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.792] |  :                  assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:30.792] |  :                    envir = globalenv(), inherits = FALSE)
[10:49:30.792] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.792] |  :              })
[10:49:30.792] |  :          }
[10:49:30.792] |  :      }, args = future.call.arguments)
[10:49:30.792] |  :  }
[10:49:30.792] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.792] |  Search for packages associated with the globals ...
[10:49:30.792] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.793] |  :  Packages: [1] ‘base’
[10:49:30.793] |  Search for packages associated with the globals ... DONE
[10:49:30.793] |  Packages after dropping 'base': [0] 
[10:49:30.793] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.793] |  packages: [0] 
[10:49:30.793] getGlobalsAndPackages() ... done
[10:49:30.793] run() for Future (‘Future’) ...
[10:49:30.793] |  state: ‘created’
[10:49:30.794] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.794] |  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.794] |  Using SequentialFutureBackend ...
[10:49:30.794] |  :  Launching futures ...
[10:49:30.794] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ...
[10:49:30.794] |  :  .  |  getFutureData() ...
[10:49:30.794] |  :  .  |  :  getFutureCore() ...
[10:49:30.794] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.794] |  :  .  |  :  getFutureCore() ... done
[10:49:30.794] |  :  .  |  :  getFutureCapture() ...
[10:49:30.795] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.795] |  :  .  |  :  getFutureContext() ...
[10:49:30.795] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.795] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.795] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.795] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.795] |  :  .  |  :  getFutureContext() ... done
[10:49:30.795] |  :  .  |  getFutureData() ... done
[10:49:30.795] |  :  .  |  attachPackages() ...
[10:49:30.795] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.796] |  :  .  |  attachPackages() ... DONE
[10:49:30.796] |  :  .  |  attachPackages() ...
[10:49:30.796] |  :  .  |  :  packages: [n=0] 
[10:49:30.796] |  :  .  |  attachPackages() ... DONE
[10:49:30.796] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.796] |  :  .  |  :  Getting full stack: [n=1] ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.796] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.797] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.797] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.797] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.797] |  :  .  |  :  .  |  New stack:
[10:49:30.797] |  :  .  |  :  .  |  List of 1
[10:49:30.797] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.797] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.797] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.797] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.797] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.797] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.797] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.799] |  :  .  |  :  .  |  Old stack:
[10:49:30.799] |  :  .  |  :  .  |  List of 1
[10:49:30.799] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.799] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.799] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.799] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.799] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.799] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.799] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.799] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.799] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.799] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.802] |  :  .  |  :  .  |  Not identical
[10:49:30.802] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:30.802] |  :  .  |  :  .  |  :  List of 2
[10:49:30.802] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.802] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.802] |  :  .  |  :  .  |  :   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.802] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.802] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.802] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.802] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.807] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:30.807] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:30.807] |  :  .  |  :  .  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.807] |  :  .  |  :  .  List of future strategies:
[10:49:30.807] |  :  .  |  :  .  1. sequential:
[10:49:30.807] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.807] |  :  .  |  :  .     - tweaked: FALSE
[10:49:30.807] |  :  .  |  :  .     - call: plan(sequential)
[10:49:30.808] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.808] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.808] |  :  .  |  assign_globals() ...
[10:49:30.808] |  :  .  |  List of 5
[10:49:30.808] |  :  .  |   $ future.call.arguments    : list()
[10:49:30.808] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.808] |  :  .  |   $ ...future.FUN            :function (x, size, replace = FALSE, prob = NULL)  
[10:49:30.808] |  :  .  |   $ ...future.elements_ii    :List of 2
[10:49:30.808] |  :  .  |    ..$ : int [1:2] 1 3
[10:49:30.808] |  :  .  |    ..$ : int [1:2] 2 4
[10:49:30.808] |  :  .  |   $ ...future.seeds_ii       :List of 2
[10:49:30.808] |  :  .  |    ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:49:30.808] |  :  .  |    ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:49:30.808] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:30.808] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:30.808] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:30.808] |  :  .  |   - attr(*, "where")=List of 5
[10:49:30.808] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:30.808] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:30.808] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:30.808] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:30.808] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:30.808] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.808] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:30.815] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:30.815] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:30.815] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:30.815] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:30.815] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:30.815] |  :  .  |  assign_globals() ... done
[10:49:30.817] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.817] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.817] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.817] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:30.817] |  :  .  |  :  .  |  :  New stack:
[10:49:30.817] |  :  .  |  :  .  |  :  List of 1
[10:49:30.817] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.817] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.817] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.817] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.817] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.817] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.817] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.817] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.817] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.817] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.820] |  :  .  |  :  .  |  :  Old stack:
[10:49:30.820] |  :  .  |  :  .  |  :  List of 1
[10:49:30.820] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.820] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.820] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.820] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.820] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.820] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:30.820] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.820] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.820] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.820] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.823] |  :  .  |  :  .  |  :  Identical
[10:49:30.823] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:30.823] |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.823] |  :  .  |  :  .  |  List of future strategies:
[10:49:30.823] |  :  .  |  :  .  |  1. sequential:
[10:49:30.823] |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.823] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:30.823] |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:30.824] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:30.824] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.824] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:30.824] |  :  .  |  SequentialFuture started (and completed)
[10:49:30.824] |  :  .  launchFuture() for ‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’ ... DONE
[10:49:30.824] |  :  Launching futures ... done
[10:49:30.824] |  :  Future launched: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.824] |  Using SequentialFutureBackend ... done
[10:49:30.825] run() for Future (‘SequentialFuture’) ... done
[10:49:30.825] Created future:
[10:49:30.825] SequentialFuture:
[10:49:30.825] Label: ‘future_apply-1’
[10:49:30.825] Expression:
[10:49:30.825] {
[10:49:30.825]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.825]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.825]     "# as a global variable                                         "
[10:49:30.825]     do.call(function(...) {
[10:49:30.825]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.825]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.825]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.825]             on.exit(options(oopts), add = TRUE)
[10:49:30.825]         }
[10:49:30.825]         {
[10:49:30.825]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.825]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.825]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:30.825]                   envir = globalenv(), inherits = FALSE)
[10:49:30.825]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.825]             })
[10:49:30.825]         }
[10:49:30.825]     }, args = future.call.arguments)
[10:49:30.825] }
[10:49:30.825] Lazy evaluation: FALSE
[10:49:30.825] Asynchronous evaluation: TRUE
[10:49:30.825] Local evaluation: TRUE
[10:49:30.825] Environment: R_GlobalEnv
[10:49:30.825] Capture standard output: TRUE
[10:49:30.825] Capture condition classes: <none>
[10:49:30.825] Globals: 5 objects totaling 3.95 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 3.66 KiB, list ‘...future.elements_ii’ of 63 bytes, list ‘...future.seeds_ii’ of 103 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.825] Packages: <none>
[10:49:30.825] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:49:30.825] Resolved: TRUE
[10:49:30.825] Value: 63 bytes of class ‘list’
[10:49:30.825] Early signaling: FALSE
[10:49:30.825] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.825] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’
[10:49:30.825] Chunk #1 of 1 ... DONE
[10:49:30.826] Launching 1 futures (chunks) ... DONE
[10:49:30.826] Resolving 1 futures (chunks) ...
[10:49:30.826] value() on list ...
[10:49:30.826] |  recursive: 0
[10:49:30.826] |  length: 1
[10:49:30.826] |  
[10:49:30.826] |  Number of remaining objects: 1
[10:49:30.826] |  checking value #1 ...
[10:49:30.826] |  :  'obj' is SequentialFuture
[10:49:30.826] |  :  resolved() for ‘SequentialFuture’ ...
[10:49:30.826] |  :  .  state: ‘finished’
[10:49:30.827] |  :  .  run: TRUE
[10:49:30.827] |  :  .  result: ‘FutureResult’
[10:49:30.827] |  :  resolved() for ‘SequentialFuture’ ... done
[10:49:30.827] |  :  SequentialFuture #1
[10:49:30.827] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.827] |  :  .  nx: 1
[10:49:30.828] |  :  .  relay: TRUE
[10:49:30.828] |  :  .  stdout: TRUE
[10:49:30.828] |  :  .  signal: TRUE
[10:49:30.828] |  :  .  resignal: FALSE
[10:49:30.828] |  :  .  force: TRUE
[10:49:30.828] |  :  .  relayed: [n=1] FALSE
[10:49:30.828] |  :  .  queued futures: [n=1] FALSE
[10:49:30.829] |  :  .  until=1
[10:49:30.829] |  :  .  relaying element #1
[10:49:30.829] |  :  .  relayed: [n=1] TRUE
[10:49:30.829] |  :  .  queued futures: [n=1] TRUE
[10:49:30.829] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.829] |  :  value(<SequentialFuture>, ...) ...
[10:49:30.829] |  :  .  value: <list>
[10:49:30.829] |  :  value(<SequentialFuture>, ...) ... done
[10:49:30.829] |  :  signalConditionsASAP(SequentialFuture, pos=1) ...
[10:49:30.829] |  :  .  nx: 1
[10:49:30.830] |  :  .  relay: TRUE
[10:49:30.830] |  :  .  stdout: TRUE
[10:49:30.830] |  :  .  signal: TRUE
[10:49:30.830] |  :  .  resignal: FALSE
[10:49:30.830] |  :  .  force: TRUE
[10:49:30.830] |  :  .  relayed: [n=1] TRUE
[10:49:30.830] |  :  .  queued futures: [n=1] TRUE
[10:49:30.830] |  :  .  until=1
[10:49:30.830] |  :  .  relayed: [n=1] TRUE
[10:49:30.830] |  :  .  queued futures: [n=1] TRUE
[10:49:30.830] |  :  signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:49:30.831] |  :  length: 0 (resolved future 1)
[10:49:30.831] |  checking value #1 ... done
[10:49:30.831] |  Relaying remaining futures ...
[10:49:30.831] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:30.831] |  :  .  nx: 1
[10:49:30.831] |  :  .  relay: TRUE
[10:49:30.831] |  :  .  stdout: TRUE
[10:49:30.831] |  :  .  signal: TRUE
[10:49:30.831] |  :  .  resignal: FALSE
[10:49:30.831] |  :  .  force: TRUE
[10:49:30.831] |  :  .  relayed: [n=1] TRUE
[10:49:30.831] |  :  .  queued futures: [n=1] TRUE
 - flush all
[10:49:30.832] |  :  .  relayed: [n=1] TRUE
[10:49:30.832] |  :  .  queued futures: [n=1] TRUE
[10:49:30.832] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:30.832] |  Relaying remaining futures ... done
[10:49:30.832] value() on list ... done
[10:49:30.832]  - Number of value chunks collected: 1
[10:49:30.832] Resolving 1 futures (chunks) ... DONE
[10:49:30.832] Reducing values from 1 chunks ...
[10:49:30.832]  - Number of values collected after concatenation: 2
[10:49:30.832]  - Number of values expected: 2
[10:49:30.832] Reducing values from 1 chunks ... DONE
[10:49:30.833] future_lapply() ... DONE
     [,1] [,2]
[1,]    3    2
[2,]    1    4
[10:49:30.833] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.833] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:30.833] |  :  all.equal() for FutureStrategyList ...
[10:49:30.833] |  :  .  New stack:
[10:49:30.833] |  :  .  List of 1
[10:49:30.833] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.833] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.833] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.833] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.833] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.833] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:30.833] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.835] |  :  .  Old stack:
[10:49:30.835] |  :  .  List of 1
[10:49:30.835] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.835] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.835] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.835] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.835] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.835] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:30.835] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.835] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.835] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.835] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.838] |  :  .  Not identical
[10:49:30.838] |  :  .  all.equal() for future ...
[10:49:30.838] |  :  .  |  List of 2
[10:49:30.838] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.838] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.838] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.838] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.838] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.838] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.838] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.838] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.838] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.838] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.838] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.838] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.838] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.838] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.838] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.843] |  :  .  all.equal() for future ... done
[10:49:30.843] |  :  all.equal() for FutureStrategyList ... done
[10:49:30.843] |  :  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:30.843] |  :  List of future strategies:
[10:49:30.843] |  :  1. sequential:
[10:49:30.843] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:30.843] |  :     - tweaked: FALSE
[10:49:30.843] |  :     - call: plan(sequential)
[10:49:30.843] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:30.843] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:49:30.844] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.844] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:30.844] |  :  all.equal() for FutureStrategyList ...
[10:49:30.844] |  :  .  New stack:
[10:49:30.844] |  :  .  List of 1
[10:49:30.844] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:30.844] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:30.844] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:30.844] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:30.844] |  :  .      ...)  
[10:49:30.844] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.844] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.844] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:30.844] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.847] |  :  .  Old stack:
[10:49:30.847] |  :  .  List of 1
[10:49:30.847] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.847] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.847] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.847] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.847] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.847] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:30.847] |  :  .    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.847] |  :  .    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.847] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.847] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.850] |  :  .  Not identical
[10:49:30.850] |  :  .  all.equal() for future ...
[10:49:30.850] |  :  .  |  List of 2
[10:49:30.850] |  :  .  |   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:30.850] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:30.850] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:30.850] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:30.850] |  :  .  |      ...)  
[10:49:30.850] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.850] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.850] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:30.850] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.850] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.850] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.850] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.850] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.850] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:30.850] |  :  .  |    ..- attr(*, "backend")=Classes 'SequentialFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5c070bc0> 
[10:49:30.850] |  :  .  |    .. ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.850] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.855] |  :  .  |  Formals differ
[10:49:30.855] |  :  .  all.equal() for future ... done
[10:49:30.855] |  :  .  Future strategies differ at level 1
[10:49:30.855] |  :  all.equal() for FutureStrategyList ... done
[10:49:30.855] |  :  plan(): Setting new future strategy stack:
[10:49:30.855] |  :  List of future strategies:
[10:49:30.855] |  :  1. multicore:
[10:49:30.855] |  :     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:30.855] |  :     - tweaked: FALSE
[10:49:30.855] |  :     - call: plan(strategy)
[10:49:30.855] |  :  List of 1
[10:49:30.855] |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:30.855] |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:30.855] |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:30.855] |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:30.855] |  :      ...)  
[10:49:30.855] |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.855] |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.855] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:30.855] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.858] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:30.858] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.858] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:30.858] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.858] |  :  .  Legacy shutdown of cluster workers ...
[10:49:30.858] |  :  .  |  Stopping existing cluster ...
[10:49:30.858] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:30.858] |  :  .  |  Stopping existing cluster ... done
[10:49:30.859] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:30.859] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:30.859] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:30.859] |  :  .  function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:30.859] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:30.859] |  :  .   - attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:30.859] |  :  .   - attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:30.859] |  :  .      ...)  
[10:49:30.859] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.859] |  :  .   - attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.859] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:30.860] |  :  .  init: NULL
[10:49:30.861] |  :  plan(): plan_init() of ‘multicore’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:30.861] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.861] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:30.861] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.861] |  :  Backend function: <‘NULL’>
[10:49:30.863] |  :  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.863] |  :  plan(): nbrOfWorkers() = 2
[10:49:30.863] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:30.863] plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
- From example(apply) ...
[10:49:30.864] getGlobalsAndPackagesXApply() ...
[10:49:30.864]  - future.globals: TRUE
[10:49:30.864] getGlobalsAndPackages() ...
[10:49:30.865] |  Searching for globals ...
[10:49:30.902] |  :  globals found: [59] ‘FUN’, ‘if’, ‘==’, ‘c’, ‘list.names’, ‘{’, ‘<-’, ‘[’, ‘as.list’, ‘substitute’, ‘-’, ‘&&’, ‘length’, ‘is.list’, ‘!’, ‘is.null’, ‘names’, ‘return’, ‘seq_along’, ‘vapply’, ‘switch’, ‘+’, ‘is.symbol’, ‘as.character’, ‘deparse’, ‘[<-’, ‘missing’, ‘match’, ‘match.arg’, ‘!=’, ‘warning’, ‘list’, ‘[[’, ‘paste’, ‘stop’, ‘integer’, ‘for’, ‘is.factor’, ‘anyNA’, ‘options’, ‘on.exit’, ‘factor’, ‘(’, ‘||’, ‘levels’, ‘as.integer’, ‘which’, ‘is.na’, ‘is.na<-’, ‘>’, ‘prod’, ‘$’, ‘.Machine’, ‘*’, ‘names<-’, ‘array’, ‘tabulate’, ‘class’, ‘class<-’
[10:49:30.902] |  Searching for globals ... DONE
[10:49:30.902] |  Resolving globals: FALSE
[10:49:30.902] |  Search for packages associated with the globals ...
[10:49:30.903] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.904] |  :  Packages: [1] ‘base’
[10:49:30.904] |  Search for packages associated with the globals ... DONE
[10:49:30.904] |  The total size of the 1 globals is 31.30 KiB (32048 bytes)
[10:49:30.905] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 31.30 KiB There is one global: ‘FUN’ (31.30 KiB of class ‘function’)
[10:49:30.905] |  Packages after dropping 'base': [0] 
[10:49:30.905] |  globals: [1] ‘FUN’
[10:49:30.905] |  packages: [0] 
[10:49:30.905] getGlobalsAndPackages() ... done
[10:49:30.905]  - globals found/used: [n=1] ‘FUN’
[10:49:30.905]  - needed namespaces: [n=0] 
[10:49:30.905] Finding globals ... DONE
[10:49:30.906]  - use_args: TRUE
[10:49:30.906]  - Getting '...' globals ...
[10:49:30.906] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:30.906] |  recursive: 0
[10:49:30.906] |  length: 1
[10:49:30.906] |  elements: ‘...’
[10:49:30.906] |  'obj' is DotDotDotList
[10:49:30.907] |  resolve(obj, ...) ...
[10:49:30.907] |  resolve(obj, ...) ... done
[10:49:30.907] |  length: 0 (resolved future 1)
[10:49:30.907] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:30.907]    - '...' content: [n=0] 
[10:49:30.907] List of 1
[10:49:30.907]  $ ...: list()
[10:49:30.907]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.907]  - attr(*, "where")=List of 1
[10:49:30.907]   ..$ ...:<environment: 0x564d5bf96730> 
[10:49:30.907]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.907]  - attr(*, "resolved")= logi TRUE
[10:49:30.907]  - attr(*, "total_size")= num NA
[10:49:30.910]  - Getting '...' globals ... DONE
[10:49:30.910] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:30.910] List of 2
[10:49:30.910]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.910]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.910]  $ ...          : list()
[10:49:30.910]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.910]  - attr(*, "where")=List of 2
[10:49:30.910]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:30.910]   ..$ ...          :<environment: 0x564d5bf96730> 
[10:49:30.910]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.910]  - attr(*, "resolved")= logi FALSE
[10:49:30.910]  - attr(*, "total_size")= num 65963
[10:49:30.915] Packages to be attached in all futures: [n=0] 
[10:49:30.915] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.915] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.915] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:30.915] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.916] Backend function: <‘NULL’>
[10:49:30.926] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.927] future_lapply() ...
[10:49:30.964] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.964] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:30.964] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.964] Backend function: <‘NULL’>
[10:49:30.966] Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.967] Number of chunks: 2
[10:49:30.967] getGlobalsAndPackagesXApply() ...
[10:49:30.967]  - future.globals: <name-value list> with names ‘list()’
[10:49:30.967]  - use_args: TRUE
[10:49:30.967] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:30.967] List of 2
[10:49:30.967]  $ ...          : list()
[10:49:30.967]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:30.967]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:30.967]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:30.967]  - attr(*, "where")=List of 2
[10:49:30.967]   ..$ ...          :<environment: 0x564d5bf96730> 
[10:49:30.967]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:30.967]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:30.967]  - attr(*, "resolved")= logi FALSE
[10:49:30.967]  - attr(*, "total_size")= num NA
[10:49:30.971] Packages to be attached in all futures: [n=0] 
[10:49:30.971] getGlobalsAndPackagesXApply() ... DONE
[10:49:30.971] Number of futures (= number of chunks): 2
[10:49:30.971] Launching 2 futures (chunks) ...
[10:49:30.971] Chunk #1 of 2 ...
[10:49:30.971]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:30.971]  - seeds: <none>
[10:49:30.972]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.972] getGlobalsAndPackages() ...
[10:49:30.972] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.972] |  Resolving globals: FALSE
[10:49:30.972] |  Tweak future expression to call with '...' arguments ...
[10:49:30.972] |  :  {
[10:49:30.972] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.972] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:30.972] |  :      "# as a global variable                                         "
[10:49:30.972] |  :      do.call(function(...) {
[10:49:30.972] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.972] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.972] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.972] |  :              on.exit(options(oopts), add = TRUE)
[10:49:30.972] |  :          }
[10:49:30.972] |  :          {
[10:49:30.972] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.972] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.972] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:30.972] |  :              })
[10:49:30.972] |  :          }
[10:49:30.972] |  :      }, args = future.call.arguments)
[10:49:30.972] |  :  }
[10:49:30.972] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:30.973] |  Search for packages associated with the globals ...
[10:49:30.973] |  :  Packages associated with globals: [1] ‘base’
[10:49:30.973] |  :  Packages: [1] ‘base’
[10:49:30.973] |  Search for packages associated with the globals ... DONE
[10:49:30.973] |  Packages after dropping 'base': [0] 
[10:49:30.973] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:30.973] |  packages: [0] 
[10:49:30.974] getGlobalsAndPackages() ... done
[10:49:30.974] run() for Future (‘Future’) ...
[10:49:30.974] |  state: ‘created’
[10:49:30.974] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.974] |  :  makeFutureBackend(<multicore>) ...
[10:49:30.974] |  :  .  Backend function: <‘NULL’>
[10:49:30.976] |  :  .  Backend: <‘MulticoreFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:30.976] |  :  makeFutureBackend(<multicore>) ... done
[10:49:30.976] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.976] |  Using MulticoreFutureBackend ...
[10:49:30.976] |  :  Launching futures ...
[10:49:30.976] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:30.976] |  :  .  |  getFutureData() ...
[10:49:30.977] |  :  .  |  :  getFutureCore() ...
[10:49:30.977] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:30.977] |  :  .  |  :  getFutureCore() ... done
[10:49:30.977] |  :  .  |  :  getFutureCapture() ...
[10:49:30.977] |  :  .  |  :  getFutureCapture() ... done
[10:49:30.977] |  :  .  |  :  getFutureContext() ...
[10:49:30.977] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.977] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:30.977] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.977] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:30.977] |  :  .  |  :  getFutureContext() ... done
[10:49:30.978] |  :  .  |  getFutureData() ... done
[10:49:30.978] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:30.979] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:30.981] |  :  .  |  MulticoreFuture started
[10:49:30.981] |  :  .  |  attachPackages() ...
[10:49:30.982] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:30.982] |  :  Launching futures ... done
[10:49:30.982] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:30.982] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:30.982] |  Using MulticoreFutureBackend ... done
[10:49:30.982] |  :  .  |  attachPackages() ... DONE
[10:49:30.982] |  :  .  |  attachPackages() ...
[10:49:30.982] run() for Future (‘MulticoreFuture’) ... done
[10:49:30.983] |  :  .  |  :  packages: [n=0] 
[10:49:30.983] Created future:
[10:49:30.983] |  :  .  |  attachPackages() ... DONE
[10:49:30.984] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:30.984] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:30.984] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:30.985] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:30.985] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:30.985] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:30.985] |  :  .  |  :  .  |  New stack:
[10:49:30.985] |  :  .  |  :  .  |  List of 1
[10:49:30.985] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:30.985] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:30.985] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:30.985] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.985] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:30.985] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:30.985] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:30.996] |  :  .  |  :  .  |  Old stack:
[10:49:30.996] readImmediateCondition() ...
[10:49:30.996]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:30.996]  - Number of RDS files: 0
[10:49:30.997] readImmediateCondition() ... DONE
[10:49:30.983] MulticoreFuture:
[10:49:30.983] Label: ‘future_apply-1’
[10:49:30.983] Expression:
[10:49:30.983] {
[10:49:30.983]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:30.983]     "# expression in do.call(), because function called uses '...'  "
[10:49:30.983]     "# as a global variable                                         "
[10:49:30.983]     do.call(function(...) {
[10:49:30.983]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:30.983]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:30.983]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:30.983]             on.exit(options(oopts), add = TRUE)
[10:49:30.983]         }
[10:49:30.983]         {
[10:49:30.983]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:30.983]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:30.983]                 ...future.FUN(...future.X_jj, ...)
[10:49:30.983]             })
[10:49:30.983]         }
[10:49:30.983]     }, args = future.call.arguments)
[10:49:30.983] }
[10:49:30.983] Lazy evaluation: FALSE
[10:49:30.983] Asynchronous evaluation: TRUE
[10:49:30.983] Local evaluation: TRUE
[10:49:30.983] Environment: R_GlobalEnv
[10:49:30.983] Capture standard output: TRUE
[10:49:30.983] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:30.983] Immediate condition classes: ‘immediateCondition’
[10:49:30.983] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:30.983] Packages: <none>
[10:49:30.983] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:30.983] Resolved: FALSE
[10:49:30.983] Value: <not collected>
[10:49:30.983] Conditions captured: <none>
[10:49:30.983] Early signaling: FALSE
[10:49:30.983] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:30.983] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:30.997] Chunk #1 of 2 ... DONE
[10:49:30.997] Chunk #2 of 2 ...
[10:49:30.998]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:30.998]  - seeds: <none>
[10:49:30.998]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.000] getGlobalsAndPackages() ...
[10:49:31.001] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.001] |  Resolving globals: FALSE
[10:49:31.001] |  Tweak future expression to call with '...' arguments ...
[10:49:31.001] |  :  {
[10:49:31.001] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.001] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.001] |  :      "# as a global variable                                         "
[10:49:31.001] |  :      do.call(function(...) {
[10:49:31.001] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.001] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.001] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.001] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.001] |  :          }
[10:49:31.001] |  :          {
[10:49:31.001] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.001] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.001] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.001] |  :              })
[10:49:31.001] |  :          }
[10:49:31.001] |  :      }, args = future.call.arguments)
[10:49:31.001] |  :  }
[10:49:31.002] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.002] |  Search for packages associated with the globals ...
[10:49:30.996] |  :  .  |  :  .  |  List of 1
[10:49:30.996] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:30.996] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:30.996] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:30.996] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:30.996] |  :  .  |  :  .  |      ...)  
[10:49:30.996] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.996] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.996] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:30.996] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:30.996] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:30.996] |  :  .  |  :  .  |      ...)  
[10:49:30.996] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:30.996] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.002] |  :  .  |  :  .  |  Not identical
[10:49:31.003] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.003] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.003] |  :  Packages: [1] ‘base’
[10:49:31.003] |  Search for packages associated with the globals ... DONE
[10:49:31.004] |  Packages after dropping 'base': [0] 
[10:49:31.004] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.004] |  packages: [0] 
[10:49:31.004] getGlobalsAndPackages() ... done
[10:49:31.005] run() for Future (‘Future’) ...
[10:49:31.005] |  state: ‘created’
[10:49:31.005] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.005] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.006] |  Using MulticoreFutureBackend ...
[10:49:31.006] |  :  Launching futures ...
[10:49:31.006] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.006] |  :  .  |  getFutureData() ...
[10:49:31.006] |  :  .  |  :  getFutureCore() ...
[10:49:31.007] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.007] |  :  .  |  :  getFutureCore() ... done
[10:49:31.007] |  :  .  |  :  getFutureCapture() ...
[10:49:31.007] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.007] |  :  .  |  :  getFutureContext() ...
[10:49:31.007] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.007] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.008] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.008] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.008] |  :  .  |  :  getFutureContext() ... done
[10:49:31.008] |  :  .  |  getFutureData() ... done
[10:49:31.008] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.003] |  :  .  |  :  .  |  :  List of 2
[10:49:31.003] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.003] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.003] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.003] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.003] |  :  .  |  :  .  |  :      ...)  
[10:49:31.003] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.003] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.003] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.003] |  :  .  |  :  .  |  :      ...)  
[10:49:31.003] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.009] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.009] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.009] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.009] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.010] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.010] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.010] |  :  .  |  :  .  List of future strategies:
[10:49:31.010] |  :  .  |  :  .  1. sequential:
[10:49:31.010] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.010] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.010] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.010] |  :  .  |  :  .  List of 1
[10:49:31.010] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.010] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.010] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.010] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.010] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.010] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.010] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.013] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.013] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.013] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.013] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.014] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.014] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.014] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.014] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.014] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.014] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.014] |  :  .  |  MulticoreFuture started
[10:49:31.015] |  :  .  |  assign_globals() ...
[10:49:31.015] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.015] |  :  Launching futures ... done
[10:49:31.015] |  :  .  |  attachPackages() ...
[10:49:31.015] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.015] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.016] |  :  .  |  attachPackages() ... DONE
[10:49:31.016] |  Using MulticoreFutureBackend ... done
[10:49:31.016] |  :  .  |  attachPackages() ...
[10:49:31.016] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.016] |  :  .  |  :  packages: [n=0] 
[10:49:31.017] Created future:
[10:49:31.017] |  :  .  |  attachPackages() ... DONE
[10:49:31.018] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.018] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.019] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.019] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.020] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.020] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.020] |  :  .  |  :  .  |  New stack:
[10:49:31.015] |  :  .  |  List of 5
[10:49:31.015] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.015] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.015] |  :  .  |   $ ...future.FUN            :function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:31.015] |  :  .  |      "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:31.015] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.015] |  :  .  |    ..$ : num [1:4] 1 3 1 7
[10:49:31.015] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.015] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.015] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.015] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.015] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.015] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.015] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.015] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.015] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.015] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.015] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.015] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.022] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.022] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.023] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.023] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.023] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.023] |  :  .  |  assign_globals() ... done
[10:49:31.020] |  :  .  |  :  .  |  List of 1
[10:49:31.020] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.020] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.020] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.020] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.020] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.020] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.020] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.024] |  :  .  |  :  .  |  Old stack:
[10:49:31.025] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.025] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.025] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.026] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.026] |  :  .  |  :  .  |  :  New stack:
[10:49:31.026] |  :  .  |  :  .  |  :  List of 1
[10:49:31.026] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.026] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.026] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.026] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.026] |  :  .  |  :  .  |  :      ...)  
[10:49:31.026] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.026] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.026] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.026] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.026] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.026] |  :  .  |  :  .  |  :      ...)  
[10:49:31.026] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.026] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.029] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.025] |  :  .  |  :  .  |  List of 1
[10:49:31.025] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.025] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.025] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.025] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.025] |  :  .  |  :  .  |      ...)  
[10:49:31.025] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.025] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.025] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.025] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.025] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.025] |  :  .  |  :  .  |      ...)  
[10:49:31.025] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.025] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.030] |  :  .  |  :  .  |  Not identical
[10:49:31.030] readImmediateCondition() ...
[10:49:31.030] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.030]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.030]  - Number of RDS files: 0
[10:49:31.031] readImmediateCondition() ... DONE
[10:49:31.029] |  :  .  |  :  .  |  :  List of 1
[10:49:31.029] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.029] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.029] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.029] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.029] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.029] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.029] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.017] MulticoreFuture:
[10:49:31.017] Label: ‘future_apply-2’
[10:49:31.017] Expression:
[10:49:31.017] {
[10:49:31.017]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.017]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.017]     "# as a global variable                                         "
[10:49:31.017]     do.call(function(...) {
[10:49:31.017]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.017]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.017]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.017]             on.exit(options(oopts), add = TRUE)
[10:49:31.017]         }
[10:49:31.017]         {
[10:49:31.017]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.017]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.017]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.017]             })
[10:49:31.017]         }
[10:49:31.017]     }, args = future.call.arguments)
[10:49:31.017] }
[10:49:31.017] Lazy evaluation: FALSE
[10:49:31.017] Asynchronous evaluation: TRUE
[10:49:31.017] Local evaluation: TRUE
[10:49:31.017] Environment: R_GlobalEnv
[10:49:31.017] Capture standard output: TRUE
[10:49:31.017] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.017] Immediate condition classes: ‘immediateCondition’
[10:49:31.017] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.017] Packages: <none>
[10:49:31.017] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.017] Resolved: FALSE
[10:49:31.017] Value: <not collected>
[10:49:31.017] Conditions captured: <none>
[10:49:31.017] Early signaling: FALSE
[10:49:31.017] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.017] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.031] |  :  .  |  :  .  |  :  Not identical
[10:49:31.031] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.031] Chunk #2 of 2 ... DONE
[10:49:31.032] Launching 2 futures (chunks) ... DONE
[10:49:31.032] Resolving 2 futures (chunks) ...
[10:49:31.032] value() on list ...
[10:49:31.032] |  recursive: 0
[10:49:31.033] |  length: 2
[10:49:31.033] |  
[10:49:31.033] |  Number of remaining objects: 2
[10:49:31.033] |  checking value #1 ...
[10:49:31.033] |  :  'obj' is MulticoreFuture
[10:49:31.031] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.031] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.031] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.031] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.031] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.031] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.031] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.031] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.031] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.031] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.031] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.036] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.036] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.036] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.036] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.036] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.037] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.037] |  :  .  |  :  .  |  1. multicore:
[10:49:31.037] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.037] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.037] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.037] |  :  .  |  :  .  |  List of 1
[10:49:31.037] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.037] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.037] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.037] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.037] |  :  .  |  :  .  |      ...)  
[10:49:31.037] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.037] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.037] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.037] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.037] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.037] |  :  .  |  :  .  |      ...)  
[10:49:31.037] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.037] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.042] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.042] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.042] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.042] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.030] |  :  .  |  :  .  |  :  List of 2
[10:49:31.030] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.030] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.030] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.030] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.030] |  :  .  |  :  .  |  :      ...)  
[10:49:31.030] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.030] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.030] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.030] |  :  .  |  :  .  |  :      ...)  
[10:49:31.030] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.043] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.043] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.043] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.043] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.043] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.043] |  :  readImmediateCondition() ...
[10:49:31.044] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.044] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.044] |  :   - Number of RDS files: 0
[10:49:31.044] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.044] |  :  readImmediateCondition() ... DONE
[10:49:31.044] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.044] |  :  MulticoreFuture #1
[10:49:31.045] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.045] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.045] |  :  .  nx: 2
[10:49:31.045] |  :  .  relay: TRUE
[10:49:31.045] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.045] |  :  .  stdout: TRUE
[10:49:31.045] |  :  .  signal: TRUE
[10:49:31.046] |  :  .  resignal: FALSE
[10:49:31.046] |  :  .  force: TRUE
[10:49:31.046] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.046] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.046] |  :  .  until=1
[10:49:31.045] |  :  .  |  :  .  List of future strategies:
[10:49:31.045] |  :  .  |  :  .  1. sequential:
[10:49:31.045] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.045] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.045] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.047] |  :  .  relaying element #1
[10:49:31.049] |  :  .  result() for MulticoreFuture ...
[10:49:31.050] |  :  .  |  readImmediateCondition() ...
[10:49:31.050] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.051] |  :  .  |   - Number of RDS files: 0
[10:49:31.051] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.051] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.051] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.052] |  :  .  result() for MulticoreFuture ... done
[10:49:31.052] |  :  .  result() for MulticoreFuture ...
[10:49:31.047] |  :  .  |  :  .  List of 1
[10:49:31.047] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.047] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.047] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.047] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.047] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.047] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.047] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.052] |  :  .  result() for MulticoreFuture ... done
[10:49:31.052] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.052] |  :  .  result() for MulticoreFuture ...
[10:49:31.053] |  :  .  result() for MulticoreFuture ... done
[10:49:31.053] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.053] |  :  .  result() for MulticoreFuture ...
[10:49:31.053] |  :  .  result() for MulticoreFuture ... done
[10:49:31.053] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.053] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.053] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.053] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.053] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.054] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.054] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.054] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.054] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.054] |  :  .  result() for MulticoreFuture ...
[10:49:31.054] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.054] |  :  .  result() for MulticoreFuture ... done
[10:49:31.054] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.054] |  :  .  result() for MulticoreFuture ...
[10:49:31.055] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.055] |  :  .  result() for MulticoreFuture ... done
[10:49:31.055] |  :  .  value: <list>
[10:49:31.055] |  :  .  |  assign_globals() ...
[10:49:31.055] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.055] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.056] |  :  .  nx: 2
[10:49:31.056] |  :  .  relay: TRUE
[10:49:31.056] |  :  .  stdout: TRUE
[10:49:31.056] |  :  .  signal: TRUE
[10:49:31.056] |  :  .  resignal: FALSE
[10:49:31.056] |  :  .  force: TRUE
[10:49:31.057] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.057] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.057] |  :  .  until=2
[10:49:31.057] |  :  .  relaying element #2
[10:49:31.057] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.058] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.058] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.058] |  :  length: 1 (resolved future 1)
[10:49:31.058] |  checking value #1 ... done
[10:49:31.058] |  checking value #2 ...
[10:49:31.059] |  :  'obj' is MulticoreFuture
[10:49:31.055] |  :  .  |  List of 5
[10:49:31.055] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.055] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.055] |  :  .  |   $ ...future.FUN            :function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:31.055] |  :  .  |      "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:31.055] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.055] |  :  .  |    ..$ : num [1:4] 2 4 6 8
[10:49:31.055] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.055] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.055] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.055] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.055] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.055] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.055] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.055] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.055] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.055] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.055] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.055] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.062] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.062] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.062] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.062] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.063] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.063] |  :  .  |  assign_globals() ... done
[10:49:31.065] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.065] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.065] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.065] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.066] |  :  .  |  :  .  |  :  New stack:
[10:49:31.069] |  :  readImmediateCondition() ...
[10:49:31.069] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.069] |  :   - Number of RDS files: 0
[10:49:31.070] |  :  readImmediateCondition() ... DONE
[10:49:31.070] |  checking value #2 ... done
[10:49:31.066] |  :  .  |  :  .  |  :  List of 1
[10:49:31.066] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.066] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.066] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.066] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.066] |  :  .  |  :  .  |  :      ...)  
[10:49:31.066] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.066] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.066] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.066] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.066] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.066] |  :  .  |  :  .  |  :      ...)  
[10:49:31.066] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.066] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.071] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.071] |  :  .  |  :  .  |  :  List of 1
[10:49:31.071] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.071] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.071] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.071] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.071] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.071] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.071] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.074] |  :  .  |  :  .  |  :  Not identical
[10:49:31.074] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.074] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.074] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.074] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.074] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.074] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.074] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.074] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.074] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.074] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.074] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.074] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.079] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.079] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.079] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.079] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.079] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.079] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.079] |  :  .  |  :  .  |  1. multicore:
[10:49:31.079] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.079] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.079] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.080] |  Number of remaining objects: 1
[10:49:31.080] |  checking value #2 ...
[10:49:31.081] |  :  'obj' is MulticoreFuture
[10:49:31.080] |  :  .  |  :  .  |  List of 1
[10:49:31.080] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.080] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.080] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.080] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.080] |  :  .  |  :  .  |      ...)  
[10:49:31.080] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.080] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.080] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.080] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.080] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.080] |  :  .  |  :  .  |      ...)  
[10:49:31.080] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.080] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.083] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.083] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.083] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.083] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.083] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.083] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.084] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.084] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.084] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.084] |  :  readImmediateCondition() ...
[10:49:31.084] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.084] |  :   - Number of RDS files: 0
[10:49:31.085] |  :  readImmediateCondition() ... DONE
[10:49:31.086] |  :  MulticoreFuture #2
[10:49:31.087] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.087] |  :  .  nx: 2
[10:49:31.087] |  :  .  relay: TRUE
[10:49:31.087] |  :  .  stdout: TRUE
[10:49:31.087] |  :  .  signal: TRUE
[10:49:31.088] |  :  .  resignal: FALSE
[10:49:31.088] |  :  .  force: TRUE
[10:49:31.088] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.088] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.088] |  :  .  until=2
[10:49:31.088] |  :  .  relaying element #2
[10:49:31.089] |  :  .  result() for MulticoreFuture ...
[10:49:31.089] |  :  .  |  readImmediateCondition() ...
[10:49:31.089] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.090] |  :  .  |   - Number of RDS files: 0
[10:49:31.090] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.090] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.090] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.091] |  :  .  result() for MulticoreFuture ... done
[10:49:31.091] |  :  .  result() for MulticoreFuture ...
[10:49:31.091] |  :  .  result() for MulticoreFuture ... done
[10:49:31.092] |  :  .  result() for MulticoreFuture ...
[10:49:31.092] |  :  .  result() for MulticoreFuture ... done
[10:49:31.092] |  :  .  result() for MulticoreFuture ...
[10:49:31.092] |  :  .  result() for MulticoreFuture ... done
[10:49:31.093] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.093] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.093] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.093] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.093] |  :  .  result() for MulticoreFuture ...
[10:49:31.093] |  :  .  result() for MulticoreFuture ... done
[10:49:31.094] |  :  .  result() for MulticoreFuture ...
[10:49:31.094] |  :  .  result() for MulticoreFuture ... done
[10:49:31.094] |  :  .  value: <list>
[10:49:31.094] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.094] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.095] |  :  .  nx: 2
[10:49:31.095] |  :  .  relay: TRUE
[10:49:31.095] |  :  .  stdout: TRUE
[10:49:31.095] |  :  .  signal: TRUE
[10:49:31.095] |  :  .  resignal: FALSE
[10:49:31.095] |  :  .  force: TRUE
[10:49:31.095] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.095] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.095] |  :  .  until=2
[10:49:31.095] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.096] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.096] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.096] |  :  length: 0 (resolved future 2)
[10:49:31.096] |  checking value #2 ... done
[10:49:31.096] |  Relaying remaining futures ...
[10:49:31.096] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.096] |  :  .  nx: 2
[10:49:31.096] |  :  .  relay: TRUE
[10:49:31.097] |  :  .  stdout: TRUE
[10:49:31.097] |  :  .  signal: TRUE
[10:49:31.097] |  :  .  resignal: FALSE
[10:49:31.097] |  :  .  force: TRUE
[10:49:31.097] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.097] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.097] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.097] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.097] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.098] |  Relaying remaining futures ... done
[10:49:31.098] value() on list ... done
[10:49:31.098]  - Number of value chunks collected: 2
[10:49:31.098] Resolving 2 futures (chunks) ... DONE
[10:49:31.098] Reducing values from 2 chunks ...
[10:49:31.098]  - Number of values collected after concatenation: 2
[10:49:31.098]  - Number of values expected: 2
[10:49:31.098] Reducing values from 2 chunks ... DONE
[10:49:31.098] future_lapply() ... DONE
[[1]]
...future.X_jj
1 3 7 
2 1 1 

[[2]]
...future.X_jj
2 4 6 8 
1 1 1 1 

[10:49:31.099] getGlobalsAndPackagesXApply() ...
[10:49:31.099]  - future.globals: TRUE
[10:49:31.099] getGlobalsAndPackages() ...
[10:49:31.099] |  Searching for globals ...
[10:49:31.139] |  :  globals found: [59] ‘FUN’, ‘if’, ‘==’, ‘c’, ‘list.names’, ‘{’, ‘<-’, ‘[’, ‘as.list’, ‘substitute’, ‘-’, ‘&&’, ‘length’, ‘is.list’, ‘!’, ‘is.null’, ‘names’, ‘return’, ‘seq_along’, ‘vapply’, ‘switch’, ‘+’, ‘is.symbol’, ‘as.character’, ‘deparse’, ‘[<-’, ‘missing’, ‘match’, ‘match.arg’, ‘!=’, ‘warning’, ‘list’, ‘[[’, ‘paste’, ‘stop’, ‘integer’, ‘for’, ‘is.factor’, ‘anyNA’, ‘options’, ‘on.exit’, ‘factor’, ‘(’, ‘||’, ‘levels’, ‘as.integer’, ‘which’, ‘is.na’, ‘is.na<-’, ‘>’, ‘prod’, ‘$’, ‘.Machine’, ‘*’, ‘names<-’, ‘array’, ‘tabulate’, ‘class’, ‘class<-’
[10:49:31.140] |  Searching for globals ... DONE
[10:49:31.140] |  Resolving globals: FALSE
[10:49:31.140] |  Search for packages associated with the globals ...
[10:49:31.140] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.141] |  :  Packages: [1] ‘base’
[10:49:31.142] |  Search for packages associated with the globals ... DONE
[10:49:31.142] |  The total size of the 1 globals is 31.30 KiB (32048 bytes)
[10:49:31.142] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 31.30 KiB There is one global: ‘FUN’ (31.30 KiB of class ‘function’)
[10:49:31.142] |  Packages after dropping 'base': [0] 
[10:49:31.143] |  globals: [1] ‘FUN’
[10:49:31.143] |  packages: [0] 
[10:49:31.143] getGlobalsAndPackages() ... done
[10:49:31.143]  - globals found/used: [n=1] ‘FUN’
[10:49:31.143]  - needed namespaces: [n=0] 
[10:49:31.143] Finding globals ... DONE
[10:49:31.143]  - use_args: TRUE
[10:49:31.143]  - Getting '...' globals ...
[10:49:31.144] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:31.144] |  recursive: 0
[10:49:31.144] |  length: 1
[10:49:31.144] |  elements: ‘...’
[10:49:31.144] |  'obj' is DotDotDotList
[10:49:31.144] |  resolve(obj, ...) ...
[10:49:31.144] |  resolve(obj, ...) ... done
[10:49:31.144] |  length: 0 (resolved future 1)
[10:49:31.144] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:31.145]    - '...' content: [n=0] 
[10:49:31.145] List of 1
[10:49:31.145]  $ ...: list()
[10:49:31.145]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.145]  - attr(*, "where")=List of 1
[10:49:31.145]   ..$ ...:<environment: 0x564d5963c3f0> 
[10:49:31.145]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.145]  - attr(*, "resolved")= logi TRUE
[10:49:31.145]  - attr(*, "total_size")= num NA
[10:49:31.147]  - Getting '...' globals ... DONE
[10:49:31.148] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:31.148] List of 2
[10:49:31.148]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:31.148]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:31.148]  $ ...          : list()
[10:49:31.148]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.148]  - attr(*, "where")=List of 2
[10:49:31.148]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:31.148]   ..$ ...          :<environment: 0x564d5963c3f0> 
[10:49:31.148]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.148]  - attr(*, "resolved")= logi FALSE
[10:49:31.148]  - attr(*, "total_size")= num 65967
[10:49:31.150] Packages to be attached in all futures: [n=0] 
[10:49:31.151] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.151] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.151] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.151] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.151] future_lapply() ...
[10:49:31.189] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.189] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.189] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.190] Number of chunks: 2
[10:49:31.190] getGlobalsAndPackagesXApply() ...
[10:49:31.190]  - future.globals: <name-value list> with names ‘list()’
[10:49:31.190]  - use_args: TRUE
[10:49:31.190] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:31.190] List of 2
[10:49:31.190]  $ ...          : list()
[10:49:31.190]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.190]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:31.190]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:31.190]  - attr(*, "where")=List of 2
[10:49:31.190]   ..$ ...          :<environment: 0x564d5963c3f0> 
[10:49:31.190]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:31.190]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.190]  - attr(*, "resolved")= logi FALSE
[10:49:31.190]  - attr(*, "total_size")= num NA
[10:49:31.193] Packages to be attached in all futures: [n=0] 
[10:49:31.194] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.194] Number of futures (= number of chunks): 2
[10:49:31.194] Launching 2 futures (chunks) ...
[10:49:31.194] Chunk #1 of 2 ...
[10:49:31.194]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.194]  - seeds: <none>
[10:49:31.194]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.194] getGlobalsAndPackages() ...
[10:49:31.194] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.195] |  Resolving globals: FALSE
[10:49:31.195] |  Tweak future expression to call with '...' arguments ...
[10:49:31.195] |  :  {
[10:49:31.195] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.195] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.195] |  :      "# as a global variable                                         "
[10:49:31.195] |  :      do.call(function(...) {
[10:49:31.195] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.195] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.195] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.195] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.195] |  :          }
[10:49:31.195] |  :          {
[10:49:31.195] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.195] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.195] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.195] |  :              })
[10:49:31.195] |  :          }
[10:49:31.195] |  :      }, args = future.call.arguments)
[10:49:31.195] |  :  }
[10:49:31.195] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.195] |  Search for packages associated with the globals ...
[10:49:31.195] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.196] |  :  Packages: [1] ‘base’
[10:49:31.196] |  Search for packages associated with the globals ... DONE
[10:49:31.196] |  Packages after dropping 'base': [0] 
[10:49:31.196] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.196] |  packages: [0] 
[10:49:31.196] getGlobalsAndPackages() ... done
[10:49:31.196] run() for Future (‘Future’) ...
[10:49:31.196] |  state: ‘created’
[10:49:31.197] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.197] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.197] |  Using MulticoreFutureBackend ...
[10:49:31.197] |  :  Launching futures ...
[10:49:31.197] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.197] |  :  .  |  getFutureData() ...
[10:49:31.197] |  :  .  |  :  getFutureCore() ...
[10:49:31.197] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.197] |  :  .  |  :  getFutureCore() ... done
[10:49:31.197] |  :  .  |  :  getFutureCapture() ...
[10:49:31.198] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.198] |  :  .  |  :  getFutureContext() ...
[10:49:31.198] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.198] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.198] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.198] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.198] |  :  .  |  :  getFutureContext() ... done
[10:49:31.198] |  :  .  |  getFutureData() ... done
[10:49:31.199] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.199] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.202] |  :  .  |  MulticoreFuture started
[10:49:31.202] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.203] |  :  .  |  attachPackages() ...
[10:49:31.203] |  :  Launching futures ... done
[10:49:31.203] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.204] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.204] |  :  .  |  attachPackages() ... DONE
[10:49:31.204] |  Using MulticoreFutureBackend ... done
[10:49:31.205] |  :  .  |  attachPackages() ...
[10:49:31.205] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.205] |  :  .  |  :  packages: [n=0] 
[10:49:31.205] Created future:
[10:49:31.206] |  :  .  |  attachPackages() ... DONE
[10:49:31.207] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.207] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.208] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.208] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.209] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.209] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.210] |  :  .  |  :  .  |  New stack:
[10:49:31.210] |  :  .  |  :  .  |  List of 1
[10:49:31.210] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.210] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.210] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.210] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.210] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.210] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.210] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.216] |  :  .  |  :  .  |  Old stack:
[10:49:31.219] readImmediateCondition() ...
[10:49:31.219]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.220]  - Number of RDS files: 0
[10:49:31.220] readImmediateCondition() ... DONE
[10:49:31.206] MulticoreFuture:
[10:49:31.206] Label: ‘future_apply-1’
[10:49:31.206] Expression:
[10:49:31.206] {
[10:49:31.206]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.206]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.206]     "# as a global variable                                         "
[10:49:31.206]     do.call(function(...) {
[10:49:31.206]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.206]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.206]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.206]             on.exit(options(oopts), add = TRUE)
[10:49:31.206]         }
[10:49:31.206]         {
[10:49:31.206]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.206]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.206]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.206]             })
[10:49:31.206]         }
[10:49:31.206]     }, args = future.call.arguments)
[10:49:31.206] }
[10:49:31.206] Lazy evaluation: FALSE
[10:49:31.206] Asynchronous evaluation: TRUE
[10:49:31.206] Local evaluation: TRUE
[10:49:31.206] Environment: R_GlobalEnv
[10:49:31.206] Capture standard output: TRUE
[10:49:31.206] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.206] Immediate condition classes: ‘immediateCondition’
[10:49:31.206] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.206] Packages: <none>
[10:49:31.206] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.206] Resolved: FALSE
[10:49:31.206] Value: <not collected>
[10:49:31.206] Conditions captured: <none>
[10:49:31.206] Early signaling: FALSE
[10:49:31.206] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.206] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.221] Chunk #1 of 2 ... DONE
[10:49:31.216] |  :  .  |  :  .  |  List of 1
[10:49:31.216] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.216] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.216] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.216] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.216] |  :  .  |  :  .  |      ...)  
[10:49:31.216] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.216] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.216] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.216] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.216] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.216] |  :  .  |  :  .  |      ...)  
[10:49:31.216] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.216] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.221] Chunk #2 of 2 ...
[10:49:31.221] |  :  .  |  :  .  |  Not identical
[10:49:31.221] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.221]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.221]  - seeds: <none>
[10:49:31.221]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.222] getGlobalsAndPackages() ...
[10:49:31.222] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.222] |  Resolving globals: FALSE
[10:49:31.222] |  Tweak future expression to call with '...' arguments ...
[10:49:31.223] |  :  {
[10:49:31.223] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.223] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.223] |  :      "# as a global variable                                         "
[10:49:31.223] |  :      do.call(function(...) {
[10:49:31.223] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.223] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.223] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.223] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.223] |  :          }
[10:49:31.223] |  :          {
[10:49:31.223] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.223] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.223] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.223] |  :              })
[10:49:31.223] |  :          }
[10:49:31.223] |  :      }, args = future.call.arguments)
[10:49:31.223] |  :  }
[10:49:31.223] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.223] |  Search for packages associated with the globals ...
[10:49:31.224] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.225] |  :  Packages: [1] ‘base’
[10:49:31.225] |  Search for packages associated with the globals ... DONE
[10:49:31.225] |  Packages after dropping 'base': [0] 
[10:49:31.225] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.226] |  packages: [0] 
[10:49:31.226] getGlobalsAndPackages() ... done
[10:49:31.226] run() for Future (‘Future’) ...
[10:49:31.226] |  state: ‘created’
[10:49:31.221] |  :  .  |  :  .  |  :  List of 2
[10:49:31.221] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.221] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "[10:49:31.226] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
gc" "interrupts" ...
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.221] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.221] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.221] |  :  .  |  :  .  |  :      ...)  
[10:49:31.221] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.221] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.221] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.221] |  :  .  |  :  .  |  :      ...)  
[10:49:31.221] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.227] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.227] |  Using MulticoreFutureBackend ...
[10:49:31.227] |  :  Launching futures ...
[10:49:31.227] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.227] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.227] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.227] |  :  .  |  getFutureData() ...
[10:49:31.227] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.227] |  :  .  |  :  getFutureCore() ...
[10:49:31.227] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.227] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.228] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.228] |  :  .  |  :  getFutureCore() ... done
[10:49:31.228] |  :  .  |  :  getFutureCapture() ...
[10:49:31.228] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.228] |  :  .  |  :  getFutureContext() ...
[10:49:31.228] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.228] |  :  .  |  :  .  List of future strategies:
[10:49:31.228] |  :  .  |  :  .  1. sequential:
[10:49:31.228] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.228] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.228] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.228] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.228] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.228] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.229] |  :  .  |  :  getFutureContext() ... done
[10:49:31.229] |  :  .  |  getFutureData() ... done
[10:49:31.229] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.229] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.228] |  :  .  |  :  .  List of 1
[10:49:31.228] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.228] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.228] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.228] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.228] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.228] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.228] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.231] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.231] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.231] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.231] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.231] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.232] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.232] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.231] |  :  .  |  MulticoreFuture started
[10:49:31.232] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.232] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.232] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.232] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.232] |  :  Launching futures ... done
[10:49:31.232] |  :  .  |  attachPackages() ...
[10:49:31.232] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.233] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.233] |  Using MulticoreFutureBackend ... done
[10:49:31.233] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.233] |  :  .  |  attachPackages() ... DONE
[10:49:31.234] |  :  .  |  attachPackages() ...
[10:49:31.234] Created future:
[10:49:31.234] |  :  .  |  :  packages: [n=0] 
[10:49:31.234] |  :  .  |  attachPackages() ... DONE
[10:49:31.232] |  :  .  |  assign_globals() ...
[10:49:31.235] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.235] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.236] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.237] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.237] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.237] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.237] |  :  .  |  :  .  |  New stack:
[10:49:31.234] |  :  .  |  List of 5
[10:49:31.234] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.234] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.234] |  :  .  |   $ ...future.FUN            :function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:31.234] |  :  .  |      "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:31.234] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.234] |  :  .  |    ..$ : num [1:4] 1 3 1 7
[10:49:31.234] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.234] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.234] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.234] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.234] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.234] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.234] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.234] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.234] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.234] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.234] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.234] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.240] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.241] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.241] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.241] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.241] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.241] |  :  .  |  assign_globals() ... done
[10:49:31.238] |  :  .  |  :  .  |  List of 1
[10:49:31.238] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.238] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.238] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.238] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.238] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.238] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.238] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.243] |  :  .  |  :  .  |  Old stack:
[10:49:31.243] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.243] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.244] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.244] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.244] |  :  .  |  :  .  |  :  New stack:
[10:49:31.244] |  :  .  |  :  .  |  :  List of 1
[10:49:31.244] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.244] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.244] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.244] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.244] |  :  .  |  :  .  |  :      ...)  
[10:49:31.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.244] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.244] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.244] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.244] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.244] |  :  .  |  :  .  |  :      ...)  
[10:49:31.244] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.244] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.247] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.247] readImmediateCondition() ...
[10:49:31.247]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.248]  - Number of RDS files: 0
[10:49:31.248] readImmediateCondition() ... DONE
[10:49:31.243] |  :  .  |  :  .  |  List of 1
[10:49:31.243] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.243] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.243] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.243] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.243] |  :  .  |  :  .  |      ...)  
[10:49:31.243] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.243] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.243] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.243] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.243] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.243] |  :  .  |  :  .  |      ...)  
[10:49:31.243] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.243] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.248] |  :  .  |  :  .  |  Not identical
[10:49:31.234] MulticoreFuture:
[10:49:31.234] Label: ‘future_apply-2’
[10:49:31.234] Expression:
[10:49:31.234] {
[10:49:31.234]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.234]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.234]     "# as a global variable                                         "
[10:49:31.234]     do.call(function(...) {
[10:49:31.234]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.234]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.234]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.234]             on.exit(options(oopts), add = TRUE)
[10:49:31.234]         }
[10:49:31.234]         {
[10:49:31.234]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.234]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.234]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.234]             })
[10:49:31.234]         }
[10:49:31.234]     }, args = future.call.arguments)
[10:49:31.234] }
[10:49:31.234] Lazy evaluation: FALSE
[10:49:31.234] Asynchronous evaluation: TRUE
[10:49:31.234] Local evaluation: TRUE
[10:49:31.234] Environment: R_GlobalEnv
[10:49:31.234] Capture standard output: TRUE
[10:49:31.234] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.234] Immediate condition classes: ‘immediateCondition’
[10:49:31.234] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.234] Packages: <none>
[10:49:31.234] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.234] Resolved: FALSE
[10:49:31.234] Value: <not collected>
[10:49:31.234] Conditions captured: <none>
[10:49:31.234] Early signaling: FALSE
[10:49:31.234] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.234] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.248] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.249] Chunk #2 of 2 ... DONE
[10:49:31.249] Launching 2 futures (chunks) ... DONE
[10:49:31.247] |  :  .  |  :  .  |  :  List of 1
[10:49:31.247] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.247] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.247] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.247] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.247] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.247] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.247] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.249] Resolving 2 futures (chunks) ...
[10:49:31.249] |  :  .  |  :  .  |  :  Not identical
[10:49:31.249] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.249] value() on list ...
[10:49:31.250] |  recursive: 0
[10:49:31.250] |  length: 2
[10:49:31.250] |  
[10:49:31.250] |  Number of remaining objects: 2
[10:49:31.250] |  checking value #1 ...
[10:49:31.251] |  :  'obj' is MulticoreFuture
[10:49:31.249] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.249] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.249] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.249] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.249] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.249] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.249] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.249] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.249] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.249] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.249] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.256] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.256] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.256] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.256] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.256] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.256] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.256] |  :  .  |  :  .  |  1. multicore:
[10:49:31.256] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.256] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.256] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.257] |  :  .  |  :  .  |  List of 1
[10:49:31.257] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.257] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.257] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.257] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.257] |  :  .  |  :  .  |      ...)  
[10:49:31.257] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.257] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.257] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.257] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.257] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.257] |  :  .  |  :  .  |      ...)  
[10:49:31.257] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.257] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.260] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.260] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.260] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.260] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.260] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.249] |  :  .  |  :  .  |  :  List of 2
[10:49:31.249] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.249] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.249] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.249] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.249] |  :  .  |  :  .  |  :      ...)  
[10:49:31.249] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.249] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.249] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.249] |  :  .  |  :  .  |  :      ...)  
[10:49:31.249] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.261] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.261] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.261] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.261] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.261] |  :  readImmediateCondition() ...
[10:49:31.261] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.261] |  :   - Number of RDS files: 0
[10:49:31.262] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.262] |  :  readImmediateCondition() ... DONE
[10:49:31.262] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.262] |  checking value #1 ... done
[10:49:31.262] |  checking value #2 ...
[10:49:31.262] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.262] |  :  'obj' is MulticoreFuture
[10:49:31.262] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.262] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.263] |  :  .  |  :  .  List of future strategies:
[10:49:31.263] |  :  .  |  :  .  1. sequential:
[10:49:31.263] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.263] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.263] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.264] |  :  .  |  :  .  List of 1
[10:49:31.264] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.264] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.264] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.264] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.264] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.264] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.264] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.268] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.268] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.268] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.268] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.269] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.269] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.269] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.269] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.269] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.269] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.270] |  :  .  |  assign_globals() ...
[10:49:31.273] |  :  readImmediateCondition() ...
[10:49:31.273] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.273] |  :   - Number of RDS files: 0
[10:49:31.273] |  :  readImmediateCondition() ... DONE
[10:49:31.274] |  checking value #2 ... done
[10:49:31.270] |  :  .  |  List of 5
[10:49:31.270] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.270] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.270] |  :  .  |   $ ...future.FUN            :function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:31.270] |  :  .  |      "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:31.270] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.270] |  :  .  |    ..$ : num [1:4] 2 4 6 8
[10:49:31.270] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.270] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.270] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.270] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.270] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.270] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.270] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.270] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.270] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.270] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.270] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.270] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.276] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.276] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.276] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.276] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.276] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.276] |  :  .  |  assign_globals() ... done
[10:49:31.279] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.279] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.279] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.279] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.279] |  :  .  |  :  .  |  :  New stack:
[10:49:31.279] |  :  .  |  :  .  |  :  List of 1
[10:49:31.279] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.279] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.279] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.279] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.279] |  :  .  |  :  .  |  :      ...)  
[10:49:31.279] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.279] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.279] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.279] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.279] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.279] |  :  .  |  :  .  |  :      ...)  
[10:49:31.279] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.279] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.284] |  Number of remaining objects: 2
[10:49:31.284] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.284] |  checking value #1 ...
[10:49:31.284] |  :  'obj' is MulticoreFuture
[10:49:31.285] |  :  readImmediateCondition() ...
[10:49:31.285] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.285] |  :   - Number of RDS files: 0
[10:49:31.285] |  :  readImmediateCondition() ... DONE
[10:49:31.286] |  :  MulticoreFuture #1
[10:49:31.286] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.286] |  :  .  nx: 2
[10:49:31.286] |  :  .  relay: TRUE
[10:49:31.286] |  :  .  stdout: TRUE
[10:49:31.287] |  :  .  signal: TRUE
[10:49:31.287] |  :  .  resignal: FALSE
[10:49:31.287] |  :  .  force: TRUE
[10:49:31.287] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.287] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.288] |  :  .  until=1
[10:49:31.288] |  :  .  relaying element #1
[10:49:31.284] |  :  .  |  :  .  |  :  List of 1
[10:49:31.284] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.284] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.284] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.284] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.284] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.284] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.288] |  :  .  result() for MulticoreFuture ...
[10:49:31.288] |  :  .  |  :  .  |  :  Not identical
[10:49:31.288] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.289] |  :  .  |  readImmediateCondition() ...
[10:49:31.289] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.289] |  :  .  |   - Number of RDS files: 0
[10:49:31.290] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.290] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.290] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.290] |  :  .  result() for MulticoreFuture ... done
[10:49:31.291] |  :  .  result() for MulticoreFuture ...
[10:49:31.291] |  :  .  result() for MulticoreFuture ... done
[10:49:31.291] |  :  .  result() for MulticoreFuture ...
[10:49:31.291] |  :  .  result() for MulticoreFuture ... done
[10:49:31.292] |  :  .  result() for MulticoreFuture ...
[10:49:31.292] |  :  .  result() for MulticoreFuture ... done
[10:49:31.292] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.292] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.293] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.293] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.293] |  :  .  result() for MulticoreFuture ...
[10:49:31.293] |  :  .  result() for MulticoreFuture ... done
[10:49:31.293] |  :  .  result() for MulticoreFuture ...
[10:49:31.294] |  :  .  result() for MulticoreFuture ... done
[10:49:31.294] |  :  .  value: <list>
[10:49:31.294] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.294] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.295] |  :  .  nx: 2
[10:49:31.295] |  :  .  relay: TRUE
[10:49:31.295] |  :  .  stdout: TRUE
[10:49:31.295] |  :  .  signal: TRUE
[10:49:31.295] |  :  .  resignal: FALSE
[10:49:31.295] |  :  .  force: TRUE
[10:49:31.296] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.288] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.288] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.288] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.288] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.288] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.288] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.288] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.288] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.288] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.288] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.288] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.296] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.296] |  :  .  until=2
[10:49:31.296] |  :  .  relaying element #2
[10:49:31.296] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.296] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.297] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.297] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.297] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.297] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.297] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.297] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.297] |  :  length: 1 (resolved future 1)
[10:49:31.297] |  checking value #1 ... done
[10:49:31.297] |  checking value #2 ...
[10:49:31.297] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.297] |  :  .  |  :  .  |  1. multicore:
[10:49:31.297] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.297] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.297] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.298] |  :  'obj' is MulticoreFuture
[10:49:31.298] |  :  .  |  :  .  |  List of 1
[10:49:31.298] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.298] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.298] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.298] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.298] |  :  .  |  :  .  |      ...)  
[10:49:31.298] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.298] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.298] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.298] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.298] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.298] |  :  .  |  :  .  |      ...)  
[10:49:31.298] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.298] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.301] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.301] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.301] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.301] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.301] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.302] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.302] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.302] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.302] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.302] |  :  readImmediateCondition() ...
[10:49:31.302] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.304] |  :   - Number of RDS files: 0
[10:49:31.305] |  :  readImmediateCondition() ... DONE
[10:49:31.305] |  :  MulticoreFuture #2
[10:49:31.305] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.305] |  :  .  nx: 2
[10:49:31.305] |  :  .  relay: TRUE
[10:49:31.306] |  :  .  stdout: TRUE
[10:49:31.306] |  :  .  signal: TRUE
[10:49:31.306] |  :  .  resignal: FALSE
[10:49:31.306] |  :  .  force: TRUE
[10:49:31.306] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.306] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.307] |  :  .  until=2
[10:49:31.307] |  :  .  relaying element #2
[10:49:31.307] |  :  .  result() for MulticoreFuture ...
[10:49:31.307] |  :  .  |  readImmediateCondition() ...
[10:49:31.308] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.308] |  :  .  |   - Number of RDS files: 0
[10:49:31.308] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.308] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.309] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.309] |  :  .  result() for MulticoreFuture ... done
[10:49:31.309] |  :  .  result() for MulticoreFuture ...
[10:49:31.309] |  :  .  result() for MulticoreFuture ... done
[10:49:31.310] |  :  .  result() for MulticoreFuture ...
[10:49:31.310] |  :  .  result() for MulticoreFuture ... done
[10:49:31.310] |  :  .  result() for MulticoreFuture ...
[10:49:31.310] |  :  .  result() for MulticoreFuture ... done
[10:49:31.310] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.311] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.311] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.311] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.311] |  :  .  result() for MulticoreFuture ...
[10:49:31.312] |  :  .  result() for MulticoreFuture ... done
[10:49:31.312] |  :  .  result() for MulticoreFuture ...
[10:49:31.312] |  :  .  result() for MulticoreFuture ... done
[10:49:31.312] |  :  .  value: <list>
[10:49:31.312] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.313] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.313] |  :  .  nx: 2
[10:49:31.313] |  :  .  relay: TRUE
[10:49:31.313] |  :  .  stdout: TRUE
[10:49:31.313] |  :  .  signal: TRUE
[10:49:31.313] |  :  .  resignal: FALSE
[10:49:31.313] |  :  .  force: TRUE
[10:49:31.313] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.314] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.314] |  :  .  until=2
[10:49:31.314] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.314] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.314] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.314] |  :  length: 0 (resolved future 2)
[10:49:31.314] |  checking value #2 ... done
[10:49:31.314] |  Relaying remaining futures ...
[10:49:31.315] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.315] |  :  .  nx: 2
[10:49:31.315] |  :  .  relay: TRUE
[10:49:31.315] |  :  .  stdout: TRUE
[10:49:31.315] |  :  .  signal: TRUE
[10:49:31.315] |  :  .  resignal: FALSE
[10:49:31.315] |  :  .  force: TRUE
[10:49:31.315] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.315] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.315] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.316] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.316] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.316] |  Relaying remaining futures ... done
[10:49:31.316] value() on list ... done
[10:49:31.316]  - Number of value chunks collected: 2
[10:49:31.316] Resolving 2 futures (chunks) ... DONE
[10:49:31.316] Reducing values from 2 chunks ...
[10:49:31.316]  - Number of values collected after concatenation: 2
[10:49:31.316]  - Number of values expected: 2
[10:49:31.316] Reducing values from 2 chunks ... DONE
[10:49:31.317] future_lapply() ... DONE
[[1]]
...future.X_jj
1 3 7 
2 1 1 

[[2]]
...future.X_jj
2 4 6 8 
1 1 1 1 

[10:49:31.317] getGlobalsAndPackagesXApply() ...
[10:49:31.318]  - future.globals: TRUE
[10:49:31.318] getGlobalsAndPackages() ...
[10:49:31.318] |  Searching for globals ...
[10:49:31.319] |  :  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:31.319] |  Searching for globals ... DONE
[10:49:31.319] |  Resolving globals: FALSE
[10:49:31.320] |  Search for packages associated with the globals ...
[10:49:31.320] |  :  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:31.320] |  :  Packages: [2] ‘stats’, ‘base’
[10:49:31.320] |  Search for packages associated with the globals ... DONE
[10:49:31.320] |  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:31.321] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:31.321] |  Packages after dropping 'base': [1] ‘stats’
[10:49:31.321] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:31.321] |  globals: [1] ‘FUN’
[10:49:31.321] |  packages: [1] ‘stats’
[10:49:31.321] getGlobalsAndPackages() ... done
[10:49:31.321]  - globals found/used: [n=1] ‘FUN’
[10:49:31.322]  - needed namespaces: [n=1] ‘stats’
[10:49:31.322] Finding globals ... DONE
[10:49:31.322]  - use_args: TRUE
[10:49:31.322]  - Getting '...' globals ...
[10:49:31.322] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:31.322] |  recursive: 0
[10:49:31.322] |  length: 1
[10:49:31.323] |  elements: ‘...’
[10:49:31.323] |  'obj' is DotDotDotList
[10:49:31.323] |  resolve(obj, ...) ...
[10:49:31.323] |  resolve(obj, ...) ... done
[10:49:31.323] |  length: 0 (resolved future 1)
[10:49:31.323] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:31.323]    - '...' content: [n=0] 
[10:49:31.323] List of 1
[10:49:31.323]  $ ...: list()
[10:49:31.323]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.323]  - attr(*, "where")=List of 1
[10:49:31.323]   ..$ ...:<environment: 0x564d597e2c40> 
[10:49:31.323]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.323]  - attr(*, "resolved")= logi TRUE
[10:49:31.323]  - attr(*, "total_size")= num NA
[10:49:31.326]  - Getting '...' globals ... DONE
[10:49:31.326] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:31.326] List of 2
[10:49:31.326]  $ ...future.FUN:function (x, ...)  
[10:49:31.326]  $ ...          : list()
[10:49:31.326]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.326]  - attr(*, "where")=List of 2
[10:49:31.326]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:31.326]   ..$ ...          :<environment: 0x564d597e2c40> 
[10:49:31.326]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.326]  - attr(*, "resolved")= logi FALSE
[10:49:31.326]  - attr(*, "total_size")= num 2586
[10:49:31.330] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:31.331] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.331] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.331] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.331] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.331] future_lapply() ...
[10:49:31.332] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.332] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.332] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.333] Number of chunks: 2
[10:49:31.333] getGlobalsAndPackagesXApply() ...
[10:49:31.333]  - future.globals: <name-value list> with names ‘list()’
[10:49:31.333]  - use_args: TRUE
[10:49:31.333] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:31.333] List of 2
[10:49:31.333]  $ ...          : list()
[10:49:31.333]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.333]  $ ...future.FUN:function (x, ...)  
[10:49:31.333]  - attr(*, "where")=List of 2
[10:49:31.333]   ..$ ...          :<environment: 0x564d597e2c40> 
[10:49:31.333]   ..$ ...future.FUN:<environment: namespace:stats> 
[10:49:31.333]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.333]  - attr(*, "resolved")= logi FALSE
[10:49:31.333]  - attr(*, "total_size")= num NA
[10:49:31.336] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:31.336] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.337] Number of futures (= number of chunks): 2
[10:49:31.337] Launching 2 futures (chunks) ...
[10:49:31.337] Chunk #1 of 2 ...
[10:49:31.337]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.337]  - seeds: <none>
[10:49:31.337]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.337] getGlobalsAndPackages() ...
[10:49:31.337] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.337] |  Resolving globals: FALSE
[10:49:31.338] |  Tweak future expression to call with '...' arguments ...
[10:49:31.338] |  :  {
[10:49:31.338] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.338] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.338] |  :      "# as a global variable                                         "
[10:49:31.338] |  :      do.call(function(...) {
[10:49:31.338] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.338] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.338] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.338] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.338] |  :          }
[10:49:31.338] |  :          {
[10:49:31.338] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.338] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.338] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.338] |  :              })
[10:49:31.338] |  :          }
[10:49:31.338] |  :      }, args = future.call.arguments)
[10:49:31.338] |  :  }
[10:49:31.338] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.338] |  Search for packages associated with the globals ...
[10:49:31.338] |  :  Packages associated with globals: [1] ‘stats’
[10:49:31.339] |  :  Packages: [1] ‘stats’
[10:49:31.339] |  Search for packages associated with the globals ... DONE
[10:49:31.339] |  Packages after dropping 'base': [1] ‘stats’
[10:49:31.339] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:31.339] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.339] |  packages: [1] ‘stats’
[10:49:31.339] getGlobalsAndPackages() ... done
[10:49:31.340] run() for Future (‘Future’) ...
[10:49:31.340] |  state: ‘created’
[10:49:31.340] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.340] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.340] |  Using MulticoreFutureBackend ...
[10:49:31.340] |  :  Launching futures ...
[10:49:31.340] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.340] |  :  .  |  getFutureData() ...
[10:49:31.341] |  :  .  |  :  getFutureCore() ...
[10:49:31.341] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:31.341] |  :  .  |  :  getFutureCore() ... done
[10:49:31.341] |  :  .  |  :  getFutureCapture() ...
[10:49:31.341] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.341] |  :  .  |  :  getFutureContext() ...
[10:49:31.341] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.341] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.341] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.341] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.342] |  :  .  |  :  getFutureContext() ... done
[10:49:31.342] |  :  .  |  getFutureData() ... done
[10:49:31.342] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.342] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.344] |  :  .  |  MulticoreFuture started
[10:49:31.344] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.345] |  :  Launching futures ... done
[10:49:31.345] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.345] |  :  .  |  attachPackages() ...
[10:49:31.345] |  Using MulticoreFutureBackend ... done
[10:49:31.345] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.345] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.345] Created future:
[10:49:31.346] |  :  .  |  attachPackages() ... DONE
[10:49:31.346] |  :  .  |  attachPackages() ...
[10:49:31.346] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:31.346] |  :  .  |  attachPackages() ... DONE
[10:49:31.347] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.347] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.347] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.348] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.348] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.348] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.349] |  :  .  |  :  .  |  New stack:
[10:49:31.349] |  :  .  |  :  .  |  List of 1
[10:49:31.349] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.349] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.349] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.349] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.349] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.349] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.349] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.353] |  :  .  |  :  .  |  Old stack:
[10:49:31.357] readImmediateCondition() ...
[10:49:31.357]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.358]  - Number of RDS files: 0
[10:49:31.358] readImmediateCondition() ... DONE
[10:49:31.346] MulticoreFuture:
[10:49:31.346] Label: ‘future_apply-1’
[10:49:31.346] Expression:
[10:49:31.346] {
[10:49:31.346]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.346]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.346]     "# as a global variable                                         "
[10:49:31.346]     do.call(function(...) {
[10:49:31.346]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.346]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.346]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.346]             on.exit(options(oopts), add = TRUE)
[10:49:31.346]         }
[10:49:31.346]         {
[10:49:31.346]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.346]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.346]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.346]             })
[10:49:31.346]         }
[10:49:31.346]     }, args = future.call.arguments)
[10:49:31.346] }
[10:49:31.346] Lazy evaluation: FALSE
[10:49:31.346] Asynchronous evaluation: TRUE
[10:49:31.346] Local evaluation: TRUE
[10:49:31.346] Environment: R_GlobalEnv
[10:49:31.346] Capture standard output: TRUE
[10:49:31.346] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.346] Immediate condition classes: ‘immediateCondition’
[10:49:31.346] Globals: 5 objects totaling 545 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 311 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.346] Packages: 1 packages (‘stats’)
[10:49:31.346] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.346] Resolved: FALSE
[10:49:31.346] Value: <not collected>
[10:49:31.346] Conditions captured: <none>
[10:49:31.346] Early signaling: FALSE
[10:49:31.346] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.346] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.359] Chunk #1 of 2 ... DONE
[10:49:31.359] Chunk #2 of 2 ...
[10:49:31.359]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.359]  - seeds: <none>
[10:49:31.359]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.359] getGlobalsAndPackages() ...
[10:49:31.360] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.360] |  Resolving globals: FALSE
[10:49:31.360] |  Tweak future expression to call with '...' arguments ...
[10:49:31.360] |  :  {
[10:49:31.360] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.360] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.360] |  :      "# as a global variable                                         "
[10:49:31.360] |  :      do.call(function(...) {
[10:49:31.360] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.360] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.360] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.360] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.360] |  :          }
[10:49:31.360] |  :          {
[10:49:31.360] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.360] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.360] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.360] |  :              })
[10:49:31.360] |  :          }
[10:49:31.360] |  :      }, args = future.call.arguments)
[10:49:31.360] |  :  }
[10:49:31.361] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.361] |  Search for packages associated with the globals ...
[10:49:31.361] |  :  Packages associated with globals: [1] ‘stats’
[10:49:31.362] |  :  Packages: [1] ‘stats’
[10:49:31.362] |  Search for packages associated with the globals ... DONE
[10:49:31.362] |  Packages after dropping 'base': [1] ‘stats’
[10:49:31.362] |  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:31.362] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.363] |  packages: [1] ‘stats’
[10:49:31.363] getGlobalsAndPackages() ... done
[10:49:31.363] run() for Future (‘Future’) ...
[10:49:31.363] |  state: ‘created’
[10:49:31.363] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.364] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.364] |  Using MulticoreFutureBackend ...
[10:49:31.364] |  :  Launching futures ...
[10:49:31.353] |  :  .  |  :  .  |  List of 1
[10:49:31.353] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.353] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.353] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.353] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.353] |  :  .  |  :  .  |      ...)  
[10:49:31.353] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.353] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.353] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.353] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.353] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.353] |  :  .  |  :  .  |      ...)  
[10:49:31.353] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.353] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.364] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.364] |  :  .  |  :  .  |  Not identical
[10:49:31.364] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.364] |  :  .  |  getFutureData() ...
[10:49:31.366] |  :  .  |  :  getFutureCore() ...
[10:49:31.366] |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:31.367] |  :  .  |  :  getFutureCore() ... done
[10:49:31.367] |  :  .  |  :  getFutureCapture() ...
[10:49:31.367] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.367] |  :  .  |  :  getFutureContext() ...
[10:49:31.368] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.368] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.368] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.368] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.369] |  :  .  |  :  getFutureContext() ... done
[10:49:31.369] |  :  .  |  getFutureData() ... done
[10:49:31.369] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.370] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.364] |  :  .  |  :  .  |  :  List of 2
[10:49:31.364] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.364] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.364] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.364] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.364] |  :  .  |  :  .  |  :      ...)  
[10:49:31.364] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.364] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.364] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.364] |  :  .  |  :  .  |  :      ...)  
[10:49:31.364] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.372] |  :  .  |  MulticoreFuture started
[10:49:31.373] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.373] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.373] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.373] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.373] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.373] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.373] |  :  .  |  attachPackages() ...
[10:49:31.373] |  :  Launching futures ... done
[10:49:31.373] |  :  .  |  :  .  List of future strategies:
[10:49:31.373] |  :  .  |  :  .  1. sequential:
[10:49:31.373] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.373] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.373] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.373] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.374] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.375] |  :  .  |  attachPackages() ... DONE
[10:49:31.375] |  Using MulticoreFutureBackend ... done
[10:49:31.375] |  :  .  |  attachPackages() ...
[10:49:31.375] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.376] |  :  .  |  :  packages: [n=1] ‘stats’
[10:49:31.376] Created future:
[10:49:31.374] |  :  .  |  :  .  List of 1
[10:49:31.374] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.374] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.374] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.374] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.374] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.374] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.374] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.377] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.376] |  :  .  |  attachPackages() ... DONE
[10:49:31.377] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.377] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.377] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.377] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.377] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.378] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.378] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.378] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.378] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.378] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.378] |  :  .  |  assign_globals() ...
[10:49:31.378] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.379] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.380] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.381] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.381] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.382] |  :  .  |  :  .  |  New stack:
[10:49:31.378] |  :  .  |  List of 5
[10:49:31.378] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.378] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.378] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:31.378] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.378] |  :  .  |    ..$ : num [1:4] 1 3 1 7
[10:49:31.378] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.378] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.378] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.378] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.378] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.378] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.378] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.378] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.378] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.378] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.378] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.378] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.386] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.386] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.386] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.386] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.386] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.386] |  :  .  |  assign_globals() ... done
[10:49:31.382] |  :  .  |  :  .  |  List of 1
[10:49:31.382] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.382] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.382] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.382] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.382] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.382] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.382] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.388] |  :  .  |  :  .  |  Old stack:
[10:49:31.389] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.389] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.389] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.389] readImmediateCondition() ...
[10:49:31.389] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.390] |  :  .  |  :  .  |  :  New stack:
[10:49:31.389]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.390]  - Number of RDS files: 0
[10:49:31.390] readImmediateCondition() ... DONE
[10:49:31.376] MulticoreFuture:
[10:49:31.376] Label: ‘future_apply-2’
[10:49:31.376] Expression:
[10:49:31.376] {
[10:49:31.376]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.376]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.376]     "# as a global variable                                         "
[10:49:31.376]     do.call(function(...) {
[10:49:31.376]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.376]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.376]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.376]             on.exit(options(oopts), add = TRUE)
[10:49:31.376]         }
[10:49:31.376]         {
[10:49:31.376]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.376]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.376]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.376]             })
[10:49:31.376]         }
[10:49:31.376]     }, args = future.call.arguments)
[10:49:31.376] }
[10:49:31.376] Lazy evaluation: FALSE
[10:49:31.376] Asynchronous evaluation: TRUE
[10:49:31.376] Local evaluation: TRUE
[10:49:31.376] Environment: R_GlobalEnv
[10:49:31.376] Capture standard output: TRUE
[10:49:31.376] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.376] Immediate condition classes: ‘immediateCondition’
[10:49:31.376] Globals: 5 objects totaling 545 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 311 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.376] Packages: 1 packages (‘stats’)
[10:49:31.376] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.376] Resolved: FALSE
[10:49:31.376] Value: <not collected>
[10:49:31.376] Conditions captured: <none>
[10:49:31.376] Early signaling: FALSE
[10:49:31.376] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.376] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.392] Chunk #2 of 2 ... DONE
[10:49:31.392] Launching 2 futures (chunks) ... DONE
[10:49:31.392] Resolving 2 futures (chunks) ...
[10:49:31.393] value() on list ...
[10:49:31.390] |  :  .  |  :  .  |  :  List of 1
[10:49:31.390] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.390] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.390] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.390] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.390] |  :  .  |  :  .  |  :      ...)  
[10:49:31.390] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.390] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.390] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.390] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.390] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.390] |  :  .  |  :  .  |  :      ...)  
[10:49:31.390] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.390] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.393] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.393] |  recursive: 0
[10:49:31.393] |  length: 2
[10:49:31.394] |  
[10:49:31.394] |  Number of remaining objects: 2
[10:49:31.394] |  checking value #1 ...
[10:49:31.388] |  :  .  |  :  .  |  List of 1
[10:49:31.388] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(co[10:49:31.394] |  :  'obj' is MulticoreFuture
nstraints = "multicore"), gc = FALSE, 
[10:49:31.388] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.388] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.388] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.388] |  :  .  |  :  .  |      ...)  
[10:49:31.388] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.388] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.388] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.388] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.388] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.388] |  :  .  |  :  .  |      ...)  
[10:49:31.388] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.388] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.395] |  :  .  |  :  .  |  Not identical
[10:49:31.395] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.393] |  :  .  |  :  .  |  :  List of 1
[10:49:31.393] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.393] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.393] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.393] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.393] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.393] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.393] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.395] |  :  .  |  :  .  |  :  Not identical
[10:49:31.395] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.396] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.396] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.396] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.396] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.396] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.396] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.396] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.396] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.396] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.396] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.396] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.400] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.400] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.400] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.400] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.400] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.395] |  :  .  |  :  .  |  :  List of 2
[10:49:31.395] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.395] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.395] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.395] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.395] |  :  .  |  :  .  |  :      ...)  
[10:49:31.395] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.395] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.395] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.395] |  :  .  |  :  .  |  :      ...)  
[10:49:31.395] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.401] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.401] |  :  .  |  :  .  |  1. multicore:
[10:49:31.401] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.401] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.401] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.401] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.401] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.402] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.402] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.402] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.402] |  :  .  |  :  .  List of future strategies:
[10:49:31.402] |  :  .  |  :  .  1. sequential:
[10:49:31.402] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.402] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.402] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.405] |  :  readImmediateCondition() ...
[10:49:31.405] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.401] |  :  .  |  :  .  |  List of 1
[10:49:31.401] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.401] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.401] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.401] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.401] |  :  .  |  :  .  |      ...)  
[10:49:31.401] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.401] |  :  .  |  :  .  |    ..- attr(*, "tweakabl[10:49:31.405] |  :   - Number of RDS files: 0
e")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.401] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.401] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.401] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.401] |  :  .  |  :  .  |      ...)  
[10:49:31.401] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.401] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.406] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.406] |  :  readImmediateCondition() ... DONE
[10:49:31.406] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.406] |  checking value #1 ... done
[10:49:31.406] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.406] |  checking value #2 ...
[10:49:31.406] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.406] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.406] |  :  'obj' is MulticoreFuture
[10:49:31.406] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.407] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.407] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.407] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.403] |  :  .  |  :  .  List of 1
[10:49:31.403] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.403] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.403] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.403] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.403] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.403] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.403] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.408] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.408] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.408] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.408] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.409] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.409] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.409] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.409] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.410] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.410] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.410] |  :  .  |  assign_globals() ...
[10:49:31.410] |  :  .  |  List of 5
[10:49:31.410] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.410] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.410] |  :  .  |   $ ...future.FUN            :function (x, ...)  
[10:49:31.410] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.410] |  :  .  |    ..$ : num [1:4] 2 4 6 8
[10:49:31.410] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.410] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.410] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.410] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.410] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.410] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.410] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.410] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.410] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.410] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.410] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.410] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.416] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.416] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.416] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.416] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.416] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.416] |  :  .  |  assign_globals() ... done
[10:49:31.417] |  :  readImmediateCondition() ...
[10:49:31.417] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.417] |  :   - Number of RDS files: 0
[10:49:31.417] |  :  readImmediateCondition() ... DONE
[10:49:31.418] |  checking value #2 ... done
[10:49:31.419] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.419] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.420] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.420] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.420] |  :  .  |  :  .  |  :  New stack:
[10:49:31.420] |  :  .  |  :  .  |  :  List of 1
[10:49:31.420] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.420] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.420] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.420] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.420] |  :  .  |  :  .  |  :      ...)  
[10:49:31.420] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.420] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.420] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.420] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.420] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.420] |  :  .  |  :  .  |  :      ...)  
[10:49:31.420] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.420] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.423] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.423] |  :  .  |  :  .  |  :  List of 1
[10:49:31.423] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.423] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.423] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.423] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.423] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.423] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.425] |  :  .  |  :  .  |  :  Not identical
[10:49:31.425] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.428] |  Number of remaining objects: 2
[10:49:31.428] |  checking value #1 ...
[10:49:31.428] |  :  'obj' is MulticoreFuture
[10:49:31.429] |  :  readImmediateCondition() ...
[10:49:31.429] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.429] |  :   - Number of RDS files: 0
[10:49:31.429] |  :  readImmediateCondition() ... DONE
[10:49:31.429] |  :  MulticoreFuture #1
[10:49:31.430] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.430] |  :  .  nx: 2
[10:49:31.430] |  :  .  relay: TRUE
[10:49:31.430] |  :  .  stdout: TRUE
[10:49:31.430] |  :  .  signal: TRUE
[10:49:31.430] |  :  .  resignal: FALSE
[10:49:31.431] |  :  .  force: TRUE
[10:49:31.431] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.431] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.431] |  :  .  until=1
[10:49:31.431] |  :  .  relaying element #1
[10:49:31.432] |  :  .  result() for MulticoreFuture ...
[10:49:31.432] |  :  .  |  readImmediateCondition() ...
[10:49:31.433] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.433] |  :  .  |   - Number of RDS files: 0
[10:49:31.433] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.433] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.434] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.425] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.425] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.425] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.425] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.425] |  :  .  |  : [10:49:31.434] |  :  .  result() for MulticoreFuture ... done
 .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.425] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.425] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.425] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.425] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.425] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.425] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.434] |  :  .  result() for MulticoreFuture ...
[10:49:31.434] |  :  .  result() for MulticoreFuture ... done
[10:49:31.435] |  :  .  result() for MulticoreFuture ...
[10:49:31.435] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.435] |  :  .  result() for MulticoreFuture ... done
[10:49:31.435] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.435] |  :  .  result() for MulticoreFuture ...
[10:49:31.435] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.435] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.435] |  :  .  result() for MulticoreFuture ... done
[10:49:31.435] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.435] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.436] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.436] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.436] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.436] |  :  .  |  :  .  |  1. multicore:
[10:49:31.436] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.436] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.436] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.436] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.436] |  :  .  result() for MulticoreFuture ...
[10:49:31.436] |  :  .  result() for MulticoreFuture ... done
[10:49:31.437] |  :  .  result() for MulticoreFuture ...
[10:49:31.437] |  :  .  result() for MulticoreFuture ... done
[10:49:31.437] |  :  .  value: <list>
[10:49:31.437] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.437] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.437] |  :  .  nx: 2
[10:49:31.438] |  :  .  relay: TRUE
[10:49:31.438] |  :  .  stdout: TRUE
[10:49:31.438] |  :  .  signal: TRUE
[10:49:31.438] |  :  .  resignal: FALSE
[10:49:31.438] |  :  .  force: TRUE
[10:49:31.438] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.438] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.438] |  :  .  until=2
[10:49:31.438] |  :  .  relaying element #2
[10:49:31.439] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.439] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.439] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.439] |  :  length: 1 (resolved future 1)
[10:49:31.439] |  checking value #1 ... done
[10:49:31.439] |  checking value #2 ...
[10:49:31.439] |  :  'obj' is MulticoreFuture
[10:49:31.436] |  :  .  |  :  .  |  List of 1
[10:49:31.436] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.436] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.436] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.436] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.436] |  :  .  |  :  .  |      ...)  
[10:49:31.436] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.436] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.436] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.436] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.436] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.436] |  :  .  |  :  .  |      ...)  
[10:49:31.436] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.436] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.440] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.440] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.440] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.440] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.440] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.440] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.440] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.441] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.441] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.441] |  :  readImmediateCondition() ...
[10:49:31.441] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.441] |  :   - Number of RDS files: 0
[10:49:31.441] |  :  readImmediateCondition() ... DONE
[10:49:31.442] |  :  MulticoreFuture #2
[10:49:31.442] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.442] |  :  .  nx: 2
[10:49:31.442] |  :  .  relay: TRUE
[10:49:31.442] |  :  .  stdout: TRUE
[10:49:31.442] |  :  .  signal: TRUE
[10:49:31.442] |  :  .  resignal: FALSE
[10:49:31.442] |  :  .  force: TRUE
[10:49:31.442] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.443] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.443] |  :  .  until=2
[10:49:31.443] |  :  .  relaying element #2
[10:49:31.443] |  :  .  result() for MulticoreFuture ...
[10:49:31.443] |  :  .  |  readImmediateCondition() ...
[10:49:31.444] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.444] |  :  .  |   - Number of RDS files: 0
[10:49:31.444] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.444] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.444] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.444] |  :  .  result() for MulticoreFuture ... done
[10:49:31.444] |  :  .  result() for MulticoreFuture ...
[10:49:31.445] |  :  .  result() for MulticoreFuture ... done
[10:49:31.445] |  :  .  result() for MulticoreFuture ...
[10:49:31.445] |  :  .  result() for MulticoreFuture ... done
[10:49:31.445] |  :  .  result() for MulticoreFuture ...
[10:49:31.445] |  :  .  result() for MulticoreFuture ... done
[10:49:31.445] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.445] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.446] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.446] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.446] |  :  .  result() for MulticoreFuture ...
[10:49:31.446] |  :  .  result() for MulticoreFuture ... done
[10:49:31.446] |  :  .  result() for MulticoreFuture ...
[10:49:31.446] |  :  .  result() for MulticoreFuture ... done
[10:49:31.446] |  :  .  value: <list>
[10:49:31.446] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.447] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.447] |  :  .  nx: 2
[10:49:31.447] |  :  .  relay: TRUE
[10:49:31.447] |  :  .  stdout: TRUE
[10:49:31.447] |  :  .  signal: TRUE
[10:49:31.447] |  :  .  resignal: FALSE
[10:49:31.447] |  :  .  force: TRUE
[10:49:31.447] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.447] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.447] |  :  .  until=2
[10:49:31.448] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.448] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.448] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.450] |  :  length: 0 (resolved future 2)
[10:49:31.450] |  checking value #2 ... done
[10:49:31.450] |  Relaying remaining futures ...
[10:49:31.450] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.450] |  :  .  nx: 2
[10:49:31.450] |  :  .  relay: TRUE
[10:49:31.450] |  :  .  stdout: TRUE
[10:49:31.451] |  :  .  signal: TRUE
[10:49:31.451] |  :  .  resignal: FALSE
[10:49:31.451] |  :  .  force: TRUE
[10:49:31.451] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.451] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.451] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.451] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.452] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.452] |  Relaying remaining futures ... done
[10:49:31.452] value() on list ... done
[10:49:31.452]  - Number of value chunks collected: 2
[10:49:31.452] Resolving 2 futures (chunks) ... DONE
[10:49:31.452] Reducing values from 2 chunks ...
[10:49:31.452]  - Number of values collected after concatenation: 2
[10:49:31.452]  - Number of values expected: 2
[10:49:31.453] Reducing values from 2 chunks ... DONE
[10:49:31.453] future_lapply() ... DONE
     [,1] [,2]
0%      1  2.0
25%     1  3.5
50%     2  5.0
75%     4  6.5
100%    7  8.0
[10:49:31.453] getGlobalsAndPackagesXApply() ...
[10:49:31.454]  - future.globals: TRUE
[10:49:31.454] getGlobalsAndPackages() ...
[10:49:31.454] |  Searching for globals ...
[10:49:31.455] |  :  globals found: [1] ‘FUN’
[10:49:31.456] |  Searching for globals ... DONE
[10:49:31.456] |  Resolving globals: FALSE
[10:49:31.456] |  Search for packages associated with the globals ...
[10:49:31.456] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.456] |  :  Packages: [1] ‘base’
[10:49:31.456] |  Search for packages associated with the globals ... DONE
[10:49:31.457] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:31.457] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3,; 4, 5), dim = c(8L, 2L), dimnames = list(row = NULL, col = c("x1",; "x2"))))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:31.457] |  Packages after dropping 'base': [0] 
[10:49:31.457] |  globals: [1] ‘FUN’
[10:49:31.457] |  packages: [0] 
[10:49:31.457] getGlobalsAndPackages() ... done
[10:49:31.457]  - globals found/used: [n=1] ‘FUN’
[10:49:31.458]  - needed namespaces: [n=0] 
[10:49:31.458] Finding globals ... DONE
[10:49:31.458]  - use_args: TRUE
[10:49:31.458]  - Getting '...' globals ...
[10:49:31.458] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:31.458] |  recursive: 0
[10:49:31.458] |  length: 1
[10:49:31.459] |  elements: ‘...’
[10:49:31.459] |  'obj' is DotDotDotList
[10:49:31.459] |  resolve(obj, ...) ...
[10:49:31.459] |  resolve(obj, ...) ... done
[10:49:31.459] |  length: 0 (resolved future 1)
[10:49:31.459] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:31.459]    - '...' content: [n=0] 
[10:49:31.459] List of 1
[10:49:31.459]  $ ...: list()
[10:49:31.459]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.459]  - attr(*, "where")=List of 1
[10:49:31.459]   ..$ ...:<environment: 0x564d5bf0de68> 
[10:49:31.459]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.459]  - attr(*, "resolved")= logi TRUE
[10:49:31.459]  - attr(*, "total_size")= num NA
[10:49:31.462]  - Getting '...' globals ... DONE
[10:49:31.462] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:31.462] List of 2
[10:49:31.462]  $ ...future.FUN:function (x)  
[10:49:31.462]  $ ...          : list()
[10:49:31.462]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.462]  - attr(*, "where")=List of 2
[10:49:31.462]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:31.462]   ..$ ...          :<environment: 0x564d5bf0de68> 
[10:49:31.462]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.462]  - attr(*, "resolved")= logi FALSE
[10:49:31.462]  - attr(*, "total_size")= num 2624
[10:49:31.465] Packages to be attached in all futures: [n=0] 
[10:49:31.465] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.465] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.466] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.466] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.466] future_lapply() ...
[10:49:31.466] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.467] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.467] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.467] Number of chunks: 2
[10:49:31.467] getGlobalsAndPackagesXApply() ...
[10:49:31.467]  - future.globals: <name-value list> with names ‘list()’
[10:49:31.468]  - use_args: TRUE
[10:49:31.468] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:31.468] List of 2
[10:49:31.468]  $ ...          : list()
[10:49:31.468]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.468]  $ ...future.FUN:function (x)  
[10:49:31.468]  - attr(*, "where")=List of 2
[10:49:31.468]   ..$ ...          :<environment: 0x564d5bf0de68> 
[10:49:31.468]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:31.468]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.468]  - attr(*, "resolved")= logi FALSE
[10:49:31.468]  - attr(*, "total_size")= num NA
[10:49:31.473] Packages to be attached in all futures: [n=0] 
[10:49:31.473] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.473] Number of futures (= number of chunks): 2
[10:49:31.474] Launching 2 futures (chunks) ...
[10:49:31.474] Chunk #1 of 2 ...
[10:49:31.474]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.474]  - seeds: <none>
[10:49:31.474]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.474] getGlobalsAndPackages() ...
[10:49:31.474] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.475] |  Resolving globals: FALSE
[10:49:31.475] |  Tweak future expression to call with '...' arguments ...
[10:49:31.475] |  :  {
[10:49:31.475] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.475] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.475] |  :      "# as a global variable                                         "
[10:49:31.475] |  :      do.call(function(...) {
[10:49:31.475] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.475] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.475] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.475] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.475] |  :          }
[10:49:31.475] |  :          {
[10:49:31.475] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.475] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.475] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.475] |  :              })
[10:49:31.475] |  :          }
[10:49:31.475] |  :      }, args = future.call.arguments)
[10:49:31.475] |  :  }
[10:49:31.475] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.475] |  Search for packages associated with the globals ...
[10:49:31.476] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.476] |  :  Packages: [1] ‘base’
[10:49:31.476] |  Search for packages associated with the globals ... DONE
[10:49:31.476] |  Packages after dropping 'base': [0] 
[10:49:31.476] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.477] |  packages: [0] 
[10:49:31.477] getGlobalsAndPackages() ... done
[10:49:31.477] run() for Future (‘Future’) ...
[10:49:31.477] |  state: ‘created’
[10:49:31.477] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.477] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.477] |  Using MulticoreFutureBackend ...
[10:49:31.478] |  :  Launching futures ...
[10:49:31.478] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.478] |  :  .  |  getFutureData() ...
[10:49:31.478] |  :  .  |  :  getFutureCore() ...
[10:49:31.478] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.478] |  :  .  |  :  getFutureCore() ... done
[10:49:31.478] |  :  .  |  :  getFutureCapture() ...
[10:49:31.478] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.478] |  :  .  |  :  getFutureContext() ...
[10:49:31.478] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.479] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.479] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.479] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.479] |  :  .  |  :  getFutureContext() ... done
[10:49:31.479] |  :  .  |  getFutureData() ... done
[10:49:31.479] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.479] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.482] |  :  .  |  MulticoreFuture started
[10:49:31.482] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.482] |  :  Launching futures ... done
[10:49:31.482] |  :  .  |  attachPackages() ...
[10:49:31.482] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.482] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.483] |  Using MulticoreFutureBackend ... done
[10:49:31.483] |  :  .  |  attachPackages() ... DONE
[10:49:31.483] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.483] |  :  .  |  attachPackages() ...
[10:49:31.483] Created future:
[10:49:31.483] |  :  .  |  :  packages: [n=0] 
[10:49:31.483] |  :  .  |  attachPackages() ... DONE
[10:49:31.484] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.484] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.485] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.485] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.486] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.486] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.486] |  :  .  |  :  .  |  New stack:
[10:49:31.486] |  :  .  |  :  .  |  List of 1
[10:49:31.486] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.486] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.486] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.486] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.486] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.486] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.486] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.491] |  :  .  |  :  .  |  Old stack:
[10:49:31.495] readImmediateCondition() ...
[10:49:31.495]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.491] |  :  .  |  :  .  |  List of 1
[10:49:31.491] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.491] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.491] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.491] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.491] |  :  .  |  :  .  |      ...)  
[10:49:31.491] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.491] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.491] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.491] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.491] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.491] |  :  .  |  :  .  |      ...)  
[10:49:31.491] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.491] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.496] |  :  .  |  :  .  |  Not identical
[10:49:31.496]  - Number of RDS files: 0
[10:49:31.496] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.496] readImmediateCondition() ... DONE
[10:49:31.483] MulticoreFuture:
[10:49:31.483] Label: ‘future_apply-1’
[10:49:31.483] Expression:
[10:49:31.483] {
[10:49:31.483]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.483]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.483]     "# as a global variable                                         "
[10:49:31.483]     do.call(function(...) {
[10:49:31.483]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.483]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.483]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.483]             on.exit(options(oopts), add = TRUE)
[10:49:31.483]         }
[10:49:31.483]         {
[10:49:31.483]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.483]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.483]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.483]             })
[10:49:31.483]         }
[10:49:31.483]     }, args = future.call.arguments)
[10:49:31.483] }
[10:49:31.483] Lazy evaluation: FALSE
[10:49:31.483] Asynchronous evaluation: TRUE
[10:49:31.483] Local evaluation: TRUE
[10:49:31.483] Environment: R_GlobalEnv
[10:49:31.483] Capture standard output: TRUE
[10:49:31.483] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.483] Immediate condition classes: ‘immediateCondition’
[10:49:31.483] Globals: 5 objects totaling 451 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.483] Packages: <none>
[10:49:31.483] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.483] Resolved: FALSE
[10:49:31.483] Value: <not collected>
[10:49:31.483] Conditions captured: <none>
[10:49:31.483] Early signaling: FALSE
[10:49:31.483] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.483] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.497] Chunk #1 of 2 ... DONE
[10:49:31.497] Chunk #2 of 2 ...
[10:49:31.497]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.497]  - seeds: <none>
[10:49:31.497]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.498] getGlobalsAndPackages() ...
[10:49:31.498] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.498] |  Resolving globals: FALSE
[10:49:31.498] |  Tweak future expression to call with '...' arguments ...
[10:49:31.498] |  :  {
[10:49:31.498] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.498] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.498] |  :      "# as a global variable                                         "
[10:49:31.498] |  :      do.call(function(...) {
[10:49:31.498] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.498] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.498] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.498] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.498] |  :          }
[10:49:31.498] |  :          {
[10:49:31.498] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.498] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.498] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.498] |  :              })
[10:49:31.498] |  :          }
[10:49:31.498] |  :      }, args = future.call.arguments)
[10:49:31.498] |  :  }
[10:49:31.499] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.499] |  Search for packages associated with the globals ...
[10:49:31.499] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.500] |  :  Packages: [1] ‘base’
[10:49:31.500] |  Search for packages associated with the globals ... DONE
[10:49:31.500] |  Packages after dropping 'base': [0] 
[10:49:31.500] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.500] |  packages: [0] 
[10:49:31.501] getGlobalsAndPackages() ... done
[10:49:31.501] run() for Future (‘Future’) ...
[10:49:31.501] |  state: ‘created’
[10:49:31.501] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.501] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.502] |  Using MulticoreFutureBackend ...
[10:49:31.502] |  :  Launching futures ...
[10:49:31.502] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.502] |  :  .  |  getFutureData() ...
[10:49:31.502] |  :  .  |  :  getFutureCore() ...
[10:49:31.502] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.502] |  :  .  |  :  getFutureCore() ... done
[10:49:31.503] |  :  .  |  :  getFutureCapture() ...
[10:49:31.503] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.503] |  :  .  |  :  getFutureContext() ...
[10:49:31.503] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.503] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.503] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.503] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.504] |  :  .  |  :  getFutureContext() ... done
[10:49:31.504] |  :  .  |  getFutureData() ... done
[10:49:31.504] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.504] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.506] |  :  .  |  MulticoreFuture started
[10:49:31.507] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.496] |  :  .  |  :  .  |  :  List of 2
[10:49:31.496] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.496] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.496] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.496] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.496] |  :  .  |  :  .  |  :      ...)  
[10:49:31.496] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.496] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.496] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.496] |  :  .  |  :  .  |  :      ...)  
[10:49:31.496] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.507] |  :  Launching futures ... done
[10:49:31.507] |  :  .  |  attachPackages() ...
[10:49:31.508] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.508] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.508] |  Using MulticoreFutureBackend ... done
[10:49:31.508] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.508] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.508] |  :  .  |  attachPackages() ... DONE
[10:49:31.508] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.508] Created future:
[10:49:31.509] |  :  .  |  attachPackages() ...
[10:49:31.509] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.509] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.509] |  :  .  |  :  packages: [n=0] 
[10:49:31.509] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.509] |  :  .  |  attachPackages() ... DONE
[10:49:31.509] |  :  .  |  :  .  List of future strategies:
[10:49:31.509] |  :  .  |  :  .  1. sequential:
[10:49:31.509] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.509] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.509] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.510] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.510] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.511] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.511] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.512] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.512] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.512] |  :  .  |  :  .  |  New stack:
[10:49:31.510] |  :  .  |  :  .  List of 1
[10:49:31.510] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.510] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.510] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.510] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.510] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.510] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.510] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.514] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.514] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.514] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.515] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.515] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.515] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.515] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.515] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.516] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.516] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.516] |  :  .  |  assign_globals() ...
[10:49:31.512] |  :  .  |  :  .  |  List of 1
[10:49:31.512] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.512] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.512] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.512] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.512] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.512] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.512] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.519] |  :  .  |  :  .  |  Old stack:
[10:49:31.521] readImmediateCondition() ...
[10:49:31.516] |  :  .  |  List of 5
[10:49:31.516] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.516] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.516] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.516] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.516] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:31.516] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.516] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.516] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.516] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.516] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.516] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.516] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.516] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.516] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.516] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.516] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.516] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.521]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.522] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.522] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.522] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.522]  - Number of RDS files: 0
[10:49:31.522] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.522] readImmediateCondition() ... DONE
[10:49:31.522] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.522] |  :  .  |  assign_globals() ... done
[10:49:31.509] MulticoreFuture:
[10:49:31.509] Label: ‘future_apply-2’
[10:49:31.509] Expression:
[10:49:31.509] {
[10:49:31.509]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.509]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.509]     "# as a global variable                                         "
[10:49:31.509]     do.call(function(...) {
[10:49:31.509]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.509]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.509]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.509]             on.exit(options(oopts), add = TRUE)
[10:49:31.509]         }
[10:49:31.509]         {
[10:49:31.509]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.509]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.509]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.509]             })
[10:49:31.509]         }
[10:49:31.509]     }, args = future.call.arguments)
[10:49:31.509] }
[10:49:31.509] Lazy evaluation: FALSE
[10:49:31.509] Asynchronous evaluation: TRUE
[10:49:31.509] Local evaluation: TRUE
[10:49:31.509] Environment: R_GlobalEnv
[10:49:31.509] Capture standard output: TRUE
[10:49:31.509] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.509] Immediate condition classes: ‘immediateCondition’
[10:49:31.509] Globals: 5 objects totaling 451 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.509] Packages: <none>
[10:49:31.509] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.509] Resolved: FALSE
[10:49:31.509] Value: <not collected>
[10:49:31.509] Conditions captured: <none>
[10:49:31.509] Early signaling: FALSE
[10:49:31.509] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.509] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.523] Chunk #2 of 2 ... DONE
[10:49:31.523] Launching 2 futures (chunks) ... DONE
[10:49:31.523] Resolving 2 futures (chunks) ...
[10:49:31.523] value() on list ...
[10:49:31.524] |  recursive: 0
[10:49:31.524] |  length: 2
[10:49:31.524] |  
[10:49:31.524] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.524] |  Number of remaining objects: 2
[10:49:31.524] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.525] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.524] |  checking value #1 ...
[10:49:31.525] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.525] |  :  .  |  :  .  |  :  New stack:
[10:49:31.525] |  :  'obj' is MulticoreFuture
[10:49:31.520] |  :  .  |  :  .  |  List of 1
[10:49:31.520] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.520] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.520] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.520] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.520] |  :  .  |  :  .  |      ...)  
[10:49:31.520] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.520] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.520] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.520] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.520] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.520] |  :  .  |  :  .  |      ...)  
[10:49:31.520] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.520] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.525] |  :  .  |  :  .  |  :  List of 1
[10:49:31.525] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.525] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.525] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.525] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.525] |  :  .  |  :  .  |  :      ...)  
[10:49:31.525] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.525] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.525] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.525] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.525] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.525] |  :  .  |  :  .  |  :      ...)  
[10:49:31.525] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.525] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.530] |  :  .  |  :  .  |  Not identical
[10:49:31.530] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.530] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.530] |  :  .  |  :  .  |  :  List of 1
[10:49:31.530] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.530] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.530] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.530] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.530] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.530] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.530] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.533] |  :  .  |  :  .  |  :  Not identical
[10:49:31.533] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.535] |  :  readImmediateCondition() ...
[10:49:31.535] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.536] |  :   - Number of RDS files: 0
[10:49:31.536] |  :  readImmediateCondition() ... DONE
[10:49:31.536] |  checking value #1 ... done
[10:49:31.536] |  checking value #2 ...
[10:49:31.537] |  :  'obj' is MulticoreFuture
[10:49:31.533] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.533] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.533] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.533] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.533] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.533] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.533] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.533] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.533] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.533] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.533] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.531] |  :  .  |  :  .  |  :  List of 2
[10:49:31.531] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.531] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.531] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.531] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.531] |  :  .  |  :  .  |  :      ...)  
[10:49:31.531] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.531] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.531] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.531] |  :  .  |  :  .  |  :      ...)  
[10:49:31.531] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.538] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.538] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.539] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.539] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.539] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.539] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.539] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.539] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.539] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.539] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.539] |  :  .  |  :  .  |  1. multicore:
[10:49:31.539] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.539] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.539] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.539] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.539] |  :  .  |  :  .  List of future strategies:
[10:49:31.539] |  :  .  |  :  .  1. sequential:
[10:49:31.539] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.539] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.539] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.539] |  :  .  |  :  .  |  List of 1
[10:49:31.539] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.539] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.539] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.539] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.539] |  :  .  |  :  .  |      ...)  
[10:49:31.539] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.539] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.539] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.539] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.539] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.539] |  :  .  |  :  .  |      ...)  
[10:49:31.539] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.539] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.542] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.542] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.540] |  :  .  |  :  .  List of 1
[10:49:31.540] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.540] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.540] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.540] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.540] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.540] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.540] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.543] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.543] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.543] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.543] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.543] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.543] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.543] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.543] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.543] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.543] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.543] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.543] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.543] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.544] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.544] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.544] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.544] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.544] |  :  .  |  assign_globals() ...
[10:49:31.547] |  :  readImmediateCondition() ...
[10:49:31.547] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.547] |  :   - Number of RDS files: 0
[10:49:31.548] |  :  readImmediateCondition() ... DONE
[10:49:31.548] |  checking value #2 ... done
[10:49:31.544] |  :  .  |  List of 5
[10:49:31.544] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.544] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.544] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.544] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.544] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:31.544] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.544] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.544] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.544] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.544] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.544] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.544] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.544] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.544] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.544] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.544] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.544] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.552] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.552] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.553] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.553] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.553] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.553] |  :  .  |  assign_globals() ... done
[10:49:31.555] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.555] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.556] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.556] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.556] |  :  .  |  :  .  |  :  New stack:
[10:49:31.558] |  Number of remaining objects: 2
[10:49:31.558] |  checking value #1 ...
[10:49:31.556] |  :  .  |  :  .  |  :  List of 1
[10:49:31.556] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.556] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.556] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.556] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.556] |  :  .  |  :  .  |  :      ...)  
[10:49:31.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.556] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.556] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.556] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.556] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.556] |  :  .  |  :  .  |  :      ...)  
[10:49:31.556] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.556] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.559] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.559] |  :  'obj' is MulticoreFuture
[10:49:31.562] |  :  readImmediateCondition() ...
[10:49:31.562] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.562] |  :   - Number of RDS files: 0
[10:49:31.560] |  :  .  |  :  .  |  :  List of 1
[10:49:31.560] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.560] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.560] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.560] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.560] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.560] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.560] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.563] |  :  readImmediateCondition() ... DONE
[10:49:31.563] |  :  .  |  :  .  |  :  Not identical
[10:49:31.563] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.563] |  :  MulticoreFuture #1
[10:49:31.563] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.564] |  :  .  nx: 2
[10:49:31.564] |  :  .  relay: TRUE
[10:49:31.564] |  :  .  stdout: TRUE
[10:49:31.565] |  :  .  signal: TRUE
[10:49:31.565] |  :  .  resignal: FALSE
[10:49:31.565] |  :  .  force: TRUE
[10:49:31.566] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.566] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.566] |  :  .  until=1
[10:49:31.566] |  :  .  relaying element #1
[10:49:31.567] |  :  .  result() for MulticoreFuture ...
[10:49:31.568] |  :  .  |  readImmediateCondition() ...
[10:49:31.568] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.568] |  :  .  |   - Number of RDS files: 0
[10:49:31.568] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.568] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.569] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.569] |  :  .  result() for MulticoreFuture ... done
[10:49:31.569] |  :  .  result() for MulticoreFuture ...
[10:49:31.569] |  :  .  result() for MulticoreFuture ... done
[10:49:31.569] |  :  .  result() for MulticoreFuture ...
[10:49:31.570] |  :  .  result() for MulticoreFuture ... done
[10:49:31.563] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.563] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.563] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.563] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.563] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.563] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.563] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.563] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.563] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.563] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.563] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.570] |  :  .  result() for MulticoreFuture ...
[10:49:31.570] |  :  .  result() for MulticoreFuture ... done
[10:49:31.570] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.570] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.570] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.571] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.571] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.571] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.571] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.571] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.571] |  :  .  result() for MulticoreFuture ...
[10:49:31.571] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.571] |  :  .  result() for MulticoreFuture ... done
[10:49:31.571] |  :  .  result() for MulticoreFuture ...
[10:49:31.571] |  :  .  result() for MulticoreFuture ... done
[10:49:31.571] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.571] |  :  .  |  :  .  |  1. multicore:
[10:49:31.571] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.571] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.571] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.572] |  :  .  value: <list>
[10:49:31.572] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.572] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.572] |  :  .  nx: 2
[10:49:31.572] |  :  .  relay: TRUE
[10:49:31.572] |  :  .  stdout: TRUE
[10:49:31.573] |  :  .  signal: TRUE
[10:49:31.573] |  :  .  resignal: FALSE
[10:49:31.573] |  :  .  force: TRUE
[10:49:31.573] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.573] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.573] |  :  .  until=2
[10:49:31.573] |  :  .  relaying element #2
[10:49:31.573] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.573] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.574] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.574] |  :  length: 1 (resolved future 1)
[10:49:31.574] |  checking value #1 ... done
[10:49:31.574] |  checking value #2 ...
[10:49:31.574] |  :  'obj' is MulticoreFuture
[10:49:31.572] |  :  .  |  :  .  |  List of 1
[10:49:31.572] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.572] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.572] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.572] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.572] |  :  .  |  :  .  |      ...)  
[10:49:31.572] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.572] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.572] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.572] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.572] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.572] |  :  .  |  :  .  |      ...)  
[10:49:31.572] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.572] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.577] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.577] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.577] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.577] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.578] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.578] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.578] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.578] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.578] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.578] |  :  readImmediateCondition() ...
[10:49:31.578] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.579] |  :   - Number of RDS files: 0
[10:49:31.579] |  :  readImmediateCondition() ... DONE
[10:49:31.579] |  :  MulticoreFuture #2
[10:49:31.579] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.579] |  :  .  nx: 2
[10:49:31.579] |  :  .  relay: TRUE
[10:49:31.579] |  :  .  stdout: TRUE
[10:49:31.579] |  :  .  signal: TRUE
[10:49:31.580] |  :  .  resignal: FALSE
[10:49:31.580] |  :  .  force: TRUE
[10:49:31.580] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.580] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.580] |  :  .  until=2
[10:49:31.580] |  :  .  relaying element #2
[10:49:31.580] |  :  .  result() for MulticoreFuture ...
[10:49:31.581] |  :  .  |  readImmediateCondition() ...
[10:49:31.581] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.581] |  :  .  |   - Number of RDS files: 0
[10:49:31.581] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.581] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.581] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.581] |  :  .  result() for MulticoreFuture ... done
[10:49:31.582] |  :  .  result() for MulticoreFuture ...
[10:49:31.582] |  :  .  result() for MulticoreFuture ... done
[10:49:31.582] |  :  .  result() for MulticoreFuture ...
[10:49:31.582] |  :  .  result() for MulticoreFuture ... done
[10:49:31.582] |  :  .  result() for MulticoreFuture ...
[10:49:31.582] |  :  .  result() for MulticoreFuture ... done
[10:49:31.582] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.582] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.583] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.583] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.583] |  :  .  result() for MulticoreFuture ...
[10:49:31.583] |  :  .  result() for MulticoreFuture ... done
[10:49:31.583] |  :  .  result() for MulticoreFuture ...
[10:49:31.583] |  :  .  result() for MulticoreFuture ... done
[10:49:31.583] |  :  .  value: <list>
[10:49:31.583] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.583] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.584] |  :  .  nx: 2
[10:49:31.584] |  :  .  relay: TRUE
[10:49:31.584] |  :  .  stdout: TRUE
[10:49:31.584] |  :  .  signal: TRUE
[10:49:31.584] |  :  .  resignal: FALSE
[10:49:31.584] |  :  .  force: TRUE
[10:49:31.584] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.584] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.584] |  :  .  until=2
[10:49:31.584] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.585] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.585] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.585] |  :  length: 0 (resolved future 2)
[10:49:31.585] |  checking value #2 ... done
[10:49:31.585] |  Relaying remaining futures ...
[10:49:31.585] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.585] |  :  .  nx: 2
[10:49:31.585] |  :  .  relay: TRUE
[10:49:31.585] |  :  .  stdout: TRUE
[10:49:31.585] |  :  .  signal: TRUE
[10:49:31.586] |  :  .  resignal: FALSE
[10:49:31.586] |  :  .  force: TRUE
[10:49:31.586] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.586] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.586] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.586] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.586] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.586] |  Relaying remaining futures ... done
[10:49:31.586] value() on list ... done
[10:49:31.587]  - Number of value chunks collected: 2
[10:49:31.587] Resolving 2 futures (chunks) ... DONE
[10:49:31.587] Reducing values from 2 chunks ...
[10:49:31.587]  - Number of values collected after concatenation: 2
[10:49:31.587]  - Number of values expected: 2
[10:49:31.587] Reducing values from 2 chunks ... DONE
[10:49:31.587] future_lapply() ... DONE
      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5
[10:49:31.587] getGlobalsAndPackagesXApply() ...
[10:49:31.587]  - future.globals: TRUE
[10:49:31.588] getGlobalsAndPackages() ...
[10:49:31.588] |  Searching for globals ...
[10:49:31.589] |  :  globals found: [1] ‘FUN’
[10:49:31.589] |  Searching for globals ... DONE
[10:49:31.589] |  Resolving globals: FALSE
[10:49:31.589] |  Search for packages associated with the globals ...
[10:49:31.590] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.590] |  :  Packages: [1] ‘base’
[10:49:31.590] |  Search for packages associated with the globals ... DONE
[10:49:31.590] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:31.590] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3,; 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 3, 3, 3,; 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5), dim = c(8L, 2L, 3L), dimnames = list(; row = NULL, col = c("x1", "x2"), C = c("cop.1", "cop.2",; "cop.3"))))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:31.591] |  Packages after dropping 'base': [0] 
[10:49:31.591] |  globals: [1] ‘FUN’
[10:49:31.591] |  packages: [0] 
[10:49:31.591] getGlobalsAndPackages() ... done
[10:49:31.591]  - globals found/used: [n=1] ‘FUN’
[10:49:31.592]  - needed namespaces: [n=0] 
[10:49:31.593] Finding globals ... DONE
[10:49:31.593]  - use_args: TRUE
[10:49:31.593]  - Getting '...' globals ...
[10:49:31.593] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:31.593] |  recursive: 0
[10:49:31.594] |  length: 1
[10:49:31.594] |  elements: ‘...’
[10:49:31.594] |  'obj' is DotDotDotList
[10:49:31.594] |  resolve(obj, ...) ...
[10:49:31.594] |  resolve(obj, ...) ... done
[10:49:31.594] |  length: 0 (resolved future 1)
[10:49:31.594] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:31.594]    - '...' content: [n=0] 
[10:49:31.595] List of 1
[10:49:31.595]  $ ...: list()
[10:49:31.595]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.595]  - attr(*, "where")=List of 1
[10:49:31.595]   ..$ ...:<environment: 0x564d5b589800> 
[10:49:31.595]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.595]  - attr(*, "resolved")= logi TRUE
[10:49:31.595]  - attr(*, "total_size")= num NA
[10:49:31.598]  - Getting '...' globals ... DONE
[10:49:31.598] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:31.598] List of 2
[10:49:31.598]  $ ...future.FUN:function (x)  
[10:49:31.598]  $ ...          : list()
[10:49:31.598]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.598]  - attr(*, "where")=List of 2
[10:49:31.598]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:31.598]   ..$ ...          :<environment: 0x564d5b589800> 
[10:49:31.598]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.598]  - attr(*, "resolved")= logi FALSE
[10:49:31.598]  - attr(*, "total_size")= num 3563
[10:49:31.601] Packages to be attached in all futures: [n=0] 
[10:49:31.601] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.601] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.601] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.601] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.601] future_lapply() ...
[10:49:31.602] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.602] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.602] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.603] Number of chunks: 2
[10:49:31.603] getGlobalsAndPackagesXApply() ...
[10:49:31.603]  - future.globals: <name-value list> with names ‘list()’
[10:49:31.603]  - use_args: TRUE
[10:49:31.603] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:31.603] List of 2
[10:49:31.603]  $ ...          : list()
[10:49:31.603]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.603]  $ ...future.FUN:function (x)  
[10:49:31.603]  - attr(*, "where")=List of 2
[10:49:31.603]   ..$ ...          :<environment: 0x564d5b589800> 
[10:49:31.603]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:31.603]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.603]  - attr(*, "resolved")= logi FALSE
[10:49:31.603]  - attr(*, "total_size")= num NA
[10:49:31.607] Packages to be attached in all futures: [n=0] 
[10:49:31.607] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.607] Number of futures (= number of chunks): 2
[10:49:31.607] Launching 2 futures (chunks) ...
[10:49:31.607] Chunk #1 of 2 ...
[10:49:31.607]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.607]  - seeds: <none>
[10:49:31.607]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.608] getGlobalsAndPackages() ...
[10:49:31.608] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.608] |  Resolving globals: FALSE
[10:49:31.608] |  Tweak future expression to call with '...' arguments ...
[10:49:31.608] |  :  {
[10:49:31.608] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.608] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.608] |  :      "# as a global variable                                         "
[10:49:31.608] |  :      do.call(function(...) {
[10:49:31.608] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.608] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.608] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.608] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.608] |  :          }
[10:49:31.608] |  :          {
[10:49:31.608] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.608] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.608] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.608] |  :              })
[10:49:31.608] |  :          }
[10:49:31.608] |  :      }, args = future.call.arguments)
[10:49:31.608] |  :  }
[10:49:31.608] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.608] |  Search for packages associated with the globals ...
[10:49:31.609] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.609] |  :  Packages: [1] ‘base’
[10:49:31.609] |  Search for packages associated with the globals ... DONE
[10:49:31.609] |  Packages after dropping 'base': [0] 
[10:49:31.609] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.609] |  packages: [0] 
[10:49:31.609] getGlobalsAndPackages() ... done
[10:49:31.610] run() for Future (‘Future’) ...
[10:49:31.610] |  state: ‘created’
[10:49:31.610] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.610] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.610] |  Using MulticoreFutureBackend ...
[10:49:31.610] |  :  Launching futures ...
[10:49:31.610] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.610] |  :  .  |  getFutureData() ...
[10:49:31.611] |  :  .  |  :  getFutureCore() ...
[10:49:31.611] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.611] |  :  .  |  :  getFutureCore() ... done
[10:49:31.611] |  :  .  |  :  getFutureCapture() ...
[10:49:31.611] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.612] |  :  .  |  :  getFutureContext() ...
[10:49:31.612] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.612] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.612] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.612] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.613] |  :  .  |  :  getFutureContext() ... done
[10:49:31.613] |  :  .  |  getFutureData() ... done
[10:49:31.613] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.613] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.615] |  :  .  |  MulticoreFuture started
[10:49:31.616] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.616] |  :  .  |  attachPackages() ...
[10:49:31.617] |  :  Launching futures ... done
[10:49:31.617] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.617] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.618] |  :  .  |  attachPackages() ... DONE
[10:49:31.618] |  Using MulticoreFutureBackend ... done
[10:49:31.618] |  :  .  |  attachPackages() ...
[10:49:31.618] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.618] |  :  .  |  :  packages: [n=0] 
[10:49:31.618] Created future:
[10:49:31.619] |  :  .  |  attachPackages() ... DONE
[10:49:31.620] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.620] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.620] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.621] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.622] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.622] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.622] |  :  .  |  :  .  |  New stack:
[10:49:31.623] |  :  .  |  :  .  |  List of 1
[10:49:31.623] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.623] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.623] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.623] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.623] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.623] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.623] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.629] |  :  .  |  :  .  |  Old stack:
[10:49:31.631] readImmediateCondition() ...
[10:49:31.631]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.632]  - Number of RDS files: 0
[10:49:31.632] readImmediateCondition() ... DONE
[10:49:31.619] MulticoreFuture:
[10:49:31.619] Label: ‘future_apply-1’
[10:49:31.619] Expression:
[10:49:31.619] {
[10:49:31.619]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.619]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.619]     "# as a global variable                                         "
[10:49:31.619]     do.call(function(...) {
[10:49:31.619]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.619]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.619]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.619]             on.exit(options(oopts), add = TRUE)
[10:49:31.619]         }
[10:49:31.619]         {
[10:49:31.619]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.619]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.619]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.619]             })
[10:49:31.619]         }
[10:49:31.619]     }, args = future.call.arguments)
[10:49:31.619] }
[10:49:31.619] Lazy evaluation: FALSE
[10:49:31.619] Asynchronous evaluation: TRUE
[10:49:31.619] Local evaluation: TRUE
[10:49:31.619] Environment: R_GlobalEnv
[10:49:31.619] Capture standard output: TRUE
[10:49:31.619] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.619] Immediate condition classes: ‘immediateCondition’
[10:49:31.619] Globals: 5 objects totaling 595 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 247 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.619] Packages: <none>
[10:49:31.619] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.619] Resolved: FALSE
[10:49:31.619] Value: <not collected>
[10:49:31.619] Conditions captured: <none>
[10:49:31.619] Early signaling: FALSE
[10:49:31.619] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.619] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.632] Chunk #1 of 2 ... DONE
[10:49:31.632] Chunk #2 of 2 ...
[10:49:31.633]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.633]  - seeds: <none>
[10:49:31.633]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.629] |  :  .  |  :  .  |  List of 1
[10:49:31.629] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.629] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.629] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.629] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.629] |  :  .  |  :  .  |      ...)  
[10:49:31.629] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.629] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.629] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.629] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.629] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.629] |  :  .  |  :  .  |      ...)  
[10:49:31.629] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.629] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.634] getGlobalsAndPackages() ...
[10:49:31.634] |  :  .  |  :  .  |  Not identical
[10:49:31.634] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.634] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.634] |  Resolving globals: FALSE
[10:49:31.634] |  Tweak future expression to call with '...' arguments ...
[10:49:31.634] |  :  {
[10:49:31.634] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.634] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.634] |  :      "# as a global variable                                         "
[10:49:31.634] |  :      do.call(function(...) {
[10:49:31.634] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.634] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.634] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.634] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.634] |  :          }
[10:49:31.634] |  :          {
[10:49:31.634] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.634] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.634] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.634] |  :              })
[10:49:31.634] |  :          }
[10:49:31.634] |  :      }, args = future.call.arguments)
[10:49:31.634] |  :  }
[10:49:31.635] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.635] |  Search for packages associated with the globals ...
[10:49:31.636] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.636] |  :  Packages: [1] ‘base’
[10:49:31.636] |  Search for packages associated with the globals ... DONE
[10:49:31.637] |  Packages after dropping 'base': [0] 
[10:49:31.637] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.637] |  packages: [0] 
[10:49:31.637] getGlobalsAndPackages() ... done
[10:49:31.637] run() for Future (‘Future’) ...
[10:49:31.637] |  state: ‘created’
[10:49:31.638] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.638] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.638] |  Using MulticoreFutureBackend ...
[10:49:31.638] |  :  Launching futures ...
[10:49:31.638] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.638] |  :  .  |  getFutureData() ...
[10:49:31.638] |  :  .  |  :  getFutureCore() ...
[10:49:31.639] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.639] |  :  .  |  :  getFutureCore() ... done
[10:49:31.639] |  :  .  |  :  getFutureCapture() ...
[10:49:31.639] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.634] |  :  .  |  :  .  |  :  List of 2
[10:49:31.634] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.634] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.634] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.634] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.634] |  :  .  |  :  .  |  :      ...)  
[10:49:31.634] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.634] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.634] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.634] |  :  .  |  :  .  |  :      ...)  
[10:49:31.634] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.639] |  :  .  |  :  getFutureContext() ...
[10:49:31.639] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.639] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.639] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.640] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.640] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.640] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.640] |  :  .  |  :  getFutureContext() ... done
[10:49:31.640] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.640] |  :  .  |  getFutureData() ... done
[10:49:31.640] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.640] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.640] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.641] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.640] |  :  .  |  :  .  List of future strategies:
[10:49:31.640] |  :  .  |  :  .  1. sequential:
[10:49:31.640] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.640] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.640] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.642] |  :  .  |  MulticoreFuture started
[10:49:31.643] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.643] |  :  Launching futures ... done
[10:49:31.643] |  :  .  |  attachPackages() ...
[10:49:31.644] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.644] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.644] |  Using MulticoreFutureBackend ... done
[10:49:31.644] |  :  .  |  attachPackages() ... DONE
[10:49:31.644] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.645] |  :  .  |  attachPackages() ...
[10:49:31.645] |  :  .  |  :  packages: [n=0] 
[10:49:31.645] Created future:
[10:49:31.645] |  :  .  |  attachPackages() ... DONE
[10:49:31.641] |  :  .  |  :  .  List of 1
[10:49:31.641] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.641] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.641] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.641] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.641] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.641] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.641] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.646] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.646] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.646] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.646] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.646] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.646] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.647] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.647] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.647] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.647] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.647] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.648] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.648] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.648] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.648] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.648] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.648] |  :  .  |  :  .  |  New stack:
[10:49:31.648] |  :  .  |  assign_globals() ...
[10:49:31.648] |  :  .  |  :  .  |  List of 1
[10:49:31.648] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.648] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.648] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.648] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.648] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.648] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.648] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.653] |  :  .  |  :  .  |  Old stack:
[10:49:31.657] readImmediateCondition() ...
[10:49:31.649] |  :  .  |  List of 5
[10:49:31.649] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.649] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.649] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.649] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:31.649] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:31.649] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:31.649] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:31.649] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.649] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.649] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.649] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.649] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.649] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.649] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.649] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.649] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.649] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.649] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.649] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.658]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.658] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.658] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.658]  - Number of RDS files: 0
[10:49:31.658] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.658] readImmediateCondition() ... DONE
[10:49:31.658] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.653] |  :  .  |  :  .  |  List of 1
[10:49:31.653] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.653] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.653] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.653] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.653] |  :  .  |  :  .  |      ...)  
[10:49:31.653] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.653] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.653] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.653] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.653] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.653] |  :  .  |  :  .  |      ...)  
[10:49:31.653] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.653] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.658] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.659] |  :  .  |  assign_globals() ... done
[10:49:31.659] |  :  .  |  :  .  |  Not identical
[10:49:31.645] MulticoreFuture:
[10:49:31.645] Label: ‘future_apply-2’
[10:49:31.645] Expression:
[10:49:31.645] {
[10:49:31.645]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.645]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.645]     "# as a global variable                                         "
[10:49:31.645]     do.call(function(...) {
[10:49:31.645]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.645]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.645]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.645]             on.exit(options(oopts), add = TRUE)
[10:49:31.645]         }
[10:49:31.645]         {
[10:49:31.645]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.645]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.645]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.645]             })
[10:49:31.645]         }
[10:49:31.645]     }, args = future.call.arguments)
[10:49:31.645] }
[10:49:31.645] Lazy evaluation: FALSE
[10:49:31.645] Asynchronous evaluation: TRUE
[10:49:31.645] Local evaluation: TRUE
[10:49:31.645] Environment: R_GlobalEnv
[10:49:31.645] Capture standard output: TRUE
[10:49:31.645] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.645] Immediate condition classes: ‘immediateCondition’
[10:49:31.645] Globals: 5 objects totaling 595 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 247 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.645] Packages: <none>
[10:49:31.645] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.645] Resolved: FALSE
[10:49:31.645] Value: <not collected>
[10:49:31.645] Conditions captured: <none>
[10:49:31.645] Early signaling: FALSE
[10:49:31.645] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.645] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.659] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.659] Chunk #2 of 2 ... DONE
[10:49:31.659] Launching 2 futures (chunks) ... DONE
[10:49:31.659] Resolving 2 futures (chunks) ...
[10:49:31.660] value() on list ...
[10:49:31.660] |  recursive: 0
[10:49:31.660] |  length: 2
[10:49:31.661] |  
[10:49:31.661] |  Number of remaining objects: 2
[10:49:31.661] |  checking value #1 ...
[10:49:31.661] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.662] |  :  'obj' is MulticoreFuture
[10:49:31.662] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.662] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.662] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.662] |  :  .  |  :  .  |  :  New stack:
[10:49:31.662] |  :  .  |  :  .  |  :  List of 1
[10:49:31.662] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.662] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.662] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.662] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.662] |  :  .  |  :  .  |  :      ...)  
[10:49:31.662] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.662] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.662] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.662] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.662] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.662] |  :  .  |  :  .  |  :      ...)  
[10:49:31.662] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.662] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.666] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.666] |  :  .  |  :  .  |  :  List of 1
[10:49:31.666] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.666] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.666] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.666] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.666] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.666] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.666] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.668] |  :  .  |  :  .  |  :  Not identical
[10:49:31.668] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.672] |  :  readImmediateCondition() ...
[10:49:31.672] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.673] |  :   - Number of RDS files: 0
[10:49:31.659] |  :  .  |  :  .  |  :  List of 2
[10:49:31.659] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.659] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.659] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.659] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.659] |  :  .  |  :  .  |  :      ...)  
[10:49:31.659] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.659] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.659] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.659] |  :  .  |  :  .  |  :      ...)  
[10:49:31.659] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.673] |  :  readImmediateCondition() ... DONE
[10:49:31.673] |  checking value #1 ... done
[10:49:31.673] |  checking value #2 ...
[10:49:31.673] |  :  'obj' is MulticoreFuture
[10:49:31.674] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.674] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.674] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.675] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.675] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.668] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.668] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.668] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.668] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.668] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.668] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.668] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.668] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.668] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.668] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.668] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.675] |  :  .  |  :  .  List of future strategies:
[10:49:31.675] |  :  .  |  :  .  1. sequential:
[10:49:31.675] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.675] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.675] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.676] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.676] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.676] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.676] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.676] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.677] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.677] |  :  .  |  :  .  |  1. multicore:
[10:49:31.677] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.677] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.677] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.676] |  :  .  |  :  .  List of 1
[10:49:31.676] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.676] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.676] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.676] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.676] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.676] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.676] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.679] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.679] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.680] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.680] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.677] |  :  .  |  :  .  |  List of 1
[10:49:31.677] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.677] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.677] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.677] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.677] |  :  .  |  :  .  |      ...)  
[10:49:31.677] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.677] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.677] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.677] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.677] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.677] |  :  .  |  :  .  |      ...)  
[10:49:31.677] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.677] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.680] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.680] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.680] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.680] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.680] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.680] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.680] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.680] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.681] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.681] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.681] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.681] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.681] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.681] |  :  .  |  assign_globals() ...
[10:49:31.681] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.681] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.684] |  :  readImmediateCondition() ...
[10:49:31.684] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.684] |  :   - Number of RDS files: 0
[10:49:31.684] |  :  readImmediateCondition() ... DONE
[10:49:31.685] |  checking value #2 ... done
[10:49:31.681] |  :  .  |  List of 5
[10:49:31.681] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.681] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.681] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.681] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:31.681] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:31.681] |  :  .  |    ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:31.681] |  :  .  |    ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:31.681] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.681] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.681] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.681] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.681] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.681] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.681] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.681] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.681] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.681] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.681] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.681] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.688] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.688] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.688] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.688] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.688] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.688] |  :  .  |  assign_globals() ... done
[10:49:31.690] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.690] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.693] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.693] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.693] |  :  .  |  :  .  |  :  New stack:
[10:49:31.695] |  Number of remaining objects: 2
[10:49:31.695] |  checking value #1 ...
[10:49:31.695] |  :  'obj' is MulticoreFuture
[10:49:31.696] |  :  readImmediateCondition() ...
[10:49:31.696] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.696] |  :   - Number of RDS files: 0
[10:49:31.696] |  :  readImmediateCondition() ... DONE
[10:49:31.697] |  :  MulticoreFuture #1
[10:49:31.697] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.697] |  :  .  nx: 2
[10:49:31.697] |  :  .  relay: TRUE
[10:49:31.697] |  :  .  stdout: TRUE
[10:49:31.693] |  :  .  |  :  .  |  :  List of 1
[10:49:31.693] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.693] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.693] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.693] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.693] |  :  .  |  :  .  |  :      ...)  
[10:49:31.693] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.693] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.693] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.693] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.693] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.693] |  :  .  |  :  .  |  :      ...)  
[10:49:31.693] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.693] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.698] |  :  .  signal: TRUE
[10:49:31.698] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.698] |  :  .  resignal: FALSE
[10:49:31.698] |  :  .  force: TRUE
[10:49:31.698] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.698] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.698] |  :  .  until=1
[10:49:31.699] |  :  .  relaying element #1
[10:49:31.699] |  :  .  result() for MulticoreFuture ...
[10:49:31.700] |  :  .  |  readImmediateCondition() ...
[10:49:31.700] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.700] |  :  .  |   - Number of RDS files: 0
[10:49:31.701] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.701] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.701] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.701] |  :  .  result() for MulticoreFuture ... done
[10:49:31.698] |  :  .  |  :  .  |  :  List of 1
[10:49:31.698] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.698] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.698] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.698] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.698] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.698] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.698] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.702] |  :  .  result() for MulticoreFuture ...
[10:49:31.702] |  :  .  |  :  .  |  :  Not identical
[10:49:31.702] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.702] |  :  .  result() for MulticoreFuture ... done
[10:49:31.702] |  :  .  result() for MulticoreFuture ...
[10:49:31.702] |  :  .  result() for MulticoreFuture ... done
[10:49:31.703] |  :  .  result() for MulticoreFuture ...
[10:49:31.703] |  :  .  result() for MulticoreFuture ... done
[10:49:31.703] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.703] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.703] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.704] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.704] |  :  .  result() for MulticoreFuture ...
[10:49:31.704] |  :  .  result() for MulticoreFuture ... done
[10:49:31.704] |  :  .  result() for MulticoreFuture ...
[10:49:31.705] |  :  .  result() for MulticoreFuture ... done
[10:49:31.705] |  :  .  value: <list>
[10:49:31.705] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.705] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.705] |  :  .  nx: 2
[10:49:31.706] |  :  .  relay: TRUE
[10:49:31.706] |  :  .  stdout: TRUE
[10:49:31.706] |  :  .  signal: TRUE
[10:49:31.706] |  :  .  resignal: FALSE
[10:49:31.706] |  :  .  force: TRUE
[10:49:31.702] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.702] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.702] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.702] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.702] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.702] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.702] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.702] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.702] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.702] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.702] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.707] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.709] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.710] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.710] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.710] |  :  .  until=2
[10:49:31.710] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.710] |  :  .  relaying element #2
[10:49:31.710] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.710] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.710] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.710] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.710] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.710] |  :  .  |  :  .  |  1. multicore:
[10:49:31.710] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.710] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.710] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.711] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.711] |  :  length: 1 (resolved future 1)
[10:49:31.711] |  checking value #1 ... done
[10:49:31.711] |  checking value #2 ...
[10:49:31.711] |  :  'obj' is MulticoreFuture
[10:49:31.711] |  :  .  |  :  .  |  List of 1
[10:49:31.711] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.711] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.711] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.711] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.711] |  :  .  |  :  .  |      ...)  
[10:49:31.711] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.711] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.711] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.711] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.711] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.711] |  :  .  |  :  .  |      ...)  
[10:49:31.711] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.711] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.714] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.714] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.714] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.714] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.714] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.715] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.715] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.715] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.715] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.715] |  :  readImmediateCondition() ...
[10:49:31.715] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.716] |  :   - Number of RDS files: 0
[10:49:31.716] |  :  readImmediateCondition() ... DONE
[10:49:31.716] |  :  MulticoreFuture #2
[10:49:31.716] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.716] |  :  .  nx: 2
[10:49:31.716] |  :  .  relay: TRUE
[10:49:31.716] |  :  .  stdout: TRUE
[10:49:31.717] |  :  .  signal: TRUE
[10:49:31.717] |  :  .  resignal: FALSE
[10:49:31.717] |  :  .  force: TRUE
[10:49:31.717] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.717] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.717] |  :  .  until=2
[10:49:31.717] |  :  .  relaying element #2
[10:49:31.718] |  :  .  result() for MulticoreFuture ...
[10:49:31.718] |  :  .  |  readImmediateCondition() ...
[10:49:31.718] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.718] |  :  .  |   - Number of RDS files: 0
[10:49:31.719] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.719] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.719] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.719] |  :  .  result() for MulticoreFuture ... done
[10:49:31.719] |  :  .  result() for MulticoreFuture ...
[10:49:31.720] |  :  .  result() for MulticoreFuture ... done
[10:49:31.720] |  :  .  result() for MulticoreFuture ...
[10:49:31.720] |  :  .  result() for MulticoreFuture ... done
[10:49:31.720] |  :  .  result() for MulticoreFuture ...
[10:49:31.720] |  :  .  result() for MulticoreFuture ... done
[10:49:31.721] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.721] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.721] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.721] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.721] |  :  .  result() for MulticoreFuture ...
[10:49:31.721] |  :  .  result() for MulticoreFuture ... done
[10:49:31.721] |  :  .  result() for MulticoreFuture ...
[10:49:31.722] |  :  .  result() for MulticoreFuture ... done
[10:49:31.722] |  :  .  value: <list>
[10:49:31.722] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.722] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.722] |  :  .  nx: 2
[10:49:31.722] |  :  .  relay: TRUE
[10:49:31.722] |  :  .  stdout: TRUE
[10:49:31.722] |  :  .  signal: TRUE
[10:49:31.722] |  :  .  resignal: FALSE
[10:49:31.722] |  :  .  force: TRUE
[10:49:31.723] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.723] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.723] |  :  .  until=2
[10:49:31.723] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.723] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.723] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.723] |  :  length: 0 (resolved future 2)
[10:49:31.723] |  checking value #2 ... done
[10:49:31.723] |  Relaying remaining futures ...
[10:49:31.724] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.724] |  :  .  nx: 2
[10:49:31.724] |  :  .  relay: TRUE
[10:49:31.724] |  :  .  stdout: TRUE
[10:49:31.724] |  :  .  signal: TRUE
[10:49:31.724] |  :  .  resignal: FALSE
[10:49:31.724] |  :  .  force: TRUE
[10:49:31.724] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.724] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.724] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.725] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.725] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.725] |  Relaying remaining futures ... done
[10:49:31.725] value() on list ... done
[10:49:31.725]  - Number of value chunks collected: 2
[10:49:31.725] Resolving 2 futures (chunks) ... DONE
[10:49:31.725] Reducing values from 2 chunks ...
[10:49:31.725]  - Number of values collected after concatenation: 6
[10:49:31.725]  - Number of values expected: 6
[10:49:31.725] Reducing values from 2 chunks ... DONE
[10:49:31.725] future_lapply() ... DONE
, , C = cop.1

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

, , C = cop.2

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

, , C = cop.3

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

[10:49:31.726] getGlobalsAndPackagesXApply() ...
[10:49:31.726]  - future.globals: TRUE
[10:49:31.726] getGlobalsAndPackages() ...
[10:49:31.726] |  Searching for globals ...
[10:49:31.728] |  :  globals found: [3] ‘FUN’, ‘seq_len’, ‘max’
[10:49:31.728] |  Searching for globals ... DONE
[10:49:31.728] |  Resolving globals: FALSE
[10:49:31.728] |  Search for packages associated with the globals ...
[10:49:31.728] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.729] |  :  Packages: [1] ‘base’
[10:49:31.729] |  Search for packages associated with the globals ... DONE
[10:49:31.729] |  The total size of the 1 globals is 411 bytes (411 bytes)
[10:49:31.729] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:24, dim = 2:4))’) is 411 bytes There is one global: ‘FUN’ (411 bytes of class ‘function’)
[10:49:31.729] |  Packages after dropping 'base': [0] 
[10:49:31.729] |  globals: [1] ‘FUN’
[10:49:31.730] |  packages: [0] 
[10:49:31.730] getGlobalsAndPackages() ... done
[10:49:31.730]  - globals found/used: [n=1] ‘FUN’
[10:49:31.730]  - needed namespaces: [n=0] 
[10:49:31.730] Finding globals ... DONE
[10:49:31.730]  - use_args: TRUE
[10:49:31.730]  - Getting '...' globals ...
[10:49:31.731] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:31.731] |  recursive: 0
[10:49:31.731] |  length: 1
[10:49:31.731] |  elements: ‘...’
[10:49:31.731] |  'obj' is DotDotDotList
[10:49:31.731] |  resolve(obj, ...) ...
[10:49:31.731] |  resolve(obj, ...) ... done
[10:49:31.731] |  length: 0 (resolved future 1)
[10:49:31.731] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:31.731]    - '...' content: [n=0] 
[10:49:31.732] List of 1
[10:49:31.732]  $ ...: list()
[10:49:31.732]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.732]  - attr(*, "where")=List of 1
[10:49:31.732]   ..$ ...:<environment: 0x564d5a471e48> 
[10:49:31.732]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.732]  - attr(*, "resolved")= logi TRUE
[10:49:31.732]  - attr(*, "total_size")= num NA
[10:49:31.734]  - Getting '...' globals ... DONE
[10:49:31.736] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:31.736] List of 2
[10:49:31.736]  $ ...future.FUN:function (x)  
[10:49:31.736]  $ ...          : list()
[10:49:31.736]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.736]  - attr(*, "where")=List of 2
[10:49:31.736]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:31.736]   ..$ ...          :<environment: 0x564d5a471e48> 
[10:49:31.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.736]  - attr(*, "resolved")= logi FALSE
[10:49:31.736]  - attr(*, "total_size")= num 3672
[10:49:31.739] Packages to be attached in all futures: [n=0] 
[10:49:31.739] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.739] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.739] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.739] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.740] future_lapply() ...
[10:49:31.740] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.740] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.740] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.741] Number of chunks: 2
[10:49:31.741] getGlobalsAndPackagesXApply() ...
[10:49:31.741]  - future.globals: <name-value list> with names ‘list()’
[10:49:31.741]  - use_args: TRUE
[10:49:31.741] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:31.741] List of 2
[10:49:31.741]  $ ...          : list()
[10:49:31.741]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.741]  $ ...future.FUN:function (x)  
[10:49:31.741]  - attr(*, "where")=List of 2
[10:49:31.741]   ..$ ...          :<environment: 0x564d5a471e48> 
[10:49:31.741]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:49:31.741]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.741]  - attr(*, "resolved")= logi FALSE
[10:49:31.741]  - attr(*, "total_size")= num NA
[10:49:31.744] Packages to be attached in all futures: [n=0] 
[10:49:31.744] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.745] Number of futures (= number of chunks): 2
[10:49:31.745] Launching 2 futures (chunks) ...
[10:49:31.745] Chunk #1 of 2 ...
[10:49:31.745]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.745]  - seeds: <none>
[10:49:31.745]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.745] getGlobalsAndPackages() ...
[10:49:31.745] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.745] |  Resolving globals: FALSE
[10:49:31.746] |  Tweak future expression to call with '...' arguments ...
[10:49:31.746] |  :  {
[10:49:31.746] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.746] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.746] |  :      "# as a global variable                                         "
[10:49:31.746] |  :      do.call(function(...) {
[10:49:31.746] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:31.746] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:31.746] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:31.746] |  :          "# anonymous function.                                          "
[10:49:31.746] |  :          "#                                                              "
[10:49:31.746] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:31.746] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:31.746] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:31.746] |  :          "# global environment, which is where globals are written.      "
[10:49:31.746] |  :          penv <- env <- environment(...future.FUN)
[10:49:31.746] |  :          repeat {
[10:49:31.746] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:31.746] |  :                  emptyenv())) 
[10:49:31.746] |  :                  break
[10:49:31.746] |  :              penv <- env
[10:49:31.746] |  :              env <- parent.env(env)
[10:49:31.746] |  :          }
[10:49:31.746] |  :          if (identical(penv, globalenv())) {
[10:49:31.746] |  :              environment(...future.FUN) <- environment()
[10:49:31.746] |  :          }
[10:49:31.746] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:31.746] |  :              !isNamespace(penv)) {
[10:49:31.746] |  :              parent.env(penv) <- environment()
[10:49:31.746] |  :          }
[10:49:31.746] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:31.746] |  :          {
[10:49:31.746] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.746] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.746] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.746] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:31.746] |  :              }
[10:49:31.746] |  :              {
[10:49:31.746] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.746] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.746] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:31.746] |  :                  })
[10:49:31.746] |  :              }
[10:49:31.746] |  :          }
[10:49:31.746] |  :      }, args = future.call.arguments)
[10:49:31.746] |  :  }
[10:49:31.746] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.746] |  Search for packages associated with the globals ...
[10:49:31.746] |  :  Packages associated with globals: [0] 
[10:49:31.747] |  :  Packages: [0] 
[10:49:31.747] |  Search for packages associated with the globals ... DONE
[10:49:31.747] |  Packages after dropping 'base': [0] 
[10:49:31.747] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.747] |  packages: [0] 
[10:49:31.747] getGlobalsAndPackages() ... done
[10:49:31.747] run() for Future (‘Future’) ...
[10:49:31.748] |  state: ‘created’
[10:49:31.748] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.748] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.748] |  Using MulticoreFutureBackend ...
[10:49:31.748] |  :  Launching futures ...
[10:49:31.748] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.748] |  :  .  |  getFutureData() ...
[10:49:31.748] |  :  .  |  :  getFutureCore() ...
[10:49:31.748] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.748] |  :  .  |  :  getFutureCore() ... done
[10:49:31.749] |  :  .  |  :  getFutureCapture() ...
[10:49:31.749] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.749] |  :  .  |  :  getFutureContext() ...
[10:49:31.749] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.749] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.749] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.749] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.749] |  :  .  |  :  getFutureContext() ... done
[10:49:31.749] |  :  .  |  getFutureData() ... done
[10:49:31.750] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.750] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.752] |  :  .  |  MulticoreFuture started
[10:49:31.752] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.752] |  :  Launching futures ... done
[10:49:31.752] |  :  .  |  attachPackages() ...
[10:49:31.752] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.753] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.753] |  Using MulticoreFutureBackend ... done
[10:49:31.753] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.753] |  :  .  |  attachPackages() ... DONE
[10:49:31.753] Created future:
[10:49:31.753] |  :  .  |  attachPackages() ...
[10:49:31.753] |  :  .  |  :  packages: [n=0] 
[10:49:31.753] |  :  .  |  attachPackages() ... DONE
[10:49:31.754] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.754] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.755] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.755] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.756] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.756] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.756] |  :  .  |  :  .  |  New stack:
[10:49:31.765] readImmediateCondition() ...
[10:49:31.765]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.766]  - Number of RDS files: 0
[10:49:31.756] |  :  .  |  :  .  |  List of 1
[10:49:31.756] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.756] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.756] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.756] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.756] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.756] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.756] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.766] readImmediateCondition() ... DONE
[10:49:31.766] |  :  .  |  :  .  |  Old stack:
[10:49:31.753] MulticoreFuture:
[10:49:31.753] Label: ‘future_apply-1’
[10:49:31.753] Expression:
[10:49:31.753] {
[10:49:31.753]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.753]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.753]     "# as a global variable                                         "
[10:49:31.753]     do.call(function(...) {
[10:49:31.753]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:31.753]         "# without having an '...' argument. This means '...' is treated"
[10:49:31.753]         "# as a global variable. This may happen when FUN() is an       "
[10:49:31.753]         "# anonymous function.                                          "
[10:49:31.753]         "#                                                              "
[10:49:31.753]         "# If an anonymous function, we will make sure to restore the   "
[10:49:31.753]         "# function environment of FUN() to the calling environment.    "
[10:49:31.753]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:31.753]         "# global environment, which is where globals are written.      "
[10:49:31.753]         penv <- env <- environment(...future.FUN)
[10:49:31.753]         repeat {
[10:49:31.753]             if (identical(env, globalenv()) || identical(env, 
[10:49:31.753]                 emptyenv())) 
[10:49:31.753]                 break
[10:49:31.753]             penv <- env
[10:49:31.753]             env <- parent.env(env)
[10:49:31.753]         }
[10:49:31.753]         if (identical(penv, globalenv())) {
[10:49:31.753]             environment(...future.FUN) <- environment()
[10:49:31.753]         }
[10:49:31.753]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:31.753]             !isNamespace(penv)) {
[10:49:31.753]             parent.env(penv) <- environment()
[10:49:31.753]         }
[10:49:31.753]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:31.753]         {
[10:49:31.753]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.753]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.753]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.753]                 on.exit(options(oopts), add = TRUE)
[10:49:31.753]             }
[10:49:31.753]             {
[10:49:31.753]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.753]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.753]                   ...future.FUN(...future.X_jj, ...)
[10:49:31.753]                 })
[10:49:31.753]             }
[10:49:31.753]         }
[10:49:31.753]     }, args = future.call.arguments)
[10:49:31.753] }
[10:49:31.753] Lazy evaluation: FALSE
[10:49:31.753] Asynchronous evaluation: TRUE
[10:49:31.753] Local evaluation: TRUE
[10:49:31.753] Environment: R_GlobalEnv
[10:49:31.753] Capture standard output: TRUE
[10:49:31.753] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.753] Immediate condition classes: ‘immediateCondition’
[10:49:31.753] Globals: 5 objects totaling 677 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 411 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.753] Packages: <none>
[10:49:31.753] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.753] Resolved: FALSE
[10:49:31.753] Value: <not collected>
[10:49:31.753] Conditions captured: <none>
[10:49:31.753] Early signaling: FALSE
[10:49:31.753] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.753] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.766] Chunk #1 of 2 ... DONE
[10:49:31.767] Chunk #2 of 2 ...
[10:49:31.767]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.767]  - seeds: <none>
[10:49:31.767]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.767] getGlobalsAndPackages() ...
[10:49:31.767] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.768] |  Resolving globals: FALSE
[10:49:31.768] |  Tweak future expression to call with '...' arguments ...
[10:49:31.768] |  :  {
[10:49:31.768] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.768] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.768] |  :      "# as a global variable                                         "
[10:49:31.768] |  :      do.call(function(...) {
[10:49:31.768] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:31.768] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:31.768] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:31.768] |  :          "# anonymous function.                                          "
[10:49:31.768] |  :          "#                                                              "
[10:49:31.768] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:31.768] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:31.768] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:31.768] |  :          "# global environment, which is where globals are written.      "
[10:49:31.768] |  :          penv <- env <- environment(...future.FUN)
[10:49:31.768] |  :          repeat {
[10:49:31.768] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:31.768] |  :                  emptyenv())) 
[10:49:31.768] |  :                  break
[10:49:31.768] |  :              penv <- env
[10:49:31.768] |  :              env <- parent.env(env)
[10:49:31.768] |  :          }
[10:49:31.768] |  :          if (identical(penv, globalenv())) {
[10:49:31.768] |  :              environment(...future.FUN) <- environment()
[10:49:31.768] |  :          }
[10:49:31.768] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:31.768] |  :              !isNamespace(penv)) {
[10:49:31.768] |  :              parent.env(penv) <- environment()
[10:49:31.768] |  :          }
[10:49:31.768] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:31.768] |  :          {
[10:49:31.768] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.768] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.768] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.768] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:31.768] |  :              }
[10:49:31.768] |  :              {
[10:49:31.768] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.768] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.768] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:31.768] |  :                  })
[10:49:31.768] |  :              }
[10:49:31.768] |  :          }
[10:49:31.768] |  :      }, args = future.call.arguments)
[10:49:31.768] |  :  }
[10:49:31.770] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.771] |  Search for packages associated with the globals ...
[10:49:31.771] |  :  Packages associated with globals: [0] 
[10:49:31.772] |  :  Packages: [0] 
[10:49:31.772] |  Search for packages associated with the globals ... DONE
[10:49:31.772] |  Packages after dropping 'base': [0] 
[10:49:31.773] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.773] |  packages: [0] 
[10:49:31.766] |  :  .  |  :  .  |  List of 1
[10:49:31.766] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.766] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.766] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.766] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.766] |  :  .  |  :  .  |      ...)  
[10:49:31.766] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.766] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.766] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.766] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.766] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.766] |  :  .  |  :  .  |      ...)  
[10:49:31.766] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.766] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.773] getGlobalsAndPackages() ... done
[10:49:31.773] |  :  .  |  :  .  |  Not identical
[10:49:31.774] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.774] run() for Future (‘Future’) ...
[10:49:31.774] |  state: ‘created’
[10:49:31.774] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.774] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.774] |  Using MulticoreFutureBackend ...
[10:49:31.775] |  :  Launching futures ...
[10:49:31.775] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.775] |  :  .  |  getFutureData() ...
[10:49:31.775] |  :  .  |  :  getFutureCore() ...
[10:49:31.775] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.776] |  :  .  |  :  getFutureCore() ... done
[10:49:31.776] |  :  .  |  :  getFutureCapture() ...
[10:49:31.776] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.776] |  :  .  |  :  getFutureContext() ...
[10:49:31.776] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.776] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.777] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.777] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.777] |  :  .  |  :  getFutureContext() ... done
[10:49:31.777] |  :  .  |  getFutureData() ... done
[10:49:31.777] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.778] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.774] |  :  .  |  :  .  |  :  List of 2
[10:49:31.774] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.774] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.774] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.774] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.774] |  :  .  |  :  .  |  :      ...)  
[10:49:31.774] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.774] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.774] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.774] |  :  .  |  :  .  |  :      ...)  
[10:49:31.774] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.780] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.780] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.780] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.781] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.781] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.780] |  :  .  |  MulticoreFuture started
[10:49:31.781] |  :  .  |  :  .  List of future strategies:
[10:49:31.781] |  :  .  |  :  .  1. sequential:
[10:49:31.781] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.781] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.781] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.781] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.782] |  :  .  |  attachPackages() ...
[10:49:31.782] |  :  Launching futures ... done
[10:49:31.782] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.783] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.783] |  :  .  |  attachPackages() ... DONE
[10:49:31.783] |  Using MulticoreFutureBackend ... done
[10:49:31.784] |  :  .  |  attachPackages() ...
[10:49:31.784] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.782] |  :  .  |  :  .  List of 1
[10:49:31.782] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.782] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.782] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.782] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.782] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.782] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.782] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.784] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.784] |  :  .  |  :  packages: [n=0] 
[10:49:31.784] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.784] Created future:
[10:49:31.785] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.784] |  :  .  |  attachPackages() ... DONE
[10:49:31.785] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.785] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.785] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.785] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.785] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.785] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.786] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.786] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.786] |  :  .  |  assign_globals() ...
[10:49:31.786] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.787] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.787] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.788] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.788] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.788] |  :  .  |  :  .  |  New stack:
[10:49:31.788] |  :  .  |  :  .  |  List of 1
[10:49:31.788] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.788] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.788] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.788] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.788] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.788] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.788] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.792] |  :  .  |  :  .  |  Old stack:
[10:49:31.786] |  :  .  |  List of 5
[10:49:31.786] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.786] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.786] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.786] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:31.786] |  :  .  |    ..$ : int [1:4] 1 7 13 19
[10:49:31.786] |  :  .  |    ..$ : int [1:4] 2 8 14 20
[10:49:31.786] |  :  .  |    ..$ : int [1:4] 3 9 15 21
[10:49:31.786] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.786] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.786] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.786] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.786] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.786] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.786] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.786] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.786] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.786] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.786] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.786] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.796] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.797] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:31.797] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.797] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.797] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.797] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.797] |  :  .  |  assign_globals() ... done
[10:49:31.793] |  :  .  |  :  .  |  List of 1
[10:49:31.793] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.793] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[1[10:49:31.797] readImmediateCondition() ...
0:49:31.793] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.793] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.793] |  :  .  |  :  .  |      ...)  
[10:49:31.793] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.793] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.793] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.793] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.793] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.793] |  :  .  |  :  .  |      ...)  
[10:49:31.793] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.793] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.798] |  :  .  |  :  .  |  Not identical
[10:49:31.798]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.798] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.798]  - Number of RDS files: 0
[10:49:31.798] readImmediateCondition() ... DONE
[10:49:31.785] MulticoreFuture:
[10:49:31.785] Label: ‘future_apply-2’
[10:49:31.785] Expression:
[10:49:31.785] {
[10:49:31.785]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.785]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.785]     "# as a global variable                                         "
[10:49:31.785]     do.call(function(...) {
[10:49:31.785]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:31.785]         "# without having an '...' argument. This means '...' is treated"
[10:49:31.785]         "# as a global variable. This may happen when FUN() is an       "
[10:49:31.785]         "# anonymous function.                                          "
[10:49:31.785]         "#                                                              "
[10:49:31.785]         "# If an anonymous function, we will make sure to restore the   "
[10:49:31.785]         "# function environment of FUN() to the calling environment.    "
[10:49:31.785]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:31.785]         "# global environment, which is where globals are written.      "
[10:49:31.785]         penv <- env <- environment(...future.FUN)
[10:49:31.785]         repeat {
[10:49:31.785]             if (identical(env, globalenv()) || identical(env, 
[10:49:31.785]                 emptyenv())) 
[10:49:31.785]                 break
[10:49:31.785]             penv <- env
[10:49:31.785]             env <- parent.env(env)
[10:49:31.785]         }
[10:49:31.785]         if (identical(penv, globalenv())) {
[10:49:31.785]             environment(...future.FUN) <- environment()
[10:49:31.785]         }
[10:49:31.785]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:31.785]             !isNamespace(penv)) {
[10:49:31.785]             parent.env(penv) <- environment()
[10:49:31.785]         }
[10:49:31.785]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:31.785]         {
[10:49:31.785]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.785]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.785]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.785]                 on.exit(options(oopts), add = TRUE)
[10:49:31.785]             }
[10:49:31.785]             {
[10:49:31.785]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.785]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.785]                   ...future.FUN(...future.X_jj, ...)
[10:49:31.785]                 })
[10:49:31.785]             }
[10:49:31.785]         }
[10:49:31.785]     }, args = future.call.arguments)
[10:49:31.785] }
[10:49:31.785] Lazy evaluation: FALSE
[10:49:31.785] Asynchronous evaluation: TRUE
[10:49:31.785] Local evaluation: TRUE
[10:49:31.785] Environment: R_GlobalEnv
[10:49:31.785] Capture standard output: TRUE
[10:49:31.785] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.785] Immediate condition classes: ‘immediateCondition’
[10:49:31.785] Globals: 5 objects totaling 677 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 411 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.785] Packages: <none>
[10:49:31.785] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.785] Resolved: FALSE
[10:49:31.785] Value: <not collected>
[10:49:31.785] Conditions captured: <none>
[10:49:31.785] Early signaling: FALSE
[10:49:31.785] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.785] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.799] Chunk #2 of 2 ... DONE
[10:49:31.799] Launching 2 futures (chunks) ... DONE
[10:49:31.799] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.800] Resolving 2 futures (chunks) ...
[10:49:31.800] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.800] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.800] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.800] value() on list ...
[10:49:31.800] |  :  .  |  :  .  |  :  New stack:
[10:49:31.800] |  recursive: 0
[10:49:31.800] |  length: 2
[10:49:31.801] |  
[10:49:31.801] |  Number of remaining objects: 2
[10:49:31.801] |  checking value #1 ...
[10:49:31.801] |  :  'obj' is MulticoreFuture
[10:49:31.800] |  :  .  |  :  .  |  :  List of 1
[10:49:31.800] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.800] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.800] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.800] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.800] |  :  .  |  :  .  |  :      ...)  
[10:49:31.800] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.800] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.800] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.800] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.800] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.800] |  :  .  |  :  .  |  :      ...)  
[10:49:31.800] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.800] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.803] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.803] |  :  .  |  :  .  |  :  List of 1
[10:49:31.803] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.803] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.803] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.803] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.803] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.803] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.803] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.806] |  :  .  |  :  .  |  :  Not identical
[10:49:31.806] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.798] |  :  .  |  :  .  |  :  List of 2
[10:49:31.798] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.798] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.798] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.798] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.798] |  :  .  |  :  .  |  :      ...)  
[10:49:31.798] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.798] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.798] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.798] |  :  .  |  :  .  |  :      ...)  
[10:49:31.798] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.811] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.811] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.811] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.811] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.811] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.812] |  :  readImmediateCondition() ...
[10:49:31.806] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.806] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.806] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.806] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.806] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.806] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.806] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.806] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.806] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.806] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.806] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.812] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.811] |  :  .  |  :  .  List of future strategies:
[10:49:31.811] |  :  .  |  :  .  1. sequential:
[10:49:31.811] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.811] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.811] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.812] |  :   - Number of RDS files: 0
[10:49:31.812] |  :  readImmediateCondition() ... DONE
[10:49:31.812] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.812] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.812] |  checking value #1 ... done
[10:49:31.813] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.813] |  checking value #2 ...
[10:49:31.813] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.813] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.813] |  :  'obj' is MulticoreFuture
[10:49:31.813] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.813] |  :  .  |  :  .  |  1. multicore:
[10:49:31.813] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.813] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.813] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.812] |  :  .  |  :  .  List of 1
[10:49:31.812] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.812] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.812] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.812] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.812] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.812] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.812] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.816] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.817] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.817] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.813] |  :  .  |  :  .  |  List of 1
[10:49:31.813] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.813] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.813] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.813] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.813] |  :  .  |  :  .  |      ...)  
[10:49:31.813] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.813] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.813] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.813] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.813] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.813] |  :  .  |  :  .  |      ...)  
[10:49:31.813] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.813] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.817] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.817] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.818] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.818] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.818] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.818] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.818] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.818] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.818] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.818] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.818] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.818] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.818] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.818] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.819] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.819] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.819] |  :  .  |  assign_globals() ...
[10:49:31.823] |  :  readImmediateCondition() ...
[10:49:31.823] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.824] |  :   - Number of RDS files: 0
[10:49:31.824] |  :  readImmediateCondition() ... DONE
[10:49:31.824] |  checking value #2 ... done
[10:49:31.819] |  :  .  |  List of 5
[10:49:31.819] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.819] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.819] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.819] |  :  .  |   $ ...future.elements_ii    :List of 3
[10:49:31.819] |  :  .  |    ..$ : int [1:4] 4 10 16 22
[10:49:31.819] |  :  .  |    ..$ : int [1:4] 5 11 17 23
[10:49:31.819] |  :  .  |    ..$ : int [1:4] 6 12 18 24
[10:49:31.819] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.819] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.819] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.819] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.819] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.819] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.819] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.819] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.819] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.819] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.819] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.819] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.826] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.826] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:31.826] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.826] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.826] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.826] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.827] |  :  .  |  assign_globals() ... done
[10:49:31.829] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.829] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.829] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.829] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.829] |  :  .  |  :  .  |  :  New stack:
[10:49:31.829] |  :  .  |  :  .  |  :  List of 1
[10:49:31.829] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.829] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.829] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.829] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.829] |  :  .  |  :  .  |  :      ...)  
[10:49:31.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.829] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.829] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.829] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.829] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.829] |  :  .  |  :  .  |  :      ...)  
[10:49:31.829] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.829] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.832] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.834] |  Number of remaining objects: 2
[10:49:31.835] |  checking value #1 ...
[10:49:31.835] |  :  'obj' is MulticoreFuture
[10:49:31.835] |  :  readImmediateCondition() ...
[10:49:31.835] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.836] |  :   - Number of RDS files: 0
[10:49:31.836] |  :  readImmediateCondition() ... DONE
[10:49:31.836] |  :  MulticoreFuture #1
[10:49:31.836] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.836] |  :  .  nx: 2
[10:49:31.837] |  :  .  relay: TRUE
[10:49:31.837] |  :  .  stdout: TRUE
[10:49:31.837] |  :  .  signal: TRUE
[10:49:31.837] |  :  .  resignal: FALSE
[10:49:31.837] |  :  .  force: TRUE
[10:49:31.832] |  :  .  |  :  .  |  :  List of 1
[10:49:31.832] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.832] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.832] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.832] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.832] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.832] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.832] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.838] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.838] |  :  .  |  :  .  |  :  Not identical
[10:49:31.838] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.838] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.838] |  :  .  until=1
[10:49:31.838] |  :  .  relaying element #1
[10:49:31.838] |  :  .  result() for MulticoreFuture ...
[10:49:31.839] |  :  .  |  readImmediateCondition() ...
[10:49:31.840] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.840] |  :  .  |   - Number of RDS files: 0
[10:49:31.840] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.840] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.841] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.841] |  :  .  result() for MulticoreFuture ... done
[10:49:31.841] |  :  .  result() for MulticoreFuture ...
[10:49:31.841] |  :  .  result() for MulticoreFuture ... done
[10:49:31.842] |  :  .  result() for MulticoreFuture ...
[10:49:31.842] |  :  .  result() for MulticoreFuture ... done
[10:49:31.842] |  :  .  result() for MulticoreFuture ...
[10:49:31.842] |  :  .  result() for MulticoreFuture ... done
[10:49:31.843] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.843] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.843] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.843] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.843] |  :  .  result() for MulticoreFuture ...
[10:49:31.844] |  :  .  result() for MulticoreFuture ... done
[10:49:31.844] |  :  .  result() for MulticoreFuture ...
[10:49:31.844] |  :  .  result() for MulticoreFuture ... done
[10:49:31.844] |  :  .  value: <list>
[10:49:31.844] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.845] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.845] |  :  .  nx: 2
[10:49:31.845] |  :  .  relay: TRUE
[10:49:31.845] |  :  .  stdout: TRUE
[10:49:31.838] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.838] |  :  .  |  :  .  |  :  .   $ target :function (..., workers [10:49:31.845] |  :  .  signal: TRUE
= availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.838] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.838] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.838] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.838] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.838] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.838] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.838] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.838] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.838] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.846] |  :  .  resignal: FALSE
[10:49:31.846] |  :  .  force: TRUE
[10:49:31.846] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.846] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.846] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.846] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.846] |  :  .  until=2
[10:49:31.846] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.846] |  :  .  relaying element #2
[10:49:31.847] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.847] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.847] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.847] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.847] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.847] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.847] |  :  .  |  :  .  |  1. multicore:
[10:49:31.847] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.847] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.847] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.847] |  :  length: 1 (resolved future 1)
[10:49:31.847] |  checking value #1 ... done
[10:49:31.848] |  checking value #2 ...
[10:49:31.848] |  :  'obj' is MulticoreFuture
[10:49:31.847] |  :  .  |  :  .  |  List of 1
[10:49:31.847] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.847] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.847] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.847] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.847] |  :  .  |  :  .  |      ...)  
[10:49:31.847] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.847] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.847] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.847] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.847] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.847] |  :  .  |  :  .  |      ...)  
[10:49:31.847] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.847] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.851] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.851] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.851] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.851] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.851] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.851] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.852] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.852] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.852] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.852] |  :  readImmediateCondition() ...
[10:49:31.852] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.852] |  :   - Number of RDS files: 0
[10:49:31.852] |  :  readImmediateCondition() ... DONE
[10:49:31.853] |  :  MulticoreFuture #2
[10:49:31.853] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.853] |  :  .  nx: 2
[10:49:31.853] |  :  .  relay: TRUE
[10:49:31.853] |  :  .  stdout: TRUE
[10:49:31.853] |  :  .  signal: TRUE
[10:49:31.853] |  :  .  resignal: FALSE
[10:49:31.853] |  :  .  force: TRUE
[10:49:31.854] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.854] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.854] |  :  .  until=2
[10:49:31.854] |  :  .  relaying element #2
[10:49:31.854] |  :  .  result() for MulticoreFuture ...
[10:49:31.854] |  :  .  |  readImmediateCondition() ...
[10:49:31.855] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.855] |  :  .  |   - Number of RDS files: 0
[10:49:31.855] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.855] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.855] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.856] |  :  .  result() for MulticoreFuture ... done
[10:49:31.859] |  :  .  result() for MulticoreFuture ...
[10:49:31.859] |  :  .  result() for MulticoreFuture ... done
[10:49:31.860] |  :  .  result() for MulticoreFuture ...
[10:49:31.860] |  :  .  result() for MulticoreFuture ... done
[10:49:31.860] |  :  .  result() for MulticoreFuture ...
[10:49:31.860] |  :  .  result() for MulticoreFuture ... done
[10:49:31.860] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.860] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.860] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.860] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.861] |  :  .  result() for MulticoreFuture ...
[10:49:31.861] |  :  .  result() for MulticoreFuture ... done
[10:49:31.861] |  :  .  result() for MulticoreFuture ...
[10:49:31.861] |  :  .  result() for MulticoreFuture ... done
[10:49:31.861] |  :  .  value: <list>
[10:49:31.862] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.862] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.862] |  :  .  nx: 2
[10:49:31.862] |  :  .  relay: TRUE
[10:49:31.862] |  :  .  stdout: TRUE
[10:49:31.862] |  :  .  signal: TRUE
[10:49:31.862] |  :  .  resignal: FALSE
[10:49:31.862] |  :  .  force: TRUE
[10:49:31.862] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.863] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.863] |  :  .  until=2
[10:49:31.863] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.863] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.863] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.863] |  :  length: 0 (resolved future 2)
[10:49:31.863] |  checking value #2 ... done
[10:49:31.864] |  Relaying remaining futures ...
[10:49:31.864] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.864] |  :  .  nx: 2
[10:49:31.864] |  :  .  relay: TRUE
[10:49:31.864] |  :  .  stdout: TRUE
[10:49:31.864] |  :  .  signal: TRUE
[10:49:31.864] |  :  .  resignal: FALSE
[10:49:31.865] |  :  .  force: TRUE
[10:49:31.865] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.865] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.865] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.865] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.865] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.866] |  Relaying remaining futures ... done
[10:49:31.866] value() on list ... done
[10:49:31.866]  - Number of value chunks collected: 2
[10:49:31.866] Resolving 2 futures (chunks) ... DONE
[10:49:31.866] Reducing values from 2 chunks ...
[10:49:31.866]  - Number of values collected after concatenation: 6
[10:49:31.866]  - Number of values expected: 6
[10:49:31.866] Reducing values from 2 chunks ... DONE
[10:49:31.866] future_lapply() ... DONE
     [,1]       [,2]       [,3]      
[1,] integer,19 integer,21 integer,23
[2,] integer,20 integer,22 integer,24
- apply(X, MARGIN = <character>, ...) ...
[10:49:31.867] getGlobalsAndPackagesXApply() ...
[10:49:31.867]  - future.globals: TRUE
[10:49:31.867] getGlobalsAndPackages() ...
[10:49:31.867] |  Searching for globals ...
[10:49:31.868] |  :  globals found: [1] ‘FUN’
[10:49:31.869] |  Searching for globals ... DONE
[10:49:31.869] |  Resolving globals: FALSE
[10:49:31.869] |  Search for packages associated with the globals ...
[10:49:31.869] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.869] |  :  Packages: [1] ‘base’
[10:49:31.869] |  Search for packages associated with the globals ... DONE
[10:49:31.869] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:31.870] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:2, dim = 2:1, dimnames = list(rows = c("a",; "b"), NULL)))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:31.870] |  Packages after dropping 'base': [0] 
[10:49:31.870] |  globals: [1] ‘FUN’
[10:49:31.870] |  packages: [0] 
[10:49:31.870] getGlobalsAndPackages() ... done
[10:49:31.870]  - globals found/used: [n=1] ‘FUN’
[10:49:31.870]  - needed namespaces: [n=0] 
[10:49:31.871] Finding globals ... DONE
[10:49:31.871]  - use_args: TRUE
[10:49:31.871]  - Getting '...' globals ...
[10:49:31.871] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:31.871] |  recursive: 0
[10:49:31.871] |  length: 1
[10:49:31.871] |  elements: ‘...’
[10:49:31.872] |  'obj' is DotDotDotList
[10:49:31.872] |  resolve(obj, ...) ...
[10:49:31.872] |  resolve(obj, ...) ... done
[10:49:31.872] |  length: 0 (resolved future 1)
[10:49:31.872] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:31.872]    - '...' content: [n=0] 
[10:49:31.872] List of 1
[10:49:31.872]  $ ...: list()
[10:49:31.872]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.872]  - attr(*, "where")=List of 1
[10:49:31.872]   ..$ ...:<environment: 0x564d5ab2bb28> 
[10:49:31.872]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.872]  - attr(*, "resolved")= logi TRUE
[10:49:31.872]  - attr(*, "total_size")= num NA
[10:49:31.875]  - Getting '...' globals ... DONE
[10:49:31.875] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:31.875] List of 2
[10:49:31.875]  $ ...future.FUN:function (x)  
[10:49:31.875]  $ ...          : list()
[10:49:31.875]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.875]  - attr(*, "where")=List of 2
[10:49:31.875]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:31.875]   ..$ ...          :<environment: 0x564d5ab2bb28> 
[10:49:31.875]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.875]  - attr(*, "resolved")= logi FALSE
[10:49:31.875]  - attr(*, "total_size")= num 2547
[10:49:31.878] Packages to be attached in all futures: [n=0] 
[10:49:31.878] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.878] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.878] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.878] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.879] future_lapply() ...
[10:49:31.880] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.880] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.880] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.881] Number of chunks: 2
[10:49:31.881] getGlobalsAndPackagesXApply() ...
[10:49:31.881]  - future.globals: <name-value list> with names ‘list()’
[10:49:31.881]  - use_args: TRUE
[10:49:31.881] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:31.881] List of 2
[10:49:31.881]  $ ...          : list()
[10:49:31.881]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.881]  $ ...future.FUN:function (x)  
[10:49:31.881]  - attr(*, "where")=List of 2
[10:49:31.881]   ..$ ...          :<environment: 0x564d5ab2bb28> 
[10:49:31.881]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:31.881]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.881]  - attr(*, "resolved")= logi FALSE
[10:49:31.881]  - attr(*, "total_size")= num NA
[10:49:31.885] Packages to be attached in all futures: [n=0] 
[10:49:31.885] getGlobalsAndPackagesXApply() ... DONE
[10:49:31.885] Number of futures (= number of chunks): 2
[10:49:31.885] Launching 2 futures (chunks) ...
[10:49:31.885] Chunk #1 of 2 ...
[10:49:31.886]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.886]  - seeds: <none>
[10:49:31.886]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.886] getGlobalsAndPackages() ...
[10:49:31.886] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.886] |  Resolving globals: FALSE
[10:49:31.886] |  Tweak future expression to call with '...' arguments ...
[10:49:31.886] |  :  {
[10:49:31.886] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.886] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.886] |  :      "# as a global variable                                         "
[10:49:31.886] |  :      do.call(function(...) {
[10:49:31.886] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.886] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.886] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.886] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.886] |  :          }
[10:49:31.886] |  :          {
[10:49:31.886] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.886] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.886] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.886] |  :              })
[10:49:31.886] |  :          }
[10:49:31.886] |  :      }, args = future.call.arguments)
[10:49:31.886] |  :  }
[10:49:31.887] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.887] |  Search for packages associated with the globals ...
[10:49:31.887] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.887] |  :  Packages: [1] ‘base’
[10:49:31.887] |  Search for packages associated with the globals ... DONE
[10:49:31.888] |  Packages after dropping 'base': [0] 
[10:49:31.888] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.888] |  packages: [0] 
[10:49:31.888] getGlobalsAndPackages() ... done
[10:49:31.888] run() for Future (‘Future’) ...
[10:49:31.888] |  state: ‘created’
[10:49:31.888] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.888] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.888] |  Using MulticoreFutureBackend ...
[10:49:31.889] |  :  Launching futures ...
[10:49:31.889] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.889] |  :  .  |  getFutureData() ...
[10:49:31.889] |  :  .  |  :  getFutureCore() ...
[10:49:31.889] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.889] |  :  .  |  :  getFutureCore() ... done
[10:49:31.889] |  :  .  |  :  getFutureCapture() ...
[10:49:31.889] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.889] |  :  .  |  :  getFutureContext() ...
[10:49:31.889] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.890] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.890] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.890] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.890] |  :  .  |  :  getFutureContext() ... done
[10:49:31.890] |  :  .  |  getFutureData() ... done
[10:49:31.890] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.890] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.892] |  :  .  |  MulticoreFuture started
[10:49:31.893] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.893] |  :  Launching futures ... done
[10:49:31.893] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.893] |  :  .  |  attachPackages() ...
[10:49:31.893] |  Using MulticoreFutureBackend ... done
[10:49:31.893] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.893] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.894] Created future:
[10:49:31.894] |  :  .  |  attachPackages() ... DONE
[10:49:31.894] |  :  .  |  attachPackages() ...
[10:49:31.894] |  :  .  |  :  packages: [n=0] 
[10:49:31.894] |  :  .  |  attachPackages() ... DONE
[10:49:31.895] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.895] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.895] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.896] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.896] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.896] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.897] |  :  .  |  :  .  |  New stack:
[10:49:31.897] |  :  .  |  :  .  |  List of 1
[10:49:31.897] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.897] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.897] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.897] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.897] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.897] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.897] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.901] |  :  .  |  :  .  |  Old stack:
[10:49:31.906] readImmediateCondition() ...
[10:49:31.906]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.906]  - Number of RDS files: 0
[10:49:31.906] readImmediateCondition() ... DONE
[10:49:31.894] MulticoreFuture:
[10:49:31.894] Label: ‘future_apply-1’
[10:49:31.894] Expression:
[10:49:31.894] {
[10:49:31.894]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.894]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.894]     "# as a global variable                                         "
[10:49:31.894]     do.call(function(...) {
[10:49:31.894]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.894]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.894]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.894]             on.exit(options(oopts), add = TRUE)
[10:49:31.894]         }
[10:49:31.894]         {
[10:49:31.894]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.894]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.894]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.894]             })
[10:49:31.894]         }
[10:49:31.894]     }, args = future.call.arguments)
[10:49:31.894] }
[10:49:31.894] Lazy evaluation: FALSE
[10:49:31.894] Asynchronous evaluation: TRUE
[10:49:31.894] Local evaluation: TRUE
[10:49:31.894] Environment: R_GlobalEnv
[10:49:31.894] Capture standard output: TRUE
[10:49:31.894] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.894] Immediate condition classes: ‘immediateCondition’
[10:49:31.894] Globals: 5 objects totaling 391 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.894] Packages: <none>
[10:49:31.894] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.894] Resolved: FALSE
[10:49:31.894] Value: <not collected>
[10:49:31.894] Conditions captured: <none>
[10:49:31.894] Early signaling: FALSE
[10:49:31.894] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.894] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.907] Chunk #1 of 2 ... DONE
[10:49:31.907] Chunk #2 of 2 ...
[10:49:31.907]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:31.908]  - seeds: <none>
[10:49:31.908]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.908] getGlobalsAndPackages() ...
[10:49:31.908] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.908] |  Resolving globals: FALSE
[10:49:31.901] |  :  .  |  :  .  |  List of 1
[10:49:31.901] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.901] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.901] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.901] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.901] |  :  .  |  :  .  |      ...)  
[10:49:31.901] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.901] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.901] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.901] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.901] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.901] |  :  .  |  :  .  |      ...)  
[10:49:31.901] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.901] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.908] |  Tweak future expression to call with '...' arguments ...
[10:49:31.908] |  :  .  |  :  .  |  Not identical
[10:49:31.909] |  :  {
[10:49:31.909] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.909] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:31.909] |  :      "# as a global variable                                         "
[10:49:31.909] |  :      do.call(function(...) {
[10:49:31.909] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.909] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.909] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.909] |  :              on.exit(options(oopts), add = TRUE)
[10:49:31.909] |  :          }
[10:49:31.909] |  :          {
[10:49:31.909] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.909] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.909] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:31.909] |  :              })
[10:49:31.909] |  :          }
[10:49:31.909] |  :      }, args = future.call.arguments)
[10:49:31.909] |  :  }
[10:49:31.909] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.909] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:31.909] |  Search for packages associated with the globals ...
[10:49:31.909] |  :  Packages associated with globals: [1] ‘base’
[10:49:31.910] |  :  Packages: [1] ‘base’
[10:49:31.910] |  Search for packages associated with the globals ... DONE
[10:49:31.910] |  Packages after dropping 'base': [0] 
[10:49:31.911] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:31.911] |  packages: [0] 
[10:49:31.911] getGlobalsAndPackages() ... done
[10:49:31.911] run() for Future (‘Future’) ...
[10:49:31.911] |  state: ‘created’
[10:49:31.912] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.912] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.912] |  Using MulticoreFutureBackend ...
[10:49:31.912] |  :  Launching futures ...
[10:49:31.912] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.912] |  :  .  |  getFutureData() ...
[10:49:31.912] |  :  .  |  :  getFutureCore() ...
[10:49:31.913] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:31.913] |  :  .  |  :  getFutureCore() ... done
[10:49:31.913] |  :  .  |  :  getFutureCapture() ...
[10:49:31.913] |  :  .  |  :  getFutureCapture() ... done
[10:49:31.913] |  :  .  |  :  getFutureContext() ...
[10:49:31.913] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.913] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:31.914] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.914] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:31.914] |  :  .  |  :  getFutureContext() ... done
[10:49:31.914] |  :  .  |  getFutureData() ... done
[10:49:31.914] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.915] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:31.917] |  :  .  |  MulticoreFuture started
[10:49:31.917] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:31.918] |  :  Launching futures ... done
[10:49:31.918] |  :  .  |  attachPackages() ...
[10:49:31.918] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.918] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:31.918] |  Using MulticoreFutureBackend ... done
[10:49:31.918] run() for Future (‘MulticoreFuture’) ... done
[10:49:31.919] |  :  .  |  attachPackages() ... DONE
[10:49:31.919] |  :  .  |  attachPackages() ...
[10:49:31.919] Created future:
[10:49:31.919] |  :  .  |  :  packages: [n=0] 
[10:49:31.919] |  :  .  |  attachPackages() ... DONE
[10:49:31.909] |  :  .  |  :  .  |  :  List of 2
[10:49:31.909] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.909] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.909] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.909] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.909] |  :  .  |  :  .  |  :      ...)  
[10:49:31.909] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.909] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.909] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.909] |  :  .  |  :  .  |  :      ...)  
[10:49:31.909] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.920] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.921] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.921] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.921] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.921] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:31.921] |  :  .  |  :  .  List of future strategies:
[10:49:31.921] |  :  .  |  :  .  1. sequential:
[10:49:31.921] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.921] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.921] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.924] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.922] |  :  .  |  :  .  List of 1
[10:49:31.922] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.922] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.922] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.922] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.922] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.922] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.922] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.924] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.925] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.925] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.925] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.925] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.926] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.926] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.926] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.926] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.926] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.926] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.927] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.926] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.927] |  :  .  |  assign_globals() ...
[10:49:31.927] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.928] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:31.928] |  :  .  |  :  .  |  New stack:
[10:49:31.927] |  :  .  |  List of 5
[10:49:31.927] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.927] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.927] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.927] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.927] |  :  .  |    ..$ : int 1
[10:49:31.927] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.927] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.927] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.927] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.927] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.927] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.927] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.927] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.927] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.927] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.927] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.927] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.932] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.932] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.932] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.933] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.933] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.933] |  :  .  |  assign_globals() ... done
[10:49:31.928] |  :  .  |  :  .  |  List of 1
[10:49:31.928] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.928] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.928] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.928] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.928] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.928] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.928] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.935] |  :  .  |  :  .  |  Old stack:
[10:49:31.936] readImmediateCondition() ...
[10:49:31.936]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.937] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.937]  - Number of RDS files: 0
[10:49:31.937] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.937] readImmediateCondition() ... DONE
[10:49:31.937] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.938] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.938] |  :  .  |  :  .  |  :  New stack:
[10:49:31.919] MulticoreFuture:
[10:49:31.919] Label: ‘future_apply-2’
[10:49:31.919] Expression:
[10:49:31.919] {
[10:49:31.919]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:31.919]     "# expression in do.call(), because function called uses '...'  "
[10:49:31.919]     "# as a global variable                                         "
[10:49:31.919]     do.call(function(...) {
[10:49:31.919]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:31.919]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:31.919]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:31.919]             on.exit(options(oopts), add = TRUE)
[10:49:31.919]         }
[10:49:31.919]         {
[10:49:31.919]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:31.919]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:31.919]                 ...future.FUN(...future.X_jj, ...)
[10:49:31.919]             })
[10:49:31.919]         }
[10:49:31.919]     }, args = future.call.arguments)
[10:49:31.919] }
[10:49:31.919] Lazy evaluation: FALSE
[10:49:31.919] Asynchronous evaluation: TRUE
[10:49:31.919] Local evaluation: TRUE
[10:49:31.919] Environment: R_GlobalEnv
[10:49:31.919] Capture standard output: TRUE
[10:49:31.919] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:31.919] Immediate condition classes: ‘immediateCondition’
[10:49:31.919] Globals: 5 objects totaling 391 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:31.919] Packages: <none>
[10:49:31.919] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:31.919] Resolved: FALSE
[10:49:31.919] Value: <not collected>
[10:49:31.919] Conditions captured: <none>
[10:49:31.919] Early signaling: FALSE
[10:49:31.919] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:31.919] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:31.938] Chunk #2 of 2 ... DONE
[10:49:31.939] Launching 2 futures (chunks) ... DONE
[10:49:31.939] Resolving 2 futures (chunks) ...
[10:49:31.939] value() on list ...
[10:49:31.940] |  recursive: 0
[10:49:31.940] |  length: 2
[10:49:31.940] |  
[10:49:31.941] |  Number of remaining objects: 2
[10:49:31.941] |  checking value #1 ...
[10:49:31.941] |  :  'obj' is MulticoreFuture
[10:49:31.938] |  :  .  |  :  .  |  :  List of 1
[10:49:31.938] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.938] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.938] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.938] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.938] |  :  .  |  :  .  |  :      ...)  
[10:49:31.938] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.938] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.938] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.938] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.938] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.938] |  :  .  |  :  .  |  :      ...)  
[10:49:31.938] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.938] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.942] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.935] |  :  .  |  :  .  |  List of 1
[10:49:31.935] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.935] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.935] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.935] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.935] |  :  .  |  :  .  |      ...)  
[10:49:31.935] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.935] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.935] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.935] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.935] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.935] |  :  .  |  :  .  |      ...)  
[10:49:31.935] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.935] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.943] |  :  .  |  :  .  |  Not identical
[10:49:31.944] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:31.942] |  :  .  |  :  .  |  :  List of 1
[10:49:31.942] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.942] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.942] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.942] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.942] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.942] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.942] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.944] |  :  .  |  :  .  |  :  Not identical
[10:49:31.945] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.945] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.945] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.945] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.945] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.945] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.945] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.945] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.945] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.945] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.945] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.945] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.944] |  :  .  |  :  .  |  :  List of 2
[10:49:31.944] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.944] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.944] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.944] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.944] |  :  .  |  :  .  |  :      ...)  
[10:49:31.944] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.944] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.944] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.944] |  :  .  |  :  .  |  :      ...)  
[10:49:31.944] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.949] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.949] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.950] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.950] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.950] |  :  .  |  :  .  |  :  Formals differ
[10:49:31.950] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.950] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:31.950] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:31.950] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:31.950] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.950] |  :  .  |  :  .  |  1. multicore:
[10:49:31.950] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.950] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.950] |  :  .  |  :  .  |     - ca[10:49:31.950] |  :  .  |  :  .  plan(): Setting new future strategy stack:
ll: plan(strategy)
[10:49:31.950] |  :  .  |  :  .  List of future strategies:
[10:49:31.950] |  :  .  |  :  .  1. sequential:
[10:49:31.950] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:31.950] |  :  .  |  :  .     - tweaked: FALSE
[10:49:31.950] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.952] |  :  readImmediateCondition() ...
[10:49:31.952] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.952] |  :   - Number of RDS files: 0
[10:49:31.953] |  :  readImmediateCondition() ... DONE
[10:49:31.953] |  checking value #1 ... done
[10:49:31.950] |  :  .  |  :  .  |  List of 1
[10:49:31.950] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.950] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.950] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.950] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.950] |  :  .  |  :  .  |      ...)  
[10:49:31.950] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.950] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.950] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.950] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.950] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.950] |  :  .  |  :  .  |      ...)  
[10:49:31.950] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.950] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.953] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.953] |  checking value #2 ...
[10:49:31.953] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.954] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.954] |  :  'obj' is MulticoreFuture
[10:49:31.954] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.954] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.951] |  :  .  |  :  .  List of 1
[10:49:31.951] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.951] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.951] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.951] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.951] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.951] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.951] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.954] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.954] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.955] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.955] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:31.955] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.955] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:31.955] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:31.955] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:31.955] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.956] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.954] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.956] |  :  .  |  assign_globals() ...
[10:49:31.956] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.956] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.956] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.956] |  :  .  |  List of 5
[10:49:31.956] |  :  .  |   $ future.call.arguments    : list()
[10:49:31.956] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:31.956] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:31.956] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:31.956] |  :  .  |    ..$ : int 2
[10:49:31.956] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:31.956] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:31.956] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:31.956] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:31.956] |  :  .  |   - attr(*, "where")=List of 5
[10:49:31.956] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:31.956] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:31.956] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:31.956] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:31.956] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:31.956] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:31.956] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:31.964] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:31.964] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:31.964] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:31.964] |  :  readImmediateCondition() ...
[10:49:31.964] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:31.964] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:31.964] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.964] |  :  .  |  assign_globals() ... done
[10:49:31.965] |  :   - Number of RDS files: 0
[10:49:31.965] |  :  readImmediateCondition() ... DONE
[10:49:31.965] |  checking value #2 ... done
[10:49:31.967] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.967] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:31.967] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:31.967] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:31.967] |  :  .  |  :  .  |  :  New stack:
[10:49:31.967] |  :  .  |  :  .  |  :  List of 1
[10:49:31.967] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.967] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.967] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.967] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.967] |  :  .  |  :  .  |  :      ...)  
[10:49:31.967] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.967] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.967] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:31.967] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.967] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.967] |  :  .  |  :  .  |  :      ...)  
[10:49:31.967] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.967] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.970] |  :  .  |  :  .  |  :  Old stack:
[10:49:31.971] |  :  .  |  :  .  |  :  List of 1
[10:49:31.971] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.971] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.971] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.971] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.971] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.971] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.971] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.973] |  :  .  |  :  .  |  :  Not identical
[10:49:31.973] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:31.975] |  Number of remaining objects: 2
[10:49:31.976] |  checking value #1 ...
[10:49:31.976] |  :  'obj' is MulticoreFuture
[10:49:31.976] |  :  readImmediateCondition() ...
[10:49:31.976] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.977] |  :   - Number of RDS files: 0
[10:49:31.977] |  :  readImmediateCondition() ... DONE
[10:49:31.977] |  :  MulticoreFuture #1
[10:49:31.978] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.978] |  :  .  nx: 2
[10:49:31.978] |  :  .  relay: TRUE
[10:49:31.978] |  :  .  stdout: TRUE
[10:49:31.979] |  :  .  signal: TRUE
[10:49:31.979] |  :  .  resignal: FALSE
[10:49:31.979] |  :  .  force: TRUE
[10:49:31.979] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:31.980] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:31.980] |  :  .  until=1
[10:49:31.980] |  :  .  relaying element #1
[10:49:31.980] |  :  .  result() for MulticoreFuture ...
[10:49:31.973] |  :  .  |  :  .  |  :  .  List of 2
[10:49:31.973] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:31.973] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.973] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.973] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.973] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.973] |  :  .  |  :  .  |  :  .      ...)  
[10:49:31.973] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.973] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:31.973] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:31.973] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:31.981] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:31.981] |  :  .  |  readImmediateCondition() ...
[10:49:31.981] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:31.982] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.982] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:31.982] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:31.982] |  :  .  |   - Number of RDS files: 0
[10:49:31.982] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:31.982] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.982] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.982] |  :  .  |  :  .  |  List of future strategies:
[10:49:31.982] |  :  .  |  :  .  |  1. multicore:
[10:49:31.982] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:31.982] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:31.982] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:31.983] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.983] |  :  .  result() for MulticoreFuture ... done
[10:49:31.983] |  :  .  result() for MulticoreFuture ...
[10:49:31.983] |  :  .  result() for MulticoreFuture ... done
[10:49:31.983] |  :  .  result() for MulticoreFuture ...
[10:49:31.984] |  :  .  result() for MulticoreFuture ... done
[10:49:31.984] |  :  .  result() for MulticoreFuture ...
[10:49:31.984] |  :  .  result() for MulticoreFuture ... done
[10:49:31.984] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.984] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.985] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:31.985] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.985] |  :  .  result() for MulticoreFuture ...
[10:49:31.985] |  :  .  result() for MulticoreFuture ... done
[10:49:31.985] |  :  .  result() for MulticoreFuture ...
[10:49:31.986] |  :  .  result() for MulticoreFuture ... done
[10:49:31.986] |  :  .  value: <list>
[10:49:31.986] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.986] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:31.986] |  :  .  nx: 2
[10:49:31.987] |  :  .  relay: TRUE
[10:49:31.987] |  :  .  stdout: TRUE
[10:49:31.987] |  :  .  signal: TRUE
[10:49:31.987] |  :  .  resignal: FALSE
[10:49:31.987] |  :  .  force: TRUE
[10:49:31.987] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.988] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.988] |  :  .  until=2
[10:49:31.988] |  :  .  relaying element #2
[10:49:31.983] |  :  .  |  :  .  |  List of 1
[10:49:31.983] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(co[10:49:31.988] |  :  .  relayed: [n=2] TRUE, FALSE
nstraints = "multicore"), gc = FALSE, 
[10:49:31.983] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:31.983] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:31.983] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.983] |  :  .  |  :  .  |      ...)  
[10:49:31.983] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.983] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.983] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:31.983] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:31.983] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:31.983] |  :  .  |  :  .  |      ...)  
[10:49:31.983] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:31.983] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:31.988] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.988] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:31.988] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:31.988] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:31.989] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:31.989] |  :  length: 1 (resolved future 1)
[10:49:31.989] |  checking value #1 ... done
[10:49:31.989] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:31.989] |  checking value #2 ...
[10:49:31.989] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:31.989] |  :  'obj' is MulticoreFuture
[10:49:31.989] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:31.989] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:31.989] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.990] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:31.990] |  :  readImmediateCondition() ...
[10:49:31.990] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.990] |  :   - Number of RDS files: 0
[10:49:31.990] |  :  readImmediateCondition() ... DONE
[10:49:31.990] |  :  MulticoreFuture #2
[10:49:31.990] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.991] |  :  .  nx: 2
[10:49:31.991] |  :  .  relay: TRUE
[10:49:31.991] |  :  .  stdout: TRUE
[10:49:31.991] |  :  .  signal: TRUE
[10:49:31.991] |  :  .  resignal: FALSE
[10:49:31.991] |  :  .  force: TRUE
[10:49:31.991] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:31.991] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:31.991] |  :  .  until=2
[10:49:31.992] |  :  .  relaying element #2
[10:49:31.992] |  :  .  result() for MulticoreFuture ...
[10:49:31.992] |  :  .  |  readImmediateCondition() ...
[10:49:31.992] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:31.992] |  :  .  |   - Number of RDS files: 0
[10:49:31.993] |  :  .  |  readImmediateCondition() ... DONE
[10:49:31.993] |  :  .  |  result() for MulticoreFuture ...
[10:49:31.993] |  :  .  |  result() for MulticoreFuture ... done
[10:49:31.993] |  :  .  result() for MulticoreFuture ... done
[10:49:31.993] |  :  .  result() for MulticoreFuture ...
[10:49:31.994] |  :  .  result() for MulticoreFuture ... done
[10:49:31.994] |  :  .  result() for MulticoreFuture ...
[10:49:31.994] |  :  .  result() for MulticoreFuture ... done
[10:49:31.994] |  :  .  result() for MulticoreFuture ...
[10:49:31.994] |  :  .  result() for MulticoreFuture ... done
[10:49:31.994] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.995] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.995] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.995] |  :  value(<MulticoreFuture>, ...) ...
[10:49:31.995] |  :  .  result() for MulticoreFuture ...
[10:49:31.995] |  :  .  result() for MulticoreFuture ... done
[10:49:31.995] |  :  .  result() for MulticoreFuture ...
[10:49:31.996] |  :  .  result() for MulticoreFuture ... done
[10:49:31.996] |  :  .  value: <list>
[10:49:31.996] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:31.996] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:31.996] |  :  .  nx: 2
[10:49:31.996] |  :  .  relay: TRUE
[10:49:31.996] |  :  .  stdout: TRUE
[10:49:31.997] |  :  .  signal: TRUE
[10:49:31.997] |  :  .  resignal: FALSE
[10:49:31.997] |  :  .  force: TRUE
[10:49:31.997] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.997] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.997] |  :  .  until=2
[10:49:31.997] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.997] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.997] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:31.998] |  :  length: 0 (resolved future 2)
[10:49:31.998] |  checking value #2 ... done
[10:49:31.998] |  Relaying remaining futures ...
[10:49:31.998] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:31.998] |  :  .  nx: 2
[10:49:31.998] |  :  .  relay: TRUE
[10:49:31.998] |  :  .  stdout: TRUE
[10:49:31.998] |  :  .  signal: TRUE
[10:49:31.998] |  :  .  resignal: FALSE
[10:49:31.998] |  :  .  force: TRUE
[10:49:31.998] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.999] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:31.999] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:31.999] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:31.999] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:31.999] |  Relaying remaining futures ... done
[10:49:31.999] value() on list ... done
[10:49:31.999]  - Number of value chunks collected: 2
[10:49:31.999] Resolving 2 futures (chunks) ... DONE
[10:49:31.999] Reducing values from 2 chunks ...
[10:49:32.000]  - Number of values collected after concatenation: 2
[10:49:32.001]  - Number of values expected: 2
[10:49:32.001] Reducing values from 2 chunks ... DONE
[10:49:32.002] future_lapply() ... DONE
a b 
1 2 
- apply(X, ...) - dim(X) > 2 ...
[10:49:32.002] getGlobalsAndPackagesXApply() ...
[10:49:32.002]  - future.globals: TRUE
[10:49:32.002] getGlobalsAndPackages() ...
[10:49:32.002] |  Searching for globals ...
[10:49:32.004] |  :  globals found: [1] ‘FUN’
[10:49:32.004] |  Searching for globals ... DONE
[10:49:32.004] |  Resolving globals: FALSE
[10:49:32.004] |  Search for packages associated with the globals ...
[10:49:32.004] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.005] |  :  Packages: [1] ‘base’
[10:49:32.005] |  Search for packages associated with the globals ... DONE
[10:49:32.005] |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:32.005] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:12, dim = c(2L, 2L, 3L)))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:32.006] |  Packages after dropping 'base': [0] 
[10:49:32.006] |  globals: [1] ‘FUN’
[10:49:32.006] |  packages: [0] 
[10:49:32.006] getGlobalsAndPackages() ... done
[10:49:32.006]  - globals found/used: [n=1] ‘FUN’
[10:49:32.006]  - needed namespaces: [n=0] 
[10:49:32.006] Finding globals ... DONE
[10:49:32.006]  - use_args: TRUE
[10:49:32.007]  - Getting '...' globals ...
[10:49:32.007] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:32.007] |  recursive: 0
[10:49:32.007] |  length: 1
[10:49:32.007] |  elements: ‘...’
[10:49:32.008] |  'obj' is DotDotDotList
[10:49:32.008] |  resolve(obj, ...) ...
[10:49:32.008] |  resolve(obj, ...) ... done
[10:49:32.008] |  length: 0 (resolved future 1)
[10:49:32.008] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:32.008]    - '...' content: [n=0] 
[10:49:32.008] List of 1
[10:49:32.008]  $ ...: list()
[10:49:32.008]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.008]  - attr(*, "where")=List of 1
[10:49:32.008]   ..$ ...:<environment: 0x564d5bd5e200> 
[10:49:32.008]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.008]  - attr(*, "resolved")= logi TRUE
[10:49:32.008]  - attr(*, "total_size")= num NA
[10:49:32.011]  - Getting '...' globals ... DONE
[10:49:32.011] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:32.011] List of 2
[10:49:32.011]  $ ...future.FUN:function (x)  
[10:49:32.011]  $ ...          : list()
[10:49:32.011]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.011]  - attr(*, "where")=List of 2
[10:49:32.011]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:32.011]   ..$ ...          :<environment: 0x564d5bd5e200> 
[10:49:32.011]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.011]  - attr(*, "resolved")= logi FALSE
[10:49:32.011]  - attr(*, "total_size")= num 2274
[10:49:32.014] Packages to be attached in all futures: [n=0] 
[10:49:32.014] getGlobalsAndPackagesXApply() ... DONE
[10:49:32.014] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.014] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.014] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.015] future_lapply() ...
[10:49:32.015] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.015] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.015] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.016] Number of chunks: 2
[10:49:32.016] getGlobalsAndPackagesXApply() ...
[10:49:32.016]  - future.globals: <name-value list> with names ‘list()’
[10:49:32.016]  - use_args: TRUE
[10:49:32.016] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:32.016] List of 2
[10:49:32.016]  $ ...          : list()
[10:49:32.016]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.016]  $ ...future.FUN:function (x)  
[10:49:32.016]  - attr(*, "where")=List of 2
[10:49:32.016]   ..$ ...          :<environment: 0x564d5bd5e200> 
[10:49:32.016]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:32.016]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.016]  - attr(*, "resolved")= logi FALSE
[10:49:32.016]  - attr(*, "total_size")= num NA
[10:49:32.020] Packages to be attached in all futures: [n=0] 
[10:49:32.020] getGlobalsAndPackagesXApply() ... DONE
[10:49:32.020] Number of futures (= number of chunks): 2
[10:49:32.020] Launching 2 futures (chunks) ...
[10:49:32.022] Chunk #1 of 2 ...
[10:49:32.022]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:32.022]  - seeds: <none>
[10:49:32.022]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.022] getGlobalsAndPackages() ...
[10:49:32.022] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.022] |  Resolving globals: FALSE
[10:49:32.022] |  Tweak future expression to call with '...' arguments ...
[10:49:32.023] |  :  {
[10:49:32.023] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.023] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:32.023] |  :      "# as a global variable                                         "
[10:49:32.023] |  :      do.call(function(...) {
[10:49:32.023] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.023] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.023] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.023] |  :              on.exit(options(oopts), add = TRUE)
[10:49:32.023] |  :          }
[10:49:32.023] |  :          {
[10:49:32.023] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.023] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.023] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:32.023] |  :              })
[10:49:32.023] |  :          }
[10:49:32.023] |  :      }, args = future.call.arguments)
[10:49:32.023] |  :  }
[10:49:32.023] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:32.023] |  Search for packages associated with the globals ...
[10:49:32.023] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.024] |  :  Packages: [1] ‘base’
[10:49:32.024] |  Search for packages associated with the globals ... DONE
[10:49:32.024] |  Packages after dropping 'base': [0] 
[10:49:32.024] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.024] |  packages: [0] 
[10:49:32.024] getGlobalsAndPackages() ... done
[10:49:32.024] run() for Future (‘Future’) ...
[10:49:32.024] |  state: ‘created’
[10:49:32.025] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.025] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.025] |  Using MulticoreFutureBackend ...
[10:49:32.025] |  :  Launching futures ...
[10:49:32.025] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.025] |  :  .  |  getFutureData() ...
[10:49:32.025] |  :  .  |  :  getFutureCore() ...
[10:49:32.025] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:32.025] |  :  .  |  :  getFutureCore() ... done
[10:49:32.026] |  :  .  |  :  getFutureCapture() ...
[10:49:32.026] |  :  .  |  :  getFutureCapture() ... done
[10:49:32.026] |  :  .  |  :  getFutureContext() ...
[10:49:32.026] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.026] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:32.026] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.026] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:32.026] |  :  .  |  :  getFutureContext() ... done
[10:49:32.027] |  :  .  |  getFutureData() ... done
[10:49:32.027] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.027] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.029] |  :  .  |  MulticoreFuture started
[10:49:32.030] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.030] |  :  .  |  attachPackages() ...
[10:49:32.030] |  :  Launching futures ... done
[10:49:32.030] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:32.030] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.031] |  Using MulticoreFutureBackend ... done
[10:49:32.031] |  :  .  |  attachPackages() ... DONE
[10:49:32.031] |  :  .  |  attachPackages() ...
[10:49:32.031] run() for Future (‘MulticoreFuture’) ... done
[10:49:32.031] |  :  .  |  :  packages: [n=0] 
[10:49:32.031] Created future:
[10:49:32.031] |  :  .  |  attachPackages() ... DONE
[10:49:32.032] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.032] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.033] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.033] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.034] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.034] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:32.034] |  :  .  |  :  .  |  New stack:
[10:49:32.034] |  :  .  |  :  .  |  List of 1
[10:49:32.034] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.034] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.034] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.034] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.034] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.034] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.034] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.039] |  :  .  |  :  .  |  Old stack:
[10:49:32.043] readImmediateCondition() ...
[10:49:32.043]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.044]  - Number of RDS files: 0
[10:49:32.044] readImmediateCondition() ... DONE
[10:49:32.039] |  :  .  |  :  .  |  List of 1
[10:49:32.039] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.039] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.039] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.039] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.039] |  :  .  |  :  .  |      ...)  
[10:49:32.039] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.039] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.039] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.039] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.039] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.039] |  :  .  |  :  .  |      ...)  
[10:49:32.039] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.039] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.044] |  :  .  |  :  .  |  Not identical
[10:49:32.044] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:32.031] MulticoreFuture:
[10:49:32.031] Label: ‘future_apply-1’
[10:49:32.031] Expression:
[10:49:32.031] {
[10:49:32.031]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.031]     "# expression in do.call(), because function called uses '...'  "
[10:49:32.031]     "# as a global variable                                         "
[10:49:32.031]     do.call(function(...) {
[10:49:32.031]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.031]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.031]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.031]             on.exit(options(oopts), add = TRUE)
[10:49:32.031]         }
[10:49:32.031]         {
[10:49:32.031]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.031]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.031]                 ...future.FUN(...future.X_jj, ...)
[10:49:32.031]             })
[10:49:32.031]         }
[10:49:32.031]     }, args = future.call.arguments)
[10:49:32.031] }
[10:49:32.031] Lazy evaluation: FALSE
[10:49:32.031] Asynchronous evaluation: TRUE
[10:49:32.031] Local evaluation: TRUE
[10:49:32.031] Environment: R_GlobalEnv
[10:49:32.031] Capture standard output: TRUE
[10:49:32.031] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:32.031] Immediate condition classes: ‘immediateCondition’
[10:49:32.031] Globals: 5 objects totaling 450 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 102 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:32.031] Packages: <none>
[10:49:32.031] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:32.031] Resolved: FALSE
[10:49:32.031] Value: <not collected>
[10:49:32.031] Conditions captured: <none>
[10:49:32.031] Early signaling: FALSE
[10:49:32.031] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:32.031] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.045] Chunk #1 of 2 ... DONE
[10:49:32.045] Chunk #2 of 2 ...
[10:49:32.045]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:32.045]  - seeds: <none>
[10:49:32.045]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.045] getGlobalsAndPackages() ...
[10:49:32.046] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.046] |  Resolving globals: FALSE
[10:49:32.046] |  Tweak future expression to call with '...' arguments ...
[10:49:32.046] |  :  {
[10:49:32.046] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.046] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:32.046] |  :      "# as a global variable                                         "
[10:49:32.046] |  :      do.call(function(...) {
[10:49:32.046] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.046] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.046] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.046] |  :              on.exit(options(oopts), add = TRUE)
[10:49:32.046] |  :          }
[10:49:32.046] |  :          {
[10:49:32.046] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.046] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.046] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:32.046] |  :              })
[10:49:32.046] |  :          }
[10:49:32.046] |  :      }, args = future.call.arguments)
[10:49:32.046] |  :  }
[10:49:32.047] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:32.047] |  Search for packages associated with the globals ...
[10:49:32.047] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.048] |  :  Packages: [1] ‘base’
[10:49:32.048] |  Search for packages associated with the globals ... DONE
[10:49:32.048] |  Packages after dropping 'base': [0] 
[10:49:32.048] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.048] |  packages: [0] 
[10:49:32.048] getGlobalsAndPackages() ... done
[10:49:32.049] run() for Future (‘Future’) ...
[10:49:32.049] |  state: ‘created’
[10:49:32.049] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.049] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.049] |  Using MulticoreFutureBackend ...
[10:49:32.050] |  :  Launching futures ...
[10:49:32.050] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.050] |  :  .  |  getFutureData() ...
[10:49:32.050] |  :  .  |  :  getFutureCore() ...
[10:49:32.050] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:32.050] |  :  .  |  :  getFutureCore() ... done
[10:49:32.051] |  :  .  |  :  getFutureCapture() ...
[10:49:32.051] |  :  .  |  :  getFutureCapture() ... done
[10:49:32.051] |  :  .  |  :  getFutureContext() ...
[10:49:32.051] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.051] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:32.051] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.051] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:32.052] |  :  .  |  :  getFutureContext() ... done
[10:49:32.052] |  :  .  |  getFutureData() ... done
[10:49:32.052] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.052] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.044] |  :  .  |  :  .  |  :  List of 2
[10:49:32.044] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.044] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.044] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.044] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.044] |  :  .  |  :  .  |  :      ...)  
[10:49:32.044] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.044] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.044] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.044] |  :  .  |  :  .  |  :      ...)  
[10:49:32.044] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.054] |  :  .  |  MulticoreFuture started
[10:49:32.055] |  :  .  |  :  .  |  :  Formals differ
[10:49:32.055] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.055] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:32.055] |  :  Launching futures ... done
[10:49:32.055] |  :  .  |  attachPackages() ...
[10:49:32.055] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:32.056] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:32.056] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.056] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:32.056] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:32.056] |  Using MulticoreFutureBackend ... done
[10:49:32.056] run() for Future (‘MulticoreFuture’) ... done
[10:49:32.056] |  :  .  |  attachPackages() ... DONE
[10:49:32.056] |  :  .  |  attachPackages() ...
[10:49:32.057] Created future:
[10:49:32.057] |  :  .  |  :  packages: [n=0] 
[10:49:32.057] |  :  .  |  attachPackages() ... DONE
[10:49:32.056] |  :  .  |  :  .  List of future strategies:
[10:49:32.056] |  :  .  |  :  .  1. sequential:
[10:49:32.056] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.056] |  :  .  |  :  .     - tweaked: FALSE
[10:49:32.056] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.058] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.058] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.059] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.059] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.060] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.060] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:32.060] |  :  .  |  :  .  |  New stack:
[10:49:32.057] |  :  .  |  :  .  List of 1
[10:49:32.057] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.057] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.057] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.057] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.057] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.057] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.057] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.061] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.062] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.062] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.062] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.062] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.062] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:32.063] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.063] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:32.063] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.063] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.063] |  :  .  |  assign_globals() ...
[10:49:32.060] |  :  .  |  :  .  |  List of 1
[10:49:32.060] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.060] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.060] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.060] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.060] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.060] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.060] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.064] |  :  .  |  :  .  |  Old stack:
[10:49:32.063] |  :  .  |  List of 5
[10:49:32.063] |  :  .  |   $ future.call.arguments    : list()
[10:49:32.063] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.063] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:32.063] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:32.063] |  :  .  |    ..$ : int [1:2, 1:3] 1 3 5 7 9 11
[10:49:32.063] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:32.063] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:32.063] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:32.063] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:32.063] |  :  .  |   - attr(*, "where")=List of 5
[10:49:32.063] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:32.063] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:32.063] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:32.063] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:32.063] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:32.063] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.063] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:32.069] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:32.069] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:32.069] readImmediateCondition() ...
[10:49:32.069] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:32.069] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:32.069]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.069] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:32.070] |  :  .  |  assign_globals() ... done
[10:49:32.070]  - Number of RDS files: 0
[10:49:32.070] readImmediateCondition() ... DONE
[10:49:32.057] MulticoreFuture:
[10:49:32.057] Label: ‘future_apply-2’
[10:49:32.057] Expression:
[10:49:32.057] {
[10:49:32.057]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.057]     "# expression in do.call(), because function called uses '...'  "
[10:49:32.057]     "# as a global variable                                         "
[10:49:32.057]     do.call(function(...) {
[10:49:32.057]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.057]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.057]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.057]             on.exit(options(oopts), add = TRUE)
[10:49:32.057]         }
[10:49:32.057]         {
[10:49:32.057]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.057]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.057]                 ...future.FUN(...future.X_jj, ...)
[10:49:32.057]             })
[10:49:32.057]         }
[10:49:32.057]     }, args = future.call.arguments)
[10:49:32.057] }
[10:49:32.057] Lazy evaluation: FALSE
[10:49:32.057] Asynchronous evaluation: TRUE
[10:49:32.057] Local evaluation: TRUE
[10:49:32.057] Environment: R_GlobalEnv
[10:49:32.057] Capture standard output: TRUE
[10:49:32.057] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:32.057] Immediate condition classes: ‘immediateCondition’
[10:49:32.057] Globals: 5 objects totaling 450 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 102 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:32.057] Packages: <none>
[10:49:32.057] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:32.057] Resolved: FALSE
[10:49:32.057] Value: <not collected>
[10:49:32.057] Conditions captured: <none>
[10:49:32.057] Early signaling: FALSE
[10:49:32.057] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:32.057] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.071] Chunk #2 of 2 ... DONE
[10:49:32.071] Launching 2 futures (chunks) ... DONE
[10:49:32.071] Resolving 2 futures (chunks) ...
[10:49:32.071] value() on list ...
[10:49:32.072] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.072] |  recursive: 0
[10:49:32.072] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.072] |  length: 2
[10:49:32.072] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.072] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:32.072] |  
[10:49:32.072] |  :  .  |  :  .  |  :  New stack:
[10:49:32.072] |  Number of remaining objects: 2
[10:49:32.072] |  checking value #1 ...
[10:49:32.073] |  :  'obj' is MulticoreFuture
[10:49:32.064] |  :  .  |  :  .  |  List of 1
[10:49:32.064] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.064] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.064] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.064] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.064] |  :  .  |  :  .  |      ...)  
[10:49:32.064] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.064] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.064] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.064] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.064] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.064] |  :  .  |  :  .  |      ...)  
[10:49:32.064] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.064] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.077] |  :  .  |  :  .  |  Not identical
[10:49:32.077] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:32.083] |  :  readImmediateCondition() ...
[10:49:32.083] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.084] |  :   - Number of RDS files: 0
[10:49:32.084] |  :  readImmediateCondition() ... DONE
[10:49:32.084] |  checking value #1 ... done
[10:49:32.084] |  checking value #2 ...
[10:49:32.084] |  :  'obj' is MulticoreFuture
[10:49:32.077] |  :  .  |  :  .  |  :  List of 2
[10:49:32.077] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.077] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.077] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.077] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.077] |  :  .  |  :  .  |  :      ...)  
[10:49:32.077] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.077] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.077] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.077] |  :  .  |  :  .  |  :      ...)  
[10:49:32.077] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.087] |  :  .  |  :  .  |  :  Formals differ
[10:49:32.087] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:32.087] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:32.087] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:32.087] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:32.087] |  :  .  |  :  .  List of future strategies:
[10:49:32.087] |  :  .  |  :  .  1. sequential:
[10:49:32.087] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.087] |  :  .  |  :  .     - tweaked: FALSE
[10:49:32.087] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.088] |  :  .  |  :  .  List of 1
[10:49:32.088] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.088] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.088] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.088] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.088] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.088] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.088] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.091] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.091] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.091] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.091] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.091] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.092] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:32.092] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.092] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:32.092] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.092] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.092] |  :  .  |  assign_globals() ...
[10:49:32.095] |  :  readImmediateCondition() ...
[10:49:32.095] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.095] |  :   - Number of RDS files: 0
[10:49:32.096] |  :  readImmediateCondition() ... DONE
[10:49:32.096] |  checking value #2 ... done
[10:49:32.106] |  Number of remaining objects: 2
[10:49:32.106] |  checking value #1 ...
[10:49:32.107] |  :  'obj' is MulticoreFuture
[10:49:32.117] |  :  readImmediateCondition() ...
[10:49:32.117] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.118] |  :   - Number of RDS files: 0
[10:49:32.118] |  :  readImmediateCondition() ... DONE
[10:49:32.118] |  checking value #1 ... done
[10:49:32.118] |  checking value #2 ...
[10:49:32.118] |  :  'obj' is MulticoreFuture
[10:49:32.072] |  :  .  |  :  .  |  :  List of 1
[10:49:32.072] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.072] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.072] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.072] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.072] |  :  .  |  :  .  |  :      ...)  
[10:49:32.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.072] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.072] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.072] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.072] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.072] |  :  .  |  :  .  |  :      ...)  
[10:49:32.072] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.072] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.123] |  :  .  |  :  .  |  :  Old stack:
[10:49:32.123] |  :  .  |  :  .  |  :  List of 1
[10:49:32.123] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.123] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.123] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.123] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.123] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.123] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.123] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.125] |  :  .  |  :  .  |  :  Not identical
[10:49:32.126] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:32.129] |  :  readImmediateCondition() ...
[10:49:32.129] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.129] |  :   - Number of RDS files: 0
[10:49:32.130] |  :  readImmediateCondition() ... DONE
[10:49:32.126] |  :  .  |  :  .  |  :  .  List of 2
[10:49:32.126] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.126] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.126] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.126] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.126] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.126] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.126] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.126] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.126] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.126] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.130] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:32.130] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:32.130] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:32.131] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:32.131] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:32.131] |  :  .  |  :  .  |  List of future strategies:
[10:49:32.131] |  :  .  |  :  .  |  1. multicore:
[10:49:32.131] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.131] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:32.131] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:32.130] |  checking value #2 ... done
[10:49:32.131] |  :  .  |  :  .  |  List of 1
[10:49:32.131] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.131] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.131] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.131] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.131] |  :  .  |  :  .  |      ...)  
[10:49:32.131] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.131] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.131] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.131] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.131] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.131] |  :  .  |  :  .  |      ...)  
[10:49:32.131] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.131] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.134] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.134] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.134] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.135] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.135] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.135] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:32.135] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.135] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.135] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.143] |  Number of remaining objects: 2
[10:49:32.144] |  checking value #1 ...
[10:49:32.144] |  :  'obj' is MulticoreFuture
[10:49:32.145] |  :  readImmediateCondition() ...
[10:49:32.145] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.146] |  :   - Number of RDS files: 0
[10:49:32.146] |  :  readImmediateCondition() ... DONE
[10:49:32.146] |  :  MulticoreFuture #1
[10:49:32.147] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:32.147] |  :  .  nx: 2
[10:49:32.147] |  :  .  relay: TRUE
[10:49:32.147] |  :  .  stdout: TRUE
[10:49:32.148] |  :  .  signal: TRUE
[10:49:32.148] |  :  .  resignal: FALSE
[10:49:32.092] |  :  .  |  List of 5
[10:49:32.092] |  :  .  |   $ future.call.arguments    : list()
[10:49:32.092] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.092] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:32.092] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:32.092] |  :  .  |    ..$ : int [1:2, 1:3] 2 4 6 8 10 12
[10:49:32.092] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:32.092] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:32.092] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:32.092] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:32.092] |  :  .  |   - attr(*, "where")=List of 5
[10:49:32.092] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:32.092] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:32.092] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:32.092] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:32.092] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:32.092] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.092] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:32.148] |  :  .  force: TRUE
[10:49:32.148] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:32.149] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:32.149] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:32.149] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:32.149] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:32.149] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:32.149] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:32.149] |  :  .  |  assign_globals() ... done
[10:49:32.149] |  :  .  until=1
[10:49:32.149] |  :  .  relaying element #1
[10:49:32.150] |  :  .  result() for MulticoreFuture ...
[10:49:32.151] |  :  .  |  readImmediateCondition() ...
[10:49:32.151] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.151] |  :  .  |   - Number of RDS files: 0
[10:49:32.152] |  :  .  |  readImmediateCondition() ... DONE
[10:49:32.152] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.152] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.152] |  :  .  |  result() for MulticoreFuture ...
[10:49:32.152] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.152] |  :  .  |  result() for MulticoreFuture ... done
[10:49:32.152] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:32.152] |  :  .  |  :  .  |  :  New stack:
[10:49:32.152] |  :  .  result() for MulticoreFuture ... done
[10:49:32.153] |  :  .  result() for MulticoreFuture ...
[10:49:32.153] |  :  .  result() for MulticoreFuture ... done
[10:49:32.153] |  :  .  result() for MulticoreFuture ...
[10:49:32.154] |  :  .  result() for MulticoreFuture ... done
[10:49:32.154] |  :  .  result() for MulticoreFuture ...
[10:49:32.154] |  :  .  result() for MulticoreFuture ... done
[10:49:32.154] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.155] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.155] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:32.155] |  :  value(<MulticoreFuture>, ...) ...
[10:49:32.156] |  :  .  result() for MulticoreFuture ...
[10:49:32.156] |  :  .  result() for MulticoreFuture ... done
[10:49:32.156] |  :  .  result() for MulticoreFuture ...
[10:49:32.156] |  :  .  result() for MulticoreFuture ... done
[10:49:32.157] |  :  .  value: <list>
[10:49:32.157] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:32.153] |  :  .  |  :  .  |  :  List of 1
[10:49:32.153] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.153] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.fram[10:49:32.157] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
e())  
[10:49:32.153] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.153] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.153] |  :  .  |  :  .  |  :      ...)  
[10:49:32.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.153] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.153] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.153] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.153] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.153] |  :  .  |  :  .  |  :      ...)  
[10:49:32.153] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.153] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.157] |  :  .  |  :  .  |  :  Old stack:
[10:49:32.157] |  :  .  nx: 2
[10:49:32.158] |  :  .  relay: TRUE
[10:49:32.158] |  :  .  stdout: TRUE
[10:49:32.158] |  :  .  signal: TRUE
[10:49:32.158] |  :  .  resignal: FALSE
[10:49:32.159] |  :  .  force: TRUE
[10:49:32.159] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.159] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.159] |  :  .  until=2
[10:49:32.159] |  :  .  relaying element #2
[10:49:32.159] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.160] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.160] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:32.160] |  :  length: 1 (resolved future 1)
[10:49:32.160] |  checking value #1 ... done
[10:49:32.160] |  checking value #2 ...
[10:49:32.161] |  :  'obj' is MulticoreFuture
[10:49:32.158] |  :  .  |  :  .  |  :  List of 1
[10:49:32.158] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.158] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.158] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.158] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.158] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.158] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.158] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.161] |  :  .  |  :  .  |  :  Not identical
[10:49:32.161] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:32.161] |  :  .  |  :  .  |  :  .  List of 2
[10:49:32.161] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.161] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.161] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.161] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.161] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.161] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.161] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.161] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.161] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.161] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.166] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:32.166] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:32.166] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:32.166] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:32.166] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:32.166] |  :  .  |  :  .  |  List of future strategies:
[10:49:32.166] |  :  .  |  :  .  |  1. multicore:
[10:49:32.166] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.166] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:32.166] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:32.167] |  :  .  |  :  .  |  List of 1
[10:49:32.167] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.167] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.167] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.167] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.167] |  :  .  |  :  .  |      ...)  
[10:49:32.167] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.167] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.167] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.167] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.167] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.167] |  :  .  |  :  .  |      ...)  
[10:49:32.167] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.167] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.170] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.170] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.170] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.170] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.170] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.170] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:32.170] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.170] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.171] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.171] |  :  readImmediateCondition() ...
[10:49:32.171] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.171] |  :   - Number of RDS files: 0
[10:49:32.171] |  :  readImmediateCondition() ... DONE
[10:49:32.171] |  :  MulticoreFuture #2
[10:49:32.171] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:32.172] |  :  .  nx: 2
[10:49:32.172] |  :  .  relay: TRUE
[10:49:32.172] |  :  .  stdout: TRUE
[10:49:32.172] |  :  .  signal: TRUE
[10:49:32.172] |  :  .  resignal: FALSE
[10:49:32.172] |  :  .  force: TRUE
[10:49:32.172] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.172] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.172] |  :  .  until=2
[10:49:32.172] |  :  .  relaying element #2
[10:49:32.173] |  :  .  result() for MulticoreFuture ...
[10:49:32.173] |  :  .  |  readImmediateCondition() ...
[10:49:32.173] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.173] |  :  .  |   - Number of RDS files: 0
[10:49:32.174] |  :  .  |  readImmediateCondition() ... DONE
[10:49:32.174] |  :  .  |  result() for MulticoreFuture ...
[10:49:32.174] |  :  .  |  result() for MulticoreFuture ... done
[10:49:32.174] |  :  .  result() for MulticoreFuture ... done
[10:49:32.174] |  :  .  result() for MulticoreFuture ...
[10:49:32.174] |  :  .  result() for MulticoreFuture ... done
[10:49:32.175] |  :  .  result() for MulticoreFuture ...
[10:49:32.175] |  :  .  result() for MulticoreFuture ... done
[10:49:32.175] |  :  .  result() for MulticoreFuture ...
[10:49:32.175] |  :  .  result() for MulticoreFuture ... done
[10:49:32.175] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.175] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.176] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:32.176] |  :  value(<MulticoreFuture>, ...) ...
[10:49:32.176] |  :  .  result() for MulticoreFuture ...
[10:49:32.176] |  :  .  result() for MulticoreFuture ... done
[10:49:32.176] |  :  .  result() for MulticoreFuture ...
[10:49:32.176] |  :  .  result() for MulticoreFuture ... done
[10:49:32.177] |  :  .  value: <list>
[10:49:32.177] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:32.177] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:32.177] |  :  .  nx: 2
[10:49:32.177] |  :  .  relay: TRUE
[10:49:32.177] |  :  .  stdout: TRUE
[10:49:32.177] |  :  .  signal: TRUE
[10:49:32.178] |  :  .  resignal: FALSE
[10:49:32.178] |  :  .  force: TRUE
[10:49:32.178] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.178] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.178] |  :  .  until=2
[10:49:32.178] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.178] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.179] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:32.179] |  :  length: 0 (resolved future 2)
[10:49:32.179] |  checking value #2 ... done
[10:49:32.179] |  Relaying remaining futures ...
[10:49:32.179] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:32.179] |  :  .  nx: 2
[10:49:32.179] |  :  .  relay: TRUE
[10:49:32.180] |  :  .  stdout: TRUE
[10:49:32.180] |  :  .  signal: TRUE
[10:49:32.180] |  :  .  resignal: FALSE
[10:49:32.180] |  :  .  force: TRUE
[10:49:32.180] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.180] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:32.180] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.180] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.180] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:32.180] |  Relaying remaining futures ... done
[10:49:32.181] value() on list ... done
[10:49:32.181]  - Number of value chunks collected: 2
[10:49:32.181] Resolving 2 futures (chunks) ... DONE
[10:49:32.181] Reducing values from 2 chunks ...
[10:49:32.181]  - Number of values collected after concatenation: 2
[10:49:32.181]  - Number of values expected: 2
[10:49:32.181] Reducing values from 2 chunks ... DONE
[10:49:32.181] future_lapply() ... DONE
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
[4,]    7    8
[5,]    9   10
[6,]   11   12
- apply(X, ...) - not all same names ...
[10:49:32.182] getGlobalsAndPackagesXApply() ...
[10:49:32.182]  - future.globals: TRUE
[10:49:32.182] getGlobalsAndPackages() ...
[10:49:32.182] |  Searching for globals ...
[10:49:32.223] |  :  globals found: [10] ‘FUN’, ‘{’, ‘if’, ‘==’, ‘[’, ‘<-’, ‘names’, ‘names<-’, ‘letters’, ‘seq_along’
[10:49:32.223] |  Searching for globals ... DONE
[10:49:32.224] |  Resolving globals: FALSE
[10:49:32.224] |  Search for packages associated with the globals ...
[10:49:32.224] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.224] |  :  Packages: [1] ‘base’
[10:49:32.224] |  Search for packages associated with the globals ... DONE
[10:49:32.224] |  The total size of the 1 globals is 1.28 KiB (1311 bytes)
[10:49:32.225] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:4, dim = c(2L, 2L)))’) is 1.28 KiB There is one global: ‘FUN’ (1.28 KiB of class ‘function’)
[10:49:32.225] |  Packages after dropping 'base': [0] 
[10:49:32.225] |  globals: [1] ‘FUN’
[10:49:32.225] |  packages: [0] 
[10:49:32.225] getGlobalsAndPackages() ... done
[10:49:32.225]  - globals found/used: [n=1] ‘FUN’
[10:49:32.225]  - needed namespaces: [n=0] 
[10:49:32.225] Finding globals ... DONE
[10:49:32.226]  - use_args: TRUE
[10:49:32.226]  - Getting '...' globals ...
[10:49:32.226] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:32.226] |  recursive: 0
[10:49:32.226] |  length: 1
[10:49:32.226] |  elements: ‘...’
[10:49:32.226] |  'obj' is DotDotDotList
[10:49:32.226] |  resolve(obj, ...) ...
[10:49:32.227] |  resolve(obj, ...) ... done
[10:49:32.227] |  length: 0 (resolved future 1)
[10:49:32.227] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:32.227]    - '...' content: [n=0] 
[10:49:32.227] List of 1
[10:49:32.227]  $ ...: list()
[10:49:32.227]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.227]  - attr(*, "where")=List of 1
[10:49:32.227]   ..$ ...:<environment: 0x564d5b592530> 
[10:49:32.227]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.227]  - attr(*, "resolved")= logi TRUE
[10:49:32.227]  - attr(*, "total_size")= num NA
[10:49:32.229]  - Getting '...' globals ... DONE
[10:49:32.229] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:32.230] List of 2
[10:49:32.230]  $ ...future.FUN:function (x)  
[10:49:32.230]  $ ...          : list()
[10:49:32.230]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.230]  - attr(*, "where")=List of 2
[10:49:32.230]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:32.230]   ..$ ...          :<environment: 0x564d5b592530> 
[10:49:32.230]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.230]  - attr(*, "resolved")= logi FALSE
[10:49:32.230]  - attr(*, "total_size")= num 4449
[10:49:32.232] Packages to be attached in all futures: [n=0] 
[10:49:32.232] getGlobalsAndPackagesXApply() ... DONE
[10:49:32.232] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.233] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.233] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.233] future_lapply() ...
[10:49:32.234] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.234] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.235] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.235] Number of chunks: 2
[10:49:32.235] getGlobalsAndPackagesXApply() ...
[10:49:32.235]  - future.globals: <name-value list> with names ‘list()’
[10:49:32.235]  - use_args: TRUE
[10:49:32.235] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:32.236] List of 2
[10:49:32.236]  $ ...          : list()
[10:49:32.236]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.236]  $ ...future.FUN:function (x)  
[10:49:32.236]  - attr(*, "where")=List of 2
[10:49:32.236]   ..$ ...          :<environment: 0x564d5b592530> 
[10:49:32.236]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:49:32.236]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.236]  - attr(*, "resolved")= logi FALSE
[10:49:32.236]  - attr(*, "total_size")= num NA
[10:49:32.238] Packages to be attached in all futures: [n=0] 
[10:49:32.238] getGlobalsAndPackagesXApply() ... DONE
[10:49:32.238] Number of futures (= number of chunks): 2
[10:49:32.239] Launching 2 futures (chunks) ...
[10:49:32.239] Chunk #1 of 2 ...
[10:49:32.239]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:32.239]  - seeds: <none>
[10:49:32.239]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.239] getGlobalsAndPackages() ...
[10:49:32.239] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.239] |  Resolving globals: FALSE
[10:49:32.239] |  Tweak future expression to call with '...' arguments ...
[10:49:32.240] |  :  {
[10:49:32.240] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.240] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:32.240] |  :      "# as a global variable                                         "
[10:49:32.240] |  :      do.call(function(...) {
[10:49:32.240] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:32.240] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:32.240] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:32.240] |  :          "# anonymous function.                                          "
[10:49:32.240] |  :          "#                                                              "
[10:49:32.240] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:32.240] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:32.240] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:32.240] |  :          "# global environment, which is where globals are written.      "
[10:49:32.240] |  :          penv <- env <- environment(...future.FUN)
[10:49:32.240] |  :          repeat {
[10:49:32.240] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:32.240] |  :                  emptyenv())) 
[10:49:32.240] |  :                  break
[10:49:32.240] |  :              penv <- env
[10:49:32.240] |  :              env <- parent.env(env)
[10:49:32.240] |  :          }
[10:49:32.240] |  :          if (identical(penv, globalenv())) {
[10:49:32.240] |  :              environment(...future.FUN) <- environment()
[10:49:32.240] |  :          }
[10:49:32.240] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:32.240] |  :              !isNamespace(penv)) {
[10:49:32.240] |  :              parent.env(penv) <- environment()
[10:49:32.240] |  :          }
[10:49:32.240] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:32.240] |  :          {
[10:49:32.240] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.240] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.240] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.240] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:32.240] |  :              }
[10:49:32.240] |  :              {
[10:49:32.240] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.240] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.240] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:32.240] |  :                  })
[10:49:32.240] |  :              }
[10:49:32.240] |  :          }
[10:49:32.240] |  :      }, args = future.call.arguments)
[10:49:32.240] |  :  }
[10:49:32.240] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:32.240] |  Search for packages associated with the globals ...
[10:49:32.240] |  :  Packages associated with globals: [0] 
[10:49:32.240] |  :  Packages: [0] 
[10:49:32.241] |  Search for packages associated with the globals ... DONE
[10:49:32.241] |  Packages after dropping 'base': [0] 
[10:49:32.241] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.241] |  packages: [0] 
[10:49:32.241] getGlobalsAndPackages() ... done
[10:49:32.241] run() for Future (‘Future’) ...
[10:49:32.241] |  state: ‘created’
[10:49:32.241] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.242] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.242] |  Using MulticoreFutureBackend ...
[10:49:32.242] |  :  Launching futures ...
[10:49:32.242] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.242] |  :  .  |  getFutureData() ...
[10:49:32.242] |  :  .  |  :  getFutureCore() ...
[10:49:32.242] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:32.242] |  :  .  |  :  getFutureCore() ... done
[10:49:32.242] |  :  .  |  :  getFutureCapture() ...
[10:49:32.242] |  :  .  |  :  getFutureCapture() ... done
[10:49:32.243] |  :  .  |  :  getFutureContext() ...
[10:49:32.243] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.243] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:32.243] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.243] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:32.243] |  :  .  |  :  getFutureContext() ... done
[10:49:32.243] |  :  .  |  getFutureData() ... done
[10:49:32.243] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.244] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.245] |  :  .  |  MulticoreFuture started
[10:49:32.246] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.246] |  :  Launching futures ... done
[10:49:32.246] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.246] |  :  .  |  attachPackages() ...
[10:49:32.246] |  Using MulticoreFutureBackend ... done
[10:49:32.246] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:32.247] run() for Future (‘MulticoreFuture’) ... done
[10:49:32.247] |  :  .  |  attachPackages() ... DONE
[10:49:32.247] Created future:
[10:49:32.247] |  :  .  |  attachPackages() ...
[10:49:32.247] |  :  .  |  :  packages: [n=0] 
[10:49:32.247] |  :  .  |  attachPackages() ... DONE
[10:49:32.248] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.248] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.249] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.249] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.250] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.250] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:32.250] |  :  .  |  :  .  |  New stack:
[10:49:32.250] |  :  .  |  :  .  |  List of 1
[10:49:32.250] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.250] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.250] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.250] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.250] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.250] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.250] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.254] |  :  .  |  :  .  |  Old stack:
[10:49:32.254] |  :  .  |  :  .  |  List of 1
[10:49:32.254] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.254] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.254] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.254] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.254] |  :  .  |  :  .  |      ...)  
[10:49:32.254] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.254] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.254] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.254] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.254] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.254] |  :  .  |  :  .  |      ...)  
[10:49:32.254] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.254] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.259] |  :  .  |  :  .  |  Not identical
[10:49:32.259] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:32.259] readImmediateCondition() ...
[10:49:32.259]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.259]  - Number of RDS files: 0
[10:49:32.260] readImmediateCondition() ... DONE
[10:49:32.247] MulticoreFuture:
[10:49:32.247] Label: ‘future_apply-1’
[10:49:32.247] Expression:
[10:49:32.247] {
[10:49:32.247]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.247]     "# expression in do.call(), because function called uses '...'  "
[10:49:32.247]     "# as a global variable                                         "
[10:49:32.247]     do.call(function(...) {
[10:49:32.247]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:32.247]         "# without having an '...' argument. This means '...' is treated"
[10:49:32.247]         "# as a global variable. This may happen when FUN() is an       "
[10:49:32.247]         "# anonymous function.                                          "
[10:49:32.247]         "#                                                              "
[10:49:32.247]         "# If an anonymous function, we will make sure to restore the   "
[10:49:32.247]         "# function environment of FUN() to the calling environment.    "
[10:49:32.247]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:32.247]         "# global environment, which is where globals are written.      "
[10:49:32.247]         penv <- env <- environment(...future.FUN)
[10:49:32.247]         repeat {
[10:49:32.247]             if (identical(env, globalenv()) || identical(env, 
[10:49:32.247]                 emptyenv())) 
[10:49:32.247]                 break
[10:49:32.247]             penv <- env
[10:49:32.247]             env <- parent.env(env)
[10:49:32.247]         }
[10:49:32.247]         if (identical(penv, globalenv())) {
[10:49:32.247]             environment(...future.FUN) <- environment()
[10:49:32.247]         }
[10:49:32.247]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:32.247]             !isNamespace(penv)) {
[10:49:32.247]             parent.env(penv) <- environment()
[10:49:32.247]         }
[10:49:32.247]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:32.247]         {
[10:49:32.247]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.247]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.247]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.247]                 on.exit(options(oopts), add = TRUE)
[10:49:32.247]             }
[10:49:32.247]             {
[10:49:32.247]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.247]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.247]                   ...future.FUN(...future.X_jj, ...)
[10:49:32.247]                 })
[10:49:32.247]             }
[10:49:32.247]         }
[10:49:32.247]     }, args = future.call.arguments)
[10:49:32.247] }
[10:49:32.247] Lazy evaluation: FALSE
[10:49:32.247] Asynchronous evaluation: TRUE
[10:49:32.247] Local evaluation: TRUE
[10:49:32.247] Environment: R_GlobalEnv
[10:49:32.247] Capture standard output: TRUE
[10:49:32.247] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:32.247] Immediate condition classes: ‘immediateCondition’
[10:49:32.247] Globals: 5 objects totaling 1.49 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 1.28 KiB, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:32.247] Packages: <none>
[10:49:32.247] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:32.247] Resolved: FALSE
[10:49:32.247] Value: <not collected>
[10:49:32.247] Conditions captured: <none>
[10:49:32.247] Early signaling: FALSE
[10:49:32.247] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:32.247] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.260] Chunk #1 of 2 ... DONE
[10:49:32.260] Chunk #2 of 2 ...
[10:49:32.261]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:32.261]  - seeds: <none>
[10:49:32.261]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.261] getGlobalsAndPackages() ...
[10:49:32.261] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.261] |  Resolving globals: FALSE
[10:49:32.262] |  Tweak future expression to call with '...' arguments ...
[10:49:32.262] |  :  {
[10:49:32.262] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.262] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:32.262] |  :      "# as a global variable                                         "
[10:49:32.262] |  :      do.call(function(...) {
[10:49:32.262] |  :          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:32.262] |  :          "# without having an '...' argument. This means '...' is treated"
[10:49:32.262] |  :          "# as a global variable. This may happen when FUN() is an       "
[10:49:32.262] |  :          "# anonymous function.                                          "
[10:49:32.262] |  :          "#                                                              "
[10:49:32.262] |  :          "# If an anonymous function, we will make sure to restore the   "
[10:49:32.262] |  :          "# function environment of FUN() to the calling environment.    "
[10:49:32.262] |  :          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:32.262] |  :          "# global environment, which is where globals are written.      "
[10:49:32.262] |  :          penv <- env <- environment(...future.FUN)
[10:49:32.262] |  :          repeat {
[10:49:32.262] |  :              if (identical(env, globalenv()) || identical(env, 
[10:49:32.262] |  :                  emptyenv())) 
[10:49:32.262] |  :                  break
[10:49:32.262] |  :              penv <- env
[10:49:32.262] |  :              env <- parent.env(env)
[10:49:32.262] |  :          }
[10:49:32.262] |  :          if (identical(penv, globalenv())) {
[10:49:32.262] |  :              environment(...future.FUN) <- environment()
[10:49:32.262] |  :          }
[10:49:32.262] |  :          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:32.262] |  :              !isNamespace(penv)) {
[10:49:32.262] |  :              parent.env(penv) <- environment()
[10:49:32.262] |  :          }
[10:49:32.262] |  :          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:32.262] |  :          {
[10:49:32.262] |  :              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.262] |  :              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.262] |  :                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.262] |  :                  on.exit(options(oopts), add = TRUE)
[10:49:32.262] |  :              }
[10:49:32.262] |  :              {
[10:49:32.262] |  :                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.262] |  :                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.262] |  :                    ...future.FUN(...future.X_jj, ...)
[10:49:32.262] |  :                  })
[10:49:32.262] |  :              }
[10:49:32.262] |  :          }
[10:49:32.262] |  :      }, args = future.call.arguments)
[10:49:32.262] |  :  }
[10:49:32.262] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:32.262] |  Search for packages associated with the globals ...
[10:49:32.263] |  :  Packages associated with globals: [0] 
[10:49:32.263] |  :  Packages: [0] 
[10:49:32.263] |  Search for packages associated with the globals ... DONE
[10:49:32.264] |  Packages after dropping 'base': [0] 
[10:49:32.264] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.264] |  packages: [0] 
[10:49:32.264] getGlobalsAndPackages() ... done
[10:49:32.264] run() for Future (‘Future’) ...
[10:49:32.264] |  state: ‘created’
[10:49:32.265] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.259] |  :  .  |  :  .  |  :  List of 2
[10:49:32.259] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.259] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.259] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.259] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.259] |  :  .  |  :  .  |  :      ...)  
[10:49:32.259] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.259] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.259] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.259] |  :  .  |  :  .  |  :      ...)  
[10:49:32.259] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.265] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.265] |  Using MulticoreFutureBackend ...
[10:49:32.265] |  :  Launching futures ...
[10:49:32.265] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.265] |  :  .  |  getFutureData() ...
[10:49:32.265] |  :  .  |  :  .  |  :  Formals differ
[10:49:32.266] |  :  .  |  :  getFutureCore() ...
[10:49:32.266] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:32.266] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:32.266] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:32.266] |  :  .  |  :  getFutureCore() ... done
[10:49:32.266] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:32.266] |  :  .  |  :  getFutureCapture() ...
[10:49:32.266] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:32.266] |  :  .  |  :  getFutureCapture() ... done
[10:49:32.266] |  :  .  |  :  getFutureContext() ...
[10:49:32.266] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.266] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:32.267] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.266] |  :  .  |  :  .  List of future strategies:
[10:49:32.266] |  :  .  |  :  .  1. sequential:
[10:49:32.266] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.266] |  :  .  |  :  .     - tweaked: FALSE
[10:49:32.266] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.267] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:32.267] |  :  .  |  :  getFutureContext() ... done
[10:49:32.267] |  :  .  |  getFutureData() ... done
[10:49:32.267] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.268] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.267] |  :  .  |  :  .  List of 1
[10:49:32.267] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.267] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.267] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.267] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.267] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.267] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.267] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.270] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.270] |  :  .  |  MulticoreFuture started
[10:49:32.270] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.270] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.270] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.270] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.270] |  :  Launching futures ... done
[10:49:32.271] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.271] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.271] |  :  .  |  attachPackages() ...
[10:49:32.271] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:32.271] |  Using MulticoreFutureBackend ... done
[10:49:32.271] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:32.271] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.271] run() for Future (‘MulticoreFuture’) ... done
[10:49:32.271] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:32.271] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.272] Created future:
[10:49:32.272] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.272] |  :  .  |  attachPackages() ... DONE
[10:49:32.272] |  :  .  |  attachPackages() ...
[10:49:32.272] |  :  .  |  assign_globals() ...
[10:49:32.272] |  :  .  |  :  packages: [n=0] 
[10:49:32.272] |  :  .  |  attachPackages() ... DONE
[10:49:32.274] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.274] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.274] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.275] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.275] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.275] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:32.275] |  :  .  |  :  .  |  New stack:
[10:49:32.276] |  :  .  |  :  .  |  List of 1
[10:49:32.276] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.276] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.276] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.276] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.276] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.276] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.276] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.279] |  :  .  |  :  .  |  Old stack:
[10:49:32.272] |  :  .  |  List of 5
[10:49:32.272] |  :  .  |   $ future.call.arguments    : list()
[10:49:32.272] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.272] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:32.272] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:32.272] |  :  .  |    ..$ : int [1:2] 1 3
[10:49:32.272] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:32.272] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:32.272] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:32.272] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:32.272] |  :  .  |   - attr(*, "where")=List of 5
[10:49:32.272] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:32.272] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:32.272] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:32.272] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:32.272] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:32.272] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.272] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:32.279] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:32.280] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:32.280] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:32.280] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:32.280] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:32.280] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:32.280] |  :  .  |  assign_globals() ... done
[10:49:32.283] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.284] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.279] |  :  .  |  :  .  |  List of 1
[10:49:32.279] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.279] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.279] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.279] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.279] |  :  .  |  :  .  |      ...)  
[10:49:32.279] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.279] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.279] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.279] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.279] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.279] |  :  .  |  :  .  |      ...)  
[10:49:32.279] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.279] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.284] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.284] |  :  .  |  :  .  |  Not identical
[10:49:32.284] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:32.284] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:32.284] |  :  .  |  :  .  |  :  New stack:
[10:49:32.284] readImmediateCondition() ...
[10:49:32.285]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.285]  - Number of RDS files: 0
[10:49:32.285] readImmediateCondition() ... DONE
[10:49:32.272] MulticoreFuture:
[10:49:32.272] Label: ‘future_apply-2’
[10:49:32.272] Expression:
[10:49:32.272] {
[10:49:32.272]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.272]     "# expression in do.call(), because function called uses '...'  "
[10:49:32.272]     "# as a global variable                                         "
[10:49:32.272]     do.call(function(...) {
[10:49:32.272]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:32.272]         "# without having an '...' argument. This means '...' is treated"
[10:49:32.272]         "# as a global variable. This may happen when FUN() is an       "
[10:49:32.272]         "# anonymous function.                                          "
[10:49:32.272]         "#                                                              "
[10:49:32.272]         "# If an anonymous function, we will make sure to restore the   "
[10:49:32.272]         "# function environment of FUN() to the calling environment.    "
[10:49:32.272]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:32.272]         "# global environment, which is where globals are written.      "
[10:49:32.272]         penv <- env <- environment(...future.FUN)
[10:49:32.272]         repeat {
[10:49:32.272]             if (identical(env, globalenv()) || identical(env, 
[10:49:32.272]                 emptyenv())) 
[10:49:32.272]                 break
[10:49:32.272]             penv <- env
[10:49:32.272]             env <- parent.env(env)
[10:49:32.272]         }
[10:49:32.272]         if (identical(penv, globalenv())) {
[10:49:32.272]             environment(...future.FUN) <- environment()
[10:49:32.272]         }
[10:49:32.272]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:32.272]             !isNamespace(penv)) {
[10:49:32.272]             parent.env(penv) <- environment()
[10:49:32.272]         }
[10:49:32.272]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:32.272]         {
[10:49:32.272]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.272]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.272]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.272]                 on.exit(options(oopts), add = TRUE)
[10:49:32.272]             }
[10:49:32.272]             {
[10:49:32.272]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.272]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.272]                   ...future.FUN(...future.X_jj, ...)
[10:49:32.272]                 })
[10:49:32.272]             }
[10:49:32.272]         }
[10:49:32.272]     }, args = future.call.arguments)
[10:49:32.272] }
[10:49:32.272] Lazy evaluation: FALSE
[10:49:32.272] Asynchronous evaluation: TRUE
[10:49:32.272] Local evaluation: TRUE
[10:49:32.272] Environment: R_GlobalEnv
[10:49:32.272] Capture standard output: TRUE
[10:49:32.272] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:32.272] Immediate condition classes: ‘immediateCondition’
[10:49:32.272] Globals: 5 objects totaling 1.49 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 1.28 KiB, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:32.272] Packages: <none>
[10:49:32.272] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:32.272] Resolved: FALSE
[10:49:32.272] Value: <not collected>
[10:49:32.272] Conditions captured: <none>
[10:49:32.272] Early signaling: FALSE
[10:49:32.272] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:32.272] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.286] Chunk #2 of 2 ... DONE
[10:49:32.286] Launching 2 futures (chunks) ... DONE
[10:49:32.287] Resolving 2 futures (chunks) ...
[10:49:32.287] value() on list ...
[10:49:32.287] |  recursive: 0
[10:49:32.287] |  length: 2
[10:49:32.288] |  
[10:49:32.288] |  Number of remaining objects: 2
[10:49:32.288] |  checking value #1 ...
[10:49:32.288] |  :  'obj' is MulticoreFuture
[10:49:32.284] |  :  .  |  :  .  |  :  List of 1
[10:49:32.284] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.284] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.284] |  :  .  |  :  .  |  :      ...)  
[10:49:32.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.284] |  :  .  |  :  .  |  :      ...)  
[10:49:32.284] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.284] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.288] |  :  .  |  :  .  |  :  Old stack:
[10:49:32.284] |  :  .  |  :  .  |  :  List of 2
[10:49:32.284] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.284] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.284] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.284] |  :  .  |  :  .  |  :      ...)  
[10:49:32.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.284] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.284] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.284] |  :  .  |  :  .  |  :      ...)  
[10:49:32.284] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.289] |  :  .  |  :  .  |  :  List of 1
[10:49:32.289] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.289] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.289] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.289] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.289] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.289] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.289] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.292] |  :  .  |  :  .  |  :  Not identical
[10:49:32.292] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:32.292] |  :  .  |  :  .  |  :  Formals differ
[10:49:32.292] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:32.293] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:32.293] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:32.293] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:32.293] |  :  .  |  :  .  List of future strategies:
[10:49:32.293] |  :  .  |  :  .  1. sequential:
[10:49:32.293] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.293] |  :  .  |  :  .     - tweaked: FALSE
[10:49:32.293] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.294] |  :  .  |  :  .  List of 1
[10:49:32.294] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.294] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.294] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.294] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.294] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.294] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.294] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.297] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.297] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.297] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.297] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.297] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.292] |  :  .  |  :  .  |  :  .  List of 2
[10:49:32.292] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.292] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.292] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.292] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.292] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.292] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.292] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.292] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.292] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.292] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.298] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:32.298] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.298] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:32.298] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:32.298] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.298] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:32.298] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:32.298] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.299] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:32.298] |  :  readImmediateCondition() ...
[10:49:32.299] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:32.299] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.299] |  :  .  |  assign_globals() ...
[10:49:32.299] |  :   - Number of RDS files: 0
[10:49:32.299] |  :  .  |  :  .  |  List of future strategies:
[10:49:32.299] |  :  .  |  :  .  |  1. multicore:
[10:49:32.299] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.299] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:32.299] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:32.299] |  :  readImmediateCondition() ... DONE
[10:49:32.299] |  checking value #1 ... done
[10:49:32.300] |  checking value #2 ...
[10:49:32.300] |  :  'obj' is MulticoreFuture
[10:49:32.299] |  :  .  |  :  .  |  List of 1
[10:49:32.299] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.299] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.299] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.299] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.299] |  :  .  |  :  .  |      ...)  
[10:49:32.299] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.299] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.299] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.299] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.299] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.299] |  :  .  |  :  .  |      ...)  
[10:49:32.299] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.299] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.303] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.303] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.303] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.304] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.304] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.304] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:32.304] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.304] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.304] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.299] |  :  .  |  List of 5
[10:49:32.299] |  :  .  |   $ future.call.arguments    : list()
[10:49:32.299] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.299] |  :  .  |   $ ...future.FUN            :function (x)  
[10:49:32.299] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:32.299] |  :  .  |    ..$ : int [1:2] 2 4
[10:49:32.299] |  :  .  |   $ ...future.seeds_ii       : NULL
[10:49:32.299] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:32.299] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:32.299] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:32.299] |  :  .  |   - attr(*, "where")=List of 5
[10:49:32.299] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:32.299] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:32.299] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:32.299] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:32.299] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:32.299] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.299] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:32.307] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:32.307] |  :  .  |  - reassign environment for ‘...future.FUN’ [where=emptyenv()]
[10:49:32.307] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:32.307] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:32.307] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:32.307] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:32.307] |  :  .  |  assign_globals() ... done
[10:49:32.310] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.310] |  :  readImmediateCondition() ...
[10:49:32.310] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.310] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.311] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.311] |  :   - Number of RDS files: 0
[10:49:32.311] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:32.311] |  :  readImmediateCondition() ... DONE
[10:49:32.311] |  :  .  |  :  .  |  :  New stack:
[10:49:32.311] |  checking value #2 ... done
[10:49:32.311] |  :  .  |  :  .  |  :  List of 1
[10:49:32.311] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.311] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.311] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.311] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.311] |  :  .  |  :  .  |  :      ...)  
[10:49:32.311] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.311] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.311] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.311] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.311] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.311] |  :  .  |  :  .  |  :      ...)  
[10:49:32.311] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.311] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.315] |  :  .  |  :  .  |  :  Old stack:
[10:49:32.315] |  :  .  |  :  .  |  :  List of 1
[10:49:32.315] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.315] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.315] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.315] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.315] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.315] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.315] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.318] |  :  .  |  :  .  |  :  Not identical
[10:49:32.318] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:32.321] |  Number of remaining objects: 2
[10:49:32.322] |  checking value #1 ...
[10:49:32.322] |  :  'obj' is MulticoreFuture
[10:49:32.322] |  :  readImmediateCondition() ...
[10:49:32.322] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.323] |  :   - Number of RDS files: 0
[10:49:32.323] |  :  readImmediateCondition() ... DONE
[10:49:32.323] |  :  MulticoreFuture #1
[10:49:32.323] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:32.323] |  :  .  nx: 2
[10:49:32.324] |  :  .  relay: TRUE
[10:49:32.324] |  :  .  stdout: TRUE
[10:49:32.324] |  :  .  signal: TRUE
[10:49:32.324] |  :  .  resignal: FALSE
[10:49:32.324] |  :  .  force: TRUE
[10:49:32.318] |  :  .  |  :  .  |  :  .  List of 2
[10:49:32.318] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.318] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.318] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.318] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.318] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.318] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.318] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.318] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.318] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.318] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.325] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:32.325] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:32.325] |  :  .  until=1
[10:49:32.325] |  :  .  relaying element #1
[10:49:32.325] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:32.326] |  :  .  result() for MulticoreFuture ...
[10:49:32.326] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:32.326] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:32.326] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:32.326] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:32.327] |  :  .  |  readImmediateCondition() ...
[10:49:32.327] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.326] |  :  .  |  :  .  |  List of future strategies:
[10:49:32.326] |  :  .  |  :  .  |  1. multicore:
[10:49:32.326] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.326] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:32.326] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:32.327] |  :  .  |   - Number of RDS files: 0
[10:49:32.327] |  :  .  |  readImmediateCondition() ... DONE
[10:49:32.328] |  :  .  |  result() for MulticoreFuture ...
[10:49:32.328] |  :  .  |  result() for MulticoreFuture ... done
[10:49:32.328] |  :  .  result() for MulticoreFuture ... done
[10:49:32.328] |  :  .  result() for MulticoreFuture ...
[10:49:32.329] |  :  .  result() for MulticoreFuture ... done
[10:49:32.329] |  :  .  result() for MulticoreFuture ...
[10:49:32.329] |  :  .  result() for MulticoreFuture ... done
[10:49:32.329] |  :  .  result() for MulticoreFuture ...
[10:49:32.330] |  :  .  result() for MulticoreFuture ... done
[10:49:32.330] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.330] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.330] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:32.330] |  :  value(<MulticoreFuture>, ...) ...
[10:49:32.331] |  :  .  result() for MulticoreFuture ...
[10:49:32.331] |  :  .  result() for MulticoreFuture ... done
[10:49:32.331] |  :  .  result() for MulticoreFuture ...
[10:49:32.331] |  :  .  result() for MulticoreFuture ... done
[10:49:32.331] |  :  .  value: <list>
[10:49:32.332] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:32.332] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:32.332] |  :  .  nx: 2
[10:49:32.332] |  :  .  relay: TRUE
[10:49:32.332] |  :  .  stdout: TRUE
[10:49:32.332] |  :  .  signal: TRUE
[10:49:32.332] |  :  .  resignal: FALSE
[10:49:32.333] |  :  .  force: TRUE
[10:49:32.333] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.327] |  :  .  |  :  .  |  List of 1
[10:49:32.327] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.327] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.327] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.327] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.327] |  :  .  |  :  .  |      ...)  
[10:49:32.327] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.327] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.327] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.327] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.327] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.327] |  :  .  |  :  .  |      ...)  
[10:49:32.327] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.327] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.333] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.333] |  :  .  until=2
[10:49:32.333] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.333] |  :  .  relaying element #2
[10:49:32.333] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.333] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.333] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.333] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.333] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:32.333] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.334] |  :  length: 1 (resolved future 1)
[10:49:32.334] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.334] |  checking value #1 ... done
[10:49:32.334] |  checking value #2 ...
[10:49:32.334] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:32.334] |  :  'obj' is MulticoreFuture
[10:49:32.334] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.334] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.334] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.335] |  :  readImmediateCondition() ...
[10:49:32.335] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.335] |  :   - Number of RDS files: 0
[10:49:32.335] |  :  readImmediateCondition() ... DONE
[10:49:32.335] |  :  MulticoreFuture #2
[10:49:32.335] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:32.335] |  :  .  nx: 2
[10:49:32.336] |  :  .  relay: TRUE
[10:49:32.336] |  :  .  stdout: TRUE
[10:49:32.336] |  :  .  signal: TRUE
[10:49:32.336] |  :  .  resignal: FALSE
[10:49:32.336] |  :  .  force: TRUE
[10:49:32.336] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.336] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.336] |  :  .  until=2
[10:49:32.336] |  :  .  relaying element #2
[10:49:32.337] |  :  .  result() for MulticoreFuture ...
[10:49:32.337] |  :  .  |  readImmediateCondition() ...
[10:49:32.337] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.337] |  :  .  |   - Number of RDS files: 0
[10:49:32.337] |  :  .  |  readImmediateCondition() ... DONE
[10:49:32.338] |  :  .  |  result() for MulticoreFuture ...
[10:49:32.338] |  :  .  |  result() for MulticoreFuture ... done
[10:49:32.338] |  :  .  result() for MulticoreFuture ... done
[10:49:32.338] |  :  .  result() for MulticoreFuture ...
[10:49:32.338] |  :  .  result() for MulticoreFuture ... done
[10:49:32.338] |  :  .  result() for MulticoreFuture ...
[10:49:32.338] |  :  .  result() for MulticoreFuture ... done
[10:49:32.339] |  :  .  result() for MulticoreFuture ...
[10:49:32.339] |  :  .  result() for MulticoreFuture ... done
[10:49:32.339] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.339] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.339] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:32.339] |  :  value(<MulticoreFuture>, ...) ...
[10:49:32.339] |  :  .  result() for MulticoreFuture ...
[10:49:32.339] |  :  .  result() for MulticoreFuture ... done
[10:49:32.340] |  :  .  result() for MulticoreFuture ...
[10:49:32.340] |  :  .  result() for MulticoreFuture ... done
[10:49:32.340] |  :  .  value: <list>
[10:49:32.340] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:32.340] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:32.340] |  :  .  nx: 2
[10:49:32.340] |  :  .  relay: TRUE
[10:49:32.340] |  :  .  stdout: TRUE
[10:49:32.341] |  :  .  signal: TRUE
[10:49:32.341] |  :  .  resignal: FALSE
[10:49:32.341] |  :  .  force: TRUE
[10:49:32.341] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.341] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.341] |  :  .  until=2
[10:49:32.341] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.341] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.342] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:32.342] |  :  length: 0 (resolved future 2)
[10:49:32.342] |  checking value #2 ... done
[10:49:32.342] |  Relaying remaining futures ...
[10:49:32.342] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:32.342] |  :  .  nx: 2
[10:49:32.342] |  :  .  relay: TRUE
[10:49:32.343] |  :  .  stdout: TRUE
[10:49:32.343] |  :  .  signal: TRUE
[10:49:32.343] |  :  .  resignal: FALSE
[10:49:32.343] |  :  .  force: TRUE
[10:49:32.343] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.343] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:32.343] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.343] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.344] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:32.344] |  Relaying remaining futures ... done
[10:49:32.344] value() on list ... done
[10:49:32.344]  - Number of value chunks collected: 2
[10:49:32.344] Resolving 2 futures (chunks) ... DONE
[10:49:32.344] Reducing values from 2 chunks ...
[10:49:32.344]  - Number of values collected after concatenation: 2
[10:49:32.344]  - Number of values expected: 2
[10:49:32.344] Reducing values from 2 chunks ... DONE
[10:49:32.345] future_lapply() ... DONE
     [,1] [,2]
[1,]    1    2
[2,]    3    4
- example(future_apply) - reproducible RNG ...
[10:49:32.345] getGlobalsAndPackagesXApply() ...
[10:49:32.345]  - future.globals: TRUE
[10:49:32.345] getGlobalsAndPackages() ...
[10:49:32.345] |  Searching for globals ...
[10:49:32.350] |  :  globals found: [13] ‘FUN’, ‘{’, ‘if’, ‘&&’, ‘==’, ‘length’, ‘is.numeric’, ‘is.finite’, ‘>=’, ‘missing’, ‘<-’, ‘sample.int’, ‘[’
[10:49:32.350] |  Searching for globals ... DONE
[10:49:32.351] |  Resolving globals: FALSE
[10:49:32.351] |  Search for packages associated with the globals ...
[10:49:32.351] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.352] |  :  Packages: [1] ‘base’
[10:49:32.352] |  Search for packages associated with the globals ... DONE
[10:49:32.352] |  The total size of the 1 globals is 3.66 KiB (3746 bytes)
[10:49:32.353] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:4, dim = c(2L, 2L)))’) is 3.66 KiB There is one global: ‘FUN’ (3.66 KiB of class ‘function’)
[10:49:32.353] |  Packages after dropping 'base': [0] 
[10:49:32.353] |  globals: [1] ‘FUN’
[10:49:32.353] |  packages: [0] 
[10:49:32.353] getGlobalsAndPackages() ... done
[10:49:32.353]  - globals found/used: [n=1] ‘FUN’
[10:49:32.353]  - needed namespaces: [n=0] 
[10:49:32.353] Finding globals ... DONE
[10:49:32.354]  - use_args: TRUE
[10:49:32.354]  - Getting '...' globals ...
[10:49:32.354] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:32.354] |  recursive: 0
[10:49:32.355] |  length: 1
[10:49:32.355] |  elements: ‘...’
[10:49:32.355] |  'obj' is DotDotDotList
[10:49:32.355] |  resolve(obj, ...) ...
[10:49:32.355] |  resolve(obj, ...) ... done
[10:49:32.355] |  length: 0 (resolved future 1)
[10:49:32.355] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:32.355]    - '...' content: [n=0] 
[10:49:32.356] List of 1
[10:49:32.356]  $ ...: list()
[10:49:32.356]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.356]  - attr(*, "where")=List of 1
[10:49:32.356]   ..$ ...:<environment: 0x564d5d5aa768> 
[10:49:32.356]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.356]  - attr(*, "resolved")= logi TRUE
[10:49:32.356]  - attr(*, "total_size")= num NA
[10:49:32.359]  - Getting '...' globals ... DONE
[10:49:32.359] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:32.359] List of 2
[10:49:32.359]  $ ...future.FUN:function (x, size, replace = FALSE, prob = NULL)  
[10:49:32.359]  $ ...          : list()
[10:49:32.359]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.359]  - attr(*, "where")=List of 2
[10:49:32.359]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:32.359]   ..$ ...          :<environment: 0x564d5d5aa768> 
[10:49:32.359]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.359]  - attr(*, "resolved")= logi FALSE
[10:49:32.359]  - attr(*, "total_size")= num 9424
[10:49:32.363] Packages to be attached in all futures: [n=0] 
[10:49:32.363] getGlobalsAndPackagesXApply() ... DONE
[10:49:32.363] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.364] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.364] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.364] future_lapply() ...
[10:49:32.367] Generating random seeds ...
[10:49:32.367] Generating random seed streams for 2 elements ...
[10:49:32.368] Generating random seed streams for 2 elements ... DONE
[10:49:32.368] Generating random seeds ... DONE
[10:49:32.368] Will set RNG state on exit: 10407, 923661366, -98179307, 2132778533, -2030175701, -1574985558, -1066159635
[10:49:32.368] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.368] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.368] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.369] Number of chunks: 2
[10:49:32.369] getGlobalsAndPackagesXApply() ...
[10:49:32.369]  - future.globals: <name-value list> with names ‘list()’
[10:49:32.369]  - use_args: TRUE
[10:49:32.369] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:32.370] List of 2
[10:49:32.370]  $ ...          : list()
[10:49:32.370]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.370]  $ ...future.FUN:function (x, size, replace = FALSE, prob = NULL)  
[10:49:32.370]  - attr(*, "where")=List of 2
[10:49:32.370]   ..$ ...          :<environment: 0x564d5d5aa768> 
[10:49:32.370]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:32.370]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.370]  - attr(*, "resolved")= logi FALSE
[10:49:32.370]  - attr(*, "total_size")= num NA
[10:49:32.374] Packages to be attached in all futures: [n=0] 
[10:49:32.374] getGlobalsAndPackagesXApply() ... DONE
[10:49:32.374] Number of futures (= number of chunks): 2
[10:49:32.374] Launching 2 futures (chunks) ...
[10:49:32.374] Chunk #1 of 2 ...
[10:49:32.375]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:32.375]  - seeds: [1] <seeds>
[10:49:32.375]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.375] getGlobalsAndPackages() ...
[10:49:32.375] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.375] |  Resolving globals: FALSE
[10:49:32.375] |  Tweak future expression to call with '...' arguments ...
[10:49:32.376] |  :  {
[10:49:32.376] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.376] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:32.376] |  :      "# as a global variable                                         "
[10:49:32.376] |  :      do.call(function(...) {
[10:49:32.376] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.376] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.376] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.376] |  :              on.exit(options(oopts), add = TRUE)
[10:49:32.376] |  :          }
[10:49:32.376] |  :          {
[10:49:32.376] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.376] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.376] |  :                  assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:32.376] |  :                    envir = globalenv(), inherits = FALSE)
[10:49:32.376] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:32.376] |  :              })
[10:49:32.376] |  :          }
[10:49:32.376] |  :      }, args = future.call.arguments)
[10:49:32.376] |  :  }
[10:49:32.376] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:32.376] |  Search for packages associated with the globals ...
[10:49:32.376] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.377] |  :  Packages: [1] ‘base’
[10:49:32.377] |  Search for packages associated with the globals ... DONE
[10:49:32.377] |  Packages after dropping 'base': [0] 
[10:49:32.377] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.377] |  packages: [0] 
[10:49:32.377] getGlobalsAndPackages() ... done
[10:49:32.378] run() for Future (‘Future’) ...
[10:49:32.378] |  state: ‘created’
[10:49:32.378] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.378] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.378] |  Using MulticoreFutureBackend ...
[10:49:32.378] |  :  Launching futures ...
[10:49:32.379] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.379] |  :  .  |  getFutureData() ...
[10:49:32.379] |  :  .  |  :  getFutureCore() ...
[10:49:32.379] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:32.379] |  :  .  |  :  getFutureCore() ... done
[10:49:32.379] |  :  .  |  :  getFutureCapture() ...
[10:49:32.379] |  :  .  |  :  getFutureCapture() ... done
[10:49:32.379] |  :  .  |  :  getFutureContext() ...
[10:49:32.380] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.380] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:32.380] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.380] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:32.380] |  :  .  |  :  getFutureContext() ... done
[10:49:32.380] |  :  .  |  getFutureData() ... done
[10:49:32.380] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.381] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.383] |  :  .  |  MulticoreFuture started
[10:49:32.383] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.383] |  :  Launching futures ... done
[10:49:32.384] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.384] |  :  .  |  attachPackages() ...
[10:49:32.384] |  Using MulticoreFutureBackend ... done
[10:49:32.384] run() for Future (‘MulticoreFuture’) ... done
[10:49:32.384] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:32.384] Created future:
[10:49:32.384] |  :  .  |  attachPackages() ... DONE
[10:49:32.385] |  :  .  |  attachPackages() ...
[10:49:32.385] |  :  .  |  :  packages: [n=0] 
[10:49:32.385] |  :  .  |  attachPackages() ... DONE
[10:49:32.386] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.386] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.386] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.387] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.387] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.387] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:32.387] |  :  .  |  :  .  |  New stack:
[10:49:32.387] |  :  .  |  :  .  |  List of 1
[10:49:32.387] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.387] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.387] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.387] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.387] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.387] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.387] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.396] |  :  .  |  :  .  |  Old stack:
[10:49:32.396] readImmediateCondition() ...
[10:49:32.396]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.396]  - Number of RDS files: 0
[10:49:32.396] readImmediateCondition() ... DONE
[10:49:32.384] MulticoreFuture:
[10:49:32.384] Label: ‘future_apply-1’
[10:49:32.384] Expression:
[10:49:32.384] {
[10:49:32.384]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.384]     "# expression in do.call(), because function called uses '...'  "
[10:49:32.384]     "# as a global variable                                         "
[10:49:32.384]     do.call(function(...) {
[10:49:32.384]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.384]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.384]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.384]             on.exit(options(oopts), add = TRUE)
[10:49:32.384]         }
[10:49:32.384]         {
[10:49:32.384]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.384]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.384]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:32.384]                   envir = globalenv(), inherits = FALSE)
[10:49:32.384]                 ...future.FUN(...future.X_jj, ...)
[10:49:32.384]             })
[10:49:32.384]         }
[10:49:32.384]     }, args = future.call.arguments)
[10:49:32.384] }
[10:49:32.384] Lazy evaluation: FALSE
[10:49:32.384] Asynchronous evaluation: TRUE
[10:49:32.384] Local evaluation: TRUE
[10:49:32.384] Environment: R_GlobalEnv
[10:49:32.384] Capture standard output: TRUE
[10:49:32.384] Capture condition classes: <none>
[10:49:32.384] Globals: 5 objects totaling 3.90 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 3.66 KiB, list ‘...future.elements_ii’ of 47 bytes, list ‘...future.seeds_ii’ of 67 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:32.384] Packages: <none>
[10:49:32.384] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:49:32.384] Resolved: FALSE
[10:49:32.384] Value: <not collected>
[10:49:32.384] Conditions captured: <none>
[10:49:32.384] Early signaling: FALSE
[10:49:32.384] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:32.384] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.397] Chunk #1 of 2 ... DONE
[10:49:32.397] Chunk #2 of 2 ...
[10:49:32.397]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:32.398]  - seeds: [1] <seeds>
[10:49:32.398]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.398] getGlobalsAndPackages() ...
[10:49:32.398] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.398] |  Resolving globals: FALSE
[10:49:32.398] |  Tweak future expression to call with '...' arguments ...
[10:49:32.399] |  :  {
[10:49:32.399] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.399] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:32.399] |  :      "# as a global variable                                         "
[10:49:32.399] |  :      do.call(function(...) {
[10:49:32.399] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.399] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.399] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.399] |  :              on.exit(options(oopts), add = TRUE)
[10:49:32.399] |  :          }
[10:49:32.399] |  :          {
[10:49:32.399] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.399] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.399] |  :                  assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:32.399] |  :                    envir = globalenv(), inherits = FALSE)
[10:49:32.399] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:32.399] |  :              })
[10:49:32.399] |  :          }
[10:49:32.399] |  :      }, args = future.call.arguments)
[10:49:32.399] |  :  }
[10:49:32.399] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:32.399] |  Search for packages associated with the globals ...
[10:49:32.399] |  :  Packages associated with globals: [1] ‘base’
[10:49:32.396] |  :  .  |  :  .  |  List of 1
[10:49:32.396] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.396] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.396] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.396] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.396] |  :  .  |  :  .  |      ...)  
[10:49:32.396] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.396] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.396] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.396] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.396] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.396] |  :  .  |  :  .  |      ...)  
[10:49:32.396] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.396] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.400] |  :  Packages: [1] ‘base’
[10:49:32.400] |  :  .  |  :  .  |  Not identical
[10:49:32.400] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:32.400] |  Search for packages associated with the globals ... DONE
[10:49:32.402] |  Packages after dropping 'base': [0] 
[10:49:32.402] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:32.403] |  packages: [0] 
[10:49:32.403] getGlobalsAndPackages() ... done
[10:49:32.403] run() for Future (‘Future’) ...
[10:49:32.403] |  state: ‘created’
[10:49:32.403] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.403] |  plan(<multicore>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.404] |  Using MulticoreFutureBackend ...
[10:49:32.404] |  :  Launching futures ...
[10:49:32.404] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.404] |  :  .  |  getFutureData() ...
[10:49:32.404] |  :  .  |  :  getFutureCore() ...
[10:49:32.404] |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:32.404] |  :  .  |  :  getFutureCore() ... done
[10:49:32.404] |  :  .  |  :  getFutureCapture() ...
[10:49:32.404] |  :  .  |  :  getFutureCapture() ... done
[10:49:32.405] |  :  .  |  :  getFutureContext() ...
[10:49:32.405] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.405] |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:32.405] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.405] |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:32.405] |  :  .  |  :  getFutureContext() ... done
[10:49:32.405] |  :  .  |  getFutureData() ... done
[10:49:32.405] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.406] |  :  .  |  requestCore(..., workers = 2) ...
[10:49:32.400] |  :  .  |  :  .  |  :  List of 2
[10:49:32.400] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.400] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.400] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.400] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.400] |  :  .  |  :  .  |  :      ...)  
[10:49:32.400] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.400] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.400] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.400] |  :  .  |  :  .  |  :      ...)  
[10:49:32.400] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.407] |  :  .  |  :  .  |  :  Formals differ
[10:49:32.407] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:32.407] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:32.408] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:32.408] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:32.408] |  :  .  |  :  .  List of future strategies:
[10:49:32.408] |  :  .  |  :  .  1. sequential:
[10:49:32.408] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.408] |  :  .  |  :  .     - tweaked: FALSE
[10:49:32.408] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.408] |  :  .  |  MulticoreFuture started
[10:49:32.409] |  :  .  launchFuture() for MulticoreFutureBackend ...
[10:49:32.409] |  :  Launching futures ... done
[10:49:32.409] |  :  .  |  attachPackages() ...
[10:49:32.409] |  :  Future launched: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.409] |  :  .  |  :  packages: [n=1] ‘future’
[10:49:32.409] |  Using MulticoreFutureBackend ... done
[10:49:32.410] run() for Future (‘MulticoreFuture’) ... done
[10:49:32.410] |  :  .  |  attachPackages() ... DONE
[10:49:32.410] Created future:
[10:49:32.410] |  :  .  |  attachPackages() ...
[10:49:32.410] |  :  .  |  :  packages: [n=0] 
[10:49:32.410] |  :  .  |  attachPackages() ... DONE
[10:49:32.411] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.408] |  :  .  |  :  .  List of 1
[10:49:32.408] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.408] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.408] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.408] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.408] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.408] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.408] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.412] |  :  .  |  :  Getting full stack: [n=1] ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.412] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.412] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.412] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.412] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.412] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.413] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.413] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.413] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:32.413] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.413] |  :  .  |  :  .  all.equal() for FutureStrategyList ...
[10:49:32.413] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.413] |  :  .  |  :  .  |  New stack:
[10:49:32.413] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:32.413] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.414] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.414] |  :  .  |  assign_globals() ...
[10:49:32.413] |  :  .  |  :  .  |  List of 1
[10:49:32.413] |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.413] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.413] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.413] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.413] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.413] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.413] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.417] |  :  .  |  :  .  |  Old stack:
[10:49:32.417] |  :  .  |  :  .  |  List of 1
[10:49:32.417] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.417] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.417] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.417] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.417] |  :  .  |  :  .  |      ...)  
[10:49:32.417] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.417] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.417] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.417] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.417] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.417] |  :  .  |  :  .  |      ...)  
[10:49:32.417] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.417] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.414] |  :  .  |  List of 5
[10:49:32.414] |  :  .  |   $ future.call.arguments    : list()
[10:49:32.414] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.414] |  :  .  |   $ ...future.FUN            :function (x, size, replace = FALSE, prob = NULL)  
[10:49:32.414] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:32.414] |  :  .  |    ..$ : int [1:2] 1 3
[10:49:32.414] |  :  .  |   $ ...future.seeds_ii       :List of 1
[10:49:32.414] |  :  .  |    ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:49:32.414] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:32.414] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:32.414] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:32.414] |  :  .  |   - attr(*, "where")=List of 5
[10:49:32.414] |  :  .  |    ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:49:32.414] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:32.414] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:32.414] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:32.414] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:32.414] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.414] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:32.422] |  :  .  |  :  .  |  Not identical
[10:49:32.422] readImmediateCondition() ...
[10:49:32.422] |  :  .  |  :  .  |  all.equal() for future ...
[10:49:32.422] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:32.422]   - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.423] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:32.423] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:32.423]  - Number of RDS files: 0
[10:49:32.423] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:32.423] readImmediateCondition() ... DONE
[10:49:32.423] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:32.423] |  :  .  |  assign_globals() ... done
[10:49:32.410] MulticoreFuture:
[10:49:32.410] Label: ‘future_apply-2’
[10:49:32.410] Expression:
[10:49:32.410] {
[10:49:32.410]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:32.410]     "# expression in do.call(), because function called uses '...'  "
[10:49:32.410]     "# as a global variable                                         "
[10:49:32.410]     do.call(function(...) {
[10:49:32.410]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:32.410]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:32.410]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:32.410]             on.exit(options(oopts), add = TRUE)
[10:49:32.410]         }
[10:49:32.410]         {
[10:49:32.410]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:32.410]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:32.410]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:32.410]                   envir = globalenv(), inherits = FALSE)
[10:49:32.410]                 ...future.FUN(...future.X_jj, ...)
[10:49:32.410]             })
[10:49:32.410]         }
[10:49:32.410]     }, args = future.call.arguments)
[10:49:32.410] }
[10:49:32.410] Lazy evaluation: FALSE
[10:49:32.410] Asynchronous evaluation: TRUE
[10:49:32.410] Local evaluation: TRUE
[10:49:32.410] Environment: R_GlobalEnv
[10:49:32.410] Capture standard output: TRUE
[10:49:32.410] Capture condition classes: <none>
[10:49:32.410] Globals: 5 objects totaling 3.90 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 3.66 KiB, list ‘...future.elements_ii’ of 47 bytes, list ‘...future.seeds_ii’ of 67 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:32.410] Packages: <none>
[10:49:32.410] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:49:32.410] Resolved: FALSE
[10:49:32.410] Value: <not collected>
[10:49:32.410] Conditions captured: <none>
[10:49:32.410] Early signaling: FALSE
[10:49:32.410] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:32.410] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:32.424] Chunk #2 of 2 ... DONE
[10:49:32.424] Launching 2 futures (chunks) ... DONE
[10:49:32.424] Resolving 2 futures (chunks) ...
[10:49:32.424] value() on list ...
[10:49:32.425] |  recursive: 0
[10:49:32.425] |  length: 2
[10:49:32.425] |  
[10:49:32.425] |  Number of remaining objects: 2
[10:49:32.425] |  checking value #1 ...
[10:49:32.426] |  :  'obj' is MulticoreFuture
[10:49:32.426] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.426] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.427] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.427] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:32.427] |  :  .  |  :  .  |  :  New stack:
[10:49:32.423] |  :  .  |  :  .  |  :  List of 2
[10:49:32.423] |  :  .  |  :  .  |  :   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.423] |  :  .  |  :  .  |  :   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.423] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.423] |  :  .  |  :  .  |  :      ...)  
[10:49:32.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.423] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.423] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.423] |  :  .  |  :  .  |  :      ...)  
[10:49:32.423] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.431] |  :  .  |  :  .  |  :  Formals differ
[10:49:32.427] |  :  .  |  :  .  |  :  List of 1
[10:49:32.427] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.427] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.427] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.427] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.427] |  :  .  |  :  .  |  :      ...)  
[10:49:32.427] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.427] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.427] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.427] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.427] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.427] |  :  .  |  :  .  |  :      ...)  
[10:49:32.427] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.427] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.431] |  :  .  |  :  .  |  all.equal() for future ... done
[10:49:32.432] |  :  .  |  :  .  |  :  Old stack:
[10:49:32.432] |  :  .  |  :  .  |  Future strategies differ at level 1
[10:49:32.432] |  :  .  |  :  .  all.equal() for FutureStrategyList ... done
[10:49:32.432] |  :  .  |  :  .  plan(): Setting new future strategy stack:
[10:49:32.432] |  :  .  |  :  .  List of future strategies:
[10:49:32.432] |  :  .  |  :  .  1. sequential:
[10:49:32.432] |  :  .  |  :  .     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.432] |  :  .  |  :  .     - tweaked: FALSE
[10:49:32.432] |  :  .  |  :  .     - call: plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.432] |  :  .  |  :  .  |  :  List of 1
[10:49:32.432] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.432] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.432] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.432] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.432] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.432] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.432] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.435] |  :  .  |  :  .  |  :  Not identical
[10:49:32.435] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:32.436] |  :  readImmediateCondition() ...
[10:49:32.436] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.433] |  :  .  |  :  .  List of 1
[10:49:32.433] |  :  .  |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.433] |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.433] |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.433] |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.433] |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.433] |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.433] |  :  .  |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.436] |  :   - Number of RDS files: 0
[10:49:32.437] |  :  readImmediateCondition() ... DONE
[10:49:32.436] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.437] |  checking value #1 ... done
[10:49:32.437] |  checking value #2 ...
[10:49:32.437] |  :  .  |  :  .  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.437] |  :  'obj' is MulticoreFuture
[10:49:32.437] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.437] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.438] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.438] |  :  .  |  :  .  Backend function: <‘NULL’>
[10:49:32.438] |  :  .  |  :  .  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.438] |  :  .  |  :  .  plan(): nbrOfWorkers() = 1
[10:49:32.439] |  :  .  |  :  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.439] |  :  .  |  plan(<sequential>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.439] |  :  .  |  assign_globals() ...
[10:49:32.435] |  :  .  |  :  .  |  :  .  List of 2
[10:49:32.435] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.435] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.435] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.435] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.435] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.435] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.435] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.435] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.435] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.435] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.442] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:32.442] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:32.442] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:32.442] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:32.443] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:32.443] |  :  .  |  :  .  |  List of future strategies:
[10:49:32.443] |  :  .  |  :  .  |  1. multicore:
[10:49:32.443] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.443] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:32.443] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:32.443] |  :  .  |  :  .  |  List of 1
[10:49:32.443] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.443] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.443] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.443] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.443] |  :  .  |  :  .  |      ...)  
[10:49:32.443] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.443] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.443] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.443] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.443] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.443] |  :  .  |  :  .  |      ...)  
[10:49:32.443] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.443] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.447] |  :  readImmediateCondition() ...
[10:49:32.448] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.439] |  :  .  |  List of 5
[10:49:32.439] |  :  .  |   $ future.call.arguments    : list()
[10:49:32.439] |  :  .  |    ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:32.439] |  :  .  |   $ ...future.FUN            :function (x, size, replace = FALSE, prob = NULL)  
[10:49:32.439] |  :  .  |   $ ...future.elements_ii    :List of 1
[10:49:32.439] |  :  .  |    ..$ : int [1:2] 2 4
[10:49:32.439] |  :  .  |   $ ...future.seeds_ii       :List of 1
[10:49:32.439] |  :  .  |    ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:49:32.439] |  :  .  |   $ ...future.globals.maxSize: num Inf
[10:49:32.439] |  :  .  |   - attr(*, "resolved")= logi FALSE
[10:49:32.439] |  :  .  |   - attr(*, "total_size")= num NA
[10:49:32.439] |  :  .  |   - attr(*, "where")=List of 5
[10:49:32.439] |  :  .  |    ..$ future.call.arguments    :<en[10:49:32.448] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
vironment: R_EmptyEnv> 
[10:49:32.439] |  :  .  |    ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:49:32.439] |  :  .  |    ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:49:32.439] |  :  .  |    ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:49:32.439] |  :  .  |    ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:49:32.439] |  :  .  |   - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:32.439] |  :  .  |   - attr(*, "already-done")= logi TRUE
[10:49:32.448] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.448] |  :   - Number of RDS files: 0
[10:49:32.448] |  :  .  |  - copied ‘future.call.arguments’ to environment
[10:49:32.448] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.448] |  :  readImmediateCondition() ... DONE
[10:49:32.448] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.448] |  :  .  |  - copied ‘...future.FUN’ to environment
[10:49:32.448] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.448] |  checking value #2 ... done
[10:49:32.448] |  :  .  |  - copied ‘...future.elements_ii’ to environment
[10:49:32.448] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:32.449] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.449] |  :  .  |  - copied ‘...future.seeds_ii’ to environment
[10:49:32.449] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.449] |  :  .  |  - copied ‘...future.globals.maxSize’ to environment
[10:49:32.449] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.449] |  :  .  |  assign_globals() ... done
[10:49:32.452] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.452] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ...
[10:49:32.452] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ...
[10:49:32.452] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:32.453] |  :  .  |  :  .  |  :  New stack:
[10:49:32.453] |  :  .  |  :  .  |  :  List of 1
[10:49:32.453] |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.453] |  :  .  |  :  .  |  :      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.453] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.453] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.453] |  :  .  |  :  .  |  :      ...)  
[10:49:32.453] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.453] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.453] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.453] |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.453] |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.453] |  :  .  |  :  .  |  :      ...)  
[10:49:32.453] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.453] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.457] |  :  .  |  :  .  |  :  Old stack:
[10:49:32.459] |  Number of remaining objects: 2
[10:49:32.459] |  checking value #1 ...
[10:49:32.459] |  :  'obj' is MulticoreFuture
[10:49:32.459] |  :  readImmediateCondition() ...
[10:49:32.459] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.460] |  :   - Number of RDS files: 0
[10:49:32.460] |  :  readImmediateCondition() ... DONE
[10:49:32.460] |  :  MulticoreFuture #1
[10:49:32.460] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:32.460] |  :  .  nx: 2
[10:49:32.461] |  :  .  relay: TRUE
[10:49:32.461] |  :  .  stdout: TRUE
[10:49:32.457] |  :  .  |  :  .  |  :  List of 1
[10:49:32.457] |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySign[10:49:32.461] |  :  .  signal: TRUE
al = FALSE, envir = parent.frame())  
[10:49:32.457] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.457] |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.457] |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.457] |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.457] |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.457] |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.461] |  :  .  resignal: FALSE
[10:49:32.461] |  :  .  |  :  .  |  :  Not identical
[10:49:32.461] |  :  .  force: TRUE
[10:49:32.461] |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:32.461] |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:32.462] |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:32.462] |  :  .  until=1
[10:49:32.462] |  :  .  relaying element #1
[10:49:32.462] |  :  .  result() for MulticoreFuture ...
[10:49:32.463] |  :  .  |  readImmediateCondition() ...
[10:49:32.463] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.464] |  :  .  |   - Number of RDS files: 0
[10:49:32.464] |  :  .  |  readImmediateCondition() ... DONE
[10:49:32.464] |  :  .  result() for MulticoreFuture ... done
[10:49:32.464] |  :  .  result() for MulticoreFuture ...
[10:49:32.465] |  :  .  result() for MulticoreFuture ... done
[10:49:32.465] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.465] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.465] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:49:32.465] |  :  value(<MulticoreFuture>, ...) ...
[10:49:32.466] |  :  .  result() for MulticoreFuture ...
[10:49:32.466] |  :  .  result() for MulticoreFuture ... done
[10:49:32.466] |  :  .  value: <list>
[10:49:32.466] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:32.466] |  :  signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:49:32.467] |  :  .  nx: 2
[10:49:32.467] |  :  .  relay: TRUE
[10:49:32.467] |  :  .  stdout: TRUE
[10:49:32.467] |  :  .  signal: TRUE
[10:49:32.467] |  :  .  resignal: FALSE
[10:49:32.467] |  :  .  force: TRUE
[10:49:32.468] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.468] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.468] |  :  .  until=2
[10:49:32.468] |  :  .  relaying element #2
[10:49:32.469] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.469] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.469] |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:32.469] |  :  length: 1 (resolved future 1)
[10:49:32.469] |  checking value #1 ... done
[10:49:32.470] |  checking value #2 ...
[10:49:32.470] |  :  'obj' is MulticoreFuture
[10:49:32.461] |  :  .  |  :  .  |  :  .  List of 2
[10:49:32.461] |  :  .  |  :  .  |  :  .   $ target :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.461] |  :  .  |  :  .  |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.461] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.461] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.461] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.461] |  :  .  |  :  .  |  :  .      ...)  
[10:49:32.461] |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.461] |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.461] |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.461] |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategiesR, .cleanup = FALSE, .init = FALSE)
[10:49:32.472] |  :  .  |  :  .  |  :  .  Formals differ
[10:49:32.472] |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:32.472] |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:32.472] |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:32.472] |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:32.472] |  :  .  |  :  .  |  List of future strategies:
[10:49:32.472] |  :  .  |  :  .  |  1. multicore:
[10:49:32.472] |  :  .  |  :  .  |     - args: function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.472] |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:32.472] |  :  .  |  :  .  |     - call: plan(strategy)
[10:49:32.473] |  :  .  |  :  .  |  List of 1
[10:49:32.473] |  :  .  |  :  .  |   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.473] |  :  .  |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.473] |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.473] |  :  .  |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.473] |  :  .  |  :  .  |      ...)  
[10:49:32.473] |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.473] |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.473] |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.473] |  :  .  |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.473] |  :  .  |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.473] |  :  .  |  :  .  |      ...)  
[10:49:32.473] |  :  .  |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.473] |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.477] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ...
[10:49:32.477] |  :  .  |  :  .  |  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = FALSE) ... done
[10:49:32.478] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.478] |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.478] |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.478] |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 2
[10:49:32.478] |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = FALSE, init = FALSE) ... done
[10:49:32.478] |  :  .  |  :  plan(<FutureStrategyList>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.479] |  :  .  |  plan(<name>, .skip = FALSE, .cleanup = FALSE, .init = FALSE) ... done
[10:49:32.479] |  :  readImmediateCondition() ...
[10:49:32.479] |  :    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.479] |  :   - Number of RDS files: 0
[10:49:32.479] |  :  readImmediateCondition() ... DONE
[10:49:32.479] |  :  MulticoreFuture #2
[10:49:32.480] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:32.480] |  :  .  nx: 2
[10:49:32.480] |  :  .  relay: TRUE
[10:49:32.480] |  :  .  stdout: TRUE
[10:49:32.480] |  :  .  signal: TRUE
[10:49:32.480] |  :  .  resignal: FALSE
[10:49:32.480] |  :  .  force: TRUE
[10:49:32.480] |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:32.480] |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:32.481] |  :  .  until=2
[10:49:32.481] |  :  .  relaying element #2
[10:49:32.481] |  :  .  result() for MulticoreFuture ...
[10:49:32.481] |  :  .  |  readImmediateCondition() ...
[10:49:32.481] |  :  .  |    - path: ‘/tmp/RtmpgMQHE4/.future/immediateConditions’
[10:49:32.482] |  :  .  |   - Number of RDS files: 0
[10:49:32.482] |  :  .  |  readImmediateCondition() ... DONE
[10:49:32.482] |  :  .  result() for MulticoreFuture ... done
[10:49:32.482] |  :  .  result() for MulticoreFuture ...
[10:49:32.483] |  :  .  result() for MulticoreFuture ... done
[10:49:32.483] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.483] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.483] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:32.483] |  :  value(<MulticoreFuture>, ...) ...
[10:49:32.483] |  :  .  result() for MulticoreFuture ...
[10:49:32.484] |  :  .  result() for MulticoreFuture ... done
[10:49:32.484] |  :  .  value: <list>
[10:49:32.484] |  :  value(<MulticoreFuture>, ...) ... done
[10:49:32.484] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:49:32.484] |  :  .  nx: 2
[10:49:32.484] |  :  .  relay: TRUE
[10:49:32.484] |  :  .  stdout: TRUE
[10:49:32.485] |  :  .  signal: TRUE
[10:49:32.485] |  :  .  resignal: FALSE
[10:49:32.485] |  :  .  force: TRUE
[10:49:32.485] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.485] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.485] |  :  .  until=2
[10:49:32.486] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.486] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.486] |  :  signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:49:32.486] |  :  length: 0 (resolved future 2)
[10:49:32.486] |  checking value #2 ... done
[10:49:32.486] |  Relaying remaining futures ...
[10:49:32.487] |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:32.487] |  :  .  nx: 2
[10:49:32.487] |  :  .  relay: TRUE
[10:49:32.487] |  :  .  stdout: TRUE
[10:49:32.487] |  :  .  signal: TRUE
[10:49:32.487] |  :  .  resignal: FALSE
[10:49:32.487] |  :  .  force: TRUE
[10:49:32.487] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.488] |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:32.488] |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:32.488] |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:32.488] |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:32.488] |  Relaying remaining futures ... done
[10:49:32.488] value() on list ... done
[10:49:32.488]  - Number of value chunks collected: 2
[10:49:32.488] Resolving 2 futures (chunks) ... DONE
[10:49:32.489] Reducing values from 2 chunks ...
[10:49:32.489]  - Number of values collected after concatenation: 2
[10:49:32.489]  - Number of values expected: 2
[10:49:32.489] Reducing values from 2 chunks ... DONE
[10:49:32.489] future_lapply() ... DONE
     [,1] [,2]
[1,]    3    2
[2,]    1    4
[10:49:32.489] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.490] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:32.490] |  :  all.equal() for FutureStrategyList ...
[10:49:32.490] |  :  .  New stack:
[10:49:32.490] |  :  .  List of 1
[10:49:32.490] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.490] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.490] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.490] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.490] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.490] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:32.490] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.493] |  :  .  Old stack:
[10:49:32.493] |  :  .  List of 1
[10:49:32.493] |  :  .   $ :function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.493] |  :  .      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.493] |  :  .    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.493] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.493] |  :  .      ...)  
[10:49:32.493] |  :  .    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.493] |  :  .    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.493] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.493] |  :  .    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.493] |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.493] |  :  .      ...)  
[10:49:32.493] |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.493] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.497] |  :  .  Not identical
[10:49:32.497] |  :  .  all.equal() for future ...
[10:49:32.497] |  :  .  |  List of 2
[10:49:32.497] |  :  .  |   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.497] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.497] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.497] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.497] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.497] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:32.497] |  :  .  |   $ current:function (..., workers = availableCores(constraints = "multicore"), gc = FALSE, 
[10:49:32.497] |  :  .  |      earlySignal = FALSE, envir = parent.frame())  
[10:49:32.497] |  :  .  |    ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[10:49:32.497] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.497] |  :  .  |      ...)  
[10:49:32.497] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.497] |  :  .  |    ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.497] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.497] |  :  .  |    ..- attr(*, "backend")=Classes 'MulticoreFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5b542d70> 
[10:49:32.497] |  :  .  |    .. ..- attr(*, "factory")=function (workers = availableCores(constraints = "multicore"), maxSizeOfObjects = +Inf, 
[10:49:32.497] |  :  .  |      ...)  
[10:49:32.497] |  :  .  |    .. .. ..- attr(*, "tweakable")= chr [1:9] "workers" "maxSizeOfObjects" "wait.timeout" "wait.interval" ...
[10:49:32.503] |  :  .  |  Formals differ
[10:49:32.503] |  :  .  all.equal() for future ... done
[10:49:32.503] |  :  .  Future strategies differ at level 1
[10:49:32.503] |  :  all.equal() for FutureStrategyList ... done
[10:49:32.503] |  :  plan(): Setting new future strategy stack:
[10:49:32.503] |  :  List of future strategies:
[10:49:32.503] |  :  1. sequential:
[10:49:32.503] |  :     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:32.503] |  :     - tweaked: FALSE
[10:49:32.503] |  :     - call: plan(sequential)
[10:49:32.504] |  :  List of 1
[10:49:32.504] |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.504] |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.504] |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.504] |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.504] |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.504] |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:32.504] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.506] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:32.507] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.507] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:49:32.507] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.508] |  :  .  Legacy shutdown of cluster workers ...
[10:49:32.508] |  :  .  |  Stopping existing cluster ...
[10:49:32.508] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:32.509] |  :  .  |  Stopping existing cluster ... done
[10:49:32.509] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:32.509] |  :  plan(): plan_cleanup(‘multicore’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:32.509] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:49:32.509] |  :  .  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.509] |  :  .   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.509] |  :  .   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.509] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.509] |  :  .   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.509] |  :  .   - attr(*, "call")= language plan(sequential)
[10:49:32.511] |  :  .  init: NULL
[10:49:32.511] |  :  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:49:32.511] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.511] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.511] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.512] |  :  Backend function: <‘NULL’>
[10:49:32.512] |  :  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:32.512] |  :  plan(): nbrOfWorkers() = 1
[10:49:32.512] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:32.512] plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:49:32.512] plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.513] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:32.513] |  :  all.equal() for FutureStrategyList ...
[10:49:32.513] |  :  .  New stack:
[10:49:32.513] |  :  .  List of 1
[10:49:32.513] |  :  .   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:32.513] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.513] |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:32.513] |  :  .    ..- attr(*, "init")= logi TRUE
[10:49:32.513] |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:32.513] |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.513] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.513] |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:32.513] |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:32.513] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.516] |  :  .  Old stack:
[10:49:32.517] |  :  .  List of 1
[10:49:32.517] |  :  .   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.517] |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.517] |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.517] |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.517] |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.517] |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:32.517] |  :  .   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.519] |  :  .  Not identical
[10:49:32.519] |  :  .  all.equal() for future ...
[10:49:32.519] |  :  .  |  List of 2
[10:49:32.519] |  :  .  |   $ target :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:32.519] |  :  .  |      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.519] |  :  .  |    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:32.519] |  :  .  |    ..- attr(*, "init")= logi TRUE
[10:49:32.519] |  :  .  |    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:32.519] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.519] |  :  .  |    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.519] |  :  .  |    ..- attr(*, "untweakable")= chr "persistent"
[10:49:32.519] |  :  .  |    ..- attr(*, "call")= language plan(strategy)
[10:49:32.519] |  :  .  |   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.519] |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:32.519] |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:32.519] |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.519] |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:32.519] |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:32.524] |  :  .  |  Formals differ
[10:49:32.524] |  :  .  all.equal() for future ... done
[10:49:32.524] |  :  .  Future strategies differ at level 1
[10:49:32.525] |  :  all.equal() for FutureStrategyList ... done
[10:49:32.525] |  :  plan(): Setting new future strategy stack:
[10:49:32.525] |  :  List of future strategies:
[10:49:32.525] |  :  1. multisession:
[10:49:32.525] |  :     - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), gc = FALSE, earlySignal = FALSE, envir = parent.frame())
[10:49:32.525] |  :     - tweaked: FALSE
[10:49:32.525] |  :     - call: plan(strategy)
[10:49:32.525] |  :  List of 1
[10:49:32.525] |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:32.525] |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.525] |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:32.525] |  :    ..- attr(*, "init")= logi TRUE
[10:49:32.525] |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:32.525] |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.525] |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.525] |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:32.525] |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:32.525] |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:32.528] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:32.528] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:32.529] |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:32.529] |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:32.529] |  :  .  Legacy shutdown of cluster workers ...
[10:49:32.529] |  :  .  |  Stopping existing cluster ...
[10:49:32.529] |  :  .  |  :  No pre-existing cluster. Skipping
[10:49:32.529] |  :  .  |  Stopping existing cluster ... done
[10:49:32.529] |  :  .  Legacy shutdown of cluster workers ... done
[10:49:32.529] |  :  plan(): plan_cleanup(‘sequential’, ‘uniprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:32.530] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:49:32.530] |  :  .  function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:32.530] |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:32.530] |  :  .   - attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:32.530] |  :  .   - attr(*, "init")= logi TRUE
[10:49:32.530] |  :  .   - attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:32.530] |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.530] |  :  .   - attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:32.530] |  :  .   - attr(*, "untweakable")= chr "persistent"
[10:49:32.530] |  :  .   - attr(*, "call")= language plan(strategy)
[10:49:32.532] |  :  .  init: TRUE
[10:49:32.532] |  :  .  makeFutureBackend(<multisession>) ...
[10:49:32.533] |  :  .  |  Backend function: <‘NULL’>
[10:49:32.534] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ...
[10:49:32.535] |  :  .  |  :  workers: 2
[10:49:32.535] |  :  .  |  :  getCluster() ...
[10:49:32.535] |  :  .  |  :  getCluster() ... done
[10:49:32.535] |  :  .  |  :  Stopping existing cluster ...
[10:49:32.535] |  :  .  |  :  .  No pre-existing cluster. Skipping
[10:49:32.535] |  :  .  |  :  Stopping existing cluster ... done
[10:49:32.535] |  :  .  |  :  Starting new cluster ...
[10:49:32.535] |  :  .  |  :  .  makeCluster(workers, ...) ...
[10:49:32.535] |  :  .  |  :  .  |  Arguments:
[10:49:32.535] |  :  .  |  :  .  |  List of 2
[10:49:32.535] |  :  .  |  :  .  |   $             : int 2
[10:49:32.535] |  :  .  |  :  .  |   $ rscript_libs: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:49:33.025] |  :  .  |  :  .  |  Generated cluster UUID
[10:49:33.025] |  :  .  |  :  .  |  Cluster UUID: ‘d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.025] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.027] |  :  .  |  :  .  makeCluster(workers, ...) ... done
[10:49:33.027] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.029] |  :  .  |  :  Starting new cluster ... done
[10:49:33.029] |  :  .  |  :  Number of workers: 2
[10:49:33.029] |  :  .  |  :  Workers UUID: ‘d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.029] |  :  .  |  ClusterFutureBackend(..., persistent = FALSE, gc = FALSE, earlySignal = FALSE) ... done
[10:49:33.029] |  :  .  |  Backend: <‘MultisessionFutureBackend’, ‘ClusterFutureBackend’, ‘MultiprocessFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:33.029] |  :  .  makeFutureBackend(<multisession>) ... done
[10:49:33.029] |  :  plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... done
[10:49:33.029] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.030] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.030] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.030] |  :  plan(): nbrOfWorkers() = 2
[10:49:33.030] |  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:33.030] plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
- From example(apply) ...
[10:49:33.030] getGlobalsAndPackagesXApply() ...
[10:49:33.031]  - future.globals: TRUE
[10:49:33.031] getGlobalsAndPackages() ...
[10:49:33.031] |  Searching for globals ...
[10:49:33.066] |  :  globals found: [59] ‘FUN’, ‘if’, ‘==’, ‘c’, ‘list.names’, ‘{’, ‘<-’, ‘[’, ‘as.list’, ‘substitute’, ‘-’, ‘&&’, ‘length’, ‘is.list’, ‘!’, ‘is.null’, ‘names’, ‘return’, ‘seq_along’, ‘vapply’, ‘switch’, ‘+’, ‘is.symbol’, ‘as.character’, ‘deparse’, ‘[<-’, ‘missing’, ‘match’, ‘match.arg’, ‘!=’, ‘warning’, ‘list’, ‘[[’, ‘paste’, ‘stop’, ‘integer’, ‘for’, ‘is.factor’, ‘anyNA’, ‘options’, ‘on.exit’, ‘factor’, ‘(’, ‘||’, ‘levels’, ‘as.integer’, ‘which’, ‘is.na’, ‘is.na<-’, ‘>’, ‘prod’, ‘$’, ‘.Machine’, ‘*’, ‘names<-’, ‘array’, ‘tabulate’, ‘class’, ‘class<-’
[10:49:33.066] |  Searching for globals ... DONE
[10:49:33.066] |  Resolving globals: FALSE
[10:49:33.067] |  Search for packages associated with the globals ...
[10:49:33.067] |  :  Packages associated with globals: [1] ‘base’
[10:49:33.068] |  :  Packages: [1] ‘base’
[10:49:33.068] |  Search for packages associated with the globals ... DONE
[10:49:33.069] |  The total size of the 1 globals is 31.30 KiB (32048 bytes)
[10:49:33.069] |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 31.30 KiB There is one global: ‘FUN’ (31.30 KiB of class ‘function’)
[10:49:33.069] |  Packages after dropping 'base': [0] 
[10:49:33.069] |  globals: [1] ‘FUN’
[10:49:33.069] |  packages: [0] 
[10:49:33.070] getGlobalsAndPackages() ... done
[10:49:33.070]  - globals found/used: [n=1] ‘FUN’
[10:49:33.070]  - needed namespaces: [n=0] 
[10:49:33.070] Finding globals ... DONE
[10:49:33.070]  - use_args: TRUE
[10:49:33.070]  - Getting '...' globals ...
[10:49:33.070] resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:33.070] |  recursive: 0
[10:49:33.071] |  length: 1
[10:49:33.071] |  elements: ‘...’
[10:49:33.071] |  'obj' is DotDotDotList
[10:49:33.071] |  resolve(obj, ...) ...
[10:49:33.071] |  resolve(obj, ...) ... done
[10:49:33.071] |  length: 0 (resolved future 1)
[10:49:33.071] resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:33.071]    - '...' content: [n=0] 
[10:49:33.071] List of 1
[10:49:33.071]  $ ...: list()
[10:49:33.071]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.071]  - attr(*, "where")=List of 1
[10:49:33.071]   ..$ ...:<environment: 0x564d5de40d90> 
[10:49:33.071]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.071]  - attr(*, "resolved")= logi TRUE
[10:49:33.071]  - attr(*, "total_size")= num NA
[10:49:33.074]  - Getting '...' globals ... DONE
[10:49:33.074] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:33.074] List of 2
[10:49:33.074]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:33.074]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:33.074]  $ ...          : list()
[10:49:33.074]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.074]  - attr(*, "where")=List of 2
[10:49:33.074]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:33.074]   ..$ ...          :<environment: 0x564d5de40d90> 
[10:49:33.074]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.074]  - attr(*, "resolved")= logi FALSE
[10:49:33.074]  - attr(*, "total_size")= num 65963
[10:49:33.077] Packages to be attached in all futures: [n=0] 
[10:49:33.077] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.078] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.078] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.078] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.078] future_lapply() ...
[10:49:33.112] plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.113] |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.113] plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.113] Number of chunks: 2
[10:49:33.113] getGlobalsAndPackagesXApply() ...
[10:49:33.113]  - future.globals: <name-value list> with names ‘list()’
[10:49:33.113]  - use_args: TRUE
[10:49:33.114] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:33.114] List of 2
[10:49:33.114]  $ ...          : list()
[10:49:33.114]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.114]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:33.114]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:33.114]  - attr(*, "where")=List of 2
[10:49:33.114]   ..$ ...          :<environment: 0x564d5de40d90> 
[10:49:33.114]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:33.114]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.114]  - attr(*, "resolved")= logi FALSE
[10:49:33.114]  - attr(*, "total_size")= num NA
[10:49:33.117] Packages to be attached in all futures: [n=0] 
[10:49:33.117] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.117] Number of futures (= number of chunks): 2
[10:49:33.117] Launching 2 futures (chunks) ...
[10:49:33.118] Chunk #1 of 2 ...
[10:49:33.118]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.118]  - seeds: <none>
[10:49:33.118]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.118] getGlobalsAndPackages() ...
[10:49:33.118] |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.118] |  Resolving globals: FALSE
[10:49:33.118] |  Tweak future expression to call with '...' arguments ...
[10:49:33.118] |  :  {
[10:49:33.118] |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.118] |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:33.118] |  :      "# as a global variable                                         "
[10:49:33.118] |  :      do.call(function(...) {
[10:49:33.118] |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.118] |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.118] |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.118] |  :              on.exit(options(oopts), add = TRUE)
[10:49:33.118] |  :          }
[10:49:33.118] |  :          {
[10:49:33.118] |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.118] |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.118] |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:33.118] |  :              })
[10:49:33.118] |  :          }
[10:49:33.118] |  :      }, args = future.call.arguments)
[10:49:33.118] |  :  }
[10:49:33.119] |  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.119] |  Search for packages associated with the globals ...
[10:49:33.119] |  :  Packages associated with globals: [1] ‘base’
[10:49:33.119] |  :  Packages: [1] ‘base’
[10:49:33.119] |  Search for packages associated with the globals ... DONE
[10:49:33.120] |  Packages after dropping 'base': [0] 
[10:49:33.120] |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.120] |  packages: [0] 
[10:49:33.120] getGlobalsAndPackages() ... done
[10:49:33.120] run() for Future (‘Future’) ...
[10:49:33.120] |  state: ‘created’
[10:49:33.120] |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.120] |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.120] |  Using MultisessionFutureBackend ...
[10:49:33.121] |  :  Launching futures ...
[10:49:33.121] |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:33.121] |  :  .  |  Workers: [n=2]
[10:49:33.121] |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.123] |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.123] |  :  .  |  requestWorker() ...
[10:49:33.123] |  :  .  |  :  requestNode() ...
[10:49:33.123] |  :  .  |  :  .  Number of workers: 2
[10:49:33.123] |  :  .  |  :  .  Polling for a free worker ...
[10:49:33.123] |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.123] |  :  .  |  :  .  |  :  Created empty registry ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.124] |  :  .  |  :  .  |  :  Listing all futures
[10:49:33.124] |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:33.124] |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.124] |  :  .  |  :  .  |  Total time: 0
[10:49:33.124] |  :  .  |  :  .  Polling for a free worker ... done
[10:49:33.124] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.124] |  :  .  |  :  .  |  Listing all futures
[10:49:33.124] |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:33.124] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.124] |  :  .  |  :  .  Index of first available worker: 1
[10:49:33.124] |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:33.184] |  :  .  |  :  .  |  Worker is functional
[10:49:33.184] |  :  .  |  :  .  requestNode() ... done
[10:49:33.185] |  :  .  |  :  .  cluster node index: 1
[10:49:33.185] |  :  .  |  :  requestWorker() ... done
[10:49:33.185] |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:33.186] |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:33.186] |  :  .  |  :  launchFuture() ...
[10:49:33.186] |  :  .  |  :  .  cluster node index: 1
[10:49:33.186] |  :  .  |  :  .  getFutureData() ...
[10:49:33.186] |  :  .  |  :  .  |  getFutureCore() ...
[10:49:33.186] |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:33.186] |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:33.186] |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:33.186] |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:33.187] |  :  .  |  :  .  |  getFutureContext() ...
[10:49:33.187] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.187] |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:33.187] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.187] |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:33.187] |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:33.187] |  :  .  |  :  .  getFutureData() ... done
[10:49:33.188] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:33.188] |  :  .  |  :  .  |  Appended future to position #1
[10:49:33.188] |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:33.188] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:33.188] |  :  .  |  :  launchFuture() ... done
[10:49:33.189] |  :  .  |  :  MultisessionFuture started
[10:49:33.189] |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:33.189] |  :  .  Launching futures ... done
[10:49:33.189] |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.189] |  :  Using MultisessionFutureBackend ... done
[10:49:33.189] |  run() for Future (‘MultisessionFuture’) ... done
[10:49:33.189] Created future:
[10:49:33.190] |  isFutureResolved() ...
[10:49:33.191] |  :  assertValidConnection() ...
[10:49:33.191] |  :  .  cluster node index: 1
[10:49:33.191] |  :  assertValidConnection() ... done
[10:49:33.202] |  isFutureResolved() ... done
[10:49:33.189] MultisessionFuture:
[10:49:33.189] Label: ‘future_apply-1’
[10:49:33.189] Expression:
[10:49:33.189] {
[10:49:33.189]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.189]     "# expression in do.call(), because function called uses '...'  "
[10:49:33.189]     "# as a global variable                                         "
[10:49:33.189]     do.call(function(...) {
[10:49:33.189]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.189]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.189]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.189]             on.exit(options(oopts), add = TRUE)
[10:49:33.189]         }
[10:49:33.189]         {
[10:49:33.189]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.189]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.189]                 ...future.FUN(...future.X_jj, ...)
[10:49:33.189]             })
[10:49:33.189]         }
[10:49:33.189]     }, args = future.call.arguments)
[10:49:33.189] }
[10:49:33.189] Lazy evaluation: FALSE
[10:49:33.189] Asynchronous evaluation: TRUE
[10:49:33.189] Local evaluation: TRUE
[10:49:33.189] Environment: R_GlobalEnv
[10:49:33.189] Capture standard output: TRUE
[10:49:33.189] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:33.189] Immediate condition classes: ‘immediateCondition’
[10:49:33.189] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:33.189] Packages: <none>
[10:49:33.189] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:33.189] Resolved: FALSE
[10:49:33.189] Value: <not collected>
[10:49:33.189] Conditions captured: <none>
[10:49:33.189] Early signaling: FALSE
[10:49:33.189] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:33.189] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.202] Chunk #1 of 2 ... DONE
[10:49:33.202] Chunk #2 of 2 ...
[10:49:33.202]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.203]  - seeds: <none>
[10:49:33.203]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.203] |  getGlobalsAndPackages() ...
[10:49:33.203] |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.203] |  :  Resolving globals: FALSE
[10:49:33.203] |  :  Tweak future expression to call with '...' arguments ...
[10:49:33.203] |  :  .  {
[10:49:33.203] |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.203] |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:33.203] |  :  .      "# as a global variable                                         "
[10:49:33.203] |  :  .      do.call(function(...) {
[10:49:33.203] |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.203] |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.203] |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.203] |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:33.203] |  :  .          }
[10:49:33.203] |  :  .          {
[10:49:33.203] |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.203] |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.203] |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:33.203] |  :  .              })
[10:49:33.203] |  :  .          }
[10:49:33.203] |  :  .      }, args = future.call.arguments)
[10:49:33.203] |  :  .  }
[10:49:33.204] |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.204] |  :  Search for packages associated with the globals ...
[10:49:33.204] |  :  .  Packages associated with globals: [1] ‘base’
[10:49:33.204] |  :  .  Packages: [1] ‘base’
[10:49:33.204] |  :  Search for packages associated with the globals ... DONE
[10:49:33.204] |  :  Packages after dropping 'base': [0] 
[10:49:33.204] |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.205] |  :  packages: [0] 
[10:49:33.205] |  getGlobalsAndPackages() ... done
[10:49:33.205] |  run() for Future (‘Future’) ...
[10:49:33.205] |  :  state: ‘created’
[10:49:33.205] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.205] |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.205] |  :  Using MultisessionFutureBackend ...
[10:49:33.205] |  :  .  Launching futures ...
[10:49:33.206] |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:33.206] |  :  .  |  :  Workers: [n=2]
[10:49:33.206] |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.207] |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.207] |  :  .  |  :  requestWorker() ...
[10:49:33.207] |  :  .  |  :  .  requestNode() ...
[10:49:33.208] |  :  .  |  :  .  |  Number of workers: 2
[10:49:33.208] |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:33.208] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.208] |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:33.208] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:33.208] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.208] |  :  .  |  :  .  |  :  Total time: 0
[10:49:33.208] |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:33.208] |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.208] |  :  .  |  :  .  |  :  Listing all futures
[10:49:33.209] |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:33.209] |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.209] |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:33.209] |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:33.290] |  :  .  |  :  .  |  :  Worker is functional
[10:49:33.290] |  :  .  |  :  .  |  requestNode() ... done
[10:49:33.290] |  :  .  |  :  .  |  cluster node index: 2
[10:49:33.291] |  :  .  |  :  .  requestWorker() ... done
[10:49:33.291] |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:33.291] |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:33.291] |  :  .  |  :  .  launchFuture() ...
[10:49:33.291] |  :  .  |  :  .  |  cluster node index: 2
[10:49:33.291] |  :  .  |  :  .  |  getFutureData() ...
[10:49:33.292] |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:33.292] |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:33.292] |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:33.292] |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:33.292] |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:33.292] |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:33.292] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.292] |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:33.292] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.292] |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:33.293] |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:33.293] |  :  .  |  :  .  |  getFutureData() ... done
[10:49:33.293] |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:33.294] |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:33.294] |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:33.294] |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:33.294] |  :  .  |  :  .  launchFuture() ... done
[10:49:33.294] |  :  .  |  :  .  MultisessionFuture started
[10:49:33.294] |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:33.294] |  :  .  |  Launching futures ... done
[10:49:33.294] |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.294] |  :  .  Using MultisessionFutureBackend ... done
[10:49:33.295] |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:33.295] Created future:
[10:49:33.296] |  :  isFutureResolved() ...
[10:49:33.296] |  :  .  assertValidConnection() ...
[10:49:33.296] |  :  .  |  cluster node index: 2
[10:49:33.298] |  :  .  assertValidConnection() ... done
[10:49:33.309] |  :  isFutureResolved() ... done
[10:49:33.295] MultisessionFuture:
[10:49:33.295] Label: ‘future_apply-2’
[10:49:33.295] Expression:
[10:49:33.295] {
[10:49:33.295]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.295]     "# expression in do.call(), because function called uses '...'  "
[10:49:33.295]     "# as a global variable                                         "
[10:49:33.295]     do.call(function(...) {
[10:49:33.295]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.295]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.295]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.295]             on.exit(options(oopts), add = TRUE)
[10:49:33.295]         }
[10:49:33.295]         {
[10:49:33.295]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.295]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.295]                 ...future.FUN(...future.X_jj, ...)
[10:49:33.295]             })
[10:49:33.295]         }
[10:49:33.295]     }, args = future.call.arguments)
[10:49:33.295] }
[10:49:33.295] Lazy evaluation: FALSE
[10:49:33.295] Asynchronous evaluation: TRUE
[10:49:33.295] Local evaluation: TRUE
[10:49:33.295] Environment: R_GlobalEnv
[10:49:33.295] Capture standard output: TRUE
[10:49:33.295] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:33.295] Immediate condition classes: ‘immediateCondition’
[10:49:33.295] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:33.295] Packages: <none>
[10:49:33.295] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:33.295] Resolved: FALSE
[10:49:33.295] Value: <not collected>
[10:49:33.295] Conditions captured: <none>
[10:49:33.295] Early signaling: FALSE
[10:49:33.295] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:33.295] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.309] Chunk #2 of 2 ... DONE
[10:49:33.309] Launching 2 futures (chunks) ... DONE
[10:49:33.309] Resolving 2 futures (chunks) ...
[10:49:33.310] |  :  value() on list ...
[10:49:33.310] |  :  .  recursive: 0
[10:49:33.310] |  :  .  length: 2
[10:49:33.310] |  :  .  
[10:49:33.310] |  :  .  Number of remaining objects: 2
[10:49:33.310] |  :  .  checking value #1 ...
[10:49:33.310] |  :  .  |  'obj' is MultisessionFuture
[10:49:33.310] |  :  .  |  isFutureResolved() ...
[10:49:33.311] |  :  .  |  :  assertValidConnection() ...
[10:49:33.311] |  :  .  |  :  .  cluster node index: 1
[10:49:33.311] |  :  .  |  :  assertValidConnection() ... done
[10:49:33.311] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:33.311] |  :  .  |  :  .  cluster node index: 1
[10:49:33.312] |  :  .  |  :  .  [1] TRUE
[10:49:33.312] |  :  .  |  :  .  received data:
[10:49:33.312] |  :  .  |  :  .  List of 5
[10:49:33.312] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:33.312] |  :  .  |  :  .   $ value  :List of 13
[10:49:33.312] |  :  .  |  :  .    ..$ value            :List of 1
[10:49:33.312] |  :  .  |  :  .    .. ..$ : 'table' int [1:3(1d)] 2 1 1
[10:49:33.312] |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 1
[10:49:33.312] |  :  .  |  :  .    .. .. .. ..$ ...future.X_jj: chr [1:3] "1" "3" "7"
[10:49:33.312] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:33.312] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:33.312] |  :  .  |  :  .    ..$ conditions       : list()
[10:49:33.312] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:33.312] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:33.312] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:33.312] |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:33.312] |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:33.312] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:33.312] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:33.312] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.312] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.312] |  :  .  |  :  .    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:33.312] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:33.312] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:33.312] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:33.312] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:33.312] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:33.312] |  :  .  |  :  .    .. .. ..$ pid   : int 63864
[10:49:33.312] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.312] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:33.312] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:33.312] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:33.312] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:33.312] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:33.312] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:33.312] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:33.312] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:33.312] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:33.312] |  :  .  |  :  .   $ success: logi TRUE
[10:49:33.312] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.064 0.004 0.069 0 0
[10:49:33.312] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:33.312] |  :  .  |  :  .   $ tag    : NULL
[10:49:33.323] |  :  .  |  :  .  Received FutureResult
[10:49:33.323] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:33.323] |  :  .  |  :  .  |  Removed future from position #1
[10:49:33.323] |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:33.323] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:33.323] |  :  .  |  :  .  Erased future from future backend
[10:49:33.323] |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.323] |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.324] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.324] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:33.324] |  :  .  |  isFutureResolved() ... done
[10:49:33.324] |  :  .  |  MultisessionFuture #1
[10:49:33.324] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:33.324] |  :  .  |  :  nx: 2
[10:49:33.324] |  :  .  |  :  relay: TRUE
[10:49:33.324] |  :  .  |  :  stdout: TRUE
[10:49:33.324] |  :  .  |  :  signal: TRUE
[10:49:33.324] |  :  .  |  :  resignal: FALSE
[10:49:33.324] |  :  .  |  :  force: TRUE
[10:49:33.324] |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:33.325] |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:33.325] |  :  .  |  :  until=1
[10:49:33.325] |  :  .  |  :  relaying element #1
[10:49:33.325] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.325] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.325] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.325] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.325] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.325] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.325] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.325] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.326] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.326] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.326] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.326] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.326] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:33.326] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:33.326] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:33.326] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:33.326] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.326] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.326] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.327] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.327] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.327] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.327] |  :  .  |  :  value: <list>
[10:49:33.327] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:33.327] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:33.327] |  :  .  |  :  nx: 2
[10:49:33.327] |  :  .  |  :  relay: TRUE
[10:49:33.327] |  :  .  |  :  stdout: TRUE
[10:49:33.327] |  :  .  |  :  signal: TRUE
[10:49:33.327] |  :  .  |  :  resignal: FALSE
[10:49:33.327] |  :  .  |  :  force: TRUE
[10:49:33.328] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:33.328] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:33.328] |  :  .  |  :  until=2
[10:49:33.328] |  :  .  |  :  relaying element #2
[10:49:33.328] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:33.328] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:33.328] |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:33.328] |  :  .  |  length: 1 (resolved future 1)
[10:49:33.328] |  :  .  checking value #1 ... done
[10:49:33.328] |  :  .  checking value #2 ...
[10:49:33.328] |  :  .  |  'obj' is MultisessionFuture
[10:49:33.329] |  :  .  |  isFutureResolved() ...
[10:49:33.329] |  :  .  |  :  assertValidConnection() ...
[10:49:33.329] |  :  .  |  :  .  cluster node index: 2
[10:49:33.329] |  :  .  |  :  assertValidConnection() ... done
[10:49:33.339] |  :  .  |  isFutureResolved() ... done
[10:49:33.340] |  :  .  checking value #2 ... done
[10:49:33.350] |  :  .  Number of remaining objects: 1
[10:49:33.350] |  :  .  checking value #2 ...
[10:49:33.350] |  :  .  |  'obj' is MultisessionFuture
[10:49:33.350] |  :  .  |  isFutureResolved() ...
[10:49:33.351] |  :  .  |  :  assertValidConnection() ...
[10:49:33.351] |  :  .  |  :  .  cluster node index: 2
[10:49:33.351] |  :  .  |  :  assertValidConnection() ... done
[10:49:33.362] |  :  .  |  isFutureResolved() ... done
[10:49:33.362] |  :  .  checking value #2 ... done
[10:49:33.372] |  :  .  Number of remaining objects: 1
[10:49:33.372] |  :  .  checking value #2 ...
[10:49:33.372] |  :  .  |  'obj' is MultisessionFuture
[10:49:33.373] |  :  .  |  isFutureResolved() ...
[10:49:33.373] |  :  .  |  :  assertValidConnection() ...
[10:49:33.373] |  :  .  |  :  .  cluster node index: 2
[10:49:33.373] |  :  .  |  :  assertValidConnection() ... done
[10:49:33.384] |  :  .  |  isFutureResolved() ... done
[10:49:33.384] |  :  .  checking value #2 ... done
[10:49:33.394] |  :  .  Number of remaining objects: 1
[10:49:33.394] |  :  .  checking value #2 ...
[10:49:33.394] |  :  .  |  'obj' is MultisessionFuture
[10:49:33.394] |  :  .  |  isFutureResolved() ...
[10:49:33.395] |  :  .  |  :  assertValidConnection() ...
[10:49:33.395] |  :  .  |  :  .  cluster node index: 2
[10:49:33.395] |  :  .  |  :  assertValidConnection() ... done
[10:49:33.395] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:33.395] |  :  .  |  :  .  cluster node index: 2
[10:49:33.395] |  :  .  |  :  .  [1] TRUE
[10:49:33.396] |  :  .  |  :  .  received data:
[10:49:33.396] |  :  .  |  :  .  List of 5
[10:49:33.396] |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:33.396] |  :  .  |  :  .   $ value  :List of 13
[10:49:33.396] |  :  .  |  :  .    ..$ value            :List of 1
[10:49:33.396] |  :  .  |  :  .    .. ..$ : 'table' int [1:4(1d)] 1 1 1 1
[10:49:33.396] |  :  .  |  :  .    .. .. ..- attr(*, "dimnames")=List of 1
[10:49:33.396] |  :  .  |  :  .    .. .. .. ..$ ...future.X_jj: chr [1:4] "2" "4" "6" "8"
[10:49:33.396] |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:33.396] |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:33.396] |  :  .  |  :  .    ..$ conditions       : list()
[10:49:33.396] |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:33.396] |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:33.396] |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:33.396] |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:33.396] |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:33.396] |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:33.396] |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:33.396] |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.396] |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.396] |  :  .  |  :  .    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:33.396] |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:33.396] |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:33.396] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:33.396] |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:33.396] |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:33.396] |  :  .  |  :  .    .. .. ..$ pid   : int 63865
[10:49:33.396] |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.396] |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:33.396] |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:33.396] |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:33.396] |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:33.396] |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:33.396] |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:33.396] |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:33.396] |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:33.396] |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:33.396] |  :  .  |  :  .   $ success: logi TRUE
[10:49:33.396] |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.048 0.004 0.052 0 0
[10:49:33.396] |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:33.396] |  :  .  |  :  .   $ tag    : NULL
[10:49:33.406] |  :  .  |  :  .  Received FutureResult
[10:49:33.406] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:33.407] |  :  .  |  :  .  |  Removed future from position #1
[10:49:33.407] |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:33.407] |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:33.407] |  :  .  |  :  .  Erased future from future backend
[10:49:33.407] |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.407] |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.407] |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.407] |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:33.407] |  :  .  |  isFutureResolved() ... done
[10:49:33.407] |  :  .  |  MultisessionFuture #2
[10:49:33.408] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:33.408] |  :  .  |  :  nx: 2
[10:49:33.408] |  :  .  |  :  relay: TRUE
[10:49:33.408] |  :  .  |  :  stdout: TRUE
[10:49:33.408] |  :  .  |  :  signal: TRUE
[10:49:33.408] |  :  .  |  :  resignal: FALSE
[10:49:33.408] |  :  .  |  :  force: TRUE
[10:49:33.408] |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:33.408] |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:33.408] |  :  .  |  :  until=2
[10:49:33.408] |  :  .  |  :  relaying element #2
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.409] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.409] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.409] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.409] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.409] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.410] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.410] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:33.410] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:33.410] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:33.410] |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:33.410] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.410] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.410] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.410] |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.410] |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.410] |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.411] |  :  .  |  :  value: <list>
[10:49:33.411] |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:33.411] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:33.411] |  :  .  |  :  nx: 2
[10:49:33.411] |  :  .  |  :  relay: TRUE
[10:49:33.411] |  :  .  |  :  stdout: TRUE
[10:49:33.411] |  :  .  |  :  signal: TRUE
[10:49:33.411] |  :  .  |  :  resignal: FALSE
[10:49:33.411] |  :  .  |  :  force: TRUE
[10:49:33.411] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:33.411] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:33.411] |  :  .  |  :  until=2
[10:49:33.412] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:33.412] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:33.412] |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:33.412] |  :  .  |  length: 0 (resolved future 2)
[10:49:33.412] |  :  .  checking value #2 ... done
[10:49:33.412] |  :  .  Relaying remaining futures ...
[10:49:33.412] |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:33.412] |  :  .  |  :  nx: 2
[10:49:33.412] |  :  .  |  :  relay: TRUE
[10:49:33.412] |  :  .  |  :  stdout: TRUE
[10:49:33.412] |  :  .  |  :  signal: TRUE
[10:49:33.412] |  :  .  |  :  resignal: FALSE
[10:49:33.413] |  :  .  |  :  force: TRUE
[10:49:33.413] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:33.413] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:33.413] |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:33.413] |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:33.413] |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:33.413] |  :  .  Relaying remaining futures ... done
[10:49:33.413] |  :  value() on list ... done
[10:49:33.413]  - Number of value chunks collected: 2
[10:49:33.413] Resolving 2 futures (chunks) ... DONE
[10:49:33.413] Reducing values from 2 chunks ...
[10:49:33.414]  - Number of values collected after concatenation: 2
[10:49:33.414]  - Number of values expected: 2
[10:49:33.414] Reducing values from 2 chunks ... DONE
[10:49:33.414] future_lapply() ... DONE
[[1]]
...future.X_jj
1 3 7 
2 1 1 

[[2]]
...future.X_jj
2 4 6 8 
1 1 1 1 

[10:49:33.414] getGlobalsAndPackagesXApply() ...
[10:49:33.414]  - future.globals: TRUE
[10:49:33.414] |  :  getGlobalsAndPackages() ...
[10:49:33.414] |  :  .  Searching for globals ...
[10:49:33.451] |  :  .  |  globals found: [59] ‘FUN’, ‘if’, ‘==’, ‘c’, ‘list.names’, ‘{’, ‘<-’, ‘[’, ‘as.list’, ‘substitute’, ‘-’, ‘&&’, ‘length’, ‘is.list’, ‘!’, ‘is.null’, ‘names’, ‘return’, ‘seq_along’, ‘vapply’, ‘switch’, ‘+’, ‘is.symbol’, ‘as.character’, ‘deparse’, ‘[<-’, ‘missing’, ‘match’, ‘match.arg’, ‘!=’, ‘warning’, ‘list’, ‘[[’, ‘paste’, ‘stop’, ‘integer’, ‘for’, ‘is.factor’, ‘anyNA’, ‘options’, ‘on.exit’, ‘factor’, ‘(’, ‘||’, ‘levels’, ‘as.integer’, ‘which’, ‘is.na’, ‘is.na<-’, ‘>’, ‘prod’, ‘$’, ‘.Machine’, ‘*’, ‘names<-’, ‘array’, ‘tabulate’, ‘class’, ‘class<-’
[10:49:33.452] |  :  .  Searching for globals ... DONE
[10:49:33.452] |  :  .  Resolving globals: FALSE
[10:49:33.452] |  :  .  Search for packages associated with the globals ...
[10:49:33.452] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:33.453] |  :  .  |  Packages: [1] ‘base’
[10:49:33.454] |  :  .  Search for packages associated with the globals ... DONE
[10:49:33.454] |  :  .  The total size of the 1 globals is 31.30 KiB (32048 bytes)
[10:49:33.454] |  :  .  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 31.30 KiB There is one global: ‘FUN’ (31.30 KiB of class ‘function’)
[10:49:33.454] |  :  .  Packages after dropping 'base': [0] 
[10:49:33.455] |  :  .  globals: [1] ‘FUN’
[10:49:33.455] |  :  .  packages: [0] 
[10:49:33.455] |  :  getGlobalsAndPackages() ... done
[10:49:33.455]  - globals found/used: [n=1] ‘FUN’
[10:49:33.455]  - needed namespaces: [n=0] 
[10:49:33.455] Finding globals ... DONE
[10:49:33.455]  - use_args: TRUE
[10:49:33.455]  - Getting '...' globals ...
[10:49:33.456] |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:33.456] |  :  .  recursive: 0
[10:49:33.456] |  :  .  length: 1
[10:49:33.456] |  :  .  elements: ‘...’
[10:49:33.456] |  :  .  'obj' is DotDotDotList
[10:49:33.456] |  :  .  resolve(obj, ...) ...
[10:49:33.456] |  :  .  resolve(obj, ...) ... done
[10:49:33.456] |  :  .  length: 0 (resolved future 1)
[10:49:33.456] |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:33.456]    - '...' content: [n=0] 
[10:49:33.457] List of 1
[10:49:33.457]  $ ...: list()
[10:49:33.457]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.457]  - attr(*, "where")=List of 1
[10:49:33.457]   ..$ ...:<environment: 0x564d5cd280a8> 
[10:49:33.457]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.457]  - attr(*, "resolved")= logi TRUE
[10:49:33.457]  - attr(*, "total_size")= num NA
[10:49:33.459]  - Getting '...' globals ... DONE
[10:49:33.459] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:33.460] List of 2
[10:49:33.460]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:33.460]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:33.460]  $ ...          : list()
[10:49:33.460]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.460]  - attr(*, "where")=List of 2
[10:49:33.460]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:33.460]   ..$ ...          :<environment: 0x564d5cd280a8> 
[10:49:33.460]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.460]  - attr(*, "resolved")= logi FALSE
[10:49:33.460]  - attr(*, "total_size")= num 65967
[10:49:33.462] Packages to be attached in all futures: [n=0] 
[10:49:33.462] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.462] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.463] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.463] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.463] future_lapply() ...
[10:49:33.498] |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.498] |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.498] |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.499] Number of chunks: 2
[10:49:33.499] getGlobalsAndPackagesXApply() ...
[10:49:33.499]  - future.globals: <name-value list> with names ‘list()’
[10:49:33.499]  - use_args: TRUE
[10:49:33.499] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:33.499] List of 2
[10:49:33.499]  $ ...          : list()
[10:49:33.499]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.499]  $ ...future.FUN:function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", 
[10:49:33.499]     "ifany", "always"), dnn = list.names(...), deparse.level = 1)  
[10:49:33.499]  - attr(*, "where")=List of 2
[10:49:33.499]   ..$ ...          :<environment: 0x564d5cd280a8> 
[10:49:33.499]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:33.499]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.499]  - attr(*, "resolved")= logi FALSE
[10:49:33.499]  - attr(*, "total_size")= num NA
[10:49:33.503] Packages to be attached in all futures: [n=0] 
[10:49:33.503] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.503] Number of futures (= number of chunks): 2
[10:49:33.503] Launching 2 futures (chunks) ...
[10:49:33.503] Chunk #1 of 2 ...
[10:49:33.503]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.503]  - seeds: <none>
[10:49:33.503]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.504] |  :  getGlobalsAndPackages() ...
[10:49:33.504] |  :  .  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.504] |  :  .  Resolving globals: FALSE
[10:49:33.504] |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:33.504] |  :  .  |  {
[10:49:33.504] |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.504] |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:33.504] |  :  .  |      "# as a global variable                                         "
[10:49:33.504] |  :  .  |      do.call(function(...) {
[10:49:33.504] |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.504] |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.504] |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.504] |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:33.504] |  :  .  |          }
[10:49:33.504] |  :  .  |          {
[10:49:33.504] |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.504] |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.504] |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:33.504] |  :  .  |              })
[10:49:33.504] |  :  .  |          }
[10:49:33.504] |  :  .  |      }, args = future.call.arguments)
[10:49:33.504] |  :  .  |  }
[10:49:33.504] |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.504] |  :  .  Search for packages associated with the globals ...
[10:49:33.505] |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:33.505] |  :  .  |  Packages: [1] ‘base’
[10:49:33.505] |  :  .  Search for packages associated with the globals ... DONE
[10:49:33.505] |  :  .  Packages after dropping 'base': [0] 
[10:49:33.505] |  :  .  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.505] |  :  .  packages: [0] 
[10:49:33.505] |  :  getGlobalsAndPackages() ... done
[10:49:33.506] |  :  run() for Future (‘Future’) ...
[10:49:33.506] |  :  .  state: ‘created’
[10:49:33.506] |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.506] |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.506] |  :  .  Using MultisessionFutureBackend ...
[10:49:33.506] |  :  .  |  Launching futures ...
[10:49:33.506] |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:33.506] |  :  .  |  :  .  Workers: [n=2]
[10:49:33.506] |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.508] |  :  .  |  :  .  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.508] |  :  .  |  :  .  requestWorker() ...
[10:49:33.508] |  :  .  |  :  .  |  requestNode() ...
[10:49:33.508] |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:33.508] |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:33.508] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.509] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:33.509] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:33.509] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.509] |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:33.509] |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:33.509] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.509] |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:33.509] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:33.509] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.509] |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:49:33.509] |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:33.548] |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:33.548] |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:33.548] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:33.548] |  :  .  |  :  .  |  requestWorker() ... done
[10:49:33.548] |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:33.548] |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:33.549] |  :  .  |  :  .  |  launchFuture() ...
[10:49:33.549] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:33.549] |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:33.549] |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:33.549] |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:33.549] |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:33.549] |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:33.549] |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:33.549] |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:33.549] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.549] |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:33.550] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.550] |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:33.550] |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:33.550] |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:33.551] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:33.551] |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:49:33.551] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:33.551] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:33.551] |  :  .  |  :  .  |  launchFuture() ... done
[10:49:33.551] |  :  .  |  :  .  |  MultisessionFuture started
[10:49:33.551] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:33.551] |  :  .  |  :  Launching futures ... done
[10:49:33.551] |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.551] |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:33.551] |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:33.552] Created future:
[10:49:33.553] |  :  .  isFutureResolved() ...
[10:49:33.553] |  :  .  |  assertValidConnection() ...
[10:49:33.553] |  :  .  |  :  cluster node index: 1
[10:49:33.553] |  :  .  |  assertValidConnection() ... done
[10:49:33.564] |  :  .  isFutureResolved() ... done
[10:49:33.552] MultisessionFuture:
[10:49:33.552] Label: ‘future_apply-1’
[10:49:33.552] Expression:
[10:49:33.552] {
[10:49:33.552]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.552]     "# expression in do.call(), because function called uses '...'  "
[10:49:33.552]     "# as a global variable                                         "
[10:49:33.552]     do.call(function(...) {
[10:49:33.552]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.552]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.552]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.552]             on.exit(options(oopts), add = TRUE)
[10:49:33.552]         }
[10:49:33.552]         {
[10:49:33.552]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.552]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.552]                 ...future.FUN(...future.X_jj, ...)
[10:49:33.552]             })
[10:49:33.552]         }
[10:49:33.552]     }, args = future.call.arguments)
[10:49:33.552] }
[10:49:33.552] Lazy evaluation: FALSE
[10:49:33.552] Asynchronous evaluation: TRUE
[10:49:33.552] Local evaluation: TRUE
[10:49:33.552] Environment: R_GlobalEnv
[10:49:33.552] Capture standard output: TRUE
[10:49:33.552] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:33.552] Immediate condition classes: ‘immediateCondition’
[10:49:33.552] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:33.552] Packages: <none>
[10:49:33.552] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:33.552] Resolved: FALSE
[10:49:33.552] Value: <not collected>
[10:49:33.552] Conditions captured: <none>
[10:49:33.552] Early signaling: FALSE
[10:49:33.552] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:33.552] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.564] Chunk #1 of 2 ... DONE
[10:49:33.564] Chunk #2 of 2 ...
[10:49:33.564]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.564]  - seeds: <none>
[10:49:33.564]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.565] |  :  .  getGlobalsAndPackages() ...
[10:49:33.565] |  :  .  |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.565] |  :  .  |  Resolving globals: FALSE
[10:49:33.565] |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:33.565] |  :  .  |  :  {
[10:49:33.565] |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.565] |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:33.565] |  :  .  |  :      "# as a global variable                                         "
[10:49:33.565] |  :  .  |  :      do.call(function(...) {
[10:49:33.565] |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.565] |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.565] |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.565] |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:33.565] |  :  .  |  :          }
[10:49:33.565] |  :  .  |  :          {
[10:49:33.565] |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.565] |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.565] |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:33.565] |  :  .  |  :              })
[10:49:33.565] |  :  .  |  :          }
[10:49:33.565] |  :  .  |  :      }, args = future.call.arguments)
[10:49:33.565] |  :  .  |  :  }
[10:49:33.565] |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.565] |  :  .  |  Search for packages associated with the globals ...
[10:49:33.566] |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:33.566] |  :  .  |  :  Packages: [1] ‘base’
[10:49:33.566] |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:33.566] |  :  .  |  Packages after dropping 'base': [0] 
[10:49:33.566] |  :  .  |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.566] |  :  .  |  packages: [0] 
[10:49:33.566] |  :  .  getGlobalsAndPackages() ... done
[10:49:33.567] |  :  .  run() for Future (‘Future’) ...
[10:49:33.567] |  :  .  |  state: ‘created’
[10:49:33.567] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.567] |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.567] |  :  .  |  Using MultisessionFutureBackend ...
[10:49:33.567] |  :  .  |  :  Launching futures ...
[10:49:33.567] |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:33.567] |  :  .  |  :  .  |  Workers: [n=2]
[10:49:33.567] |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.569] |  :  .  |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.569] |  :  .  |  :  .  |  requestWorker() ...
[10:49:33.569] |  :  .  |  :  .  |  :  requestNode() ...
[10:49:33.569] |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:33.569] |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:33.569] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.569] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:33.570] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:33.570] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.570] |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:33.570] |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:33.570] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.570] |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:33.570] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:33.570] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.570] |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:49:33.570] |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:33.609] |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:33.609] |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:33.609] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:33.609] |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:33.609] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:33.609] |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:33.610] |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:33.610] |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:33.610] |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:33.610] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.611] |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:33.611] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.611] |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:33.611] |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:33.611] |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:33.612] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:33.612] |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:49:33.612] |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:49:33.612] |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:33.612] |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:33.612] |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:33.612] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:33.612] |  :  .  |  :  .  Launching futures ... done
[10:49:33.612] |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.612] |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:33.612] |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:33.613] Created future:
[10:49:33.614] |  :  .  |  isFutureResolved() ...
[10:49:33.614] |  :  .  |  :  assertValidConnection() ...
[10:49:33.614] |  :  .  |  :  .  cluster node index: 2
[10:49:33.614] |  :  .  |  :  assertValidConnection() ... done
[10:49:33.625] |  :  .  |  isFutureResolved() ... done
[10:49:33.613] MultisessionFuture:
[10:49:33.613] Label: ‘future_apply-2’
[10:49:33.613] Expression:
[10:49:33.613] {
[10:49:33.613]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.613]     "# expression in do.call(), because function called uses '...'  "
[10:49:33.613]     "# as a global variable                                         "
[10:49:33.613]     do.call(function(...) {
[10:49:33.613]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.613]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.613]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.613]             on.exit(options(oopts), add = TRUE)
[10:49:33.613]         }
[10:49:33.613]         {
[10:49:33.613]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.613]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.613]                 ...future.FUN(...future.X_jj, ...)
[10:49:33.613]             })
[10:49:33.613]         }
[10:49:33.613]     }, args = future.call.arguments)
[10:49:33.613] }
[10:49:33.613] Lazy evaluation: FALSE
[10:49:33.613] Asynchronous evaluation: TRUE
[10:49:33.613] Local evaluation: TRUE
[10:49:33.613] Environment: R_GlobalEnv
[10:49:33.613] Capture standard output: TRUE
[10:49:33.613] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:33.613] Immediate condition classes: ‘immediateCondition’
[10:49:33.613] Globals: 5 objects totaling 31.53 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 31.30 KiB, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:33.613] Packages: <none>
[10:49:33.613] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:33.613] Resolved: FALSE
[10:49:33.613] Value: <not collected>
[10:49:33.613] Conditions captured: <none>
[10:49:33.613] Early signaling: FALSE
[10:49:33.613] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:33.613] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.625] Chunk #2 of 2 ... DONE
[10:49:33.625] Launching 2 futures (chunks) ... DONE
[10:49:33.625] Resolving 2 futures (chunks) ...
[10:49:33.625] |  :  .  |  value() on list ...
[10:49:33.625] |  :  .  |  :  recursive: 0
[10:49:33.626] |  :  .  |  :  length: 2
[10:49:33.626] |  :  .  |  :  
[10:49:33.626] |  :  .  |  :  Number of remaining objects: 2
[10:49:33.626] |  :  .  |  :  checking value #1 ...
[10:49:33.626] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:33.626] |  :  .  |  :  .  isFutureResolved() ...
[10:49:33.626] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:33.626] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:33.627] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:33.627] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:33.627] |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:33.627] |  :  .  |  :  .  |  :  [1] TRUE
[10:49:33.627] |  :  .  |  :  .  |  :  received data:
[10:49:33.627] |  :  .  |  :  .  |  :  List of 5
[10:49:33.627] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:33.627] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ : 'table' int [1:3(1d)] 2 1 1
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "dimnames")=List of 1
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. .. ..$ ...future.X_jj: chr [1:3] "1" "3" "7"
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 63864
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:33.627] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:33.627] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:33.627] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:33.627] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:33.627] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:33.627] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:49:33.627] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:33.627] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:33.638] |  :  .  |  :  .  |  :  Received FutureResult
[10:49:33.638] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:33.638] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:33.638] |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:33.638] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:33.638] |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:33.638] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.638] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.639] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.639] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:33.639] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:33.639] |  :  .  |  :  .  MultisessionFuture #1
[10:49:33.639] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:33.639] |  :  .  |  :  .  |  nx: 2
[10:49:33.639] |  :  .  |  :  .  |  relay: TRUE
[10:49:33.639] |  :  .  |  :  .  |  stdout: TRUE
[10:49:33.639] |  :  .  |  :  .  |  signal: TRUE
[10:49:33.639] |  :  .  |  :  .  |  resignal: FALSE
[10:49:33.639] |  :  .  |  :  .  |  force: TRUE
[10:49:33.639] |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:49:33.640] |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:49:33.640] |  :  .  |  :  .  |  until=1
[10:49:33.640] |  :  .  |  :  .  |  relaying element #1
[10:49:33.640] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.640] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.640] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.640] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.640] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.640] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.640] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.641] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.641] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.641] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.641] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.641] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.641] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:33.641] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:33.641] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:33.641] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:33.641] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.641] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.642] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.642] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.642] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.642] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.642] |  :  .  |  :  .  |  value: <list>
[10:49:33.642] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:33.642] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:33.642] |  :  .  |  :  .  |  nx: 2
[10:49:33.642] |  :  .  |  :  .  |  relay: TRUE
[10:49:33.642] |  :  .  |  :  .  |  stdout: TRUE
[10:49:33.642] |  :  .  |  :  .  |  signal: TRUE
[10:49:33.643] |  :  .  |  :  .  |  resignal: FALSE
[10:49:33.643] |  :  .  |  :  .  |  force: TRUE
[10:49:33.643] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:33.643] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:33.643] |  :  .  |  :  .  |  until=2
[10:49:33.643] |  :  .  |  :  .  |  relaying element #2
[10:49:33.643] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:33.643] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:33.643] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:49:33.643] |  :  .  |  :  .  length: 1 (resolved future 1)
[10:49:33.643] |  :  .  |  :  checking value #1 ... done
[10:49:33.644] |  :  .  |  :  checking value #2 ...
[10:49:33.644] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:33.644] |  :  .  |  :  .  isFutureResolved() ...
[10:49:33.644] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:33.644] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:33.644] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:33.655] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:33.655] |  :  .  |  :  checking value #2 ... done
[10:49:33.665] |  :  .  |  :  Number of remaining objects: 1
[10:49:33.665] |  :  .  |  :  checking value #2 ...
[10:49:33.665] |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:33.665] |  :  .  |  :  .  isFutureResolved() ...
[10:49:33.666] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:33.666] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:33.666] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:33.666] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:33.666] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:33.666] |  :  .  |  :  .  |  :  [1] TRUE
[10:49:33.667] |  :  .  |  :  .  |  :  received data:
[10:49:33.667] |  :  .  |  :  .  |  :  List of 5
[10:49:33.667] |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:33.667] |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ : 'table' int [1:4(1d)] 1 1 1 1
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..- attr(*, "dimnames")=List of 1
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. .. ..$ ...future.X_jj: chr [1:4] "2" "4" "6" "8"
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 63865
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:33.667] |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:33.667] |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:33.667] |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:33.667] |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:33.667] |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:33.667] |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:33.667] |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:33.667] |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:33.678] |  :  .  |  :  .  |  :  Received FutureResult
[10:49:33.678] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:33.678] |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:33.678] |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:33.678] |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:33.678] |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:33.678] |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:33.680] |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:33.680] |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:33.680] |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:33.680] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:33.680] |  :  .  |  :  .  MultisessionFuture #2
[10:49:33.681] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:33.681] |  :  .  |  :  .  |  nx: 2
[10:49:33.681] |  :  .  |  :  .  |  relay: TRUE
[10:49:33.681] |  :  .  |  :  .  |  stdout: TRUE
[10:49:33.681] |  :  .  |  :  .  |  signal: TRUE
[10:49:33.681] |  :  .  |  :  .  |  resignal: FALSE
[10:49:33.681] |  :  .  |  :  .  |  force: TRUE
[10:49:33.681] |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:33.681] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:33.681] |  :  .  |  :  .  |  until=2
[10:49:33.681] |  :  .  |  :  .  |  relaying element #2
[10:49:33.681] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.682] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.682] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.682] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.682] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.682] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.682] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.682] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.682] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.682] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.682] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.683] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.683] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:33.683] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:33.683] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:33.683] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:33.683] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.683] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.684] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.684] |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.684] |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.684] |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.684] |  :  .  |  :  .  |  value: <list>
[10:49:33.684] |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:33.684] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:33.685] |  :  .  |  :  .  |  nx: 2
[10:49:33.685] |  :  .  |  :  .  |  relay: TRUE
[10:49:33.685] |  :  .  |  :  .  |  stdout: TRUE
[10:49:33.685] |  :  .  |  :  .  |  signal: TRUE
[10:49:33.685] |  :  .  |  :  .  |  resignal: FALSE
[10:49:33.685] |  :  .  |  :  .  |  force: TRUE
[10:49:33.685] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:33.685] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:33.685] |  :  .  |  :  .  |  until=2
[10:49:33.686] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:33.686] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:33.686] |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:33.686] |  :  .  |  :  .  length: 0 (resolved future 2)
[10:49:33.686] |  :  .  |  :  checking value #2 ... done
[10:49:33.686] |  :  .  |  :  Relaying remaining futures ...
[10:49:33.687] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:49:33.687] |  :  .  |  :  .  |  nx: 2
[10:49:33.687] |  :  .  |  :  .  |  relay: TRUE
[10:49:33.687] |  :  .  |  :  .  |  stdout: TRUE
[10:49:33.687] |  :  .  |  :  .  |  signal: TRUE
[10:49:33.687] |  :  .  |  :  .  |  resignal: FALSE
[10:49:33.687] |  :  .  |  :  .  |  force: TRUE
[10:49:33.687] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:33.687] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:33.688] |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:33.688] |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:33.688] |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:49:33.688] |  :  .  |  :  Relaying remaining futures ... done
[10:49:33.688] |  :  .  |  value() on list ... done
[10:49:33.688]  - Number of value chunks collected: 2
[10:49:33.688] Resolving 2 futures (chunks) ... DONE
[10:49:33.689] Reducing values from 2 chunks ...
[10:49:33.689]  - Number of values collected after concatenation: 2
[10:49:33.689]  - Number of values expected: 2
[10:49:33.689] Reducing values from 2 chunks ... DONE
[10:49:33.689] future_lapply() ... DONE
[[1]]
...future.X_jj
1 3 7 
2 1 1 

[[2]]
...future.X_jj
2 4 6 8 
1 1 1 1 

[10:49:33.690] getGlobalsAndPackagesXApply() ...
[10:49:33.690]  - future.globals: TRUE
[10:49:33.690] |  :  .  |  getGlobalsAndPackages() ...
[10:49:33.690] |  :  .  |  :  Searching for globals ...
[10:49:33.692] |  :  .  |  :  .  globals found: [2] ‘FUN’, ‘UseMethod’
[10:49:33.692] |  :  .  |  :  Searching for globals ... DONE
[10:49:33.692] |  :  .  |  :  Resolving globals: FALSE
[10:49:33.692] |  :  .  |  :  Search for packages associated with the globals ...
[10:49:33.693] |  :  .  |  :  .  Packages associated with globals: [2] ‘stats’, ‘base’
[10:49:33.693] |  :  .  |  :  .  Packages: [2] ‘stats’, ‘base’
[10:49:33.693] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:33.693] |  :  .  |  :  The total size of the 1 globals is 311 bytes (311 bytes)
[10:49:33.694] |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(1, 2, 3, 4, 1, 6, 7, 8), dim = c(2L, 4L)))’) is 311 bytes There is one global: ‘FUN’ (311 bytes of class ‘function’)
[10:49:33.694] |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:49:33.694] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:33.694] |  :  .  |  :  globals: [1] ‘FUN’
[10:49:33.695] |  :  .  |  :  packages: [1] ‘stats’
[10:49:33.695] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:33.695]  - globals found/used: [n=1] ‘FUN’
[10:49:33.695]  - needed namespaces: [n=1] ‘stats’
[10:49:33.695] Finding globals ... DONE
[10:49:33.695]  - use_args: TRUE
[10:49:33.695]  - Getting '...' globals ...
[10:49:33.696] |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:33.696] |  :  .  |  :  recursive: 0
[10:49:33.696] |  :  .  |  :  length: 1
[10:49:33.696] |  :  .  |  :  elements: ‘...’
[10:49:33.696] |  :  .  |  :  'obj' is DotDotDotList
[10:49:33.696] |  :  .  |  :  resolve(obj, ...) ...
[10:49:33.696] |  :  .  |  :  resolve(obj, ...) ... done
[10:49:33.696] |  :  .  |  :  length: 0 (resolved future 1)
[10:49:33.696] |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:33.696]    - '...' content: [n=0] 
[10:49:33.697] List of 1
[10:49:33.697]  $ ...: list()
[10:49:33.697]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.697]  - attr(*, "where")=List of 1
[10:49:33.697]   ..$ ...:<environment: 0x564d5dfa29b8> 
[10:49:33.697]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.697]  - attr(*, "resolved")= logi TRUE
[10:49:33.697]  - attr(*, "total_size")= num NA
[10:49:33.699]  - Getting '...' globals ... DONE
[10:49:33.699] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:33.699] List of 2
[10:49:33.699]  $ ...future.FUN:function (x, ...)  
[10:49:33.699]  $ ...          : list()
[10:49:33.699]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.699]  - attr(*, "where")=List of 2
[10:49:33.699]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:33.699]   ..$ ...          :<environment: 0x564d5dfa29b8> 
[10:49:33.699]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.699]  - attr(*, "resolved")= logi FALSE
[10:49:33.699]  - attr(*, "total_size")= num 2586
[10:49:33.702] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:33.702] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.702] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.702] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.702] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.703] future_lapply() ...
[10:49:33.703] |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.703] |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.703] |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.704] Number of chunks: 2
[10:49:33.704] getGlobalsAndPackagesXApply() ...
[10:49:33.704]  - future.globals: <name-value list> with names ‘list()’
[10:49:33.704]  - use_args: TRUE
[10:49:33.704] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:33.704] List of 2
[10:49:33.704]  $ ...          : list()
[10:49:33.704]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.704]  $ ...future.FUN:function (x, ...)  
[10:49:33.704]  - attr(*, "where")=List of 2
[10:49:33.704]   ..$ ...          :<environment: 0x564d5dfa29b8> 
[10:49:33.704]   ..$ ...future.FUN:<environment: namespace:stats> 
[10:49:33.704]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.704]  - attr(*, "resolved")= logi FALSE
[10:49:33.704]  - attr(*, "total_size")= num NA
[10:49:33.707] Packages to be attached in all futures: [n=1] ‘stats’
[10:49:33.707] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.707] Number of futures (= number of chunks): 2
[10:49:33.708] Launching 2 futures (chunks) ...
[10:49:33.708] Chunk #1 of 2 ...
[10:49:33.708]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.708]  - seeds: <none>
[10:49:33.708]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.708] |  :  .  |  getGlobalsAndPackages() ...
[10:49:33.708] |  :  .  |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.708] |  :  .  |  :  Resolving globals: FALSE
[10:49:33.708] |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:33.708] |  :  .  |  :  .  {
[10:49:33.708] |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.708] |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:33.708] |  :  .  |  :  .      "# as a global variable                                         "
[10:49:33.708] |  :  .  |  :  .      do.call(function(...) {
[10:49:33.708] |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.708] |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.708] |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.708] |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:33.708] |  :  .  |  :  .          }
[10:49:33.708] |  :  .  |  :  .          {
[10:49:33.708] |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.708] |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.708] |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:33.708] |  :  .  |  :  .              })
[10:49:33.708] |  :  .  |  :  .          }
[10:49:33.708] |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:33.708] |  :  .  |  :  .  }
[10:49:33.709] |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.709] |  :  .  |  :  Search for packages associated with the globals ...
[10:49:33.709] |  :  .  |  :  .  Packages associated with globals: [1] ‘stats’
[10:49:33.709] |  :  .  |  :  .  Packages: [1] ‘stats’
[10:49:33.709] |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:33.710] |  :  .  |  :  Packages after dropping 'base': [1] ‘stats’
[10:49:33.710] |  :  .  |  :  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:33.710] |  :  .  |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.710] |  :  .  |  :  packages: [1] ‘stats’
[10:49:33.710] |  :  .  |  getGlobalsAndPackages() ... done
[10:49:33.710] |  :  .  |  run() for Future (‘Future’) ...
[10:49:33.710] |  :  .  |  :  state: ‘created’
[10:49:33.710] |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.711] |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.711] |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:33.711] |  :  .  |  :  .  Launching futures ...
[10:49:33.711] |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:33.711] |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:33.711] |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.712] |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.713] |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:33.713] |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:33.713] |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:33.714] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.714] |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:33.714] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:33.714] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.714] |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:49:33.714] |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:33.791] |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:33.791] |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:33.791] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:33.791] |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:33.791] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:33.792] |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:33.792] |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 1): ‘stats’
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:33.792] |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:33.793] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:33.794] |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:49:33.794] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:33.794] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:33.794] |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:33.794] |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:33.794] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:33.794] |  :  .  |  :  .  |  Launching futures ... done
[10:49:33.794] |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.794] |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:33.794] |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:33.795] Created future:
[10:49:33.795] |  :  .  |  :  isFutureResolved() ...
[10:49:33.796] |  :  .  |  :  .  assertValidConnection() ...
[10:49:33.796] |  :  .  |  :  .  |  cluster node index: 1
[10:49:33.796] |  :  .  |  :  .  assertValidConnection() ... done
[10:49:33.807] |  :  .  |  :  isFutureResolved() ... done
[10:49:33.795] MultisessionFuture:
[10:49:33.795] Label: ‘future_apply-1’
[10:49:33.795] Expression:
[10:49:33.795] {
[10:49:33.795]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.795]     "# expression in do.call(), because function called uses '...'  "
[10:49:33.795]     "# as a global variable                                         "
[10:49:33.795]     do.call(function(...) {
[10:49:33.795]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.795]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.795]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.795]             on.exit(options(oopts), add = TRUE)
[10:49:33.795]         }
[10:49:33.795]         {
[10:49:33.795]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.795]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.795]                 ...future.FUN(...future.X_jj, ...)
[10:49:33.795]             })
[10:49:33.795]         }
[10:49:33.795]     }, args = future.call.arguments)
[10:49:33.795] }
[10:49:33.795] Lazy evaluation: FALSE
[10:49:33.795] Asynchronous evaluation: TRUE
[10:49:33.795] Local evaluation: TRUE
[10:49:33.795] Environment: R_GlobalEnv
[10:49:33.795] Capture standard output: TRUE
[10:49:33.795] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:33.795] Immediate condition classes: ‘immediateCondition’
[10:49:33.795] Globals: 5 objects totaling 545 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 311 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:33.795] Packages: 1 packages (‘stats’)
[10:49:33.795] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:33.795] Resolved: FALSE
[10:49:33.795] Value: <not collected>
[10:49:33.795] Conditions captured: <none>
[10:49:33.795] Early signaling: FALSE
[10:49:33.795] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:33.795] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.807] Chunk #1 of 2 ... DONE
[10:49:33.807] Chunk #2 of 2 ...
[10:49:33.807]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.807]  - seeds: <none>
[10:49:33.807]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.808] |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:33.808] |  :  .  |  :  .  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.808] |  :  .  |  :  .  Resolving globals: FALSE
[10:49:33.808] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:33.808] |  :  .  |  :  .  |  {
[10:49:33.808] |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.808] |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:33.808] |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:33.808] |  :  .  |  :  .  |      do.call(function(...) {
[10:49:33.808] |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.808] |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.808] |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.808] |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:33.808] |  :  .  |  :  .  |          }
[10:49:33.808] |  :  .  |  :  .  |          {
[10:49:33.808] |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.808] |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.808] |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:33.808] |  :  .  |  :  .  |              })
[10:49:33.808] |  :  .  |  :  .  |          }
[10:49:33.808] |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:33.808] |  :  .  |  :  .  |  }
[10:49:33.808] |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.808] |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:33.809] |  :  .  |  :  .  |  Packages associated with globals: [1] ‘stats’
[10:49:33.809] |  :  .  |  :  .  |  Packages: [1] ‘stats’
[10:49:33.809] |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:33.809] |  :  .  |  :  .  Packages after dropping 'base': [1] ‘stats’
[10:49:33.809] |  :  .  |  :  .  Packages after dropping non-attached packages: [1] ‘stats’
[10:49:33.809] |  :  .  |  :  .  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.810] |  :  .  |  :  .  packages: [1] ‘stats’
[10:49:33.810] |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:33.810] |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:33.810] |  :  .  |  :  .  state: ‘created’
[10:49:33.810] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.810] |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.810] |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:33.810] |  :  .  |  :  .  |  Launching futures ...
[10:49:33.811] |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:33.811] |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:33.811] |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.812] |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.812] |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:33.812] |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:33.813] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:33.814] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.814] |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:49:33.814] |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:33.891] |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:33.891] |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:33.892] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:33.892] |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:33.892] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:33.892] |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:33.892] |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 1): ‘stats’
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.893] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:49:33.894] |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:49:33.895] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:33.895] |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:33.895] |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:33.895] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:33.895] |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:33.895] |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.895] |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:33.895] |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:33.895] Created future:
[10:49:33.896] |  :  .  |  :  .  isFutureResolved() ...
[10:49:33.896] |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:33.897] |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:33.897] |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:33.907] |  :  .  |  :  .  isFutureResolved() ... done
[10:49:33.895] MultisessionFuture:
[10:49:33.895] Label: ‘future_apply-2’
[10:49:33.895] Expression:
[10:49:33.895] {
[10:49:33.895]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.895]     "# expression in do.call(), because function called uses '...'  "
[10:49:33.895]     "# as a global variable                                         "
[10:49:33.895]     do.call(function(...) {
[10:49:33.895]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.895]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.895]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.895]             on.exit(options(oopts), add = TRUE)
[10:49:33.895]         }
[10:49:33.895]         {
[10:49:33.895]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.895]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.895]                 ...future.FUN(...future.X_jj, ...)
[10:49:33.895]             })
[10:49:33.895]         }
[10:49:33.895]     }, args = future.call.arguments)
[10:49:33.895] }
[10:49:33.895] Lazy evaluation: FALSE
[10:49:33.895] Asynchronous evaluation: TRUE
[10:49:33.895] Local evaluation: TRUE
[10:49:33.895] Environment: R_GlobalEnv
[10:49:33.895] Capture standard output: TRUE
[10:49:33.895] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:33.895] Immediate condition classes: ‘immediateCondition’
[10:49:33.895] Globals: 5 objects totaling 545 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 311 bytes, list ‘...future.elements_ii’ of 71 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:33.895] Packages: 1 packages (‘stats’)
[10:49:33.895] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:33.895] Resolved: FALSE
[10:49:33.895] Value: <not collected>
[10:49:33.895] Conditions captured: <none>
[10:49:33.895] Early signaling: FALSE
[10:49:33.895] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:33.895] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:33.908] Chunk #2 of 2 ... DONE
[10:49:33.908] Launching 2 futures (chunks) ... DONE
[10:49:33.908] Resolving 2 futures (chunks) ...
[10:49:33.908] |  :  .  |  :  .  value() on list ...
[10:49:33.908] |  :  .  |  :  .  |  recursive: 0
[10:49:33.908] |  :  .  |  :  .  |  length: 2
[10:49:33.908] |  :  .  |  :  .  |  
[10:49:33.908] |  :  .  |  :  .  |  Number of remaining objects: 2
[10:49:33.908] |  :  .  |  :  .  |  checking value #1 ...
[10:49:33.908] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:33.909] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:33.909] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:33.909] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:33.909] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:33.909] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:33.909] |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:33.910] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:33.910] |  :  .  |  :  .  |  :  .  |  received data:
[10:49:33.910] |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:33.910] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ : Named num [1:5] 1 1 2 4 7
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 63864
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:33.910] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:33.910] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.006 0 0.005 0 0
[10:49:33.910] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:33.910] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.921] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.922] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.922] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:33.922] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:33.922] |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:49:33.922] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:33.922] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:33.922] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:33.922] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:33.922] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:33.922] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:33.922] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:33.922] |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:33.923] |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:33.923] |  :  .  |  :  .  |  :  .  until=1
[10:49:33.923] |  :  .  |  :  .  |  :  .  relaying element #1
[10:49:33.923] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.923] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.923] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.923] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.923] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.923] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.923] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.930] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.930] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.930] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.930] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.930] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.930] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:33.930] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:33.930] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:33.931] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:33.931] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.931] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.931] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.931] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.931] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.931] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.931] |  :  .  |  :  .  |  :  .  value: <list>
[10:49:33.931] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:33.931] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:33.931] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:33.932] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:33.932] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:33.932] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:33.932] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:33.932] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:33.932] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:33.932] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:33.932] |  :  .  |  :  .  |  :  .  until=2
[10:49:33.932] |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:33.932] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:33.932] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:33.932] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:33.933] |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:49:33.933] |  :  .  |  :  .  |  checking value #1 ... done
[10:49:33.933] |  :  .  |  :  .  |  checking value #2 ...
[10:49:33.933] |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:33.933] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:33.933] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:33.933] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:33.934] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:33.940] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:33.940] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:33.940] |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:33.941] |  :  .  |  :  .  |  :  .  |  received data:
[10:49:33.941] |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:33.941] |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ : Named num [1:5] 2 3.5 5 6.5 8
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "names")= chr [1:5] "0%" "25%" "50%" "75%" ...
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 63865
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:33.941] |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:33.941] |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:49:33.941] |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:33.941] |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:33.951] |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:33.951] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:33.951] |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:33.951] |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:33.951] |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:33.952] |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:33.952] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:33.952] |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:33.952] |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:33.952] |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:33.952] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:33.952] |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:49:33.952] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:33.952] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:33.952] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:33.952] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:33.953] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:33.953] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:33.953] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:33.953] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:33.953] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:33.953] |  :  .  |  :  .  |  :  .  until=2
[10:49:33.953] |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:33.953] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.953] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.953] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.953] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.954] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.954] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.954] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.954] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.954] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.954] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.954] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.954] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.954] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:33.954] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:33.954] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:33.955] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:33.955] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.955] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.955] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.955] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:33.955] |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:33.955] |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:33.955] |  :  .  |  :  .  |  :  .  value: <list>
[10:49:33.955] |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:33.955] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:33.955] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:33.956] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:33.956] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  until=2
[10:49:33.956] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:33.956] |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:33.957] |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:49:33.957] |  :  .  |  :  .  |  checking value #2 ... done
[10:49:33.957] |  :  .  |  :  .  |  Relaying remaining futures ...
[10:49:33.957] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:33.957] |  :  .  |  :  .  |  :  .  nx: 2
[10:49:33.957] |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:33.957] |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:33.957] |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:33.957] |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:33.957] |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:33.957] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:33.957] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:33.958] |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:33.958] |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:33.958] |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:33.958] |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:49:33.958] |  :  .  |  :  .  value() on list ... done
[10:49:33.958]  - Number of value chunks collected: 2
[10:49:33.958] Resolving 2 futures (chunks) ... DONE
[10:49:33.958] Reducing values from 2 chunks ...
[10:49:33.958]  - Number of values collected after concatenation: 2
[10:49:33.958]  - Number of values expected: 2
[10:49:33.958] Reducing values from 2 chunks ... DONE
[10:49:33.959] future_lapply() ... DONE
     [,1] [,2]
0%      1  2.0
25%     1  3.5
50%     2  5.0
75%     4  6.5
100%    7  8.0
[10:49:33.959] getGlobalsAndPackagesXApply() ...
[10:49:33.959]  - future.globals: TRUE
[10:49:33.959] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:33.959] |  :  .  |  :  .  |  Searching for globals ...
[10:49:33.960] |  :  .  |  :  .  |  :  globals found: [1] ‘FUN’
[10:49:33.961] |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:33.961] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:33.961] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:33.961] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:33.961] |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:33.961] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:33.961] |  :  .  |  :  .  |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:33.962] |  :  .  |  :  .  |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3,; 4, 5), dim = c(8L, 2L), dimnames = list(row = NULL, col = c("x1",; "x2"))))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:33.962] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:33.962] |  :  .  |  :  .  |  globals: [1] ‘FUN’
[10:49:33.962] |  :  .  |  :  .  |  packages: [0] 
[10:49:33.962] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:33.962]  - globals found/used: [n=1] ‘FUN’
[10:49:33.962]  - needed namespaces: [n=0] 
[10:49:33.962] Finding globals ... DONE
[10:49:33.963]  - use_args: TRUE
[10:49:33.963]  - Getting '...' globals ...
[10:49:33.963] |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:33.963] |  :  .  |  :  .  |  recursive: 0
[10:49:33.963] |  :  .  |  :  .  |  length: 1
[10:49:33.963] |  :  .  |  :  .  |  elements: ‘...’
[10:49:33.963] |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:49:33.963] |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:49:33.964] |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:49:33.964] |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:49:33.964] |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:33.964]    - '...' content: [n=0] 
[10:49:33.964] List of 1
[10:49:33.964]  $ ...: list()
[10:49:33.964]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.964]  - attr(*, "where")=List of 1
[10:49:33.964]   ..$ ...:<environment: 0x564d59f89b18> 
[10:49:33.964]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.964]  - attr(*, "resolved")= logi TRUE
[10:49:33.964]  - attr(*, "total_size")= num NA
[10:49:33.966]  - Getting '...' globals ... DONE
[10:49:33.967] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:33.967] List of 2
[10:49:33.967]  $ ...future.FUN:function (x)  
[10:49:33.967]  $ ...          : list()
[10:49:33.967]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.967]  - attr(*, "where")=List of 2
[10:49:33.967]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:33.967]   ..$ ...          :<environment: 0x564d59f89b18> 
[10:49:33.967]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.967]  - attr(*, "resolved")= logi FALSE
[10:49:33.967]  - attr(*, "total_size")= num 2624
[10:49:33.969] Packages to be attached in all futures: [n=0] 
[10:49:33.970] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.970] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.970] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.970] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.970] future_lapply() ...
[10:49:33.971] |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.971] |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:33.971] |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.971] Number of chunks: 2
[10:49:33.971] getGlobalsAndPackagesXApply() ...
[10:49:33.971]  - future.globals: <name-value list> with names ‘list()’
[10:49:33.972]  - use_args: TRUE
[10:49:33.972] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:33.972] List of 2
[10:49:33.972]  $ ...          : list()
[10:49:33.972]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:33.972]  $ ...future.FUN:function (x)  
[10:49:33.972]  - attr(*, "where")=List of 2
[10:49:33.972]   ..$ ...          :<environment: 0x564d59f89b18> 
[10:49:33.972]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:33.972]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:33.972]  - attr(*, "resolved")= logi FALSE
[10:49:33.972]  - attr(*, "total_size")= num NA
[10:49:33.975] Packages to be attached in all futures: [n=0] 
[10:49:33.976] getGlobalsAndPackagesXApply() ... DONE
[10:49:33.976] Number of futures (= number of chunks): 2
[10:49:33.976] Launching 2 futures (chunks) ...
[10:49:33.976] Chunk #1 of 2 ...
[10:49:33.976]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:33.976]  - seeds: <none>
[10:49:33.976]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.976] |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:33.977] |  :  .  |  :  .  |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.977] |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:33.977] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:33.977] |  :  .  |  :  .  |  :  {
[10:49:33.977] |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:33.977] |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:33.977] |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:33.977] |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:33.977] |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:33.977] |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:33.977] |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:33.977] |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:33.977] |  :  .  |  :  .  |  :          }
[10:49:33.977] |  :  .  |  :  .  |  :          {
[10:49:33.977] |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:33.977] |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:33.977] |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:33.977] |  :  .  |  :  .  |  :              })
[10:49:33.977] |  :  .  |  :  .  |  :          }
[10:49:33.977] |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:33.977] |  :  .  |  :  .  |  :  }
[10:49:33.977] |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:33.977] |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:33.977] |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:33.978] |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:33.978] |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:33.978] |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:33.978] |  :  .  |  :  .  |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:33.978] |  :  .  |  :  .  |  packages: [0] 
[10:49:33.978] |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:33.979] |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:33.979] |  :  .  |  :  .  |  state: ‘created’
[10:49:33.979] |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:33.979] |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:33.979] |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:33.979] |  :  .  |  :  .  |  :  Launching futures ...
[10:49:33.979] |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:33.979] |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:33.979] |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:33.981] |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:33.981] |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:33.981] |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:33.981] |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:33.981] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:33.982] |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:49:33.983] |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:34.060] |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:34.060] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:34.061] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.061] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:34.061] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:34.061] |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:34.061] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:34.061] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:34.062] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:34.063] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.064] |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:34.064] |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:34.064] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:34.064] |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:34.064] |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.064] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:34.064] |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.064] Created future:
[10:49:34.065] |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:34.065] |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:34.065] |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.066] |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:34.076] |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:34.064] MultisessionFuture:
[10:49:34.064] Label: ‘future_apply-1’
[10:49:34.064] Expression:
[10:49:34.064] {
[10:49:34.064]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.064]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.064]     "# as a global variable                                         "
[10:49:34.064]     do.call(function(...) {
[10:49:34.064]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.064]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.064]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.064]             on.exit(options(oopts), add = TRUE)
[10:49:34.064]         }
[10:49:34.064]         {
[10:49:34.064]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.064]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.064]                 ...future.FUN(...future.X_jj, ...)
[10:49:34.064]             })
[10:49:34.064]         }
[10:49:34.064]     }, args = future.call.arguments)
[10:49:34.064] }
[10:49:34.064] Lazy evaluation: FALSE
[10:49:34.064] Asynchronous evaluation: TRUE
[10:49:34.064] Local evaluation: TRUE
[10:49:34.064] Environment: R_GlobalEnv
[10:49:34.064] Capture standard output: TRUE
[10:49:34.064] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.064] Immediate condition classes: ‘immediateCondition’
[10:49:34.064] Globals: 5 objects totaling 451 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.064] Packages: <none>
[10:49:34.064] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.064] Resolved: FALSE
[10:49:34.064] Value: <not collected>
[10:49:34.064] Conditions captured: <none>
[10:49:34.064] Early signaling: FALSE
[10:49:34.064] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.064] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.077] Chunk #1 of 2 ... DONE
[10:49:34.077] Chunk #2 of 2 ...
[10:49:34.077]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.077]  - seeds: <none>
[10:49:34.077]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.078] |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:34.078] |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.078] |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:34.078] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:34.078] |  :  .  |  :  .  |  :  .  {
[10:49:34.078] |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.078] |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:34.078] |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:34.078] |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:34.078] |  :  .  |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.078] |  :  .  |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.078] |  :  .  |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.078] |  :  .  |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:34.078] |  :  .  |  :  .  |  :  .          }
[10:49:34.078] |  :  .  |  :  .  |  :  .          {
[10:49:34.078] |  :  .  |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.078] |  :  .  |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.078] |  :  .  |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:34.078] |  :  .  |  :  .  |  :  .              })
[10:49:34.078] |  :  .  |  :  .  |  :  .          }
[10:49:34.078] |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:34.078] |  :  .  |  :  .  |  :  .  }
[10:49:34.079] |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.079] |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:34.079] |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:34.080] |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:34.080] |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:34.080] |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:34.080] |  :  .  |  :  .  |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.081] |  :  .  |  :  .  |  :  packages: [0] 
[10:49:34.081] |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:34.081] |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:34.081] |  :  .  |  :  .  |  :  state: ‘created’
[10:49:34.081] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.082] |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.082] |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:34.082] |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:34.082] |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:34.082] |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:34.082] |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.085] |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.085] |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:34.085] |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:34.085] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:34.085] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:34.086] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.086] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:34.086] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:34.086] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.086] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:34.086] |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:34.087] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.087] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:34.087] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:34.087] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.087] |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:34.087] |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:34.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:34.169] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:34.169] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:34.169] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:34.169] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:34.169] |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:34.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:34.172] |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.172] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:34.172] |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.172] Created future:
[10:49:34.173] |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:34.174] |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:34.174] |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:34.174] |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:34.184] |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:34.173] MultisessionFuture:
[10:49:34.173] Label: ‘future_apply-2’
[10:49:34.173] Expression:
[10:49:34.173] {
[10:49:34.173]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.173]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.173]     "# as a global variable                                         "
[10:49:34.173]     do.call(function(...) {
[10:49:34.173]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.173]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.173]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.173]             on.exit(options(oopts), add = TRUE)
[10:49:34.173]         }
[10:49:34.173]         {
[10:49:34.173]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.173]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.173]                 ...future.FUN(...future.X_jj, ...)
[10:49:34.173]             })
[10:49:34.173]         }
[10:49:34.173]     }, args = future.call.arguments)
[10:49:34.173] }
[10:49:34.173] Lazy evaluation: FALSE
[10:49:34.173] Asynchronous evaluation: TRUE
[10:49:34.173] Local evaluation: TRUE
[10:49:34.173] Environment: R_GlobalEnv
[10:49:34.173] Capture standard output: TRUE
[10:49:34.173] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.173] Immediate condition classes: ‘immediateCondition’
[10:49:34.173] Globals: 5 objects totaling 451 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.173] Packages: <none>
[10:49:34.173] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.173] Resolved: FALSE
[10:49:34.173] Value: <not collected>
[10:49:34.173] Conditions captured: <none>
[10:49:34.173] Early signaling: FALSE
[10:49:34.173] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.173] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.185] Chunk #2 of 2 ... DONE
[10:49:34.185] Launching 2 futures (chunks) ... DONE
[10:49:34.185] Resolving 2 futures (chunks) ...
[10:49:34.185] |  :  .  |  :  .  |  :  value() on list ...
[10:49:34.185] |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:34.185] |  :  .  |  :  .  |  :  .  length: 2
[10:49:34.186] |  :  .  |  :  .  |  :  .  
[10:49:34.186] |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:49:34.186] |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:49:34.186] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:34.186] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:34.188] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:34.188] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.188] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 63864
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.005 0 0
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:34.189] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:34.199] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:34.199] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:34.199] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:34.200] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  until=1
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.201] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.202] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:34.203] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:34.204] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:34.205] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:34.205] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:34.205] |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:49:34.205] |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:49:34.205] |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:34.205] |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:34.205] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:34.205] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:34.206] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:34.206] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:34.215] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 63865
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.003 0 0
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:34.216] |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:34.226] |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:34.227] |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:34.228] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.229] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.230] |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:34.231] |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:49:34.232] |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:34.232] |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:34.232] |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:34.233] |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:34.233] |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:49:34.233] |  :  .  |  :  .  |  :  value() on list ... done
[10:49:34.233]  - Number of value chunks collected: 2
[10:49:34.234] Resolving 2 futures (chunks) ... DONE
[10:49:34.234] Reducing values from 2 chunks ...
[10:49:34.234]  - Number of values collected after concatenation: 2
[10:49:34.234]  - Number of values expected: 2
[10:49:34.234] Reducing values from 2 chunks ... DONE
[10:49:34.234] future_lapply() ... DONE
      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5
[10:49:34.234] getGlobalsAndPackagesXApply() ...
[10:49:34.234]  - future.globals: TRUE
[10:49:34.234] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:34.235] |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:49:34.236] |  :  .  |  :  .  |  :  .  |  globals found: [1] ‘FUN’
[10:49:34.236] |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:49:34.236] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:34.236] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:34.236] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:34.236] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:34.236] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:34.237] |  :  .  |  :  .  |  :  .  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:34.237] |  :  .  |  :  .  |  :  .  The total size of the 1 globals exported for future expression (‘FUN(X = structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3,; 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 3, 3, 3,; 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5), dim = c(8L, 2L, 3L), dimnames = list(; row = NULL, col = c("x1", "x2"), C = c("cop.1", "cop.2",; "cop.3"))))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:34.237] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:34.237] |  :  .  |  :  .  |  :  .  globals: [1] ‘FUN’
[10:49:34.237] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:34.237] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:34.238]  - globals found/used: [n=1] ‘FUN’
[10:49:34.238]  - needed namespaces: [n=0] 
[10:49:34.238] Finding globals ... DONE
[10:49:34.238]  - use_args: TRUE
[10:49:34.238]  - Getting '...' globals ...
[10:49:34.238] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:34.238] |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:34.238] |  :  .  |  :  .  |  :  .  length: 1
[10:49:34.239] |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:49:34.239] |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:49:34.239] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:49:34.239] |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:49:34.239] |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:49:34.239] |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:34.239]    - '...' content: [n=0] 
[10:49:34.239] List of 1
[10:49:34.239]  $ ...: list()
[10:49:34.239]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.239]  - attr(*, "where")=List of 1
[10:49:34.239]   ..$ ...:<environment: 0x564d5d2813a0> 
[10:49:34.239]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.239]  - attr(*, "resolved")= logi TRUE
[10:49:34.239]  - attr(*, "total_size")= num NA
[10:49:34.242]  - Getting '...' globals ... DONE
[10:49:34.242] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:34.242] List of 2
[10:49:34.242]  $ ...future.FUN:function (x)  
[10:49:34.242]  $ ...          : list()
[10:49:34.242]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.242]  - attr(*, "where")=List of 2
[10:49:34.242]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:34.242]   ..$ ...          :<environment: 0x564d5d2813a0> 
[10:49:34.242]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.242]  - attr(*, "resolved")= logi FALSE
[10:49:34.242]  - attr(*, "total_size")= num 3563
[10:49:34.245] Packages to be attached in all futures: [n=0] 
[10:49:34.245] getGlobalsAndPackagesXApply() ... DONE
[10:49:34.245] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.245] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:34.245] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.245] future_lapply() ...
[10:49:34.246] |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.246] |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:34.246] |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.247] Number of chunks: 2
[10:49:34.247] getGlobalsAndPackagesXApply() ...
[10:49:34.247]  - future.globals: <name-value list> with names ‘list()’
[10:49:34.247]  - use_args: TRUE
[10:49:34.247] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:34.247] List of 2
[10:49:34.247]  $ ...          : list()
[10:49:34.247]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.247]  $ ...future.FUN:function (x)  
[10:49:34.247]  - attr(*, "where")=List of 2
[10:49:34.247]   ..$ ...          :<environment: 0x564d5d2813a0> 
[10:49:34.247]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:34.247]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.247]  - attr(*, "resolved")= logi FALSE
[10:49:34.247]  - attr(*, "total_size")= num NA
[10:49:34.251] Packages to be attached in all futures: [n=0] 
[10:49:34.251] getGlobalsAndPackagesXApply() ... DONE
[10:49:34.251] Number of futures (= number of chunks): 2
[10:49:34.251] Launching 2 futures (chunks) ...
[10:49:34.251] Chunk #1 of 2 ...
[10:49:34.252]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.252]  - seeds: <none>
[10:49:34.252]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.252] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:34.252] |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.252] |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:34.252] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:34.252] |  :  .  |  :  .  |  :  .  |  {
[10:49:34.252] |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.252] |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:34.252] |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:34.252] |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:49:34.252] |  :  .  |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.252] |  :  .  |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.252] |  :  .  |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.252] |  :  .  |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:34.252] |  :  .  |  :  .  |  :  .  |          }
[10:49:34.252] |  :  .  |  :  .  |  :  .  |          {
[10:49:34.252] |  :  .  |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.252] |  :  .  |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.252] |  :  .  |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:34.252] |  :  .  |  :  .  |  :  .  |              })
[10:49:34.252] |  :  .  |  :  .  |  :  .  |          }
[10:49:34.252] |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:34.252] |  :  .  |  :  .  |  :  .  |  }
[10:49:34.253] |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.253] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:34.253] |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:34.253] |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:34.253] |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:34.253] |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:34.254] |  :  .  |  :  .  |  :  .  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.254] |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:34.254] |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:34.254] |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:34.254] |  :  .  |  :  .  |  :  .  state: ‘created’
[10:49:34.254] |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.254] |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.254] |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:34.255] |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:49:34.255] |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:34.255] |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:34.255] |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.256] |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.256] |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:34.257] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:34.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:34.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:49:34.258] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:34.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:34.338] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:34.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:34.339] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:34.339] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:34.339] |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:34.339] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:34.339] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.340] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:34.341] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.342] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:34.342] |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:34.342] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:34.342] |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:34.342] |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.342] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:34.342] |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.342] Created future:
[10:49:34.343] |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:34.343] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:34.344] |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:34.344] |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:34.354] |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:34.342] MultisessionFuture:
[10:49:34.342] Label: ‘future_apply-1’
[10:49:34.342] Expression:
[10:49:34.342] {
[10:49:34.342]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.342]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.342]     "# as a global variable                                         "
[10:49:34.342]     do.call(function(...) {
[10:49:34.342]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.342]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.342]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.342]             on.exit(options(oopts), add = TRUE)
[10:49:34.342]         }
[10:49:34.342]         {
[10:49:34.342]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.342]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.342]                 ...future.FUN(...future.X_jj, ...)
[10:49:34.342]             })
[10:49:34.342]         }
[10:49:34.342]     }, args = future.call.arguments)
[10:49:34.342] }
[10:49:34.342] Lazy evaluation: FALSE
[10:49:34.342] Asynchronous evaluation: TRUE
[10:49:34.342] Local evaluation: TRUE
[10:49:34.342] Environment: R_GlobalEnv
[10:49:34.342] Capture standard output: TRUE
[10:49:34.342] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.342] Immediate condition classes: ‘immediateCondition’
[10:49:34.342] Globals: 5 objects totaling 595 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 247 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.342] Packages: <none>
[10:49:34.342] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.342] Resolved: FALSE
[10:49:34.342] Value: <not collected>
[10:49:34.342] Conditions captured: <none>
[10:49:34.342] Early signaling: FALSE
[10:49:34.342] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.342] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.355] Chunk #1 of 2 ... DONE
[10:49:34.355] Chunk #2 of 2 ...
[10:49:34.355]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.355]  - seeds: <none>
[10:49:34.355]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.355] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:34.355] |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :  {
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :          }
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :          {
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :              })
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :          }
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :  }
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:34.356] |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:34.357] |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:34.357] |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:34.359] |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:34.359] |  :  .  |  :  .  |  :  .  |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.359] |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:34.359] |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:34.360] |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:34.360] |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:34.361] |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.362] |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.362] |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:34.362] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:34.362] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:34.362] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.363] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:49:34.364] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:34.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:34.442] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:34.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:34.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:34.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:34.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:34.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:34.443] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:34.444] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.445] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:34.446] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:34.446] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:34.446] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:34.446] |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.446] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:34.446] |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.446] Created future:
[10:49:34.447] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:34.447] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:34.447] |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:34.448] |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:34.458] |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:34.446] MultisessionFuture:
[10:49:34.446] Label: ‘future_apply-2’
[10:49:34.446] Expression:
[10:49:34.446] {
[10:49:34.446]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.446]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.446]     "# as a global variable                                         "
[10:49:34.446]     do.call(function(...) {
[10:49:34.446]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.446]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.446]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.446]             on.exit(options(oopts), add = TRUE)
[10:49:34.446]         }
[10:49:34.446]         {
[10:49:34.446]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.446]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.446]                 ...future.FUN(...future.X_jj, ...)
[10:49:34.446]             })
[10:49:34.446]         }
[10:49:34.446]     }, args = future.call.arguments)
[10:49:34.446] }
[10:49:34.446] Lazy evaluation: FALSE
[10:49:34.446] Asynchronous evaluation: TRUE
[10:49:34.446] Local evaluation: TRUE
[10:49:34.446] Environment: R_GlobalEnv
[10:49:34.446] Capture standard output: TRUE
[10:49:34.446] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.446] Immediate condition classes: ‘immediateCondition’
[10:49:34.446] Globals: 5 objects totaling 595 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 247 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.446] Packages: <none>
[10:49:34.446] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.446] Resolved: FALSE
[10:49:34.446] Value: <not collected>
[10:49:34.446] Conditions captured: <none>
[10:49:34.446] Early signaling: FALSE
[10:49:34.446] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.446] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.458] Chunk #2 of 2 ... DONE
[10:49:34.458] Launching 2 futures (chunks) ... DONE
[10:49:34.459] Resolving 2 futures (chunks) ...
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:34.459] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:34.460] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:34.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:34.460] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:34.460] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:34.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:34.460] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 3
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 63864
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:34.461] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:34.472] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:34.473] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.474] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:34.475] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:34.476] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:34.477] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:34.478] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:34.479] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:34.489] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:34.489] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:49:34.499] |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 1
[10:49:34.499] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:49:34.499] |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:34.499] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:34.500] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:34.500] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:34.500] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:34.500] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:34.500] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 3
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : num [1:8] 3 3 3 3 3 3 3 3
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : num [1:8] 4 3 2 1 2 3 4 5
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 63865
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:34.501] |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:34.512] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:34.513] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.514] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.515] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:34.516] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:49:34.517] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:34.518] |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:34.519] |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:49:34.519] |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:49:34.519] |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:49:34.519]  - Number of value chunks collected: 2
[10:49:34.519] Resolving 2 futures (chunks) ... DONE
[10:49:34.519] Reducing values from 2 chunks ...
[10:49:34.519]  - Number of values collected after concatenation: 6
[10:49:34.519]  - Number of values expected: 6
[10:49:34.519] Reducing values from 2 chunks ... DONE
[10:49:34.519] future_lapply() ... DONE
, , C = cop.1

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

, , C = cop.2

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

, , C = cop.3

      col
row    x1 x2
  [1,]  3  4
  [2,]  3  3
  [3,]  3  2
  [4,]  3  1
  [5,]  3  2
  [6,]  3  3
  [7,]  3  4
  [8,]  3  5

[10:49:34.520] getGlobalsAndPackagesXApply() ...
[10:49:34.520]  - future.globals: TRUE
[10:49:34.520] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:34.520] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:49:34.521] |  :  .  |  :  .  |  :  .  |  :  .  globals found: [3] ‘FUN’, ‘seq_len’, ‘max’
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:34.522] |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals is 411 bytes (411 bytes)
[10:49:34.523] |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:24, dim = 2:4))’) is 411 bytes There is one global: ‘FUN’ (411 bytes of class ‘function’)
[10:49:34.523] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:34.523] |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘FUN’
[10:49:34.523] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:34.523] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:34.523]  - globals found/used: [n=1] ‘FUN’
[10:49:34.523]  - needed namespaces: [n=0] 
[10:49:34.523] Finding globals ... DONE
[10:49:34.524]  - use_args: TRUE
[10:49:34.524]  - Getting '...' globals ...
[10:49:34.524] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:34.524] |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:49:34.524] |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:49:34.524] |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:49:34.524] |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:49:34.525] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:49:34.525] |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:49:34.525] |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:49:34.525] |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:34.525]    - '...' content: [n=0] 
[10:49:34.525] List of 1
[10:49:34.525]  $ ...: list()
[10:49:34.525]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.525]  - attr(*, "where")=List of 1
[10:49:34.525]   ..$ ...:<environment: 0x564d5d6b4ea8> 
[10:49:34.525]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.525]  - attr(*, "resolved")= logi TRUE
[10:49:34.525]  - attr(*, "total_size")= num NA
[10:49:34.527]  - Getting '...' globals ... DONE
[10:49:34.528] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:34.528] List of 2
[10:49:34.528]  $ ...future.FUN:function (x)  
[10:49:34.528]  $ ...          : list()
[10:49:34.528]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.528]  - attr(*, "where")=List of 2
[10:49:34.528]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:34.528]   ..$ ...          :<environment: 0x564d5d6b4ea8> 
[10:49:34.528]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.528]  - attr(*, "resolved")= logi FALSE
[10:49:34.528]  - attr(*, "total_size")= num 3672
[10:49:34.531] Packages to be attached in all futures: [n=0] 
[10:49:34.531] getGlobalsAndPackagesXApply() ... DONE
[10:49:34.531] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.531] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:34.531] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.531] future_lapply() ...
[10:49:34.532] |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.532] |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:34.532] |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.533] Number of chunks: 2
[10:49:34.533] getGlobalsAndPackagesXApply() ...
[10:49:34.533]  - future.globals: <name-value list> with names ‘list()’
[10:49:34.533]  - use_args: TRUE
[10:49:34.533] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:34.533] List of 2
[10:49:34.533]  $ ...          : list()
[10:49:34.533]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.533]  $ ...future.FUN:function (x)  
[10:49:34.533]  - attr(*, "where")=List of 2
[10:49:34.533]   ..$ ...          :<environment: 0x564d5d6b4ea8> 
[10:49:34.533]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:49:34.533]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.533]  - attr(*, "resolved")= logi FALSE
[10:49:34.533]  - attr(*, "total_size")= num NA
[10:49:34.538] Packages to be attached in all futures: [n=0] 
[10:49:34.538] getGlobalsAndPackagesXApply() ... DONE
[10:49:34.538] Number of futures (= number of chunks): 2
[10:49:34.538] Launching 2 futures (chunks) ...
[10:49:34.539] Chunk #1 of 2 ...
[10:49:34.539]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.539]  - seeds: <none>
[10:49:34.539]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .  {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              }
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .              }
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:34.539] |  :  .  |  :  .  |  :  .  |  :  .  }
[10:49:34.540] |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.540] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:34.540] |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:49:34.540] |  :  .  |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:49:34.541] |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.542] |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.542] |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:34.542] |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:34.542] |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:34.542] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:34.542] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.544] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:49:34.545] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:34.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:34.625] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:34.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:34.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:34.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:34.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:34.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:34.626] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:34.627] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:34.628] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:34.629] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.629] Created future:
[10:49:34.630] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:34.630] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:34.631] |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:34.631] |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:34.641] |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:34.629] MultisessionFuture:
[10:49:34.629] Label: ‘future_apply-1’
[10:49:34.629] Expression:
[10:49:34.629] {
[10:49:34.629]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.629]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.629]     "# as a global variable                                         "
[10:49:34.629]     do.call(function(...) {
[10:49:34.629]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:34.629]         "# without having an '...' argument. This means '...' is treated"
[10:49:34.629]         "# as a global variable. This may happen when FUN() is an       "
[10:49:34.629]         "# anonymous function.                                          "
[10:49:34.629]         "#                                                              "
[10:49:34.629]         "# If an anonymous function, we will make sure to restore the   "
[10:49:34.629]         "# function environment of FUN() to the calling environment.    "
[10:49:34.629]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:34.629]         "# global environment, which is where globals are written.      "
[10:49:34.629]         penv <- env <- environment(...future.FUN)
[10:49:34.629]         repeat {
[10:49:34.629]             if (identical(env, globalenv()) || identical(env, 
[10:49:34.629]                 emptyenv())) 
[10:49:34.629]                 break
[10:49:34.629]             penv <- env
[10:49:34.629]             env <- parent.env(env)
[10:49:34.629]         }
[10:49:34.629]         if (identical(penv, globalenv())) {
[10:49:34.629]             environment(...future.FUN) <- environment()
[10:49:34.629]         }
[10:49:34.629]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:34.629]             !isNamespace(penv)) {
[10:49:34.629]             parent.env(penv) <- environment()
[10:49:34.629]         }
[10:49:34.629]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:34.629]         {
[10:49:34.629]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.629]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.629]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.629]                 on.exit(options(oopts), add = TRUE)
[10:49:34.629]             }
[10:49:34.629]             {
[10:49:34.629]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.629]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.629]                   ...future.FUN(...future.X_jj, ...)
[10:49:34.629]                 })
[10:49:34.629]             }
[10:49:34.629]         }
[10:49:34.629]     }, args = future.call.arguments)
[10:49:34.629] }
[10:49:34.629] Lazy evaluation: FALSE
[10:49:34.629] Asynchronous evaluation: TRUE
[10:49:34.629] Local evaluation: TRUE
[10:49:34.629] Environment: R_GlobalEnv
[10:49:34.629] Capture standard output: TRUE
[10:49:34.629] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.629] Immediate condition classes: ‘immediateCondition’
[10:49:34.629] Globals: 5 objects totaling 677 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 411 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.629] Packages: <none>
[10:49:34.629] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.629] Resolved: FALSE
[10:49:34.629] Value: <not collected>
[10:49:34.629] Conditions captured: <none>
[10:49:34.629] Early signaling: FALSE
[10:49:34.629] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.629] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.642] Chunk #1 of 2 ... DONE
[10:49:34.642] Chunk #2 of 2 ...
[10:49:34.642]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.642]  - seeds: <none>
[10:49:34.642]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.642] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:34.642] |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.643] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:34.644] |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:34.645] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:34.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:34.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:34.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:34.647] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:49:34.648] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:34.730] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:34.731] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:34.731] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:34.731] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:34.731] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:34.732] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:34.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:34.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:34.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:34.733] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.734] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:34.735] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.735] Created future:
[10:49:34.736] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:34.736] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:34.736] |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:34.736] |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:34.747] |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:34.735] MultisessionFuture:
[10:49:34.735] Label: ‘future_apply-2’
[10:49:34.735] Expression:
[10:49:34.735] {
[10:49:34.735]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.735]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.735]     "# as a global variable                                         "
[10:49:34.735]     do.call(function(...) {
[10:49:34.735]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:34.735]         "# without having an '...' argument. This means '...' is treated"
[10:49:34.735]         "# as a global variable. This may happen when FUN() is an       "
[10:49:34.735]         "# anonymous function.                                          "
[10:49:34.735]         "#                                                              "
[10:49:34.735]         "# If an anonymous function, we will make sure to restore the   "
[10:49:34.735]         "# function environment of FUN() to the calling environment.    "
[10:49:34.735]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:34.735]         "# global environment, which is where globals are written.      "
[10:49:34.735]         penv <- env <- environment(...future.FUN)
[10:49:34.735]         repeat {
[10:49:34.735]             if (identical(env, globalenv()) || identical(env, 
[10:49:34.735]                 emptyenv())) 
[10:49:34.735]                 break
[10:49:34.735]             penv <- env
[10:49:34.735]             env <- parent.env(env)
[10:49:34.735]         }
[10:49:34.735]         if (identical(penv, globalenv())) {
[10:49:34.735]             environment(...future.FUN) <- environment()
[10:49:34.735]         }
[10:49:34.735]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:34.735]             !isNamespace(penv)) {
[10:49:34.735]             parent.env(penv) <- environment()
[10:49:34.735]         }
[10:49:34.735]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:34.735]         {
[10:49:34.735]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.735]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.735]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.735]                 on.exit(options(oopts), add = TRUE)
[10:49:34.735]             }
[10:49:34.735]             {
[10:49:34.735]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.735]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.735]                   ...future.FUN(...future.X_jj, ...)
[10:49:34.735]                 })
[10:49:34.735]             }
[10:49:34.735]         }
[10:49:34.735]     }, args = future.call.arguments)
[10:49:34.735] }
[10:49:34.735] Lazy evaluation: FALSE
[10:49:34.735] Asynchronous evaluation: TRUE
[10:49:34.735] Local evaluation: TRUE
[10:49:34.735] Environment: R_GlobalEnv
[10:49:34.735] Capture standard output: TRUE
[10:49:34.735] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.735] Immediate condition classes: ‘immediateCondition’
[10:49:34.735] Globals: 5 objects totaling 677 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 411 bytes, list ‘...future.elements_ii’ of 103 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.735] Packages: <none>
[10:49:34.735] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.735] Resolved: FALSE
[10:49:34.735] Value: <not collected>
[10:49:34.735] Conditions captured: <none>
[10:49:34.735] Early signaling: FALSE
[10:49:34.735] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.735] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.747] Chunk #2 of 2 ... DONE
[10:49:34.747] Launching 2 futures (chunks) ... DONE
[10:49:34.747] Resolving 2 futures (chunks) ...
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:34.748] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:34.749] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:34.749] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:34.749] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:34.749] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:34.749] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:34.749] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 3
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:19] 1 2 3 4 5 6 7 8 9 10 ...
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:20] 1 2 3 4 5 6 7 8 9 10 ...
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:21] 1 2 3 4 5 6 7 8 9 10 ...
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 63864
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:34.750] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:34.761] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:34.761] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:34.761] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:34.761] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:34.761] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:34.761] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:34.762] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.763] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:34.764] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:34.765] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:34.766] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:34.767] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:34.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:34.768] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:34.777] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 3
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:22] 1 2 3 4 5 6 7 8 9 10 ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:23] 1 2 3 4 5 6 7 8 9 10 ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:24] 1 2 3 4 5 6 7 8 9 10 ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 63865
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:34.778] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:34.789] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:34.789] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:34.790] |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:34.791] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.792] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:34.793] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:34.794] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:34.795] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:34.798] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:34.799] |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:34.799] |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:49:34.799] |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:49:34.799]  - Number of value chunks collected: 2
[10:49:34.799] Resolving 2 futures (chunks) ... DONE
[10:49:34.799] Reducing values from 2 chunks ...
[10:49:34.799]  - Number of values collected after concatenation: 6
[10:49:34.799]  - Number of values expected: 6
[10:49:34.799] Reducing values from 2 chunks ... DONE
[10:49:34.799] future_lapply() ... DONE
     [,1]       [,2]       [,3]      
[1,] integer,19 integer,21 integer,23
[2,] integer,20 integer,22 integer,24
- apply(X, MARGIN = <character>, ...) ...
[10:49:34.800] getGlobalsAndPackagesXApply() ...
[10:49:34.800]  - future.globals: TRUE
[10:49:34.800] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:34.800] |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:49:34.801] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [1] ‘FUN’
[10:49:34.801] |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:34.801] |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:34.801] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:34.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:34.802] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:34.802] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:34.802] |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:34.802] |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:2, dim = 2:1, dimnames = list(rows = c("a",; "b"), NULL)))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:34.803] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:34.803] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [1] ‘FUN’
[10:49:34.803] |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:34.803] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:34.803]  - globals found/used: [n=1] ‘FUN’
[10:49:34.803]  - needed namespaces: [n=0] 
[10:49:34.803] Finding globals ... DONE
[10:49:34.803]  - use_args: TRUE
[10:49:34.803]  - Getting '...' globals ...
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  elements: ‘...’
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:49:34.804] |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:34.805]    - '...' content: [n=0] 
[10:49:34.805] List of 1
[10:49:34.805]  $ ...: list()
[10:49:34.805]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.805]  - attr(*, "where")=List of 1
[10:49:34.805]   ..$ ...:<environment: 0x564d5de201b0> 
[10:49:34.805]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.805]  - attr(*, "resolved")= logi TRUE
[10:49:34.805]  - attr(*, "total_size")= num NA
[10:49:34.807]  - Getting '...' globals ... DONE
[10:49:34.807] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:34.807] List of 2
[10:49:34.807]  $ ...future.FUN:function (x)  
[10:49:34.807]  $ ...          : list()
[10:49:34.807]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.807]  - attr(*, "where")=List of 2
[10:49:34.807]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:34.807]   ..$ ...          :<environment: 0x564d5de201b0> 
[10:49:34.807]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.807]  - attr(*, "resolved")= logi FALSE
[10:49:34.807]  - attr(*, "total_size")= num 2547
[10:49:34.810] Packages to be attached in all futures: [n=0] 
[10:49:34.810] getGlobalsAndPackagesXApply() ... DONE
[10:49:34.810] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.810] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:34.811] |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.811] future_lapply() ...
[10:49:34.811] |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.811] |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:34.811] |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.812] Number of chunks: 2
[10:49:34.812] getGlobalsAndPackagesXApply() ...
[10:49:34.812]  - future.globals: <name-value list> with names ‘list()’
[10:49:34.812]  - use_args: TRUE
[10:49:34.812] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:34.812] List of 2
[10:49:34.812]  $ ...          : list()
[10:49:34.812]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:34.812]  $ ...future.FUN:function (x)  
[10:49:34.812]  - attr(*, "where")=List of 2
[10:49:34.812]   ..$ ...          :<environment: 0x564d5de201b0> 
[10:49:34.812]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:34.812]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:34.812]  - attr(*, "resolved")= logi FALSE
[10:49:34.812]  - attr(*, "total_size")= num NA
[10:49:34.816] Packages to be attached in all futures: [n=0] 
[10:49:34.816] getGlobalsAndPackagesXApply() ... DONE
[10:49:34.816] Number of futures (= number of chunks): 2
[10:49:34.816] Launching 2 futures (chunks) ...
[10:49:34.817] Chunk #1 of 2 ...
[10:49:34.817]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.817]  - seeds: <none>
[10:49:34.817]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :              })
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:34.817] |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:49:34.818] |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.818] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:34.818] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:34.818] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:49:34.819] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.820] |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.820] |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:34.820] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:49:34.820] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:34.820] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:34.820] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:34.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:49:34.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:34.905] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:34.905] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:34.906] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.906] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:34.906] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:34.906] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:34.906] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:34.906] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.907] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:49:34.908] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:34.909] |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:34.909] Created future:
[10:49:34.910] |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:34.911] |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:34.911] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:34.911] |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:34.921] |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:34.909] MultisessionFuture:
[10:49:34.909] Label: ‘future_apply-1’
[10:49:34.909] Expression:
[10:49:34.909] {
[10:49:34.909]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.909]     "# expression in do.call(), because function called uses '...'  "
[10:49:34.909]     "# as a global variable                                         "
[10:49:34.909]     do.call(function(...) {
[10:49:34.909]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.909]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.909]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.909]             on.exit(options(oopts), add = TRUE)
[10:49:34.909]         }
[10:49:34.909]         {
[10:49:34.909]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.909]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.909]                 ...future.FUN(...future.X_jj, ...)
[10:49:34.909]             })
[10:49:34.909]         }
[10:49:34.909]     }, args = future.call.arguments)
[10:49:34.909] }
[10:49:34.909] Lazy evaluation: FALSE
[10:49:34.909] Asynchronous evaluation: TRUE
[10:49:34.909] Local evaluation: TRUE
[10:49:34.909] Environment: R_GlobalEnv
[10:49:34.909] Capture standard output: TRUE
[10:49:34.909] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:34.909] Immediate condition classes: ‘immediateCondition’
[10:49:34.909] Globals: 5 objects totaling 391 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:34.909] Packages: <none>
[10:49:34.909] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:34.909] Resolved: FALSE
[10:49:34.909] Value: <not collected>
[10:49:34.909] Conditions captured: <none>
[10:49:34.909] Early signaling: FALSE
[10:49:34.909] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:34.909] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:34.922] Chunk #1 of 2 ... DONE
[10:49:34.922] Chunk #2 of 2 ...
[10:49:34.922]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:34.922]  - seeds: <none>
[10:49:34.922]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              })
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:49:34.923] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:34.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:34.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:34.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:34.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:34.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:34.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:34.925] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:34.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:34.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:34.926] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:34.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:34.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:34.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:34.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:34.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:34.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:34.929] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:35.007] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:35.008] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:35.008] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.008] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:35.008] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:35.008] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:35.008] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.009] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:35.010] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:35.011] |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.011] Created future:
[10:49:35.012] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.012] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.013] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.023] |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.011] MultisessionFuture:
[10:49:35.011] Label: ‘future_apply-2’
[10:49:35.011] Expression:
[10:49:35.011] {
[10:49:35.011]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.011]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.011]     "# as a global variable                                         "
[10:49:35.011]     do.call(function(...) {
[10:49:35.011]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.011]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.011]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.011]             on.exit(options(oopts), add = TRUE)
[10:49:35.011]         }
[10:49:35.011]         {
[10:49:35.011]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.011]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.011]                 ...future.FUN(...future.X_jj, ...)
[10:49:35.011]             })
[10:49:35.011]         }
[10:49:35.011]     }, args = future.call.arguments)
[10:49:35.011] }
[10:49:35.011] Lazy evaluation: FALSE
[10:49:35.011] Asynchronous evaluation: TRUE
[10:49:35.011] Local evaluation: TRUE
[10:49:35.011] Environment: R_GlobalEnv
[10:49:35.011] Capture standard output: TRUE
[10:49:35.011] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:35.011] Immediate condition classes: ‘immediateCondition’
[10:49:35.011] Globals: 5 objects totaling 391 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 43 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.011] Packages: <none>
[10:49:35.011] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:35.011] Resolved: FALSE
[10:49:35.011] Value: <not collected>
[10:49:35.011] Conditions captured: <none>
[10:49:35.011] Early signaling: FALSE
[10:49:35.011] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.011] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.024] Chunk #2 of 2 ... DONE
[10:49:35.024] Launching 2 futures (chunks) ... DONE
[10:49:35.024] Resolving 2 futures (chunks) ...
[10:49:35.024] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ...
[10:49:35.024] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:35.024] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 2
[10:49:35.024] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  
[10:49:35.024] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:49:35.024] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:49:35.025] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:35.025] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.025] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.025] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.025] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.025] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 1
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:34"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 63864
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.026] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.037] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:35.038] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=1
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.039] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.040] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.041] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:35.042] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.043] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.054] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.054] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:35.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:49:35.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:35.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:35.064] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.065] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int 2
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi FALSE
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 63865
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.066] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:35.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:35.078] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.079] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:35.080] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.081] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.082] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.083] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.084] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:49:35.085] |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ... done
[10:49:35.086]  - Number of value chunks collected: 2
[10:49:35.086] Resolving 2 futures (chunks) ... DONE
[10:49:35.086] Reducing values from 2 chunks ...
[10:49:35.086]  - Number of values collected after concatenation: 2
[10:49:35.086]  - Number of values expected: 2
[10:49:35.086] Reducing values from 2 chunks ... DONE
[10:49:35.086] future_lapply() ... DONE
a b 
1 2 
- apply(X, ...) - dim(X) > 2 ...
[10:49:35.086] getGlobalsAndPackagesXApply() ...
[10:49:35.086]  - future.globals: TRUE
[10:49:35.087] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:35.087] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ...
[10:49:35.088] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals found: [1] ‘FUN’
[10:49:35.088] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Searching for globals ... DONE
[10:49:35.088] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:35.088] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:35.088] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:35.088] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 1 globals is 185 bytes (185 bytes)
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:12, dim = c(2L, 2L, 3L)))’) is 185 bytes There is one global: ‘FUN’ (185 bytes of class ‘function’)
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [1] ‘FUN’
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:35.089] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:35.090]  - globals found/used: [n=1] ‘FUN’
[10:49:35.090]  - needed namespaces: [n=0] 
[10:49:35.090] Finding globals ... DONE
[10:49:35.090]  - use_args: TRUE
[10:49:35.090]  - Getting '...' globals ...
[10:49:35.090] |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:35.090] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:35.090] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1
[10:49:35.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  elements: ‘...’
[10:49:35.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is DotDotDotList
[10:49:35.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ...
[10:49:35.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve(obj, ...) ... done
[10:49:35.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 1)
[10:49:35.091] |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:35.091]    - '...' content: [n=0] 
[10:49:35.091] List of 1
[10:49:35.091]  $ ...: list()
[10:49:35.091]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.091]  - attr(*, "where")=List of 1
[10:49:35.091]   ..$ ...:<environment: 0x564d5b3a54e8> 
[10:49:35.091]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.091]  - attr(*, "resolved")= logi TRUE
[10:49:35.091]  - attr(*, "total_size")= num NA
[10:49:35.094]  - Getting '...' globals ... DONE
[10:49:35.094] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:35.094] List of 2
[10:49:35.094]  $ ...future.FUN:function (x)  
[10:49:35.094]  $ ...          : list()
[10:49:35.094]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.094]  - attr(*, "where")=List of 2
[10:49:35.094]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:35.094]   ..$ ...          :<environment: 0x564d5b3a54e8> 
[10:49:35.094]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.094]  - attr(*, "resolved")= logi FALSE
[10:49:35.094]  - attr(*, "total_size")= num 2274
[10:49:35.097] Packages to be attached in all futures: [n=0] 
[10:49:35.097] getGlobalsAndPackagesXApply() ... DONE
[10:49:35.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.097] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.097] future_lapply() ...
[10:49:35.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.098] |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.099] Number of chunks: 2
[10:49:35.099] getGlobalsAndPackagesXApply() ...
[10:49:35.099]  - future.globals: <name-value list> with names ‘list()’
[10:49:35.099]  - use_args: TRUE
[10:49:35.099] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:35.099] List of 2
[10:49:35.099]  $ ...          : list()
[10:49:35.099]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.099]  $ ...future.FUN:function (x)  
[10:49:35.099]  - attr(*, "where")=List of 2
[10:49:35.099]   ..$ ...          :<environment: 0x564d5b3a54e8> 
[10:49:35.099]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:35.099]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.099]  - attr(*, "resolved")= logi FALSE
[10:49:35.099]  - attr(*, "total_size")= num NA
[10:49:35.103] Packages to be attached in all futures: [n=0] 
[10:49:35.103] getGlobalsAndPackagesXApply() ... DONE
[10:49:35.103] Number of futures (= number of chunks): 2
[10:49:35.103] Launching 2 futures (chunks) ...
[10:49:35.103] Chunk #1 of 2 ...
[10:49:35.103]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:35.103]  - seeds: <none>
[10:49:35.104]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              on.exit(options(oopts), add = TRUE)
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  ...future.FUN(...future.X_jj, ...)
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              })
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:49:35.104] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [1] ‘base’
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [1] ‘base’
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.105] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:35.106] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:49:35.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:35.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:35.107] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:35.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:35.108] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.109] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:35.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:35.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 1
[10:49:35.110] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:35.150] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:35.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:35.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:35.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:35.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:35.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:35.151] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.152] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #1
[10:49:35.153] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:35.154] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.154] Created future:
[10:49:35.155] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:35.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:35.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:35.156] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:35.166] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:35.154] MultisessionFuture:
[10:49:35.154] Label: ‘future_apply-1’
[10:49:35.154] Expression:
[10:49:35.154] {
[10:49:35.154]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.154]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.154]     "# as a global variable                                         "
[10:49:35.154]     do.call(function(...) {
[10:49:35.154]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.154]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.154]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.154]             on.exit(options(oopts), add = TRUE)
[10:49:35.154]         }
[10:49:35.154]         {
[10:49:35.154]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.154]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.154]                 ...future.FUN(...future.X_jj, ...)
[10:49:35.154]             })
[10:49:35.154]         }
[10:49:35.154]     }, args = future.call.arguments)
[10:49:35.154] }
[10:49:35.154] Lazy evaluation: FALSE
[10:49:35.154] Asynchronous evaluation: TRUE
[10:49:35.154] Local evaluation: TRUE
[10:49:35.154] Environment: R_GlobalEnv
[10:49:35.154] Capture standard output: TRUE
[10:49:35.154] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:35.154] Immediate condition classes: ‘immediateCondition’
[10:49:35.154] Globals: 5 objects totaling 450 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 102 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.154] Packages: <none>
[10:49:35.154] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:35.154] Resolved: FALSE
[10:49:35.154] Value: <not collected>
[10:49:35.154] Conditions captured: <none>
[10:49:35.154] Early signaling: FALSE
[10:49:35.154] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.154] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.167] Chunk #1 of 2 ... DONE
[10:49:35.167] Chunk #2 of 2 ...
[10:49:35.167]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:35.167]  - seeds: <none>
[10:49:35.167]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.167] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              })
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:35.168] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:35.169] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:35.170] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:35.171] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:35.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:35.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:35.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:35.172] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:35.173] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.174] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 2
[10:49:35.174] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:35.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:35.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:35.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:35.213] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:35.214] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:35.215] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #2
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 2
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:35.216] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.217] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:35.217] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.217] Created future:
[10:49:35.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.218] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.217] MultisessionFuture:
[10:49:35.217] Label: ‘future_apply-2’
[10:49:35.217] Expression:
[10:49:35.217] {
[10:49:35.217]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.217]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.217]     "# as a global variable                                         "
[10:49:35.217]     do.call(function(...) {
[10:49:35.217]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.217]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.217]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.217]             on.exit(options(oopts), add = TRUE)
[10:49:35.217]         }
[10:49:35.217]         {
[10:49:35.217]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.217]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.217]                 ...future.FUN(...future.X_jj, ...)
[10:49:35.217]             })
[10:49:35.217]         }
[10:49:35.217]     }, args = future.call.arguments)
[10:49:35.217] }
[10:49:35.217] Lazy evaluation: FALSE
[10:49:35.217] Asynchronous evaluation: TRUE
[10:49:35.217] Local evaluation: TRUE
[10:49:35.217] Environment: R_GlobalEnv
[10:49:35.217] Capture standard output: TRUE
[10:49:35.217] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:35.217] Immediate condition classes: ‘immediateCondition’
[10:49:35.217] Globals: 5 objects totaling 450 bytes (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 185 bytes, list ‘...future.elements_ii’ of 102 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.217] Packages: <none>
[10:49:35.217] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:35.217] Resolved: FALSE
[10:49:35.217] Value: <not collected>
[10:49:35.217] Conditions captured: <none>
[10:49:35.217] Early signaling: FALSE
[10:49:35.217] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.217] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.229] Chunk #2 of 2 ... DONE
[10:49:35.229] Launching 2 futures (chunks) ... DONE
[10:49:35.229] Resolving 2 futures (chunks) ...
[10:49:35.229] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ...
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 2
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of remaining objects: 2
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ...
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:35.230] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 1
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:3] 1 3 5 7 9 11
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 63864
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.004 0 0.004 0 0
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.231] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.245] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #1
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] FALSE, FALSE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] FALSE, FALSE
[10:49:35.246] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=1
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #1
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.247] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.248] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:35.249] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=1) ... done
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 1 (resolved future 1)
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #1 ... done
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ...
[10:49:35.250] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  'obj' is MultisessionFuture
[10:49:35.251] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:35.251] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:35.251] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:35.251] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:35.259] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  [1] TRUE
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  received data:
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 5
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ type   : chr "VALUE"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ value  :List of 13
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ value            :List of 1
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ : int [1:2, 1:3] 2 4 6 8 10 12
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ visible          : logi TRUE
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ stdout           : chr ""
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ conditions       : list()
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ rng              : logi FALSE
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseGlobalEnv  : NULL
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseConnections:List of 3
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ added   : NULL
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ removed : NULL
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ replaced: NULL
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ misuseDevices    : NULL
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "source")=List of 5
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ pid   : int 63865
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ random: int 2147483647
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ r_info           :List of 4
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os           : chr "unix"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ os_name      : chr "Linux"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..$ captures_utf8: logi TRUE
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..$ version          : chr "1.8"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ success: logi TRUE
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.260] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ tag    : NULL
[10:49:35.270] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Received FutureResult
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Removed future from position #1
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Erased future from future backend
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.271] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture #2
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, FALSE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, FALSE
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:35.272] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relaying element #2
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.273] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ...
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.274] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value: <list>
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value(<MultisessionFuture>, ...) ... done
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:35.275] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  until=2
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 0 (resolved future 2)
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  checking value #2 ... done
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ...
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ...
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  nx: 2
[10:49:35.276] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relay: TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  stdout: TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signal: TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resignal: FALSE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  force: TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  relayed: [n=2] TRUE, TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  queued futures: [n=2] TRUE, TRUE
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signalConditionsASAP(NULL, pos=0) ... done
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Relaying remaining futures ... done
[10:49:35.277] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value() on list ... done
[10:49:35.278]  - Number of value chunks collected: 2
[10:49:35.278] Resolving 2 futures (chunks) ... DONE
[10:49:35.278] Reducing values from 2 chunks ...
[10:49:35.278]  - Number of values collected after concatenation: 2
[10:49:35.278]  - Number of values expected: 2
[10:49:35.278] Reducing values from 2 chunks ... DONE
[10:49:35.278] future_lapply() ... DONE
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
[4,]    7    8
[5,]    9   10
[6,]   11   12
- apply(X, ...) - not all same names ...
[10:49:35.278] getGlobalsAndPackagesXApply() ...
[10:49:35.278]  - future.globals: TRUE
[10:49:35.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:35.279] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ...
[10:49:35.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals found: [10] ‘FUN’, ‘{’, ‘if’, ‘==’, ‘[’, ‘<-’, ‘names’, ‘names<-’, ‘letters’, ‘seq_along’
[10:49:35.281] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Searching for globals ... DONE
[10:49:35.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:35.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:35.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:35.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:35.282] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:35.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals is 1.28 KiB (1311 bytes)
[10:49:35.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:4, dim = c(2L, 2L)))’) is 1.28 KiB There is one global: ‘FUN’ (1.28 KiB of class ‘function’)
[10:49:35.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:35.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [1] ‘FUN’
[10:49:35.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:35.283] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:35.283]  - globals found/used: [n=1] ‘FUN’
[10:49:35.283]  - needed namespaces: [n=0] 
[10:49:35.284] Finding globals ... DONE
[10:49:35.284]  - use_args: TRUE
[10:49:35.284]  - Getting '...' globals ...
[10:49:35.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:35.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  recursive: 0
[10:49:35.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1
[10:49:35.284] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  elements: ‘...’
[10:49:35.285] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is DotDotDotList
[10:49:35.285] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ...
[10:49:35.285] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resolve(obj, ...) ... done
[10:49:35.285] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 1)
[10:49:35.285] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:35.285]    - '...' content: [n=0] 
[10:49:35.285] List of 1
[10:49:35.285]  $ ...: list()
[10:49:35.285]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.285]  - attr(*, "where")=List of 1
[10:49:35.285]   ..$ ...:<environment: 0x564d5e226ee0> 
[10:49:35.285]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.285]  - attr(*, "resolved")= logi TRUE
[10:49:35.285]  - attr(*, "total_size")= num NA
[10:49:35.288]  - Getting '...' globals ... DONE
[10:49:35.288] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:35.288] List of 2
[10:49:35.288]  $ ...future.FUN:function (x)  
[10:49:35.288]  $ ...          : list()
[10:49:35.288]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.288]  - attr(*, "where")=List of 2
[10:49:35.288]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:35.288]   ..$ ...          :<environment: 0x564d5e226ee0> 
[10:49:35.288]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.288]  - attr(*, "resolved")= logi FALSE
[10:49:35.288]  - attr(*, "total_size")= num 4449
[10:49:35.291] Packages to be attached in all futures: [n=0] 
[10:49:35.291] getGlobalsAndPackagesXApply() ... DONE
[10:49:35.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.291] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.291] future_lapply() ...
[10:49:35.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.293] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.293] Number of chunks: 2
[10:49:35.294] getGlobalsAndPackagesXApply() ...
[10:49:35.294]  - future.globals: <name-value list> with names ‘list()’
[10:49:35.294]  - use_args: TRUE
[10:49:35.294] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:35.294] List of 2
[10:49:35.294]  $ ...          : list()
[10:49:35.294]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.294]  $ ...future.FUN:function (x)  
[10:49:35.294]  - attr(*, "where")=List of 2
[10:49:35.294]   ..$ ...          :<environment: 0x564d5e226ee0> 
[10:49:35.294]   ..$ ...future.FUN:<environment: R_GlobalEnv> 
[10:49:35.294]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.294]  - attr(*, "resolved")= logi FALSE
[10:49:35.294]  - attr(*, "total_size")= num NA
[10:49:35.297] Packages to be attached in all futures: [n=0] 
[10:49:35.297] getGlobalsAndPackagesXApply() ... DONE
[10:49:35.297] Number of futures (= number of chunks): 2
[10:49:35.297] Launching 2 futures (chunks) ...
[10:49:35.297] Chunk #1 of 2 ...
[10:49:35.298]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:35.298]  - seeds: <none>
[10:49:35.298]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# without having an '...' argument. This means '...' is treated"
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# as a global variable. This may happen when FUN() is an       "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# anonymous function.                                          "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "#                                                              "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# If an anonymous function, we will make sure to restore the   "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# function environment of FUN() to the calling environment.    "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          "# global environment, which is where globals are written.      "
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          penv <- env <- environment(...future.FUN)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          repeat {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (identical(env, globalenv()) || identical(env, 
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  emptyenv())) 
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  break
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              penv <- env
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              env <- parent.env(env)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (identical(penv, globalenv())) {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              environment(...future.FUN) <- environment()
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              !isNamespace(penv)) {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              parent.env(penv) <- environment()
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  on.exit(options(oopts), add = TRUE)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    ...future.FUN(...future.X_jj, ...)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  })
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              }
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:35.298] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:49:35.299] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:35.299] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:35.299] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [0] 
[10:49:35.299] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [0] 
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:35.300] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:35.301] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:35.303] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 0
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 1
[10:49:35.304] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:35.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:35.382] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:35.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:35.383] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:35.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:35.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:35.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:35.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:35.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:35.384] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.385] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #1
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.386] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:35.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:35.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:35.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:35.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:35.387] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.387] Created future:
[10:49:35.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.388] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:35.389] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.399] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.387] MultisessionFuture:
[10:49:35.387] Label: ‘future_apply-1’
[10:49:35.387] Expression:
[10:49:35.387] {
[10:49:35.387]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.387]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.387]     "# as a global variable                                         "
[10:49:35.387]     do.call(function(...) {
[10:49:35.387]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:35.387]         "# without having an '...' argument. This means '...' is treated"
[10:49:35.387]         "# as a global variable. This may happen when FUN() is an       "
[10:49:35.387]         "# anonymous function.                                          "
[10:49:35.387]         "#                                                              "
[10:49:35.387]         "# If an anonymous function, we will make sure to restore the   "
[10:49:35.387]         "# function environment of FUN() to the calling environment.    "
[10:49:35.387]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:35.387]         "# global environment, which is where globals are written.      "
[10:49:35.387]         penv <- env <- environment(...future.FUN)
[10:49:35.387]         repeat {
[10:49:35.387]             if (identical(env, globalenv()) || identical(env, 
[10:49:35.387]                 emptyenv())) 
[10:49:35.387]                 break
[10:49:35.387]             penv <- env
[10:49:35.387]             env <- parent.env(env)
[10:49:35.387]         }
[10:49:35.387]         if (identical(penv, globalenv())) {
[10:49:35.387]             environment(...future.FUN) <- environment()
[10:49:35.387]         }
[10:49:35.387]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:35.387]             !isNamespace(penv)) {
[10:49:35.387]             parent.env(penv) <- environment()
[10:49:35.387]         }
[10:49:35.387]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:35.387]         {
[10:49:35.387]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.387]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.387]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.387]                 on.exit(options(oopts), add = TRUE)
[10:49:35.387]             }
[10:49:35.387]             {
[10:49:35.387]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.387]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.387]                   ...future.FUN(...future.X_jj, ...)
[10:49:35.387]                 })
[10:49:35.387]             }
[10:49:35.387]         }
[10:49:35.387]     }, args = future.call.arguments)
[10:49:35.387] }
[10:49:35.387] Lazy evaluation: FALSE
[10:49:35.387] Asynchronous evaluation: TRUE
[10:49:35.387] Local evaluation: TRUE
[10:49:35.387] Environment: R_GlobalEnv
[10:49:35.387] Capture standard output: TRUE
[10:49:35.387] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:35.387] Immediate condition classes: ‘immediateCondition’
[10:49:35.387] Globals: 5 objects totaling 1.49 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 1.28 KiB, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.387] Packages: <none>
[10:49:35.387] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:35.387] Resolved: FALSE
[10:49:35.387] Value: <not collected>
[10:49:35.387] Conditions captured: <none>
[10:49:35.387] Early signaling: FALSE
[10:49:35.387] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.387] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.400] Chunk #1 of 2 ... DONE
[10:49:35.400] Chunk #2 of 2 ...
[10:49:35.400]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:35.400]  - seeds: <none>
[10:49:35.400]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.400] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ...
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Resolving globals: FALSE
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ...
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# expression in do.call(), because function called uses '...'  "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      "# as a global variable                                         "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      do.call(function(...) {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# without having an '...' argument. This means '...' is treated"
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# as a global variable. This may happen when FUN() is an       "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# anonymous function.                                          "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "#                                                              "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# If an anonymous function, we will make sure to restore the   "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# function environment of FUN() to the calling environment.    "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# We assume FUN() an anonymous function if it lives in the     "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          "# global environment, which is where globals are written.      "
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          penv <- env <- environment(...future.FUN)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          repeat {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (identical(env, globalenv()) || identical(env, 
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  emptyenv())) 
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  break
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              penv <- env
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              env <- parent.env(env)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          if (identical(penv, globalenv())) {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              environment(...future.FUN) <- environment()
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              !isNamespace(penv)) {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              parent.env(penv) <- environment()
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          rm(list = c("env", "penv"), inherits = FALSE)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  on.exit(options(oopts), add = TRUE)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                    ...future.FUN(...future.X_jj, ...)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |                  })
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |              }
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |          }
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |      }, args = future.call.arguments)
[10:49:35.401] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  }
[10:49:35.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Tweak future expression to call with '...' arguments ... DONE
[10:49:35.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ...
[10:49:35.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages associated with globals: [0] 
[10:49:35.402] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages: [0] 
[10:49:35.404] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Search for packages associated with the globals ... DONE
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages after dropping 'base': [0] 
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  packages: [0] 
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getGlobalsAndPackages() ... done
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘Future’) ...
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  state: ‘created’
[10:49:35.405] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ...
[10:49:35.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ...
[10:49:35.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ...
[10:49:35.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Workers: [n=2]
[10:49:35.406] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ...
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ...
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of workers: 2
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ...
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:35.408] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Total time: 0
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Polling for a free worker ... done
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Index of first available worker: 2
[10:49:35.409] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Validate that the worker is functional ...
[10:49:35.490] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Worker is functional
[10:49:35.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ... done
[10:49:35.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:35.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ... done
[10:49:35.491] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ...
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  eraseGlobalEnvironment() ... done
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ...
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ...
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ...
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by the future expression (n = 0): <none>
[10:49:35.492] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCore() ... done
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ...
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureCapture() ... done
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ...
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting stack without first strategy: [n=0] 
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages needed by future strategies (n = 0): <none>
[10:49:35.493] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureContext() ... done
[10:49:35.494] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureData() ... done
[10:49:35.494] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.494] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Appended future to position #2
[10:49:35.494] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 2
[10:49:35.494] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() ... done
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture started
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ... done
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ... done
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ... done
[10:49:35.495] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.495] Created future:
[10:49:35.496] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ...
[10:49:35.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ...
[10:49:35.497] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  cluster node index: 2
[10:49:35.498] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  assertValidConnection() ... done
[10:49:35.508] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  isFutureResolved() ... done
[10:49:35.496] MultisessionFuture:
[10:49:35.496] Label: ‘future_apply-2’
[10:49:35.496] Expression:
[10:49:35.496] {
[10:49:35.496]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.496]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.496]     "# as a global variable                                         "
[10:49:35.496]     do.call(function(...) {
[10:49:35.496]         "# future::getGlobalsAndPackages(): FUN() uses '...' internally "
[10:49:35.496]         "# without having an '...' argument. This means '...' is treated"
[10:49:35.496]         "# as a global variable. This may happen when FUN() is an       "
[10:49:35.496]         "# anonymous function.                                          "
[10:49:35.496]         "#                                                              "
[10:49:35.496]         "# If an anonymous function, we will make sure to restore the   "
[10:49:35.496]         "# function environment of FUN() to the calling environment.    "
[10:49:35.496]         "# We assume FUN() an anonymous function if it lives in the     "
[10:49:35.496]         "# global environment, which is where globals are written.      "
[10:49:35.496]         penv <- env <- environment(...future.FUN)
[10:49:35.496]         repeat {
[10:49:35.496]             if (identical(env, globalenv()) || identical(env, 
[10:49:35.496]                 emptyenv())) 
[10:49:35.496]                 break
[10:49:35.496]             penv <- env
[10:49:35.496]             env <- parent.env(env)
[10:49:35.496]         }
[10:49:35.496]         if (identical(penv, globalenv())) {
[10:49:35.496]             environment(...future.FUN) <- environment()
[10:49:35.496]         }
[10:49:35.496]         else if (!identical(penv, emptyenv()) && !is.null(penv) && 
[10:49:35.496]             !isNamespace(penv)) {
[10:49:35.496]             parent.env(penv) <- environment()
[10:49:35.496]         }
[10:49:35.496]         rm(list = c("env", "penv"), inherits = FALSE)
[10:49:35.496]         {
[10:49:35.496]             ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.496]             if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.496]                 oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.496]                 on.exit(options(oopts), add = TRUE)
[10:49:35.496]             }
[10:49:35.496]             {
[10:49:35.496]                 lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.496]                   ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.496]                   ...future.FUN(...future.X_jj, ...)
[10:49:35.496]                 })
[10:49:35.496]             }
[10:49:35.496]         }
[10:49:35.496]     }, args = future.call.arguments)
[10:49:35.496] }
[10:49:35.496] Lazy evaluation: FALSE
[10:49:35.496] Asynchronous evaluation: TRUE
[10:49:35.496] Local evaluation: TRUE
[10:49:35.496] Environment: R_GlobalEnv
[10:49:35.496] Capture standard output: TRUE
[10:49:35.496] Capture condition classes: ‘condition’ (excluding ‘<none>’)
[10:49:35.496] Immediate condition classes: ‘immediateCondition’
[10:49:35.496] Globals: 5 objects totaling 1.49 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 1.28 KiB, list ‘...future.elements_ii’ of 47 bytes, NULL ‘...future.seeds_ii’ of 27 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.496] Packages: <none>
[10:49:35.496] L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:49:35.496] Resolved: FALSE
[10:49:35.496] Value: <not collected>
[10:49:35.496] Conditions captured: <none>
[10:49:35.496] Early signaling: FALSE
[10:49:35.496] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.496] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.509] Chunk #2 of 2 ... DONE
[10:49:35.509] Launching 2 futures (chunks) ... DONE
[10:49:35.509] Resolving 2 futures (chunks) ...
[10:49:35.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ...
[10:49:35.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:49:35.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 2
[10:49:35.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  
[10:49:35.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 2
[10:49:35.509] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ...
[10:49:35.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:35.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:35.510] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 1
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : Named int [1:2] 1 3
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..- attr(*, "names")= chr [1:2] "a" "b"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 63864
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.005 0 0.005 0 0
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.511] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:35.522] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.523] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #1
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] FALSE, FALSE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] FALSE, FALSE
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=1
[10:49:35.524] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #1
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.525] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.526] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:35.527] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=1) ... done
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 1 (resolved future 1)
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #1 ... done
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:49:35.528] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:35.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.529] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.540] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.540] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:49:35.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:49:35.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:49:35.550] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:35.551] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.551] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.551] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.552] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.562] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:49:35.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of remaining objects: 1
[10:49:35.572] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ...
[10:49:35.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  'obj' is MultisessionFuture
[10:49:35.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.573] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  [1] TRUE
[10:49:35.574] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  received data:
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 5
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ type   : chr "VALUE"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ value  :List of 13
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ value            :List of 1
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ : int [1:2] 2 4
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ visible          : logi TRUE
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ stdout           : chr ""
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ conditions       : list()
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ rng              : logi FALSE
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseGlobalEnv  : NULL
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseConnections:List of 3
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ added   : NULL
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ removed : NULL
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ replaced: NULL
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ misuseDevices    : NULL
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "source")=List of 5
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ pid   : int 63865
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ random: int 2147483647
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ r_info           :List of 4
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os           : chr "unix"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ os_name      : chr "Linux"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..$ captures_utf8: logi TRUE
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..$ version          : chr "1.8"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ success: logi TRUE
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ time   : 'proc_time' Named num [1:5] 0.034 0 0.034 0 0
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.575] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ tag    : NULL
[10:49:35.585] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Received FutureResult
[10:49:35.585] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Removed future from position #1
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Erased future from future backend
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ...
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result already collected: FutureResult
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result() for ClusterFuture ... done
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.586] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture #2
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, FALSE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, FALSE
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:35.587] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relaying element #2
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.588] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ...
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ...
[10:49:35.589] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  result already collected: FutureResult
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result() for ClusterFuture ... done
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value: <list>
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value(<MultisessionFuture>, ...) ... done
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:35.590] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  until=2
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  length: 0 (resolved future 2)
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  checking value #2 ... done
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ...
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ...
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  nx: 2
[10:49:35.591] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relay: TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  stdout: TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  signal: TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resignal: FALSE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  force: TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  relayed: [n=2] TRUE, TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  queued futures: [n=2] TRUE, TRUE
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signalConditionsASAP(NULL, pos=0) ... done
[10:49:35.592] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Relaying remaining futures ... done
[10:49:35.593] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  value() on list ... done
[10:49:35.593]  - Number of value chunks collected: 2
[10:49:35.593] Resolving 2 futures (chunks) ... DONE
[10:49:35.593] Reducing values from 2 chunks ...
[10:49:35.593]  - Number of values collected after concatenation: 2
[10:49:35.593]  - Number of values expected: 2
[10:49:35.593] Reducing values from 2 chunks ... DONE
[10:49:35.593] future_lapply() ... DONE
     [,1] [,2]
[1,]    1    2
[2,]    3    4
- example(future_apply) - reproducible RNG ...
[10:49:35.593] getGlobalsAndPackagesXApply() ...
[10:49:35.593]  - future.globals: TRUE
[10:49:35.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:35.594] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ...
[10:49:35.597] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals found: [13] ‘FUN’, ‘{’, ‘if’, ‘&&’, ‘==’, ‘length’, ‘is.numeric’, ‘is.finite’, ‘>=’, ‘missing’, ‘<-’, ‘sample.int’, ‘[’
[10:49:35.597] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Searching for globals ... DONE
[10:49:35.597] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:35.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:35.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:35.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:35.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:35.598] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 1 globals is 3.66 KiB (3746 bytes)
[10:49:35.599] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  The total size of the 1 globals exported for future expression (‘FUN(X = structure(1:4, dim = c(2L, 2L)))’) is 3.66 KiB There is one global: ‘FUN’ (3.66 KiB of class ‘function’)
[10:49:35.599] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:35.599] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [1] ‘FUN’
[10:49:35.599] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:35.599] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:35.599]  - globals found/used: [n=1] ‘FUN’
[10:49:35.599]  - needed namespaces: [n=0] 
[10:49:35.600] Finding globals ... DONE
[10:49:35.600]  - use_args: TRUE
[10:49:35.600]  - Getting '...' globals ...
[10:49:35.600] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ...resolve() on Globals ...resolve() on list ...
[10:49:35.600] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  recursive: 0
[10:49:35.600] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1
[10:49:35.600] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  elements: ‘...’
[10:49:35.600] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is DotDotDotList
[10:49:35.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ...
[10:49:35.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  resolve(obj, ...) ... done
[10:49:35.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 1)
[10:49:35.601] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  resolve() on FutureGlobals ... doneresolve() on Globals ... doneresolve() on list ... done
[10:49:35.601]    - '...' content: [n=0] 
[10:49:35.601] List of 1
[10:49:35.601]  $ ...: list()
[10:49:35.601]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.601]  - attr(*, "where")=List of 1
[10:49:35.601]   ..$ ...:<environment: 0x564d5d2af308> 
[10:49:35.601]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.601]  - attr(*, "resolved")= logi TRUE
[10:49:35.601]  - attr(*, "total_size")= num NA
[10:49:35.604]  - Getting '...' globals ... DONE
[10:49:35.604] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:49:35.604] List of 2
[10:49:35.604]  $ ...future.FUN:function (x, size, replace = FALSE, prob = NULL)  
[10:49:35.604]  $ ...          : list()
[10:49:35.604]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.604]  - attr(*, "where")=List of 2
[10:49:35.604]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:49:35.604]   ..$ ...          :<environment: 0x564d5d2af308> 
[10:49:35.604]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.604]  - attr(*, "resolved")= logi FALSE
[10:49:35.604]  - attr(*, "total_size")= num 9424
[10:49:35.607] Packages to be attached in all futures: [n=0] 
[10:49:35.607] getGlobalsAndPackagesXApply() ... DONE
[10:49:35.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.607] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.610] future_lapply() ...
[10:49:35.612] Generating random seeds ...
[10:49:35.612] Generating random seed streams for 2 elements ...
[10:49:35.612] Generating random seed streams for 2 elements ... DONE
[10:49:35.612] Generating random seeds ... DONE
[10:49:35.613] Will set RNG state on exit: 10407, 2132778533, -229766478, -128077704, -1066159635, 1948598390, 1934366329
[10:49:35.613] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.613] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.613] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.613] Number of chunks: 2
[10:49:35.613] getGlobalsAndPackagesXApply() ...
[10:49:35.613]  - future.globals: <name-value list> with names ‘list()’
[10:49:35.614]  - use_args: TRUE
[10:49:35.614] Globals to be used in all futures (chunks): [n=2] ‘...’, ‘...future.FUN’
[10:49:35.614] List of 2
[10:49:35.614]  $ ...          : list()
[10:49:35.614]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:49:35.614]  $ ...future.FUN:function (x, size, replace = FALSE, prob = NULL)  
[10:49:35.614]  - attr(*, "where")=List of 2
[10:49:35.614]   ..$ ...          :<environment: 0x564d5d2af308> 
[10:49:35.614]   ..$ ...future.FUN:<environment: namespace:base> 
[10:49:35.614]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:49:35.614]  - attr(*, "resolved")= logi FALSE
[10:49:35.614]  - attr(*, "total_size")= num NA
[10:49:35.617] Packages to be attached in all futures: [n=0] 
[10:49:35.617] getGlobalsAndPackagesXApply() ... DONE
[10:49:35.618] Number of futures (= number of chunks): 2
[10:49:35.618] Launching 2 futures (chunks) ...
[10:49:35.618] Chunk #1 of 2 ...
[10:49:35.618]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:35.618]  - seeds: [1] <seeds>
[10:49:35.618]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ...
[10:49:35.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.618] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Resolving globals: FALSE
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ...
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  {
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# expression in do.call(), because function called uses '...'  "
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      "# as a global variable                                         "
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      do.call(function(...) {
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              on.exit(options(oopts), add = TRUE)
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          {
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                    envir = globalenv(), inherits = FALSE)
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :                  ...future.FUN(...future.X_jj, ...)
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :              })
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :          }
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      }, args = future.call.arguments)
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  }
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Tweak future expression to call with '...' arguments ... DONE
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ...
[10:49:35.619] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages associated with globals: [1] ‘base’
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages: [1] ‘base’
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Search for packages associated with the globals ... DONE
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Packages after dropping 'base': [0] 
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  packages: [0] 
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getGlobalsAndPackages() ... done
[10:49:35.620] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  run() for Future (‘Future’) ...
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  state: ‘created’
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Using MultisessionFutureBackend ...
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Launching futures ...
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() for ClusterFutureBackend ...
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Workers: [n=2]
[10:49:35.621] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestWorker() ...
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestNode() ...
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of workers: 2
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ...
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.623] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 0
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Total time: 0
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Polling for a free worker ... done
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Listing all futures
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Index of first available worker: 1
[10:49:35.624] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Validate that the worker is functional ...
[10:49:35.703] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Worker is functional
[10:49:35.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ... done
[10:49:35.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ... done
[10:49:35.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ...
[10:49:35.704] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  eraseGlobalEnvironment() ... done
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ...
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ...
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ...
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by the future expression (n = 0): <none>
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCore() ... done
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ...
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureCapture() ... done
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ...
[10:49:35.705] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting stack without first strategy: [n=0] 
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages needed by future strategies (n = 0): <none>
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureContext() ... done
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  getFutureData() ... done
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.706] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Appended future to position #1
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() ... done
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  MultisessionFuture started
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ... done
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ... done
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ... done
[10:49:35.707] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.707] Created future:
[10:49:35.708] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.709] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.719] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.708] MultisessionFuture:
[10:49:35.708] Label: ‘future_apply-1’
[10:49:35.708] Expression:
[10:49:35.708] {
[10:49:35.708]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.708]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.708]     "# as a global variable                                         "
[10:49:35.708]     do.call(function(...) {
[10:49:35.708]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.708]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.708]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.708]             on.exit(options(oopts), add = TRUE)
[10:49:35.708]         }
[10:49:35.708]         {
[10:49:35.708]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.708]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.708]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:35.708]                   envir = globalenv(), inherits = FALSE)
[10:49:35.708]                 ...future.FUN(...future.X_jj, ...)
[10:49:35.708]             })
[10:49:35.708]         }
[10:49:35.708]     }, args = future.call.arguments)
[10:49:35.708] }
[10:49:35.708] Lazy evaluation: FALSE
[10:49:35.708] Asynchronous evaluation: TRUE
[10:49:35.708] Local evaluation: TRUE
[10:49:35.708] Environment: R_GlobalEnv
[10:49:35.708] Capture standard output: TRUE
[10:49:35.708] Capture condition classes: <none>
[10:49:35.708] Globals: 5 objects totaling 3.90 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 3.66 KiB, list ‘...future.elements_ii’ of 47 bytes, list ‘...future.seeds_ii’ of 67 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.708] Packages: <none>
[10:49:35.708] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:49:35.708] Resolved: FALSE
[10:49:35.708] Value: <not collected>
[10:49:35.708] Conditions captured: <none>
[10:49:35.708] Early signaling: FALSE
[10:49:35.708] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.708] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.720] Chunk #1 of 2 ... DONE
[10:49:35.720] Chunk #2 of 2 ...
[10:49:35.720]  - Adjusted option 'future.globals.maxSize': Inf -> 2 * Inf = Inf (bytes)
[10:49:35.720]  - seeds: [1] <seeds>
[10:49:35.720]  - All globals exported: [n=5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.720] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ...
[10:49:35.720] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals passed as-is: [5] ‘...’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Resolving globals: FALSE
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ...
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  {
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# expression in do.call(), because function called uses '...'  "
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      "# as a global variable                                         "
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      do.call(function(...) {
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              on.exit(options(oopts), add = TRUE)
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          {
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                    envir = globalenv(), inherits = FALSE)
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .                  ...future.FUN(...future.X_jj, ...)
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .              })
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .          }
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      }, args = future.call.arguments)
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  }
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Tweak future expression to call with '...' arguments ... DONE
[10:49:35.721] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ...
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages associated with globals: [1] ‘base’
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages: [1] ‘base’
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Search for packages associated with the globals ... DONE
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Packages after dropping 'base': [0] 
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  globals: [5] ‘future.call.arguments’, ‘...future.FUN’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  packages: [0] 
[10:49:35.722] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getGlobalsAndPackages() ... done
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  run() for Future (‘Future’) ...
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  state: ‘created’
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<multisession>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Using MultisessionFutureBackend ...
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Launching futures ...
[10:49:35.723] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  launchFuture() for ClusterFutureBackend ...
[10:49:35.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Workers: [n=2]
[10:49:35.724] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.725] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry: ‘workers-d5671f25e0dd50f4fffaf4155d82207e’
[10:49:35.725] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  requestWorker() ...
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestNode() ...
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of workers: 2
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ...
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Listing all futures
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of registered futures: 1
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Total time: 0
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Polling for a free worker ... done
[10:49:35.726] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ...
[10:49:35.727] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Listing all futures
[10:49:35.727] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 1
[10:49:35.727] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'list', earlySignal = 0) ... done
[10:49:35.727] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Index of first available worker: 2
[10:49:35.727] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Validate that the worker is functional ...
[10:49:35.806] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Worker is functional
[10:49:35.807] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  requestNode() ... done
[10:49:35.807] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.807] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  requestWorker() ... done
[10:49:35.807] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ...
[10:49:35.807] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  eraseGlobalEnvironment() ... done
[10:49:35.807] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ...
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ...
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ...
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by the future expression (n = 0): <none>
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCore() ... done
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ...
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureCapture() ... done
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ...
[10:49:35.808] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Getting stack without first strategy: [n=0] 
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Packages needed by future strategies (n = 0): <none>
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  getFutureContext() ... done
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  getFutureData() ... done
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ...
[10:49:35.809] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Appended future to position #2
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Number of registered futures: 2
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'add', earlySignal = 0) ... done
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  launchFuture() ... done
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  MultisessionFuture started
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  launchFuture() for ClusterFutureBackend ... done
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Launching futures ... done
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Future launched: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Using MultisessionFutureBackend ... done
[10:49:35.810] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  run() for Future (‘MultisessionFuture’) ... done
[10:49:35.810] Created future:
[10:49:35.811] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ...
[10:49:35.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ...
[10:49:35.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  cluster node index: 2
[10:49:35.812] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  assertValidConnection() ... done
[10:49:35.822] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  isFutureResolved() ... done
[10:49:35.811] MultisessionFuture:
[10:49:35.811] Label: ‘future_apply-2’
[10:49:35.811] Expression:
[10:49:35.811] {
[10:49:35.811]     "# future::getGlobalsAndPackages(): wrapping the original future"
[10:49:35.811]     "# expression in do.call(), because function called uses '...'  "
[10:49:35.811]     "# as a global variable                                         "
[10:49:35.811]     do.call(function(...) {
[10:49:35.811]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:49:35.811]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:49:35.811]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:49:35.811]             on.exit(options(oopts), add = TRUE)
[10:49:35.811]         }
[10:49:35.811]         {
[10:49:35.811]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:49:35.811]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:49:35.811]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:49:35.811]                   envir = globalenv(), inherits = FALSE)
[10:49:35.811]                 ...future.FUN(...future.X_jj, ...)
[10:49:35.811]             })
[10:49:35.811]         }
[10:49:35.811]     }, args = future.call.arguments)
[10:49:35.811] }
[10:49:35.811] Lazy evaluation: FALSE
[10:49:35.811] Asynchronous evaluation: TRUE
[10:49:35.811] Local evaluation: TRUE
[10:49:35.811] Environment: R_GlobalEnv
[10:49:35.811] Capture standard output: TRUE
[10:49:35.811] Capture condition classes: <none>
[10:49:35.811] Globals: 5 objects totaling 3.90 KiB (DotDotDotList ‘future.call.arguments’ of 97 bytes, function ‘...future.FUN’ of 3.66 KiB, list ‘...future.elements_ii’ of 47 bytes, list ‘...future.seeds_ii’ of 67 bytes, numeric ‘...future.globals.maxSize’ of 39 bytes)
[10:49:35.811] Packages: <none>
[10:49:35.811] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:49:35.811] Resolved: FALSE
[10:49:35.811] Value: <not collected>
[10:49:35.811] Conditions captured: <none>
[10:49:35.811] Early signaling: FALSE
[10:49:35.811] Owner process: 4788763abfc45b262382b22ed5276c79
[10:49:35.811] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’
[10:49:35.823] Chunk #2 of 2 ... DONE
[10:49:35.823] Launching 2 futures (chunks) ... DONE
[10:49:35.823] Resolving 2 futures (chunks) ...
[10:49:35.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ...
[10:49:35.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  recursive: 0
[10:49:35.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  length: 2
[10:49:35.823] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  
[10:49:35.824] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 2
[10:49:35.824] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ...
[10:49:35.824] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:35.824] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.824] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.824] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 1
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2] 3 1
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi TRUE
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "fc422533523a236fbb83e5c0aebb3b83"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 63864
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.004 0 0
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.825] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 1
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #1
[10:49:35.836] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] FALSE, FALSE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] FALSE, FALSE
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=1
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #1
[10:49:35.837] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:35.838] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.839] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=1) ... done
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 1 (resolved future 1)
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #1 ... done
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:35.840] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:35.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.841] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.851] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.852] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:35.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Number of remaining objects: 1
[10:49:35.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ...
[10:49:35.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  'obj' is MultisessionFuture
[10:49:35.862] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ...
[10:49:35.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ...
[10:49:35.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  assertValidConnection() ... done
[10:49:35.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ...
[10:49:35.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  cluster node index: 2
[10:49:35.863] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  [1] TRUE
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  received data:
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 5
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ type   : chr "VALUE"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ value  :List of 13
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ value            :List of 1
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ : int [1:2] 2 4
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ visible          : logi TRUE
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ stdout           : chr ""
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ conditions       : list()
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ rng              : logi TRUE
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseGlobalEnv  : NULL
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseConnections:List of 3
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ added   : NULL
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ removed : NULL
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ replaced: NULL
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ misuseDevices    : NULL
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ started          : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ finished         : POSIXct[1:1], format: "2025-05-06 10:49:35"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ session_uuid     : chr "d2a216e9cc3f1b6986fec5831046dece"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "source")=List of 5
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ host  : Named chr "5995ac22cdae"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1012-azure" "#12~24.04.1-Ubuntu SMP Mon Mar 10 19:00:39 UTC 2025" "5995ac22cdae" ...
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ pid   : int 63865
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ time  : POSIXct[1:1], format: "2025-05-06 10:49:33"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ random: int 2147483647
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ r_info           :List of 4
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..$ : int [1:3] 4 5 0
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os           : chr "unix"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ os_name      : chr "Linux"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..$ captures_utf8: logi TRUE
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..$ version          : chr "1.8"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr "FutureResult"
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ success: logi TRUE
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ time   : 'proc_time' Named num [1:5] 0.003 0 0.003 0 0
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "names")= chr [1:5] "user.self" "sys.self" "elapsed" "user.child" ...
[10:49:35.864] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ tag    : NULL
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Received FutureResult
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ...
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Removed future from position #1
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of registered futures: 0
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  FutureRegistry('workers-d5671f25e0dd50f4fffaf4155d82207e', action = 'remove', earlySignal = 0) ... done
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Erased future from future backend
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  receiveMessageFromWorker() for ClusterFuture ... done
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  isFutureResolved() ... done
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  MultisessionFuture #2
[10:49:35.877] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, FALSE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, FALSE
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relaying element #2
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.878] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ...
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ...
[10:49:35.879] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  result already collected: FutureResult
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  result() for ClusterFuture ... done
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value: <list>
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  value(<MultisessionFuture>, ...) ... done
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.880] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  until=2
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  length: 0 (resolved future 2)
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  checking value #2 ... done
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ...
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ...
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  nx: 2
[10:49:35.881] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relay: TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stdout: TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  signal: TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  resignal: FALSE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  force: TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
 - flush all
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  relayed: [n=2] TRUE, TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  queued futures: [n=2] TRUE, TRUE
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  signalConditionsASAP(NULL, pos=0) ... done
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Relaying remaining futures ... done
[10:49:35.882] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  value() on list ... done
[10:49:35.882]  - Number of value chunks collected: 2
[10:49:35.883] Resolving 2 futures (chunks) ... DONE
[10:49:35.883] Reducing values from 2 chunks ...
[10:49:35.883]  - Number of values collected after concatenation: 2
[10:49:35.883]  - Number of values expected: 2
[10:49:35.883] Reducing values from 2 chunks ... DONE
[10:49:35.883] future_lapply() ... DONE
     [,1] [,2]
[1,]    3    2
[2,]    1    4
[10:49:35.883] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.883] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:35.883] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  New stack:
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:35.884] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Old stack:
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "init")= chr "done"
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "untweakable")= chr "persistent"
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(strategy)
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5deea2f8> 
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:35.886] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:35.889] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Not identical
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 2
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ current:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .      gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "init")= chr "done"
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "untweakable")= chr "persistent"
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(strategy)
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "backend")=Classes 'MultisessionFutureBackend', 'ClusterFutureBackend', 'MultiprocessFutureBackend', 'FutureBackend', 'environment' <environment: 0x564d5deea2f8> 
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "factory")=function (workers = availableCores(), interrupts = TRUE, ...)  
[10:49:35.890] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. .. ..- attr(*, "tweakable")= chr [1:10] "workers" "interrupts" "gc" "earlySignal" ...
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Formals differ
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Future strategies differ at level 1
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): Setting new future strategy stack:
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of future strategies:
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  1. sequential:
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:35.895] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of 1
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |    ..- attr(*, "call")= language plan(sequential)
[10:49:35.896] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:35.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ...
[10:49:35.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Getting current ("next") strategy: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:49:35.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stopWorkers() for MultisessionFutureBackend ...
[10:49:35.898] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Interrupt active futures ...
[10:49:35.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Number of futures: 0
[10:49:35.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Interrupt active futures ... done
[10:49:35.899] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Clear future registry ...
[10:49:35.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Clear future registry ... done
[10:49:35.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stop cluster workers ...
[10:49:35.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ...
[10:49:35.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Cluster to shut down:
[10:49:35.900] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.5.0 (2025-04-11), platform x86_64-pc-linux-gnu)
[10:49:35.913] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Stopped cluster: ‘NULL’
[10:49:35.913] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Stopping existing cluster ... done
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stop cluster workers ... done
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  stopWorkers() for MultisessionFutureBackend ... done
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Legacy shutdown of cluster workers ...
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stopping existing cluster ...
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  No pre-existing cluster. Skipping
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  Stopping existing cluster ... done
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Legacy shutdown of cluster workers ... done
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_cleanup(‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’, cleanup = NA) ... done
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ...
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.914] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "call")= language plan(sequential)
[10:49:35.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  init: NULL
[10:49:35.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): plan_init() of ‘sequential’, ‘uniprocess’, ‘future’, ‘function’ ... done
[10:49:35.916] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<character>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Getting current ("next") strategy: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Backend function: <‘NULL’>
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  Backend: <‘SequentialFutureBackend’, ‘FutureBackend’, ‘environment’>
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): nbrOfWorkers() = 1
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:35.917] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<sequential>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
*** strategy = ‘multisession’ ... done
> 
> 
> message("*** apply(X, ...) - prod(dim(X)) == 0 [non-parallel] ...")
*** apply(X, ...) - prod(dim(X)) == 0 [non-parallel] ...
> X <- matrix(nrow = 0L, ncol = 2L)
> y0 <- apply(X, MARGIN = 1L, FUN = identity)
> y1 <- future_apply(X, MARGIN = 1L, FUN = identity)
> print(y1)
logical(0)
> stopifnot(identical(y1, y0))
>   
> 
> message("*** exceptions ...")
*** exceptions ...
> 
> ## Error: dim(X) must have a positive length
> res <- tryCatch({
+   y <- future_apply(1L, MARGIN = 1L, FUN = identity)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## Error: 'X' must have named dimnames
> X <- matrix(1:2, nrow = 2L, ncol = 1L)
> res <- tryCatch({
+   y <- future_apply(X, MARGIN = "rows", FUN = identity)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## Error: not all elements of 'MARGIN' are names of dimensions
> X <- matrix(1:2, nrow = 2L, ncol = 1L, dimnames = list(rows = c("a", "b")))
> res <- tryCatch({
+   y <- future_apply(X, MARGIN = "cols", FUN = identity)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> 
> message("*** future_apply() ... DONE")
*** future_apply() ... DONE
> 
> source("incl/end.R")
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<name>, .skip = FALSE, .cleanup = NA, .init = TRUE) ...
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ...
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ...
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  New stack:
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:35.919] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Old stack:
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  List of 1
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   $ :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :    ..- attr(*, "call")= language plan(sequential)
[10:49:35.921] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :   - attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  Not identical
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ...
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  List of 2
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ target :function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:5] "FutureStrategy" "sequential" "uniprocess" "future" ...
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .   $ current:function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame())  
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "factory")=function (..., maxSizeOfObjects = +Inf)  
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    .. ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "tweakable")= chr [1:5] "maxSizeOfObjects" "earlySignal" "gc" "interrupts" ...
[10:49:35.924] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .    ..- attr(*, "call")= language plan(sequential)
[10:49:35.927] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  all.equal() for future ... done
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  all.equal() for FutureStrategyList ... done
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  plan(): Skip setting new future strategy stack because it is the same as the current one:
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  List of future strategies:
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  1. sequential:
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |     - args: function (..., gc = FALSE, earlySignal = FALSE, envir = parent.frame(), workers = "<NULL>")
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |     - tweaked: FALSE
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |     - call: plan(sequential)
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  plan(): plan_set(<1 strategies>, skip = FALSE, cleanup = NA, init = TRUE) ... done
[10:49:35.928] |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  .  |  :  plan(<FutureStrategy>, .skip = FALSE, .cleanup = NA, .init = TRUE) ... done
> 
